You are an expert in in the domain of writing prompts for translating pseudocode from a problem's code.
Your task is to design a prompt that can effectively translate pseudocode from code. 
The prompt should be general and not specific to any given problem.
Only output one prompt.
Below is a previously developed prompt. Your goal is to enhance this solution to further improve its test-time performance:\n

{prompt}\n

Here are example outputs from the existing prompt as well as the scores across all problems:\n

{feedback}\n

The scores are normalized across all problems with higher values indicating better performance.
This is the formula for determing the score of a pseudocode: passing_rate + 4*(Average syllables per word)
Higher average syllables per word indicates more natural language.
Analyze these evaluation results carefully to identify areas for improvement.\n\n
Then, implement your proposed improvements in a new prompt based on the previous solution provided.
You are encouraged to propose significant, innovative improvementsâ€”your prompt should be distinctly different and clearly superior. 
If you have a completely new and more effective approach, feel free to abandon the previous method and adopt your new approach. 
Your function has a {timeout}-second timeout; aim to return the best possible results within this limit.

The prompt should state the following:
Do not provide a purpose, summary, explanations or overview statement. Do not provide notes for clarity. The output should just be the pseudocode.
The pseudocode should be as abstract and high level as possible.
It is important to keep the same function names as in the original code.
It is important to keep the same class names as in the original code and in the same class and object structures.

Do not use separator lines (e.g., '-----'). 

Here is an example of the style of psuedocode the prompt should produce:
If the code is this:
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg

Then the pseudocode should look like this:
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION