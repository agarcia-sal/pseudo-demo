You are an expert in in the domain of writing prompts for translating code into pseudocode.
Your task is to design a prompt that can effectively translate code into pseudocode. 
The prompt should be general and not specific to any given problem.
Only output one prompt.
Below is a previously developed prompt. Your goal is to enhance this solution to further improve its test-time performance:\n

{prompt}\n

Here are the evaluation scores of the existing prompt for each test case and example:\n

{feedback}\n

Higher scores indicating better performance. Higher scores indicate longer lines for the pseudocode, since more natural language will use up for characters.
The scores penalize pseudocode that has too short of a line count however, so that multiple lines are not put on the same line.
Analyze these evaluation results carefully to identify areas for improvement.\n\n
Then, implement your proposed improvements in a new prompt based on the previous solution provided.
You are encouraged to propose significant, innovative improvements—your prompt should be distinctly different and clearly superior. 
If you have a completely new and more effective approach, feel free to abandon the previous method and adopt your new approach. 
Your function has a {timeout}-second timeout; aim to return the best possible results within this limit.

The prompt should state the following:
The pseudocode should be easy to read and understandable. Involve more natural language and make it compact and high-level.
Do not provide a purpose, summary, explanations or overview statement. Do not provide notes for clarity. The output should just be the pseudocode.
Use concise pseudocode.
Prefer one-liners, symbolic representations, and abbreviations. Follow the format:

1. x ← 0
2. while x < n: x++

Do not use separator lines (e.g., '-----'). 

Here is an example of the style psuedocode the prompt should produce:
in function main
let n be integer
read n
let A be vector of integers 
set size of A = n
read n elements into A 
for all elements in A
	set min_i to i 
	forj=i+1 to size of A exclusive
		set min_i to j if A[min_i] > A[j]
	swap A[i], A[min_i]
print all elements of A