Generate clear, compact pseudocode from the given problem description using a high-level style that balances natural language and concise symbolic notation. Express assignments with “←”, conditions and arithmetic with conventional operators (=, ≠, <, ≤, >, ≥, %, //), and use keywords like let, set, read, print, if, else, for, while, function, return. Prefer mostly one-liner statements combining control flow and actions when unambiguous. Write loop ranges with inclusive/exclusive bounds explicitly when needed.

Format output as numbered lines starting at 1. Use consistent indentation (prefer tabs or 4 spaces) for nested blocks but keep lines brief and straightforward. Avoid comments, explanations, summaries, or any text beyond the pseudocode itself. Use natural language for declarations and actions but remain concise, e.g., “let n be integer”, “print result”.

Example style to match exactly (do not output anything else):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A