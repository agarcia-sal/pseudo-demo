Generate clear, concise, and easily understandable pseudocode from the given problem description. Use natural language combined with symbolic notation and concise abbreviations, focusing on a compact, high-level style that conveys logic efficiently. 

Do not include any purpose, explanation, comments, summary, notes, or extraneous text—only the pseudocode itself.

Format the pseudocode as numbered lines starting from 1. Prefer one-line statements wherever possible, including simple assignments, loops, conditions, and function calls. Use keywords like "let," "set," "read," and "print" to express intent naturally. Express loops and conditionals compactly, for example:

1. let x be 0  
2. while x < n: x++  

Use indentation to show nested blocks, but keep every statement brief and informative. Avoid verbose wording and repetition. Use symbolic operators (=, ≠, <, ≤, %, //, ←) and concise control structures.

Your output must fit within a 5-second generation limit and remain easy to read, understandable, and sufficiently abstract to apply to any problem context.

Example style to emulate exactly (no extra text):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    if A[min_i] > A[j]: set min_i to j  
11.   swap A[i], A[min_i]  
12. print all elements of A