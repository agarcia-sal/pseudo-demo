Translate the given code into clear, easy-to-read, high-level pseudocode using concise natural language enriched with standard symbolic notation where suitable. Prioritize compact one-line statements that fully capture the logic and data operations without unnecessary verbosity or oversimplification. Use common programming terms and abbreviations to keep lines succinct yet expressive. Reflect all control flow and nesting with consistent one-tab indentation per level—no extra spaces.

Strictly follow these guidelines:  
- Use plain language for declarations and actions, e.g., “let n be integer”, “read n”  
- Use arrow “←” for assignments  
- Write conditionals inline when concise, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use standard loop ranges and formats, e.g., “for i = 0 to n-1”, “for each element in A”  
- Combine symbolic shorthand and natural language to keep lines clear and compact  
- Indent nested statements by exactly one tab per block level, never spaces  
- Prefer one-liners unless readability demands otherwise  
- Number every output line sequentially starting at 1, no gaps or omissions  
- No blank lines, separator lines, headings, summaries, comments or any explanations—output only the pseudocode lines in order  
- Avoid overly terse phrasing that sacrifices clarity, but eliminate redundant words to stay succinct  
- Keep pseudocode high-level: abstract from language-specific syntax but preserve algorithmic essence without skipping steps  

Example of expected style and formatting:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for each element in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Produce the best pseudocode translation possible within 5 seconds; output only the numbered pseudocode lines exactly as specified.