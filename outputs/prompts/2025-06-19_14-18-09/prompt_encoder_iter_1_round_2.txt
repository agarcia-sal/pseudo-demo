Translate the given code into clear, easy-to-read, high-level pseudocode that balances natural language and concise symbolic notation. Write primarily one-liner statements that faithfully represent the logic and data operations without unnecessary detail. Use compact, compact phrasing and common abbreviations to keep it succinct but expressive. Reflect control flow and nesting with consistent one-tab indentation per level. Avoid any explanations, comments, summaries, headings, or footers—output only the pseudocode lines numbered sequentially starting from 1.

Follow these conventions exactly:  
- Use plain words for types and actions, e.g. “let n be integer”, “read n”  
- Use arrow “←” for assignments  
- Write conditionals inline with minimal words, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use standard loop ranges, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Prefer symbolic shorthand and natural language combined to keep lines concise and clear  
- Indent nested lines by one tab per block level, no extra spaces  
- Use one-liners whenever the operation is simple enough to stay readable  
- Do not separate lines or sections with empty lines or lines of dashes  
- Number every line starting at 1 and continue sequentially without gaps  
- Avoid overly verbose phrases while preserving clarity and completeness  

Examples of proper style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best pseudocode possible within 5 seconds; output only the numbered pseudocode lines as specified.