Translate the given code into clear, easy-to-read, and high-level pseudocode using mostly natural language merged with common symbolic notation and standard abbreviations. Produce concise, compact lines that prioritize a balance between completeness and brevity, favoring single-line statements for simple steps and control structures. Use indentation only to express essential nested or compound logic. Avoid verbose wording, explicit explanations, or comments. Focus on clarity and precision while abstracting away unnecessary low-level details or implementation-specific syntax.

Strict output requirements:  
- Output numbered pseudocode lines only, starting at 1, incrementing by 1 without gaps  
- No explanations, comments, headers, footers, blank lines, or separators  
- Use **tab characters** for indentation, exactly one tab per nested level  
- Write control structures succinctly as one-liners when possible, e.g., `if X then Y`, `while X do Y`, `for i = 0 to n-1`  
- Use natural language with standard shorthand: “let n be integer”, “read n”, “set sum ← 0”, “swap A[i], A[j]”  
- Use the assignment arrow “←” for assignments and update statements  
- Express conditions clearly and compactly, using standard relational and logical operators  
- Write loops and iterations in familiar, compact forms like `for all elements in A` or `for i = 0 to n-1`  
- Avoid excessive line splitting or merging that harms readability or completeness—aim for a natural flow of one statement per line  
- Do not include any extra formatting beyond the numbered lines and required indentation  

Example style to emulate exactly:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Produce the best pseudocode within 5 seconds; output only the numbered lines exactly as specified.