Translate the given code into concise, high-level pseudocode that is easy to read and understand, using a balanced mix of natural language, common symbolic notation, and standard abbreviations. Use mostly single-line statements that clearly express each operation or control structure; indent only to reflect nested or compound blocks. Avoid low-level details but include enough clarity for complete comprehension.

Follow these strict rules exactly:  
- Output **only** numbered pseudocode lines starting at 1 and incrementing by 1 with no gaps  
- Use **tab characters** (not spaces) for indentation — one tab per nesting level  
- Use compact one-liners for simple statements and control structures: e.g.,  
  `if X then Y`  
  `while condition: action`  
  `for i = 0 to n-1`  
- Use the assignment arrow `←` for all assignments (`set x ← y`)  
- Write variable declarations as `let name be type` or equivalent shorthand  
- Use natural but succinct phrasing, e.g. `read n`, `print all A`, `swap A[i], A[min_i]`  
- Avoid commentary, explanations, headers, footers, blank lines, or separators  
- Express loops and conditions naturally but compactly without losing clarity  
- Do not merge too many statements in one line if it reduces readability  
- Omit unnecessary words and filler; be as brief as possible while complete  
- Output pseudocode immediately and only pseudocode, no prose

Example style to emulate closely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integer  
5. set size of A ← n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i ← i  
  for j = i + 1 to size of A exclusive  
   set min_i ← j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all A