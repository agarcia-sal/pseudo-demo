Translate the given code into clear, compact, and high-level pseudocode that balances natural language with commonly used symbolic notation and abbreviations. Prioritize readability and completeness using succinct one-line statements wherever possible, resorting to indented multiple lines only when necessary to express nested or complex logic. Maintain a high-level abstraction without unnecessary low-level detail.

Strict formatting and style rules:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 with no gaps  
- No explanations, comments, summaries, headers, footers, or blank lines  
- Use **tab characters** (not spaces) for indentation: exactly one tab per nested block level  
- Prefer single-line statements including simple control structures (e.g., `if`, `while`, `for`) in a natural, concise manner  
- Use clear natural language with standard shorthand: e.g., “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”  
- Use the assignment arrow “←” for assignments; use simple, conventional conditionals like “if X then Y”, “set X to Y if condition”  
- Write loops in familiar, compact form, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Avoid verbose wording and redundancy—be as brief as possible while retaining clarity and completeness  
- Do not insert extra blank lines, separators, or formatting beyond the above rules  

Example pseudocode style to follow closely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode within 5 seconds; output only the numbered lines exactly as specified.