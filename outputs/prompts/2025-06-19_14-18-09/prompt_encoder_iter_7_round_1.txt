Translate the given code into concise, clear, and easy-to-read high-level pseudocode that balances natural language with symbolic notation. Write mostly one-line statements that succinctly capture the logic and data operations at a high level without extraneous detail. Use natural language phrases combined with standard symbolic shorthand and common abbreviations to keep lines compact but expressive.

Strictly follow these formatting and style rules:  
- Output only the numbered pseudocode statements starting at 1, incrementing by 1 per line, no gaps  
- No explanations, comments, summaries, headings, footers, or empty lines  
- Use tab characters (not spaces) for indentation: one tab per nested control/block level  
- Prefer one-liners for straightforward operations and control structures; if complexity requires, indent nested lines accordingly  
- Use plain words for types and actions, e.g. “let n be integer”, “read n”  
- Use assignment arrow “←” for value assignments  
- Write conditionals concisely inline, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use familiar loop syntax, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Avoid verbose or redundant phrasing, but ensure clarity and completeness  
- Do not add blank lines or separator lines anywhere  

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best pseudocode possible for the input code within 5 seconds; output only the numbered pseudocode lines exactly as described.