Translate the given code into concise, clear, and easy-to-read high-level pseudocode that uses compact natural language with symbolic notation and standard abbreviations. Produce mostly one-line statements that succinctly capture the logic and data operations at a high level without unnecessary detail. Use consistent indentation with tabs—one tab per nested block level.

Strict rules to follow exactly:  
- Output only numbered pseudocode lines starting at 1, incrementing by 1 with no gaps  
- No explanations, comments, summaries, headings, footers, or blank lines  
- Use assignment arrow “←” for all assignments  
- Write conditionals inline and concisely, e.g. “set min_i to j if A[min_i] > A[j]”  
- Prefer compact loop syntax such as “for i = 0 to n-1”, “while x < n”, “for all elements in A”  
- Use plain words for types and actions: “let n be integer”, “read n”  
- Prefer one-liners unless multiple lines are necessary for clarity or nesting  
- Do not add any decorative or separator lines  
- Use symbolic shorthand (like ++, --, +=) only if it clearly improves brevity while keeping clarity  
- Ensure clear, complete logic flow with minimal but precise wording  
- Strictly maintain consistent tab indentation for nested blocks

Example output style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best, most readable and compact pseudocode for the input code within 5 seconds; output only the numbered pseudocode lines exactly as described above.