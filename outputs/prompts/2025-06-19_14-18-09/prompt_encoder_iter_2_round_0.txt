Translate the given code into clear, compact, and easy-to-read high-level pseudocode that balances natural language with concise symbolic notation. Use mostly one-liner statements that accurately represent logic and data operations without unnecessary detail, employing common abbreviations and symbolic shorthand to keep pseudocode succinct and expressive. Reflect control flow and nesting with one-tab indentation per block level, no extra spaces. Number pseudocode lines sequentially from 1, no gaps, no empty or separator lines.

Strictly follow these conventions:  
- Begin with contextual phrases like “in function main” or “in procedure X” when applicable  
- Use natural words for data types and actions, e.g., “let n be integer”, “read n”  
- Use arrow “←” for assignments  
- Express conditionals inline with minimal words, e.g. “set min_i to j if A[min_i] > A[j]”  
- Use standard loop syntax, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Combine symbolic notation and natural language so each line is compact, clear, and complete  
- Prefer one-liners unless complexity requires explicit nested lines indented by one tab per level  
- Avoid explanatory comments, summaries, notes, or headings—output only pseudocode lines numbered only  
- Do not add blank lines or any visual separators (e.g., lines of dashes)  
- When a statement fits in a single line without loss of clarity, keep it one line, even for simple control structures (e.g., “while x < n: x++”)  
- For multi-statement blocks, indent nested lines exactly one tab per level

Example style to emulate:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible numbered pseudocode within 5 seconds; output only the numbered pseudocode lines as specified—no additional text.