Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Use primarily natural language combined with standard symbolic notation and common abbreviations. Keep it compact and abstract, avoiding unnecessary low-level detail but maintaining completeness. Favor single-line statements wherever possible; use indentation with tab characters for nested blocks only. Use simple, familiar control structures and expressions with minimal verbosity.

Strict formatting and style rules:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 with no gaps  
- No explanations, comments, notes, headers, footers, or blank lines  
- Use **tab characters** (not spaces) for indentation: exactly one tab per nested block level  
- Prefer single-line statements including simple control structures (e.g., `if`, `while`, `for`) in natural, compact form, e.g.,  
  `if X then Y` or `for i = 0 to n-1` or `while condition: action`  
- Use standard shorthand and natural phrasing such as “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”  
- Use the assignment arrow “←” for assignments  
- Write conditions succinctly, and express updates compactly (e.g., `x++`, `x--`, `set x to x+1`)  
- Avoid verbosity, redundancy, or overly elaborate wording—be as brief as possible while clear and complete  
- Do not insert extra blank lines, separators, or formatting beyond the above rules

Example style to strictly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode output within 5 seconds; print only the numbered pseudocode lines exactly as specified.