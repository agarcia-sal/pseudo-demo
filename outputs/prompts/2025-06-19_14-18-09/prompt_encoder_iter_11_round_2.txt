Translate the given code into easy-to-read, compact, and high-level pseudocode using mostly natural language combined with standard abbreviations and symbolic notation. Prioritize clarity, conciseness, and a natural flow while keeping the logic abstracted from low-level details.

Strict formatting and style rules:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 with no gaps  
- No comments, explanations, summaries, headers, footers, blank lines, or separators  
- Use **tabs** (not spaces) for indentation: exactly one tab per nested block level  
- Prefer concise one-line statements including simple control structures (e.g., `if`, `while`, `for`) written naturally and compactly, using colon `:` to indicate inline blocks if needed  
- Use common shorthand expressions: e.g., “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”  
- Use the assignment arrow “←” for assignments and natural conditionals like “if X then Y”, “set X to Y if condition”  
- Write loops in natural and compact form: “for i = 0 to n-1”, “for all elements in A”  
- Minimize verbosity; make lines as short as possible but keep them unambiguous and complete  
- Avoid multi-line blocks unless logic is visibly nested or complex  
- Do not insert blank lines or any extra formatting beyond these rules  

Example pseudocode style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the entire pseudocode within 5 seconds; output only the numbered lines exactly as specified.