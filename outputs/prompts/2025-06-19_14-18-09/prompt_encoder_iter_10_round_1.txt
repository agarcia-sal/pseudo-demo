Translate the given code into concise, easy-to-read, high-level pseudocode using a natural language style mixed with standard symbolic notation and common abbreviations. Prioritize compact, clear one-line statements; use indentation with tabs only for nested or complex blocks. Avoid low-level details and verbose wording; express control structures and assignments succinctly and consistently (e.g., “let x be integer”, “read x”, “x ← y”, “if condition then action”, “for i = 0 to n-1”, “swap A[i], A[j]”).  

Strict output rules:  
- Output **only** numbered lines beginning at 1 and incrementing by 1 with no gaps  
- Use exactly one tab per nested block level for indentation; no spaces  
- Prefer single-line forms for simple controls (e.g., “if X < Y then swap”) but use indented multiple lines only for nested/multi-step logic  
- Use the assignment arrow “←” for assignments; standard idioms for loops and conditionals  
- No explanations, comments, blank lines, headers, footers, or separators  
- Do not restate variable types unless they add clarity (only if explicit in code)  
- Avoid redundancy and filler words—keep statements as brief as possible without sacrificing clarity  
- Produce compact, consistent, high-level pseudocode that can be understood easily by programmers of varied backgrounds  

Example pseudocode style to follow:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Generate the pseudocode within 5 seconds; output only the numbered lines exactly as specified.