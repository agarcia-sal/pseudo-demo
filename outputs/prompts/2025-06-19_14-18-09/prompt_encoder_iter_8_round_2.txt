Translate the given code into compact, high-level pseudocode that is easy to read and understand. Use a balance of natural language, common shorthand, and conventional symbolic notation to express logic clearly and succinctly. Prefer concise one-line statements; use indentation and multiple lines only for nested or complex blocks. Avoid unnecessary detail; focus on essential computational steps and control flow at a high level.

Formatting and style requirements:  
- Output only numbered pseudocode lines, starting at 1, incrementing by 1 with no gaps  
- No explanations, comments, summaries, headers, footers, or blank lines  
- Use tab characters (\t) for indentation: exactly one tab per nested block level  
- Write assignments with the arrow “←”  
- Express conditionals and loops in brief, natural forms: e.g., “if X then Y”, “set X to Y if condition”, “while condition do Z”, “for i = 0 to n-1”, “for all elements in A”  
- Use standard abbreviations and phrases like “let n be integer”, “read n”, “print result”, “swap A[i], A[j]”  
- Compactly write simple control structures in one line when possible: e.g., “if x < y then x ← y”  
- Avoid verbose wording and redundancy—use the fewest words needed for clarity and completeness  
- Do not insert blank lines, separators, or any formatting beyond the above rules  

Example pseudocode style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
\tset min_i to i  
\tfor j = i+1 to size of A exclusive  
\t\tset min_i to j if A[min_i] > A[j]  
\tswap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode within 5 seconds; output only the numbered lines exactly as required.