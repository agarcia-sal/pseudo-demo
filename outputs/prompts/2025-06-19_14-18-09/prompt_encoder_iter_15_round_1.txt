Translate the given code into clear, concise, and compact high-level pseudocode that balances natural language with brief symbolic notation and standard abbreviations. Focus on readability and logical clarity while maximizing line efficiency: prefer single-line statements for simple and conditional actions, use indentation with tabs only for necessary nested blocks. Keep a consistent, natural style that avoids verbosity or redundancy—express assignments with “←”, conditions as “if X then Y” or “set X to Y if condition”, and loops in compact familiar form like “for i = 0 to n-1” or “for all elements in A”.

Output constraints:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 with no gaps  
- No explanations, comments, summaries, headers, footers, blank lines, or separators  
- Use exactly one tab per nested block level, no spaces for indentation  
- Use single-line statements for simple conditions and loops wherever possible; use multiple indented lines only for complex or nested logic  
- Maintain a high-level abstraction—omit low-level implementation details, focus on clear steps and flow  
- Use natural language mixed with concise symbolic style (e.g., “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”)  
- Avoid unnecessary verbosity, be as brief as possible without sacrificing clarity or completeness

Example pseudocode style to mimic precisely:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Produce the best possible pseudocode output within 5 seconds; output only the numbered lines exactly and strictly follow these formatting and style rules.