Translate the given code into clear, concise, and easy-to-read pseudocode that uses a balanced mix of natural language and symbolic notation. Express logic and data manipulation at a high level without unnecessary detail, focusing on brevity and readability. Prefer short one-liner statements; if a single line becomes too complex, break it clearly but keep all lines succinct. Use standard, widely understood keywords and minimal but meaningful natural language to maintain clarity while avoiding verbosity.

Follow these exact formatting rules:  
- Number every pseudocode line sequentially starting at 1, with no gaps  
- Use plain words for declaring variables and types, e.g., “let n be integer”, “read n”  
- Use arrow “←” for assignments and updates, e.g., “x ← 0”, “sum ← sum + A[i]”  
- Write conditionals and updates inline with minimal words; e.g., “set min_i to j if A[min_i] > A[j]”  
- Represent loops using standard ranges: “for i = 0 to n-1”, “for all elements in A”  
- Indent by exactly one tab per block level (no spaces, no mixed indent) to indicate nesting  
- Favor concise symbolic shorthand combined with natural language phrases to keep lines compact and meaningful  
- Use one-liners when the operation is clear and simple; break into indented multiple lines only when it improves clarity  
- Do not include comments, explanations, summaries, blank lines, or separator lines  
- Output only the pseudocode lines—no headings, footers, or extraneous text  

Example output style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode within 5 seconds. Output only the numbered pseudocode lines as specified.