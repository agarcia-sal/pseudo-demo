Translate the given code into clear, compact, easy-to-read pseudocode that balances natural language with concise symbols and abbreviations. Use primarily one-liner statements that precisely capture the logic and data operations at a high level without extra detail. Prefer natural expressions for types and actions (e.g., “let n be integer”, “read n”), use the arrow “←” for assignments, and express conditionals inline and succinctly (e.g., “set min_i to j if A[min_i] > A[j]”). Represent loops with standard ranges or iteration (e.g., “for i = 0 to n-1”, “for all elements in A”). Show control flow and nesting by indenting exactly one tab per level—no spaces. Avoid explanations, comments, or summaries; output only the numbered pseudocode lines starting from 1, incrementing by 1, with no gaps or empty lines. Do not use separator lines or extra formatting. Strive for a balance where lines are neither too terse nor overly verbose—enough natural language to keep clarity and completeness but always concise.

Format examples:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce only the numbered pseudocode lines as above, strictly following these rules, within a 5-second timeout.