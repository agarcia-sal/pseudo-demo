Translate the given code into clear, compact, high-level pseudocode that is easy to read and understand. Use mostly natural language with concise symbolic notation for assignments and control flow. Prefer one-liner statements when simple and readable. Include necessary control structures and nesting indicated by exactly one tab per indentation level. Avoid any explanation, summaries, comments, or extra formatting such as separator lines—output only the pseudocode lines numbered sequentially starting at 1 with no gaps.

Follow these precise conventions:  
- Use plain, descriptive words for types and actions, e.g., “let n be integer”, “read n”, “print result”  
- Use the arrow symbol “←” for all assignments  
- Express conditionals compactly and inline where possible, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use standard loop forms, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Combine symbolic shorthand with natural language to keep lines concise but clear  
- Indent nested statements exactly one tab per block level—no spaces or extra indentation  
- Write all statements in a single line if simple enough without sacrificing clarity  
- Number every line, starting at 1 and increasing by 1 for each new line without skipping numbers  
- Do not include empty lines or line separators in the output  
- Avoid verbose phrasing; keep it succinct yet complete and unambiguous

Output only the numbered pseudocode lines strictly following this style.

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A