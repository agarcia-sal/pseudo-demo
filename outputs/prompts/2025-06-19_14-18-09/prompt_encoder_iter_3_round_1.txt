Translate the given code into clear, concise, and easy-to-read pseudocode that uses mostly natural language with succinct symbolic notation. Prioritize high-level, compact phrasing that faithfully captures logic and data operations without unnecessary detail or verbosity. Represent control flow and nesting using consistent one-tab indentation per block level. Use primarily one-liner statements unless clarity demands breaking into multiple lines. Number every line sequentially starting at 1, without empty lines or separators. Do not include explanations, comments, summaries, or headings—output only the numbered pseudocode lines.

Follow these exact conventions:  
- Declare types and variables plainly, e.g., “let n be integer”, “read n”  
- Use ← for assignments, e.g., “x ← 0”  
- Express conditionals inline with minimal words, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use standard concise loops, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Prefer compact symbolic forms combined with natural language for clarity and brevity  
- Use one tab per indentation level, never spaces  
- Use one-liners where readability is preserved; break lines only if necessary  
- Do not separate code blocks with blank lines or separator lines like “-----”  
- Number lines consecutively starting at 1, no skipped or repeated numbers  

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A