Translate the given code into concise, high-level pseudocode that maximizes clarity and readability by blending natural language with standard symbolic notation and abbreviations. Prioritize single-line statements wherever the logic remains simple; use minimal indentation only to express necessary nested or compound structures. Avoid low-level implementation details; focus on algorithmic flow and key operations.

Formatting and style rules:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 without gaps  
- No explanations, comments, summaries, headers, or extra blank lines  
- Use **tab characters** (not spaces) for indentation; exactly one tab per nested block level  
- Prefer compact one-liners for control statements: e.g., `if condition then action`, `while condition: action`  
- Use natural but concise phrasing with common shorthand, e.g., “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”  
- Use assignment arrow “←” for assignments; use clear, minimal conditionals like “set X to Y if condition”  
- Write loops in simple forms: “for i = 0 to n-1”, “for all elements in A”  
- Avoid redundancies and verbose wording; express logic succinctly but completely  
- Do not use separator lines or formatting beyond above rules  

Example output style to emulate:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Produce the best possible pseudocode within 5 seconds; output only the numbered lines exactly as specified.