Translate the given code into concise, clear, high-level pseudocode that is easy to read and understand. Use natural language combined with symbolic notation and abbreviations to keep it compact and expressive. Write mostly one-liners that faithfully represent the control flow and data operations without unnecessary detail. Do not include comments, explanations, summaries, or overview statements. The output should contain only the pseudocode with a minimal, consistent indentation scheme reflecting nested structures.

Use this numbered format with symbolic shorthand and natural language as in these examples:  
1. x ← 0  
2. while x < n: x++  
3. for i = 0 to n-1: process A[i]

When describing structures:  
- Use plain words for types and actions (e.g., “let n be integer”, “read n”)  
- Use arrows (←) for assignments  
- Use concise conditionals inline (“set min_i to j if A[min_i] > A[j]”)  
- Use standard loop notation with ranges, e.g. “for i = 0 to n-1” or “for all elements in A”  
- Indent nested statements by one tab per level for clarity, no extra spacing  
- Avoid lines longer than necessary but maintain clarity and completeness  
- Avoid headers or footers, just pseudocode statements numbered from 1

Example output style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best result possible within a 5-second timeout. Strictly output only the pseudocode as specified.