Translate the given code into clear, concise, and easy-to-understand pseudocode that uses a natural yet compact high-level language.  
Express logic and data operations mostly as one-line statements, combining symbolic notation and brief natural phrases to maximize clarity and brevity.   
Adopt standard algorithmic conventions like “let x be integer,” “read x,” “x ← value,” “for i = 0 to n-1,” and inline conditionals like “set min_i to j if A[min_i] > A[j].”  
Represent nesting and control flow strictly by one tab indent per block level—no spaces—and keep indentation minimal but consistent.  
Avoid explanations, comments, headings, summaries, or blank/separator lines; output only numbered pseudocode lines starting from 1, sequential with no gaps.  
Use common programming abbreviations and symbolic shorthand where it improves readability without loss of meaning.  
Prefer single-line statements for simple operations, but use multiple lines when needed to preserve clarity and structure.  
Ensure variable/type declarations, input/output, control flow, and assignments are explicit and follow natural algorithmic phrasing.  
Produce pseudocode fully capturing the original code’s logic but filtered to remove extraneous detail or verbosity.  

Example of expected style and format (line numbers included):  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Use this exact formatting and style as your guide. Output only the numbered pseudocode lines representing the input code’s functionality within 5 seconds.