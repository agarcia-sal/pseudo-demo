Translate the given code into clear, high-level pseudocode that is easy to read and understand by combining natural language with concise symbolic notation. Use mostly one-line statements that precisely capture logic and data operations without verbose detail. Favor a compact style using common programming terms and abbreviations while maintaining clarity and completeness.

 adhere strictly to these formatting rules:  
- Number each line starting at 1 with no gaps or extra breaks  
- Use plain concise words for variables, types, and actions (e.g., “let n be integer”, “read n”)  
- Assign with ← (arrow), e.g. x ← 0  
- Express conditionals inline and briefly, e.g., “set min_i to j if A[min_i] > A[j]”  
- Use standard loop syntax like “for i = 0 to n-1”, or “for all elements in A”  
- Show nested blocks with one tab indentation per level, no spaces  
- Do not add explanatory comments, summaries, or section dividers—only pseudocode lines  
- Prefer one-liners when simple and still readable; break into multiple lines only if necessary for clarity  
- Avoid empty lines or separator lines of any kind  
- Use familiar abbreviations and common idioms for conciseness but avoid ambiguity  
- Keep the pseudocode compact but always clear enough to follow the algorithm’s structure and data flow  

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the pseudocode as fast as possible (within 5 seconds). Output only the numbered pseudocode lines exactly as specified.