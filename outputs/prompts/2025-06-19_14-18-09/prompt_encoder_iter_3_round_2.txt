Translate the given code into clear, concise, high-level pseudocode that is easy to read and understand. Use primarily natural language with compact symbolic notation and common abbreviations to express logic and data operations at a suitably abstract level. Write mostly one-line statements unless multiple lines improve clarity due to complexity. Preserve all control flow and nesting exactly, using one tab per indentation level—no extra spaces. Avoid explanations, comments, summaries, or any extra text; output only the numbered pseudocode lines starting at 1 with no gaps or separators.

Follow these conventions exactly:  
- Use simple, direct phrases for variables, types, and actions, e.g. “let n be integer”, “read n”  
- Use arrow ← for assignments, e.g. “x ← 0”  
- Write conditionals inline with minimal words, e.g. “set min_i to j if A[min_i] > A[j]”  
- Use standard loop forms and ranges, e.g. “for i = 0 to n-1”, “for all elements in A”  
- Prefer one-line statements for simple operations, break into multiple lines only if needed for readability  
- Indent nested blocks with exactly one tab per level, no spaces  
- Avoid empty lines or separator lines anywhere  
- Number every output line starting from 1, continuing in sequence without gaps  
- Use a balanced mix of natural language and symbolic shorthand to keep pseudocode both succinct and fully expressive  
- Do not add any text besides the pseudocode lines  

Example output format:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A