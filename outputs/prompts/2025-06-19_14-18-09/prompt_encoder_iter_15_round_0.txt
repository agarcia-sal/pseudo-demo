Translate the input code into concise, high-level pseudocode that balances clear natural language with minimal symbolic notation and standard abbreviations. The pseudocode must be easy to read, compact, and abstract—express the core logic without low-level details or verbose phrasing.

Strict output format:  
- Output only numbered lines starting at 1, incrementing by 1 with no gaps  
- No comments, explanations, notes, summaries, headers, footers, or blank lines  
- Use exactly one tab character for each level of indentation; no spaces for indentation  
- Prefer single-line statements including simple control structures (e.g., `if`, `while`, `for`) using natural, concise syntax with minimal punctuation  
- Use assignment arrow “←” for assignments (e.g., `x ← 0`)  
- Write conditionals as “if X then Y” or as concise inline condition (e.g., `set X to Y if condition`)  
- Use loops in compact form: e.g., `for i = 0 to n-1`, `for all elements in A`  
- Use standard shorthand: e.g., “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”  
- Avoid verbose or redundant wording; be succinct yet fully expressive of the logic  
- Do not introduce extra blank lines, separators, or formatting other than specified numbering and tabs  

Example style your output should match exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Generate the best possible pseudocode within 5 seconds; output only the numbered pseudocode lines exactly as specified, strictly following the format above.