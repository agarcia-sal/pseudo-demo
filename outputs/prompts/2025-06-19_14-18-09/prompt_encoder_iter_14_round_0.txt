Translate the given code into clear, concise, and high-level pseudocode that balances natural language with standard symbolic notation and abbreviations to maximize readability and completeness. Use mostly one-line statements with simple control flow expressed naturally and compactly; resort to indentation and multiple lines only for nested or complex logic. Abstract away low-level detail without losing essential algorithmic structure.  

Strict formatting rules:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 without gaps  
- Use **tab characters** (not spaces) for indentation: exactly one tab per nested block level  
- Favor concise one-liners for assignments, conditionals, and loops, e.g.,  
  `x ← 0`  
  `while x < n: x++`  
  `for i = 0 to n-1`  
  `set min_i to j if A[min_i] > A[j]`  
- Use natural, clear language with common shorthand such as “let n be integer”, “read n”, “print all elements of A”, “swap A[i], A[min_i]”  
- Use the assignment arrow “←” for all assignments  
- Write conditions simply: “if condition then action”, or use inline “set X to Y if condition” when concise  
- Avoid extra blank lines, comments, summaries, or formatting beyond these rules—output pseudocode lines only with no surrounding text  
- No separator lines or any other non-pseudocode text  
- Keep pseudocode compact but complete, avoiding redundant words or verbosity while maintaining clarity  

Example pseudocode style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A