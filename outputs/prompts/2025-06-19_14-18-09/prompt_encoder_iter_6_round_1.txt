Translate the given code into clear, concise, and high-level pseudocode that balances natural language with compact symbolic notation. The pseudocode should emphasize readability and expressiveness using mostly one-liner statements that faithfully capture logic and data operations without unnecessary low-level detail.

Requirements:  
- Output only the pseudocode lines, numbered sequentially from 1 with no gaps  
- Use natural language combined with standard concise symbols (e.g., ← for assignment)  
- Prefer short, clear one-liners; use inline conditionals when simple (e.g., “set min_i to j if A[min_i] > A[j]”)  
- Express loops with conventional ranges: “for i = 0 to n-1”, “for all elements in A”  
- Indent nested blocks by one tab per level; no extra spaces or empty lines  
- Use plain words for types and actions (e.g., “let n be integer”, “read n”)  
- Avoid explanations, comments, headings, summaries, or separators  
- Do not merge multiple statements onto a single line if it lowers clarity  
- Use common abbreviations and symbolic shorthand to keep lines succinct yet informative  
- Always preserve control flow, data structures, and logic essence clearly and fully  

Example output style you must follow exactly:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A  

Produce the best-quality pseudocode within 5 seconds; output only the numbered lines as specified, strictly following these rules.