Translate the given code into clear, concise, and easy-to-understand high-level pseudocode that uses a balanced mix of natural language and standard symbolic notation. Write mostly one-liner statements, keeping them compact but sufficiently expressive to fully and accurately capture the logic and data operations. Use common abbreviations without sacrificing readability. Indicate control flow and nesting by indenting exactly one tab per nested block level. Avoid any explanations, comments, summaries, titles, or separators—output only numbered pseudocode lines beginning from 1, strictly sequential without gaps.

Follow these exact conventions:  
- Declare variables with natural phrases, e.g., “let n be integer”  
- Use arrow “←” for all assignments  
- Write simple conditionals inline with minimal wording, e.g., “set min_i to j if A[min_i] > A[j]”  
- Express loops with straightforward ranges, e.g., “for i = 0 to n-1”, “for all elements in A”  
- Use a compact mix of symbolic shorthand and natural language for clarity and brevity  
- Indent nested lines by exactly one tab per control structure level, using no spaces  
- Prefer concise one-liners when possible; break into multiple lines only if necessary for clarity  
- Do not use empty lines or separator lines anywhere in the output  
- Number every line sequentially starting at 1 with no skips or duplicates  
- Avoid verbose phrasing but ensure completeness and clarity in capturing all logic steps  

Example of ideal style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A - 1  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce only the numbered pseudocode lines within 5 seconds; no additional text whatsoever.