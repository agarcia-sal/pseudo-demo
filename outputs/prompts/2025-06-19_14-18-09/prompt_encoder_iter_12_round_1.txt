Translate the given code into clear, concise, and high-level pseudocode emphasizing natural language combined with standard symbolic notation and abbreviations. Produce compact one-line statements wherever possible, using tab indentation exactly once per nested block level. Express simple control structures in minimal, natural form (e.g., `if X then Y`, `while condition: action`, `for i = 0 to n-1`). Use the assignment arrow `←` for assignments, prefer “let” for declarations, and “read”, “print” for I/O. Avoid low-level detail and unnecessary verbosity while ensuring completeness and clarity.

Follow these strict output rules:  
- Output only numbered pseudocode lines starting at 1 with no gaps  
- Use **tab characters** (not spaces) for indentation: one tab per nested scope level  
- Use natural, succinct phrases such as “let n be integer”, “read n”, “set min_i to i”, “swap A[i], A[min_i]”, avoiding verbose wording  
- Prefer single-line statements; multi-line only if nested blocks require it  
- Use compact loops like “for i = 0 to n-1”, “for all elements in A”  
- Use simple, direct conditionals like “if X then Y”, “set X to Y if condition”  
- No comments, explanations, blank lines, or heading/footer text should be included  
- Do not add separators, extra formatting, or summaries  
- Produce output within 5 seconds exactly as numbered lines obeying all above

Example style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A