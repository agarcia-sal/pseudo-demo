Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Use mostly natural language enriched with common symbolic notation and standard abbreviations. Prioritize succinct one-line statements; use indentation and multiple lines only to express nested or complex control flow. Maintain abstraction—avoid low-level implementation details and verbose wording.

Strict output requirements:  
- Output **only** numbered pseudocode lines starting at 1, incrementing by 1 without gaps  
- No explanations, comments, notes, summaries, or extra blank lines  
- Use **tabs** (not spaces) for indentation: exactly one tab per nested block level  
- Prefer compact one-line forms for simple control structures, e.g., `if condition then action`, `while cond: action`, `for i = 0 to n-1`  
- Use natural language with common shorthand such as:  
  - “let n be integer”  
  - “read n”  
  - “set x ← y if condition”  
  - “swap A[i], A[j]”  
- Use the assignment arrow “←” for assignments  
- Write loops in familiar, concise forms: “for i = 0 to n-1”, “for all elements in A”  
- Avoid redundant phrases and filler words; be as brief as possible without losing clarity or completeness  
- Do not add separator lines or any extra formatting beyond the above rules  

Example style to follow closely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for all elements in A  
  set min_i ← i  
  for j = i+1 to size of A exclusive  
   set min_i ← j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode within 5 seconds; output exactly as specified.