Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Use natural language combined with common symbolic notation and abbreviations to keep it compact yet expressive. Prefer one-liners for simple operations and represent control flow and nesting with consistent single-tab indentation per level. Avoid verbosity, explanations, comments, summaries, or extra formatting—output only the numbered pseudocode lines starting at 1, incrementing by 1 without gaps.

Follow exactly this style and formatting:  
- Use plain words for data types and actions, e.g., “let n be integer”, “read n”  
- Use arrow “←” for assignments and simple symbolic notation for increments/decrements (e.g., x++ for x ← x + 1)  
- Write conditionals succinctly inline: “set min_i to j if A[min_i] > A[j]”  
- Express loops with compact ranges: “for i = 0 to n-1”, “for all elements in A”  
- Combine symbolic shorthand with natural phrases to maintain clarity and brevity  
- Indent nested blocks by one tab per scope level, no extra spaces  
- Use one-liners wherever clarity is preserved; multiline only when necessary for logic clarity  
- Do not add blank lines, headings, separators, comments, or extraneous phrasing  
- Number each line starting from 1 continuously without skipping  
- Do not prefix lines with line count inside the line; line number is before the line content  
- Avoid splitting simple steps into multiple lines unnecessarily but keep multi-step logic clear  

Example output style for reference:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best quality pseudocode lines strictly within 5 seconds. Output only the numbered pseudocode lines as specified.