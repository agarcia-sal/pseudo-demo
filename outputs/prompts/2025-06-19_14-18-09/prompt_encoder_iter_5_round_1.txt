Translate the given code into clear, concise, and readable high-level pseudocode that uses mostly natural language enhanced with standard symbolic notation. The output must be compact but expressive, following these rules:

- Use mostly one-line statements unless the logic requires nesting.
- Express assignments with arrow “←” (e.g., `x ← 0`).
- Write loops and conditionals inline and compactly (e.g., `while x < n: x++` or `set min_i to j if A[min_i] > A[j]`).
- Use natural language for types and actions: `let n be integer`, `read n`, `print result`.
- Use common abbreviations and standard pseudocode conventions to keep lines short but readable.
- Represent control flow and nesting with consistent tabs: indent exactly one tab per block level, no extra spaces.
- Number every output line sequentially starting at 1, no gaps or empty lines.
- Do not output comments, explanations, summaries, headings, or banner lines—only pseudocode lines.
- Do not insert line separators or blank lines.
- Prefer compact phrasing that balances clarity and brevity, avoiding verbosity but ensuring full expression of logic and data operations.
- Reflect multi-statement blocks by separate numbered lines, each indented appropriately.
- Produce the best possible pseudocode within 5 seconds.

Example style output your pseudocode should match:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A