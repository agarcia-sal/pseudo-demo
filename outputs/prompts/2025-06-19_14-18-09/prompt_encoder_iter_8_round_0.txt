Translate the input code into concise, clear, and easy-to-read high-level pseudocode that uses mostly natural language with symbolic notation and standard abbreviations. The pseudocode should be compact, prioritize one-liners, and capture the core logic and data operations without extra detail. Use brief phrases and familiar programming constructs for clarity and brevity.

Follow these rules strictly:  
- Output only numbered pseudocode lines starting at 1, increment by 1 every line with no gaps  
- No explanations, comments, summaries, headers, footers, or blank lines  
- Use tab characters (not spaces) for indentation, one tab per nested block level  
- Express assignments with arrow ←, e.g. x ← 0  
- Write control structures as one-liners when simple, e.g., `while x < n: x++`  
- For more complex blocks, nest lines with tabs beneath the control line  
- Use natural language for types and actions, e.g. “let n be integer”, “read n”, “print result”  
- Use standard loop syntax: `for i = 0 to n-1`, `for all elements in A`  
- Use concise conditionals inline when appropriate, e.g., “set min_i to j if A[min_i] > A[j]”  
- Avoid verbosity or repetition while ensuring clarity and completeness  
- Do not use separator or divider lines anywhere  

Example style to emulate:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best possible pseudocode representation of the input code within 5 seconds; output only the numbered pseudocode lines exactly as described.