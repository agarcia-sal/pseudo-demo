Translate the given code into clear, concise, and high-level pseudocode that balances natural language and symbolic notation for maximum readability and expressiveness. Use mostly one-line statements that faithfully capture the program’s logic and data operations without unnecessary detail or verbosity. Prioritize natural language phrasing with compact keywords and common abbreviations, avoiding overly technical jargon, to keep the pseudocode accessible yet precise.

Follow these formatting conventions exactly:  
- Start line numbering from 1, increment by 1 per line, no gaps  
- Use plain, simple phrases for types and actions, e.g. “let n be integer”, “read n”  
- Use assignment arrow “←” for all variable assignments  
- Write conditionals inline and minimal, e.g. “set min_i to j if A[min_i] > A[j]”  
- Use standard loop syntax like “for i = 0 to n-1”, “for all elements in A”  
- Show control flow (loops, conditionals) via consistent one-tab indentation per nested block level; no extra spaces  
- Prefer one-line blocks whenever logic fits without losing clarity  
- Avoid empty lines and any separator lines; only numbered pseudocode lines output  
- Do not include comments, explanations, headings, summaries or extra text—only the numbered pseudocode lines  
- Keep expressions succinct yet complete, balancing symbolic shorthand and natural phrasing

Example pseudocode style your output should emulate exactly:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A

Produce the best pseudocode possible within 5 seconds; output only the numbered pseudocode lines as specified.