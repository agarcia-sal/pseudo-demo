```python
You are to translate the provided pseudocode into a single, runnable, and fully self-contained Python script strictly preserving all function names and signatures as given.

Instructions:

- If the pseudocode includes or implies custom data structures or helper classes (e.g., ListNode, TreeNode), you **must** define them completely within your code, enabling direct use and testing without external dependencies.

- Structure your solution exactly as the pseudocode functions and classes indicate. If multiple functions or classes are described, implement all within the same code block.

- For any implicit helper functions or missing details, implement them faithfully without changing intended logic.

- Your code should handle edge cases properly, assuming no input sanitization beyond what is explicit in the pseudocode.

- Use efficient, clean, and Pythonic idioms suitable for the algorithmâ€™s context, optimizing runtime and memory where applicable.

- You may leverage any standard Python modules or packages (e.g., collections, heapq, functools, itertools, math) to aid clarity, correctness, or performance.

- Import only standard Python libraries where necessary.

- If the pseudocode uses recursion, memoization, or advanced data structures, apply Python features (like `functools.lru_cache`) as appropriate.

- When the pseudocode involves trees or linked lists, include helper methods to construct these from basic Python data types if needed for testing.

- Do not produce any output text, explanation, or comments outside the Python code block.

- Output only a single Python code block formatted as:

```python
# Your complete Python code here
```

- **Do not** include any separators, headings, or other text before or after the code block.

Pseudocode:
```
{pseudocode}
```
```