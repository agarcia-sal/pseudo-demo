Given a problem's complete source code, generate concise, precise, and high-level pseudocode that exactly preserves all original function and class names as well as full class/object hierarchies, scopes, and nesting. Reflect all control flows explicitly with uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.) and use consistent indentation matching the code structure. Use natural language combined with standard programming and mathematical notation to represent operations and data transformations at a conceptual level—abstracting away implementation details unless crucial for correctness or clarity. Avoid ambiguous or vague phrasing and ensure all variables and parameters are clearly named or expanded only when it improves understanding while preventing verbosity. Include all necessary assignments, expressions, and control statements fully spelled out to enable direct, unambiguous reconstruction of logic. Do not add comments, explanations, summaries, or any text beyond the pseudocode itself.

Use explicit iteration constructs rather than implicit or functional-style expressions to avoid misunderstanding. Represent data access, indexing, slicing, and method calls in a clear, consistent, and reproducible manner. When conditions or formulas appear, express them fully and precisely (e.g., “IF x MODULO 3 EQUALS 0” rather than “IF x IS DIVISIBLE BY 3”). When producing return statements, ensure all expressions exactly match the code’s intent and order of operations. Maintain naming and argument consistency from the original code for all functions and methods. Capture list comprehensions, nested structures, and lambda or anonymous functions as explicit block constructs where feasible.

Do not use separator lines or quotation marks in pseudocode blocks.

Produce output pseudocode strictly within 5 seconds.

Example:

Given this Python code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET avg TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN avg
END FUNCTION