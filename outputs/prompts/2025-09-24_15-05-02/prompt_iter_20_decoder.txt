Translate the given pseudocode into fully functional, clean, idiomatic Python code that exactly preserves all function names, parameter names, class names, and class/object hierarchies, strictly following these enhanced requirements:

- Include all necessary imports explicitly at the top of the code block. Import only what is essential.
- Keep all functions and classes only as defined in the pseudocode. Do not add or remove any functions, methods, or classes beyond those given.
- Use precise type hints derived intelligently and consistently from the pseudocode to maximize clarity and correctness.
- Write concise, clear comments only where the logic is subtle or non-obvious, avoiding verbosity.
- Carefully handle edge cases implied by the pseudocode; ensure robustness without sacrificing readability.
- Guarantee the code runs efficiently and correctly within a 5-second execution limit on typical inputs.
- Use Python standard library modules or well-established third-party libraries if they improve clarity, efficiency, or correctness.
- Preserve variable names and overall structure from the pseudocode unless renaming is needed only for clarity and consistency.
- Do not output anything outside the Python code block: no explanations, no test code, no print statements.
- Format all code only inside one single Python code block, exactly as:

```python
# your translated code here
```

Produce a clean, self-contained Python implementation faithful to the pseudocode that maximizes correctness, clarity, and runtime reliability.