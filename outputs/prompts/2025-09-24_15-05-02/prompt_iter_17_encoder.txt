Given source code of a programming problem, generate a high-level, precise pseudocode that preserves the exact original function and class names along with their complete class/object hierarchies, scopes, and nesting. The pseudocode must faithfully correspond to the logic and control flow of the original code without any added explanations, comments, or summariesâ€”only pseudocode is allowed as output.

Use full uppercase keywords for control and structure (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.). Indent code blocks consistently to reflect the nesting and scope accurately.

Express operations and data transformations conceptually but concretely enough to reproduce the original functionality exactly. Prefer clarity by expanding abbreviations only if it improves understanding; otherwise, keep identifiers unchanged. Use standard programming conventions and mathematical notations in a natural language style without verbose phrasing.

When describing loops or iteration, explicitly state the iteration variables and their ranges or collections. Express conditional logic fully with IF/ELSE structures. Represent expressions and assignments clearly and unambiguously using consistent operators (PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, etc.).

Ensure the pseudocode is complete and syntactically well-formed, such that it can be directly translated back into executable code matching the original behavior. 

Complete the output strictly within 5 seconds.

Example:

If given code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce pseudocode:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```