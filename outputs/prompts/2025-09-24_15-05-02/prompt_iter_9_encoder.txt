Given the source code of a problem, generate concise, precise, and high-level pseudocode representing the exact logic and control flow. Maintain all original function and class names verbatim, preserving their scopes, hierarchies, and nesting structure exactly as in the source code. Use full uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, etc.) to denote control structures and operations. Indent consistently to reflect code block nesting. Express data structures, operations, and transformations at a conceptual level without low-level implementation details unless essential for correctness or clarity. Avoid introducing new variable names; keep original names unless they are unclearâ€”in which case expand abbreviations minimally to improve comprehension. Use natural language phrasing merged with standard programming and mathematical notation to clearly describe each step. Do not include comments, explanations, summaries, or any text besides the pseudocode itself. Complete within 5 seconds.

Example:  
If the original code is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  
Then output:  
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```