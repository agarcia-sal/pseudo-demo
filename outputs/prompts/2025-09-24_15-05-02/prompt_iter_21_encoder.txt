Given a piece of source code, generate a high-level, precise pseudocode that faithfully represents the original logic, structure, and behavior without adding explanations, comments, or summaries. Ensure the pseudocode:

- Preserves all original function and class names exactly, maintaining all class/object hierarchies, method scopes, and nesting faithfully.
- Uses only uppercase keywords for control flow and declarations (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.).
- Represents all expressions and operations at an appropriate conceptual abstraction level—avoid low-level implementation details unless necessary for correctness.
- Uses natural language combined with clear, standard programming and mathematical notation.
- Keeps variable names as close to original as possible, expanding abbreviations only when it significantly improves clarity.
- Writes loops and conditionals explicitly rather than using shorthand; specifies loop ranges and conditions clearly.
- Indents all blocks properly to reflect code structure unambiguously.
- Represents list, string, and collection operations as conceptual actions (“APPEND element TO list”, “JOIN elements INTO string”) instead of language-specific syntax.
- Represents function and method calls clearly, showing parameters and return values accurately.
- Does not include any comments, notes, explanations, or extraneous text—output ONLY the pseudocode.
- Completes within 5 seconds.

Example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```