Given a problem’s original source code, produce concise, precise, and high-level pseudocode faithfully representing the original logic and control flow. Preserve all original function and class names exactly, maintaining all class/object hierarchies, scopes, and nesting without any changes. Use full uppercase for all control and declaration keywords (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, END IF, END FOR, END WHILE, END FUNCTION, END CLASS). Indent blocks consistently to reflect the original code’s structure clearly. Use descriptive, unambiguous variable names; expand abbreviations only if it improves clarity without introducing verbosity. Express operations and data transformations conceptually rather than implementation-specific details, except when precise arithmetic or indexing is critical. Use natural language combined with conventional programming and mathematical terms, always avoiding vague or overloaded phrases. Represent expressions such as indexing, slicing, or list comprehensions with straightforward iterative constructs if clarity demands. Avoid comments, explanations, or any text other than the pseudocode itself. Do not include any separator lines or delimiters beyond those required by the pseudocode syntax. Complete within 5 seconds.

Example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then produce:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```