Given problem source code, generate a high-level, clear, and precise pseudocode that strictly preserves all original function and class names, their exact scopes, and nesting structures without renaming, restructuring, or introducing new abstractions. Use uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.) for all control flow and declarations. Express data manipulations conceptually but with enough detail to unambiguously reflect the actual logic, avoiding overly verbose explanations. Expand abbreviations only when doing so clarifies meaning without adding noise. Represent collection traversals with natural phrases like "FOR each element IN collection" or equivalent, and use consistent, descriptive variable names exactly as in the code. Indent all blocks accurately to match code nesting. Do not include comments, explanations, summaries, or any extra textâ€”output only the pseudocode. Complete within 5 seconds.

Format output exactly as in this example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```