Given source code from a programming problem, produce concise, accurate, and high-level pseudocode that precisely mirrors the original logic and structure without adding or omitting any behavior. Maintain exact names for all functions, classes, methods, and variables, strictly preserving all scopes, nesting, class/object hierarchies, and closures. Use uppercase for all pseudocode keywords (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, END IF, END FOR, END WHILE, END FUNCTION, END CLASS), and indent blocks consistently to reflect structural scope clearly.

Express control flow and data manipulation at a conceptual level using standard mathematical and programming notation, simplifying expressions only when unambiguous and without losing fidelity. Expand abbreviations judiciously to improve clarity, avoiding redundancy or verbosity. Represent data structures and iterations explicitly to avoid ambiguity, e.g., “FOR each element IN collection” instead of vague terms. Represent lambdas or inline functions as nested FUNCTIONs where appropriate.

Do not insert comments, explanations, summaries, or any text other than the pseudocode itself. Do not output separators or annotations. Do not generate pseudo-imports or any external dependencies.

Focus on making the pseudocode a directly runnable abstraction of the code’s logic, complete and unambiguous, suitable for a programming-literate reader to re-implement or reason about behavior without seeing the source code.

Complete the transcription within 5 seconds.

Example:

Given this Python code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```