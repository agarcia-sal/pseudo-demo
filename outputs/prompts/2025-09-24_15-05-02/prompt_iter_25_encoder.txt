Given a problem's source code, generate clean, precise, and rigorous pseudocode that captures the original implementationâ€™s logic and structure exactly.  
Preserve all original function and class names verbatim, along with their scopes, nesting, and class/object hierarchies, without any modification or omission.  
Use full uppercase control keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, etc.) consistently and indent blocks uniformly to reflect the original code structure clearly.  
Express all operations and data manipulations conceptually and at a high level, using concise, descriptive natural language combined with standard programming and mathematical notation.  
Expand abbreviations only if it unambiguously improves clarity without creating unnecessary verbosity.  
Convey all index and slicing operations explicitly, specifying ranges and boundaries precisely to enable correct re-implementation.  
Represent boolean conditions, comparisons, arithmetic, and data transformations fully spelled out, ensuring unambiguous meaning.  
Do not include comments, explanations, summaries, or any text other than the pseudocode itself.  
Avoid inferring semantic purpose beyond the original code structure or altering logical flow and variable usage.  
Complete the output strictly within 5 seconds.  

Produce output exactly in the following style, matching the code indentation and keyword usage as shown:  

If the code is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

The pseudocode must be:  
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET avg TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN avg
END FUNCTION
```