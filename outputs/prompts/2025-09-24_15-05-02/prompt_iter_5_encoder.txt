Given a problem's source code, produce clear, precise, and sufficiently detailed high-level pseudocode that directly corresponds to the original implementation. Preserve all original function and class names verbatim, maintaining their exact structural hierarchy, nesting, scopes, and object relationships. Use consistent, unambiguous keywords fully spelled out for control flow and structure (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS). Represent operations and expressions in natural language enriched with standard mathematical and programming symbols only when they enhance clarity, avoiding verbosity or excessive abstraction. Use meaningful, descriptive variable names from the code verbatim—do not invent names or abbreviations—but expand abbreviations only if it unequivocally improves comprehension. Indent pseudocode blocks clearly and consistently to reflect logical nesting; avoid condensing multiple statements into single lines or one-liners that obscure control flow. Do not include comments, explanations, placeholders, or any text outside the pseudocode itself. Do not alter the logic, omit any parts, or modify function/class signatures or the ordering of statements. Keep the output exclusively pseudocode, designed as a fully self-contained, unambiguous, direct abstraction of the code, optimized for readability and correctness, and generated within 5 seconds.

Example style for a given Python code snippet:

```  
FUNCTION calc_average(nums: LIST OF NUMBER)
    SET total TO 0
    FOR each num IN nums
        SET total TO total + num
    END FOR
    SET average TO total DIVIDED BY LENGTH OF nums
    RETURN average
END FUNCTION
```