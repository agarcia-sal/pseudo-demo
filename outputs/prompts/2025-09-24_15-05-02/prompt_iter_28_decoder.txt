```python
"""
Translate the provided pseudocode into a complete, clean, and efficient Python implementation,
strictly preserving all function names, parameter names, class names, and object structures exactly as specified.

Requirements:
- Enclose your entire solution strictly within a single, properly formatted Python code block:
```python
# your code here
```
- Include all necessary imports at the very top, using only standard libraries or well-established packages
  if they improve correctness, clarity, or efficiency.
- Apply precise and consistent Python type hints inferred logically from the pseudocode.
- Maintain variable and identifier names exactly as given; do NOT rename or add functions, classes, or methods beyond the pseudocode.
- Add brief in-line comments only where absolutely necessary to clarify complex logic, assuming an experienced Python reader.
- Robustly handle all implicit or edge cases (e.g., empty inputs, invalid values) without sacrificing code clarity or overcomplication.
- Optimize for clarity, correctness, and runtime efficiency to reliably complete within 5 seconds on typical inputs.
- Use Pythonic idioms, built-ins, standard library modules, and advanced language features where appropriate.
- Do NOT include print statements, debugging code, test scaffolds, or any explanatory text outside the code block.
- Output ONLY the single Python code block with your ready-to-run implementation, nothing else.

Goal:
Produce a faithful, polished, robust, and idiomatic Python translation that maximizes correctness,
performance, readability, and strict adherence to the pseudocode's logic and structure.
"""
```