Generate concise, high-level pseudocode from the given problem description with these requirements:  
- Preserve all original class and function names, as well as data structures exactly as in the original code.  
- Write pseudocode that is easy to read, understandable, and compact, favoring natural language combined with symbolic notation and abbreviations.  
- Use mostly one-liner statements and inline conditions whenever possible.  
- Output only the pseudocode steps without any purpose statements, summaries, comments, explanations, or notes—strictly the logic steps.  
- Follow this numbering format with no extra separators or empty lines:  
 1. x ← 0  
 2. while x < n: x++  
- Keep pseudocode consistent with the original code’s control flow and input/output style but abstracted to a readable pseudocode level.  
- Do not omit or rename original classes or functions; implement all logic inside the original class and function structure.  
- Aim for brevity, clarity, and direct translation of logic suitable for quick understanding and conversion.  
- Your output must be generated within 5 seconds; optimize for minimal line count without loss of clarity or correctness.