Given any pseudocode describing an algorithm or function, **determine with certainty whether it is genuinely reproducible**, meaning it is explicitly detailed, logically sound, and sufficiently comprehensive to **unambiguously and deterministically pass all valid unit tests** relevant to its stated behavior.

Output exactly `1` if and only if **all** of the following criteria are fully satisfied, else output `0`.

---

### Rigorous Reproducibility Assessment:

**1. Explicit Definitions and Complete Scope**  
- All variables, parameters, constants, functions, classes, and data structures are explicitly declared or fully defined before their first use.  
- Data types, initial values, valid ranges, and constraints are stated or can be clearly inferred without guesswork.  
- No hidden or implicit dependencies: all inputs, outputs, and environmental assumptions are clearly included in the pseudocode; no reliance on undeclared globals, external libraries, or unmentioned system properties.

**2. Fully Specified, Deterministic Control Flow**  
- Control structures (loops, recursion, conditionals) have explicit and finite termination conditions, clearly described logic for every branch, and no missing cases or implicit assumptions.  
- Edge cases, boundary inputs (empty, minimal, maximal, special values), and all possible input classes are explicitly or implicitly covered ensuring no undefined or nondeterministic behavior.  
- Any random or probabilistic elements are either absent or defined so their behavior is reproducible solely from within the pseudocode.

**3. Precise and Unambiguous State Manipulation**  
- All updates to variables, data structures, and state are fully specified, with no omission of intermediate steps or side effects.  
- Indexing conventions (0-based, 1-based) and element references are consistent, clearly stated or follow universally recognized standards.  
- No ambiguous references; tuple/list indexing or element extraction uses consistent, defined notation without conflicting conventions.

**4. Complete Input and Output Contracts**  
- Input parameters are clearly named, typed, and their valid domains or constraints defined.  
- Outputs (return values or side effects) are precisely described in form, type, and expected contents.  
- No action or result depends on unstated assumptions outside of the pseudocode snippet.

**5. Semantic Clarity, Logical Coherence, and Integration**  
- Every step contributes transparently toward the stated goal, with no unexplained shortcuts, ambiguous steps, or logical gaps.  
- Helper functions or nested procedures are fully defined within the snippet or clearly indicated as standard, with no external dependencies.  
- Notation, syntax, and terminology are consistent throughout and adhere to a clear, interpretable pseudocode style.

**6. Self-Containment and Environment Independence**  
- The pseudocode is fully self-contained; it neither assumes nor requires external preprocessing, postprocessing, or environment-specific features beyond basic programming fundamentals.  
- Any common idioms or constructs conform to standard usage or are explicitly introduced and explained.

---

### Output Instructions

- Thoroughly analyze each pseudocode snippet against all above criteria to determine true reproducibility.  
- For each snippet, output only a single line containing exactly:  
  - `1` if the snippet demonstrably meets all criteria and thus should reliably pass all valid unit tests, or  
  - `0` if it fails any reproducibility condition in the criteria.  
- Preserve output order strictly matching the input order of pseudocode snippets.  
- Do **not** output explanations, comments, formatting, blank lines, or anything besides `0` or `1`.

---

This prompt upgrades test-time performance by emphasizing **unambiguous completeness, edge-case coverage, explicit definitions, and absolute self-containment**, while mandating consistent indexing and precise semantic clarityâ€”essentially eliminating false positives on ambiguous/incomplete pseudocode and reducing false negatives on valid, reproducible solutions across arbitrary domains.