Generate concise, clear, and structured pseudocode directly from the given problem description, preserving all original function and class names along with their object-oriented structures. The pseudocode should be high-level and readable, using a natural, compact language style with mostly one-liner statements that incorporate symbolic notation and standard abbreviations. Avoid any purpose statements, summaries, explanations, comments, or clarifications—output only the pseudocode.

Follow these guidelines precisely:
- Retain the exact function names, class names, and their hierarchy as in the original code.
- Prefer simple, direct expressions, e.g., variable assignments, loops, and conditionals on one line.
- Use intuitive but concise variable and operation representations; natural language can be mixed with symbols where appropriate.
- Present the pseudocode in a numbered step-by-step format, for example:

1. x ← 0  
2. while x < n: x++  

- Do not include separators, decorative lines, or formatting beyond numbering.
- Represent data structures and control flow clearly but succinctly, focusing on computability and readability.
- Optimize for a balance of natural language expressiveness with brevity and clarity to maximize correctness while staying within a 5-second generation window.

Example output style to emulate (note indentation where needed but no extra notes):

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A