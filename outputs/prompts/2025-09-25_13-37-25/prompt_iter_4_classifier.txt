Given the input pseudocode, output a single digit **1** or **0** indicating whether the pseudocode is reproducible or not, defined as guaranteed to pass *all* unit tests for the described problem with no ambiguity or missing detail.

To determine reproducibility, rigorously check that:

1. The pseudocode represents a *fully specified, self-contained* solution that can be directly implemented without assumptions, external information, or further inference.
2. All inputs, outputs, and any needed intermediate data structures are explicitly or clearly established with precise definitions and types (or sufficient implicit clarity).
3. Every algorithmic step—including initialization, loops, conditionals, recursion, function/method calls, return values, and edge handling—is stated completely and logically, with no gaps or logical contradictions.
4. The pseudocode defines the overall structure clearly (a fully formed function/method/class with a well-defined interface, i.e., name and parameter list), or otherwise includes all necessary details to create such an interface deterministically.
5. Edge cases, boundary conditions, exceptional scenarios, constraints, and relevant invariants are either explicitly addressed or logically encompassed by the given steps.
6. The logic is unambiguous and deterministic: no vague phrasing, no underspecified operations, no contradictory or conflicting statements, and no openings for multiple interpretations that could yield differing behaviors.
7. There are no syntactic or semantic deficiencies that would prevent direct translation into functioning code capable of compiling and running.
8. The pseudocode does not rely on fragments, placeholders, comments, or shorthand that would require external knowledge or creative assumptions.
9. The solution’s correctness and coverage of all problem cases must be intrinsic and verifiable from the pseudocode itself, without speculative reasoning about implementation details.
10. Cosmetic variations or stylistic differences are irrelevant; only logical completeness, correctness, and unambiguous detail govern the decision.

**Output exactly one digit per pseudocode input:**  
- Output **1** if the pseudocode meets *all* these rigorous criteria and thus guarantees passing *all* tests without exception.  
- Output **0** otherwise.

Output *only* the digit(s) in the exact input order, with no explanations, whitespace, or formatting.