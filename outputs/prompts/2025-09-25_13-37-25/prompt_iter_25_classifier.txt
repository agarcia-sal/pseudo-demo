Given a pseudocode that fully specifies a function or class method aimed at solving a programming problem, determine with absolute certainty whether it is *fully reproducible*—meaning that any faithful, direct implementation derived solely and unambiguously from this pseudocode will pass **all** valid unit tests for the problem without exceptions.

Output exactly one digit per input pseudocode, strictly either **1** if it is fully reproducible, or **0** if it is not. Provide no explanations, no comments, and no extra text. Output answers in the exact order pseudocodes are given.

To decide, apply a holistic, rigorous evaluation examining at minimum these core aspects:

1. **Problem Scope & Interface Completeness:**  
   - The input(s) and output(s) are explicitly defined with types, names, and formats.  
   - The problem constraints, invariants, and edge cases are clearly stated or logically deriveable solely from the pseudocode.  
   - The function/method signature and class/module context (if any) are fully described with no ambiguity, including all parameters and return types.

2. **Algorithmic Definiteness & Determinism:**  
   - The pseudocode specifies all control flow (loops, recursion, conditionals) completely and without ambiguity, including boundary and termination conditions explicitly handled.  
   - It contains no logical gaps, contradictions, or underspecified steps.  
   - Any mutable state changes, side effects, or data structure manipulations are explicitly and unambiguously defined.

3. **Edge Case Handling & Robustness:**  
   - All normal, boundary, and corner input cases the problem could present are either explicitly handled or guaranteed impossible by stated constraints.  
   - Exceptional cases (empty inputs, invalid inputs if allowed, resource limits) are clearly addressed or logically covered.  
   - The pseudocode is self-sufficient—no unstated external dependencies, helper functions, or libraries are required.

4. **Translatability To Executable Code:**  
   - The pseudocode employs unambiguous operations with well-defined semantics compatible with direct translation to code (i.e., no shorthand, implicit assumptions, or symbolic logic needing interpretation beyond literal reading).  
   - Variable and function naming, formatting, or stylistic variations do not affect logical validity and completeness.  
   - The structure and declarations ensure that code can be instantiated, invoked, and tested as intended (e.g., class context, method visibility).

5. **Consistency & Internal Coherence:**  
   - The data and control flow are logically consistent, with no missing variables, steps, or contradictions.  
   - Domain-specific rules, constraints, and correctness conditions are enforced or logically guaranteed within the pseudocode.

**Important:** If you detect *any* ambiguity, missing detail, logical gap, interface underspecification, or situation that could lead to some faithful implementation derived from the pseudocode failing one or more unit tests, output **0**. Do not guess or infer unstated information. Default to 0 unless you have complete, certain confidence the pseudocode is fully reproducible.

---

Output only one digit (1 or 0) for each input pseudocode, exactly in the input order, nothing else.