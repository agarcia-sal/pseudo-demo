Given a pseudocode input that purports to describe a complete, self-contained algorithm solving a specified programming task, your task is to determine whether this pseudocode is *fully reproducible*. *Fully reproducible* means that **any** unambiguous, direct implementation strictly following the pseudocode will pass **all** valid unit tests for the problem, without fail.

You must produce exactly one output digit per pseudocode input—no additional text or explanation:  
- Output **1** if and only if the pseudocode guarantees reproducibility by satisfying **all** criteria below.  
- Output **0** otherwise.

---

**To assign 1, verify with absolute certainty all these hold:**

1. **Complete and Explicit Problem Context**  
   The pseudocode clearly defines all inputs (types, constraints, formats), outputs (expected types and semantics), and internal states or data representations required to solve the problem, OR these can be unambiguously inferred from the pseudocode alone without external assumptions.

2. **Fully Specified Interface and Scope**  
   The pseudocode includes an exact function or method signature and/or class definition, with clearly named parameters, their types, return type, and the encompassing scope/context, so an implementer can translate it directly without guessing the entry point or inputs.

3. **Deterministic, Complete Control Flow and Logic**  
   Every computational step, including loops, conditionals, recursive calls, and data updates, must be exhaustively specified—including initialization, loop boundaries, increments, decrement, and recursion base/inductive cases. There must be no gaps or vague constructs requiring interpretation.

4. **Robust and Complete Edge Case Handling**  
   All relevant edge cases (empty inputs, minimum/maximum values, unusual but valid inputs, input constraint boundaries) and special scenarios dictated by the problem are explicitly addressed or provably handled by the logic. No input should lead to undefined, ambiguous, or incomplete behavior.

5. **Unambiguous and Precise Operations**  
   Every operation—arithmetic, assignment, data structure manipulation, string operations, indexing, and comparisons—must be clearly defined without shorthand, implicit assumptions, or ambiguous notation. Symbolic or language-specific constructs that could be misinterpreted must be fully clarified or deterministically inferable.

6. **Logical Consistency and Cohesion Without Hidden Dependencies**  
   The pseudocode’s logical flow must be consistent, with no contradictions or missing steps. It must not rely on any unstated helpers, undocumented side effects, implicit defaults, or external libraries. All needed components for correctness must be fully incorporated. 

7. **Self-Containment and Structural Soundness**  
   The pseudocode must be a complete, singular unit ready for direct translation into executable code: no partial snippets, no omitted initializations or steps, and no dependencies on code outside what is provided. It must follow a structurally coherent organization, enabling direct implementation with no guessing.

8. **Full Respect for Problem Constraints and Domain-Specific Rules**  
   The pseudocode explicitly or implicitly enforces all stated problem constraints (e.g., input size limits, value ranges, ordering conditions) and any domain-specific rules critical to correctness and passing all tests.

9. **Tolerance to Stylistic or Notational Variations That Do Not Affect Correctness**  
   Variations in variable names, formatting, comment styles, or minor syntactic conventions are acceptable as long as they do not impair completeness, clarity, or correctness.

---

**IMPORTANT:**  
- At the slightest **ambiguity**, **incompleteness**, **missing information**, **implicit assumptions requiring guessing**, or **potential logical gaps** that could lead to failing some unit tests, output **0**.  
- You must be certain that the pseudocode, by itself, suffices for a direct, unambiguous implementation passing **all** tests to output **1**.  
- Output only a single digit (1 or 0) per input, maintaining the input order, without any extra text, commentary, or formatting.

---

*End of instructions.*