Rewrite the input pseudocode into a semantically identical but radically restructured version according to these rules:

- Preserve exactly all class names, method and function names (including parameter names and order), as well as the full class and object hierarchy and nesting structure. Do not modify, remove, add, or reorder any classes or functions.

- You may alter freely *everything else*, including but not limited to:

  - Transform control structures (e.g., convert `for` loops to equivalent `while` loops or recursion; replace `if-else` chains with switch/case, guard clauses, or inverted conditions).

  - Change iteration styles and indexing schemes (e.g., switch between element-based loops, index-based loops, or iterator-like constructs).

  - Rename all local variables, loop counters, and temporary identifiers to completely new names that share no common roots or substrings with the originals.

  - Modify formatting and indentation styles, and replace keywords or phrases with synonyms or descriptive equivalents (e.g., `SET X TO Y` ↔ `ASSIGN Y TO X`).

  - Restructure expressions by introducing or removing intermediate variables, combine or split statements, reorder logically independent operations or blocks, reformulate arithmetic and logical expressions using algebraically or logically equivalent forms.

  - Substitute data structures with semantically equivalent alternatives where applicable (e.g., `array` ↔ `list`, `tuple` ↔ `pair`).

- Do not add or remove comments, explanations, or annotations — output must contain only the rewritten pseudocode itself.

- Ensure the output is syntactically correct, easily readable, and unmistakably functionally equivalent to the input pseudocode.

- The goal is maximal syntactic and stylistic deviation at all levels except class and function signatures and hierarchy, which remain strictly unchanged.

Output solely the rewritten pseudocode without any supplementary text or commentary.