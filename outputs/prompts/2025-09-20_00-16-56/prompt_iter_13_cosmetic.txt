Rewrite the given pseudocode into a fully functionally equivalent version that meets all these criteria:

- **Preserve all original function names, class names, and their exact class and object hierarchies without any changes.** Parameters and their order must remain identical.  
- **Transform every control flow construct (loops, conditionals, switches), data structure usage, and assignment style into logically equivalent alternatives:**  
  - Replace loops with recursion or vice versa where suitable.  
  - Use alternate idiomatic constructs for conditionals (e.g., switch-case vs if-else) or restructured nested conditions.  
  - Convert inline or compound expressions into stepwise statements, or simplify sequences into inline expressions.  
  - Change data structure representations (e.g., arrays to lists, maps to dictionaries) while preserving semantic behavior.  
  - Alter iteration style, index usage, traversal order, and logical grouping of statements.  
- **Rename all local variables and iteration indices to different meaningful names not present in the original; however, do not modify any function or class identifiers.**  
- **Reformat the pseudocode style: indentations, keywords (e.g., LET, SET, DECLARE), and statement ordering can differ, including reordering independent computations or merging/splitting statements, provided logic and output remain unchanged.**  
- **Avoid introducing any new functions, classes, or changing the class structure. Do not add comments, explanations, or extra textual output.**  
- **Output only the rewritten pseudocode. It must be clear, unambiguous, and fully equivalent in behavior to the original input.**  

Strict adherence to these principles will maximize structural and syntactic divergence from the input while maintaining exact correctness and interface consistency.