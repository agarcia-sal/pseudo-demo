Generate concise, high-level pseudocode for the given problem description, preserving the original function name exactly.  
Use mostly one-line steps combining natural language and standard symbolic operators (e.g., ←, =, ≠, +, -, *, /, mod) and control structures (e.g., if, else, while, for, return).  
Prefer clear but compact lines with minimal necessary indentation or spacing to distinguish nested blocks. Lines should be brief, omit all comments, explanations, summaries, or formatting lines—output pseudocode only.  
Structure steps as a numbered list starting from 1, each step representing a sequential operation or control statement. Follow this format strictly, for example:  

1. x ← 0  
2. while x < n: x++  

Use natural keywords like let, read, for, if, return, function as appropriate without verbose phrasing. Write pseudocode complete and self-contained so it is fully understandable standalone.  
Favor expressiveness and readability while remaining succinct and high-level. Do not add separators or extra formatting—only numbered pseudocode lines.  
Optimize for accuracy, clarity, and brevity given a 5-second generation limit.