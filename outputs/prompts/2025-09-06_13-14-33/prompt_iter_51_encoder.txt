Generate concise, high-level pseudocode for the given problem description keeping the original function name exactly.  
Write pseudocode that is easy to read and understand by blending natural language with symbolic notation—use short, mostly one-line statements with standard control structures and symbolic operators (←, =, ≠, +, -, *, /, mod).  
Maintain a compact style: indent or space only as needed to mark nested blocks; avoid verbose explanations, comments, summaries, or formatting lines. Output pseudocode only—no extra text.  
Structure steps sequentially and numerically like this:  
1. x ← 0  
2. while x < n: x++  
Use natural keywords such as let, read, for, if, else, return, function, but keep each line brief and expressive.  
Ensure completeness and standalone clarity so the pseudocode can be understood without external context.  
Balance clarity and brevity, favoring natural phrasing over overly symbolic or cryptic syntax, to improve readability while respecting the 5-second generation limit.