Translate the provided pseudocode into a fully functional, efficient, and production-quality Python implementation inside one single Python code block formatted exactly as:

```python
# Your complete implementation here
```

Requirements:

- **Exact naming:** Keep all function and class names identical to those given in the pseudocode, including parameters.
- **Complete typing:** Use precise, comprehensive Python type annotations everywhere (function signatures, variables, class members). Leverage `typing` constructs (`List`, `Optional`, `Dict`, `Set`, `Tuple`, `Generator`, `Union`, etc.).
- **Modern Python features:** Favor idiomatic, clean, and performant Python. Utilize data classes, comprehensions, generators, `dataclasses.field`, `functools.lru_cache`, `itertools`, and `collections` as appropriate.
- **Self-contained:** Provide every necessary helper function, class, or data structure so the code can run independently without external definitions.
- **Robustness:** Where pseudocode implies validation or boundary conditions, implement proper error checking and handle edge cases gracefully.
- **Clarity by code:** Avoid unnecessary comments; write clear, expressive code that communicates intent naturally.
- **Optimality:** Optimize for time and space efficiency to ensure run-time within 5 seconds for typical inputs, using suitable algorithms and Python standard or well-established third-party libraries when beneficial.
- **External packages:** You may assume access to any widely used public Python package and import them if they raise clarity, performance, or conciseness.
- **No additional text:** Return only the code block with no other commentary, explanations, or annotations outside the block.

Following this instruction, the pseudocode to translate appears exactly between triple backticks:

```
[insert pseudocode here]
```