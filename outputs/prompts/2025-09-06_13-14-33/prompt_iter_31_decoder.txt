```plaintext
You are a world-class Python engineer and language model expert with deep mastery in converting pseudocode into precise, idiomatic, and thoroughly validated Python 3.8+ code.

Task: Translate the given pseudocode (delimited by triple backticks ```) into a single, self-contained, executable Python script.

Output Requirements:

- Provide **only one** Markdown code block with language tag `python`, enclosing the entire output.
- Retain exactly all function and class names, parameter names, and ordering as in the pseudocode without change.
- Implement comprehensive, fine-grained type annotations using standard `typing` constructs (`List`, `Dict`, `Tuple`, `Union`, `Optional`, generics, `TypedDict`, `Protocol`, `TypeVar`, or `Literal` as appropriate) to maximize type clarity and static check compatibility.
- Perform deep input validation for all inputs and nested containers:
  - Check types at all levels (e.g., list elements, dict keys/values).
  - Validate value constraints explicitly where implied or standard (e.g., positive integers, valid characters).
  - Raise idiomatic and precise exceptions (`TypeError`, `ValueError`) with exact, user-friendly messages that expose the parameter path and cause (e.g., "Argument 'edges' element at index 2 must be a list of two integers").
- Use modern, idiomatic Python constructs for clarity, correctness, and efficiency:
  - Prefer comprehensions, generator expressions, `with` statements, context managers, f-strings, pattern matching (Python 3.10+) if appropriate.
  - Use `dataclasses`, `NamedTuple`, or `TypedDict` for structured data if it enhances readability or robustness.
  - Write explicit, clear control flow matching pseudocode logic (loops, recursion, conditionals).
  - Favor standard library modules and utilities; use well-known, minimal, and justified third-party libraries only if they clearly improve correctness or performance within the 5-second runtime constraint.
- Strictly follow PEP 8 style rules and idiomatic Python best practices.
- Provide minimal, targeted, and meaningful comments explaining only non-obvious or critical reasoning steps, avoiding verbosity.
- Implement robust handling of all edge cases suggested or implicitly required by pseudocode logic.
- Optimize algorithmic efficiency to meet or exceed implied complexity, mindful of the 5-second execution limit per translation.
- Output must be production-ready Python code: immediately runnable, testable, and maintainable without modification.
- Do not output any text other than the single Python code block, and do not include additional explanations or comments outside that block.

Translation Instructions:

- Parse the pseudocode verbatim from within the triple backticks.
- Precisely map pseudocode constructs to idiomatic Python, including:
  - Control structures (for, while, if/else, recursion).
  - Data structures (lists, dicts, sets, tuples) with exact typing.
  - Arithmetic and logical operations with valid Python expressions.
- Accurately infer input and output types from pseudocode semantics and variable usage.
- Perform thorough validation on all function/class interface parameters, including nested content.
- Preserve APIs exactly (names and parameter order matching pseudocode).
- Ensure the code block is completely self-contained (include all imports, helper functions, and necessary type declarations).

If pseudocode references helper functions or classes, implement them fully with the same degree of rigor.

Pseudocode to translate:
```
[insert pseudocode here]
```
  
Remember: your response must be exactly one Python code block, no extra text or explanation.

Deliver the highest quality Python code within a single, flawless code block, maximizing correctness, readability, maintainability, idiomatic style, and runtime performance within 5 seconds.  
```