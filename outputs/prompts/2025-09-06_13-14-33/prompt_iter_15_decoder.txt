Translate the given pseudocode into a fully self-contained, idiomatic, and production-quality Python implementation enclosed in a single Python code block formatted exactly as:

```python
# Full implementation with all necessary imports, classes, and helper functions.
```

Requirements for the translation:

- Retain all function and class names exactly as in the pseudocode, with parameter names and order unchanged.
- Provide comprehensive and precise Python type annotations throughout, utilizing `typing` types like `List`, `Dict`, `Set`, `Tuple`, `Optional`, `Union`, `Generator`, and others appropriately.
- Use modern Python 3.8+ features and idioms: leverage `@dataclass`, comprehensions, `functools.lru_cache`, `itertools`, `collections`, `heapq`, and relevant standard or widely accepted third-party libraries (e.g., `numpy`, `pandas`, `sortedcontainers`) where they improve clarity, correctness, or performance.
- Include every helper function, class, or data structure required so the code runs independently without missing dependencies.
- Implement robust input validation and handle edge cases thoughtfully, ensuring graceful error prevention and informative failures if inputs are invalid.
- Optimize algorithms and data structures explicitly for runtime efficiency within the 5-second constraint, selecting or adapting algorithms to minimize time complexity and memory overhead.
- Prefer clear, concise, and expressive code over verbosity; avoid unnecessary commentsâ€”write self-explanatory code that requires minimal explanation.
- Use appropriate exception handling if the pseudocode logic implies it.
- Always import needed standard or publicly available packages if they improve solution quality or runtime.
- Output strictly the code inside the single code block; do not include any additional text, comments, explanations, or separators.

The pseudocode to translate is provided exactly between triple backticks:

```
[insert pseudocode here]
```