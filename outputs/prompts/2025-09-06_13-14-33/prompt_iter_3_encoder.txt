Generate concise, high-level pseudocode for the given problem description, using the exact original function name. Focus on clarity and readability by blending natural language with symbolic notation, prioritizing compactness and mostly one-line statements. Use concise control structures (`let`, `read`, `if`, `for`, `while`, `return`), standard symbolic operators (←, =, ≠, +, -, *, /, mod, XOR), and abbreviations where clear. Indent or add minimal spacing only to indicate nested blocks. Do not include explanations, summaries, comments, clarifications, separator lines, or extra formatting—output strictly pseudocode alone. The pseudocode must be self-contained, easy to understand without context, and optimized for correctness and brevity within a 5-second processing constraint. Follow this numbered format exactly, for example:

1. x ← 0  
2. while x < n: x++  

Maintain this style uniformly and ensure the pseudocode presents all algorithmic steps at a high level while retaining full logic completeness.