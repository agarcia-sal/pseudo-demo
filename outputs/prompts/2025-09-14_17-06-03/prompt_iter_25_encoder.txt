Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by blending natural language with symbolic operators and concise abbreviations.  
Maintain the exact class and function names, along with original class/object nesting and structure.  
Prefer compact one-liners for logic, control flow, assignments, iterations, and returns without unnecessary detail.  
Avoid purpose statements, summaries, explanations, comments, or overview lines. Output only the pseudocode, nothing else.  
Use this sequential line format without separators or extra markup:

1. CLASS ClassName:                       [if a class is defined]  
2. FUNCTION function_name(params):              [if a function is defined]  
3. Indented concise steps inside functions and classes using:  
  • concise assignments (e.g. x ← 0, sum += val)  
  • symbolic operators (=, <, >, ≤, ≥, ≠, +, -, *, /)  
  • natural language phrases where helpful (e.g. “FOR each item IN list”, “RETURN result”)  
  • compact control flow (e.g. “IF condition: action”, “WHILE cond: actions”) as one-liners where possible  
4. Close blocks explicitly only if necessary for clarity: “END FUNCTION”, “END CLASS”  

Example style:  
FUNCTION calc_average(list_of_numbers)  
 SET total_sum ← 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value ← total_sum ÷ LENGTH(list_of_numbers)  
 RETURN average_value  
END FUNCTION