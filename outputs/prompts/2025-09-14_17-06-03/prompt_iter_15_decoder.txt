Translate the provided pseudocode into fully functional, efficient, and idiomatic Python code that exactly preserves class names, function names, method signatures, nested structures, and object hierarchies as delineated. Your code must precisely follow the pseudocode's logic, control flow, and state changes without omission, addition, or modification of intended functionality. Where the pseudocode implies custom data structures (e.g., ListNode, TreeNode), define these classes in a minimal runnable form consistent with typical usage so the solution is complete and testable as is.

When handling input parameters or return types, assume only native Python types (e.g., lists for sequences) unless pseudocode explicitly defines otherwise. Do not assume any helper classes or imports unless you define or include them. Optimize your code to be clear, concise, and performant—leveraging any standard Python libraries or idioms where appropriate—and ensure the code executes within 5 seconds for typical inputs.

Return only a single Python code block in the exact format below (no additional text, explanations, or comments):

```python
# your complete implementation here
```

Strictly follow these rules to maximize correctness, interface fidelity, and runtime efficiency on all test inputs.