Generate concise, clear, and high-level pseudocode from the given problem description while strictly preserving all class names, function names, parameters, and the original class/object structure.  
Make the pseudocode easy to read and understand by blending natural language with symbolic and abbreviated representations. Favor compactness using one-liners and minimal boilerplate, avoiding unnecessary verbosity or redundant details.  
Do NOT include any summaries, explanations, comments, or overview statements—only output the pseudocode itself.  
Use consistent indentation to indicate blocks and control flow.  
Follow this exact numeric step format without any separator lines or extra markup:

1. [Class declaration line if any, e.g. `CLASS Solution:`]  
2. [Function declaration line, e.g. `FUNCTION function_name(params):`]  
3.  [Indented pseudocode statements inside functions, using concise constructs, symbolic operators, and abbreviations]  
4.  [Use one-line control structures where possible, e.g. `WHILE condition: action`, `IF cond: action` to keep lines short]  
5.  [Use symbolic assignment operators like `←`, `=`, or `TO` consistently where meaningful]  
6.  [Close blocks explicitly with `END FUNCTION` and `END CLASS` only if it improves clarity]  

Example pseudocode style for a simple function:  
FUNCTION calc_average(list_of_numbers)  
 SET total_sum TO 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
 RETURN average_value  
END FUNCTION