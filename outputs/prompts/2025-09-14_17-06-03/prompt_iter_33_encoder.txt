Generate concise, clear, high-level pseudocode from the given problem description, preserving all class and function names exactly as stated, and retaining the same class/object structure.  
Make the pseudocode easy to read and understand by blending natural language with symbolic representations, abbreviations, and minimal boilerplate. Write compact logic, preferring single-line statements and avoiding unnecessary detail.  
Do NOT include any purpose statements, summaries, explanations, comments, or overview lines. Provide only the pseudocode as output, nothing else.  
Use the following numbered step format without any separator lines or additional markup:

1. [Class declaration line if present, e.g. `CLASS Solution:`]  
2. [Function declaration line, e.g. `FUNCTION function_name(params):`]  
3. [Indented steps inside the function, using concise constructs and symbolic operators]  
4. [Control flow, assignments, iterations and returns in compact one-liners where possible]  
5. [Close function/class blocks explicitly only if needed for clarity, e.g. `END FUNCTION`, `END CLASS`]  

Example for a simple function:

FUNCTION calc_average(list_of_numbers)  
 SET total_sum TO 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
 RETURN average_value  
END FUNCTION