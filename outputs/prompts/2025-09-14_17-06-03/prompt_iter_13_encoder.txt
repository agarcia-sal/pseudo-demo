Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by combining natural language with symbolic notation, abbreviations, and one-liners where appropriate. Preserve all class and function names exactly as given, maintaining the original class and object structure. Avoid any purpose statements, comments, summaries, explanations, or notes—output only the pseudocode.

Structure the pseudocode as numbered lines starting at 1, each representing a single concise instruction or declaration. Use minimal boilerplate and prefer compact expressions and symbolic operators.

Follow this style and format:

1. CLASS ClassName:  
2. FUNCTION function_name(params)  
3.  [Indented concise steps, e.g., assignments, loops, conditionals as one-liners where feasible]  
4.  [Use symbolic operators (=, +=, -=, <, >, ≤, ≥, ≠), minimal natural language, and abbreviations]  
5.  [Include explicit END FUNCTION and END CLASS only if clarity demands]  

Example:

FUNCTION calc_average(list_of_numbers)  
 SET total_sum TO 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value TO total_sum DIVIDED BY LENGTH(list_of_numbers)  
 RETURN average_value  
END FUNCTION