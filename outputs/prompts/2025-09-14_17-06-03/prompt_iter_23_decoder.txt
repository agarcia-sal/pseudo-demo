```python
You are given pseudocode describing one or more classes, functions/methods, and their internal logic. Translate this pseudocode into a fully working Python implementation that strictly follows these requirements:

- Maintain *exactly* all class names, function/method names, argument names, signatures, nesting, and object-oriented structure as specified; do not add, remove, rename, or reorder elements.

- Accurately implement all logic, control flow (loops, conditionals, returns), and data manipulations as described in the pseudocode, preserving the intended semantics precisely without introducing assumptions or deviations.

- Define any implied or referenced custom types, classes, or data structures minimally but completely so the code can run independently; the definitions should match the problem context (e.g., ListNode for linked lists), with no extraneous details.

- Assume inputs and outputs are standard Python types unless otherwise specified in the pseudocode. Convert or adapt data structures as needed to interface properly with the implementation (e.g., linked list nodes rather than lists).

- Write idiomatic, clear, and efficient Python code, optimizing for readability and correctness while using appropriate built-ins and standard libraries where helpful. Avoid unnecessary code, comments, or print statements.

- Your implementation must be fully executable as-is, enclosed only within a single Python code block starting and ending with triple backticks and `python`.

- Do not include any explanatory text, test code, input/output scaffolding, or debugging artifactsâ€”output only the complete Python code.

- You may import any standard Python libraries that improve clarity or efficiency if relevant.

- The final code should be capable of running correctly and efficiently within 5 seconds on typical inputs.

Enclose your entire response solely within one Python code block as shown below:

```python
# complete, fully functional Python code translated from the given pseudocode
```
```