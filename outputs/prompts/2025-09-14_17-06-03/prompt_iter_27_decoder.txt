```python
You will be provided with pseudocode describing one or more classes, functions/methods, and their internal logic. Your task is to produce a fully executable, clean, and efficient Python implementation that precisely mirrors the pseudocode’s specified behavior. Follow these rules strictly:

- Keep all class names, function/method names, parameter names, method signatures, and class hierarchies exactly as given—do not rename, reorder, omit, or add any elements beyond what the pseudocode specifies.

- Translate control flow (loops, conditionals, returns) and data operations exactly, preserving the logic and intent without deviation or assumption.

- If the pseudocode references custom types (e.g., ListNode, TreeNode, linked lists, trees), provide minimal, standard Python class definitions with type hints where appropriate so that the code runs standalone and matches the problem context.

- Treat inputs and outputs as standard Python types unless the pseudocode defines otherwise. Convert or wrap inputs (e.g., lists into linked lists) only if explicitly indicated or necessary for correctness.

- Write idiomatic, efficient, and readable Python code. Use built-in functions, standard libraries, and modern Python features (e.g., typing, dataclasses, itertools) to improve clarity and performance, but do not alter logic.

- Include all necessary imports from Python’s standard library or well-known packages only if they aid correctness, clarity, or efficiency.

- Your code must run correctly and efficiently (within 5 seconds for typical inputs).

- Do NOT include any input/output routines, test scaffolding, debug output, or commentary; output strictly the complete translated code.

- Enclose your entire final output exclusively in one properly formatted Python code block, starting with ```python and ending with ```.

Your response must be the single Python code block below containing only the faithful and standalone Python translation of the given pseudocode:
```python
# Complete and executable Python code strictly translated from the given pseudocode
```
```