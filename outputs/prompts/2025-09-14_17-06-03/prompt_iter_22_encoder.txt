Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by blending natural language with symbolic operators and compact expressions.  
Preserve all original class and function names exactly, maintaining the same class and object structure. Do NOT include any purpose statements, explanations, comments, summaries, or overview lines—output only the pseudocode.  
Use primarily one-liners and abbreviations for assignments, control flow, and returns, avoiding unnecessary detail or boilerplate. Prefer using symbolic operators (←, +, –, *, /, =, <, >, ≤, ≥) and concise keywords (SET, FOR, WHILE, IF, ELSE, RETURN).  
Format the pseudocode as a numbered list of steps without separator lines or extra markup, following this example style:

1. CLASS Solution:  
2. FUNCTION function_name(params)  
3.  SET x ← 0  
4.  FOR each item IN items: x++  
5.  RETURN x  
6. END FUNCTION  
7. END CLASS

Always explicitly declare CLASS and FUNCTION lines when present, indent logically (spaces or tabs), and include END FUNCTION and END CLASS only if needed for clarity.  
Do not repeat or reuse pseudocode from previous examples; generate fresh pseudocode tailored to the input problem description.