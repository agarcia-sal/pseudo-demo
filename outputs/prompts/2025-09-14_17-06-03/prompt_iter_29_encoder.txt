Generate concise, clear, and high-level pseudocode from the given problem description, preserving all class and function names and their exact casing as stated, and retaining the original class and object structure exactly.  
Write pseudocode that is easy to read and understand by combining natural language with symbolic operators and abbreviations. Prefer compact, mostly one-line statements without unnecessary boilerplate.  
Do NOT include any purpose statements, comments, explanations, summaries, or overview lines—only pseudocode output.  
Use no separator lines or extra markup. Format steps as numbered lines starting from 1, with indentation as needed for block structure, for example:

1. FUNCTION function_name(params)  
2. SET var TO 0  
3. WHILE condition: var++  
4. RETURN var  
5. END FUNCTION  

For classes, begin with:  
1. CLASS ClassName:  

Indent class methods and inner blocks consistently. Use clear control flow constructs (IF, WHILE, FOR) and assignments with short, natural expressions.  
Prefer symbolic assignments (← or TO), one-line flows, and concise loop/conditional syntax to maximize compactness and clarity.  
Keep all variable, class, and function names exactly as given; do not rename or alter parameters.  
Example:

If the original code is:  
```  
def calc_average(nums):  
 total = 0  
 for num in nums:  
  total += num  
 avg = total / len(nums)  
 return avg  
```  

Output pseudocode:  
1. FUNCTION calc_average(nums)  
2. SET total TO 0  
3. FOR each num IN nums: total += num  
4. SET avg TO total DIVIDED BY LENGTH OF nums  
5. RETURN avg  
6. END FUNCTION