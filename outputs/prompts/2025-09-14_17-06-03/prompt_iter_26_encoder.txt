Generate concise, high-level pseudocode from the given problem description, preserving all original class and function names exactly, and maintaining the same class/object structure.  
Make the pseudocode easy to read and understand by blending natural language with symbolic operators and abbreviations, focusing on compactness and clarity. Prefer single-line statements and one-liners for loops, conditionals, and assignments wherever possible.  
Do NOT include explanations, summaries, comments, or any extra text—output only the pseudocode.  
Use the following format consistently (no separator lines or extra markup):

1. [Class declaration line if present, e.g. `CLASS Solution:`]  
2. [Function declaration line, e.g. `FUNCTION function_name(params):`]  
3. [Indented steps inside the function/class using concise constructs]  
4. [Use symbolic operators (`←`, `+`, `-`, `*`, `/`, `=`, `<`, `>`, `≥`, `≤`, `≠`) and standard pseudocode keywords (`IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, etc.)]  
5. [Explicitly close blocks with `END FUNCTION` and `END CLASS` only if needed for clarity]  

Example style:

FUNCTION calc_average(list_of_numbers)  
 SET total_sum ← 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value ← total_sum ÷ LENGTH(list_of_numbers)  
 RETURN average_value  
END FUNCTION