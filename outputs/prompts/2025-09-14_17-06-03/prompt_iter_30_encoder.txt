Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by using clear natural language combined with symbolic notation, abbreviations, and compact expressions.  
Preserve all class and function names exactly as stated and maintain their original class and object structures.  
Express logic in compact one-liners where appropriate, avoiding unnecessary detail, boilerplate, comments, explanations, or summaries. Output **only** the pseudocode.  
Use this line-numbered format without any separator lines or extraneous markup:

1. [Class declaration if present, e.g. `CLASS Solution:`]  
2. [Function declaration, e.g. `FUNCTION function_name(params):`]  
3. [Indented concise steps inside the function: control flow, assignments, iterations, returns]  
4. [Prefer symbolic operators (←, +=, ==, etc.), abbreviations, and single-line statements]  
5. [Explicitly close blocks only if helpful for clarity, e.g. `END FUNCTION` or `END CLASS`]  

Example for clarity:

FUNCTION calc_average(nums)  
 SET total ← 0  
 FOR num IN nums  
  INCREMENT total BY num  
 SET avg ← total DIVIDED BY LENGTH OF nums  
 RETURN avg  
END FUNCTION