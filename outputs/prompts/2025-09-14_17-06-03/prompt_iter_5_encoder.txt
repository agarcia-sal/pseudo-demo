Generate concise, clear, and easy-to-read high-level pseudocode from the given problem description. Preserve all class and function names exactly as stated, maintaining the original class and object structure without altering them. Use natural language mixed with symbolic operators and abbreviations, favoring compact, mostly one-line statements for assignments, control flow, and returns. Avoid unnecessary boilerplate, comments, or explanations—output only the pseudocode, no additional text. Use the following numbered steps format with minimal indentation (only to denote code blocks logically):

1. CLASS ClassName:                      (including class declaration if present)  
2. FUNCTION function_name(parameters)                       (including function declaration)  
3. [Indented concise steps, e.g., variable initializations, loops, conditionals, one-liners]  
4. [Use symbolic operators (=, <, >, ≤, ≥, ≠, +, -, *, //, %) and abbreviations for increments/decrements]  
5. [Use natural phrasing for collection operations (e.g., FOR each x IN collection), comparisons, returns]  
6. END FUNCTION (or END CLASS) only if needed to close a block clearly  

Example:  
FUNCTION calc_average(list_of_numbers)  
 SET total_sum TO 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
 RETURN average_value  
END FUNCTION