Translate the given pseudocode into fully runnable, idiomatic, and optimized Python code that strictly preserves all class names, function names, method signatures, nested scopes, and object hierarchies exactly as shown in the pseudocode. Your implementation must replicate the pseudocodeâ€™s logic, control flow, variable state changes, and data manipulations precisely and completely with no alterations or omissions.

- Define any implied custom data structures or classes minimally so the solution is self-contained and immediately testable.
- Assume input parameters and return types are native Python types unless the pseudocode explicitly indicates custom or complex types.
- Avoid any assumptions about external helper classes or imports unless you explicitly define or import them in your code.
- Use appropriate, efficient Python standard libraries or idioms freely to improve performance and clarity without changing intended behavior.
- Ensure that your code runs correctly within a strict 5-second execution limit on typical inputs.
- Carefully handle any data structure conversions implied by the problem context to match input/output expectations (e.g., wrapping primitive lists into node-based linked lists if pseudocode expects it).
- Return **only** one Python code block in this exact format (no explanations, commentary, or extra text):

```python
# your complete, ready-to-run Python implementation here
```

Strictly adhere to these instructions to maximize correctness, fidelity to the original pseudocode interface, and runtime efficiency for all test cases.