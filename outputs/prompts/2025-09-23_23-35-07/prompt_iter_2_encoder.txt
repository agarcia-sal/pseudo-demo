Given a problem’s original code, generate concise, high-level pseudocode that directly reflects the code’s logic and structure.  

- Retain all original function and class names, preserving class/object hierarchies exactly as in the code.  
- Express control flow clearly using standard constructs (IF, FOR, WHILE, RETURN, etc.) and indentation for scope.  
- Use natural language keywords in uppercase for clarity and abstraction (e.g., FUNCTION, RETURN, FOR, IF, WHILE, END FUNCTION).  
- Prefer descriptive, self-explanatory variable names but keep them as in the code if available.  
- Write pseudocode in clear, plain English phrasing; do not compress or use excessive abbreviations that reduce readability.  
- Reflect expressions and operations as abstractly as possible while keeping the original semantics intact.  
- Avoid comments, explanations, summaries, purpose, or notes — output only the pseudocode, precisely mirroring the given code logic.  
- Use single-line statements where natural but multiple lines where clarity benefits; prioritize readability over compactness.  
- Omit any formatting separators such as lines or blocks; produce clean, minimal pseudocode output.  

Example transformation style:

Input code:  
def calc_average(nums):  
 total = 0  
 for num in nums:  
  total += num  
 avg = total / len(nums)  
 return avg  

Pseudocode output:  
FUNCTION calc_average(nums)  
 SET total TO 0  
 FOR EACH num IN nums  
  INCREMENT total BY num  
 SET avg TO total DIVIDED BY LENGTH OF nums  
 RETURN avg  
END FUNCTION