Given code in any programming language, produce precise, clean, and highly abstract pseudocode that fully preserves the original logical flow, naming, and hierarchical relationships:

- Maintain all original function, method, and class names exactly as they appear in the code; preserve classes, methods, and object structures nested properly without alteration.

- Use standard uppercase pseudocode keywords to express all control flow constructs explicitly and fully, including but not limited to FUNCTION, CLASS, IF, ELSE, ELSE IF, FOR EACH, WHILE, RETURN, SET, APPEND, INCREMENT, DECREMENT, END IF, END FOR, END WHILE, END FUNCTION, and END CLASS.

- Indent consistently and clearly to indicate all scopes and nested structures unambiguously.

- Translate operations and expressions into fully expanded, natural, descriptive English phrases that still precisely capture the code’s meaning; prefer clarity, explicitness, and fluent language over terse or cryptic wording.

- Keep all variable and parameter names as in the source code unless a name is vague or misleading; only then replace it with a clear, descriptive name that preserves logic and intent without losing generality.

- Represent loops explicitly as “FOR EACH element IN collection” or “FOR index FROM start TO end,” avoiding shorthand or condensed forms; likewise, express conditional branching as complete blocks using IF condition THEN ... ELSE IF condition THEN ... ELSE ... END IF.

- Break down complex statements into multiple lines as needed to maximize readability and semantic clarity; do not force compound expressions into single lines if that hinders understanding.

- When referring to operations on variables or data, use meaningful, natural language verbs and phrases, for example:  
  “INCREMENT counter BY 1”  
  “SET total_sum TO sum OF elements”  
  “APPEND item TO list”  
  “RETURN remainder OF value DIVIDED BY divisor”

- Omit all comments, explanations, formatting marks, or any output other than the pseudocode itself.

- Write at a high level of abstraction reflecting intent rather than specific syntax or low-level implementation details.

- Output only the pseudocode, without any headers, footers, or disclaimers.

Example:  
If the input is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  
Output pseudocode:  
```
FUNCTION calc_average(nums)  
    SET total TO 0  
    FOR EACH num IN nums  
        INCREMENT total BY num  
    SET avg TO total DIVIDED BY LENGTH OF nums  
    RETURN avg  
END FUNCTION
```