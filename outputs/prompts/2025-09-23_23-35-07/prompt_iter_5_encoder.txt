Given code in any programming language, produce clean, clear, and abstract pseudocode that precisely models the code’s logical flow and structure while maintaining the original naming and hierarchy:

- Preserve all original function and class names exactly as they appear; keep classes, methods, and object relationships intact and nested appropriately.

- Express control flow explicitly and clearly with standard pseudocode keywords in uppercase (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS, etc.).

- Use indentation to indicate scope and structure unambiguously.

- Translate expressions and operations to natural, descriptive English phrases without losing semantic precision; favor clarity over brevity.

- Retain all variable names exactly as in the code unless a name is non-descriptive or unclear; in that case, replace with a clearly descriptive equivalent while preserving logic.

- Omit comments, explanations, formatting lines, or any additional text. Output only the pseudocode, nothing else.

- Write pseudocode at a high-level of abstraction reflecting intent, avoiding low-level language-specific syntax or implementation details.

- Use meaningful phrases for operations (e.g., “INCREMENT count BY 1”, “SET total TO sum OF elements”, “APPEND element TO list”) ensuring natural language fluency and enhanced readability.

- Express branching and loops in full form (e.g., IF condition THEN ... ELSE ... END IF) and avoid abbreviated constructs.

- Produce multiline statements when it improves clarity, never force complex logic into a single line.

Example transformation:

Input code:  
def calc_average(nums):  
 total = 0  
 for num in nums:  
  total += num  
 avg = total / len(nums)  
 return avg  

Output pseudocode:  
FUNCTION calc_average(nums)  
 SET total TO 0  
 FOR EACH num IN nums  
  INCREMENT total BY num  
 SET avg TO total DIVIDED BY LENGTH OF nums  
 RETURN avg  
END FUNCTION