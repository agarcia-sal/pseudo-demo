Given the critical need to robustly and accurately identify whether pseudocode is fully reproducible (i.e., guaranteed to pass all its intended unit tests without error or ambiguity), the enhanced prompt must explicitly drive rigorous analytic evaluation. This includes clarity, completeness, deterministic behavior, correctness of logic and boundary handling, and unambiguous interpretation consistent with standard algorithmic execution.

---

**Improved Prompt**

---

You will be given one or more pieces of pseudocode, each representing a distinct algorithm or function. For each piece of pseudocode, analyze it independently and determine whether it is *fully reproducible*.  

**Definition:**  
*Fully reproducible* means the pseudocode’s logic is sufficiently clear, unambiguous, and comprehensive such that when implemented exactly as described, it will correctly pass **all possible** unit tests intended for the underlying problem, with no edge cases or scenarios that cause failure, error, or undefined behavior.

---

**Instructions:**  

1. **Output Format:** For each pseudocode input, output exactly one integer:  
   - Output **1** if the pseudocode is fully reproducible.  
   - Output **0** if it is not.  
   Do not output anything else—no explanations, no comments, no additional text. The order of the outputs must match the order of the pseudocodes given as input.

2. **Analytic Requirements:** When analyzing each pseudocode, consider all of the following exhaustive criteria (but not limited to):  
   - **Completeness:** Does the pseudocode explicitly cover all critical steps and cases, including initialization, input validation, boundary conditions, and termination?  
   - **Deterministic Logic:** Is every step clearly defined without ambiguity or contradiction? Are control flows (loops, conditionals, recursion) unambiguously stated and terminating?  
   - **Correctness of Core Algorithm:** Does the algorithm correctly implement the intended logic to solve the problem for all valid input ranges?  
   - **Handling of Edge Cases:** Are edge cases (empty inputs, minimal/maximal sizes, special values) explicitly or implicitly handled correctly?  
   - **Accurate Variable Management:** Are variables clearly initialized, updated, and used? Are data structures properly indexed and managed to prevent out-of-bounds or undefined behavior?  
   - **Mathematical and Logical Validity:** Are comparisons, arithmetic operations, and condition checks mathematically sound and logically valid?  
   - **Clarity of Data Types and Operations:** Is it unambiguous how data is accessed and modified (e.g., list indexing, substring operations, arithmetic precedence)?  
   - **Self-Consistency:** Are no conflicting instructions or unreachable code present?  
   - **No Missing Critical Steps:** Are no essential steps such as incrementing indices or termination conditions omitted?  
   - **No Ambiguous or Imprecise Constructs:** Avoids vague descriptions that prevent faithful implementation.

3. **Scope of Analysis:**  
   - Do not assume any fixes or interpretations beyond what is explicitly stated.  
   - Cosmetic variations that do not change meaning or correctness should still produce output 1 if the pseudocode is reproducible.  
   - Near-complete or near misses (passing majority but failing some test cases) must be labeled 0.  
   - Pseudocode that does not fully realize the problem requirements or contains logical or syntactical ambiguity must be labeled 0.

---

**Pseudocode Input Example:**  
```<INSERT_PSEUDOCODE_HERE>```

---

**Your answer must be exactly:**  
`1` or `0`

---

**Summary:** Your task is to perform an in-depth, rigorous semantic and syntactic examination of each pseudocode provided, ignoring superficial form but focusing on correctness, completeness, and unambiguous reproducibility, and respond with a binary decision as defined above.

---

This revised prompt prioritizes precision, comprehensive evaluation criteria, and forbids assumptions, ensuring significantly improved accuracy in distinguishing truly reproducible pseudocode from imperfect or ambiguous ones. It forces the responder to think like a rigorous test oracle and validator rather than a heuristic guesser.