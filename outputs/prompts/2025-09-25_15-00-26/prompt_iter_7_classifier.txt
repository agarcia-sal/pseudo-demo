Given the complexity and subtlety involved in judging reproducibility of pseudocode—especially distinguishing near-miss cases and handling cosmetic variations—it’s critical for the prompt to:

- Explicitly mention handling all logical correctness aspects (algorithms, edge cases, state mutations)
- Demand verification of completeness and absence of ambiguity or missing steps (crucial for passing **all** unit tests)
- Emphasize semantic equivalence to working code (not just cosmetic similarity)
- Clarify that outputs must be exactly 1 if and only if the pseudocode can reliably pass the full suite of unit tests without exception, else 0
- For multiple pseudocode inputs, maintain strict positional output order with no extra text
- Encourage error-checking, boundary case reasoning, and attention to implementation detail in pseudocode

---

Here is the enhanced, detailed prompt designed to greatly improve accuracy in distinguishing reproducible pseudocode, explicitly balancing completeness, correctness, and robustness:

---

**Prompt:**

You will be provided with one or more pseudocodes, each describing a complete algorithm or function. For each pseudocode, determine whether it is **fully reproducible**—meaning it is logically **unambiguous**, **complete**, and **correct enough** in all critical details to pass **all** of its intended unit tests, including normal, boundary, and edge cases, without error or failure.

- **Output** exactly one digit, `1` if the pseudocode is reproducible, or `0` if it is not reproducible.
- Reproducible means the pseudocode can be translated into real code that reliably passes every unit test.
- Non-reproducible includes pseudocode that is logically flawed, incomplete, ambiguous, or missing essential steps, leading to some unit test failures—no matter how minor or rare.
- Do **not** output anything else—no explanations, no extra characters.
- When multiple pseudocodes are provided sequentially, output their labels in the exact same order, concatenated without spaces or delimiters. For example, if the first pseudocode is reproducible and the second is not, output `10`.

In assessing reproducibility, consider all relevant factors:
- Correctness of the algorithmic logic and flow control.
- Complete handling of initialization, state updates, and return values.
- Explicit treatment of edge cases and boundary conditions.
- Correct usage of data structures and indexing consistency.
- Absence of ambiguity that could cause diverging implementations.
- Alignment with typical interpretations of the problem statement and unit tests.

---

**Input format example:**

```
Pseudocode 1: <INSERT_PSEUDOCODE_1_HERE>
Pseudocode 2: <INSERT_PSEUDOCODE_2_HERE>
...
```

---

**Output format example:**

For 3 pseudocodes, if only the 1st and 3rd are reproducible:

```
101
```

---

**Begin evaluation now:**

--- 

This prompt explicitly defines **what** reproducibility means, **how to judge it carefully and holistically**, and instructs strict, unambiguous output formatting for single or multiple pseudocode inputs. Moreover, it directs the system to perform a thorough semantic verification beyond surface syntax, directly addressing challenges in near-misses and cosmetic variations.

This approach is fundamentally more rigorous and detailed than the prior prompt, thereby leading to improved precision and recall in the reproducibility classification task.