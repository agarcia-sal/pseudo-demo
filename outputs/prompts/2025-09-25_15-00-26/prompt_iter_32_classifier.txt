```
Task:  
You will be given one or more pseudocode snippets, each describing a complete algorithm solving an unspecified computational problem. For each snippet, output exactly one digit—without spaces, newlines, or any other characters—as follows:  
- Output `1` if the pseudocode is *fully reproducible*, meaning **any direct, faithful implementation strictly following the pseudocode (with no additions, omissions, or inferred details) will pass every conceivable unit test confirming full correctness** over the entire valid and relevant input domain, including normal, edge, boundary, invalid, error, and corner cases.  
- Output `0` otherwise.

Important: Output only the concatenated sequence of `0` and `1` digits corresponding to the order of the input pseudocode snippets. No explanations, formatting, or extra characters at all.

---

Definition of *fully reproducible pseudocode* (must satisfy **all** these criteria simultaneously):

1. **Complete and explicit input specification**  
   - Clearly defines input domain, types, formats, sizes, and constraints without any hidden assumptions.  
   - Explicitly addresses or safely handles all valid inputs, including empty inputs, minimal/maximal sizes, boundary values, and possible malformed or invalid inputs within problem scope.  
   - If invalid inputs are possible and relevant, the pseudocode must specify explicit handling (e.g., errors, rejections, fallback logic). If invalid inputs are not within scope, it must explicitly exclude them.  
   - No reliance on assumptions or external validation outside the pseudocode.

2. **Full variable and data structure declarations and initializations**  
   - Every variable, data structure, state element, and auxiliary value is declared and initialized before use with clearly specified types, sizes, and initial values or states.  
   - No undefined, implicit, or externally assumed variables, constants, types, or values.  
   - Complex structures (arrays, matrices, lists, maps) have explicit dimensions, contents, and initializations described.

3. **Deterministic, exhaustive, and sound control flow**  
   - All control structures (loops, recursion, conditionals, switches) have clearly defined entry points, progression, and termination conditions that ensure no infinite loops or premature exits violating correctness.  
   - All cases and branches of a conditional or switch are fully and explicitly covered with no ambiguities, gaps, or missing conditions.  
   - No contradictory, unreachable, or logically inconsistent code affecting correctness.  
   - The entire control flow is complete—every logically possible path is accounted for.

4. **Detailed and unambiguous algorithmic operations**  
   - Every step, computation, variable update, comparison, mutation, and data manipulation is explicitly described and logically coherent.  
   - No gaps, vague descriptions, unspecified operations, or missing essential steps.  
   - All arithmetic and indexing operations are clearly specified and respect data boundaries and constraints preventing out-of-bound or invalid state accesses.

5. **Explicit handling of all edge, boundary, exception, and failure cases**  
   - Boundary cases (e.g., empty inputs, single-element data, limits of numeric ranges, zero divides) are explicitly checked and correctly processed.  
   - Includes necessary guards against runtime errors or undefined states (out-of-range indices, division by zero, overflow/underflow).  
   - Specifies error-handling or alternative branches if the problem domain requires it.

6. **Precise and deterministic output specification**  
   - Output variables, types, formats, and construction steps are fully detailed and unambiguous.  
   - The output must be deterministically derived from the prior computations with no ambiguity in content or format.  
   - Output complies completely with the expected conventions of the intended problem.

7. **Self-contained within pseudocode context; no external dependencies or assumptions**  
   - The snippet can be implemented exactly as-is without supplementing it with external data, libraries, environment assumptions, language-specific features, or implicit behaviors.  
   - No need for readers or implementers to infer missing details or fill gaps to understand or implement the algorithm.

8. **Clarity, consistency, and precision in notation and style**  
   - Pseudocode syntax and idioms are clear, consistent, and unambiguous throughout.  
   - Style variations are permitted only if they preserve complete unambiguity and logical rigor.  
   - No overly terse, contradictory, or ambiguous expressions that leave room for multiple interpretations undermining reproducibility.

---

**Evaluation instructions:**  
- Analyze each snippet conservatively and thoroughly across all 8 criteria.  
- If there exists *any* uncertainty, ambiguity, incomplete coverage, missing detail, or logical gap that could cause conceivable failures in any valid unit test across the entire input domain, output `0` for that snippet.  
- Output `1` *only* if the snippet completely and rigorously satisfies *all* criteria above without exception.  
- This judgment must cover *all* relevant cases, not only typical or common inputs.

**Strict prohibitions:**  
- Do **not** infer, supply, or guess any missing details or assumptions, even if they seem obvious or intuitive.  
- Do **not** permit reliance on environmental, language, or external behaviors beyond what the pseudocode explicitly states.  
- Pay special attention to subtle failure points: uninitialized variables, hidden state, out-of-bound accesses, undefined behavior, infinite loops or recursion, partial enumeration of cases, ambiguous outputs, or incomplete input domain coverage.

---

Input format:  
```
<INSERT_PSEUDOCODE_HERE>
```

Output format:  
A single string of concatenated digits (`0` or `1`), exactly one per input snippet, in input order, no spaces or newlines.

---

This prompt is designed to maximize accuracy in classifying pseudocode reproducibility with rigor and detail. Please comply **exactly** with the above directives.
```