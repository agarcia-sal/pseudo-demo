```
Task:  
You will receive one or more pseudocode snippets. For each snippet, output a single digit:  
- `1` if the pseudocode is fully reproducible, or  
- `0` if it is not.  

Concatenate the outputs strictly in the input order, emitting only the digit characters, with absolutely no spaces, newlines, or any other symbols. No explanation or annotation is allowed.

Definition of *fully reproducible*:  
A pseudocode snippet is *fully reproducible* if and only if **every possible faithful implementation that strictly and exclusively follows the snippet — with no external assumptions, interpretations, or guesswork — will pass 100% of all conceivable unit tests for its specified or implied functionality.** This includes:

- All valid inputs, all edge cases, boundary values, atypical and corner cases.  
- Error and invalid input handling where the domain or problem inherently requires it.  
- Complete correctness, determinism, and consistency without ambiguity.

Your assessment must be conservative and rigorous: if there exists **any** ambiguity, incompleteness, unstated assumption, implicit constraint, or logical gap that could cause an implementation strictly following the pseudocode to fail **any** relevant unit test, output `0`.

---

Evaluation criteria (apply these precisely to each snippet):  

1. **Explicit and exhaustive input domain coverage**  
   - Inputs, valid or invalid, including extremes (empty values, zero-length, max/min ranges, nulls or null-equivalent inputs, special or boundary characters, zero values, negative values if applicable).  
   - No reliance on inputs being sanitized, constrained, or limited beyond what is explicitly stated.  
   - All input types and formats involved must be clearly defined or fully handled.

2. **Complete, unambiguous declaration and initialization of all state**  
   - Every variable, data structure, flag, index, counter, accumulator, helper variable, or state element must be explicitly declared and initialized prior to use.  
   - No usage of undefined, partially defined, or conditionally initialized state that could lead to nondeterministic behavior.

3. **Deterministic and fully specified control flow with thorough coverage**  
   - All loops have explicitly defined, finite, and terminating conditions.  
   - Recursion (if any) is clearly bounded and guaranteed to terminate.  
   - All conditional branches comprehensively cover all possible logical cases to prevent undefined or unexpected behavior.  
   - No unreachable, dead, or contradictory code affecting correctness.

4. **Complete, detailed, logically sound algorithmic steps**  
   - Every computational operation, data transformation, or decision is fully and precisely described without ambiguity or omission.  
   - Arithmetic or indexing operations are explicitly defined and safe (e.g., no out-of-bounds access without handling).  
   - No vague, implicit, or symbolic placeholders that require reader assumption or external knowledge.  
   - Essential algorithmic steps must not be missing or only partially described.

5. **Explicit boundary and exceptional case management**  
   - Clear handling of empty inputs, minimum or maximum input sizes, zero division, underflow, overflow, or other runtime error risks.  
   - Explicit checks or logic addressing error states, invalid inputs, or unconventional inputs as required by the problem domain.

6. **Fully precise and deterministic output definition**  
   - Outputs (return values, printed results, returned data structures) are explicitly defined, fully consistent with input and algorithm logic.  
   - No ambiguity in output format, data type, or value.  
   - No unspecified transformations or formatting.

7. **Absolute self-containment and independence**  
   - The snippet can be implemented exactly as-is without requiring any unstated external functions, libraries, language-specific behavior, environment assumptions, or external context.  
   - No gaps requiring the reader or implementer to supply missing pieces, guess data structures, infer environment or API behavior, or fill incomplete logic.

8. **Clarity and unambiguous pseudocode style that supports reproducibility**  
   - Style variations or idioms are acceptable only if they do not introduce ambiguity, incompleteness, or uncertainty in implementation.  
   - Avoid terse, implicit, or shorthand expressions that obscure logical clarity.  
   - The snippet must be interpretable deterministically by any competent implementer without second-guessing.

---

Your decision protocol:  
- Assign output `1` if ALL eight criteria above are met entirely with zero ambiguity or omission.  
- Otherwise, assign `0`. Always err on the side of conservatism — near-misses, partial coverages, or minor implicit assumptions must result in `0`.  
- Do not under any circumstance guess missing details or "fill holes" based on intuition or contextual inference.  
- Consider **every** conceivable unit test consistent with the problem domain; ensure no edge case could cause failure.  
- Ensure handling of all inputs allowed or implied by the pseudocode; do not exclude edge or exceptional inputs unless explicitly forbidden.

---

Output format reminder:  
- Output only the string of digits corresponding to input snippets, with no separators or additional text.  
- Do not output any whitespace, explanation, or other characters.

---

Pseudocode to evaluate:  
```<INSERT_PSEUDOCODE_HERE>```
```