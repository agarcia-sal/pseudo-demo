```
Task:  
You will receive one or more pseudocode snippets, each describing the full logic of a solution to an unspecified computational problem. For each snippet, output exactly one digit:  
- `1` if the pseudocode is *fully reproducible*, meaning that **any faithful implementation directly and strictly following this pseudocode (without adding, omitting, or guessing any detail) will pass every possible unit test verifying full correctness**, including normal, edge, boundary, error, invalid, and corner cases within the problem scope.  
- `0` otherwise.  

Output:  
- Concatenate all output digits in the input snippet order, with no spaces, newlines, or any other characters.  
- Output nothing else (no explanations or formatting).  

Definition of *fully reproducible*:  
A pseudocode snippet is *fully reproducible* if it unambiguously and exhaustively specifies an algorithm guaranteed to:  

1. **Handle all valid and relevant invalid inputs explicitly or logically**  
   - Define input domain, types, and constraints without unstated assumptions.  
   - Address or safely tolerate empty inputs, zero-length structures, null-equivalents, boundary values, malformed or out-of-spec inputs within problem scope.  
   - Reject or handle invalid inputs if expected by the problem; otherwise, explicitly exclude them.  
   - Do *not* rely on external input validation or assumptions beyond the pseudocode.  

2. **Define all variables, data structures, and state fully and clearly**  
   - Declare and initialize every variable before use, including indices, counters, accumulators, flags, temporary values, and complex structures.  
   - No use of undefined variables, implicit defaults, or externally defined symbols or types.  
   - Explicitly specify data structures’ sizes, initial values, and contents where relevant.

3. **Specify deterministic, complete, and sound control flow and logic**  
   - All loops and recursion have well-defined entry, progress, and termination conditions ensuring no infinite loops or premature exits that violate correctness.  
   - Conditionals and switch statements collectively cover all relevant input and intermediate states with no ambiguous or omitted branches.  
   - No logically contradictory, conflicting, or unreachable code affecting outcome correctness.  
   - Every control path is well explained and fully covered.

4. **Provide detailed, unambiguous, and correct algorithmic steps**  
   - Every computational step, update, mutation, comparison, and operation is explicit, logically consistent, and accurately captures the intended algorithm.  
   - No gaps, vague descriptions, or missing essential operations.  
   - Arithmetic or indexing operations are clearly defined and respect data boundaries.

5. **Explicitly handle all boundaries, edge cases, and exceptional or failure conditions**  
   - Boundary values (e.g., minimal and maximal inputs, empty data, zero divisors, possible overflow/underflow cases) are checked and correctly handled.  
   - Contains safeguards or checks avoiding undefined or erroneous states (e.g., out-of-range accesses, invalid memory/state).  
   - Error handling or alternative flows for invalid or exceptional inputs are specified if the problem domain requires them.

6. **Define outputs precisely and deterministically**  
   - Output values, formats, and types are explicitly given and unmistakably derived from prior computation steps.  
   - Intermediate and final outputs have no ambiguity about their construction or meaning.  
   - Output format complies fully with expected problem output conventions.

7. **Require no external context, unstated assumptions, or hidden dependencies**  
   - The snippet is fully self-contained and implementable as-is, relying only on primitives explicitly defined within or universally understood in pseudocode context.  
   - Does *not* depend on external libraries, environment, data, language features, or implicit behaviors.  
   - No need for reader or implementer to infer or fill any missing detail.

8. **Maintain clarity, consistency, and precision in style and notation**  
   - Pseudocode syntax and idioms must be clear; style variations are allowed only if they maintain unambiguous semantics and full logical completeness.  
   - Avoid overly terse, ambiguous, or inconsistent expressions that lead to conflicting interpretations.  
   - Ambiguity in control flow, state changes, or output caused by style issues invalidates reproducibility.

**Evaluation instructions:**  
- Carefully and conservatively analyze each snippet according to all 8 criteria.  
- If *any* uncertainty, missing detail, ambiguity, incompleteness, or logical gap exists that could cause any conceivable failing unit test, return `0`.  
- Output `1` *only if* the snippet meets *all* criteria rigorously and completely.  
- This includes full functional correctness across the entire expected input/output domain, not just typical or common cases.  

**Additional strict notes:**  
- Do *not* guess or supply any missing details or constraints, even if intuitively obvious.  
- Do *not* tolerate implicit assumptions about input validity, environment or language behavior, or implementation details.  
- Thoroughly consider the snippet’s behavior on edge cases, invalid cases (if applicable), corner cases, and complex logical scenarios.  
- Guard against subtle reproducibility pitfalls: uninitialized states, implicit default values, overlooked boundary conditions, ambiguous returns, infinite loops or recursion, and partial or incomplete logic coverage.  

---

Pseudocode:  
```<INSERT_PSEUDOCODE_HERE>```
```