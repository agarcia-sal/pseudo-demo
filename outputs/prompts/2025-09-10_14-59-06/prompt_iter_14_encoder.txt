Generate concise, compact, and easy-to-read pseudocode directly reflecting the original function name and logic, using mostly natural language with symbolic notations, abbreviations, and one-line statements wherever possible. Do not include explanations, comments, summaries, or any extra text—output only the pseudocode. Preserve the exact function name as in the original code. Format steps as follows without separators or extra formatting:

1. in function [function_name]  
2. let [var] ← [initial_value]  
3. for [var] in [range]: [statement]  
4. while [condition]: [statement]  
5. if [condition]: [statement] else [statement]  

Aim to maximize clarity and brevity while ensuring the pseudocode can be quickly understood and converted back to code within a 5-second limit. Use natural language commands, concise control structures, and symbolic assignments prioritizing one-liners. Example style:

in function main  
let n be int  
read n  
let A be int array of size n  
read elements into A  
for i in 0 to n-1:  
 set min_i ← i  
 for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print A