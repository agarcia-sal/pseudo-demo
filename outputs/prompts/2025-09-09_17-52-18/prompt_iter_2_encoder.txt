Generate concise, high-level pseudocode that directly mirrors the original code’s structure, keeping all class names, function names, and data structures exactly as in the problem description. The pseudocode should be clear, easy to read, and understandable, favoring natural language enriched with symbolic notation and abbreviations. Use compact, mostly one-line statements where possible, and maintain the overall logical flow without adding summaries, comments, explanations, or purpose statements. Format steps as numbered lines like:

1. <statement>
2. while <condition>: <single-line body>
3. for <var> in <range>: <single-line body>

Include explicit declarations or initializations only if they appear in the original code. Avoid separator lines or extraneous formatting. The output must be purely pseudocode without any markdown or code fences.

Example style to match:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for each element i in A:  
 set min_i ← i  
 for j in [i+1..size(A)-1]:  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A