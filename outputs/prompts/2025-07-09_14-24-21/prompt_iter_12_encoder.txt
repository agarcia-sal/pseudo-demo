Write concise, high-level pseudocode using clear, natural language with standard abbreviations and symbolic operators. Keep it compact and easy to read, expressing each logical step as a single line numbered sequentially:

1. x ← 0  
2. while x < n: x++

Use control structures (loops, conditionals) naturally and succinctly, avoiding verbose phrasing or extra formatting (no separators, comments, explanations, or summaries). Omit purpose statements or clarifications—output only the essential steps that fully capture the algorithm’s logic. Prioritize brevity and clarity, employing constructs like “let,” “set,” “read,” “print,” and common operators, while ensuring self-contained steps. Use indentation only when needed for clarity inside loop or conditional blocks. The style should resemble this example:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A  

Output the pseudocode only, adhering strictly to these guidelines and producing a runnable-style outline under a 5-second generation limit.