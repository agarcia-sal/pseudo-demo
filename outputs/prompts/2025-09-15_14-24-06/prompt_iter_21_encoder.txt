Generate clear, concise, and easy-to-read pseudocode that captures the problem’s logic in a compact, high-level manner, using natural language enriched with symbolic notation and common abbreviations.

- Preserve all original class names, function names, parameters, and their hierarchical relationships exactly as given; do not rename or alter any identifiers or object structures.
- Use mostly natural language keywords (FUNCTION, END FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.) combined with symbols for assignments (←), increments (+=), indexing ([]), comparisons (<, =, ≠), infinity (∞), sets, and other standard operations.
- Favor brief one-line statements wherever possible, e.g., “WHILE x < n: x += 1”.
- When necessary due to complexity, break into indented multi-line blocks; use consistent single-level indentation per nested block.
- Number every pseudocode line starting at 1 and maintain clear indentation reflecting control structure nesting.
- Do NOT add comments, summaries, explanations, or any text other than pseudocode lines.
- Avoid redundant or verbose phrasing; keep the pseudocode high-level but sufficiently complete and accurate.
- Do NOT invent variables, functions, or classes beyond those appearing in the problem description, unless absolutely required for clarity of abstraction.
- Use concise, natural language expressions combined with symbolic math and standard concise terms to keep the pseudocode compact yet unambiguous.
- Omit blank lines, separator lines, or extraneous formatting.
- Prioritize producing pseudocode that is straightforward to understand, minimizing ambiguity and complexity while respecting the original code structure and names.
- The pseudocode should run efficiently if implemented, within the 5-second runtime constraint.

Example style:

CLASS Solution:  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION