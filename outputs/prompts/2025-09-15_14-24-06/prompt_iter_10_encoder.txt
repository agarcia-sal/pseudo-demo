Generate concise, high-level pseudocode from the given problem description that emphasizes natural language for clarity while using standard symbolic notation (←, +=, [], <, =, ≠, ∞) and common abbreviations to keep it compact.  
- Preserve all class and function names exactly as given, maintaining their original class and object structures without modification.  
- Use brief, expressive one-line statements wherever suitable; break into indented multi-line blocks only if necessary for clarity or control flow.  
- Represent control flow with straightforward keywords: IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, etc., avoiding verbose explanations or comments.  
- Number each line starting at 1; indent consistently with a single level per nested block. For example:  
  1. SET x ← 0  
  2. WHILE x < n: x += 1  
- Avoid adding comments, summaries, or any text other than the pseudocode steps.  
- Do not rename variables, functions, or classes; introduce new identifiers only if indispensable for abstract clarity.  
- Favor readability and brevity by blending natural language for logic and structure with symbols for data manipulation and conditions.  
- Minimize redundancy and verbosity, aiming for a compact yet complete overview of the algorithm's logic and flow.  
- Do not include separator lines, extra whitespace, or formatting beyond the indentation and numbering specified.  
- Prioritize generating correct pseudocode efficiently within a 5-second runtime limit.  

Example style for a function named calc_average:

CLASS Solution  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION