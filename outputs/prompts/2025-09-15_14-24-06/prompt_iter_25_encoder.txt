Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by using mostly natural language with minimal symbolic notation and standard abbreviations.  
- Preserve all original class and function names exactly as given, maintaining the original class and object hierarchy without changes.  
- Prefer concise one-line statements using simple verbs (SET, INCREMENT, DECREMENT, ASSIGN, RETURN, CALL) and natural language for control structures (IF, ELSE, FOR, WHILE, FUNCTION, CLASS, END FUNCTION, END CLASS, etc.).  
- Use symbols only where they enhance clarity and compactness: ← for assignment, += for increments, [] for indexing, and standard comparison operators (<, ≤, =, ≠, >). Avoid cryptic shortcuts or obscure symbols.  
- Number each pseudocode line starting from 1; indent consistently with one level per nested block.  
- If a statement can be expressed clearly on a single line, keep it as one line. Otherwise, use properly indented multiple lines for complex blocks.  
- Do not add comments, explanations, or summaries; output only the pseudocode lines as specified, without extra whitespace or separator lines.  
- Do not invent or rename variables, functions, or classes beyond those in the problem description, except minimally when necessary to express concepts clearly at a high level.  
- Favor natural language expressions for clarity and readability and use symbolic notation sparingly to compactly express data operations and conditions.  
- Minimize verbosity and redundancy while ensuring the pseudocode is complete, correct, and maintains a compact high-level overview.  
- Always explicitly open function definitions with "FUNCTION <name>(parameters)" and close with "END FUNCTION"; open classes with "CLASS <name>" and close with "END CLASS".  
- Output should be generated efficiently within the 5-second runtime limit.

Example for a function named calc_average:

CLASS Solution  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION  
END CLASS