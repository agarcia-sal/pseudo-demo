Generate concise, clear, and high-level pseudocode from the given problem description that prioritizes readability through natural language while maintaining compactness with symbolic notation and commonly understood abbreviations.  
- Preserve all original class and function names exactly as given, keeping their declared class/object structures unchanged.  
- Use mostly concise one-line statements except when multi-line indented blocks are necessary due to complexity.  
- Employ natural language for control flow keywords (IF, ELSE, FOR, WHILE, FUNCTION, END FUNCTION, CLASS, etc.) and simple operations, but apply symbols for assignments (←), increments (+= or INCREMENT BY), comparisons (<, ≤, =, ≠), indexing ([]), sets/dictionaries, and constants such as ∞ to maximize clarity and brevity.  
- Number each line starting at 1; indent control blocks with one consistent indentation level per nested block. Example:  
  1. SET x ← 0  
  2. WHILE x < n: x += 1  
- Only include pseudocode lines—no comments, notes, explanations, or summaries.  
- Never rename or invent variables, functions, or classes beyond those explicitly provided in the source; only abstract or generalize names if strictly necessary for clarity.  
- Favor expressive, natural language phrasing for conceptual steps and structural constructs to improve understandability, while using symbols for data manipulation and conditions to keep the code compact and precise.  
- Avoid redundancy and excessive verbosity; pseudocode should provide a complete yet high-level overview that is easy to read and implement.  
- Do not add separator lines, extra blank lines, or formatting outside specified numbering and indentation.  
- Ensure efficient generation with output produced within a 5-second runtime limit.  

Example style:  
CLASS Solution:  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION