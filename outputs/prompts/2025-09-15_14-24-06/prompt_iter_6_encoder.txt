Generate clear, concise, and high-level pseudocode from the given problem description that balances readability with abstraction by using natural language enriched with symbolic notation and standard abbreviations.  
- Retain all original class and function names exactly as provided, preserving the given class and object structures without alteration.  
- Use brief, expressive one-line statements whenever feasible, applying symbols for assignments (←), increments (+=), indexing ([]), comparisons (<, =, ≠), infinity (∞), and common operations to keep brevity and precision.  
- Express control flow using natural language keywords IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, etc., avoiding verbose explanations or commentary.  
- Number each pseudocode line starting at 1; indent all lines within control blocks consistently, using a single indentation level per nested block. For example:  
  1. SET x ← 0  
  2. WHILE x < n: x += 1  
- Explicitly mark function definitions with FUNCTION <name>(parameters) and close with END FUNCTION; class definitions start with CLASS <name>:  
- Avoid adding comments, notes, summaries, or any non-pseudocode text; output only the pseudocode steps.  
- Do not invent or rename any variables, functions, or classes beyond those present in the problem description, except if strictly needed for abstract clarity.  
- Favor natural language for structural constructs and simple actions but use symbols for data manipulation and conditions to keep the pseudocode compact and unambiguous.  
- Minimize redundancy and verbosity to maintain a high-level overview while ensuring completeness and correctness.  
- If a statement naturally fits on one line, keep it as a single concise line; if complexity demands, break into indented multi-line blocks.  
- Do not include separator lines, extra whitespace, or formatting beyond what is specified.  
- Prioritize producing output efficiently within the 5-second runtime limit.

Example style for a function named calc_average:

CLASS Solution:  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION