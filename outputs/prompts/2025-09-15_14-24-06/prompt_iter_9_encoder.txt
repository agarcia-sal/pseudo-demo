Generate concise, high-level pseudocode from the given problem description that prioritizes clarity and readability through natural language enriched with succinct symbolic notation and standard abbreviations.  
- Preserve all original class and function names, signatures, and object structures exactly as in the problem description without renaming or restructuring.  
- Use brief, expressive one-line statements wherever possible, applying symbols such as ← for assignment, += for increments, [] for indexing, and standard comparison operators (<, =, ≠).  
- Structure control flow using uppercase keywords IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, etc., without verbose commentary or explanations.  
- Number each pseudocode line starting from 1, indent lines inside control blocks with one consistent indentation per nested level. For example:  
  1. SET x ← 0  
  2. WHILE x < n: x += 1  
- Define functions explicitly as FUNCTION <name>(parameters) ... END FUNCTION; classes as CLASS <name>:  
- Avoid adding any comments, summaries, or text outside of pseudocode steps; output only the pure pseudocode.  
- Do not invent new variable or function names beyond those given, except only to enhance clarity with minimal abstraction when necessary.  
- Favor natural language for describing structural statements and simple actions; incorporate symbolic notation for data operations and conditions to keep the pseudocode precise yet compact.  
- Minimize redundancy and verbosity to maintain a high-level overview that remains complete and correct.  
- If logic fits naturally on one line, keep it as a single line; if complexity demands, use clear indented multi-line blocks.  
- Do not add separator lines or extraneous whitespace beyond consistent indentations.  
- Deliver output efficiently within a 5-second runtime limit.

Example style (if given function is calc_average):

FUNCTION calc_average(list_of_numbers)  
  SET total_sum ← 0  
  FOR each number IN list_of_numbers  
    INCREMENT total_sum BY number  
  SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
  RETURN average_value  
END FUNCTION