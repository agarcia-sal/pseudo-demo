Generate concise, high-level pseudocode from the given problem description that is easy to read and understand by mixing natural language with symbolic notation.  
- Retain all original class and function names exactly as stated in the problem, preserving the given class/object structure.  
- Use compact expressions with one-liners and standard abbreviations, minimizing verbosity but ensuring clear logic flow.  
- Do not include any explanations, comments, descriptions, notes, summaries, or separator lines—output only the pseudocode steps.  
- Format numbering as shown below, with each instruction on its own line:  

1. x ← 0  
2. while x < n: x++  

- Use natural language for control flow and simple operations but prefer symbolic notation for assignments, arithmetic, comparisons, and data structures (e.g., ←, +=, [], {}, ∞).  
- Use consistent indentation to reflect code blocks if needed, but keep the style compact and straightforward.  
- Finish each function explicitly with a clear RETURN statement if applicable, and indicate function/method boundaries with FUNCTION <name>(parameters) / END FUNCTION or equivalent.  
- Your output must produce the best possible pseudocode within 5 seconds.  
- Example pseudocode style for a function named calc_average:  

FUNCTION calc_average(list_of_numbers)  
  SET total_sum TO 0  
  FOR each number IN list_of_numbers  
    INCREMENT total_sum BY number  
  SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
  RETURN average_value  
END FUNCTION