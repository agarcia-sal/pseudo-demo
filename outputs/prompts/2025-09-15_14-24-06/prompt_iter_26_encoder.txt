Generate concise, readable, and high-level pseudocode from the given problem description that clearly reflects the original algorithm’s logic by blending natural language with precise symbolic notation.  
- Use the exact class names, function names, parameters, and object structures as given; do not rename or restructure them.  
- Prefer short, expressive one-line statements whenever possible using symbols such as ← (assignment), += (increment), [], <, =, ≠ (comparisons), ∞ (infinity), and abbreviations for common operations to maintain compactness and clarity.  
- Represent control flow with uppercase natural language keywords only: IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, END CLASS, etc., avoiding any commentary, explanations, or extra text.  
- Number every line starting at 1; indent lines inside control blocks by exactly one level per nesting (using consistent indentation, e.g. two or four spaces). If a statement fits naturally on one line, keep it one line; only expand complex logic into multi-line indented blocks.  
- Define functions explicitly as: FUNCTION <name>(parameters) ... END FUNCTION; and classes as CLASS <name> ... END CLASS.  
- Use natural language primarily for describing structural and logical constructs (loops, conditions, function and class definitions) and simple actions, and use symbols for arithmetic, assignments, indexing, and comparisons to increase compactness without losing precision.  
- Avoid all commentary, comments, notes, summaries, example code, or any text outside the pseudocode lines.  
- Minimize redundancy and verbosity, capturing only the essential steps needed to understand and implement the algorithm at a high but precise level.  
- Do not invent or omit variables, functions, or class names beyond what is strictly necessary for abstraction—always preserve original identifiers from the problem statement.  
- Do not add separator lines, extra blank lines, or formatting beyond line numbers and indentation.  
- Ensure output is optimized for efficient generation within a 5-second limit.

Example style for a function named calc_average:

1. FUNCTION calc_average(list_of_numbers)  
2.   SET total_sum ← 0  
3.   FOR each number IN list_of_numbers  
4.     INCREMENT total_sum BY number  
5.   SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
6.   RETURN average_value  
7. END FUNCTION