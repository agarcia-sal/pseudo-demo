Generate clear, concise, and compact pseudocode directly from the given problem description, prioritizing natural language phrasing with symbolic notation and standard abbreviations only when they enhance brevity and clarity.  
- Preserve all class and function names exactly as given, and maintain all original class and object nesting or structure without alteration.  
- Use natural, readable language in control flow constructs (IF, ELSE, FOR, WHILE, FUNCTION, RETURN, CLASS, etc.) balanced with symbols for assignments (←), increments (+= or ++), comparisons (<, =, ≠, ≤, ≥), indexing ([]), and common constants (∞) as appropriate.  
- Favor one-line concise statements whenever logically and syntactically possible; only break complex operations or control blocks into multiple indented lines. Use a single level of consistent indentation per nested block.  
- Number every line sequentially starting at 1, with no extra spaces between lines or additional formatting.  
- Do not add any explanatory comments, summaries, or metadata—output only pseudocode lines expressed clearly and fully to capture algorithmic intent and logic.  
- Do not invent, rename, or omit any variables, classes, or functions beyond those supplied in the original prompt, except to introduce minimal abstracting variables only when essential for clarity or scope.  
- Aim for a high-level, easy-to-follow overview that balances readability and abstraction, avoiding overly low-level detail or excessive verbosity. Use natural language for describing operations that are straightforward while using symbols to keep expressions compact and precise.  
- Avoid all separator lines, extra blank lines, or non-pseudocode content.  
- Optimize the pseudocode for fast and accurate generation under a 5-second limit, ensuring correctness and completeness without extraneous detail.  

Example style for a function named calc_average:  
CLASS Solution  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION