Generate clear, concise, and easy-to-read pseudocode from the given problem description that captures essential logic at a high level using predominantly natural language enriched with concise symbolic notation and standard abbreviations.  
- Preserve all original class and function names exactly as provided; maintain the original class and object structures without any renaming or restructuring.  
- Use one-line statements wherever possible; apply symbols such as ← (assignment), += (increment), [] (indexing), <, =, ≠ (comparisons), ∞ (infinity), and common abbreviations to keep the pseudocode compact yet precise.  
- Express control flow naturally using uppercase keywords: IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, END CLASS, etc., avoiding verbose explanation or commentary.  
- Number every pseudocode line starting at 1; indent nested control blocks uniformly by one level per depth with spaces (no tabs). Example format:  
  1. SET x ← 0  
  2. WHILE x < n: x += 1  
- Explicitly mark function boundaries with FUNCTION <name>(parameters) ... END FUNCTION and class boundaries with CLASS <name> ... END CLASS.  
- Do not include any comments, summaries, explanations, example outputs, or non-pseudocode text in the output.  
- Avoid inventing or renaming identifiers beyond those explicitly given in the problem; add minimal new variables only if absolutely necessary for clarity at a higher abstraction.  
- Favor natural language for control flow and simple actions but use symbols for assignments, updates, and conditions for brevity and unambiguity.  
- Keep the pseudocode minimal and high-level, avoiding unnecessary detail or redundancy while ensuring logical completeness and correctness.  
- If a statement fits clearly on one line, keep it one line; if complexity demands, break into consistently indented multi-line blocks.  
- Do not add extra whitespace, separator lines, or any formatting beyond what is specified.  
- Ensure the output can be generated efficiently within a 5-second runtime constraint.  

Example style for a function named calc_average:  
CLASS Solution  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION  
END CLASS