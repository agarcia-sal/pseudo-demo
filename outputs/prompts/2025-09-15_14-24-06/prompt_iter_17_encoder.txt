Generate concise, clear, and high-level pseudocode from the given problem description that emphasizes readability through natural language while maintaining compactness by using standard symbolic notation and abbreviations.  

- Preserve all original class and function names exactly as given, keeping the provided class and object structures intact without modification.  
- Prefer brief, expressive one-line statements whenever possible, using symbols for assignments (←), increments (+=), indexing ([]), comparisons (<, =, ≠), infinity (∞), logical operators (AND, OR, NOT), and common operations to ensure precision and brevity.  
- Use natural language keywords for control flow and structure: IF, ELSE, FOR, WHILE, RETURN, FUNCTION, END FUNCTION, CLASS, etc., avoiding verbose explanations or commentary.  
- Number each line of pseudocode starting at 1; indent with one tab or consistent spacing per nested block level.  
- Function headers use: FUNCTION <name>(parameters); close with END FUNCTION. Class definitions start with: CLASS <name>:  
- Avoid comments, explanations, notes, summaries, or any text beyond pseudocode lines.  
- Do not invent, rename, or omit any variables, functions, or classes from the problem description unless absolutely necessary for clarity or abstraction.  
- Favor natural language to describe structure and simple actions but use symbolic notation for data manipulation and conditions to maintain clarity and conciseness.  
- Minimize redundancy and verbosity: keep the pseudocode succinct, high-level, and complete to communicate logic fully without unnecessary detail.  
- Use one-line statements if the entire operation fits naturally; otherwise, break complex logic into properly indented multi-line blocks.  
- Exclude separator lines, extra blank lines, or additional formatting beyond specified numbering and indentation.  
- Optimize for efficient output and correctness within a 5-second runtime limit.

Example style for a function named calc_average:

CLASS Solution:  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION