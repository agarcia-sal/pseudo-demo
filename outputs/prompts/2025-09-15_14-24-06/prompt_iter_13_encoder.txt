Generate concise, clear, and high-level pseudocode from the given problem description with a focus on readability and natural language, incorporating symbolic notation and standard abbreviations for brevity without losing clarity.  
- Preserve all original class and function names exactly as given, maintaining the class and object hierarchy and method signatures without any renaming, restructuring, or omission.  
- Use mostly natural language for structural and control-flow constructs (IF, ELSE, FOR, WHILE, FUNCTION, RETURN, CLASS, END FUNCTION, etc.) combined with symbolic operators for assignments (←), increments (+=), indexing ([]), comparisons (=, ≠, <, >), infinity (∞), and common arithmetic or logical operations to balance precision and compactness.  
- Favor one-line statements whenever the logic is simple and can be clearly expressed; use consistent single-level indentation per nested block when multi-line structure is necessary.  
- Number each pseudocode line starting from 1 with no extra blank lines or separator lines; keep spacing minimal but clear.  
- Avoid adding comments, explanations, descriptive notes, or any text outside of pure pseudocode statements.  
- Retain all original variable, parameter, class, and function names as-is; only add minimal abstract identifiers if strictly required to clarify logic (e.g., counters, indices) but never invent domain-specific names or alter semantics.  
- Express concise loops over collections using natural phrasing (e.g., “FOR each element IN collection”) and break down complex expressions only if needed for clarity, otherwise keep expressions compact and symbolic.  
- Maintain a high-level abstraction: do not describe trivial internal operations or overly low-level details unless they are essential to the algorithm’s core functionality.  
- Prioritize correct logic and completeness but keep the pseudocode as short and readable as possible to fit well within the 5-second runtime constraint.  
- Output only the pseudocode block strictly as formatted instructions; no headers, footers, or extraneous formatting beyond line numbering and indentation.

Example style:

CLASS Solution:  
  FUNCTION calc_average(list_of_numbers)  
    SET total_sum ← 0  
    FOR each number IN list_of_numbers  
      INCREMENT total_sum BY number  
    SET average_value ← total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
  END FUNCTION