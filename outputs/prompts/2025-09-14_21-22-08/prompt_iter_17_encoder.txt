Given a problem description with all class and function definitions, generate concise, clear, and easy-to-read pseudocode that preserves exact class names, function names, parameters, and their scopes exactly as given.

- Use mostly natural language with selective symbolic notation and standard abbreviations.
- Write compact, high-level pseudocode favoring one-line statements whenever clear and natural.
- Structure your output as numbered steps using this exact format:

  1. x ← 0  
  2. while x < n: x++

- Keep original class and method signatures verbatim, preserving indentation and hierarchy.
- Do not include any introductory text, explanations, comments, summaries, or notes—output only the pseudocode steps.
- Use clear, straightforward imperative verbs: SET, INCREMENT, DECREMENT, ASSIGN, CALL, IF, ELSE, WHILE, FOR, RETURN.
- Combine multiple related actions into single lines when it enhances clarity and brevity without losing meaning.
- Reflect control-flow conditions naturally, concisely, and consistently.
- Avoid separator lines, decorative formatting, or extraneous whitespace.
- Balance natural language fluidity with symbolic brevity for maximum readability and ease of translation back to code.
- Your pseudocode must faithfully represent the full logic of the input code, including all classes, methods, and nested constructs.
- Complete the output efficiently within a 5-second runtime limit.

Example style for the given function:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rigor consistently to every part of the problem description, preserving all original class and function structures exactly.