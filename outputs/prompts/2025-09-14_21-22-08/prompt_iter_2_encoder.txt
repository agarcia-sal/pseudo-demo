Given a problem description with class and function definitions, generate clear, concise, and compact pseudocode that preserves all class and function names exactly as given. The pseudocode should be easy to read and understand, using mostly natural language blended with standard symbolic notations and common abbreviations. Use mostly one-liner statements where possible, maintaining high-level abstraction but including essential logic steps. Number each line sequentially with a single space after the number and a period. Do not include any explanations, summaries, comments, or extraneous notes—output only the pseudocode. Preserve original indentation and class/object structures from the problem description. Do not use separator lines or verbose formatting. Follow this output style exactly:

1. SET x ← 0  
2. WHILE x < n: x++  

Example:  
If the problem function is:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output pseudocode as:
```
1. FUNCTION calc_average(nums)
2. SET total ← 0
3. FOR each num IN nums
4. INCREMENT total BY num
5. SET avg ← total DIVIDED BY LENGTH OF nums
6. RETURN avg
END FUNCTION
```

Optimize for readability and test-time performance under a 5-second timeout.