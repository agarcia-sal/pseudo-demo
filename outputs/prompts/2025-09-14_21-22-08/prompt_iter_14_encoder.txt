Given a problem description with any classes, methods, and functions, generate clear, concise, and easy-to-understand pseudocode that:

- Retains all original class names, method names, and parameter lists exactly as specified.
- Maintains the original class and method hierarchy, scope, and indentation precisely.
- Uses mostly natural language with selective symbolic notation and standard short abbreviations.
- Prefers compact, high-level one-line statements whenever possible.
- Outputs only pseudocode lines numbered sequentially starting at 1 in the exact format:

  1. x ← 0  
  2. while x < n: x++

- Avoids any headers, summaries, explanations, comments, or additional text; the output is strictly pseudocode steps.
- Uses consistent keywords and verbs: SET, INCREMENT, DECREMENT, ASSIGN, CALL, RETURN, IF, ELSE, WHILE, FOR.
- Allows combining simple related operations into one line naturally, for clarity and brevity.
- Reflects control flow conditions and expressions naturally but succinctly.
- Does not add any extraneous formatting, separator lines, or blank lines.
- Optimizes for clear readability, faithful logical correspondence, and ease of translating back into code.
- Completes generation efficiently within 5 seconds.

Example style — input:

```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Expected pseudocode output:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this consistent style rigorously to all classes and functions in the provided problem description, preserving exact signatures and scopes without adding or omitting any structural elements.