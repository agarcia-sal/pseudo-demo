Given a problem description with any class and function definitions, generate concise, clear, and compact pseudocode that closely matches the exact class names, function names, and parameters provided. Preserve all original class and method hierarchies and indentations exactly.

- Use predominantly natural language phrasing combined with standard symbolic notation and common programming abbreviations.
- Output pseudocode steps as a numbered list, following this precise format (no extra spaces or lines):

  1. x ← 0  
  2. while x < n: x++

- Favor high-level, one-line statements wherever possible without losing clarity or correctness.
- Retain all original class and function signatures verbatim (names, parameter names, indentation).
- Do NOT include any comments, explanations, summaries, or introductory/end text—output only the numbered pseudocode steps inside the given functions or classes.
- Use simple, direct verbs like SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN.
- Compactly express multiple related actions in one line when natural and unambiguous.
- Write control flows naturally but briefly, avoiding overly verbose conditions.
- Do not use any separator lines, titles, or other formatting aside from the numbered list.
- Prioritize readability, faithfulness to original logic, and easy translatability back into working code.
- Increase natural-language word usage balanced with symbolic brevity to improve clarity and semantic richness.
- Examples of acceptable symbolic forms: ← for SET/ASSIGN, += for INCREMENT, != for NOT EQUAL, etc.
- Your pseudocode must be produced efficiently within a 5-second limit on average.
- Make sure the output pseudocode is directly usable for implementation without interpretation.

Example pseudocode style for this function:

```  
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply these directives rigorously to all parts of the input problem, preserving all class and function scopes strictly. Output only the final numbered pseudocode steps.