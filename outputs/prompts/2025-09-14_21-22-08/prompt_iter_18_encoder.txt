Given a problem description with all class and function definitions, produce concise, clear, and easy-to-read pseudocode that preserves the exact class names, function names, parameters, and nesting structure as provided.  

- Output pseudocode using mostly natural language enhanced by common symbolic operators and standard abbreviations for brevity.  
- Keep pseudocode compact and abstract, favoring single-line statements whenever clarity permits.  
- Format pseudocode as numbered steps starting from 1 within each function or method, using this style strictly:  
   
  1. x ← 0  
  2. while x < n: x++  

- Maintain original indentation, class/method scopes, and signatures verbatim, including all parameter names and order.  
- Use straightforward, imperative verbs (SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN) consistently throughout.  
- Combine multiple simple actions on one line if doing so improves readability without sacrificing clarity.  
- Reflect control flow and conditions naturally and succinctly without verbose elaboration.  
- Do NOT provide headers, comments, explanations, summaries, or notes—only numbered pseudocode lines.  
- Avoid separator lines, decorative formatting, or extraneous whitespace.  
- Ensure output pseudocode is immediately translatable back to working code preserving logic and structure.  
- Prefer natural phrasing with symbolic brevity balanced for optimal readability and faithfulness.  
- Runtime: output pseudocode efficiently within a 5-second generation limit.

Example given the Python function:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Expected pseudocode output:  
```
FUNCTION calc_average(list_of_numbers)  
  1. SET total_sum to 0  
  2. FOR each number IN list_of_numbers  
  3.   INCREMENT total_sum BY number  
  4. SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
  5. RETURN average_value  
END FUNCTION
```

Apply this precise, consistent format and style to all provided code elements, including all classes and functions, without deviation.