Given a problem description, generate clear, concise, and readable pseudocode that precisely captures the algorithmic logic while preserving all original class and function names and their structural relationships. The pseudocode should be high-level yet sufficiently detailed to be unambiguous, mixing natural language with symbolic notation, abbreviations, and expressions. Favor compact one-liner steps where practical.

Strictly produce only the pseudocode—no summaries, explanations, comments, or any additional text. Avoid extra formatting such as separator lines.

Use consistent indentation and numbering for steps, following this style:

1. x ← 0  
2. while x < n: x++

When representing functions or methods, preserve exact names and signatures from the problem. Maintain class wrappers and object-oriented structure as given.

Ensure pseudocode stays natural and easy to follow, balancing explicitness and brevity. Use meaningful variable names, but abbreviate standard operations and control flow constructs to keep lines concise.

Example style to emulate:  
If the code is:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

The pseudocode should be:

```
FUNCTION calc_average(nums)  
 SET total TO 0  
 FOR num IN nums  
  INCREMENT total BY num  
 SET avg TO total DIVIDED BY LENGTH(nums)  
 RETURN avg  
END FUNCTION
```

Optimize your output for a 5-second response time, producing pseudocode that maximizes test-time correctness and readability without unnecessary verbosity.