Given a problem description that includes all class and function definitions, generate concise, high-level pseudocode that is easy to read and faithfully represents the logic, structure, and naming exactly as provided:

- Keep original class names, function names, parameters, indentation, and nesting intact.
- Output only pseudocode, no comments, explanations, summaries, or extra text.
- Write primarily natural language phrasing but allow brief symbolic expressions and common abbreviations.
- Favor compactness: use one-liner statements where logically clear and natural.
- Express control flow succinctly and naturally.
- Use a numbered step format for all executable lines inside each function or method:

  1. x ← 0  
  2. while x < n: x++

- Retain verb consistency; prefer these uppercase verbs when applicable: SET, INCREMENT, DECREMENT, RETURN, CALL, IF, ELSE, WHILE, FOR, ASSIGN.
- Merge related operations into a single step if it improves clarity without losing explicitness.
- Represent data structures and indexing clearly but without verbose language.
- Use standard mathematical and logical symbols sparingly for brevity (e.g. =, !=, <, ≤).
- Do not add separator lines, horizontal rules, or extraneous formatting.
- Ensure the pseudocode can be translated back into functioning code straightforwardly.
- Adhere strictly to a maximum 5-second runtime for producing the output.

Example expected style:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this style rigorously to all parts of the input, including nested classes and all functions.