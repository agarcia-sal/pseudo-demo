Translate the given pseudocode into clean, well-structured, and performant Python code. Strictly adhere to these requirements:

- Preserve all class names, method names, and signatures exactly as they appear in the pseudocode.
- Maintain identical class/object structures as described in the pseudocode.
- Implement all helper functions or nested functions as shown or implied.
- Enclose only the full translated code in one Python code block using:
  ```python
  # your translated code here
  ```
- Do not include any text, explanation, comments, or output outside the code block.
- Prioritize code correctness and readability, followed by execution efficiency.
- You may use any Python standard libraries or third-party packages if they improve clarity or performance.
- Assume your code may be run with a strict 5-second timeout—avoid unnecessary complexity or inefficient constructs.
- Avoid redefining functions, classes, or variables beyond what is defined or implied in the pseudocode.
- Ensure your code is syntactically correct and ready to run as-is.

Focus on producing a faithful, idiomatic Python implementation that exactly matches the pseudocode’s logic and interfaces.