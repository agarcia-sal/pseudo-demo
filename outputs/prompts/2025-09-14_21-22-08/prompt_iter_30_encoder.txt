Given a problem description including all classes and functions, generate concise, clear, and high-level pseudocode that mirrors the exact class names, function names, parameters, and nesting of the original code.

- Retain all class and method signatures, indentation, and scopes exactly as in the input.
- Express logic compactly using mostly natural language enriched with minimal symbolic notation and standard programming abbreviations.
- Favor one-line statements wherever clarity is maintained or enhanced.
- Format output as numbered sequential steps in the style below (no extra spacing or separators):

  1. x ← 0  
  2. while x < n: x++

- Use straightforward action verbs only (SET, INCREMENT, DECREMENT, ASSIGN, CALL, RETURN, IF, ELSE, WHILE, FOR).
- Combine multiple simple operations in one step when natural, clear, and unambiguous.
- Reflect conditions and control flow succinctly but naturally.
- Do not include any comments, explanations, summaries, notes, debugging details, or intro/outro text — output only the pseudocode steps.
- Avoid blank lines, separators, or extraneous formatting.
- Prioritize readability and faithfulness to the original logic so pseudocode can be readily translated back into working code.
- Balance natural language fluidity with symbolic brevity to maximize average word length and passing accuracy.
- The entire output must be produced within 5 seconds runtime limit.

Example style to follow exactly:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rigorously to *every* class and function in the problem description, preserving structures, names, and parameters verbatim, and presenting numbered pseudocode steps for all executable statements inside these constructs.