Given a problem description including any class and function definitions, generate concise, clear, and easy-to-read pseudocode that reflects the exact class names, function names, and parameters as given. Maintain all original class and method scopes and structures.

- Use mostly natural language with selective symbolic notation and standard abbreviations.
- Keep pseudocode compact and high-level, favoring one-line statements whenever possible.
- Structure your output as numbered steps, following this format exactly:

  1. x ← 0  
  2. while x < n: x++

- Retain original class and method signatures verbatim (names, parameters, indentation).
- Avoid any introductory text, comments, explanations, summaries, or notes—output only pseudocode steps.
- Use straightforward verbs (SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN).
- Prefer concise, explicit expressions combining multiple actions in one line if clear and natural.
- Reflect control flow conditions naturally but briefly.
- No separator lines or extraneous formatting.
- Optimize for clarity, readability, and faithfulness to the original logic.
- Aim to balance natural language fluidity with symbolic brevity.
- Your pseudocode should be understandable and translatable back into working code easily.
- Runtime constraint: your solution must be produced efficiently within a 5-second limit.

Example style for a simple function:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rigorous style and structure to all parts of the provided problem description, including all classes and functions.