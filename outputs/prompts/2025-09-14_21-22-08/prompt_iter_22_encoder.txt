Given a problem description with any classes and functions defined, generate clear, concise, and easy-to-read pseudocode that strictly preserves all original class names, function names, parameters, and the exact structure (indentation and scopes) as provided.

- Use predominantly natural language, combining symbolic notation and standard abbreviations to keep it compact and high-level.
- Express the logic succinctly, preferring one-line statements whenever they remain clear and readable.
- Present the pseudocode in numbered steps, precisely following this format (including spacing):

  1. x ← 0  
  2. while x < n: x++

- Maintain original class and method signatures exactly; do not rename or omit parameters.
- Do not include any introductory text, explanations, comments, summaries, or notes—output only the pseudocode steps.
- Employ consistent, straightforward verbs such as SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN.
- Combine related actions in one statement if it improves clarity without losing meaning.
- Capture control flows naturally and briefly, avoiding verbosity while ensuring logic is explicit.
- Avoid any separator lines, extra formatting, or blank lines other than stated numbering format.
- Your pseudocode must be easy to read, understand, and directly convertible back into working code.
- Balance natural language expressiveness with symbolic brevity to maximize clarity and comprehensibility.
- Complete the generation efficiently within 5 seconds.

Example style for a simple function:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rigorously to all classes and functions from the provided input, preserving their original definitions and nesting. Output only the numbered pseudocode steps reflecting the original logic accurately.