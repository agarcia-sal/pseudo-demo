Given a problem description with any classes and functions, generate clear, concise, and high-level pseudocode that preserves all original class names, function names, parameters, and their scopes exactly as provided, maintaining the structure and indentation.

- Output only the pseudocode: no introductions, comments, explanations, notes, summaries, or separators.
- Use mostly natural language phrasing enriched with standard symbolic notation and widely recognized abbreviations for brevity.
- Favor compactness via one-line statements wherever clarity isn’t compromised.
- Format steps as numbered lines following this exact style:

  ```
  1. x ← 0
  2. while x < n: x++
  ```

- Keep all original class and method signatures, names, and parameter lists verbatim.
- Use straightforward, consistent action verbs such as SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN.
- Structure control flow naturally yet briefly, combining simple conditional and iterative statements on a single line when obvious.
- Represent expressions in a clean, readable way that easily translates back into working code.
- Preserve all nested definitions exactly as they appear.
- Avoid unnecessary verbosity: prefer explicitness with natural fluidity.
- Optimize for high readability and faithful reflection of the original algorithm logic.
- Do not add any extra formatting or non-pseudocode artifacts.
- Ensure output can be efficiently generated within a 5-second time frame.

Example style:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rigor uniformly to every class and function in the input.