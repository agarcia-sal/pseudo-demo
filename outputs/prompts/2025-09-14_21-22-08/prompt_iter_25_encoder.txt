Given a full problem description including all classes and functions, generate concise, natural, and easy-to-understand pseudocode that precisely preserves the original class names, method names, parameters, and nesting. Produce compact, high-level pseudocode favoring one-line statements and standard abbreviations, mixing natural language with symbolic notation as needed.

- Retain exact class and function signatures and indentation, reflecting the original scope and structure without alteration.
- Present pseudocode as numbered, sequential steps starting at 1, formatted exactly as:
  
  1. x ← 0  
  2. while x < n: x++
  
- Use straightforward action verbs only: SET, INCREMENT, DECREMENT, RETURN, CALL, IF, ELSE, WHILE, FOR, ASSIGN, DEFINE.
- Combine multiple simple operations in one line when it remains clear and expressive.
- Express control flow conditions naturally but concisely (e.g., IF x > 0 THEN ...).
- No separator lines, comments, summaries, notes, or explanations—output only the pseudocode.
- Use consistent, explicit wording that balances natural language clarity with symbolic brevity for easy translation back to code.
- Always maintain faithful logic representation matching the provided code’s intent.
- Optimize for speed and clarity within a 5-second generation limit.

Example style:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this rule strictly to all classes, methods, and helper functions given, ensuring all signatures and structures remain unchanged and pseudocode is clear, concise, and fully covers the logic.