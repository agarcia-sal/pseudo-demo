Given a problem description with any class and function definitions, generate clear, concise, and natural-language-forward pseudocode that precisely preserves all original class names, function names, parameters, and nesting structures exactly as given.

- Maintain exact class and method signatures, including indentation and scopes.
- Use mostly natural language with selective symbolic notation and standard abbreviations.
- Keep pseudocode compact, high-level, and easy to read—prefer concise one-liners where clarity is not sacrificed.
- Write the pseudocode as numbered steps, following this exact format:

  1. x ← 0  
  2. while x < n: x++

- Use straightforward action verbs (SET, INCREMENT, DECREMENT, CALL, RETURN, IF, ELSE, WHILE, FOR, ASSIGN).
- Express conditions and control flow naturally but succinctly.
- Combine multiple related actions in one line if it enhances clarity without ambiguity.
- Do not add any introductory text, explanations, comments, summaries, notes, or separators—output only the numbered pseudocode steps inside the exact class and function structures.
- Ensure the pseudocode is easily understandable and directly translatable back into executable code with high fidelity.
- Optimize for readability and faithful logic representation while balancing symbolic brevity and natural language fluidity.
- Handle all classes, functions, and nested scopes as fully and precisely as in the input.
- Complete generation within a 5-second runtime budget.

Example style:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```