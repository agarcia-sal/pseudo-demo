Given a problem description including all classes and functions, generate clear, concise, and high-level pseudocode that:

- Preserves all original class names, function names, parameters, and nesting exactly as in the input.
- Maintains class and method indentation and structure verbatim.
- Represents the logic in mostly natural language with selective use of symbolic notation and standard abbreviations.
- Uses one-line statements wherever clear and natural, combining multiple related actions if appropriate.
- Expresses control flow (IF, WHILE, FOR) succinctly and naturally but explicitly.
- Uses straightforward verbs only: SET, INCREMENT, DECREMENT, ASSIGN, CALL, RETURN, IF, ELSE, ELIF, WHILE, FOR.
- Numbers each executable step in increasing order within each function/method, following this exact numbered format:

  1. x ‚Üê 0  
  2. while x < n: x++

- Omits any explanations, summaries, comments, notes, or headers; output pseudocode **only**.
- Produces readable pseudocode easily translatable back to working code, balancing fluid natural language with symbolic brevity.
- Avoids any separator lines, block delimiters, or extra formatting beyond indentation and numbered steps.
- Optimizes for clarity, faithfulness to original logic, and efficiency within a 5-second runtime constraint.

Example style:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this style consistently and rigorously to all classes, functions, and methods in the problem description.