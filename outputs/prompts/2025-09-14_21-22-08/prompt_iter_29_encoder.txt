Given a problem description including all class and function definitions, generate clear, concise, and easy-to-read pseudocode that:

- Retains all original class and function names, parameters, and indentation exactly as in the input.
- Preserves class and method scopes and nesting precisely.
- Uses mostly natural language with judicious symbolic notation and common abbreviations.
- Produces compact, high-level pseudocode favoring one-line statements whenever clear and natural.
- Represents control flow and conditions naturally but briefly.
- Adheres strictly to the numbered step format, exactly as shown below:

  1. x ← 0  
  2. while x < n: x++

- Uses straightforward action verbs in uppercase (SET, INCREMENT, DECREMENT, RETURN, CALL, IF, WHILE, FOR, ASSIGN).
- Combines multiple logical actions in a single step only when it improves clarity without ambiguity.
- Avoids any comments, explanations, notes, summaries, or introductory/concluding text—output only pseudocode steps within the defined scope.
- Does not include separator lines or extraneous formatting.
- Outputs pseudocode that is simple to understand and directly translatable back to working code.
- Completes generation within 5 seconds runtime.

Example style for a function:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Apply this style carefully and consistently to every part of the input problem description (all classes, functions, and methods).