Given a problem description, generate precise, compact, and high-level pseudocode that is easy to read and understand. Use predominantly natural language enriched with concise symbolic notation and standard abbreviations only when they improve clarity or brevity. Prefer single-line statements for assignments, loops, and conditionals without sacrificing readability. Use meaningful variable names and consistent indentation with one tab or 4 spaces per nested block.  

Strictly follow these rules:  
- Number every line starting at 1, incrementing by 1 with no gaps.  
- Indent nested blocks uniformly by one tab or 4 spaces.  
- Omit comments, explanations, summaries, separator lines, or any notes; output only raw pseudocode.  
- Use minimal symbols such as ←, ++, <, = sparingly and only if they make code clearer or shorter.  
- Favor compact, natural phrasing with minimal verbosity while ensuring the pseudocode remains self-explanatory.  
- Express simple loops or conditionals in one line when possible (e.g., `while x < n: x++`)  
- Avoid extraneous words—prioritize clarity with brevity.

Example style to emulate (no line gaps, indentation by tabs):  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A