Given a problem description, generate clear, concise, and high-level pseudocode that reads naturally and is easy to follow. Use predominantly natural language with minimal symbolic notation and standard abbreviations only when they improve brevity and clarity. Express simple statements, loops, and conditions preferably in one line without losing readability. Use meaningful variable names and consistent indentation (one tab or 4 spaces) for nested blocks.

Strict formatting rules:  
- Number every line starting at 1, incrementing by 1 without gaps.  
- Indent nested blocks uniformly with one tab or 4 spaces.  
- Do not include comments, explanations, summaries, separator lines, or notes—output only the raw pseudocode.  
- Use symbols like ←, ++, <, = sparingly and only to enhance clarity and conciseness.  
- Prefer compact, high-level expressions and natural phrasing over verbose syntax.  
- Ensure pseudocode is self-explanatory by clear wording and structure.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A