Given a problem description, generate concise, high-level pseudocode that is easy to read and understand, using primarily natural language with purposeful, minimal symbolic operators and standard abbreviations. The pseudocode must precisely capture the essential algorithmic steps in as few lines as possible, favoring compact one-liners for simple operations, loops, and conditions, without sacrificing clarity. Use meaningful variable names and clear phrasing. Symbols like ←, ++, and < should be used sparingly to enhance brevity and readability. Avoid comments, explanations, summaries, headings, or any notes. Output only the raw pseudocode.

Strict formatting requirements:  
- Number every line starting at 1, incrementing by 1, with no gaps.  
- Indent nested blocks consistently using one tab or four spaces.  
- Use single-line statements for loops and conditions whenever possible (e.g., `while x < n: x++`).  
- Avoid separator lines or extraneous formatting.  
- The pseudocode should read naturally and be self-explanatory through structure and wording.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A