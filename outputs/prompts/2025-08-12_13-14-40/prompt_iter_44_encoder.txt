Given a problem description, generate concise, clear, and compact pseudocode that is easy to read and understand. Use predominantly natural language, enriched with standard symbolic notation and common abbreviations only to improve brevity and precision. Favor one-line statements for simple actions, loop and condition constructs without losing clarity. Use meaningful variable names and consistent indentation (1 tab or 4 spaces) for nested blocks.

Strict formatting rules:  
- Number every line starting from 1, incrementing by 1 consecutively with no gaps.  
- Indent nested blocks uniformly using one tab or 4 spaces.  
- Do not include comments, explanations, summaries, headers, or notes—output only raw pseudocode.  
- Allow concise symbolic operators such as ←, ++, <, =, and conditionals (if/else) to enhance compactness.  
- Express loops and conditions in short, natural language style, preferring one-liners where readable.  
- Avoid verbose syntax but ensure pseudocode is self-explanatory through clear wording and structured flow.  
- Do not use separator lines or extra formatting.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A