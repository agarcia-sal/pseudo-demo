Given a problem description, generate concise, high-level pseudocode that is easy to read and understand. Use mostly natural language with clear, meaningful variable names. Favor compact one-line statements combining simple assignments, conditions, and loops where clarity allows. Use common abbreviations and symbolic operators (←, ++, =, <, >) sparingly to improve brevity without sacrificing readability.

Formatting requirements:  
- Number every line sequentially starting at 1, no gaps.  
- Indent nested blocks uniformly with 1 tab or 4 spaces.  
- Output only raw pseudocode—no comments, summaries, explanations, or extra notes.  
- Avoid separator lines or headers.  
- Prefer natural phrasing and high-level constructs over verbose syntax or low-level details.

Example pseudocode style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A