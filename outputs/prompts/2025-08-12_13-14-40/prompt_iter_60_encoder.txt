Given a problem description, generate precise, compact, and easily readable pseudocode that captures the core algorithm at a high level. Use predominantly natural language with minimal symbolic notation and standard abbreviations only to improve brevity without sacrificing clarity. Prefer one-line statements for simple assignments, conditionals, and loops whenever readability permits. Use meaningful variable names and consistent indentation (one tab or 4 spaces) for nested blocks.

Strict output requirements:  
- Number each line starting from 1, incrementing by 1 without skipping.  
- Indent nested blocks uniformly with one tab or 4 spaces.  
- No comments, explanations, summaries, headers, or notes—output only the raw pseudocode.  
- Use symbols (e.g., ←, ++, =, <) sparingly and only where they enhance compactness and understandability.  
- Prefer concise, natural language phrasing and idiomatic constructs over verbose syntax.  
- Ensure readability and self-explanatory structure by clear wording and logical flow.

Example style to emulate (line numbers, indentation, compactness):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A