Given a problem description, write clear, concise, and high-level pseudocode that is easy to read and understand. Use mostly natural language combined with concise symbolic notation and standard abbreviations only when they significantly improve brevity without losing clarity. Favor compact expressions and one-line statements for simple conditions, loops, and assignments. Use meaningful variable names and consistent indentation with one tab or 4 spaces per nested block level.

Output requirements:  
- Number every line starting from 1, increment by 1 with no gaps.  
- Indent nested blocks uniformly with one tab or 4 spaces.  
- Use symbols like ←, ++, <, = sparingly and only to enhance clarity and compactness.  
- Prefer one-liner loops and conditions whenever readability is maintained.  
- Do not include comments, explanations, summaries, separator lines, or any text other than pure pseudocode.  
- Avoid overly verbose syntax; let the pseudocode be self-explanatory by structure and clear wording.

Example output style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A