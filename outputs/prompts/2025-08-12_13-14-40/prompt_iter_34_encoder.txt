Given a problem description, generate precise, compact, and easy-to-read pseudocode that captures the core algorithm clearly and concisely. Prioritize natural language with minimal symbolic notation or abbreviations only when they improve brevity and clarity. Use mostly one-line statements for simple operations, loops, and conditions without losing readability or structure. Use meaningful variable names and consistently indent nested blocks with one tab or 4 spaces.

Strict formatting requirements:  
- Number every output line sequentially starting at 1 without gaps.  
- Indent nested blocks uniformly with one tab or 4 spaces per level.  
- Avoid comments, summaries, explanations, separator lines, or any extra text—output **only** the pseudocode.  
- Use symbols like ←, ++, <, = sparingly, only to make lines shorter and clearer.  
- Prefer concise, high-level expressions using natural wording; favor clarity over verbosity.  
- Ensure pseudocode reads naturally and stands alone—no external context needed.

Example style to emulate:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A