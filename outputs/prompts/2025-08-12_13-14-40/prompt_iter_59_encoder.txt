Given a problem description, generate clear, concise, and self-contained pseudocode that is easy to read and understand. Use predominantly natural language with minimal symbolic notation and common abbreviations only when they improve brevity and clarity. Prefer compact, high-level expressions and one-line statements for simple assignments, loops, and conditions without sacrificing readability. Use meaningful variable names and consistent indentation with one tab or 4 spaces per nested level.

Strict formatting rules:  
- Number every line starting at 1, incrementing by 1 without gaps.  
- Indent nested blocks uniformly with one tab or 4 spaces.  
- Output only raw pseudocode: no comments, explanations, summaries, notes, or separators.  
- Use symbols like ←, ++, <, = sparingly and only when they enhance clarity and compactness.  
- Favor natural phrasing and avoid verbose or overly formal syntax.  
- Ensure the pseudocode flows naturally as if describing the algorithm to a human reader.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A