Given a problem description, generate concise, clear pseudocode that is easy to read and understand, expressed mainly in natural language with selective symbolic notation and abbreviations for compactness. Structure the pseudocode at a high level using mostly one-line statements for simple assignments, loops, and conditions, preserving clarity and flow. Use meaningful variable names and consistent indentation (1 tab or 4 spaces) for nested blocks. Number every line in ascending order starting at 1 without gaps. Avoid any comments, headings, explanations, summaries, or separator lines—output only the raw pseudocode exactly as specified.

Strict formatting rules:  
- Each line starts with its line number followed by a dot and a space (e.g., “1. ”)  
- Indent nested blocks uniformly with 1 tab or 4 spaces  
- Use symbols (←, ++, <, =) sparingly only when they make the line shorter and clearer  
- Prefer compact and natural phrasing over verbose or keyword-heavy syntax  
- Express loops and conditionals concisely on single lines when possible (e.g., “while x < n: x++”)  
- Use consistent, descriptive variable names reflecting their roles  
- Avoid redundancy; rely on structure and wording to be self-explanatory  

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A