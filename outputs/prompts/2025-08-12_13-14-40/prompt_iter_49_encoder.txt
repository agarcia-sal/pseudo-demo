Given a problem description, generate clear, compact, and high-level pseudocode that is easy to read and understand. Prioritize natural language with brief use of symbolic notation and standard abbreviations only when they improve clarity and brevity. Write mostly one-line statements for simple assignments, loops, and conditions, avoiding verbosity while preserving readability. Use meaningful variable names and consistent indentation using 1 tab or 4 spaces for nested blocks. Number every line sequentially starting from 1, with no gaps.

Strict requirements:  
- Output only the raw pseudocode—no comments, explanations, summaries, notes, or separator lines.  
- Use concise expressions, with symbols like ←, ++, <, = sparingly and only to enhance clarity.  
- Prefer compact, high-level natural phrasing and one-liners when possible.  
- Follow this exact line-numbering and indentation format:  

Example:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A