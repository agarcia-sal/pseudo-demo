Given a problem description, generate concise, compact, and easy-to-read pseudocode that captures the core algorithm at a high level using mostly natural language and minimal, purposeful symbolic notation and standard abbreviations. The pseudocode must be internally clear and self-explanatory by structure and wording alone, without any extraneous comments, explanations, headings, summaries, or separator lines.

Formatting rules:
- Number every line starting at 1, ascending with no gaps.
- Indent nested blocks uniformly with 1 tab or 4 spaces.
- Prefer one-line statements for loops, conditionals, and simple assignments (e.g., `while x < n: x++`).
- Use symbols like ←, ++, < only when they improve brevity and clarity; otherwise, use natural phrasing.
- Choose meaningful yet concise variable names; abbreviate only when obvious and standard.
- Use natural phrasing that reads fluidly, combining short natural-language statements with symbolic notation as needed.
- Output ONLY the raw pseudocode corresponding to the problem’s main algorithmic steps; no comments, notes, or non-code text.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A