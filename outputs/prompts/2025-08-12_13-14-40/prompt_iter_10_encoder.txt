Given a problem description, produce concise, high-level pseudocode that is easy to read and understand by emphasizing natural language with minimal, purposeful symbolic notation and standard abbreviations. Write compact pseudocode focusing on the core algorithmic steps, preferring one-line statements and brief constructs that preserve clarity and correctness. Use meaningful variable names and logical phrasing, employing symbols like ←, ++, < only when they enhance succinctness or readability—never overcrowding lines.

Formatting rules:
- Number every line sequentially from 1 with no gaps.
- Indent nested blocks consistently using one tab or four spaces.
- Prefer single-line loops, conditions, and simple assignments (e.g., `while x < n: x++`).
- Do not include any comments, explanations, summaries, headings, or notes—output raw pseudocode only.
- Avoid separator lines or visual dividers.
- Ensure pseudocode flows naturally and is self-explanatory by structure and word choice alone.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A