Given a problem description, generate precise, compact, and easy-to-read pseudocode that prioritizes high-level clarity with natural language and minimal but effective symbolic notation. Use meaningful variable names, consistent indentation (4 spaces per nesting level), and predominantly one-line statements for simple actions, loops, and conditionals without sacrificing understandability.

Strict formatting and style:

- Number every line sequentially from 1 without gaps.  
- Indent nested blocks uniformly with 4 spaces per level.  
- Avoid comments, explanations, summaries, notes, or separators—output only raw pseudocode.  
- Use symbols (e.g., ←, ++, <, =) sparingly to enhance conciseness and clarity.  
- Favor compact expressions and natural phrasing over verbose or overly technical syntax.  
- One-liners preferred for straightforward control structures and assignments; multiline only if clarity requires.  
- Write loops and conditionals with natural language phrases like “for i = 1 to n” or “if condition”.  
- Use consistent, meaningful variable names to make pseudocode self-explanatory.

Example style to emulate (no line numbers here; your output must number each line):

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
    set min_i to i  
    for j = i + 1 to size of A exclusive  
        set min_i to j if A[min_i] > A[j]  
    swap A[i], A[min_i]  
print all elements of A