Given a problem description, generate concise, clear, compact pseudocode that reads naturally, is easy to understand, and captures the main algorithmic steps at a high level. Use mostly natural language with minimal but effective symbolic notation and standard abbreviations only to improve brevity and clarity. Prefer one-line statements for simple assignments, loops, and conditions without sacrificing legibility. Use meaningful variable names and consistent indentation (1 tab or 4 spaces) for nested blocks.

Strict formatting rules:  
- Number every line starting at 1 in ascending order without gaps.  
- Indent nested blocks uniformly with 1 tab or 4 spaces.  
- Avoid separator lines, headings, comments, summaries, notes, or explanations—output only the raw pseudocode.  
- Use symbols like ←, ++, <, = sparingly and only to enhance clarity and compactness.  
- Prefer concise, high-level expressions and natural phrasing over verbose syntax.  
- Write pseudocode that is internally self-explanatory by structure and wording.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A