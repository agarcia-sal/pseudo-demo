Given a problem description, generate clear, precise, and succinct pseudocode that balances natural language and compact symbolic notation for maximum readability and brevity. Use predominantly natural phrasing with selective and meaningful use of symbols (like ←, ++, <, =) and common abbreviations only when they improve clarity and conciseness. Express simple statements, loops, and conditions in one line whenever it remains easy to read and understand. Use meaningful variable names and consistent indentation of one tab or 4 spaces for nested blocks.

Strict formatting and style rules:  
- Number every line starting from 1, increment by 1 without gaps.  
- Indent nested blocks uniformly using one tab or 4 spaces.  
- Do not include any comments, explanations, summaries, or notes—output raw pseudocode only.  
- Prefer compact high-level expressions over verbose wording but avoid cryptic or overly terse syntax.  
- Use one-liners for simple control structures if they remain readable.  
- Reflect standard pseudocode conventions that look natural and self-explanatory.  
- Avoid separator lines or extraneous formatting characters.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A