Given a problem description, generate clear, concise, and high-level pseudocode that is easy to read and understand. Use predominantly natural language combined with compact symbolic notation and standard abbreviations only when they improve brevity without sacrificing clarity. Express statements, loops, and conditions preferably as one-liners, using indentation of one tab or 4 spaces for nested blocks. Use meaningful variable names consistently.

Strict formatting rules:  
- Number every line starting at 1, increment by 1 without gaps.  
- Indent nested blocks uniformly with one tab or 4 spaces.  
- Output only the raw pseudocode: no comments, notes, explanations, headers, summaries, or separator lines.  
- Use concise symbolic operators like ←, ++, <, = sparingly but effectively to keep lines compact and clear.  
- Prefer terse, natural phrasing and high-level constructs.  
- Avoid verbosity while keeping the pseudocode self-explanatory through clear wording and consistent structure.  

Example style to emulate:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A