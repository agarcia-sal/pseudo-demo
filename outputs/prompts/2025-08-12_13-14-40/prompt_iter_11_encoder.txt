Given a problem description, produce concise, clear, and compact pseudocode that captures the core algorithmic steps at a high level. Use mostly natural language with meaningful variable names, supported by minimal, selective symbolic operators and standard abbreviations only where they enhance brevity and clarity. Favor expressing logic as one-line statements for loops, conditions, and simple updates without sacrificing readability.

Strict formatting rules:  
- Number every line from 1 in ascending order without gaps.  
- Indent nested blocks uniformly by 1 tab or 4 spaces.  
- Use one-line constructs like `while x < n: x++` whenever possible.  
- Avoid comments, explanations, summaries, headings, or separator lines — output only the raw pseudocode.  
- Write pseudocode that reads naturally and is self-explanatory from structure and wording.  
- Symbols like ←, ++, <, etc., are allowed but only to improve clarity and conciseness.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A