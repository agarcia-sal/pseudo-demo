Given a problem description, generate concise, high-level pseudocode that is easy to read and understand. Use clear natural language with occasional symbolic notation and standard abbreviations only when they improve brevity without sacrificing clarity. Express simple statements, loops, and conditionals predominantly as one-liners to maintain compactness. Use meaningful variable names and consistent indentation (4 spaces or one tab) for nested blocks.

Strict formatting rules:  
- Number every line starting at 1, increment by 1 with no gaps  
- Indent nested blocks uniformly with one tab or 4 spaces  
- Do not include comments, explanations, summaries, or notes—output only raw pseudocode  
- Favor one-liner expressions where readability is preserved, incorporating symbols like ←, ++, <, = sparingly to enhance clarity and conciseness  
- Avoid verbose syntax; prefer high-level concise phrasing  
- Ensure pseudocode is self-contained and understandable through clear wording and structure only  
- Do not use separator lines or extraneous formatting

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A