Given a problem description, generate clear, concise, and high-level pseudocode that is easy to read and understand. Use predominantly natural language with minimal symbolic notation, abbreviations, or operators only when they improve brevity without sacrificing clarity. Prefer compact one-line statements for simple actions, loops, and conditionals. Choose meaningful variable names and maintain consistent indentation (one tab or 4 spaces) for nested blocks.

Strict formatting requirements:  
- Number every line sequentially starting at 1, with no gaps or duplicates.  
- Indent each nested block uniformly with one tab or 4 spaces.  
- Output only the raw pseudocode—do not include comments, explanations, summaries, or notes.  
- Allow concise use of symbols like ←, ++, <, =, and if (conditional inline) to keep lines short and clear.  
- Avoid verbose constructions; express intent in the fewest, most natural words possible while preserving easy comprehension.  
- Organize logic so that each numbered line captures one clear step or control structure (loops, conditionals, assignments).  
- Use natural phrases such as “let variable be type”, “read input”, “for i = start to end exclusive”, “print value” rather than programming language syntax.

Example style to model:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A