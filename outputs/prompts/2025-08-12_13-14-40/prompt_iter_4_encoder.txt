Given a problem description, produce concise, clear, and easy-to-read pseudocode that uses mostly natural language combined with minimal symbolic operators and standard abbreviations. The pseudocode should be high-level yet precise, capturing the key algorithmic steps compactly. Favor one-line statements for simple operations and clean, consistently indented blocks for control structures. Number each line starting from 1 without gaps. Use meaningful variable names with allowed common abbreviations. Omit all explanations, comments, summaries, or notes—output only the pseudocode itself, strictly following this format:

- Use natural language predominately with symbols like ←, ++, <, etc., only when they enhance brevity and clarity.
- Prefer concise one-line statements when possible, especially for loops, conditions, and simple assignments.
- Indent nested blocks consistently using one tab or 4 spaces.
- Do not use separator lines, headings, or extra formatting.
- Keep the pseudocode compact but self-explanatory through clear wording and structure.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to size of A - 1  
  set min_i ← i  
  for j from i + 1 to size of A exclusive  
   set min_i ← j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A