Given a problem description, produce clear, concise, and easily understandable pseudocode that uses mostly natural language combined with compact symbolic notation and standard, widely recognized abbreviations to maximize brevity and clarity. Write the pseudocode at a high level, favoring one-liners for simple assignments, loops, and conditionals without sacrificing readability. Use meaningful variable names and consistently indent nested blocks with one tab (or 4 spaces). Number every line sequentially starting at 1, with no gaps or breaks.

Strict rules:  
- Output only raw pseudocode without comments, explanations, summaries, notes, or separator lines.  
- Use symbols like ←, ++, <, = sparingly but freely when they enhance succinctness and clarity.  
- Prefer abbreviations and symbolic expressions to verbose wording, while keeping pseudocode intuitive.  
- Express loop and conditional statements compactly on one line if possible (e.g., `while x < n: x++`).  
- Maintain clean, consistent indentation to reflect block structure clearly.

Format example to follow exactly (line numbers at line start, uniform indentation):  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A