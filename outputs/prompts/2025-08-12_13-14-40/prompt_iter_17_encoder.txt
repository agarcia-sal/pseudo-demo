Given a problem description, generate concise, compact, and easy-to-read pseudocode emphasizing natural language with selective, meaningful symbolic operators and standard abbreviations to maximize clarity and brevity. The pseudocode must capture the core algorithmic steps at a high level using mostly one-liners without redundancies, while maintaining self-explanatory structure and meaningful variable names.

Strict formatting and style rules:  
- Number every line starting from 1, incrementing by 1 without gaps.  
- Indent nested blocks consistently by 1 tab or 4 spaces.  
- Use one-line statements whenever possible for loops, conditions, and assignments (e.g., `while x < n: x++`).  
- Use symbols like ←, ++, <, >, = sparingly and only when they improve brevity and natural readability.  
- Avoid comments, explanations, headings, separator lines, summaries, or extra notes. Output only raw pseudocode lines.  
- Write pseudocode that flows naturally and is self-explanatory through wording and structure alone.  
- Prefer concise phrases like "let x be integer", "read n", "for i = 0 to n exclusive", etc., balancing between natural wording and symbolic form for clarity and compactness.

Example style to replicate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A