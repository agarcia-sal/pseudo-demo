Given any problem description, generate concise, clear, and high-level pseudocode that is easy to read and understand. Use natural language enriched with minimal symbolic notation and widely accepted abbreviations only when they improve brevity and clarity. Favor compact, one-line statements for simple assignments, loops, and conditions without sacrificing readability. Use meaningful, consistent variable names and uniform indentation (one tab or 4 spaces) for nested blocks.

Strict formatting requirements:  
- Number every pseudocode line consecutively starting from 1 without gaps.  
- Use uniform indentation for all nested blocks (one tab or 4 spaces).  
- Do not include any comments, explanations, summaries, notes, or separator lines; output only the raw pseudocode lines.  
- Use symbolic operators (←, ++, <, =) sparingly and only when they make expressions clearer or more concise.  
- Prefer natural-language phrasing with concise, high-level expressions over verbose syntax.  
- Maintain pseudocode self-sufficiency by clear wording and structured flow.  

Pseudocode style to follow — compact, natural, and mostly one-liners:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to size of A exclusive  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A