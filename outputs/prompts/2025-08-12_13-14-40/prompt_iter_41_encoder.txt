Given a problem description, generate clear, concise, and easily understandable pseudocode that is predominantly natural language yet compact and high-level. Prioritize readability and natural phrasing while using symbolic notation and standard abbreviations only when they improve brevity and clarity. Favor expressing simple statements, loops, and conditions in single lines without sacrificing comprehension. Use meaningful variable names and consistent indentation with one tab or 4 spaces per nested block.

Strict formatting rules:  
- Number every line starting from 1 and increment by 1 without gaps.  
- Indent nested blocks uniformly using one tab or 4 spaces.  
- Output only the raw pseudocode—no comments, explanations, summaries, notes, or separator lines.  
- Employ symbols like ←, ++, <, = sparingly but effectively to shorten lines.  
- Prefer one-liners and compact, high-level expressions with concise natural language.  
- Ensure pseudocode is fully self-explanatory via clear wording and logical structure.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A