Given a problem description, generate concise, clear, and easy-to-read pseudocode that is compact and high-level, using mostly natural language with minimal, purposeful symbolic operators and standard abbreviations. The pseudocode should precisely capture the main algorithmic steps in as few lines as possible, favoring one-line statements and brief constructs without sacrificing clarity. Use meaningful variable names and natural phrasing, combined with symbolic notation only when it enhances brevity and readability.

Strict formatting rules:
- Number every line starting at 1 in ascending order without gaps.
- Indent all nested blocks consistently using 1 tab or 4 spaces.
- Prefer single-line statements for loops, conditions, and simple assignments (e.g., `while x < n: x++`).
- Avoid separator lines, headings, comments, explanations, summaries, or notes — output only the raw pseudocode.
- Write pseudocode that reads naturally and is internally self-explanatory through structure and wording.
- Use symbols like ←, ++, <, etc., sparingly and only to improve clarity and conciseness.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
8. print all elements of A