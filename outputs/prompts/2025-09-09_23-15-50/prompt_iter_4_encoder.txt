Write concise, compact, and high-level pseudocode that directly implements the core algorithm from the problem description using **exactly the same function name** as in the original code. The pseudocode should be easy to read and understand, use mostly natural language with symbolic forms and abbreviations, and prefer one-liners with minimal nesting and no redundant verbosity. Always keep it within the function scope—do not define classes or import statements. Use clear assignments, control structures (`if`, `for`, `while`), and function calls matching original names and parameters.

Format every line with a leading line number, exactly as:  
`1. x ← 0`  
`2. while x < n: x++`

- Prefer symbolic operators (`=`, `+`, `-`, `++`, `/`, `mod`, etc.) and compact expressions (`max_count ← max(max_count, current_count)`) that faithfully map the original logic.  
- Avoid comments, explanations, summaries, or extra notes—output only pure pseudocode lines.  
- Do not add blank lines or separators.  
- Use natural language phrases when clearer but keep them concise (e.g., “let n be integer”, “read n elements into A”).  
- If initializing collections or maps, express them clearly but succinctly (e.g., “count ← empty map”, “prefix_sum ← array of zeros size max_num+1”).  
- Keep consistent and straightforward indentation only for nested blocks.  
- Always preserve the original function’s exact name and parameters to ensure a direct mapping.  
- Ensure the pseudocode is optimized for clarity and brevity while maintaining correctness and efficiency to respect a typical 5-second runtime limit.  

Example style:  
```
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7.  set min_i ← i  
8.  for j in i+1 to n-1:  
9.   if A[min_i] > A[j]: min_i ← j  
10.  swap A[i], A[min_i]  
11. print all elements of A
```