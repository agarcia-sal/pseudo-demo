Write concise, compact, high-level pseudocode that directly solves the given problem using the **same function name** as in the original code. Use mostly natural language with symbolic forms and abbreviations, favoring one-liners and minimal nesting. Make it easy to read and understand without extra explanations, comments, or summaries.  

Format every line with a leading line number and the following style exactly:  
`1. x ← 0`  
`2. while x < n: x++`  

- Use clear variable assignments, control structures (if, for, while) and function calls matching the original names.  
- Avoid defining classes or importing modules—focus only on core logic within the function.  
- Preserve concise expressions (e.g., `max_count ← max(max_count, current_count)`) and symbolic operators (`=`, `<`, `++`, etc.).  
- Do not include any extraneous text, summaries, or notes—only pure pseudocode lines following the above format.  
- Do not add separators or blank lines.  
- Strive for minimal lines while maintaining clarity and correctness.  
- The pseudocode should translate the core algorithm as directly and naturally as possible from the problem description.  
- Always assume a 5-second runtime limit; prefer efficient constructs and avoid verbosity.  

Example output style:  
```
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7.  set min_i ← i  
8.  for j in i+1 to n-1:  
9.   if A[min_i] > A[j]: min_i ← j  
10.  swap A[i], A[min_i]  
11. print all elements of A
```