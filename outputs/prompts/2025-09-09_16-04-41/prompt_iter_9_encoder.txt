Generate concise, easy-to-read pseudocode that closely follows the original code’s structure. Use natural language with compact, high-level statements, incorporating symbolic operators, abbreviations, and one-liners wherever possible. Preserve all original class names, function names, and data structure references exactly as in the problem description. Structure the pseudocode inside the correct class and function scope as per the original code.

Do not include any purpose, summary, explanations, comments, notes, or overview statements—only pseudocode steps. Avoid unnecessary separators or extra formatting.

Use this numbering format for each pseudocode line:

1. x ← 0  
2. while x < n: x++

Keep pseudocode straightforward, clear, and brief while ensuring it is easy to understand and implements the logic at a high conceptual level.

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A