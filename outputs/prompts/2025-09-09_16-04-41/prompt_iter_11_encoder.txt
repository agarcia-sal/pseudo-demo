Generate compact, precise pseudocode that mirrors the original code’s class names, function names, parameters, and data structures exactly. Keep the structure and nesting intact, expressing control flow with minimal keywords and symbols (←, =, +=, etc.). Use mostly one-liners and natural language phrasing that’s high-level and easy to read but unambiguous. Avoid explanations, comments, summaries, or purpose statements—output ONLY the pseudocode.

Format your output exactly as follows, with indentation reflecting code blocks and nesting:

- start functions and classes with lines like:  
 in class ClassName  
 in function FunctionName(params)  
- declare variables succinctly (e.g., let x be integer or x ← 0)  
- for loops, conditionals, and other blocks in one-line style where possible (e.g., if x > 0: y ← x else: y ← 0)  
- prefer symbolic and abbreviated forms (+=, -=, ←)  
- preserve line order and logic precisely as in the original  
- return statements appear exactly as in the original code  

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i = 0 to n - 1:  
 set min_i ← i  
 for j = i + 1 to n - 1: if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A

No extra text, separators, or formatting beyond the pseudocode lines.