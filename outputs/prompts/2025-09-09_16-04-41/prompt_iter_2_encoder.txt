Generate concise, easy-to-read pseudocode from the given problem description while preserving all original class names, function names, and data structures exactly as in the source code. Use compact, high-level natural language phrasing with symbolic notations, abbreviations, and mostly one-liners. Ensure it fits naturally in the original class and method context (e.g., inside the same class where the function is defined). Maintain consistent references to input parameters and variables as in the original code. Do not add explanations, comments, notes, summaries, or meta-statements. Do not change the program’s logical structure or introduce non-standard constructs. The output should be only pseudocode formatted as enumerated lines, for example:

1. x ← 0  
2. while x < n: x++

Prefer brevity and clarity; use natural language to describe operations yet keep them concise. Use imperative wording such as “let,” “set,” “return,” and symbolic operators like ←, +=, ==, ≠, and standard control flow keywords (if, else, for, while). Avoid separator lines or extraneous formatting. Aim to produce the best pseudocode within a 5-second runtime budget. 

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers with size n  
for i in 0 to n-1: read A[i]  
for i in 0 to n-1:  
 set min_i ← i  
 for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A