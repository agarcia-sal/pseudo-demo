Generate concise, high-level pseudocode that is easy to read and understand, using natural language combined with symbolic notations and abbreviations.  
Preserve all original class names, function names, and data structures exactly as in the problem description.  
Write the pseudocode compactly, preferably using one-liners, while maintaining clarity.  
Do not include any purpose, summary, explanation, comments, notes, or overview statements—output only the pseudocode itself.  
Follow this numbering and formatting style strictly:  

1. x ← 0  
2. while x < n: x++  

Use concise constructs and keep control flow structured but terse. Avoid separator lines or extra markup.  
If the problem involves an existing class and method, begin pseudocode within that context implicitly (do not redefine class or method signatures).  
Use natural language verbs (e.g., let, set, read, print, return), indexing like A[i], and common operators and expressions as in programming (e.g., if x > y, while cond, for i in range).  
Favor clarity and brevity to maximize correctness and readability within a 5-second generation timeout.