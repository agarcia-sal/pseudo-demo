Translate the pseudocode into fully functional, clean, and efficient Python code, strictly adhering to the following requirements:

- Preserve all original function names, class names, and data structures exactly as indicated in the pseudocode, including implementing all classes and helper methods if referenced.
- Implement all code within the exact class structure described by the pseudocode; if the pseudocode implies methods belong to a class, define that class and place methods properly.
- Output your entire Python solution enclosed **only** in one code block formatted as ```python ... ``` with no explanations, comments, or text outside the code block.
- Write self-contained, executable code that requires no additional external definitions or wrappers beyond what is explicitly described.
- Do **not** assume or instantiate any undefined class wrappers (e.g., do not use or define a class named `Solution` unless explicitly stated).
- Optimize for readability, idiomatic Python style, and performance; your code must run efficiently within 5 seconds.
- You may import and use any Python standard or third-party packages that improve clarity or performance, as long as the above constraints are respected.
- Ensure to faithfully implement all control flows, data assignments, and calculations as per the pseudocode, fixing any minor pseudocode ambiguities or errors logically while preserving intent.
- Avoid unnecessary or redundant constructs; prioritize concise, robust, maintainable, and correct code.

Here is the pseudocode to translate: