Generate clear, concise pseudocode that preserves the original class and function names, method signatures, and data structures exactly as in the input code.  
Produce compact, high-level pseudocode that is easy to read and understand by mixing natural language, symbolic notations, abbreviations, and one-liners when appropriate.  
Do not add any explanations, comments, notes, summaries, or overview statements—only output pseudocode steps.  
Retain all control structures (loops, conditionals) and key operations faithfully so they reflect the original logic but expressed in brief and idiomatic pseudocode style.  
Prefer minimal line count without sacrificing readability or completeness.  
Follow this numbered line format strictly, e.g.:

1. x ← 0  
2. while x < n: x++  

If there is a class, indicate it by starting with:  
in class ClassName  

and then define methods as:  
in function FunctionName(params)  

Respect indentation inside blocks (e.g., loops, conditionals) using consistent whitespace.  
Use symbolic operators (←, +, -, =, ≠, <, >, ≤, ≥, ∧, ∨, ¬) and concise shorthand forms.  
Use idiomatic constructs (e.g., for i in range, if cond: stmt) and idiomatic data structure notation matching the original (e.g., lists, maps, objects).  
Do not include any dummy class or function wrappers that were not in the original.  
Complete the pseudocode so it can be unambiguously translated back to working code.

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
  set min_i = i  
  for j = i+1 to size(A)-1  
   if A[min_i] > A[j]: min_i = j  
  swap A[i], A[min_i]  
print all elements of A