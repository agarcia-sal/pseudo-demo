Generate concise, clear, and easy-to-understand pseudocode strictly reflecting the original code’s structure: keep the same class names, function names, parameters, and data structures. Use compact, high-level natural language with preference for one-liners, symbolic assignments, abbreviations, and control flow expressions. Avoid purpose statements, explanations, comments, or summaries; output only pseudocode.

Follow this formatting style exactly (no extra separators or text):

1. in function FunctionName(params)  
2.   variable declarations and initializations  
3.   control structures using natural but concise language  
4.   use symbolic operators (←, =, +=, etc.) and minimal keywords  
5.   indentation to reflect blocks, nest loops/conditions accordingly  
6.   return statements as in original code  

Example:

1. in function main  
2.   let n be integer  
3.   read n  
4.   let A be vector of integers size n  
5.   read A elements  
6.   for i = 0 to n - 1:  
7.     min_i ← i  
8.     for j = i + 1 to n - 1: if A[j] < A[min_i]: min_i ← j  
9.     swap A[i], A[min_i]  
10.   print A elements

Keep the pseudocode logic precise and minimal to fit within 5 seconds runtime. Use natural language to describe actions but keep lines brief and statements unambiguous for easy implementation.