Generate concise, precise, and readable pseudocode that directly mirrors the original code’s structure and logic, preserving all class names, function names, parameters, and data structures exactly as in the source.

Write in natural but compact language, using high-level expressions, symbolic assignment operators (←, =, +=, etc.), and minimal keywords. Prefer single-line statements wherever clarity allows, especially for simple conditionals and loops.

Use indentation to indicate block structure and nesting. Avoid explanations, comments, summaries, or any extraneous text—output only the pseudocode.

Maintain the exact hierarchy of classes and functions from the original code.

Follow this format strictly (no extra lines or separators):

1. in class ClassName (if present)  
2.   in function FunctionName(parameters)  
3.    variable declarations and initializations, using concise natural language  
4.    control flow constructs with compact syntax: if cond: action; for i = ...; while cond: ...  
5.    expressions use symbolic operators and abbreviations to keep lines short  
6.    faithfully replicate return statements and data structure usage  

Example:

in function main  
let n be integer  
read n  
let A be vector of integers size n  
read n elements into A  
for i = 0 to n - 1:  
  min_i ← i  
  for j = i + 1 to n - 1: if A[j] < A[min_i]: min_i ← j  
  swap A[i], A[min_i]  
print A elements