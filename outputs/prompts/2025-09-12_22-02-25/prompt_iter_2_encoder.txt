Generate concise, easy-to-read, high-level pseudocode from the exact problem description.  
Maintain the original class and function names, preserving all class and method structures as in the source code.  
Express the pseudocode compactly, using mostly one-liners with symbolic notation, natural language, and abbreviations where appropriate.  
Use clear variable assignments and control flow but avoid verbose explanations, comments, summaries, or notes.  
Produce only the pseudocode—no extra text or delimiters.  
Structure pseudocode steps as a numbered list as shown in the example below, and include indentation for nested blocks.  
Aim for clarity and brevity while faithfully reflecting the original logic and intent.  
Respect a 5-second runtime limit to return the best possible pseudocode output.

Example format to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i from 0 to size of A - 1:  
7.   set min_i ← i  
8.   for j from i + 1 to size of A - 1:  
9.    if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A