Generate concise, clear, and easy-to-read pseudocode that balances natural language with standard symbolic operators and abbreviations. Use compact one-liner statements whenever possible, combining assignments, conditionals, loops, and function calls directly without extra explanation, comments, or summaries. Favor high-level expressions and intuitive phrasing (e.g., "read n", "print result", "for i in 1 to n") while maintaining precision.

Output only the pseudocode steps as a numbered list like:

1. x ← 0  
2. while x < n: x++

Use established pseudocode conventions: ← for assignment, = and ≠ for comparisons, mod for modulo, intuitive loop syntax ("for i in 1 to n"), and function definitions with clear parameters. Avoid any separator lines or additional formatting. Do not include purpose statements, annotations, comments, or notes.

Make lines short and readable, merging multiple operations in a single line if clarity allows, but never sacrificing understandability. Ensure naming, control structures, and data handling remain natural language–like but concise and precise.

Example style to match:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j in i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A