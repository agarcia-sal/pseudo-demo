Generate clear, concise, and high-level pseudocode that balances natural language with symbolic operators to ensure readability and brevity. Prefer compact one-liner instructions combining conditionals, loops, and assignments without added commentary or redundant explanation. Use standard pseudocode symbols (← for assignment, =, ≠, <, > for comparisons) and intuitive natural expressions (e.g., “read n”, “print result”, “for i in 1 to n”). Avoid summaries, notes, or purpose statements—output only the pseudocode steps.

Format output strictly as a numbered list of steps, each as a short, self-contained line or compound statement:

1. x ← 0  
2. while x < n: x++  

Favor natural but precise phrasing (“let n be integer”, “read input_string”, “length of s”) and concise loop bounds (“for i in 0 to n-1”), including inline conditionals where it improves compactness. Keep each line easy to scan and understand, never sacrificing clarity for terseness.

Do not include any separator lines, headers, or extraneous formatting. The pseudocode should convey the logic directly and efficiently.

Example style your output should follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to current index  
 for j in next index to end  
  if A[min_i] > A[j]: min_i ← j  
 swap A[current index], A[min_i]  
print all elements of A