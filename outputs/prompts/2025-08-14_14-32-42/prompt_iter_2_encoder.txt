Generate pseudocode that is concise, high-level, and easy to read, blending natural language with symbolic operators and abbreviations for clarity. Use compact one-liner statements when possible, employing conditionals, loops, and assignments directly without extra explanation or comments. Avoid purpose statements, summaries, annotations, or notes—output only the pseudocode steps.

Format your output as a numbered list of instructions like this:

1. x ← 0  
2. while x < n: x++

Use common pseudocode conventions (e.g., ← for assignment, standard comparison symbols, intuitive natural language phrases), leverage natural-language-like but precise expressions (e.g., "read n", "print result", "for i in 1 to n"), and keep lines short and clear.

Do not include separator lines or extraneous formatting. The pseudocode should reflect a balance of clarity and brevity, favoring compactness but never sacrificing understandability.

Example style your output should match:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to current index  
 for j in next index to end  
  if A[min_i] > A[j]: min_i ← j  
 swap A[current index], A[min_i]  
print all elements of A