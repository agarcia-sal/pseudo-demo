Write clear, concise pseudocode that mirrors the structure and function names of the original code exactly. Use compact, high-level natural language mixed with symbolic notation and common abbreviations. Omit any explanations, summaries, comments, or notes—output only the pseudocode steps. Prefer single-line statements and straightforward control structures to keep the code minimal and readable. Follow this exact formatting style for numbering and indentation, with no extra separators:

1. x ← 0  
2. while x < n: x++

If functions or methods are named, start pseudocode blocks with:  
in function <function_name>

Use variable declarations naturally, e.g., “let x be integer” or “x ← 0”. Use common pseudocode keywords and operators (for, if, else, while, return, etc.) and symbolic forms (≤, ≠, ←, ++, //). Keep pseudocode self-contained so the structure, flow, and naming match the original precisely, supporting direct translation back into code. The output should be compact enough to generate reliably within 5 seconds while maximizing clarity and correctness.