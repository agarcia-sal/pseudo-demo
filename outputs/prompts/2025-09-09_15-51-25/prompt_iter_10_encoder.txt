Write clear, concise, and easy-to-read pseudocode that mirrors the exact function name(s) from the original code. Use mostly natural language with occasional symbolic notation and common abbreviations to keep it high-level and compact. Omit any explanatory comments, summaries, or notes—output only the numbered pseudocode steps, using single-line statements and straightforward control structures.

Format precisely as follows:  
- Begin function blocks with:  
  in function <function_name>(param1, param2, ...)  
- Use natural declarations like:  
  let x be integer  
  let A be array/list/vector of <type> with size n  
- Use common keywords and symbolic operators (for, if, else, while, return, ←, ++, --, =, <, ≤, mod, ∞, etc.)  
- Prefer concise one-liners wherever possible, including simple if/else conditions.  
- Indent nested blocks by one tab or 4 spaces after the line number and period.  
- Do not add separator lines or extra blank lines.  
- Do not include class or module declarations, only the pseudocode for the functions.  
- Keep step numbers consecutive starting from 1 within each function block.  
- Ensure the pseudocode remains fully self-contained, accurately reflecting the original code’s logic, variable names, and control flow to enable straightforward translation back to code.

Example style to follow exactly:  
in function main  
1. let n be integer  
2. read n  
3. let A be vector of integers with size n  
4. read n elements into A  
5. for i = 0 to n - 1  
6.  let min_i ← i  
7.  for j = i + 1 to n - 1: if A[min_i] > A[j] then min_i ← j  
8.  swap A[i], A[min_i]  
9. print all elements of A