Write clear, concise pseudocode that preserves all original function names exactly. Produce highly readable, compact, and high-level pseudocode using mostly natural language with judicious symbolic notation and standard pseudocode abbreviations. Output only the pseudocode steps—no explanations, comments, summaries, or extraneous text. Prefer simple one-line statements and straightforward control structures to maximize brevity and clarity. Use natural declarations like “let x be integer” or “x ← 0” and common pseudocode constructs (for, if, else, while, return, etc.) along with symbols (←, ++, ≤, ≠, //). Begin each numbered block with:  
in function <function_name>  
Follow this precise formatting style with one statement per line, numbered sequentially, and indent nested lines with a single tab. Do not add separator lines or extra spacing. The pseudocode should be fully self-contained, reflecting the original logic, naming, and flow so it can be directly translated back into code. For example:

in function main  
1. let n be integer  
2. read n  
3. let A be vector of integers sized n  
4. read n elements into A  
5. for i from 0 to n-1  
6.  min_i ← i  
7.  for j from i+1 to n-1  
8.    if A[min_i] > A[j]: min_i ← j  
9.  swap A[i], A[min_i]  
10. print all elements in A