Translate the given code into concise, high-level pseudocode using clear, natural language combined with standard symbolic notation.  
- Preserve all original function and class names exactly.  
- Retain the class hierarchy, methods, and object structure as in the original code.  
- Use imperative style with structured blocks (e.g., FUNCTION, IF, FOR, WHILE, RETURN) and consistent indentation.  
- Define functions and methods explicitly with `FUNCTION` or `METHOD` and matching names.  
- Express variables, assignments, loops, conditionals, and expressions clearly but compactly without extra explanation, commentary, or summaries.  
- Use domain-neutral descriptive natural language terms (e.g., `SET`, `INCREMENT`, `FOR each`, `IF condition THEN`, `RETURN value`, etc.) combined with intuitive symbolic operators (`=`, `+=`, `<=`, etc.).  
- Abstract away implementation details that do not affect algorithmic logic, but preserve core control flow and data manipulation semantics.  
- Keep pseudocode minimal yet fully representative of the algorithm steps so it could guide implementation clearly.  
- Output only the pseudocode in plain text; do not include any explanations, notes, or delimiters.