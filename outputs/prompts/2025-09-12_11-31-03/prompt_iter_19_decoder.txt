Translate the given pseudocode into a clean, idiomatic, and fully functional Python implementation adhering to these precise guidelines:

- **Output your complete solution enclosed in a single Python code block:**
  ```python
  # Your code here
  ```

- **Preserve exactly all class names, function names, method signatures, argument names (`self`, `cls`, etc.), and nesting as specified in the pseudocode.**  
  Do not rename or restructure unless explicitly instructed.

- **Your solution must be standalone and complete with respect to the pseudocode logic:**  
  - No `print` or `input` calls; no example usage or test scaffolding.  
  - Do not include debug statements, commented-out code, or any placeholder code.  
  - Do not write helper utilities for input construction (e.g., converting lists to trees or linked lists) unless explicitly specified in the pseudocode.  
  - Assume inputs are already instantiated objects or primitives as implied.

- **If the pseudocode requires standard data structures (trees, linked lists) and their class definitions are not provided:**  
  - Define minimal standard classes with commonly accepted attributes (`TreeNode` with `val`, `left`, `right`; `ListNode` with `val`, `next`).  
  - Do not add extra methods, attributes, or helper functions beyond what is strictly necessary.

- **Import only standard Python libraries or explicitly allowed external packages, and place all import statements at the top of your code block.**  
  - Favor the use of efficient, idiomatic Python features and Python standard library utilities for clarity, correctness, and performance.

- **Implement all given logic precisely:**  
  - Follow the pseudocode statement-to-statement, translating with appropriate Python syntax.  
  - Replace pseudocode-specific operators or keywords with correct Python equivalents (e.g., `XOR` â†’ `^`).  
  - Preserve variable names exactly.  
  - Handle all edge cases logically implied by the pseudocode without adding explicit validation or conversion unless specified.

- **Do NOT use or assume any undefined literals (`null`, etc.) or undeclared variables; do not simulate object construction from literals like lists; rely on correct input types as implied.**

- **Do NOT introduce global variables, extra classes, or functions beyond those described or clearly implied by the pseudocode.**

- **Your implementation must be optimized for correctness and efficiency to run within a 5-second timeout.**

Here is the pseudocode to implement: