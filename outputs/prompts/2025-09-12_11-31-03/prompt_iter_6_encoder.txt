Generate concise, high-level pseudocode from the given problem description with the following requirements:

- Use exact original class names, function/method names, and preserve the class/object hierarchy as in the source.
- Keep the pseudocode compact, easy to read, and understandable, favoring natural language phrasing combined with symbolic notation and abbreviations.
- Use one-liner statements wherever clarity and correctness are not compromised; otherwise, indent properly to reflect blocks inside loops, conditionals, or nested structures.
- Do not add any explanations, comments, notes, summaries, or extra text—output only the pseudocode.
- Maintain consistent variable names as in the original description.
- Follow strictly a numbered line format starting from 1, without separator lines or blank lines.
- Represent control structures similarly to this style:

1. x ← 0  
2. while x < n: x++  
3. if condition: do_action

- Use natural language constructs for readability without verbosity; e.g., "let x be integer", "read n", "for i from 0 to n-1", "print A elements".
- Keep pseudocode self-contained and directly implementable by retaining logical correctness and control flow.
- The entire pseudocode generation must run within 5 seconds.

Example pseudocode style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers size n  
read A elements  
for i from 0 to n-1  
 set min_i to i  
 for j from i+1 to n-1  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print A elements