Generate compact, clear, and easy-to-read pseudocode directly from the input problem description following these rules exactly:

- Retain all original class names, function/method names, and parameter names precisely and preserve their nesting within classes or objects as in the input.
- Express data structures naturally and explicitly (e.g., “let A be vector of integers”); include sizes only if explicitly stated or essential.
- Use mainly natural language with minimal, standard symbolic notation (← for assignment, = for equality in conditions, standard loop and conditional syntax) to keep pseudocode concise, high-level, and accurate.
- Prefer one-line control statements (e.g., `while cond: action`, `if cond: action`) where clarity is preserved; otherwise, indent minimally for logical blocks only (loops, conditionals, nested functions).
- Use exact input variable and parameter names consistently without introducing new identifiers or assuming extra data types beyond those in the problem description.
- Number all lines sequentially from 1 with no blank lines, separator lines, trailing comments, or explanatory text—output only pseudocode.
- Use succinct expressions with unambiguous standard abbreviations and natural wording.
- Include explicit return statements for all functions that return values.
- Represent class and function nesting exactly as given, using the format:  
  in class ClassName  
  in function functionName [with parameters as stated]
- Handle input/output exactly as implied or standard for the problem context.
- Ensure pseudocode can be generated within 5 seconds.

Example style to mimic:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A