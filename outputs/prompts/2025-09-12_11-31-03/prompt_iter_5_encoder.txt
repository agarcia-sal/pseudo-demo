Generate clear, readable, and compact pseudocode from the given problem description as follows:

- Preserve the exact original class names, method names, and their class/object hierarchy.
- Produce high-level, concise pseudocode using symbolic notation, abbreviations, and natural language phrasing for clarity.
- Favor one-liners where logical but do not sacrifice clarity; avoid unnecessary verbosity.
- Strictly follow a numbered line format without any separator lines or extra text.
- Do not include any comments, explanations, summaries, or notes—output pseudocode only.
- Output pseudocode must reflect a correct logic outline that can be implemented directly.
- Use consistent variable naming as in the original code.
- Use indentation only to show block structure (e.g., inside loops or conditionals).
- Format control structures as in this style:

1. x ← 0  
2. while x < n: x++  
3. if condition: do_action

- The entire pseudocode should be generated within a 5-second runtime limit.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers size n  
read A elements  
for i from 0 to n-1  
 set min_i to i  
 for j from i+1 to n-1  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print A elements