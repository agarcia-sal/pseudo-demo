Translate the given pseudocode into clean, idiomatic, fully functional Python code that faithfully preserves all class names, function names, method signatures, parameters (including `self` and `cls`), and their nesting as specified in the pseudocode, following these strict guidelines to maximize correctness, usability, and compatibility:

```markdown
- Output exactly one complete Python code block starting with ```python and ending with ```.
- Keep all class and method/function names exactly as in the pseudocode, including parameters and their order. Do not rename or reorder them in any way.
- Implement the logic exactly as described in the pseudocode without adding or removing functionality.
- Do not add any calls to print, input, or any testing code.
- Do not include debugging statements or comments.
- Do not create or assume any helper functions, global variables, or classes beyond those explicitly defined or strictly necessary to support the pseudocode logic.
- For missing standard data structures referenced or implied by the pseudocode (e.g., `TreeNode`, `ListNode`):
  - Define minimal standard Python classes with only the essential attributes given by the pseudocode (e.g., `TreeNode` with `.val`, `.left`, `.right`; `ListNode` with `.val`, `.next`).
  - Do not include utility methods, construction helpers, or example builders.
- Do not assume or implement any input converters from lists or other literals to complex data structures like trees or linked lists—assume inputs are already valid Python objects as implied by the pseudocode (e.g., no use of `null` or other undefined symbols).
- Do not redefine or alias Python built-in constants or types (i.e., do not define `null`, `None`, etc.).
- Use only standard Python libraries and place all necessary import statements at the very top of the block.
- Translate pseudocode operators and keywords properly into Python syntax (e.g., `XOR` → `^`).
- Maintain exact variable names and loop structures as stated.
- Ensure the solution is performant and runs within 5 seconds on typical inputs.
- Return only the Python implementation, no explanations or extra text.

Here is the pseudocode to implement:
```
