Translate the given pseudocode into clear, idiomatic, efficient, and fully functional Python code while strictly preserving all class names, function names, method signatures, and their nesting as provided in the pseudocode. Follow these enhanced instructions precisely:

- Enclose your entire Python implementation in a single fenced code block with triple backticks and the language tag `python`:

  ```python
  ...
  ```

- Include at the top all necessary import statements. Use only Python standard libraries or external packages explicitly mentioned or clearly allowed by the pseudocode context.

- Your output must be a complete, standalone Python implementation that faithfully mirrors the pseudocode behavior:

  - Do not add input/output code (no `print`, `input`, or similar).
  
  - Exclude unit tests, main guards, or any testing scaffolding.
  
  - Avoid adding debugging or logging statements.

- For data structures such as trees or linked lists:

  - If class definitions are specified in the pseudocode, implement them exactly as given (including attributes and constructor signatures).
  
  - If no such class definitions are provided but are required to implement the pseudocode, define minimal canonical Python classes consistent with common practice (e.g., `TreeNode` with `val`, `left`, `right`; `ListNode` with `val`, `next`), with no extra methods, attributes, or helpers.
  
  - Do not write functions or code for converting input lists to nodes or vice versa; assume all inputs are valid preconstructed instances matching the pseudocode’s expected types.

- Preserve identifiers exactly as in the pseudocode, including variable names, method parameters, and usage of `self` / `cls` (do not rename, reorder, or refactor unless pseudocode explicitly commands it).

- Use Pythonic idioms and efficient constructs to maintain clarity and performance, keeping runtime within 5 seconds. Carefully translate all pseudocode operators to their correct Python equivalents (e.g., `XOR` → `^`, `null` → `None`).

- Handle all logical edge cases naturally implied by the pseudocode. Do not insert explicit input validations or conversions beyond what the pseudocode indicates or requires.

- Avoid defining global variables, extra helper classes, or any code not clearly required or implied by the pseudocode.

- Do not simulate or parse raw inputs; rely exclusively on the assumption that input parameters are correctly instantiated objects or primitives consistent with pseudocode requirements.

Here is the pseudocode to implement: