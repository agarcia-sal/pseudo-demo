Generate clear, easy-to-read, and concise pseudocode from the given problem description, strictly following these rules:

- Use the exact class names, function names, parameter names, and nesting structure as in the original code.
- Write primarily in natural language with minimal symbolic notation; keep wording high-level, precise, and compact.
- Represent data structures explicitly and naturally (e.g., “let A be vector of integers”); specify sizes only if given or essential.
- Maintain consistent variable and parameter names exactly as in the source.
- Use indentation solely to mark logical blocks (loops, conditionals, nested functions). Avoid unnecessary indentation.
- Prefer single-line control statements using symbols (e.g., ← for assignment, for loops, if conditions) when clarity is preserved; otherwise, break into a few minimal indented lines.
- Number all lines from 1 sequentially with no gaps, separators, trailing comments, or explanatory notes.
- Include explicit “return” statements for returning functions.
- Use standard abbreviations and succinct expressions that avoid ambiguity.
- Reflect exactly the original class and function nesting with the format:

  in class ClassName  
  in function functionName with parameter param1 as Type, param2 as Type

- Do not invent or assume any data types, helper functions, or constructs not in the original problem.
- Handle input/output as naturally implied or usual for the problem context.
- Produce the pseudocode fully within 5 seconds.

Example format:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i = 0 to size of A exclusive  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A