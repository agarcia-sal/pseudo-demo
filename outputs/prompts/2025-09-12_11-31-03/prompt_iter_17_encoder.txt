Generate concise, clear, and natural-language-heavy pseudocode directly from the given problem description, observing these rules exactly:

- Preserve all original class names and nesting, functions/method names, parameter names, and variable names verbatim and consistently.
- Structure pseudocode with minimal indentation, only to delimit loops, conditionals, or nested functions/classes.
- Use compact symbolic notations for assignment (←), arithmetic, logical operators, and control flow (for, while, if) in one line wherever clarity is maintained; otherwise use minimal lines.
- Express data structures in natural language with types (e.g., “let nums be vector of integers”) and sizes only if explicitly specified or necessary.
- Use abbreviations and succinct expressions standard in pseudocode, avoiding ambiguity.
- For control flows, prefer one-line statements formatted as:  
  1. x ← 0  
  2. while x < n: x++  
  3. if cond: do_action  
- Number lines sequentially from 1, no blank or separator lines, no trailing comments or extra notes.
- Include explicit “return” statements where applicable.
- Reflect class and method or function nesting exactly as in the source, using:  
  in class ClassName  
  in function functionName  
- Do not invent or add new data types, structures, variables, or code beyond those stated or implied by the problem description.
- Model input and output instructions precisely as the problem implies or standard for coding problems.
- The output must be the pseudocode only, with no explanations, commentary, or summaries.
- Ensure pseudocode generation can complete within 5 seconds.

Example style to model:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A