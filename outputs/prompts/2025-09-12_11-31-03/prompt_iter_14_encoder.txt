Generate compact, clear, and readable pseudocode directly from the given problem description, following these rules precisely:

- Preserve all original class names, function/method names, parameter names, and nesting exactly as in the source.
- Use predominantly natural language with minimal symbolic notation; keep phrasing high-level and concise but accurate.
- Use natural and explicit representations of data structures (e.g., “let A be vector of integers”); include sizes only if explicitly stated or necessary.
- Use the exact variable and parameter names as given, consistently throughout.
- Use indentation only to show logical blocks (loops, conditionals, nested functions); avoid all unnecessary indentation.
- Prefer concise one-line control statements with symbolic forms (e.g., ← for assignment, for loops and if conditions in one line) whenever clarity is maintained; otherwise, break into minimal lines indented as needed.
- Number lines sequentially from 1, no extra blank or separator lines, no trailing comments, no explanations or notes—output only pseudocode.
- Use succinct expressions and standard abbreviations, avoiding ambiguity.
- For assignments and control statements, follow this pattern:  

  1. x ← 0  
  2. while x < n: x++  
  3. if cond: do_action
- Include explicit “return” lines for functions that return values.
- Reflect class and method nesting exactly as in the original code using the format:  

  in class ClassName  
  in function functionName
- Do not create or assume any extra data types or external constructs not present or defined in the input problem.
- Handle input/output statements exactly as implied or standard for the problem context.
- Ensure the pseudocode can be generated within 5 seconds.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A