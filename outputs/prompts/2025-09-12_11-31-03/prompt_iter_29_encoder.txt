Generate concise, clear, and natural-language pseudocode directly from the given problem description, observing these rules exactly:

- Preserve all original class names, function names, method names, and parameter names exactly and consistently, matching the input structure including nesting (e.g., "in class ClassName", "in function functionName").
- Write pseudocode in a compact, high-level style using predominantly natural language; expressions should be brief but precise.
- Use standard symbolic notation only for assignment (←), loops, and conditionals; prefer one-line control statements when clarity and correctness allow (e.g., `while cond: action`).
- Represent data structures explicitly and clearly (e.g., “let A be vector of integers”, “let node be TreeNode or null”), including sizes only if stated or strictly necessary.
- Use indentation solely for logical blocks inside loops, conditionals, or nested functions; avoid extra or unnecessary indentation.
- Use exact variable, parameter, and function names as given—no renaming, no invented identifiers.
- No separator lines, blank lines, comments, explanations, or extra notes—only the pseudocode itself.
- Number lines sequentially from 1, no trailing comments.
- Write return statements explicitly where functions return values.
- Do not create or assume any external or additional data types, variables, or input/output constructs not present in the original problem.
- Handle input/output exactly as implied or standard to the problem.
- Output pseudocode that is easy to read, compact, and runnable within 5 seconds.

Example style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i = 0 to size of A exclusive  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A