Generate concise, clear, and easy-to-read pseudocode directly from the given problem description, following these rules exactly:

- Retain all original class names, function/method names, parameter names, and nesting precisely as in the source code, reflecting their exact structure and hierarchy.
- Use primarily natural language with minimal symbols; express algorithms in compact, natural, high-level terms that preserve correctness and clarity.
- Represent data structures naturally (e.g., “let A be vector of integers”); include sizes only if explicitly given or necessary for understanding.
- Maintain consistent variable and parameter names exactly as in the original code; do not rename or invent variables.
- Format logical blocks with indentation (loops, conditionals, nested functions), but minimize indentation depth. Prefer concise one-liner control statements where it does not reduce clarity.
- Use succinct symbolic forms for assignments and control structures as shown below:

1. x ← 0  
2. while x < n: x++  
3. if cond: do_action

- Number lines sequentially from 1; do not add separator lines or trailing comments.
- Exclude explanations, purpose statements, summaries, notes, or comments. Output only the pseudocode.
- When a function returns a value, include an explicit final “return” line.
- Avoid referencing any unresolved types or external constructs; assume inputs and context match the original.
- Prefer clear, unambiguous abbreviations and expressions that balance succinctness with readability.
- Complete within 5 seconds.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A