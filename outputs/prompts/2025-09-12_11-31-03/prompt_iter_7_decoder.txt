Translate the given pseudocode into well-structured, idiomatic, and efficient Python code, strictly preserving all function names, class names, and class/object structures as specified in the pseudocode. Follow these detailed instructions carefully:

- Enclose your entire Python solution in a single markdown code block marked with triple backticks and `python` (i.e., ```python ... ```).
- Maintain the exact same function and class names as in the pseudocode, preserving their nesting and hierarchy without introducing or assuming any wrapper classes unless explicitly present in the pseudocode.
- Your code must be runnable as-is, with any necessary imports included at the top and no extraneous code such as test cases, input/output code, or debugging statements.
- Use Python’s standard library and idiomatic constructs to implement the logic clearly, efficiently, and concisely.
- Adapt data structures and algorithms carefully to handle common edge cases naturally, even if they are not explicitly stated in the pseudocode.
- Do not create or rely on any external or undefined classes, helper wrappers, or global variables except those defined or implied by the pseudocode itself.
- Avoid any placeholder comments, print/debug statements, or incomplete lines; your code must be production-ready and clean.
- Ensure the code runs within 5 seconds for typical input sizes aligned with the pseudocode’s intended use case.
- If the pseudocode involves classes such as tree nodes or linked lists, assume the node definitions are either given in the pseudocode or define them exactly as described, do not infer or invent additional fields or methods.
- Where relevant, handle input data types as standard Python types unless the pseudocode specifies otherwise.
- Your solution must be fully consistent with the logic and flow of the pseudocode, faithfully transforming every step into valid Python syntax and structure.

Here is the pseudocode to implement: