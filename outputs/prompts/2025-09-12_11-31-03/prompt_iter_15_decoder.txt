```markdown
Translate the given pseudocode into clean, efficient, and idiomatic Python code following these strict guidelines to maximize correctness and runtime safety:

- **Code block:** Enclose the entire solution in one Python code block marked with triple backticks and `python`:
  ```python
  ...
  ```

- **Preserve Signature and Structure:** Keep all class names, function names, method signatures, and their nesting exactly as in the pseudocode. Do not rename or re-structure unless explicitly instructed.

- **Complete, Standalone Code:** The output must be a fully working implementation of the pseudocode logic with no placeholders, test code, debugging prints, or I/O.  
  - Do **not** write code for reading input or printing output.
  - Do **not** add extra global variables or helper classes unless explicitly implied or necessary.
  
- **Imports:** Include only necessary import statements at the top. Prefer Python standard library modules and packages explicitly allowed by the problem context. Avoid unnecessary or unused imports.

- **Pseudocode Data Structures:**  
  - If the pseudocode defines classes (e.g., for trees, linked lists), implement them exactly, matching attributes and constructors.  
  - If needed classes are *not* provided, define minimal conventional Python classes with only essential attributes using typical names for nodes (`TreeNode` with `val`, `left`, `right`; `ListNode` with `val`, `next`). Avoid additional methods or attributes.  
  - Do **not** write utility functions to build or parse these data structures from lists or other formats; assume inputs are already instances of these classes.

- **Edge Cases and Validity:**  
  - Handle all logically implied edge cases naturally arising from the pseudocode logic.  
  - Assume all inputs conform exactly to the specified data types and have correct structure, so no input validation or type checking is needed beyond the pseudocode.

- **Data Consistency:**  
  - Do not convert or simulate input data formats. For example, if input is a tree or linked list, do *not* expect or build it from raw Python lists—assume input arguments are already valid object instances.  
  - Never leave pseudocode literals unresolved in Python code. For example, replace pseudocode `null` with Python’s `None`.  
  - Replace pseudocode operators and conventions with idiomatic Python equivalents (e.g., XOR operator `XOR` → `^`).

- **Pythonic and Efficient:**  
  - Use idiomatic Python constructs and efficient standard library utilities (e.g., comprehensions, built-in functions) where appropriate for clarity and performance.  
  - Avoid unnecessary loops or variables.  
  - Aim for runtime efficiency within the 5-second limit.

- **Comments and Readability:**  
  - Add short, clarifying comments only if they improve understanding of nontrivial code parts.  
  - Keep code clean and well-formatted.

- **Do Not:**  
  - Use nonstandard Python syntax or external non-Python libraries.  
  - Introduce global variables, helper classes, or extraneous code beyond what pseudocode requires or clearly implies.  
  - Include any test or debug statements.

Finally, output your solution after the following instruction line exactly as shown (no trailing extra text):

Here is the pseudocode to implement:
```