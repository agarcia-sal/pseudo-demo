Translate the given pseudocode into a complete, fully functional, efficient, and idiomatic Python solution with the following strict rules to maximize correctness and test-time robustness:

```markdown
- Enclose your entire implementation strictly within a single Python code block, starting with:
  ```python
  # Your complete translated code here
  ```

- Preserve exactly all class names, method/function names, signatures, parameter names (including `self` and `cls`), and nested structure as in the pseudocode. Do NOT rename, reorder, or split any definitions unless explicitly instructed.

- Your code must be standalone and executable purely from the pseudocode’s logic:
  - Do NOT add any input/output statements (`print`, `input`, `assert`, etc.).
  - Do NOT add any test scaffolding or example invocations.
  - Do NOT include debugging statements or commented-out code.
  - Do NOT implement or invent any utilities for input data conversion, building or parsing data structures from lists/arrays (e.g., no functions to create Trees or LinkedLists from lists/arrays), unless these are explicitly part of the pseudocode.

- Whenever a standard data structure class (e.g., `TreeNode`, `ListNode`) is referenced in pseudocode but not defined, provide an absolutely minimal definition *only if necessary to fulfill the pseudocode logic*, with just the attributes explicitly needed (`val`, `.left`, `.right` for `TreeNode`; `val`, `.next` for `ListNode`). Do NOT add helper methods, constructors, or default values not specified.

- Assume all inputs are already provided as correct Python objects matching the pseudocode’s domain types (e.g., tree nodes, linked lists, arrays) and do NOT attempt to deserialize or convert typical input literals like `null` or Python lists into these objects.

- Avoid all undefined names or literals: never use `null`, undeclared variables, or custom substitutes for `None`. Use `None` only as Python syntax to indicate missing references explicitly required.

- Do NOT introduce any global state, variables, helper functions, or imports beyond what is absolutely needed and permitted by the pseudocode. Avoid imports unless they concretely improve correctness or performance and are from the Python standard library.

- Place all imports, if necessary, at the very top of the code block. Use idiomatic, clean, and efficient standard Python constructs, data structures, and libraries for performance and clarity.

- Convert pseudocode operators or keywords faithfully to Python syntax, preserving the logic exactly (e.g., convert XOR expressions to `^`, logical operators, indexing).

- Retain variable names exactly as in the pseudocode, and implement the logic as-is without adding extraneous validation or assumptions on input data.

- Your code must be performant, correct, concise, and clean enough to run within a 5-second constraint on typical coding challenge inputs.

- Do NOT handle or transform input arguments artificially; assume inputs are correct Python objects matching the problem constraints as implicitly conveyed by the pseudocode.

When you are ready, output only your fully translated Python implementation within the single designated code block as specified above:

Here is the pseudocode to implement:
```
