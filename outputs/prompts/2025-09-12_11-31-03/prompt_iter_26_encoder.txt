Generate clear, concise, and readable pseudocode from the given problem description, adhering strictly to these rules:

- Maintain all original class names, function/method names, parameters, and nesting exactly as in the input.
- Use mostly natural language, minimizing symbols; keep pseudocode high-level, compact, and precise.
- Represent data structures explicitly but naturally (e.g., “let A be vector of integers”); include sizes only if explicitly given or necessary.
- Use exact variable and parameter names consistently throughout.
- Show logical blocks (loops, conditionals, nested functions) with minimal indentation; avoid unnecessary indentation.
- Prefer concise one-line control statements with symbolic notation when clarity allows (e.g., ← for assignment; for, while, if with inline bodies); otherwise use minimal lines with indent.
- Number lines consecutively from 1 with no blank or separator lines; do not add comments, explanations, or extra text—output only pseudocode.
- Use succinct expressions and standard abbreviations without ambiguity.
- Include explicit return statements for functions that return values.
- Reflect original class and function nesting precisely, using the format:

  in class ClassName  
  in function functionName [with parameters as in original]

- Do not invent or assume any types, structures, or inputs not mentioned or evident from the problem.
- Follow input/output handling exactly as implied or standard for the problem.
- Output pseudocode that can be generated within 5 seconds.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A