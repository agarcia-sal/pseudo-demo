Translate the given pseudocode into a fully functional, clean, and idiomatic Python implementation, strictly preserving all function and class names, and their nesting/structure as specified. Your translation must meet the following detailed requirements:

- Output your entire Python solution inside a single, properly formatted code block:
  ```python
  ...
  ```

- Keep all class and function names exactly as in the pseudocode, with the same signatures, parameters, and use of `self` or `cls`.

- Implement a complete, standalone solution encoding all pseudocode logic, but **do not** include any input/output code (`print`, `input`, etc.), testing scaffolding, or debugging statements.

- Include all necessary import statements **at the very top** using Python standard libraries or explicitly allowed packages. Use the most appropriate imports to enhance clarity and efficiency.

- When pseudocode involves data structures (e.g., trees, linked lists):
  - If class definitions are present, implement them exactly as described.
  - If class definitions are missing but required:
    - Define minimal, conventional Python class definitions consistent with widespread naming conventions (`TreeNode` with `val`, `left`, `right`; `ListNode` with `val`, `next`).
    - Do not add extraneous methods, attributes, or helper code.
  - **Never** attempt to parse or convert input arguments from raw lists or arrays to objects; assume inputs are already instantiated properly as the pseudocode context implies.

- Retain all variable names, operators, and control structures faithfully to the pseudocode, converting pseudocode operators (e.g. `XOR`) and literals (e.g., `null`) into their correct Python equivalents (`^` for XOR, `None` for null, etc.).

- Handle all implied edge cases naturally and efficiently, without added validation or conversions unless explicitly stated.

- Avoid global variables, helper classes, or any code beyond what is explicitly required or clearly implied by the pseudocode.

- Your code must be optimal in clarity, correctness, and runtime efficiency, leveraging Pythonic idioms and built-in utilities where appropriate.

- Do not simulate or build input objects from raw data; trust that all input arguments to methods are passed as correctly formed instances or primitives.

- Ensure the solution is robust and directly runnable without modifications in a typical coding platform or test environment.

Here is the pseudocode to implement: