Generate concise, clear, and compact pseudocode directly from the given problem description, observing these rules:

- Preserve all original class names, function/method names, parameter names, and nesting exactly as in the source.
- Use primarily natural language with minimal symbolic notation; prefer short, high-level phrasing while maintaining correctness and clarity.
- Represent data structures naturally (e.g., “let A be vector of integers”); include sizes only if explicitly stated or necessary.
- Use consistent variable and parameter names exactly as in the original code.
- Indent only to indicate logical blocks (loops, conditionals, nested functions); avoid unnecessary indentation.
- Prefer concise one-liner control statements when clarity is preserved; otherwise, break into minimal indented lines.
- Number lines sequentially from 1; no extra separator lines or trailing comments.
- Do not add explanations, comments, summaries, or notes—output only pseudocode.
- Use succinct expressions and common abbreviations without causing ambiguity.
- Use symbolic forms for assignments and control statements as in this pattern:

1. x ← 0  
2. while x < n: x++  
3. if cond: do_action

- If a function returns a value, include an explicit final “return” line.
- Do not reference unresolved data types or external constructs; assume inputs match the code context.
- Complete output generation within 5 seconds.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A