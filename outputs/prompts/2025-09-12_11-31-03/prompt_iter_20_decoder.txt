Translate the provided pseudocode into a fully functional, clean, and idiomatic Python implementation following these enhanced, comprehensive instructions:

```plaintext
1. Output your entire solution only, enclosed within a single Python code block:
```python
# your code here
```

2. Preserve **all** class names, function names, method signatures (including `self`, `cls`), argument names, and nesting exactly as given in the pseudocode.  
   Do not rename, reorder, or restructure them unless explicitly stated.

3. Your code must be **standalone and complete**, strictly adhering to the pseudocode logic:  
   - **Do NOT include** any I/O operations (`print`, `input`), example/test code, debug prints, commented code, or placeholders.  
   - Avoid defining any extra helper functions, classes, or global variables unless they are clearly implied or required by the pseudocode.  
   - Do NOT write utilities to build data structures (e.g., tree or linked list constructors) from literals unless explicitly specified.

4. Handle **data structure definitions** precisely:  
   - If the pseudocode uses standard structures (like binary trees, linked lists) but their classes are missing, define minimal, conventional Python classes:  
     - For binary trees: `TreeNode` with attributes `val`, `left`, `right`  
     - For linked lists: `ListNode` with attributes `val`, `next`  
   - Do NOT add extra methods, attributes, or utilities beyond what is strictly necessary.

5. Imports:  
   - Import **only standard Python libraries or explicitly allowed external packages**.  
   - Place all imports at the very start of the code block.  
   - Use idiomatic Python library features to ensure correctness, clarity, and efficiency.

6. Accurately and explicitly translate pseudocode statements:  
   - Use exact Python syntax equivalents (e.g., convert `xor` to `^`, no use of undefined literals like `null`; prefer `None` where appropriate).  
   - Preserve variable names exactly as given; do not rename.  
   - Implement control flow and computations exactly as specified in the pseudocode.  
   - Include all necessary edge case logic only if implied by the pseudocode; don't add extraneous validation or conversions.

7. **Do not assume input transformation or type conversions:**  
   - Assume inputs are correctly typed and instantiated as implied by the pseudocode.  
   - Do NOT simulate or parse inputs from Python native literals (e.g., do not assume lists instead of trees or nodes).

8. Your solution must be optimized for correctness, clarity, and efficiency:  
   - Aim for runtime performance compatible with a 5-second or less timeout.  
   - Use efficient data structures and idioms without sacrificing readability.

9. Do not include separator lines, extra explanations, or comments unless they improve code clarity and are relevant.

10. Start your response strictly with the prompt phrase below and your code follows after the marker "Here is the pseudocode to implement:" and the pseudocode input.

---

**Prompt to translate any generic pseudocode to correct Python code:**

Translate the following pseudocode into a clean, idiomatic, and fully functional Python implementation:

```python
# Your complete solution here
```

Ensure you keep all class definitions, function names, argument names, and code structure identical to the pseudocode.  
Define minimal standard data structures if needed.  
Import only standard or explicitly allowed libraries at the top.  
Do not include any input/output code, test code, or helper utilities for input construction unless stated.  
Handle all operators and keywords correctly in Python syntax.  
Do not assume undefined literals like `null`; use `None` as needed.  
Optimize for correct, efficient, and standalone code runnable within 5 seconds.
```