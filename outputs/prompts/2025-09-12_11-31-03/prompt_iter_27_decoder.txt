Translate the given pseudocode into a fully functional, clean, and efficient Python implementation by strictly following these instructions to maximize correctness, fidelity, and performance within a 5-second runtime:

```markdown
- Enclose your entire implementation within a single Python code block tagged as ```python```.

- Maintain exact class names, function/method names, parameters (including `self`, `cls`), nesting, and signatures from the pseudocode without renaming or restructuring.

- Your code must be standalone, fully functional, and faithful to the pseudocode logic:
  - Do **not** add any print statements, input reading, example calls, or testing scaffolds.
  - Do **not** insert debug prints, explanatory comments, or placeholders.
  - Only implement auxiliary data structures or helper classes if the pseudocode implicitly requires them and only to the minimal extent necessary (e.g., `TreeNode` with `.val, .left, .right`; `ListNode` with `.val, .next`).
  - Do **not** add convenience constructors, conversion utilities, or elaborate input builders like tree/linked list constructors.
  
- Do **not** assume or convert input parameters (e.g., do not treat them as raw Python primitives or generic collections unless explicitly stated by the pseudocode). Assume inputs are provided in the exact appropriate Python objects as implied (e.g., trees as `TreeNode` objects, linked lists as `ListNode` objects, arrays as Python lists).

- Do **not** use undefined or unsupported literals (`null`, `None` replacements, or undeclared identifiers). Use standard Python values only (`None` where applicable).

- Avoid introducing any global variables, extraneous classes, global helper functions, or imports beyond what is strictly necessary for correctness and efficiency.

- Place all import statements, if any, at the very top of the code block.

- You may use any standard Python libraries or external packages if permitted, but aim for idiomatic, concise, and efficient Python.

- Translate pseudocode operators and keywords precisely (e.g., pseudocode `XOR` â†’ Python `^`).

- Retain all variable names and control flow exactly as in the pseudocode.

- Handle all edge cases implicit in the pseudocode logic without adding extra validation or input transformation.

- Prioritize clarity, performance, and correctness, ensuring the entire implementation executes within 5 seconds.

When ready, begin your Python code block and output only the code that implements the given pseudocode following these rules:

Here is the pseudocode to implement:
```
