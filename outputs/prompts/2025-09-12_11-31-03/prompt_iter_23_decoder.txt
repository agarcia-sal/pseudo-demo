Translate the provided pseudocode into a complete, clean, and efficient Python implementation following these enhanced directives to ensure correctness, usability, and compatibility:

```markdown
- Enclose your entire solution within a single, self-contained Python code block:
  ```python
  # Your implementation here
  ```

- Preserve all class names, method names, function signatures, parameters (including `self` and `cls`), and nesting exactly as given in the pseudocode. Do not rename or rearrange unless explicitly instructed.

- Your code must be fully functional and standalone in logic relative to the pseudocode:
  - Do **not** add `print`, `input` statements, example calls, or testing scaffolds.
  - Do **not** include debug prints, comments, or placeholder code.
  - Do **not** write any input or data structure conversion utilities not explicitly required by the pseudocode.

- For any required standard data structure classes (e.g., trees, linked lists) missing in the pseudocode:
  - Define minimal standard implementations **only if and exactly as needed to support the logic** (e.g., `TreeNode` with `.val`, `.left`, `.right`; `ListNode` with `.val` and `.next`).
  - Do **not** include extra methods or attributes.
  - Do **not** implement any convenience constructors or helpers (for example, building a tree or linked list from list literals) unless explicitly stated.

- Do **not** rely on or define any undefined literals or variables such as `null`, `None` replacements, or undeclared variables.
  - Assume input arguments are already correct Python objects corresponding to the pseudocode's implied inputs.

- Do **not** introduce any global variables, helper functions, classes, or imports beyond what is described or essential for correctness.

- Imports:
  - Use only standard Python libraries or explicitly permitted external packages.
  - Place all `import` statements at the very top of the code block.
  - Favor idiomatic, clean, and efficient Python constructs and libraries.

- Translate pseudocode statements faithfully, converting pseudocode-specific keywords or operators (e.g., `XOR` â†’ `^`) into Python syntax.
- Retain variable names and logic exactly as given.
- Handle all logical edge cases inherent in the pseudocode **but do not add extraneous validation or conversion**.

- To avoid common input misinterpretation errors:
  - Do **not** treat or convert input arguments as Python primitives or standard collections unless the pseudocode explicitly describes them that way.
  - Assume inputs are already the correct Python objects (e.g., linked lists, trees, arrays) as per the problem's domain.

- Optimize your code for clarity, correctness, and performance so it runs within 5 seconds.

When ready, begin your Python code block and provide only the code implementing the pseudocode following these rules:

Here is the pseudocode to implement:
```

This prompt explicitly prevents assumptions about input types, disallows implementing input builders or converters, removes example/test code, and stresses strict fidelity to pseudocode naming and structure. It also curtails undefined symbols like `null` and prioritizes idiomatic, minimal implementations only where absolutely necessary, reducing common error sources from previous prompt versions.