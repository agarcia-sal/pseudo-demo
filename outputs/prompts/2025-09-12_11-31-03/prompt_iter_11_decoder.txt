Translate the provided pseudocode into clean, idiomatic, and efficient Python code. Your code must strictly preserve all original function names, class names, and their nesting as indicated in the pseudocode without renaming or restructuring, unless explicitly instructed. Follow these detailed instructions:

- Enclose the entire Python solution inside a single code block marked with triple backticks and `python`:
  ```python
  ...
  ```

- Include all necessary import statements at the very top, using only Python standard libraries or any packages explicitly allowed by the pseudocode context.

- Your code must be a complete, standalone implementation of the pseudocode logic:
  - No input/output handling (e.g., no `print`, no `input`).
  - No testing code or placeholders.
  - No debugging statements or extraneous code beyond the direct pseudocode translation.

- When the pseudocode involves data structures such as trees or linked lists:
  - If class definitions are provided, implement them exactly as specified.
  - If not provided but required, define minimal, conventional Python class definitions consistent with common usage (e.g., `TreeNode` with `val`, `left`, `right`; `ListNode` with `val`, `next`), without adding extra methods or attributes.
  - Do not write helper functions to build or convert input formats from raw lists—assume inputs are given as instances of these classes as required.

- Preserve method signatures exactly, including argument names and use of `self` or `cls` where appropriate.

- Favor Pythonic idioms and efficient standard library utilities to ensure clarity, correctness, and runtime efficiency (within the given 5-second time constraint).

- Handle all logically implied edge cases naturally arising from the pseudocode, even if not explicitly stated.

- Do not introduce global variables, helper classes, or any code not explicitly required or clearly implied by the pseudocode.

- Assume all inputs conform to the expected types and structures; do not add input validation or type conversions beyond what the pseudocode indicates.

- Translate every step of the pseudocode faithfully into correct Python syntax and logic, maintaining variable names as they appear unless they contradict Python conventions (e.g., replace pseudocode operators like `XOR` with `^`).

- Avoid using ambiguous literals (e.g., `null`), and do not simulate input object construction—assume input parameters are already instantiated objects or primitives as implied.

Here is the pseudocode to implement: