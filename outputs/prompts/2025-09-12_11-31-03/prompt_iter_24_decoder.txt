Translate the provided pseudocode into an accurate, efficient, and fully functional Python implementation strictly adhering to the following enhanced instructions, designed to maximize correctness, execution reliability, and seamless integration with external testing environments:

```markdown
- Enclose the entire implementation within a single Python code block:
  ```python
  # Your full implementation here
  ```

- Maintain all class names, function/method names, parameters (including `self` and `cls` if present), and nesting exactly as in the pseudocode without renaming, reordering, or restructuring unless explicitly instructed.

- Your implementation must be **standalone, ready-to-run Python code** faithful to the pseudocode's logic:
  - **Do NOT include**:
    - any `print`, `input`, or test example invocations,
    - any debugging statements or placeholder comments,
    - any input parsing, construction, or conversion logic *not explicitly specified* in the pseudocode.
  - Assume all inputs to functions are the correct Python objects/types implicitly described by the pseudocode. Do *not* transform or wrap inputs.
  - Do *not* use or define any undefined terms such as `null`, `None` replacements, undeclared globals, or otherwise implicit variables.

- When the pseudocode implies standard data structures (like trees or linked lists) but does not provide class definitions:
  - Define minimal, canonical Python classes **only when needed** to implement the logic (e.g., `TreeNode` with `.val`, `.left`, `.right`; `ListNode` with `.val`, `.next`).
  - Do *not* add any helper methods, convenience constructors, or unrelated fields.
  - Do *not* include code for building or serializing data structures from list literals or other shortcuts not required explicitly.

- Use only the Python Standard Library, importing modules at the very top of the code block and only if necessary for correctness or efficiency.

- Implement the pseudocode statements and operators verbatim, translating pseudocode operators into idiomatic Python equivalents (e.g., `XOR` â†’ `^`).

- Retain all variable names and control flow exactly as given.

- Your solution must explicitly avoid global variables or helpers beyond those strictly necessary for class/function definitions.

- Optimize for clarity, maintainability, correctness, and runtime efficiency. The solution must execute correctly within 5 seconds on typical test inputs.

- Your final output should contain **only** the Python code block, nothing else.

- Begin outputting directly with the Python code block when ready.

Here is the pseudocode to implement:
```

This prompt explicitly prevents assumptions about input types or formats, forbids input building code (fixing common input-related errors), disallows any debug or example code, and insists on minimal, standard data structure definitions only as needed, improving on earlier approaches that caused `AttributeError` or `NameError`. It enforces faithful pseudocode translation and standardized imports at the top to reduce runtime failures. This comprehensive, strict instruction set maximizes correct, testable code generation while keeping the prompt general and adaptable for all problems.