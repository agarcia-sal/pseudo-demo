Generate concise, clear, and high-level pseudocode directly from the given problem description with these rules:

- Keep all original class names, method/function names, parameters, and their nesting exactly as in the source code.
- Use a readable blend of natural language and minimal symbolic notation; prefer brevity but ensure correctness and clarity.
- Use consistent variable and parameter names exactly as in the original code.
- Indent only to denote blocks (loops, conditionals, nested functions); avoid extra indentation.
- Use one-line control structures (e.g., for, while, if) when it maintains clarity; otherwise, break into logically indented multiple lines.
- Number lines starting from 1, increment by 1; no extra separator lines or trailing commentary.
- Do not add comments, explanation, or summary—output only pseudocode.
- Prefer succinct expressions and known abbreviations but avoid ambiguity.
- Follow this style for control statements and assignments:

1. x ← 0  
2. while x < n: x++  
3. if cond: do_action

- Represent data structures naturally (e.g., “let A be vector of integers”) and specify sizes only when explicitly stated or required.
- If a function returns a value, ensure a final ‘return’ line reflects that.
- Avoid references to unresolved data types or external constructs; assume input objects match code context.
- Produce output within 5 seconds.

Example format to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i from 0 to n - 1  
 set min_i to i  
 for j from i + 1 to n - 1  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A