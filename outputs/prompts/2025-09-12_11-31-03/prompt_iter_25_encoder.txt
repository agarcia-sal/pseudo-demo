Generate compact, clear, and easy-to-read pseudocode from the given problem description, adhering strictly to these rules:

- Preserve all original class names, function/method names, parameter names, and nesting exactly as given.
- Use mostly natural language with minimal symbolic notation, keeping the style high-level, concise, and precise.
- Define data structures naturally (e.g., “let A be vector of integers”), including sizes only if explicitly stated or necessary.
- Use exact variable and parameter names consistently throughout.
- Use indentation only to show logical blocks (loops, conditionals, nested functions); avoid all other unnecessary indentation.
- Prefer concise one-line control statements with symbolic forms (← for assignment, for loops and if conditions on one line) when clarity is maintained; otherwise, break into minimum necessary indented lines.
- Number lines sequentially from 1, without blank lines, separators, comments, explanations, or notes—output only pseudocode.
- Use standard abbreviations and succinct expressions without ambiguity.
- For function returns, always use explicit “return” lines.
- Reflect class and method nesting exactly as in the original, using the format:
  
  in class ClassName  
  in function functionName with parameters [...]

- Do not invent or assume any extra data types, constructs, or imports not implied or defined in the source.
- Handle input/output exactly as implicitly required by the problem context.
- Follow this minimal example style exactly:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i = 0 to size of A exclusive  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A