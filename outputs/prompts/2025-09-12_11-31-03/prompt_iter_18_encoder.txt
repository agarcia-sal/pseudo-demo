Generate compact, clear, and easy-to-read pseudocode directly from the given problem description with these strict rules:

- Preserve all original class names, function/method names, parameter names, and nesting exactly as in the input; reflect class and function nesting as:  
  in class ClassName  
  in function functionName parameter1, parameter2, ...

- Use predominantly natural language with minimal, clear symbolic notation; keep statements high-level, concise, and accurate.

- Represent data structures naturally and explicitly (e.g., “let A be vector of integers”); specify sizes only if explicitly given or necessary.

- Use the exact original variable and parameter names consistently throughout; no renaming or adding new variables/types not in the input.

- Use indentation only for key logical blocks (loops, conditionals, nested functions); avoid all unnecessary or excessive indentation.

- Prefer concise one-line control statements using symbols (e.g., ← for assignment, for loops, if conditions) if clarity is maintained; otherwise, split into minimal indented lines as needed.

- Number all lines sequentially from 1, no blank or separator lines, no trailing comments, no explanatory notes or summaries—output only the pseudocode.

- For control statements, follow this pattern strictly:  
  1. x ← 0  
  2. while x < n: x++  
  3. if cond: do_action

- Always include explicit return statements for functions that return values.

- Handle input/output exactly as implied or standard for the problem context.

- Do not invent or assume any additional data types, structures, or external constructs beyond those clearly defined or implied in the input.

- Optimize for a balance of natural language fluency, concise line length, and preservation of original structure and naming.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A