Generate a compact, clear, and natural-language-rich pseudocode from the given problem description, preserving all original class names, function names, signatures, and object structures exactly as specified. Output only the pseudocode—no explanations, comments, or summaries. Use concise, mostly one-line statements combining natural language with symbolic notations and standard pseudocode keywords (e.g., SET, FOR, WHILE, IF, RETURN). Organize the steps as numbered lines (1., 2., 3., ...) and favor high-level abstractions that emphasize readability and brevity. Maintain the original class and method hierarchy precisely. Format control flow and assignments succinctly, for example:

1. x ← 0  
2. while x < n: x++

Avoid visual separators, extra spacing, or verbose phrasing. Strive for pseudocode that a skilled programmer can quickly understand and implement, balancing natural language expressiveness with concise symbolic notation. The output should fit within a 5-second generation budget, delivering the best balance of clarity, correctness, and compactness.