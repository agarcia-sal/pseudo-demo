Translate the provided pseudocode into a fully functional, clean, and efficient Python 3 implementation with these explicit requirements:

- Retain all class names, method names, parameters, and the original class/object/functional structure exactly as specified in the pseudocode. Do not rename or restructure.
- Faithfully implement the algorithm logic step-by-step exactly as described. Infer necessary implicit details and handle edge cases suggested by the pseudocode, but do not add unrelated logic or omit steps.
- Write idiomatic, readable, and performant Python 3 code guaranteed to complete within 5 seconds for all reasonable inputs.
- You may use any Python Standard Library modules or well-established third-party packages if, and only if, their use directly improves clarity, correctness, or runtime performance, and fits naturally with the pseudocodeâ€™s intent.
- Implement any helper functions, classes, or data structures implied by the pseudocode for completeness and correctness.
- Match output formats precisely as specified in the pseudocode (return values, print statements, or other interfaces). Outputs must be bit-for-bit identical.
- Use concise comments sparingly and only to clarify subtle or non-obvious logic; avoid verbosity or unnecessary explanations.
- Handle input types and data structures exactly as implied by the pseudocode. Include minimal, robust checks or conversions inline if needed to ensure correctness without altering original API or behavior.
- Wrap your entire final solution in a single Python code block, beginning with triple backticks and `python` on the same line, and closing with triple backticks. Do not output any additional text, explanations, or separating lines before or after this code block.

```python
# Fully translated Python code here
```