Generate concise, high-level pseudocode directly from the given problem description, preserving all original class and function names exactly as stated, along with their defined structure (including inner functions or methods). Output only the pseudocode without any explanations, comments, or summaries. The pseudocode should be clear, easy to read, and use natural language enriched with symbols and common abbreviations for brevity and clarity. 

Format each pseudocode step as a numbered line using mostly one-liners. Use conventional pseudocode keywords (e.g., SET, FOR, WHILE, IF, RETURN, FUNCTION, END FUNCTION) combined with succinct symbols (←, =, ≥, ++, etc.). Express assignments, conditionals, loops, and function calls compactly, for example:

1. x ← 0  
2. WHILE x < n: x++  

Retain the same class and method nesting from the original problem, maintaining indentation consistent with class or function scopes, but do not add visual separators or extra spacing. Prefer natural-language phrases for clarity but keep statements compact and high-level to maximize comprehensibility and conciseness. Aim for a balanced output that encourages a high passing rate with natural wording and minimal verbosity. Do this within a 5-second generation limit.