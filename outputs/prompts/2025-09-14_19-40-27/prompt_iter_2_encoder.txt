Generate concise, high-level pseudocode for the given problem description, preserving all original class and function names exactly as specified, including their class/object structure. Use natural language enriched with symbolic notations and abbreviations to enhance clarity while keeping the code compact and easy to read. Prefer one-liner statements where feasible without sacrificing readability. Do NOT include any explanations, summaries, comments, or overview statements—only pseudocode lines. Format each step as a numbered line, for example:

1. SET x TO 0  
2. WHILE x < n: x ← x + 1

Maintain consistent indentation to reflect code blocks (e.g., inside functions, loops, conditions). Avoid separator lines or extraneous formatting. Your output should be minimal yet expressive, balancing natural language and symbolic clarity within a 5-second generation timeout.

Example style for a function:

FUNCTION calc_average(nums)  
1.  SET total TO 0  
2.  FOR EACH num IN nums: total ← total + num  
3.  SET avg TO total DIVIDED BY LENGTH(nums)  
4.  RETURN avg  
END FUNCTION