Generate concise, clear, and high-level pseudocode for the given problem description, preserving **all class names, function names, and signatures exactly as stated**. Output only the pseudocode without comments, explanations, summaries, or notes. Structure code within the original class and method hierarchy, maintaining the exact class/method structure and names.

Use a compact style favoring **one-line statements** wherever possible, employing natural language with intuitive symbolic notations and common abbreviations to boost clarity and brevity. Format loops, conditionals, and assignments succinctly, for example:

```
1. x ← 0
2. while x < n: x++
```

Prefer conventional pseudocode keywords (e.g., SET, INCREMENT, DECREMENT, FOR, WHILE, IF, RETURN, FUNCTION) mixed with symbols (←, =, ≥, etc.). Keep line numbering ascending from 1, no extra vertical spacing or separator lines. Use consistent indentation for nested blocks but keep them minimal. Reflect all method parameters as in original.

The output must be comprehensive enough to allow direct implementation but avoid redundant verbosity—prioritize natural language fluency and conciseness simultaneously. Aim to deliver the best pseudocode within a 5-second runtime.