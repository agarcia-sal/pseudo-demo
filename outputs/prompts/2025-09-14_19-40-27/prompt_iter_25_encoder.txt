Generate clear, compact, and high-level pseudocode for the given problem description, preserving all class names and function signatures exactly as provided. Keep the original class and method structure without alteration. The pseudocode should be easy to read and understandable, using natural language enriched with concise symbolic notations and common abbreviations, favoring one-line statements whenever possible. Number each step sequentially (1., 2., 3., …) without any separator lines or extra whitespace. Use conventional pseudocode keywords (e.g., SET, FOR, WHILE, IF, RETURN, FUNCTION) combined with symbolic operators (←, =, ≠, <, ≤, >, ≥, +, -, *, /, %, etc.) for clarity and brevity. Do not include comments, explanations, summaries, or notes—output strictly the pseudocode instructions only. Follow this format exactly:

1. x ← 0  
2. WHILE x < n: x++  

If defining functions, use this style:

FUNCTION functionName(parameters)  
    [steps]  
END FUNCTION  

Ensure variable names, function names, class names, and method names remain identical to those in the original problem statement. Strive for concise lines using natural, descriptive language balanced with symbols, avoiding verbosity yet maintaining clarity and correctness. The entire output must be generated within a 5-second runtime limit.