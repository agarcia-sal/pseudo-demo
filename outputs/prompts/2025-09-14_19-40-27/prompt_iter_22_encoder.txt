Generate clear, compact, and high-level pseudocode for the given problem description that exactly preserves all class names and function signatures as stated. The pseudocode should be easy to read and use mostly natural language enriched with conventional pseudocode keywords (e.g., SET, IF, WHILE, FOR, RETURN) combined with symbolic notations and common abbreviations for clarity and brevity. Keep the original class and method structure unchanged.

Organize the pseudocode steps as numbered lines (1., 2., 3., ...), favoring concise one-liners whenever possible, including for loops and conditionals, to maintain compactness. Avoid adding any explanations, comments, summaries, or notes—output only the pseudocode instructions with no extra text or separators.

Format loops, conditionals, and assignments succinctly and consistently, for example:

1. x ← 0  
2. while x < n: x++  
3. if x = y: RETURN x

Use natural language phrases alongside symbols, such as “INCREMENT”, “DECREMENT”, “SET … TO …”, “FOR each … IN …”, “RETURN …”. When defining helper functions or nested methods, maintain their indentation or relative positioning. Maintain exact function and class names from the input. Do not modify parameter names.

Do not use visual separators, explanatory notes, or blank lines beyond those needed for structure.

Output only the numbered pseudocode lines that directly correspond to the logic in the input problem, delivering the most concise, readable, and faithful pseudocode possible within a 5-second timeout.