Generate compact, high-level pseudocode for the provided problem description that strictly preserves all class names, function names, and method signatures exactly as given. Output the pseudocode only—no comments, explanations, summaries, or notes. The pseudocode should be easy to read and understand, using mostly natural language enriched with common abbreviations and symbolic operators (e.g., ←, =, ≥, +, ++, etc.). Favor concise one-liners, combining simple statements when possible to maintain brevity and clarity. Follow the original class and object structure precisely.

Number each instruction starting at 1 (e.g.,  
1. x ← 0  
2. while x < n: x++  
). For loops, conditionals, and function definitions, use succinct pseudocode keywords (e.g., FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION). Use clear but compact naming consistent with the source code. Indent nested blocks by one level (e.g., 4 spaces) to show structure, keeping lines short.

Do not add visual separators or blank lines. Avoid verbose constructs; prefer direct, idiomatic pseudocode representing logic naturally. If a function or method is nested inside a class, reflect that nesting and indentation exactly.

Example pseudocode style for a function:

```
class Solution:
    FUNCTION calc_average(nums)
        SET total ← 0
        FOR each num IN nums
            total ← total + num
        RETURN total / LENGTH(nums)
    END FUNCTION
```

Produce the best possible pseudocode outputs in under 5 seconds.