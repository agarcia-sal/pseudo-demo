Generate clear, compact, and high-level pseudocode from the given problem description while retaining all original class names, function names, and signatures exactly as provided. Organize the pseudocode steps as numbered lines (1., 2., 3., …) using mostly single-line, imperative statements for brevity and easy readability. Use concise natural language expressions combined with common symbolic notations and standard pseudocode keywords such as SET, FOR, WHILE, IF, ELSE, RETURN, etc. Employ succinct one-liners for loops, conditionals, and assignments wherever possible, e.g.,

1. x ← 0  
2. while x < n: x++

Preserve the original class and method structure strictly, including indentation that reflects nesting (e.g., indented lines for inner functions or control blocks). Avoid adding any explanations, comments, summaries, notes, or separator lines—output only the pseudocode instructions. Use standard abbreviations and symbols (←, =, ≥, +, -, *, //) to keep output concise without sacrificing clarity. The final output should be directly executable as pseudocode describing the given problem solution, suitable for quick understanding or implementation. Aim for a balanced style that is both natural to read and highly succinct. Complete within the 5-second runtime limit.