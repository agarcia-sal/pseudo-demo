Generate succinct, high-level pseudocode from the input problem description, strictly preserving all original class names, method names, and signatures exactly as given, and maintaining the provided class and method nesting structures with proper indentation. Use mostly single-line, imperative statements combining clear natural language with common pseudocode keywords (e.g., SET, FOR, WHILE, IF, ELSE, RETURN) and standard symbolic notations (←, =, ≥, +, -, *, //) to keep lines compact but readable. Prefer concise one-liners for loops, conditionals, and assignments wherever possible, without sacrificing clarity, for example:

1. x ← 0  
2. while x < n: x++

Avoid comments, explanations, summaries, overviews, or separator lines—output only pure pseudocode instructions. Use standard abbreviations and minimal but natural language phrasing to maximize average word length while minimizing words per line, achieving a balanced, easy-to-read style that facilitates quick understanding and direct implementation. Ensure all control blocks and nested structures are indented consistently to reflect logic hierarchy. Complete within a 5-second runtime limit.

Example style:

FUNCTION calc_average(list_of_numbers)  
  SET total_sum to 0  
  FOR each number IN list_of_numbers  
    INCREMENT total_sum BY number  
  SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
  RETURN average_value  
END FUNCTION