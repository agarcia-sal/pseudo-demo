Generate concise, high-level pseudocode strictly preserving all class and function names and their signatures exactly as given in the problem description. Maintain the original class and method structures without alteration. Output only the pseudocode—no explanations, comments, notes, summaries, or extra text.

Make the pseudocode easy to read and understand by using natural language enriched with symbolic notation and common abbreviations. Favor compactness with mostly one-line statements, using numbering format for steps as follows:

1. x ← 0  
2. while x < n: x++

Use conventional pseudocode keywords (e.g., SET, FOR, WHILE, IF, ELSE, RETURN, DEFINE) combined with symbols (←, =, ≥, +, -, etc.) for clarity and brevity. Represent control flow and assignments succinctly without extra spacing or visual separators such as lines or boxes.

Maintain high-level abstraction by avoiding low-level implementation details or redundant operations, but ensure completeness so the pseudocode fully reflects the given code’s logic.

If nested functions or helper methods exist, include them inline preserving indentation and numbering consistently.

Example style:  
FUNCTION calc_average(nums)  
 SET total TO 0  
 FOR each num IN nums: total ← total + num  
 SET avg TO total ÷ LENGTH(nums)  
 RETURN avg  
END FUNCTION