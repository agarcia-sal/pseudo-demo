Generate clear, concise, and high-level pseudocode for the given problem description that preserves all original class names and function signatures exactly as stated. Output only the pseudocode—no explanations, comments, summaries, or notes.

Keep the original class and method structure without modification. Use natural language enriched with symbolic and conventional pseudocode keywords (e.g., SET, FOR, WHILE, IF, RETURN) and common abbreviations, favoring one-liner statements wherever possible to maximize compactness and readability.

Number each step sequentially (1., 2., 3., …) and format control flow constructs with brief syntax, for example:

1. x ← 0  
2. while x < n: x++

Prefer concise, consistent variable assignments and operations using symbols (=, ←, ++, --, ≥, ≤, etc.). Use commonly accepted pseudocode conventions for loops, conditionals, function definitions, and returns.

Do not use visual separators (e.g., lines, extra blank lines). Avoid restructuring the original code’s organization, and strictly keep method and class names unchanged.

Produce pseudocode that is both easy to understand and minimal in verbosity, yet captures all essential logic, enabling direct translation back to code without ambiguity.

Example:

If given code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)  
1. SET total TO 0  
2. FOR num IN nums: total += num  
3. SET avg TO total / LENGTH(nums)  
4. RETURN avg  
END FUNCTION
```