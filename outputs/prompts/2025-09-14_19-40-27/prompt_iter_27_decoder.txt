Translate the given pseudocode into an idiomatic, clean, and fully functional Python 3 implementation strictly observing the following requirements:

- Preserve all class names, method names, function signatures, parameters, and the exact class/object structure as presented in the pseudocode. Do not rename or restructure classes or methods.
- Implement the algorithm logic exactly as described by the pseudocode statements. Infer and handle any implicit details or edge cases that the pseudocode suggests, but do not add unrelated functionality.
- The code must be optimized for correctness, clarity, and performance, finishing within 5 seconds for all reasonable inputs.
- Use Python’s built-in capabilities and standard libraries. You may incorporate widely accepted third-party libraries **only when their inclusion aligns clearly with the pseudocode’s logic and enhances correctness or performance**.
- When the pseudocode implies auxiliary methods, helper functions, or data structures to produce a complete solution, implement these accordingly.
- Match output behavior exactly: if the pseudocode specifies returning values, printing output, or other interfaces, replicate those precisely.
- Add only minimal, focused comments explaining nontrivial, implicit, or subtle logic—avoid redundant or excessive commentary.
- Carefully handle input data types as implied by the pseudocode (e.g., translate linked lists or arrays accordingly). Validate assumptions inherent in presented types.
- Provide the entire solution as one contiguous Python 3 code snippet enclosed solely in a triple backtick code block with `python` specified. Do not include any explanation, notes, or extra text outside this block.

```python
# Your complete Python 3 translation here
```