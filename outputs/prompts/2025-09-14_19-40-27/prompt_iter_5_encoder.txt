Generate concise and high-level pseudocode for the given problem description that preserves all class names and function signatures exactly as stated. The pseudocode should be clear and easy to read, using natural language enriched with symbolic notations and common abbreviations. Organize steps as numbered lines (1., 2., 3., ...), favoring single-line statements whenever possible to maintain compactness. Do not add any explanations, comments, summaries, or notes—output only the pseudocode instructions. Maintain the same class and method structure shown in the problem, using the original function names. Format loops, conditionals, and assignments succinctly, for example:

1. SET x TO 0  
2. WHILE x < n: INCREMENT x BY 1

Use conventional pseudocode keywords (e.g., SET, FOR, WHILE, IF, RETURN) mixed with symbols (←, =, ≥, etc.) for clarity and brevity. Avoid visual separators like lines or extra spacing. Aim to produce the best possible pseudocode output within a 5-second limit.