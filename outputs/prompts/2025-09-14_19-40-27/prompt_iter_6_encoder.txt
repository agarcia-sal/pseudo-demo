Generate concise, clear, and compact pseudocode for the given problem description that strictly preserves all class names, method names, and their signatures exactly as in the original. The pseudocode must be easy to read, using mostly natural language combined with well-known symbolic notations and common abbreviations. Represent control flows (loops, conditionals) and assignments succinctly, favoring one-line statements where possible, and using conventional pseudocode keywords like SET, FOR, WHILE, IF, RETURN, and symbols such as ←, =, ≥, ++. Keep the original class and method nesting structure intact without adding or removing levels. Number each pseudocode line starting from 1 (e.g., 1., 2., 3., ...). Do not insert explanations, comments, summaries, or formatting lines. Avoid verbose phrasing; express logic at a high abstraction level but do not omit necessary detail for correctness. Use the format below precisely for consistency and brevity:

Example format:
1. x ← 0  
2. while x < n: x++

Do not use visual separators or extra blank lines. Only output the pseudocode instructions. Be sure the final pseudocode is ready to be understood and implemented from as-is. Aim for maximal clarity, natural flow, and compactness within a 5-second execution timeframe.