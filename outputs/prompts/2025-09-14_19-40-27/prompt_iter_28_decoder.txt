Translate the given pseudocode into a precise, fully functional Python 3 implementation strictly following these enhanced requirements:

- Retain **exactly** all class names, method names, parameter names, and all object-oriented structures exactly as defined in the pseudocode. Do **not** rename or restructure classes or methods.
- Faithfully implement the pseudocode logic line-by-line, without introducing, removing, or reordering steps. Carefully interpret and handle all implicit conditions, edge cases, and boundary behaviors suggested by the pseudocode.
- Ensure the output format (return values, print statements, exceptions, etc.) matches the pseudocode’s expected behavior **exactly**.
- Write clean, idiomatic, efficient Python 3 code optimized for clarity and performance (running well within a 5-second limit on reasonable inputs).
- You may freely import any Python standard library module **or** widely accepted third-party libraries (e.g., `collections`, `heapq`, `functools`, `bisect`, `typing`, `numpy`, `pandas`, `dataclasses`, etc.) **only if** their use offers clear improvements in correctness, efficiency, or clarity, and fits naturally with the pseudocode’s intent.
- Implement all helper functions, classes, or data structures that the pseudocode logically implies or depends on, but avoid extraneous code unrelated to the pseudocode.
- Include only concise, meaningful comments explaining tricky or non-obvious logic; avoid verbose or generic commentary.
- Carefully handle typical coding pitfalls (off-by-one errors, indexing, mutability, type assumptions, input validation) consistent with the pseudocode’s style and scope.
- Return or print outputs exactly as the pseudocode specifies; do not add test harnesses or debugging code.
- Enclose the entire solution in a single Python code block marked with ```python and ``` at the end; produce no other text outside that block.

```python
# Your well-structured, idiomatic, fully faithful Python 3 code here
```