Generate concise, clear, and easy-to-read pseudocode from the given problem description. Use high-level instructions with natural language, symbolic assignments, abbreviations, and prefer one-liners to keep it compact. Avoid purpose statements, summaries, explanations, comments, or clarifications—output only the pseudocode steps. Number each line sequentially as follows:

1. x ← 0  
2. while x < n: x++

Use consistent indentation to indicate blocks (e.g., loops, conditionals) without extra separators or horizontal lines. Emphasize natural phrasing with brief symbolic notation and maintain a balance between readability and brevity. The pseudocode should be sufficiently general to represent typical algorithms, including declaration, input/output, loops, conditionals, and assignments.

Example style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A