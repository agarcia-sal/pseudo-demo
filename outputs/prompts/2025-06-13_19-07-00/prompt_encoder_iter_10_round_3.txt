Translate the given code into clear, high-level pseudocode that preserves the original structure and all key control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed uniformly and simply.  
Use mostly natural language with concise symbolic notation and common abbreviations for readability and compactness. Favor one-line control statements when possible. The output must be easy to read yet compact, allowing omission of less critical low-level details if it reduces line count without losing essential logic.

- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, with no extra explanations, comments, summaries, or separators.  
- Use “let” for declarations and “←” for assignments (or “=” if clearer), maintaining consistency.  
- Write loops and conditionals naturally; prefer succinct one-liners when readable (e.g., “while x < n: x++”).  
- Use standard shorthand and symbols (e.g., ++, --, ←) and common abbreviations (e.g., func, arr, idx).  
- Use minimal consistent indentation to indicate nesting clearly.  
- Omit boilerplate or trivial details that do not affect understanding or alter control flow, to keep the output concise.  
- Avoid redundant or verbose statements; output should be as concise as possible while fully preserving control structure and logic.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A