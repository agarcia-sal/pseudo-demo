Translate the given code into clear, concise pseudocode that preserves the original structure and all essential control flows, including variable declarations, assignments, function calls, conditionals, and loops, expressed uniformly and simply.  

- Use mostly natural language with concise symbolic notation and common abbreviations to ensure readability and compactness.  
- Prefer one-line statements for loops, conditionals, and assignments when it does not reduce clarity (e.g., `while x < n: x++`).  
- Use consistent notation: declare variables with “let”, assign with “←” or “=”, and express conditions naturally.  
- Apply minimal indentation to indicate nesting of control structures clearly.  
- Omit boilerplate, trivial details, or low-level implementation specifics that do not affect the logical flow or understanding, aiming for the shortest pseudocode that fully captures the core logic.  
- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, no explanations, comments, summaries, or separators.  
- Use common shorthand (e.g., func, arr, idx) and symbols (++ for increment, -- for decrement, ← for assignment) to keep the output compact.  

Example style to emulate exactly (including indentation and numbering):  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A