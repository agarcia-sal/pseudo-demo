Translate the given code into clear, concise, high-level pseudocode that faithfully preserves the original structure and control flow, including all variable declarations, assignments, function calls, conditionals, and loops. Express these elements uniformly using mostly natural language combined with concise symbolic notation and common abbreviations, prioritizing readability and compactness.

- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines without any explanations, summaries, comments, or separators.  
- Use “let” for declarations and “←” or “=” for assignments consistently throughout.  
- Write loops and conditionals naturally, favoring succinct one-line statements when clear (e.g., “while x < n: x++”).  
- Use standard, widely understood shorthand and symbols (e.g., ++, --, ←) and common abbreviations (e.g., func, arr, idx).  
- Indent minimally but consistently to show nesting clearly.  
- Omit trivial boilerplate and details that do not affect the core logic or alter control flow to keep output as compact as possible—even if some details are excluded, ensure all essential operations and control flows remain fully represented.  
- Avoid redundancy or verbosity; produce the shortest pseudocode that preserves the exact logic and structure.  
- Do not add separator lines or headings of any kind.

Example style your output must follow exactly, including numbering and indentation:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A