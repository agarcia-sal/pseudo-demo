Translate the given code into concise, high-level pseudocode that faithfully preserves the original code’s structure and all essential control flows—variable declarations and assignments, function calls, conditionals, loops—expressed uniformly and simply.  
Use mostly natural language combined with concise symbolic notation and common abbreviations for clarity and brevity. Favor compact one-line statements for loops and conditionals when it remains readable.  
It is acceptable to omit less critical low-level details if doing so reduces line count without losing essential logic or altering control flow.  
Use consistent notation: “let” for declarations, “←” or “=” for assignments (choose whichever is clearer, but be consistent), and standard shorthand (e.g., ++, --) and abbreviations (e.g., func, arr, idx).  
Indent only as needed to indicate nesting of blocks clearly but keep the overall output minimal and easy to follow.  
Number every pseudocode line sequentially starting at 1, in the format:  
1. statement  
2. statement  
Output only the numbered pseudocode lines with no additional explanation, comments, summaries, blank lines, or separators.  

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A