Translate the given code into clear, high-level pseudocode that preserves the original structure and all control flows (variable declarations and assignments, conditionals, loops, function calls) in a uniform, simple, and compact style. Express control flows and expressions mostly in natural language mixed with concise symbolic notation and common abbreviations. Prioritize one-line statements and minimal nesting to maximize readability and reduce length, even if that means omitting some non-essential details while retaining core logic.

- Number pseudocode lines sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines with no explanations, comments, or summaries.  
- Use “let” for declarations; “←” for assignments (preferred) or “set” if clearer;  
- Write loops, conditionals, and expressions naturally but compactly, favor one-liners when feasible (e.g., “while x < n: x++”).  
- Keep indentation minimal but consistent to reflect nested blocks clearly.  
- Use standard shorthand and symbols where appropriate (e.g., ++, --, ←) and common abbreviations (e.g., func, arr, idx).  
- Omit low-level detail or redundant statements if they do not affect essential logic, aiming for brevity.  
- Never include separator lines or extraneous formatting.  

Example format to match precisely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A