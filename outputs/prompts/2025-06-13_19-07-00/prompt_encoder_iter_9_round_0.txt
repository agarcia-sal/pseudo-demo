Translate the given code into clear, concise pseudocode that preserves its original control flow and structure, including all function calls, variable declarations and assignments, conditionals, and loops. Represent all constructs uniformly and simply with mostly natural language enhanced by common abbreviations and standard symbolic notation (e.g., ←, ++, --, =). Favor compact, readable one-line statements when they do not obscure meaning. You may omit less-essential low-level details if doing so reduces pseudocode length without losing key logic or control flow.

- Number each pseudocode line starting at 1, followed by a period and a space (e.g., “1. ”).  
- Output only the numbered pseudocode lines with no extra comments, explanations, summaries, or separators.  
- Use “let” for variable declarations and “←” or “=” consistently for assignments, choosing whichever improves clarity.  
- Write loops and conditionals naturally, preferring concise one-line forms when clear (e.g., “while x < n: x++”).  
- Use minimal and consistent indentation to show nesting clearly, but keep indentation compact.  
- Apply standard abbreviations (e.g., func for function, arr for array, idx for index) and symbols uniformly.  
- Omit boilerplate, trivial or redundant details that do not affect understanding or core logic, to keep output succinct.  

Example format to follow precisely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A