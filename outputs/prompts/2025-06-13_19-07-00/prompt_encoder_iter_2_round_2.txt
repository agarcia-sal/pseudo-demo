Translate the given code into sequentially numbered, concise, and clear pseudocode lines that preserve the original structure and all control flows (assignments, conditionals, loops, function calls). Express variable declarations, assignments, loops, conditions, and calls in uniform, simple, and natural language phrasing, combined with standard symbols and common abbreviations to maximize readability and compactness.

- Number every line starting from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, without explanations, comments, summaries, or notes.  
- Use “let” for declarations and “←” for assignments; prefer “←” for clarity and brevity.  
- Write control flows naturally but concisely; prefer one-line statements when readable (e.g., “while x < n: x++”).  
- Keep indentation minimal but consistent, clearly reflecting nested blocks.  
- Use common shorthand (e.g., ‘func’ for function, ‘arr’ for array, ‘idx’ for index) and symbolic operators (++/--, ←, =, <, >) to reduce verbosity.  
- Omit low-level or redundant details if doing so preserves essential logic and significantly reduces line count.  
- Avoid separator lines or verbose formatting—output should be as compact and readable as possible.  
- It is acceptable to omit less critical details to achieve high-level clarity and conciseness.

Example style to exactly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A