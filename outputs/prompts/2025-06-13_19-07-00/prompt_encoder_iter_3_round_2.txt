Translate the given code into clear, concise, and high-level pseudocode that strictly preserves the original structure and control flow—including all assignments, conditionals, loops, and function calls—expressing these uniformly and simply. Use natural language combined with standard symbolic notation (e.g., ←, ++, --) and common abbreviations (e.g., func, arr, idx) to maximize readability and compactness.

Guidelines:  
- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines with no explanations, comments, summaries, or extraneous text.  
- Use “let” for variable declarations and “←” for assignments; prefer “←” for clarity.  
- Prefer brief, one-line control flows when possible (e.g., “while x < n: x++”).  
- Keep indentation minimal but consistent to show nesting clearly.  
- Omit low-level details or computations that do not affect the overall logic or flow to reduce verbosity. Important logic may be compacted or summarized if it improves clarity and brevity.  
- Avoid separator lines, comments, or notes; output must be as compact as possible without losing essential structure or correctness.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A