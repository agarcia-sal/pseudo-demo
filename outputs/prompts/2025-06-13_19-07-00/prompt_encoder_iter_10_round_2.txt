Translate the given code into clear, concise pseudocode that faithfully preserves the original structure and all key elements—variable declarations, assignments, function calls, conditionals, and loops—expressed uniformly, simply, and with minimal verbosity.  
Favor natural language with symbolic notation and common abbreviations for readability and compactness. It is acceptable to omit less critical low-level details if it reduces line count without losing essential logic or altering control flow.  
Prefer one-line control statements when clarity permits (e.g., “while x < n: x++”).  

- Number each pseudocode line sequentially from 1 (e.g., “1.”, “2.”).  
- Output only these numbered pseudocode lines with no extra explanations, comments, summaries, or separators.  
- Use consistent keywords, e.g., “let” for declarations, “←” or “=” for assignments (choose the clearer), and common shorthand (e.g., func, idx, arr).  
- Express loops and conditionals naturally and compactly; indentation must clearly show nesting with as little whitespace as needed.  
- Omit trivial boilerplate or redundant statements that do not affect logic or control flow for maximum conciseness.  
- Avoid verbose phrasing; keep lines succinct but precise, preserving algorithmic intent and flow exactly.  

Example:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A