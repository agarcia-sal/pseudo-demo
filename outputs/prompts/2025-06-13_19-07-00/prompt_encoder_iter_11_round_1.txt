Translate the given code into concise, clear pseudocode that fully preserves its original control flow and logic, including variable declarations, assignments, function calls, conditionals, and loops. Express all constructs simply and uniformly, favoring natural language combined with common compact symbols and abbreviations. Output pseudocode should be high-level and easy to read yet as compact as possible—even if this means omitting less essential details—to minimize line count without losing correctness or structure. Use one-liner statements for simple control flows wherever readable.

- Number every line sequentially starting at 1 with a period (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, no additional explanations, comments, summaries, or separators.  
- Use “let” for declarations; use “←” or “=” consistently for assignments (choose whichever is clearer).  
- Write loops and conditionals naturally and succinctly; e.g., “while x < n: x++” or “if cond: do_something”.  
- Use standard shorthand and symbols (++, --, ←), common abbreviations (func, arr, idx), and natural descriptors (“read”, “print”) for clarity and brevity.  
- Keep indentation minimal but consistent to clearly show nesting.  
- Omit boilerplate, trivial, or redundant details that do not affect understanding or control flow.  
- Preserve the exact code structure and logic flow rigorously—do not rearrange or merge statements if it changes meaning.  
- Avoid separators, headers, summaries, or any extra output besides the pseudocode lines numbered in order.

Example style to follow exactly (adapt indentation to nesting, keep line numbers, compact parameter descriptions):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A