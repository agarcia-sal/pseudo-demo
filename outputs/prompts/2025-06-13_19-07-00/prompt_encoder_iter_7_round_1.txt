Translate the given code into concise, high-level pseudocode that fully preserves the original structure and essential logic, including all control flows (conditionals, loops), variable declarations and assignments, and function calls. Use simple, uniform, mostly natural-language expressions combined with standard symbols and common abbreviations for compactness and clarity. Prefer one-line statements when readable (e.g., “while x < n: x++”), but use minimal indentation to indicate nesting clearly. Omissions of lower-level details or verbose elements are allowed if they do not change the logic or control flow.  

- Number each pseudocode line sequentially starting from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, with no explanations, comments, headers, footers, or separators.  
- Use “let” for variable declarations and “←” or “=” consistently for assignments (choose the clearer form per context).  
- Use common shorthand and well-known symbols (++, --, ←) and standard abbreviations (func, arr, idx).  
- Express loops and conditionals naturally and succinctly, favoring one-liners when they remain readable.  
- Skip trivial syntactic boilerplate or redundant phrases that do not affect understanding.  

Example style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A