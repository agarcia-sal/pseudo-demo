Translate the given code into compact, clear pseudocode that strictly preserves the original control flow and key operations—variable declarations, assignments, function calls, conditionals, loops—expressed consistently and simply.  
Use mostly natural language phrasing with concise symbolic notation and common abbreviations to ensure readability and brevity. Prefer single-line statements for conditionals and loops whenever this improves clarity.  
It is acceptable to omit low-level or boilerplate details if this significantly shortens the output without losing essential logic or structure. Always preserve nesting and control flow clarity with minimal consistent indentation.  
Number each line starting from 1 with a dot (e.g., “1.”, “2.”), output only the numbered pseudocode lines without any extra text, comments, explanations, or separators.  
Use “let” for declarations, “←” or “=” for assignments (choose one and apply consistently), and standard shorthand (e.g., ++, --, func, arr, idx).  
Avoid redundant or verbose wording; keep it as concise as possible while fully representing logic and structure.

Example output format to exactly emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A