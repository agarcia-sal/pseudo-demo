Translate the given code into clear, concise pseudocode that preserves the original structure and all essential control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed in uniform, simple, and mostly natural language with common abbreviations and symbolic notation for compactness and readability. Favor high-level, easy-to-read one-line statements wherever possible. It is acceptable to omit lower-level or less critical details if doing so reduces length without losing key logic or altering control flow.

- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, no additional text, explanation, comments, or separators.  
- Use “let” for declarations and “←” for assignments consistently (or “=” if clearer).  
- Write loops, conditionals, and function declarations naturally; prefer succinct one-liners if readable (e.g., “while x < n: x++”).  
- Use standard shorthand and symbols (++, --, ←) and common abbreviations (func, arr, idx).  
- Apply minimal consistent indentation (using tabs or spaces) to show nesting clearly.  
- Omit trivial or boilerplate details that do not affect understanding or control flow.  
- Avoid redundant or verbose expressions; prioritize brevity while preserving all essential program logic and control flow.  
- Do not use separator lines or heading labels.  
- Follow the example style exactly in formatting and language:

Example pseudocode style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A