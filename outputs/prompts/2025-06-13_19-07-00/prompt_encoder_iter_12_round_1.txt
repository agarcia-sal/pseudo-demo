Translate the given code into concise, high-level pseudocode that fully preserves its original structure and all essential control flows—variable declarations and assignments, function calls, conditionals, loops—expressed uniformly and simply.  
Use natural language mainly, combined with standard symbolic notation and common abbreviations for clarity, compactness, and easy readability. Prefer succinct one-line statements for control flows when readability is maintained.  
It is acceptable to omit low-level details or minor operations if doing so reduces total lines without losing key logic or altering control flow. Focus on expressing the core algorithm clearly and compactly.  
- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines—no explanations, comments, summaries, or separators.  
- Use “let” for declarations, “←” for assignments (or “=” if clearer) consistently.  
- Write loops and conditionals naturally and compactly (e.g., “while x < n: x++”, “if cond: do_something”).  
- Use widely recognized shorthand and symbols (++, --, ←) and common abbreviations (func, arr, idx).  
- Use minimal but consistent indentation to indicate nesting clearly.  
- Omit boilerplate, trivial, or repetitive details that do not impact understanding or control flow, to keep output concise.  
- Avoid verbosity and redundancy; keep output as brief as possible without losing essential control structures or logic.

Example pseudocode style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A