Translate the given code into clear, concise pseudocode that fully preserves its original structure and all essential control flows—including variable declarations, assignments, function calls, conditionals, and loops—using a uniform, simple style. Express logic at a high level with mostly natural language enriched by concise symbolic notations and common programming abbreviations for compactness and readability. Prioritize one-line statements where clarity permits. You may omit less critical low-level details if doing so reduces length without losing core logic or altering control flow.

- Number pseudocode lines sequentially from 1 (e.g., “1.”, “2.”).
- Output only the numbered pseudocode lines, no comments, explanations, summaries, separators, or metadata.
- Use “let” for variable declarations; “←” or “=” for assignments (choose whichever is clearest, but be consistent).
- Write loops and conditionals naturally and succinctly, preferring one-liners when readable (e.g., “while x < n: x++”).
- Use standard shorthand, symbols (++/--, ←), and common abbreviations (func, arr, idx) consistently.
- Show nesting with minimal indentation to maintain clear block structure.
- Omit boilerplate, trivial, or redundant details that do not affect understanding or control flow.
- Keep the output as compact as possible while fully preserving logical flow and structure.

Example format to exactly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A