Translate the given code into concise, high-level pseudocode that faithfully preserves the original structure, control flows (including function definitions and calls, conditionals, loops), variable declarations, and assignments. Use mostly natural language with standard concise symbols and common abbreviations to keep it compact and readable. Favor one-line statements for simple control flows whenever clarity permits.

- Number each pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only these numbered lines—no explanations, comments, summaries, or separator lines.  
- Use “let” to declare variables and “←” or “=” for assignments, chosen for consistency and clarity throughout.  
- Represent loops and conditionals naturally, preferring succinct one-liners when they remain clear (e.g., “while x < n: x++”).  
- Employ widely recognized shorthand and symbols (++, --, ←) and common abbreviations (func, arr, idx, etc.).  
- Use minimal consistent indentation to denote nesting clearly, without excessive whitespace.  
- Omit trivial boilerplate or nonessential low-level detail only if it reduces line count without losing essential logic or control flow.  
- Strive for maximal compactness without sacrificing correctness or readability—brevity and clarity must be balanced.  
- Do not output blank lines or extra formatting.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A