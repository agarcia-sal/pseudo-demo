Translate the given code into concise, high-level pseudocode that preserves its original structure and all control flows (assignments, conditionals, loops, function calls) uniformly and simply. Use mostly natural language combined with symbolic notation and common abbreviations. Prioritize readability and compactness, allowing omission of some details if it helps reduce line count. Express control flows in one line when possible.

- Output only the numbered pseudocode lines, no explanations, summaries, or comments.  
- Number lines sequentially: “1.”, “2.”, etc.  
- Use “let” or “set” for variable declarations/assignments; use “←” for assignment.  
- Write conditions and loops naturally but briefly (e.g., “while x < n: x++”).  
- Keep indentation minimal but sufficient to reflect blocks clearly.  
- Avoid redundancy, verbosity, or separator lines.  
- Prefer standard abbreviations and symbolic representation (e.g., ++, --, ←).  

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A