Translate the given code into concise, high-level pseudocode that faithfully preserves its original structure and all essential control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed simply and uniformly.  
Use mostly natural language enriched with clear symbolic notation and common abbreviations to maximize readability and compactness. Favor one-line statements for control flows and assignments whenever it improves clarity without loss of meaning.  
You may omit lower-level details or non-essential boilerplate if doing so meaningfully reduces line count while retaining full logical correctness and structural fidelity.  

- Number each pseudocode line starting from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines with no extra explanations, comments, or separators.  
- Use “let” for variable declarations and “←” or “=” for assignments, consistently throughout.  
- Write loops and conditionals in natural, succinct form; prefer compact one-liners when clear (e.g., “while x < n: x++”).  
- Use standard shorthand and symbols (++/--, ←, func, arr, idx) consistently.  
- Indent minimally but clearly to denote nesting of blocks.  
- Avoid redundant or verbose wording; keep the output as brief as possible without losing essential control flow or meaning.  

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  let min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A