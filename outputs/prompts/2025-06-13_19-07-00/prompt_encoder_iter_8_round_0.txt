Translate the given code into concise, high-level pseudocode that strictly preserves the original structure and all control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed clearly and uniformly.  
Use mostly natural language with well-known abbreviations and symbolic notation to keep it compact and readable. Favor simple one-line statements whenever they remain clear.  
Omit low-level details or boilerplate only if it safely reduces lines without losing crucial logic or control flow.  
Indent minimally and consistently to show nesting clearly.  
Number each line sequentially starting from 1 (e.g., “1.”, “2.”).  
Use “let” for declarations and “←” or “=” for assignments consistently (choose the clearer symbol per case).  
Write loops and conditionals naturally, using concise forms like “for i from 0 to n-1:” and “if x > 0: x++”.  
No explanations, summaries, comments, or separators—output only the numbered pseudocode lines.  
Example style to match exactly (ignore formatting differences):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A