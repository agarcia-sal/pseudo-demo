Translate the given code into concise, high-level pseudocode that preserves its original structure and all key control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed simply and uniformly. Use mostly natural language with common abbreviations and concise symbolic notation, favoring one-liner statements when clear. The pseudocode should be easy to read and understand, compact and high-level; omit low-level or boilerplate details if doing so reduces lines without losing essential logic or flow.

- Number each pseudocode line sequentially starting from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines, no explanations, comments, summaries, or separators.  
- Use “let” for variable declarations and “←” or “=” for assignments consistently.  
- Write loops and conditionals naturally, preferring succinct one-line forms (e.g., “while x < n: x++”).  
- Use standard shorthand and symbols (++, --, ←) and common naming abbreviations (func, arr, idx, etc.).  
- Use minimal but clear indentation to show nesting.  
- Omit trivial details that don’t affect control flow or core logic to keep output concise without loss of correctness.  
- Avoid redundant or verbose lines; keep pseudocode as short as possible while fully preserving program logic and control structure.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A