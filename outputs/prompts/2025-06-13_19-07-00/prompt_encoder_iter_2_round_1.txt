Translate the given code into concise, high-level pseudocode that faithfully preserves all original control structures (assignments, conditionals, loops, function calls) and core logic in a uniform, simple style. Prioritize readability and compactness using clear, natural language enhanced with standardized symbolic notations and common abbreviations.  

- Number each pseudocode line sequentially from 1 (e.g., “1.”, “2.”).  
- Output *only* these numbered pseudocode lines—no explanations, comments, summaries, or extra text.  
- Use “let” for declarations and “←” for assignments (or “set” interchangeably if clearer); prefer concise forms.  
- Write conditions, loops, and expressions using natural phrasing but keep them brief; favor one-line control flows when possible (e.g., “while x < n: x++”).  
- Reflect nested blocks with minimal, consistent indentation; avoid excessive line breaks or verbosity.  
- Incorporate standard symbolic shorthand (e.g., ++, --, ←) and common variable/function abbreviations (e.g., func, arr, idx) freely.  
- It is acceptable to omit some details if doing so reduces lines without losing essential logic or structure.  
- Do *not* include separator lines, redundant statements, or explanatory notes.  
- Output should be as compact as possible without sacrificing clarity or core control flow fidelity.  

Example to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A