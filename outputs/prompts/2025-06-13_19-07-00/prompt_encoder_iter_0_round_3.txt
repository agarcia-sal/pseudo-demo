Translate the given code into clear, concise pseudocode that faithfully preserves the original code’s structure and control flow. Represent variable assignments, loops, conditionals, and function calls uniformly, using simple, natural language combined with symbolic notations and widely understood abbreviations. Prioritize a compact, high-level style that is easy to read and understand, using mostly one-liners, while allowing omission of less critical details to minimize line count.

- Output only the pseudocode with no explanations, comments, summaries, or purpose statements.
- Number each line sequentially followed by a period and a space.
- Use natural language constructs like "let," "set," and direct expressions for conditions and assignments.
- Express control flows (if, while, for) clearly but succinctly, preferring one-line forms where possible.
- Use symbolic arrows (←) for assignments.
- Maintain indentation to reflect blocks but keep it minimal.
- Avoid redundancy and unnecessary verbosity; compactness is key.
- Do not use separator lines or extra formatting.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i from 0 to n-1:  
7.  set min_i ← i  
8.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.  swap A[i], A[min_i]  
10. print all elements of A

Aim to produce the most accurate, concise pseudocode within a 10-second runtime limit.