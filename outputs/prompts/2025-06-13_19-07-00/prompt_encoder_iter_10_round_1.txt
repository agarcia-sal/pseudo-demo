Translate the given code into concise, high-level pseudocode that faithfully preserves the original structure and all critical control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed uniformly and simply.  
Prioritize readability and understandability by using predominantly natural language with minimal symbolic notation and well-known abbreviations. Use compact, often one-line statements when clarity allows. Omitting lower-level details is allowed if it reduces length without losing essential logic or altering control flow.

- Number every line starting from 1 with “1.”, “2.”, etc.  
- Output only the numbered pseudocode lines, without any extra explanation, comments, summaries, or separators.  
- Use “let” for declarations and “←” or “=” for assignments consistently and clearly.  
- Write loops and conditionals in a natural style, preferring concise one-liners when they remain clear (e.g., “while x < n: x++”).  
- Employ common shorthand, standard symbols (++/--, ←), and frequent abbreviations (func, arr, idx) for brevity.  
- Use indentation only as needed for readability to show nesting clearly and simply.  
- Exclude boilerplate, trivial, or redundant statements that don’t affect the essential logic or control flow, keeping output as brief as possible without loss of meaning.  
- Avoid separator lines; produce a clean, continuous numbered list of pseudocode lines.

Example format to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A