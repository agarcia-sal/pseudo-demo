Translate the given code into clear, concise, and uniformly formatted pseudocode that preserves all control flows—variable declarations, assignments, conditionals, loops, and function calls—while maintaining the original code’s logical structure. Use natural, compact language combined with symbolic notation and common abbreviations for maximum readability and brevity.

- Number each pseudocode line sequentially, starting at 1 (e.g., “1.”, “2.”).
- Do not include any explanations, comments, summaries, or extra text—only output the numbered pseudocode lines.
- Use “let” for variable/type declarations and “←” for assignments; use shorthand operators (++, --) where appropriate.
- Write control flows and expressions naturally but concisely; prefer one-line statements when possible (e.g., “while x < n: x++”).
- Keep indentation minimal, consistent, and sufficient to clearly reflect nested blocks and control structures.
- Use common abbreviations (e.g., func, arr, idx, tmp) and symbolic shorthand (++, --, ←) to reduce verbosity.
- Omit low-level details or trivial operations if they do not affect core understanding or structure, aiming to keep line count low.
- Avoid any separator lines, extra punctuation, or redundancy; output must be compact but complete in logic.

Example style exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A