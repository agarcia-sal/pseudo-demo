Translate the provided code into clear, concise pseudocode that fully preserves its original structure—declared variables, assignments, function calls, conditionals, loops, and all control flows—using uniform, simple notation.  
Express the pseudocode mostly in natural language with brief symbolic or abbreviated elements for readability and compactness. Prefer one-line statements for control flows when they remain clear (e.g., `while x < n: x++`).  
You may omit less critical low-level details and boilerplate if doing so reduces line count without losing essential logic or control flow. Keep indentation minimal but consistent to indicate nesting clearly.  
Number every output line sequentially starting at 1.  
Output only the numbered pseudocode lines—no explanations, summaries, comments, or separators.  
Use “let” to declare variables and `←` or `=` consistently for assignments (choose the clearer one). Use common shorthand (e.g., `func`, `arr`, `idx`, `++`, `--`) and standard symbolic notation.  
Favor compact, high-level pseudocode that is both easy to read and as short as possible while preserving all logical branches and loops.  

Example formatting to follow:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A