Translate the given code into clear, concise pseudocode that precisely preserves the original code’s structure and logic, including all control flows (conditionals, loops), variable declarations and assignments, function calls, and data operations. Use mostly natural language with compact symbolic notations and standard abbreviations for clarity and brevity. Favor one-line statements whenever they remain easy to read, and use indentation sparingly yet consistently to show nesting. You may omit less critical low-level details or verbose code constructs if doing so shortens the output without losing core logic or control flow.

Output only numbered pseudocode lines starting at 1, with no extra explanations, comments, or delimiters.

- Use “let” for declarations, “←” or “=” consistently for assignments (choose whichever improves clarity).  
- Express loops and conditionals naturally but succinctly (e.g., “while x < n: x++”).  
- Use common shorthand and symbols (++/--, ←, func, arr, idx, etc.) for readability and compactness.  
- Avoid redundant or trivial statements; keep output minimal but complete in logic and structure.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A