Translate the given code into concise, high-level pseudocode that preserves the original control flow—variable declarations, assignments, function calls, conditionals, and loops—expressed clearly and uniformly.  
Use mostly natural language with brief symbolic notation and common programming abbreviations for readability and compactness. Prefer concise one-line statements when they remain clear.  
Omit low-level boilerplate or less important implementation details if doing so reduces line count without losing essential logic or structure.  
Show nesting via minimal indentation; avoid verbose wording. Use consistent, simple assignment arrows (← or =) and “let” for declarations.  
Number every output line starting at 1, e.g., “1.”, “2.”, etc. Output only the numbered pseudocode lines—no comments, explanations, summaries, or separators.  
Use standard shorthand, e.g., ++, --, and abbreviations like idx, arr, func where appropriate.  
Ensure the output is easy to read, logically complete, and as compact as possible while faithfully reflecting the original algorithm’s flow and decisions.  

Example to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A