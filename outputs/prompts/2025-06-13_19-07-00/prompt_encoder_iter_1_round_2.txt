Translate the given code into concise, high-level pseudocode that strictly preserves the original code’s structure and all control flows (variable assignments, conditionals, loops, function calls) in a uniform, clear, and simple way. Use mostly natural language combined with standard symbolic notation and common abbreviations, favoring readability and compactness through one-liners and omission of less critical details if doing so reduces length.

- Output only pseudocode lines numbered sequentially: “1.”, “2.”, etc., with no explanations, comments, or summaries.  
- Use “let” or “set” for variable declarations and assignments; use “←” for assignment.  
- Write control structures (if, else, for, while) naturally and briefly, preferably one line when possible (e.g., “while x < n: x++”).  
- Indent blocks only as needed to clearly reflect nested structure, keeping indentation minimal.  
- Use consistent, standard abbreviations and symbols (++, --, ←, etc.) and natural phrases without verbose keywords.  
- Omit separator lines or extraneous formatting.  
- Prioritize uniformity and clarity in how all constructs are represented, handling function definitions, calls, parameters, and returns straightforwardly.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A