Translate the given code into clear, concise, and high-level pseudocode that preserves the exact original control flow, including all variable declarations, assignments, conditionals, loops, and function calls. Represent these elements uniformly and simply with an emphasis on readability and compactness by blending natural language and widely accepted symbolic notations and abbreviations.  

- Number each pseudocode line sequentially starting from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines; omit summaries, explanations, comments, or any notes.  
- Use “let” for declaring variables, and “←” for assignments; use “set” only when it improves clarity or matches natural phrasing.  
- Write conditions and loop headers naturally but as briefly as possible; prefer one-line controls when unambiguous (e.g., “while x < n: x++”).  
- Show all nested blocks using minimal and consistent indentation to maintain clear structure.  
- Employ standard symbolic and shorthand notations (++, --, ←) and common abbreviations (e.g., func, arr, idx).  
- Prioritize concise, high-level statements; omit low-level operations or implementation details when they do not affect the essential logic or flow, to reduce line count without losing correctness or clarity.  
- Avoid any separator lines, redundant lines, or extraneous formatting.  
- If a construct can be summarized safely without losing its semantic meaning, prefer compactness over verbosity.  

Example output style to follow precisely:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A