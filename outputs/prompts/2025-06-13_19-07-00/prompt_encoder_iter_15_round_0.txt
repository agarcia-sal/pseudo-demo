Translate the given code into clear, concise, high-level pseudocode that faithfully preserves all control flows, variable declarations, assignments, function calls, conditionals, and loops using uniform, simple, and mostly natural language with common abbreviations and symbolic notation.  
Favor compactness and readability by using one-line statements whenever possible, standard shorthand (e.g., ++, --, ← or =), and minimal indentation to reflect nesting.  
Omit low-level implementation details if they do not impact logic or structure.  
Number every pseudocode line sequentially from 1 with no extra commentary, explanations, separators, or summary lines.  
Use “let” for declarations, “←” or “=” consistently for assignments, and write loops and conditionals naturally and succinctly (e.g., “while x < n: x++”).  
Output only the numbered pseudocode lines, purely the pseudocode itself, following this format exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A