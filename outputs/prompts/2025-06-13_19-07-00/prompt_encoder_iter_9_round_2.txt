Translate the given code into clear, concise pseudocode that faithfully preserves all key control flow constructs—including variable declarations, assignments, function calls, conditionals, and loops—using a uniform, simple style.  
Express logic primarily in natural language combined with common abbreviations, symbolic operators (←, =, ++, --), and compact one-line statements whenever possible for readability and brevity.  
Omit lower-level details, boilerplate, or repetitive elements if removing them shortens the output without losing essential logic or structure.  
Use minimal indentation to clearly indicate nesting, and maintain consistent terminology (e.g., “let” for declarations, ← or = for assignments).  
Number each pseudocode line sequentially starting at 1 without extra explanations, comments, separators, or summaries.  
Favor direct, high-level descriptions over verbose phrasing, yet ensure the output remains fully understandable and structurally aligned with the original code.

Example style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A