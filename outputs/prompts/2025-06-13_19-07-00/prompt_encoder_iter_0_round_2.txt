Translate the given code into clear, concise pseudocode that strictly preserves the original code’s structure, control flow, and essential operations (variable assignments, loops, conditionals, function calls) in a uniform, simplified style. Use mostly natural language combined with symbolic notation and standard abbreviations to maximize clarity and compactness. Prioritize one-liners whenever possible, omitting less critical details if needed to reduce line count while maintaining correctness at a high level.

- Number each line sequentially as: 1. X  
- Use indentation only to indicate nested blocks, keep it minimal.  
- Represent assignments with ←, conditions as natural expressions, and increments as x++ or equivalent.  
- Express all control flows (if, else, while, for) clearly but succinctly; prefer inline forms like  
  for i from 0 to n-1: do_something  
  if cond: action  
- Use verbs like let, set, read, print, call, swap to describe operations consistently.  
- Do not add explanations, comments, summaries, or headings. Output only the numbered pseudocode lines.  
- Avoid blank lines, separator lines, or extra formatting.  
- Accept some loss of detail (e.g., precise types or auxiliary definitions) to keep pseudocode compact and high-level.  
- Follow this example style exactly:

Example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A