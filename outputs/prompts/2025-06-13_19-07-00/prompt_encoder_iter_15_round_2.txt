Translate the given code into concise, high-level pseudocode that fully preserves the original program’s structure and all essential control flows—variable declarations and assignments, function calls, conditionals, loops, and data manipulations—expressed uniformly and simply.  
Use predominantly natural language phrasing with minimal symbolic notation and commonly accepted abbreviations for clarity and brevity. Favor compact one-line statements for loops and conditionals when they remain clear.  
It is acceptable to omit low-level or non-essential details if doing so reduces verbosity without losing core logic or altering control flow.  
Number each pseudocode line sequentially from 1 onward (e.g., “1.”, “2.”). Output only these numbered lines with no extra explanation, commentary, headings, or separators.  
Use consistent terminology such as “let” for declarations and “←” or “=” for assignments, choosing whichever is clearer but uniform across the output. Reflect natural language logical connectors and control flow words (“if”, “else”, “while”, “for”, etc.) clearly and succinctly.  
Indent using 1 tab or 4 spaces per nesting level solely to mark scope and improve readability. Avoid verbose or redundant statements.  
Example format to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A