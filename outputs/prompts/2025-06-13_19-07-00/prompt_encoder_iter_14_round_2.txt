Translate the given code into concise, high-level pseudocode that preserves the original structure and all essential control flows—variable declarations, assignments, function calls, conditionals, loops, and nesting—expressed simply and uniformly.  
Use mostly natural language with compact symbolic notation and common abbreviations for clarity and brevity. Favor one-line statements (e.g., `while x < n: x++`) wherever they remain clear and readable.  
Omit boilerplate or low-level implementation details if doing so reduces line count without losing key logic or control flow.  
Use standard shorthand (`let`, `←` or `=`, `++`, `--`) and maintain consistent minimal indentation to show nesting clearly.  
Number every line sequentially starting at 1 (e.g., `1.`, `2.`).  
Output only the numbered pseudocode lines—no explanations, comments, summaries, or separators.  
Ensure output is compact and easy to understand, prioritizing logical clarity over strict completeness if needed.

Example style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A