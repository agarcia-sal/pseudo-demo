Translate the given code into clear, concise pseudocode that fully preserves the original code’s structure and all essential control flows, including variable declarations, assignments, function calls, conditionals, and loops. Express all elements uniformly and simply, using mostly natural language with common abbreviations and symbolic notation for brevity and readability. Prefer single-line statements where clarity allows. It is acceptable to omit less critical details if doing so substantially reduces line count without losing core logic or altering control flow.

- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines without any extra explanations, comments, summaries, or blank lines.  
- Use “let” for declarations, “←” or “=” for assignments—choose whichever best balances clarity and conciseness, but be consistent in each line.  
- Write control flow naturally (e.g., “if”, “while”, “for”), favoring compact one-liners when they remain easy to understand.  
- Use common shorthand and symbols (++, --, ←) and widely understood abbreviations (func, arr, idx, len, tmp).  
- Use minimal, consistent indentation to show nesting clearly, but keep it as compact as possible.  
- Omit boilerplate, trivial, or redundant details that do not affect the overall logic or control flow to keep output as succinct as possible.  
- Do not include separators or additional formatting outside numbered pseudocode lines.

Example style to exactly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A