Translate the given code into clear, concise pseudocode that fully preserves the original control flow and logic (variable declarations, assignments, function calls, conditionals, loops), expressed uniformly and simply.  
Use mostly natural language phrasing combined with succinct symbolic notation and common abbreviations to keep the output both readable and compact.  
Favor single-line statements for conditionals and loops whenever it remains clear (e.g., `while x < n: x++`).  
You may omit low-level details if doing so reduces length without losing essential semantic or structural information.  
Use consistent conventions:  
- Number each line sequentially from 1 (e.g., `1.` `2.`) with no extra text or explanation.  
- Use `let` for declarations, and `←` or `=` for assignments, chosen for clarity but consistent throughout.  
- Represent loops and conditionals naturally and simply, without verbose syntax.  
- Use standard shorthand symbols (`++`, `--`, `←`) and common abbreviations (`func`, `arr`, `idx`) for brevity.  
- Indent minimally and consistently to clearly show nesting.  
- Do not include comments, summaries, explanations, or separator lines.  
Output only the numbered pseudocode lines in the exact order and format below:

Example:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A