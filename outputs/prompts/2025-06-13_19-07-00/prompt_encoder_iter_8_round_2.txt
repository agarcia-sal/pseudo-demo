Translate the given code into clear, concise pseudocode that strictly preserves the original structure and all essential logic, including variable declarations, assignments, function calls, conditionals, and loops. Use natural language lightly mixed with standard symbolic notation and common abbreviations for compactness and clarity. Prefer one-line control statements when readable. Omitting less critical low-level details or exact syntax is allowed if it reduces lines without losing core logic or flow.

- Number each pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines with no extra explanations, comments, or separators.  
- Use “let” for declarations and “←” or “=” consistently for assignments (choose whichever improves clarity).  
- Express loops and conditionals naturally and briefly; favor one-liners like “while x < n: x++” when clear.  
- Use common shorthand and symbols (e.g., ++, --, func, arr, idx), ensuring uniformity throughout.  
- Use minimal but clear indentation to denote nesting.  
- Exclude trivial boilerplate or details that do not affect understanding or control flow to keep output compact.  
- Avoid redundant or verbose expressions; the output must be as succinct as possible while fully retaining control flow and main operations.

Example style to emulate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A