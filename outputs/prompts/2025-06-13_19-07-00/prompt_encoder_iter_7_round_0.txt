Translate the given code into concise, clear pseudocode that preserves the original structure and all essential control flows: variable declarations and assignments, function calls, conditionals, loops.  
Express the logic uniformly and simply, using mostly natural language with common abbreviations and minimal symbolic notation for readability and compactness.  
Favor concise one-line statements where clarity permits (e.g., `while x < n: x++`).  

- Number every pseudocode line sequentially starting at 1 (e.g., `1.`, `2.`).  
- Output **only** the numbered pseudocode lines, with no additional comments, explanations, or separators.  
- Use `let` for variable declarations and `←` or `=` for assignments; choose whichever is clearer but be consistent within each line.  
- Write loops and conditionals naturally; use shorthand like `for i from 0 to n-1` or `if cond:` with optional one-line bodies.  
- Employ common pseudocode abbreviations (e.g., `func`, `arr`, `idx`), standard symbols (`++`, `--`, `←`) and minimal indentation to indicate nesting.  
- Omit boilerplate, trivial, or overly detailed low-level operations when they do not affect logic comprehension or control flow, to keep output compact.  
- Prioritize preserving control flow and essential logic even if some details are abstracted or omitted for brevity.  
- Avoid verbose or redundant statements; produce the shortest, clearest pseudocode that fully captures the program’s flow and core logic.  

Example style to replicate exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  let min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A