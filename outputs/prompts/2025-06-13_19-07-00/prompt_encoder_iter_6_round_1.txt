Translate the given code into clear, concise pseudocode that faithfully preserves the original structure, including all control flows (function calls, conditionals, loops), variable declarations, and assignments.  
Use predominantly natural language phrasing with consistent, compact symbolic notation and common abbreviations (e.g., func, arr, idx, ←, ++, --), favoring readability and brevity.  
Express control flow statements naturally and succinctly; prefer one-line loops and conditionals when unambiguous (e.g., `while x < n: x++`).  
Omit trivial or boilerplate details when this reduces repetition or line count without losing essential logic or altering flow.  
Indent minimally and consistently to clearly indicate block nesting.  
Number every line sequentially starting from 1 (e.g., `1.`, `2.`).  
Output only the numbered pseudocode lines—no comments, explanations, summaries, or separators of any kind.  
Use “let” for declarations and consistent assignment symbols (“←” preferred; use “=” if clearer).  
Prioritize a compact, high-level style—brevity is more important than exhaustiveness if core logic and structure are preserved.

Example format to exactly emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A