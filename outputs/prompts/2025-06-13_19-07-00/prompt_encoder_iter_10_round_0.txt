Translate the given code into concise, high-level pseudocode that clearly preserves its original structure and all key control flows—variable declarations and assignments, function calls, conditionals, and loops—expressed simply and uniformly.  

- Use mostly natural language with succinct symbolic notation and common abbreviations to maximize readability and compactness.  
- Prefer one-line control statements when they remain clear (e.g., `while x < n: x++`).  
- You may omit less critical low-level details if doing so reduces line count without losing essential logic or altering control flow.  
- Keep indentation minimal but consistent to show nesting clearly.  
- Use “let” for declarations and “←” or “=” for assignments consistently (choose whichever is clearer).  
- Use standard shorthand, symbols (++, --, ←), and common abbreviations (func, arr, idx) throughout.  
- Number every line sequentially from 1, output only the numbered pseudocode lines with no additional text, comments, separators, or explanations.  
- Do not output summaries, notes, or purpose statements—output must be strictly pseudocode lines only.  
- Avoid verbosity and redundancy to make the output as compact as possible while fully preserving control and logic.  
- Follow this minimal example style exactly (matching spacing and formatting):  

```
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A  
```