Translate the given code into concise, clear pseudocode that faithfully preserves its original structure and all essential operations—variable declarations, assignments, function calls, conditionals, and loops—expressed uniformly and simply. Use mostly natural language enriched with common symbolic notation and standard abbreviations for compactness and readability. Prioritize one-line statements when clear and natural. It is acceptable to omit less critical details if doing so reduces line count without losing key logic or control flow.

- Number every line starting from 1 (e.g., “1.”, “2.”), output only these numbered lines with no additional explanation, comments, or separators.  
- Use “let” for declarations and “←” or “=” consistently for assignments, whichever enhances clarity.  
- Write loops, conditionals, and function headers in natural, easy-to-read form; prefer succinct one-liners (e.g., “while x < n: x++”).  
- Use common abbreviations (func, idx, arr, val) and standard shorthand or symbols (++/--/←) consistently.  
- Indent minimally and consistently to indicate nesting clearly, but keep output compact.  
- Omit boilerplate, trivial, or non-impactful low-level details that do not affect comprehension or control flow.  
- Avoid redundancy and verbosity; pseudocode should be high-level, focused, and easy to follow while preserving the full logic and control structure.

Example style exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A