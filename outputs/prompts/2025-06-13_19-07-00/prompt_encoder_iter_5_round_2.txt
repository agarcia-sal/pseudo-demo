Translate the given code into concise, high-level pseudocode that closely preserves the original structure and all essential control flows—variable declarations, assignments, function calls, conditionals, and loops—expressed uniformly and simply. Use mostly natural language enhanced with clear symbolic notation and well-known abbreviations for readability and compactness. Prioritize one-line control statements where possible without sacrificing clarity.

- Number each pseudocode line sequentially from 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines; do not include explanations, comments, summaries, or separators.  
- Use “let” for declarations and consistent assignment arrows (“←” or “=”) chosen for clarity throughout the pseudocode.  
- Write loops and conditionals naturally; prefer succinct single-line forms when easily understandable (e.g., “while x < n: x++”).  
- Use standard shorthand, symbols (e.g., ++, --, ←), and common abbreviations (e.g., func, arr, idx).  
- Use minimal consistent indentation to show nesting clearly.  
- Omit trivial boilerplate or low-level details that do not affect control flow or essential logic to keep output compact.  
- When necessary, replace verbose constructs with concise expressions even if some details are abstracted, as long as key control flow and logic remain intact.  
- Avoid redundancy and verbosity; output must be as minimal as possible without losing essential structure or behavior.

Example pseudocode style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A