Translate the given code into clear, concise, high-level pseudocode that fully preserves the original structure and explicitly expresses all control flows (conditionals, loops), variable declarations and assignments, function calls, and key operations uniformly and simply. Use mostly natural language phrasing mixed with standard symbolic notation, common abbreviations (e.g., func, idx, arr), and one-line control statements whenever readable, to keep the output compact and easy to follow.

- Number each pseudocode line sequentially starting from 1 (e.g., “1.”, “2.”).  
- Output only these numbered pseudocode lines, with no additional comments, explanations, summaries, or separators.  
- Use “let” for variable declarations and “←” or “=” consistently for assignments (pick one style and apply throughout).  
- Write loops and conditionals naturally; prefer single-line statements when clarity is maintained (e.g., “while x < n: x++”).  
- Use minimal, consistent indentation to reflect nesting clearly, but keep indentation compact (e.g., tabs or 2 spaces).  
- Omit trivial or boilerplate details that don’t affect logic or control flow, but retain all essential steps that reflect the original algorithm.  
- Prefer concise line structure and use standard pseudocode symbols and shorthand to reduce verbosity while maintaining correctness and readability.  
- Avoid redundant or verbose formulations; conciseness is prioritized, even if some low-level specifics are abstracted away.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A