Translate the given code into concise, high-level pseudocode that uniformly and clearly expresses all control flows (including conditionals and loops), variable declarations and assignments, and function calls while preserving the original code’s structure and logic.  
Use mostly natural language with compact symbolic notation and common abbreviations for clarity and brevity. Prefer succinct one-line statements for control flows and assignments whenever readable. Omitting less critical low-level details and redundant elements is allowed if it reduces line count without losing essential logic or clarity.  
Number each pseudocode line sequentially starting from 1 (e.g., “1.”, “2.”) and output only these numbered lines, with no extra comments, explanations, or separators.  
Use “let” for declarations and “←” or “=” for assignments (choose whichever is clearer, but be consistent throughout). Use common shorthand (e.g., func, arr, idx, sz) and standard symbols (++/--, ←). Use minimal but consistent indentation to indicate nesting clearly.  
Do not include any summary, titles, or notes—only the numbered pseudocode lines that directly represent the original code’s logic in a clear, compact, and readable form.

Example style to follow precisely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  let min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A