Translate the given code into clear, concise, and high-level pseudocode that preserves all control flows (assignments, conditionals, loops, function calls) and core logic with minimal complexity. Express every statement uniformly and simply, preferring natural language combined with symbolic notation and common abbreviations to maximize readability and compactness.

- Number every pseudocode line sequentially starting at 1 (e.g., “1.”, “2.”).  
- Output only the numbered pseudocode lines without any explanations, summaries, comments, or notes.  
- Use “let” for declarations and “set” or “←” for assignments; prefer “←” for clarity in assignments.  
- Write conditions, loops, and expressions naturally but briefly; favor one-line control flows when possible (e.g., “while x < n: x++”).  
- Keep indentation minimal and consistent to clearly reflect nested blocks and control structures.  
- Prefer standard symbolic and shorthand notation (e.g., ++, --, ←) and common abbreviations (e.g., ‘func’, ‘arr’, ‘idx’).  
- Omit details and low-level operations when they do not alter the essential structure or understanding, minimizing line count.  
- Avoid separator lines or redundant statements—output should be as compact as possible while preserving logic.

Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i from 0 to n-1:  
8.  set min_i ← i  
9.  for j from i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.  swap A[i], A[min_i]  
11. print all elements of A