Generate concise, high-level pseudocode for the given problem description, preserving the original function name exactly as in the source code. The pseudocode should be easy to read and understand, using natural language combined with symbolic notations and standard abbreviations to remain compact. Focus on clarity with mostly one-liners and simple control structures. Output only the pseudocode without any introduction, explanation, comments, or summary.

Use this numbered line format precisely (no extra separators or blank lines):

1. x ← 0  
2. while x < n: x++  

Prefer natural language phrasing (e.g., “let”, “read”, “set”, “return”), but keep it succinct and consistent. Include only the core algorithmic steps needed to solve the problem, omitting all metadata, class or module declarations. Use common symbols (←, =, ≠, <, ≤, +, -, *, //, %, etc.) and expressions as in typical pseudocode. When describing data structures, use intuitive names like array/vector/list/dictionary/set, and use concise indexing and slicing syntax as appropriate.

Ensure the pseudocode clearly represents function inputs, outputs, loops, conditionals, and key computations with minimal verbosity, prioritizing correctness and compactness within the 5-second timeout constraint.