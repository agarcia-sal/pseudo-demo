Given the pseudocode below, determine *with absolute certainty* if it is fully reproducible — i.e., it defines all necessary classes and functions unambiguously and completely, with logically correct, consistent, and self-contained instructions that enable passing **all relevant unit tests** for any valid inputs without modification or assumption.  

Evaluate the pseudocode rigorously against these criteria:  
- The main solution class is properly named and declared, and all required functions are present with correct signatures (function names, parameters, and return types clearly specified).  
- All variables, data structures, loops, conditionals, control flow, and internal logic steps are explicitly described and free from ambiguity or gaps in reasoning.  
- Edge cases, boundary conditions, and error handling relevant to the problem domain are considered and addressed in the logic.  
- Return statements or outputs are explicitly specified and clearly aligned with expected results.  
- There are no referencing errors such as missing declarations, undefined variables, or mismatches between usage and definition.  
- No syntactic or structural inconsistencies exist that would prevent straightforward automated translation from pseudocode to working code without guesswork.  
- The pseudocode’s descriptions of input handling, internal computation, and output satisfy a direct, one-to-one mapping to an executable, test-passing program.

If and only if every above condition is indisputably met, output exactly and only:  
```
1
```
Otherwise, if any detail is incomplete, inconsistent, ambiguous, or incorrect such that the pseudocode would fail tests or not run as-is, output exactly and only:  
```
0
```
Do not output any explanation, commentary, formatting, or whitespace — solely the single digit **1** or **0**.  
For multiple pseudocode inputs, produce outputs in the exact input order, one per input.

```
<PSEUDOCODE>
```