Given the pseudocode below, output **1** if and only if the pseudocode is fully reproducibleâ€”that is, it defines **all required classes and functions with correct names, all input parameters and return values unambiguously specified, all control flow (loops, conditionals) and data structures clearly and completely described, covers all normal and edge cases expected in the problem, contains no syntax or semantic ambiguities or inconsistencies, and can be directly and reliably translated into a working implementation that would pass all unit tests for valid inputs**.  

Output **0** otherwise.  
Your output must be strictly a single digit **1** or **0**, with no extra text, formatting, explanation, or whitespace.  
If multiple pseudocodes are given, output a sequence of digits with no separators, in exact input order.  

To decide reproducibility, verify that:
- The pseudocode includes exactly one top-level solution class named appropriately (e.g., "Solution") that encapsulates the solution.
- Each function is explicitly named and matches expected signatures, with clear input parameters and return types or return statements.
- All variables used are declared, initialized, and consistently referenced without undefined names.
- Loops, conditionals, and recursive or iterative flows are detailed with precise start/end conditions and unambiguous logic.
- Data structures (arrays, lists, maps, etc.) are adequately described with indexing rules and initialization.
- Handling of edge cases, special or boundary inputs, and error conditions is explicitly addressed.
- No contradictions, missing steps, or unclear operations that require guesswork or assumptions.
- The pseudocode syntax and semantics allow direct straightforward implementation without requiring inference or external context.

If any of the above criteria fail or are ambiguous, output **0**.

```
<PSEUDOCODE>
```