Given the pseudocode input below, your task is to determine **with absolute certainty** whether the pseudocode is fully reproducible—that is, it contains all necessary, explicit, syntactically correct, and logically complete definitions of classes and functions, with properly declared parameters, consistent naming, unambiguous control flow, correct handling of all relevant input and edge cases, appropriate output and return statements, and no missing or undefined references—such that it would reliably pass **all unit tests** for any valid inputs without requiring any assumptions or external supplements.

Output exactly one digit:

- **1** if the pseudocode meets all these criteria and is reproducible,
- **0** otherwise.

Do not output anything else—no explanations, formatting, or whitespace.  
Maintain strict alignment between the order of outputs and the order in which pseudocodes are provided.

To verify reproducibility, confirm all of the following:

1. The main solution class and all required functions are properly defined with correct and complete names and parameter lists matching expected usage.

2. All variables, data structures, loops, and conditional statements are clearly specified with no ambiguity, missing steps, or logical contradictions.

3. Function calls and recursion (if any) are fully articulated with termination conditions explicitly stated.

4. Edge cases and input constraints are properly accounted for or implicitly covered by the logic.

5. Return or output statements are present, consistent, and properly placed to provide the expected results.

6. No parameters or variable references are missing or inconsistent (e.g., keyword arguments should match parameters, declarations should align with usage).

7. No syntax-level issues or incomplete fragments would prevent a direct, unambiguous translation into executable code.

If the pseudocode fails to meet any one of these criteria, output **0** without exception.

```
<PSEUDOCODE>
```