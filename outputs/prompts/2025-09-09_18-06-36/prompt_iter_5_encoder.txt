Generate concise, high-level pseudocode that is easy to read and understand from the given problem description and code. Keep the original function name intact. Express logic mostly in one line, using natural language combined with symbolic notation and abbreviations where helpful. Avoid any purpose statements, explanations, summaries, notes, or comments—output only the pseudocode steps. Prioritize brevity and clarity, making pseudocode compact but sufficiently detailed to capture the algorithm’s flow and variables. Follow exactly this numbered format with one command per line, using arrows (←) for assignments:

1. x ← 0  
2. while x < n: x++

Use meaningful variable names consistent with the original code. Represent data structures and control flow clearly and simply. Keep the code structure minimal: loops, conditionals, assignments, returns, and function calls. Avoid separator lines or extra formatting. Your output should be a ready-to-implement outline of the algorithm in pseudocode form. Deliver the best possible concise pseudocode within a 5-second generation time.