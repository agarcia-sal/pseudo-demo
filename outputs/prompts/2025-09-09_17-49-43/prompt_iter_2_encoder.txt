Generate concise, compact pseudocode that is easy to read and uses mostly natural language enriched with symbolic notation and standard abbreviations. Keep the original class names and function names exactly as in the given code, preserving all class structures and data types. Present the logic at a high level with as many one-liners as possible, minimizing verbosity while maintaining clarity. Do not include comments, explanations, purpose, summaries, or extra notes. Use the following step numbering format without separators:

1. x ← 0  
2. while x < n: x++

If relevant, begin pseudocode blocks with function headers like:  
in function FunctionName

Declare variables naturally and succinctly, for example:  
let n be integer  
let A be list of integers

Use clear loops and conditionals with standard keywords: for, while, if, else, continue, break. Use symbolic operators (=, ≠, <, >, ≤, ≥, +, -, *, /, ←) and increment/decrement shorthand (x++, x--) when appropriate. Structure control flow compactly, e.g., place loop and conditional bodies on the same line if short.

Do not add any code that is not necessary to fully represent the problem solution logic. Ensure your pseudocode fits within a 5-second generation constraint by focusing on brevity and structured clarity alone. Output only the pseudocode text.