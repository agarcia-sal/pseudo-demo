Translate the given code into compact, uniform pseudocode that strictly preserves original control structures, variable assignments, function calls, and loops without altering logic or structure.  
Use clear, mostly one-line statements combining natural language and simple symbolic notation (e.g., ← for assignment, ++ for increment).  
Favor concise, high-level expressions and natural wording; use abbreviations only if unambiguous. Prefer “let x be integer,” “read x,” “print y,” “for i = 0 to n-1,” “if x > y then,” etc.  
Omit details only if absolutely necessary to shorten output while maintaining core correctness and flow.  
Do not include explanations, comments, summaries, or any text beyond pseudocode lines.  
Number all lines starting from 1 with no blank or separator lines.  
Use consistent indentation (tabs or 4 spaces) to indicate nested blocks.  
Follow this style strictly; example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integers of size n  
5. for i = 0 to n-1:  
6. &emsp;read A[i]  
7. for i = 0 to n-2:  
8. &emsp;set min_i ← i  
9. &emsp;for j = i+1 to n-1:  
10. &emsp;&emsp;if A[j] < A[min_i] then min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A  

Produce compact, readable pseudocode that matches this style and correctly models the given code.