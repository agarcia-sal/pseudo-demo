Translate the given code into clear, concise pseudocode that strictly preserves the original control flow, variable assignments, function calls, and loops. Use a uniform, simple style that is easy to read and understand, leveraging natural language with concise symbolic notation and standard abbreviations. Prefer one-line statements wherever possible.  

- Maintain the original code’s structure and logic precisely, but it is acceptable to omit minor details or less critical operations if it significantly reduces line count without losing essential understanding.  
- Express control constructs naturally and compactly, e.g., “for i = 0 to n-1”, “while x < n”, “if x > y then”.  
- State variable declarations only when necessary for clarity, e.g., “let x be integer”.  
- Clearly state inputs and outputs as “read n”, “print x”, or similar brief forms.  
- Number every pseudocode line sequentially starting at 1, as shown below:  

1. x ← 0  
2. while x < n: x++  

- Omit all explanations, summaries, comments, or notes; output pseudocode lines only.  
- Avoid any additional formatting, headers, or separator lines.  
- Maximize precision and conciseness to comply with a strict 10-second processing limit.  
- Use succinct, high-level language to make the pseudocode compact and readable without losing essential control flow and state changes.  

Example output style:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A