Translate the given code into concise, high-level pseudocode that strictly preserves its structure: represent all control flows, variable assignments, function calls, and loops uniformly and simply.  
Use mostly natural language with compact symbolic notation and standard abbreviations to keep pseudocode clear and readable. Prefer one-liners when possible; use indentation only for nested blocks to show structure clearly.  
Express input/output plainly, e.g., “read x”, “print y”. Declare variables only when it improves clarity (e.g., “let x be integer”). Write loops and conditionals tersely and naturally, e.g., “for i ← 0 to n-1”, “if x > y then”.  
Omit less-essential details or complex expressions if doing so reduces verbosity without losing core logic or control flow.  
Do not include explanations, comments, summaries, or any extra text—output only pseudocode lines starting at 1 with no empty or separator lines.  
Use consistent style and formatting throughout.  
Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A