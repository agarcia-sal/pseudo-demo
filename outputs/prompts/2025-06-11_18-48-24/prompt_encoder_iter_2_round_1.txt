Translate the given code into concise, clear pseudocode that strictly preserves its original structure—including all control flows, variable assignments, function calls, and loops—expressed uniformly using simple, natural language enhanced with standard symbolic notations and abbreviations. Produce a compact, high-level representation favoring one-line statements when possible.  
Omit any purpose statements, explanations, summaries, or clarifications—output only the numbered pseudocode lines starting at 1, formatted as in the examples below.  
You may omit minor details if doing so reduces line count without losing essential logic or breaking the code’s structure.  
Use natural but compact control structures such as “for i = 0 to n-1”, “while x < y”, “if condition then”, and concise variable declarations only when helpful (e.g., “let x be integer”, “let A be vector of integers”).  
State input/output simply as “read x” or “print y”. Use symbolic shorthand (←,++, --, etc.) where clear and consistent.  
Avoid any separators, extra formatting, or notes outside the numbered pseudocode lines.  
Adopt a readable, uniform style that balances expressiveness with brevity, and fits within a strict 10-second runtime limit.

Example output style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers, size n  
5. read n elements into A  
6. for i = 0 to n-1  
7.   set min_i ← i  
8.   for j = i+1 to n-1  
9.    if A[min_i] > A[j] then min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A