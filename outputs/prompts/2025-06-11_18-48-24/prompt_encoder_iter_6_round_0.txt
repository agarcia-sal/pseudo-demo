Translate the given code into concise pseudocode that faithfully preserves the original control flow, variable assignments, function calls, and loops, using consistent, simple, and uniform syntax.  
Favor natural, easy-to-read language that is high-level and compact, primarily one statement per line.  
Use concise symbols and common abbreviations where appropriate (e.g., ← for assignment, ++ for increment).  
It is acceptable to omit less critical details or minor expressions to shorten the output, even if that means skipping some intermediate steps, as long as the core logic and structure remain intact.  
Express input/output directly (e.g., “read x”, “print y”) and declare variables only if it enhances clarity.  
Represent loops and conditionals naturally but briefly (e.g., “for i = 0 to n-1”, “while x < y”, “if x > y then”).  
Do not add any explanations, comments, summaries, or extra text; output only the numbered pseudocode lines, starting at 1 without blank or separator lines.  
Use a single, consistent style throughout, avoiding verbose or language-specific idioms.  
Example style to strictly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integers, size n  
5. for i = 0 to n-1:  
6. &emsp;read A[i]  
7. for i = 0 to n-2:  
8. &emsp;min_i ← i  
9. &emsp;for j = i+1 to n-1:  
10. &emsp;&emsp;if A[j] < A[min_i] then min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A  

Prioritize clarity and line count reduction equally to maximize correctness within a 10-second runtime limit.