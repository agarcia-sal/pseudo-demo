Translate the given code into concise, easy-to-read pseudocode that strictly preserves the original structure: represent all control flows, variable assignments, function calls, and loops uniformly and simply.  
Use mostly natural language phrased compactly and at a high level, combined with symbolic notation and standard abbreviations. Prefer terse, single-line statements when possible; indent nested blocks clearly but avoid unnecessary verbosity.  
Express input/output plainly (e.g., “read x”, “print y”). Declare variables sparingly, only when it aids clarity (e.g., “let x be integer”).  
Use natural, terse forms for loops and conditionals (e.g., “for i ← 0 to n-1”, “if x > y then”).  
It’s acceptable to omit complex expressions or details if doing so reduces line count without sacrificing core logic or control flow.  
Output only the pseudocode lines, numbered consecutively starting at 1, with no empty lines, comments, summaries, or extraneous text. Keep a single consistent style throughout.  
Do not include separator lines or explanatory notes.  
Use the format illustrated below as a style reference (use indentation with tabs or spaces for nested blocks):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to n - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to n - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A