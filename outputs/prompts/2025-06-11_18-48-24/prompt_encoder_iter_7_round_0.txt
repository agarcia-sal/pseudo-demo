Translate the given code into clear, concise pseudocode that strictly preserves the original structure, including all control flows, variable assignments, function calls, and loops, representing them uniformly and simply.  
Produce readable, high-level pseudocode using mostly natural language combined with compact symbolic notation and standard abbreviations. Favor short one-line statements wherever possible; use indentation to indicate nested blocks.  
Express input/output plainly (e.g., “read x”, “print y”) and declare variables only when it aids understanding (e.g., “let x be integer”).  
Use natural, terse constructs for loops and conditionals (e.g., “for i ← 0 to n-1”, “if x > y then”).  
Omit details if doing so reduces verbosity without losing key logic or control flow; prioritize brevity over exhaustive detail.  
Output only the numbered pseudocode lines starting at 1, without separator lines, empty lines, explanations, comments, or extra text.  
Use a single consistent style throughout.

Example format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A