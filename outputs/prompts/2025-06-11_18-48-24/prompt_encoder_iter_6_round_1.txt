Translate the given code into clear, concise pseudocode that strictly preserves all control flow, variable assignments, function calls, and loops using a uniform, minimalist style.  
Use mostly natural language combined with simple symbols and abbreviations to achieve compact, high-level pseudocode. Prefer one statement per line with minimal nesting indicators (indent with tabs or 1-2 spaces).  
Represent all input/output explicitly and simply (e.g., "read x", "print y"). Declare variables only when it clarifies meaning (e.g., “let x be integer”).  
Write loops and conditionals naturally but tersely (e.g., “for i = 0 to n-1”, “if x > y then”). Use symbolic operators for assignment and increment (e.g., “←”, “++”).  
Omit any explanatory text, comments, summaries, or blank lines—output only the numbered pseudocode lines, starting at 1, with consistent indentation reflecting code blocks.  
Do not use separators or section lines. Always maintain the original code’s structural order and logic flow.  
If necessary to reduce length, you may abstract or shorten less critical operations without losing essential functionality.  
Example style to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integer size n  
5. read n elements into A  
6. for i = 0 to n-1  
7. &emsp;min_i ← i  
8. &emsp;for j = i+1 to n-1  
9. &emsp;&emsp;if A[min_i] > A[j] then min_i ← j  
10. &emsp;swap A[i], A[min_i]  
11. print all elements of A