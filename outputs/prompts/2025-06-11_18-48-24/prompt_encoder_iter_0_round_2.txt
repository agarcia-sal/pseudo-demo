Translate the given code into concise, readable pseudocode that rigorously preserves the original structure—including all control flows, variable assignments, function calls, and loops—while expressing them uniformly and simply.  
Prefer natural language phrasing with symbolic notation and common abbreviations to keep the pseudocode compact and high-level. Use one-line statements where feasible to reduce line count without losing essential logic.  
You may omit some internal details or less critical steps if this improves brevity and clarity without compromising key structural correctness.  
Declare variable types briefly when first introduced (e.g., “let x be integer”), and express input/output plainly (e.g., “read n”, “print x”). For loops and conditions, use straightforward natural forms (e.g., “for i = 0 to n-1”, “if x > y then”).  
Do not include explanations, summaries, comments, or notes—output only the pseudocode lines numbered as shown below:  

1. x ← 0  
2. while x < n: x++  

Avoid separator lines or extra formatting. Keep the style consistent and clear. Assume a 10-second generation limit; prioritize the most accurate and compact pseudocode possible within that time.