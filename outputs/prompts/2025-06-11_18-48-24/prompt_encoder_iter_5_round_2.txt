Translate the given code into succinct, uniform pseudocode that strictly preserves the original control flow, variable assignments, function calls, and loops while using simple, consistent constructs.  
Make the pseudocode easy to read by using mostly natural language, but keep it high-level, compact, and concise—prefer one-line statements with symbolic shortcuts (e.g., ← for assignment, ++ for increment).  
Express input/output clearly but briefly (e.g., “read x”, “print y”). Declare variables only if it improves readability.  
Use natural, terse expressions for conditionals and loops (e.g., “if x > y then”, “while x < n: x++”, “for i = 0 to n-1”).  
It is acceptable to omit minor details or less critical expressions if doing so shortens output without losing the core logic or structure.  
Do not include any explanations, comments, summaries, or extra text—output only pseudocode lines numbered sequentially from 1 with no blank or separator lines.  
Use a single consistent pseudocode style throughout, avoid verbose or language-specific idioms, and prioritize compactness to maximize correctness and coverage within a 10-second runtime limit.  

Example format to strictly follow:

1. in function main  
2. let n be integer  
3. read n  
4. for i = 0 to n-1:  
5. &emsp;process element i  
6. print result