Translate the given code into clear, concise pseudocode that strictly preserves the original code’s control flow, variable assignments, function calls, and loops in a uniform, simple style.  
Express logic in mostly natural language combined with compact symbolic notation and standard abbreviations; use high-level, readable constructs that avoid unnecessary verbosity.  
Favor one-liners where possible; use indentation only to denote nested blocks (e.g., inside loops or conditionals) without extra spacing or blank lines.  
Represent inputs and outputs plainly (e.g., “read x”, “print y”), and declare variables only if it improves understanding (e.g., “let x be integer”).  
Write loops and conditions tersely: e.g., “for i ← 0 to n-1”, “while x < y”, “if x > y then”.  
Omit any comments, explanations, extra text, or summaries—output exactly and only the pseudocode lines, numbered from 1, with no empty or separator lines.  
If necessary to reduce line count, omit less crucial details or inline complex expressions without losing core flow or correctness.  
Use consistent style throughout, with symbolic assignments using “←” and terse control keywords.  

Example format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A