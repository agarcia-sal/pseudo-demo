Translate the given code into clear, compact pseudocode that strictly preserves the original code’s structure—control flow, variable assignments, function calls, and loops—expressed uniformly and simply.  
Use mostly natural language with concise symbols and abbreviations to keep pseudocode high-level, readable, and mostly one-line per statement.  
Prefer symbolic assignment (e.g., `x ← 0`), terse but explicit loop and conditional constructs (e.g., `for i = 0 to n-1`, `if x > y then`), and straightforward I/O (e.g., `read x`, `print y`).  
Declare variables only when it clarifies meaning but omit minor or trivial details to reduce line count—even at the cost of skipping some details—to maximize compactness and readability.  
Do not add any explanations, purpose statements, comments, or extraneous text—output only the numbered pseudocode lines, starting at 1, with no blank or separator lines.  
Use one consistent pseudocode style throughout, avoiding language-specific idioms or verbose expressions.  
Example format to follow strictly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read elements into A  
6. for i = 0 to n-1:  
7. &emsp;set min_i ← i  
8. &emsp;for j = i+1 to n-1:  
9. &emsp;&emsp;if A[min_i] > A[j] then min_i ← j  
10. &emsp;swap A[i], A[min_i]  
11. print all elements of A

Your output must prioritize compactness, clarity, and fidelity to the original code’s logic to maximize correctness under a 10-second runtime constraint.