Translate the given code into clear, concise pseudocode that strictly preserves the original structure: represent all control flows, variable assignments, function calls, and loops uniformly and simply. Use mostly natural language combined with compact symbolic notation and standard abbreviations to keep the pseudocode high-level, readable, and brief. Prefer one-liners and concise blocks; indent nested statements but avoid unnecessary verbosity. Express inputs/outputs plainly (e.g., “read x”, “print y”). Declare variables only if it improves understanding (e.g., “let x be integer”). Use natural and terse conditionals and loops (e.g., “for i ← 0 to n-1”, “if x > y then”). It is acceptable to omit some details if this reduces line count without losing core logic or control flow. Do not add explanations, comments, or summaries; output only the pseudocode lines numbered from 1, with no empty or separator lines. Use a single consistent style throughout.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A