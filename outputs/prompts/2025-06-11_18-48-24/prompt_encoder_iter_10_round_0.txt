Translate the given code into clear, compact pseudocode that strictly preserves the original structure: represent all control flows, variable assignments, function calls, and loops uniformly and simply.  
Use mostly natural language with concise symbolic notation and standard abbreviations to keep the pseudocode high-level, terse, and easy to read. Favor single-line statements when possible; indent nested blocks consistently.  
Express input/output plainly (e.g., “read x”, “print y”) and declare variables only if it improves clarity (e.g., “let x be integer”).  
Write loops and conditionals naturally but concisely, e.g., “for i ← 0 to n-1”, “while x < y”, “if x > y then”.  
Omit less critical details or complex expressions if doing so reduces verbosity without losing core logic or flow.  
Do not include explanations, comments, summaries, or any extra text—output only the pseudocode lines numbered consecutively from 1, with no blank lines or separators. Use a single consistent style throughout.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A