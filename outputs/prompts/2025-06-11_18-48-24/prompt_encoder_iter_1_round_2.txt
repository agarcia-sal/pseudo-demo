Translate the given code into concise, clear pseudocode that preserves all control flow, variable assignments, function calls, and loops exactly as in the original.  
Express these elements uniformly and simply, using natural language combined with compact symbolic notation and established pseudocode abbreviations to keep the output high-level, readable, and brief.  
Favor single-line statements whenever possible, minimizing the total number of lines while retaining essential logic and structure; omitting some less critical details is allowed if line count is reduced without altering correctness.  
Use natural, easy-to-understand expressions for control forms (e.g., “for i = 0 to n-1”, “while x < n”, “if x > y then”), for input/output (e.g., “read n”, “print x”), and for variable declarations only when clarity benefits (e.g., “let x be integer”).  
Maintain the original code’s block structure by indenting nested statements clearly but avoid any additional formatting such as separator lines or headers other than what’s required to show structure.  
Number the pseudocode lines sequentially starting from 1, strictly outputting only these numbered pseudocode lines without explanations, comments, summaries, or notes.  
Adopt consistent, simple shorthand and symbols (like “←” for assignment) and concise idiomatic forms for common operations (e.g., “x++” for increment).  
Assume a strict 10-second runtime limit—maximize precision and brevity while fully preserving the original code’s essential logic and flow.

Example format to follow exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8. set min_i to i  
9. for j = i+1 to size of A exclusive  
10.  set min_i to j if A[min_i] > A[j]  
11. swap A[i], A[min_i]  
12. print all elements of A