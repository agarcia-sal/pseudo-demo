Translate the given code into concise, uniformly structured pseudocode that preserves all control flows, variable assignments, function calls, and loops exactly.  
Use predominantly natural language combined with compact symbolic notation and common abbreviations to keep it high-level, clear, and easy to read. Favor short one-line statements where possible, using indentation only for nested blocks.  
Express inputs and outputs plainly (e.g., “read x”, “print y”). Declare variables only if it aids understanding, succinctly (e.g., “let x be integer”).  
Use terse, natural constructs for loops and conditionals (e.g., “for i ← 0 to n-1”, “if x > y then”).  
It is permitted to omit or simplify complex computations or details if this reduces verbosity without altering control flow or core logic.  
Do not include any commentary, explanations, summaries, or extra text—output only the pseudocode lines, numbered from 1 without blank or separator lines. Use a single consistent style throughout.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A