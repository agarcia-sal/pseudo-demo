Translate the given code into concise, uniform pseudocode that preserves all control flow, variable assignments, function calls, and loops exactly as structured in the original.  
Use natural language combined with brief symbolic notation to ensure the pseudocode is high-level, compact, mostly one-line per statement, and easy to read.  
Express inputs/outputs clearly (e.g., “read x”, “print y”), declare variables only if it improves comprehension (e.g., “let x be integer”), and represent loops/conditionals simply but precisely (e.g., “for i ← 0 to n-1”, “if x > y then”).  
Omit less crucial details or simplify expressions if it reduces verbosity without losing essential logic or flow.  
Do not include explanations, comments, summaries, or any extra text—output solely the numbered pseudocode lines, starting at 1, no blank or separator lines.  
Use consistent style throughout, preferring symbolic arrows (←), concise keywords, and no language-specific idioms.  
Example format to strictly follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integers with size n  
5. for i ← 0 to n-1:  
6. &emsp;read A[i]  
7. for i ← 0 to n-1:  
8. &emsp;min_i ← i  
9. &emsp;for j ← i+1 to n-1:  
10. &emsp;&emsp;if A[min_i] > A[j] then min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A

Prioritize compactness and clarity, favoring one-line control statements and minimal verbosity to maximize correctness and completeness within a 10-second runtime constraint.