Translate the given code into concise, high-level pseudocode that preserves all control flows, variable assignments, function calls, and loops uniformly and simply.  
Use mostly natural language combined with compact symbolic notation and standard abbreviations to produce readable, succinct pseudocode. Favor concise one-liners for statements and conditions; use indentation only for nested blocks where line breaks occur.  
Represent input/output plainly (e.g., “read x”, “print y”). Declare variables only if it aids clarity (e.g., “let x be integer”). Loops and conditionals should be natural and terse (e.g., “for i ← 0 to n-1”, “if x > y then”).  
Omit less essential details or complex expressions if doing so reduces verbosity without losing the original control flow or core logic.  
Output only the pseudocode lines with numbering starting at 1; do not include separators, comments, explanations, or any extra text. Use a single consistent style throughout.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A