Translate the given code into clear, concise pseudocode that strictly preserves the original code’s structure—including all control flows, variable assignments, function calls, and loops—expressed uniformly and simply.  
Use mostly natural language combined with concise symbolic notation and standard abbreviations to keep the pseudocode compact, high-level, and easy to read. Favor one-line statements whenever possible.  
It is acceptable to omit some details or minor operations if this significantly shortens the pseudocode without losing the essential logic or control flow.  
Declare variables only when it clarifies the code (e.g., “let x be integer”), and specify input/output plainly (e.g., “read n”, “print x”).  
Express control structures naturally and succinctly, using simple forms such as “for i = 0 to n-1”, “while x < y”, “if cond then”, and one-line conditionals if concise.  
Do not include any explanations, comments, summaries, or purpose statements. Output only the pseudocode lines numbered sequentially, strictly following this example style and formatting exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. for i = 0 to n-1: read A[i]  
6. for i = 0 to n-2  
7.   set min_i to i  
8.   for j = i+1 to n-1: if A[j] < A[min_i] then min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A  

Do not insert any separator lines or extra formatting. Output nothing except the numbered pseudocode lines.  
Maximize compactness and precision under a 10-second runtime constraint, prioritizing faithful control flow and core logic representation over exhaustive detail.