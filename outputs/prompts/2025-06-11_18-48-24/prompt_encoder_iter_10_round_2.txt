Translate the given code into concise, high-level pseudocode that strictly preserves its original structure: represent all control flows, variable assignments, function calls, and loops uniformly and clearly.  
Use primarily natural, plain language mixed with short symbolic notation and common abbreviations to keep the pseudocode readable and compact. Prefer single-line statements when possible, using indentation only for nested blocks or multi-step constructs.  
Express input/output explicitly and simply (e.g., "read x", "print y"). Declare variables only if it clarifies understanding (e.g., "let x be integer").  
Use terse, natural constructs for loops and conditionals (e.g., "for i ← 0 to n-1", "if x > y then"). Omitting details, intermediate variables, or complex expressions is acceptable when it reduces verbosity without altering control flow or core logic.  
Output only pseudocode lines numbered sequentially from 1, with no empty lines, extra text, comments, explanations, or separators. Use a consistent style throughout.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to n - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to n - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A