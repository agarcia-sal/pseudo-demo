Translate the given code into clear, compact pseudocode that faithfully preserves the original structure: all control flows, variable assignments, function calls, and loops must be represented consistently and simply. Use mostly natural language with concise symbolic notation and standard abbreviations to make the pseudocode high-level, readable, and brief. Favor one-liners where possible, using indentation only for nested blocks. Use direct phrases for input/output (e.g., “read x”, “print y”), declare variables only if it aids clarity (e.g., “let x be integer”). Express loops and conditionals naturally and tersely (e.g., “for i ← 0 to n-1”, “if x > y then”), and use simple assignment forms (←, =, to) consistently. It’s acceptable to omit less critical details or complex expressions if doing so reduces verbosity without losing essential logic or control flow.

Do not include explanations, comments, notes, summaries, or any text beyond the pseudocode lines. Begin output lines at 1 and number every line without gaps or separators.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to size of A - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print all elements of A