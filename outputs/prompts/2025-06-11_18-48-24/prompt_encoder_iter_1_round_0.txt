Translate the given code into clear, concise pseudocode that preserves the exact control flow, variable assignments, function calls, and loops, expressed uniformly and simply.  
Use primarily natural language with symbolic notation and abbreviations to keep the pseudocode compact and high-level but easily readable. Prefer single-line statements whenever possible.  
You may omit some implementation details if doing so significantly reduces line count without losing main structural logic or correctness.  
Declare variables with simple type annotations when relevant (e.g., “let x be integer”), describe input/output plainly (e.g., “read n”, “print x”), and express loops and conditions in natural, terse forms (e.g., “for i = 0 to n-1”, “if x > y then”).  
Do not include any purpose, summary, explanations, comments, or notes—only output the numbered pseudocode lines, without any decorative or separator lines.  
Format each line as a number and one space, followed by the pseudocode statement, e.g.:  
1. x ← 0  
2. while x < n: x++  
Aim for maximal clarity combined with tight conciseness. Assume a 10-second timeout; produce the most precise and minimal pseudocode possible within this limit.