Translate the given code into clear, concise pseudocode that strictly preserves the original structure: all control flows, variable assignments, function calls, and loops must be represented uniformly and simply.  
Use mostly natural language combined with simple, compact symbolic notation and standard abbreviations to keep the pseudocode high-level and readable. Favor one-liners where possible, but use indentation for nested blocks.  
Express input/output plainly (e.g., “read x”, “print y”). Declare variables only if it improves understanding (e.g., “let x be integer”).  
Loops and conditionals should be natural and terse (e.g., “for i ← 0 to n-1”, “if x > y then”).  
It is acceptable to omit less essential details or complex expressions if that reduces verbosity without losing core logic or control flow.  
Do not include explanations, comments, summaries, or any extra text—output only the pseudocode lines, starting at 1 without empty or separator lines. Use a single consistent style throughout.  
Example format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. for i ← 0 to n - 1  
6. &emsp;read A[i]  
7. for i ← 0 to n - 1  
8. &emsp;set min_i ← i  
9. &emsp;for j ← i + 1 to n - 1  
10. &emsp;&emsp;if A[j] < A[min_i] then set min_i ← j  
11. &emsp;swap A[i], A[min_i]  
12. print A  

Prioritize brevity and clarity to maximize correctness and completeness within a 10-second runtime limit.