Translate the given code into concise, high-level pseudocode that clearly preserves the original code structure, including all control flows, variable assignments, function calls, and loops.  
Use simple, uniform expressions combining natural language with brief symbolic notation and common abbreviations, favoring one-line statements wherever possible for compactness and clarity.  
Omit any explanations, comments, summaries, or notes and produce only the pseudocode lines numbered sequentially, e.g.:

1. x ← 0  
2. while x < n: x++  

Declare variables only when it improves clarity (e.g., “let x be integer”), state input/output plainly (e.g., “read n”, “print x”), and represent control structures naturally and briefly:  
- loops: “for i = 0 to n-1”, “while condition do”  
- conditionals: “if x > y then”, “else”  
- function definitions: “in function fname”, “return value”  

It is acceptable to omit less critical details or simplify expressions if doing so shortens the pseudocode without losing core logic or flow.  
Avoid all formatting extras, separator lines, or additional text; output only the numbered pseudocode steps as shown.  
Maximize readability and precision within a strict 10-second runtime limit—prioritize essential logic with minimal verbosity.