```python
Translate the given pseudocode into clean, idiomatic, and highly efficient Python code while strictly preserving all class names, function names, method signatures, and class/object hierarchies as provided in the pseudocode. Adhere to these directives precisely:

- Output exactly one single Python code block containing the entire implementation, formatted as:

```python
# entire translated solution here
```

- Maintain unchanged all class names and their hierarchy, along with exact function/method names and parameter names in the signatures.

- Convert pseudocode constructs and data structures faithfully to their most appropriate Python equivalents, e.g., lists, dicts, sets, None, tuples, deque, etc. Define minimal helper functions or classes only when strictly necessary and only within the same code block.

- Translate all control flow elements — loops, conditions, iteration boundaries, sentinel values, and logical operators — exactly as intended by the pseudocode, using efficient Python idioms (e.g., comprehensions, generators, built-in functions) where possible without altering algorithmic logic.

- Employ Python’s standard library and widely accepted packages (e.g., collections, heapq, math, functools, itertools) when they improve clarity, correctness, performance, or readability. Avoid obscure or uncommon dependencies.

- Robustly handle all implied edge cases, input constraints, and corner conditions as indicated or reasonably inferred from the pseudocode to ensure the solution is correct and reliable.

- Optimize for runtime efficiency and resource usage aiming to complete execution within a 5-second timeout, balancing clarity and performance.

- Do not add explanatory comments, debugging output, or any extraneous print statements. Produce only valid executable code within the specified code block.

- Do NOT invent, change, or omit any part of the original algorithm, logic, or data flow expressed in the pseudocode.

Your objective: produce a single, clean, fully executable Python code snippet that is a faithful, robust, and performant implementation of the given pseudocode, enclosed strictly within a single Python code block as shown above.
```