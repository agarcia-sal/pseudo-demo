Write concise, natural-language pseudocode that is clear, easy to read, and abstracted at a high level from the given problem description. Preserve **all class names, function names, and their hierarchy exactly as stated**, including their nesting within classes or objects.

Use mostly natural language enriched sparingly with symbolic notation (e.g., ←, +, ==) and standard abbreviations to keep lines compact and expressive. Prefer **single-line statements where suitable** and omit verbose control keywords; use minimal syntax required to convey logic unambiguously.

Number each pseudocode line starting from 1, following this exact formatting style:
```
1. x ← 0
2. while x < n: x++
```

Avoid separator lines, comments, or explanatory notes—**output only the pseudocode** without any additional text.

Example

Given this code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode as:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```

This style ensures readability while capturing all structural and naming details verbatim from the input problem.