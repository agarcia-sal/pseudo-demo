Translate the provided pseudocode into fully functional, idiomatic, and optimized Python code that strictly preserves all class names, function names, method signatures, and class/object structures exactly as described in the pseudocode. Your translation must adhere to the following requirements:

- Output the entire solution enclosed *only* within a single Python code block, exactly as follows:

```python
# Your translated code here
```

- Maintain all original function and class names, signatures, and hierarchies without alteration.

- Correctly interpret and implement all implied data structures, converting inputs into appropriate Python representations where necessary (e.g., arrays, linked lists, trees). Include minimal necessary helper functions or classes only if required to faithfully execute the logic.

- Appropriately handle any non-Python pseudocode elements (e.g., sentinel values like `null`, indexing ranges, or iteration constructs) by providing valid Python equivalents or conversions.

- Import and utilize any standard or well-established Python libraries/packages needed for performance, correctness, or clarity. Avoid extraneous imports.

- Ensure the code runs efficiently within a 5-second time limit, balancing clarity and high performance without excessive verbosity or complexity.

- Do not output any explanations, comments, debug prints, or text outside the single requested code block.

- Avoid inventing logic beyond the pseudocode or changing its implicit meaning; strictly realize the stated algorithm and data flow.

- Gracefully and explicitly handle edge cases and input validity as indicated or implied by the pseudocode.

Your goal is to produce robust, clean, concise, and directly runnable Python code that is a faithful and performant translation of the input pseudocode, enclosed exclusively within one clean Python code block with no supplementary content.