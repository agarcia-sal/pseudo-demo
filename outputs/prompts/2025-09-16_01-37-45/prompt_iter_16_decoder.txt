Translate the given pseudocode into clean, fully functional, idiomatic, and efficient Python code strictly preserving all class names, function names, method signatures, and class/object hierarchies exactly as presented. Your translation must follow these precise instructions:

- Output only a single Python code block enclosing the *entire* solution, formatted exactly as:

```python
# translated code here
```

- Retain all original function and class names and signatures without any modification.

- Faithfully convert all pseudocode data structures and conventions into appropriate Python types and idioms (e.g., lists for arrays, dicts for maps, None for null, etc.). Implement minimal helper functions or classes only if essential to accurately reproduce the algorithm described.

- Carefully translate all pseudocode control flows, iteration ranges, sentinel values, and logical conditions into correct, efficient Python equivalents.

- Import and utilize standard and widely accepted Python libraries if they improve clarity, correctness, or performance, but avoid unnecessary or obscure dependencies.

- Rigorously handle all implied edge cases and potential input constraints as indicated or suggested by the pseudocode to ensure robustness.

- Maximize clarity, conciseness, and runtime efficiency without sacrificing correctness or fidelity to the source pseudocode, targeting execution within a 5-second timeout.

- Do not add explanatory comments, debug statements, extraneous output, or any content outside the single specified Python code block.

- Do not invent or alter the problem logic; implement exactly the algorithm and data flow described by the pseudocode.

Your goal: produce a single, clean, executable Python code snippet that is a faithful, robust, and performant realization of the provided pseudocode, strictly adhering to these guidelines and enclosed exclusively within one Python code block as shown above.