Write clear, easy-to-read, and compact high-level pseudocode directly from the problem description, preserving all function and class names exactly as given, including their full hierarchy and structures.

Use natural language enriched with well-chosen symbolic notations (e.g., ←, +, ==, !=, <, >) and abbreviations to keep the pseudocode concise yet expressive. Prefer one-liners where appropriate, omit unnecessary control keywords, separator lines, extra blank lines, and avoid verbose statements.

Maintain the original naming of functions, methods, classes, variables, and parameters exactly as in the problem. Reflect nested structures (e.g., inner functions, classes) properly through indentation.

Format output as numbered lines like this:

1. x ← 0  
2. while x < n: x++

Output only the pseudocode—no explanations, summaries, comments, or meta-information.

Example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode exactly as:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```