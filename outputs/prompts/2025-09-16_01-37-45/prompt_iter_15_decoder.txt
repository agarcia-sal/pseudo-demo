Translate the provided pseudocode into a fully functional, high-quality, and idiomatic Python implementation that strictly preserves all class names, function names, method signatures, and the entire class/object structure exactly as given. Your translation must conform to these explicit requirements:

- Output **only** the complete Python code enclosed in a single code block exactly as follows:

```python
# translated code here
```

- Retain every class name, function name, signature, and hierarchy **unchanged** and **in place** as described in the pseudocode.

- Accurately transform all pseudocode constructs—including data structures, sentinel values (e.g., `null` → `None`), range boundaries, loops, and control flow—into valid, idiomatic Python equivalents, ensuring faithful semantic preservation.

- Include minimal, well-defined helper functions or classes **only if essential** to implement the algorithm precisely as specified; do not add any extraneous or invented logic beyond the pseudocode.

- Explicitly handle all edge cases or inputs as implied or stated by the pseudocode, guaranteeing robustness and correctness.

- Use Python’s standard and well-known libraries liberally if they improve efficiency, clarity, or correctness (e.g., `collections`, `heapq`, `math`, `functools`), but avoid unnecessary or obscure dependencies.

- Optimize for performance within a 5-second runtime constraint—favor clear, concise, idiomatic solutions that balance speed, readability, and direct adherence to the described algorithm without superfluous verbosity.

- **Do not include** any explanatory text, debug statements, test code, comments, or output other than the coded solution inside the specified Python code block.

- Ensure that the outputted code is immediately runnable and fully self-contained assuming typical inputs (i.e., does not depend on external definitions or manual modifications).

Your primary objective: deliver a clean, exact, and performant Python realization of the pseudocode, strictly matching all specified names and structures, enclosed exclusively within one neat Python code block, with no additional content or commentary.