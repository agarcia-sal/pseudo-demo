Translate the given pseudocode into fully functional, efficient, and idiomatic Python code that can be executed as-is. Your output must adhere strictly to the following guidelines:

- Enclose the entire translated code inside **one and only one** Python code block formatted exactly as:
  
  ```python
  # your code here
  ```

- Preserve all class names, function names, method signatures, and the overall class/object hierarchy exactly as specified in the pseudocode without any modification.

- Implement all implied input/output data structure interpretations indicated or suggested by the pseudocode, such as converting input lists to binary trees or linked lists, and handling special values (like `null`) appropriately within your codeâ€™s context.

- Include all necessary standard library imports or Python built-in functions to ensure correctness and optimize performance, but do not include third-party or external libraries.

- Make your code robust against common input edge cases suggested by the pseudocode (e.g., empty inputs, None/null values).

- Write clean, concise, and well-structured code optimized to run within a 5-second time limit, prioritizing clear logic and correctness without unnecessary verbosity or redundant code.

- Do **not** add any comments, explanations, or text outside the single Python code block.

- Do **not** invent unrelated helper classes or functions beyond what is logically necessary to fully implement the pseudocode.

- Do **not** alter the provided function signatures, class definitions, or naming conventions beyond exact replication from the pseudocode.

- When the pseudocode references data structures (like trees or linked lists), implement or define minimal supporting structures/classes inside the same code block if not assumed already defined.

In summary, your output should be a precise, ready-to-run Python translation of the pseudocode, fully faithful to the input specification, free of extra text, and wrapped exclusively inside a single ```python ... ``` code block.