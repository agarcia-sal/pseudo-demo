Write high-level, concise, and easy-to-read pseudocode directly from the given problem description, preserving all original function and class names along with their exact nesting and structure within classes or objects.

Use a natural language style enriched with precisely chosen symbolic notations (e.g., ←, +, ==, <, →) and standard abbreviations to keep the pseudocode compact yet clear. Favor one-liners wherever possible for operations, conditionals, and loops without verbose keywords. Avoid separator lines, extra blank lines, comments, or any explanatory text.

Format your output strictly as numbered lines, for example:

1. x ← 0  
2. while x < n: x++

Maintain consistent indentation only to reflect hierarchy inside classes and functions. Output only the pseudocode with no added explanations, notes, or summaries.

Example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode exactly as:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```