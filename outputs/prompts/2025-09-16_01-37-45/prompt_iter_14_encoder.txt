Write clear, concise, and easy-to-read pseudocode that directly mirrors the given problem description.  
Preserve all function and class names exactly as provided, including their full nesting within any classes or objects.  

Use mostly natural language with selective use of symbolic notations (e.g., ←, +, ==, +=) and meaningful abbreviations to keep lines compact yet clear.  
Favor single-line constructs for simple statements and control flows without verbose keywords or redundant formatting.  
Omit separator lines, extra blank lines, comments, explanations, or summaries—only output the pseudocode.  

Format output as numbered lines, following this example style:  

1. FUNCTION calc_average(nums)  
2.  SET total TO 0  
3.  FOR num IN nums  
4.   INCREMENT total BY num  
5.  SET avg TO total DIVIDED BY LENGTH OF nums  
6.  RETURN avg  
7. END FUNCTION

Ensure:  
- Function and class definitions replicate original names and structure exactly.  
- Control flow statements (if, while, for) are brief and use symbolic operators where possible.  
- Data structure operations are described clearly but compactly.  
- Variable assignments use “SET” or appropriate verbs (“INCREMENT,” “APPEND”), preferring concise terminology.  

The pseudocode must be sufficiently high-level to preserve logic while being accessible and straightforward to read. Output only the pseudocode—no additional text.