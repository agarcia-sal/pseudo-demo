Write clear, concise, and natural-language-like pseudocode directly from the problem description, preserving all original function and class names exactly as given, including their hierarchical and structural placement within classes or objects.

Use compact, high-level expressions, favoring symbolic operators (←, +, -, ==, etc.) and well-chosen abbreviations to keep lines short yet readable. Prefer one-liner constructs where it does not reduce clarity; minimize verbose control statements. Avoid all separator lines, blank lines, explanations, notes, or comments.

Output only the pseudocode, formatted strictly as numbered lines like this:

1. x ← 0  
2. while x < n: x++

Example:

Given this code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode exactly as:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```

Maintain consistent indentation representing code structure. Use natural language and symbolic notation harmoniously to achieve pseudocode that is simultaneously compact, clear, and highly readable.