Translate the given pseudocode into clean, idiomatic, and fully functional Python code with these strict guidelines:

- Output **only one** complete Python solution enclosed solely within a single Python code block formatted exactly as:
```python
# translated Python code here
```

- Preserve all names exactly as in the pseudocode: class names, function/method names, and signatures. Maintain original class hierarchies and method scopes without modification.

- Faithfully convert all pseudocode constructs, including data structures (arrays, lists, linked lists, trees, graphs), control flow, and sentinel values (e.g., `null` → `None`), into their precise Python equivalents.

- Implement all implied logic and helper functionality only as needed for correctness and completeness, without adding unrelated or extraneous code or changing the algorithm’s intended semantics.

- Explicitly handle all edge cases indicated or logically inferred from the pseudocode to produce robust, error-free Python code.

- You may use any **standard or widely accepted** Python libraries or modules for efficiency, clarity, and correctness, but avoid unnecessary or obscure imports.

- Write highly efficient code that respects a 5-second runtime limit, optimizing both time and space without sacrificing code clarity.

- Do **not** include any explanations, comments, debug prints, or extra text outside the single required Python code block.

- Do **not** invent new logic, change data flow, or interpret the pseudocode beyond what is strictly stated or definitively implied.

Your objective is to produce a direct, performant, idiomatic, and runnable Python implementation that is a faithful and minimalistic translation of the pseudocode, contained exclusively in one clean Python code block.