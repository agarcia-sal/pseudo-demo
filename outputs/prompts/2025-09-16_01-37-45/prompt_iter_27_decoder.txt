```python
Translate the given pseudocode into clean, efficient, and idiomatic Python code, strictly preserving all class names, function names, method signatures, and class/object hierarchies exactly as specified in the pseudocode. Your translation must adhere to these rules:

- Output only one Python code block enclosing the entire solution, formatted exactly as:

```python
# translated code here
```

- Maintain all original function, method, and class names and signatures with zero modifications.

- Accurately and idiomatically convert pseudocode constructs, data types, control flows, iteration ranges, and sentinel values to their Python equivalents, ensuring correctness and optimized performance.

- Use standard Python libraries as needed to enhance readability, correctness, or efficiency, but avoid non-standard or obscure dependencies.

- Implement only minimal helper functions or classes if they are essential to replicate the pseudocodeâ€™s logic faithfully.

- Incorporate robust handling of all edge cases and input constraints implied or stated in the pseudocode to ensure fail-safe and performant execution.

- Optimize translated code for clarity, maintainability, and runtime performance, ensuring the solution executes within a 5-second timeout on typical test inputs.

- Do NOT add comments, debug prints, explanatory text, or any extraneous output outside the single required Python code block.

- Do NOT invent any new logic, alter the described algorithms, or change data flow semantics; the implementation must be a precise functional translation of the pseudocode.

- For recursive or iterative processes, ensure termination conditions and memoization/caching (if applicable) are properly handled to avoid infinite recursion or redundant computations.

Your goal: deliver a single, clean, robust, and high-performance Python code snippet that fully and exactly implements the algorithm described in the pseudocode, enclosed exclusively within one Python code block as shown above.
```