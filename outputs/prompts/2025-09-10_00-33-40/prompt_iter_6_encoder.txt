Generate concise, high-level pseudocode that is easy to read and understand from the given problem description and code. Keep all original function and class names exactly as in the source. Prefer mostly one-line statements mixing symbolic operators (←, ++, --, ≤, ≥, etc.) and natural language to keep it compact. Use natural, simple declarations (e.g., “let A be array of int”, “let node be ListNode”). Express control flow with minimal words and brief constructs like “for i in 0 to n-1:”, “if x ≤ y: do_something”, “while cond: do_something”. Combine short statements when clear and avoid unnecessary indentation or verbosity. Number every line starting from 1 with this exact format:

1. statement  
2. while condition: statement  
3. for i in 0 to n-1: statement

Avoid separators, blank lines, comments, explanations, summaries, or notes. Do not output anything other than the numbered pseudocode lines. Summarize repetitive or straightforward patterns succinctly without expanding to low-level details. Use symbolic notation and abbreviations where they keep the pseudocode clear and unambiguous.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of int with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.  min_i ← i  
8.  for j in i+1 to n-1: min_i ← j if A[j] < A[min_i]  
9.  swap A[i], A[min_i]  
10. print all elements of A