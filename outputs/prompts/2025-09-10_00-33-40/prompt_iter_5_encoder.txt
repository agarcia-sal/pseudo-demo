Generate clear, compact, and easy-to-read pseudocode from the given problem description, preserving all original function names and signatures exactly. Use mostly one-line statements combining symbolic operators and natural language for clarity and brevity. Express control flow with minimal words and concise constructs (e.g., “for i in 0 to n-1:”, “if x ≤ y: do_something”, “while condition: do_something”). Represent data types and structures naturally (e.g., “let A be array of integers”, “let node be ListNode”). When a class or method is defined in the original, include it appropriately but minimize indentation and verbosity.

Number every line sequentially starting from 1, following this exact format:

1. statement  
2. while condition: statement  
3. for i in 0 to n-1: statement

Avoid comments, explanations, overviews, or notes. Do not insert separators, headings, or blank lines. Summarize repetitive or straightforward patterns concisely without expanding into low-level details. When helpful, use symbolic notations (←, ++, --, ≤, ≥) and abbreviations but keep the pseudocode straightforward and unambiguous.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. for i in 0 to n - 1: read A[i]  
6. for i in 0 to n - 2:  
7.  min_i ← i  
8.  for j in i + 1 to n - 1: min_i ← j if A[j] < A[min_i]  
9.  swap A[i], A[min_i]  
10. print all elements of A

Output only the numbered pseudocode lines as described, no other text.