Generate concise, clear, and compact pseudocode from the given problem description as follows:  
- Preserve all original class names, function names, signatures, and their hierarchical structure exactly as in the source code.  
- Output only the pseudocode steps, numbered line-by-line with a consistent, simple format such as:  
  1. x ← 0  
  2. while x < n: x++  
- Use mostly natural language mixed with symbolic notation and abbreviations to keep lines brief but accurate—prefer one-line commands and terse expressions without sacrificing correctness.  
- Avoid comments, explanations, summaries, or any extra text; output pseudocode only.  
- Represent control flow and data operations precisely and clearly, assuming standard data structures and operations without explicit declarations or imports.  
- Format nested blocks by indentation consistent with common pseudocode style, ensuring readability while minimizing verbosity.  
- Do not add separator lines, titles, or any extra formatting—only numbered, indented pseudocode lines.  
- Maintain input parameters, return types, and variable names unchanged as stated in the original code.  
- Use zero-based indexing and conventional programming idioms unless the original code dictates otherwise.  
- The output should be self-contained, directly traceable to the original code logic, enabling straightforward implementation mapping.  
- Optimize for natural language fluency, brevity, clarity, and a strict 5-second generation time constraint.  
- Produce output pseudocode only, with no surrounding explanation or notes.