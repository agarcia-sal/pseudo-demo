```python
Translate the given pseudocode into a single, fully self-contained, and runnable Python code block that strictly preserves all class names, function names, method names, and their exact argument signatures and hierarchical structures as given in the pseudocode.

If the pseudocode involves complex data structures presented in a serialized format—such as binary trees represented by lists (e.g., [1,2,null,3]) or singly linked lists represented by lists (e.g., [1,2,3])—you must:

- Define all necessary helper classes (e.g., TreeNode, ListNode) with appropriate typing.
- Implement robust, fully tested helper functions for converting these serialized inputs into properly linked Python object instances.
- Properly handle and convert all instances of `null` (case-insensitive) or other null-like placeholders to Python `None`.
- Ensure the helper constructors and converters handle edge cases gracefully, including empty lists or lists with intermediate `None` values.

Your final code must:

- Import any standard Python modules required (e.g., typing, collections, heapq, math) to write clean, idiomatic, and efficient code.
- Convert all given serialized input parameters inside the solution method or constructor, so that the core solution logic receives correctly typed inputs and never accesses raw lists or raw primitives where objects are expected.
- Maintain exact method signatures from the pseudocode including correct usage of `self` in methods, and any decorators or type hints if present.
- Avoid any extraneous print statements, comments beyond minimal, meaningful inline clarifications, or explanation text outside the code block.
- Ensure your output is a single continuous Python code block enclosed strictly in triple backticks with python specified as:
```python
# Your translated code here
```
No additional text or explanation before, inside, or after the code block.

The goal is to produce clean, reliable, test-ready Python code from any given pseudocode input with complex data structures or classes, minimizing runtime or attribute errors related to input formats or missing definitions.
```