Generate concise, high-level pseudocode from the given problem description that is easy to read and understand.  
- Preserve all original class names, function names, signatures, and their nesting exactly as in the source code.  
- Produce pseudocode steps numbered line-by-line, using a consistent format like:  
  1. x ← 0  
  2. while x < n: x++  
- Use primarily natural language combined with symbolic notation and abbreviations, favoring clear one-liners and compact expressions without losing correctness.  
- Avoid comments, purpose statements, explanations, summaries, or any notes—output only the pseudocode steps.  
- Reflect precise control structures and data manipulations logically and succinctly, assuming standard data structures and operations exist without declarations or imports.  
- Format nested blocks by indentation aligned with typical pseudocode style, minimizing verbosity but maintaining readability.  
- Do not insert separator lines, titles, or any extraneous formatting.  
- Output should be self-consistent and directly traceable back to the original code for straightforward implementation mapping.  
- Assume input parameters and return values as stated; do not redefine or change their names or types.  
- Use zero-based indexing and common programming idioms unless the original code implies otherwise.  
- Output only pseudocode, no extra text or explanation before or after.  
- Optimize for clarity, brevity, and natural flow within a strict 5-second generation time limit.