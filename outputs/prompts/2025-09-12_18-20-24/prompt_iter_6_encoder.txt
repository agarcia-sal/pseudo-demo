Generate concise, clear, high-level pseudocode from the given problem description, preserving all original class and function names exactly with their full signatures and hierarchy.  
- Output only numbered pseudocode lines (1., 2., 3., …), each line compact and readable.   
- Use natural language tightly integrated with symbolic notation and standard algorithmic abbreviations.  
- Favor one-liners for simple statements and loops; use indentation only if necessary for clarity in multi-line blocks.  
- Avoid summaries, explanations, comments, or any text beyond the pseudocode itself.  
- Maintain original class/method structure so the pseudocode can be mapped back directly to code.  
- Refer to data structures and operations naturally, assuming standard context (no need for imports or declarations).  
- Use consistent concise terms like “let,” “set,” “for,” “while,” “if,” “return,” and assignment arrows (←).  
- Avoid verbose wording, separators, or extraneous formatting.  
- Emphasize clarity, correctness, and brevity, optimizing for smooth generation within a 5-second runtime constraint.  

Example format to follow:  
1. class Solution:  
2. def functionName(self, params):  
3.  let n ← length of params  
4.  for i in 0 to n-1: process i  
5.  return result