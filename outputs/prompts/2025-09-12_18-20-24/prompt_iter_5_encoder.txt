Generate concise, readable pseudocode directly from the given problem description as follows:  
- Preserve all original class names and their hierarchy exactly.  
- Preserve all function names and signatures exactly, including parameters and return types if present.  
- Express logic compactly using natural language combined with symbolic notation; prefer one-liners, abbreviations, and symbolic assignments.  
- Use clear, high-level steps without verbose wording. Avoid comments, explanations, summaries, or overview statements. Output only the pseudocode lines.  
- Format output as numbered lines starting at 1, using the style:  
 1. x ← 0  
 2. while x < n: x++  
- Symbolically represent conditions, loops, assignments, and method calls concisely and unambiguously.  
- Maintain the exact class and function scope/indentation hierarchy so the pseudocode maps directly to the original code structure.  
- When describing data, use natural language variable declarations like:  
 let n be integer  
 let A be list of integers  
- Use concise phrases for control flow, e.g., "for i in range n:", "if x > y:" or "return val"  
- Do not use separators, blank lines, or extra formatting.  
- Assume standard data structures, types, and operations are understood without import or type declarations.  
- Prioritize clarity and correctness combined with brevity, optimizing for fast, robust generation within 5 seconds.