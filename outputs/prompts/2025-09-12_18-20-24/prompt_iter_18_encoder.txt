Generate concise, clear, and high-level pseudocode from the given problem description, easy to read and understand.  
- Retain all original class names, function names, parameters, return values, and their nesting exactly as in the source.  
- Express code logic mainly in natural language with symbolic notation and standard abbreviations, using compact, precise one-liners whenever possible.  
- Structure control flows and data operations exactly, formatting nested blocks with consistent indentation for clarity and brevity.  
- Use zero-based indexing and conventional programming idioms unless the original code specifies otherwise.  
- Number each pseudocode step sequentially, using the format:  
 1. x ← 0  
 2. while x < n: x++  
- Do not include comments, explanations, overviews, summaries, or extra notes—output only the pseudocode steps.  
- Do not insert titles, separators, or extraneous formatting.  
- Maintain a style that makes pseudocode directly traceable and implementable from the original code, preserving logical accuracy while avoiding verbosity.  
- Assume all standard libraries, data structures, and operations are available; do not include import or declaration statements.  
- Output only pseudocode, no other text before or after.  
- Optimize for maximal clarity, natural flow, and brevity within a strict 5-second generation time limit.