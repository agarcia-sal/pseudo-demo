Generate clear, concise, and high-level pseudocode directly reflecting the given problem description.  
- Preserve all original class names, function names, signatures, and nesting exactly as in the source code, including methods within classes.  
- Use mostly natural language with compact symbolic and abbreviated notation; prefer terse one-liners that remain fully correct and logically precise.  
- Format pseudocode steps as numbered lines starting from 1, each line optionally containing nested indented statements consistent with common pseudocode indentation styles. Example formatting:  
  1. x ← 0  
  2. while x < n: x++  
- Avoid any comments, explanations, summaries, notes, or non-code text—output only the pseudocode steps.  
- Assume standard data structures and operations are understood; do not redefine or import anything.  
- Use zero-based indexing and standard programming idioms unless the original code indicates otherwise.  
- Do not alter input parameter or return value names or types; keep them exactly as in the original.  
- Omit all separator lines, titles, or extraneous formatting; produce a seamless, self-consistent pseudocode listing that can be directly mapped to code implementation.  
- Optimize pseudocode for readability and natural flow while maximizing brevity and clarity under a strict 5-second generation constraint.