Generate concise, high-level pseudocode from the given problem description that is clear and easy to read.  
- Preserve original class names, function names, and their structure exactly, including method signatures and indentation.  
- Express algorithm steps using simple, natural language combined with symbolic notation; use one-line statements, abbreviations, and symbolic assignments whenever possible.  
- Avoid any summaries, explanations, comments, or notes—output only pseudocode.  
- Format output as numbered lines starting at 1, using this exact style:  
  1. x ← 0  
  2. while x < n: x++  
- Structure code blocks with consistent indentation reflecting logical nesting (e.g., inside classes, functions, loops, conditionals).  
- Use concise, clear expressions that capture intent precisely but avoid unnecessary verbosity.  
- Avoid separator lines, extra blank lines, or extraneous formatting characters.  
- Assume standard data structures and operations are understood and referenced naturally without declarations or imports.  
- Handle inputs and outputs per original function signatures; do not re-define or alter them.  
- Aim for a balance between natural language clarity and brevity to maximize readability and correctness.  
- Optimize pseudocode generation to fit within a 5-second runtime limit, prioritizing correctness and faithful structural preservation.