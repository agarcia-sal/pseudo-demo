Generate concise, clear, and compact pseudocode directly from the provided problem description and source code.  
- Preserve all original class names, function names, argument names, return types, and their nesting exactly as in the source without any renaming or type alterations.  
- Structure pseudocode steps as numbered lines starting at 1, using a consistent format such as:  
  1. x ← 0  
  2. while x < n: x++  
- Favor a blend of natural language and symbolic notation to produce high-level one-liners that remain correct and precise.  
- Use indentation to reflect nested blocks, following standard pseudocode style; keep blocks succinct without sacrificing clarity or logical flow.  
- Do not include comments, explanations, notes, purpose statements, or any extra text—output only the pseudocode lines.  
- Represent common programming idioms natively and assume standard data structures and operations exist without explicit declarations or imports.  
- Use zero-based indexing unless the original code implies otherwise.  
- Avoid extraneous formatting such as separator lines, titles, or enclosing marks.  
- Ensure the output pseudocode is self-consistent and can be straightforwardly mapped back to the original code logic for implementation.  
- Optimize for readability, brevity, and natural flow within the strict 5-second generation time limit.  
- If the problem involves classes or objects, reflect method and class structure distinctly, preserving their hierarchy and encapsulation exactly.

Example pseudocode style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers size n  
read n elements into A  
for i from 0 to n-1  
 set min_i ← i  
 for j from i+1 to n-1  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A