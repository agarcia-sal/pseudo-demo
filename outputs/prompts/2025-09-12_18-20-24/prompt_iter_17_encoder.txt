Generate concise, readable, and high-level pseudocode from the given problem description that captures the full logic accurately yet compactly.  
- Output only the pseudocode steps without comments, descriptions, explanations, or any extra text—no summaries, notes, or headings.  
- Preserve all original class names, function names, their signatures, nesting, and object-oriented structures exactly as in the source code; do not rename or reorder these.  
- Use a line-numbered list format, starting at 1, writing one statement or control construct per line; number lines consecutively (e.g., 1., 2., 3., …).  
- Favor clear natural-language instructions combined with standard symbolic notation and common abbreviations to express operations concisely but unambiguously. Prefer one-liners and compact expressions over verbose code.  
- Indent nested blocks consistently by one level per depth following typical pseudocode conventions; show control structures clearly (if, while, for, else, etc.) with their bodies indented under them.  
- Represent control flow and data operations precisely and logically, assuming standard programming constructs and built-in data structures without explicit declarations or imports—do not redefine parameters or return types.  
- Use zero-based indexing and common idiomatic programming conventions unless explicitly contradicted by the original code.  
- Avoid using placeholder tokens or irrelevant example code; produce output directly reflecting the input problem logic in a self-consistent manner suitable for straightforward translation back into the original programming language.  
- Do not add any lines that separate sections, add titles, or extraneous formatting.  
- Optimize pseudocode for clarity, brevity, and natural natural language flow, maximizing information density and minimizing verbosity while maintaining correctness and traceability.  
- Produce the output rapidly within a strict 5-second generation time limit.