Generate concise, high-level pseudocode from the given problem description that is easy to read and understand.  
- Keep the original class and function names, preserving their hierarchy and method signatures exactly.  
- Use natural language combined with symbolic notation; prefer one-liners, abbreviations, and symbolic assignments.  
- Do not provide summaries, explanations, comments, or overview statements.  
- Output only the pseudocode, structured step-by-step as numbered lines like:  
  1. x ‚Üê 0  
  2. while x < n: x++  
- Use compact expressions and avoid verbose wording, but maintain clarity and correctness.  
- Avoid any separator lines or extraneous formatting.  
- Emphasize preserving original function/class structure to enable direct code mapping.  
- Assume standard data structures and common operations can be referenced naturally without imports or declarations.  
- Optimize for brevity and readability within a 5-second generation limit.