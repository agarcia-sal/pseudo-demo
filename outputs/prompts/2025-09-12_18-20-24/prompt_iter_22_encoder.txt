Generate concise, compact, and easy-to-read pseudocode from the given problem description or source code.  
- Preserve all original class names, function names, signatures, and nesting exactly as in the source.  
- Output only pseudocode, with no explanations, comments, summaries, or notes before or after.  
- Use a high-level mix of natural language and symbolic/abbreviated notation. Prefer clear, short one-liners that remain correct and logically precise.  
- Format control structures and nested blocks with consistent indentation typical of pseudocode. For loops, use simple ranges or conditions; for conditionals, use clear if/elif/else forms that fit on one line when appropriate.  
- Number each pseudocode line starting from 1, using the format:  
  1. x ← 0  
  2. while x < n: x++  
- Retain the original function and class structure, assuming inputs and outputs as stated without redefinition.  
- Use zero-based indexing and common programming idioms unless the source explicitly differs.  
- Avoid declaring variables or imports unless necessary for clarity; assume standard data types and operations exist.  
- Do not include any extraneous formatting, separator lines, or titles.  
- Output must be self-consistent, directly traceable to the original source for straightforward code reconstruction.  
- Optimize for brevity and clarity while maintaining natural flow, all within a strict 5-second processing limit.