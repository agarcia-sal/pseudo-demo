Given a problem description, generate clean, compact, and easy-to-read pseudocode that closely mirrors the original class and function names, retaining all class and method structures exactly as specified. Use mostly one-liner statements with natural language and symbolic operators, including abbreviations where appropriate, to express logic at a high level without losing clarity.

Do not include any purpose, summary, explanations, comments, notes, or separator lines—only the pseudocode itself.

Keep variable names concise but meaningful. Express control flow clearly and compactly, using constructs like:

1. x ← 0  
2. while x < n: x++  
3. if condition: do_something  
4. for i in 0 to n-1: ...

Maintain consistent indentation that reflects logical blocks within classes and functions.

Follow exactly the input class and function signatures (names and parameters) with the same casing and style.

Example pseudocode style for the provided Python function:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Ensure the entire pseudocode fits within the 5-second processing constraint and prioritizes structural correctness and operational fidelity over extreme brevity. Avoid outputting unrelated or repeated templates; produce pseudocode directly relevant to the input problem.