Translate the given pseudocode into clean, correct, and efficient Python code, preserving all original class names, method names, parameters, and their structure exactly as given. Your translation must fully implement the logic expressed in the pseudocode, handling all relevant details and edge cases.

- Enclose your entire solution in a single Python code block formatted as follows:
```python
# Your translated Python code here
```
- Keep class and method definitions identical to the pseudocode, including names, parameters, and nesting.
- Replace all pseudocode operators and notations (e.g., ←, = for assignment/comparison, loops, increments/decrements) with valid Python syntax.
- If the pseudocode references data structures or types (e.g., ListNode), include their necessary class definitions so the code can run independently.
- Do not add any extraneous code such as test cases, input/output handling, or explanation — only the translated code.
- Your output code must be syntactically valid and logically equivalent to the pseudocode, runnable within 5 seconds without errors.
- You may use any standard Python library or package to enhance clarity or performance, but only if it does not alter the original logic.
- Focus on correctness, readability, and efficiency; the code should be concise but complete, and handle typical edge cases implied by the pseudocode.

This approach ensures that your translation is a faithful, executable Python equivalent of the given pseudocode, suitable for immediate use or testing.