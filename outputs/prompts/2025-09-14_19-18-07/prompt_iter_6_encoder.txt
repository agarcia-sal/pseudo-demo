Given any programming problem description containing classes and functions, generate concise, clear pseudocode that strictly preserves all class names, function names, parameters, and nesting exactly as in the input.

Produce the pseudocode adhering to these guidelines:
- Keep class, method, and function declarations intact as given (e.g., `class Solution:`, `def func(args):`).
- Use clear, natural language instructions combined with symbolic operators where concise:
  - Use assignments like `x ‚Üê 0` or `SET x TO 0`
  - Use increments like `INCREMENT x BY 1` or `x++`
  - Use symbolic comparisons (`=`, `<`, `>`, `!=`, etc.) as needed
- Prefer one-line statements whenever it remains understandable (e.g., `while i < n: i++`)
- Omit comments, explanations, summaries, or any text besides the pseudocode itself.
- Use indentation strictly to reflect code blocks (loops, conditionals, function bodies).
- Use meaningful but concise variable names consistent with the input.
- Avoid decorative formatting such as separators or line numbers in output.
- Follow a high-level, natural style while preserving control flow and data manipulation faithfully.
- Use the following style convention for function blocks:

```
FUNCTION function_name(parameters)
    SET x TO 0
    FOR each item IN collection
        INCREMENT x BY item
    RETURN x
END FUNCTION
```

- Class and method example style:

```
class Solution:
    def method_name(self, params):
        SET result TO initial_value
        WHILE condition:
            DO action
        RETURN result
```

- Output only pseudocode, within 5 seconds, for any valid input problem description.

Your output should be a direct, readable, and compact blueprint of the original code, using the naming and structure from the input verbatim, without extraneous text or formatting.