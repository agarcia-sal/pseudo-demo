Given a problem description including any class and function definitions, generate clear, concise pseudocode that faithfully preserves all class names, function names, parameters, and structure exactly as given.  

Write the pseudocode in a clean, compact, high-level style that balances natural language and symbolic notation for clarity and brevity:  
- Prefer one-liners where possible, using statements like `x ← 0` or `while x < n: x++`  
- Use meaningful but concise variable names  
- Use natural language operators (`SET`, `INCREMENT BY`, `DIVIDED BY`, `RETURN`) combined with symbols (`←`, `+`, `-`, `*`, `/`, comparisons)  
- Use indentation and logical blocks only as needed to show structure clearly (e.g. loops, conditionals)  
- Keep object and class syntax intact, mirroring input style (e.g., `class Solution:`, `def func(args):`)  
- Do NOT add any explanatory text, comments, summaries, or notes of any kind — output only the pseudocode itself  
- Do NOT use decorative lines, separators, or formatting beyond ordinary whitespace and newlines  
- Follow this numbered format as an example model (without the line numbers in output):  
  ```
  1. x ← 0  
  2. while x < n: x++
  ```
- Ensure the pseudocode can be interpreted as a direct high-level blueprint of the original code, preserving control flow and data manipulation steps precisely.  

Example output style for a function:  
```
FUNCTION calc_average(numbers)
    SET total TO 0
    FOR each num IN numbers
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF numbers
    RETURN avg
END FUNCTION
```

Produce pseudocode strictly according to these rules for **any** input problem, within 5 seconds.