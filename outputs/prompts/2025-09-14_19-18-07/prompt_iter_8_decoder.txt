Translate the given pseudocode into fully working, clean, and efficient Python code that precisely preserves all class names, function names, parameter lists, and structural nesting exactly as specified. Your translation must faithfully and idiomatically implement all control flows, data manipulations, and algorithms implied by the pseudocode, correctly and robustly handling any edge cases and subtleties, including nested functions or classes.

- Enclose your entire output strictly within a single Python code block formatted as:
```python
# Your translated Python code here
```
- Do not include any comments, explanatory text, test code, input/output commands, or anything outside this code block.
- Strictly maintain all identifiers exactly as in the pseudocode without renaming or reordering parameters.
- Thoroughly convert every pseudocode syntax and construct (such as ← for assignment, loops, conditionals, arithmetic operations, and data structure manipulations) to clean, idiomatic Python code, using relevant built-in functions, libraries, type hints, and best practices to maximize clarity, correctness, and performance.
- If the pseudocode references any custom data structures (e.g., classes like ListNode), fully define them within your code exactly as needed so the final code is standalone and executable without dependencies.
- Assume all inputs comply with the pseudocode’s expected types and structures; focus on correctness and efficiency without extraneous validation.
- Optimize the implementation to run reliably within 5 seconds on typical problem constraints, ensuring no runtime errors, naming conflicts, or argument mismatches when the code is invoked as per the given signatures.
- Use any Python standard library modules or built-in features freely to optimize or clarify the code, but do not alter the original algorithmic logic or structure.

This approach ensures a single, cohesive, ready-to-execute Python solution that is faithful, idiomatic, performant, and robust for immediate deployment and testing.