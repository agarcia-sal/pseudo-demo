Translate the given pseudocode into fully functional, clean, and efficient Python code that preserves all class names, method names, parameters, and nesting exactly as provided. Your implementation must accurately reflect the original logic, correctly handling all details and edge cases implied by the pseudocode.

- Output only the translated Python code enclosed within a single, properly formatted Python code block as follows:
```python
# Your translated Python code here
```
- Maintain exact class and method signatures as in the pseudocode, including any nested definitions, without altering names or parameter orders.
- Convert all pseudocode constructs (e.g., assignment symbols ‚Üê, loops, conditionals, increments/decrements, and substring operations) into idiomatic, syntactically valid Python.
- Define any referenced user-defined data structures (e.g., classes such as ListNode) fully within the code so that it is independently executable.
- Do not include test cases, input/output code, comments, explanations, or any content outside the requested solution.
- The resulting code must be logically equivalent, syntactically correct, and optimized for clarity, correctness, and runtime efficiency, completing execution well within 5 seconds.
- You may utilize any relevant Python standard libraries or built-in functions to improve performance or readability, but do not modify the underlying logic or algorithm.
- Prioritize robustness and correctness in edge cases implied by the pseudocode.
- Ensure no name conflicts, argument errors, or runtime exceptions will occur when the code is invoked as per the method signatures.

This approach guarantees a precise, efficient, and production-ready Python implementation faithful to the given pseudocode, suitable for immediate use and thorough testing.