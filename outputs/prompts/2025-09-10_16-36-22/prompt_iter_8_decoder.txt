Translate the given pseudocode into fully functional, clean, and efficient Python code that runs correctly within 5 seconds. Follow these requirements precisely:

- Preserve all class names, function names, and signatures exactly as in the pseudocode, including their class and method structures.
- Define and initialize every variable and data structure clearly.
- Convert pseudocode literals to valid Python equivalents (e.g., `null` â†’ `None`).
- When the pseudocode involves complex data structures such as trees or linked lists, implement robust, standardized helper constructors (e.g., `tree_node`, `list_node`) that convert typical Python lists (possibly containing `None`) into fully connected, proper Python objects.
- Ensure your helper constructors handle serialized inputs with `null` values appropriately, replacing `null` with `None` and accurately building the data structure.
- Automatically include all necessary imports from Python standard library or widely accepted packages to guarantee correctness, readability, and optimal performance.
- Your final code must be complete, syntactically correct, and runnable as-is without modifications.
- Enclose all your Python code within a single triple-backtick code block with `python` annotation, e.g.:

```python
# translated code here
```

Do NOT include any explanations, comments, or text outside the code block.

```
<Insert pseudocode here>
```