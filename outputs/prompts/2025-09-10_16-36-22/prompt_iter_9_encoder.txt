Generate concise, high-level pseudocode from the given problem description.  
Produce clear, readable, and compact pseudocode that faithfully preserves all original class names, function names, parameter names, object structures, method signatures, and nesting exactly as in the source.  
Write pseudocode primarily in natural language mixed with symbolic notation and standard abbreviations to achieve brevity and clarity. Prefer single-line statements wherever they remain unambiguous.  
Do not include any comments, explanations, summaries, notes, or separators—output strictly pseudocode lines only.  
Number each line sequentially starting from 1 with the format:  

1. x ← 0  
2. while x < n: x++  

Maintain structural completeness and fidelity to the original logic to enable direct implementation.  
Do not rename or omit any classes, functions, or parameters. Retain code block nesting and scope clearly but succinctly.  
Handle any language-specific constructs intuitively in pseudocode form rather than verbatim code lines.  
Avoid referencing any data serialization formats (like JSON arrays) that may cause data type confusion—express data structures abstractly as in original code.  
Limit output length to essential logical steps for clarity and efficiency.  
Deliver the pseudocode within 5 seconds.