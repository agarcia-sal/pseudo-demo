Generate concise, clear, high-level pseudocode from the given problem description, strictly preserving all original class names, function names, parameters, and object structures as in the source code.  
Produce pseudocode that is easy to read and understand by combining natural language with symbolic notation and common abbreviations, emphasizing compactness and clarity. Use mostly one-line statements with proper indentation and nesting matching the source structure.  
Keep pseudocode minimal yet complete, sufficient for direct logic implementation without any extra explanations, comments, notes, summaries, or extraneous text. Output only the numbered pseudocode lines starting from 1, strictly following this exact format:  

1. x ← 0  
2. while x < n: x++  

Maintain all structural details (classes, methods, loops, conditionals, recursions) and replicate object or data field access exactly as in the source.  
Represent language-specific null, None, or equivalent literals exactly as in the problem or convert them unambiguously to `null` in pseudocode only if ambiguous.  
Avoid any separator lines or additional output before or after the pseudocode.  
If input involves complex data structures (e.g., trees, lists), presume they are properly instantiated objects, not raw lists or arrays; do not interpret or modify input formats—reflect the code’s logic only.  
Respond swiftly within 5 seconds, balancing brevity, correctness, and readability for robust test-time performance.