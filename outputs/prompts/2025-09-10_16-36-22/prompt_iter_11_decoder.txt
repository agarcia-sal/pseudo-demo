Translate the given pseudocode into complete, clean, and highly efficient Python code that executes within 5 seconds. Follow these instructions strictly:

- Maintain all class names, function names, method signatures, and their exact class/object hierarchy from the pseudocode without any changes.
- Implement every variable and data structure with explicit initialization.
- Convert all pseudocode literals to correct Python equivalents (e.g., `null` → `None`).
- For any complex data structures (trees, linked lists, graphs) referenced in function/class signatures or parameters—automatically generate standardized, robust helper functions that:
  - Convert typical serialized input formats (lists with possible `None` values) into fully linked Python objects (e.g., `tree_node`, `list_node`).
  - Replace all occurrences of pseudocode literals like `null` with `None` before constructing these objects.
  - Thoroughly validate and connect nodes, ensuring the final object matches typical problem input expectations (e.g., level order for trees, linear linking for lists).
- Automatically insert all necessary imports from Python standard libraries and well-known third-party packages only if they are referenced or needed, to guarantee correctness and optimized performance.
- Handle input arguments carefully so that any inputs expected to be complex types are converted to the appropriate Python objects *before* invoking the solution class methods (e.g., do NOT pass raw lists where linked-list/tree nodes are expected).
- Ensure the produced code stands alone: it should be fully runnable as-is without requiring manual adjustments, and it should not assume any external context.
- Avoid any explanations, debug prints, comments, or non-code text outside the triple-backtick Python code block.
- Enclose the entire code solution in a single Python code block annotated as ```python```, as shown:
  
```python
# your complete translated Python code here
```

Do NOT add any text outside the code block.

```
<Insert pseudocode here>
```