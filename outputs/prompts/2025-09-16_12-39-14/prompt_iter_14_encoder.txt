Translate the provided code into clear and high-level pseudocode that preserves all original class and function names, as well as their object-oriented structure exactly.  
- Output only the pseudocode without any explanations, comments, summaries, or additional formatting.  
- Use natural, descriptive language combined with precise symbolic notations to represent operations, control flow, and data structures.  
- Structure pseudocode with consistent indentation to reflect block hierarchy using explicit keywords such as:  
 CLASS / END CLASS  
 FUNCTION / END FUNCTION  
 IF / ELSE IF / ELSE / END IF  
 FOR / END FOR  
 WHILE / END WHILE  
 RETURN  
 SET / INCREMENT / DECREMENT  
 CALL / DEFINE / TRY / EXCEPT (as applicable)  
- Maintain function signatures identical to the original code, including parameter names.  
- Favor abstraction and clarity over low-level implementation details, omitting language-specific syntax or boilerplate.  
- Avoid verbosity and do not over-condense; produce readable and logically complete pseudocode that can be used to reconstruct the original logic precisely enough to run (logical equivalence) within a 5-second execution limit.  
- Do not add separators, headers, or extraneous text.  

Example:  
Given code:  
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Expected pseudocode output:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION
```