Generate abstract, high-level pseudocode reflecting the given code, preserving all original class and function names and object-oriented structures exactly. Produce only the pseudocode instructions without any purpose statements, summaries, explanations, notes, or comments. Use natural language mixed with clear symbolic forms to describe operations, control flow, and data structures. Structure pseudocode with proper indentation to indicate blocks, using clear keywords like FUNCTION, RETURN, FOR, WHILE, IF, ELSE, SET, INCREMENT, DECREMENT, and END FUNCTION/END IF/END FOR/END WHILE as appropriate. Keep pseudocode concise but readable, favoring clarity over low-level implementation details. Avoid overly verbose phrasing or overly terse fragments that hinder understanding. Do not add separators or extraneous formatting.

Example style to follow:  
If code is  
```
def calc_average(nums):  
  total = 0  
  for num in nums:  
    total += num  
  avg = total / len(nums)  
  return avg  
```  
Then pseudocode output should be  
```
FUNCTION calc_average(list_of_numbers)  
  SET total_sum TO 0  
  FOR each number IN list_of_numbers  
    INCREMENT total_sum BY number  
  SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
  RETURN average_value  
END FUNCTION
```

Your pseudocode should be executable in principle to reconstruct the original logic, running within a 5-second timeout. Aim for a balanced abstraction that enables clarity, correctness, and preservation of logical structure.