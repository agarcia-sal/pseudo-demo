Generate concise, abstract pseudocode based on the given code, preserving all original class names, function names, and object-oriented structures exactly as in the source. Output only the pseudocode without any explanations, summaries, notes, or comments. Use clear natural language combined with symbolic expressions to describe all data structures, operations, and control flow, employing consistent indentation to denote blocks. Use explicit and unambiguous keywords such as CLASS, FUNCTION, RETURN, FOR, WHILE, IF, ELSE, SET, INCREMENT, DECREMENT, CALL, ASSIGN, and END FUNCTION/END IF/END FOR/END WHILE precisely where needed. Favor a high-level abstraction that omits low-level implementation details but fully preserves the original logic and is executable in principle. Avoid verbosity that hinders readability as well as excessive terseness that obscures understanding. Do not add separators, line decorations, or extraneous formatting.

Example style:  
If the code is  
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Then output  
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```
Maintain all class and function signatures exactly as in the input. The pseudocode should allow reconstructing the original behavior within a 5-second execution timeout.