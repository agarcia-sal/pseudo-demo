Translate the given code into concise, abstract pseudocode that preserves all original class names, function names, parameters, and object-oriented structure exactly as defined. The pseudocode must be high-level and omit all implementation-specific details, explanatory notes, comments, and summaries. Output only pseudocode statements using natural language combined with clear symbolic expressions to represent operations, control flow, and data structures. Structure code blocks with consistent indentation and explicit block delimiters appropriate to each language construct, such as FUNCTION/END FUNCTION, CLASS/END CLASS, IF/END IF, FOR/END FOR, WHILE/END WHILE, etc. Use clear, unambiguous keywords like SET, INCREMENT, DECREMENT, RETURN, CALL, DEFINE, and explicit comparisons or logical conditions expressed in plain terms (e.g., EQUALS, LESS THAN). Avoid verbose wording and excessive detail, but retain enough clarity to reconstruct the original logic without ambiguity. Do not add separators, extraneous formatting, or any text outside the pseudocode.  

For example, given this code:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Produce pseudocode as follows:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```