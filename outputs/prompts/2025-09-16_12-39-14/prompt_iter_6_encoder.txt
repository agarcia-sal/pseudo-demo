Translate the given code into clear, precise, and executable pseudocode preserving all original class names, function names, and the object-oriented structure exactly as in the source. Produce only the pseudocode; do not include any summaries, explanations, comments, or notes.

Write pseudocode that is as abstract and high-level as possible while maintaining full logical fidelity so that the original code could be reconstructed or understood from it. Use consistent natural language mixed with conventional symbolic operators and clear programming keywords to describe all operations, assignments, control flow, and data structures.

Indicate blocks with indentation and use explicit, standard keywords for structure and flow control such as:

 FUNCTION / END FUNCTION  
 CLASS / END CLASS  
 METHOD / END METHOD (if appropriate)  
 IF / ELSE IF / ELSE / END IF  
 FOR / END FOR  
 WHILE / END WHILE  
 SET / INCREMENT / DECREMENT / RETURN / BREAK / CONTINUE / TRY / EXCEPT (as needed)  

Reference variables, parameters, and types by the exact names they have in the input code. Represent data structure operations concisely but clearly (e.g., "APPEND to list", "REMOVE from set", "ACCESS dictionary key", "CREATE new list"). Use natural language constructs for comprehensible expressions (e.g., “DIVIDED BY”, “EQUALS”, “LESS THAN”, “GREATER THAN OR EQUAL TO”).

Keep the pseudocode concise yet sufficiently descriptive to capture all key computational steps without delving into low-level language-specific syntax.

Example input code:  
```  
def calc_average(nums):  
  total = 0  
  for num in nums:  
    total += num  
  avg = total / len(nums)  
  return avg  
```  

Corresponding pseudocode output:  
```  
FUNCTION calc_average(list_of_numbers)  
  SET total_sum TO 0  
  FOR each number IN list_of_numbers  
    INCREMENT total_sum BY number  
  SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
  RETURN average_value  
END FUNCTION  
```