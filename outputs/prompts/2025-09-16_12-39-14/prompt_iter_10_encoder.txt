Translate the given code into concise, high-level pseudocode preserving all original class names, function names, and object-oriented structure exactly as in the source.  
Use uppercase keywords to define control flow and operations: FUNCTION, CLASS, RETURN, FOR, WHILE, IF, ELSE, ELIF, SET, INCREMENT, DECREMENT, CALL, YIELD, DEFINE, TRY, EXCEPT, RAISE, and corresponding block closures like END FUNCTION, END IF, END FOR, etc., as appropriate.  
Represent expressions and data operations clearly with natural language mixed with standard symbols (e.g., +, -, ==, !=), avoiding low-level language-specific syntax.  
Maintain proper indentations to indicate scope and nesting of code blocks. Use meaningful but concise variable names as in the original code without renaming.  
Do not add comments, explanations, summaries, or purpose statements before or after the pseudocode. Do not include notes, examples, separators, or extraneous formatting. Output only the pseudocode.  
Ensure the pseudocode logically captures the full structure and flow of the original code such that it could be used to reconstruct the core algorithm and logic while abstracting away unnecessary implementation details.

Example:  
Given code  
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce  
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```