Generate concise, abstract pseudocode strictly mirroring the given codeâ€™s logical flow and structure. Preserve all original class names, function names, method signatures, and object-oriented hierarchies exactly as in the input code. Represent control flow and operations clearly using standard pseudocode keywords such as CLASS, FUNCTION, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, and END blocks (e.g., END FUNCTION, END IF). Use natural language phrasing combined with symbolic forms to express computations and data manipulations, favoring clarity and abstraction over low-level details. Maintain indentation to denote code blocks precisely. Output only the pseudocode without any explanations, comments, summaries, purpose statements, headers, or extraneous formatting. Avoid separators or extra delimiters. The pseudocode should be sufficiently detailed and structured to enable reconstruction of the original logic, ensuring readability and fidelity within a 5-second execution constraint.

Example:

If the code is:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET avg TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN avg
END FUNCTION
```