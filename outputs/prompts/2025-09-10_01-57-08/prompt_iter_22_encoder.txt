Generate concise, clear, and high-level pseudocode from the given problem description and code. Preserve all original function and parameter names exactly. Make the pseudocode easy to read and understand by blending natural language with symbolic notation and standard abbreviations. Prefer short one-line statements and simple idiomatic structures like:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Use minimal indentation only to clarify nested blocks. Represent data types briefly when helpful (e.g., “let A be list of int”). Assume access to attributes/methods consistent with the original code’s data structures (e.g., use `.val`, `.next` for linked list nodes). Avoid comments, notes, summaries, or explanations—output only clean pseudocode starting immediately from line one without separators.

Aim for pseudocode that is compact, faithful to the original logic, high-level, and flows naturally without sacrificing clarity. Emphasize natural phrasing and symbolic brevity while maintaining correctness and readability.

Example style:

```
in function addTwoNumbers(l1, l2)
dummy ← ListNode(0)
cur ← dummy
carry ← 0
while l1 or l2:
  x ← l1.val if l1 else 0
  y ← l2.val if l2 else 0
  total ← carry + x + y
  carry ← total // 10
  cur.next ← ListNode(total % 10)
  l1 ← l1.next if l1 else None
  l2 ← l2.next if l2 else None
  cur ← cur.next
if carry > 0: cur.next ← ListNode(carry)
return dummy.next
```