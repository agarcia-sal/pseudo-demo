Generate concise, clear, natural-language pseudocode directly from the given problem description and original code. Output only compact pseudocode starting at line one, with no comments, explanations, summaries, or separators. Keep original function and parameter names exactly. Use common symbols and brief idiomatic forms:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Prefer one-line statements with minimal indentation only for nested blocks. Express data types succinctly when relevant (e.g., "let A be list of int"). Use natural language phrasing and high-level abstractions without losing clarity or correctness. When dealing with complex inputs (like linked lists), assume attribute accesses matching the original code context (e.g., `.val`, `.next`). Avoid verbose constructs; combine simple statements in one line when clear.

Example style:

```
in function addTwoNumbers(l1, l2)
dummy ← ListNode(0)
cur ← dummy
carry ← 0
while l1 or l2:
  x ← l1.val if l1 else 0
  y ← l2.val if l2 else 0
  total ← carry + x + y
  carry ← total // 10
  cur.next ← ListNode(total % 10)
  l1 ← l1.next if l1 else None
  l2 ← l2.next if l2 else None
  cur ← cur.next
if carry > 0: cur.next ← ListNode(carry)
return dummy.next
```