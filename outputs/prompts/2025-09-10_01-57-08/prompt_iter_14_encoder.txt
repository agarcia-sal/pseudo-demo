Generate concise, high-level pseudocode directly from the given problem description and original code. Preserve all original function and method names exactly as in the source. Write pseudocode that is easy to read, compact, and primarily expressed in natural language with occasional symbolic notation and abbreviations for brevity. Prefer brief, single-line instructions using idiomatic structures such as:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Use minimal indentation only when necessary for clarity, avoiding verbose nested blocks. Represent data types succinctly only if useful, e.g., “let A be list of int”. Avoid explanations, comments, summaries, headings, or separators; output only clean pseudocode starting on the first line. Ensure pseudocode is faithful to the logic and structure of the original code, without inventing or omitting details, and strive for the simplest possible form that remains correct and clear.

If the problem involves complex data structures (e.g., linked lists), assume the inputs follow the original data format, not raw built-in types (e.g., linked nodes have `.val` and `.next` as appropriate). Use concise idioms to access or update fields and traverse structures.

Produce output in a style aligned with this example:

in function main  
let n be int  
read n  
let A be vector of int with size n  
read n elements into A  
for i in 0..n-1:  
 set min_i ← i  
 for j in i+1..len(A)-1: if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A