Generate clear, concise, and high-level pseudocode directly from the given problem description and original code. Use natural language with symbolic notation and standard abbreviations for brevity and clarity. Preserve exact original function names and parameter names. Prefer compact one-line statements and simple idiomatic constructs like:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Use minimal indentation only to clarify nested blocks. Represent data types succinctly when useful (e.g., "let A be list of int"). Avoid comments, explanations, summaries, or separators of any kind. Do not output anything other than clean pseudocode, starting immediately from line one.

Make the pseudocode easy to read, compact, and faithful to the original logic, emphasizing natural language flow and high-level abstraction without losing clarity. When handling inputs that might be complex data structures (like linked lists), assume the appropriate attribute or method access consistent with the original code’s usage context (e.g., use `.val` and `.next` for nodes if originally present).

Example style:

```
in function addTwoNumbers(l1, l2)
dummy ← ListNode(0)
cur ← dummy
carry ← 0
while l1 or l2:
  x ← l1.val if l1 else 0
  y ← l2.val if l2 else 0
  total ← carry + x + y
  carry ← total // 10
  cur.next ← ListNode(total % 10)
  l1 ← l1.next if l1 else None
  l2 ← l2.next if l2 else None
  cur ← cur.next
if carry > 0: cur.next ← ListNode(carry)
return dummy.next
```