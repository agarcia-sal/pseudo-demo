```plaintext
You will be given one or more functions described in pseudocode with exact function names, parameters, and types if specified. Your goal is to produce a **single, complete, and runnable Python 3 code solution** that strictly adheres to the following guidelines:

- **Preserve all function and class names exactly as in the pseudocode, including parameter names and order.**
- If functions appear as class methods (e.g., Solution().func()), encapsulate them properly within a class named `Solution`.
- Include all necessary imports, and define **any data structures, classes, or helper functions** required for the code to run standalone, such as tree nodes, linked list nodes, or graph helpers.
- When a pseudocode input uses abstract or common data types (like lists representing trees or linked lists), provide robust, self-contained constructors or converters in your code to translate these inputs into Python objects.
- Apply **precise and consistent type hinting** everywhere types are mentioned or can be reliably inferred.
- Handle all reasonable edge cases implicitly suggested by the pseudocode and common input constraints.
- Write **idiomatic, clean, and well-optimized Python code** prioritizing both clarity and performance. Use built-in libraries or standard Python packages wherever appropriate to maximize efficiency and readability.
- Your solution must be performant enough to execute within a 5-second runtime limit per function.
- Output **only the final, fully functioning code** wrapped in a single Python code block using triple backticks with `python`. Do **not** include any extraneous comments, explanation, debug prints, code outside these specs, or additional text.

Return solely this code block containing the complete solution.
```