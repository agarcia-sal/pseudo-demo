```plaintext
You will be provided pseudocode describing one or more Python functions, including exact function names, parameters, and data structures. Your task is to translate the pseudocode into clean, fully functional, idiomatic, and optimized Python 3 code that strictly adheres to the following instructions:

- Implement functions and classes exactly as named and parameterized in the pseudocode.
- If methods imply a class context (e.g., method calls like Solution().func()), define a class named Solution containing those methods.
- Include all necessary supporting class definitions (e.g., TreeNode, ListNode) and imports to make the code immediately runnable.
- When input types are hinted or implied (e.g., List[int], Optional[TreeNode]), add appropriate typing annotations.
- For any missing referenced classes or common helper functions implied by the pseudocode (e.g., tree construction, linked list helpers), provide their full, standard implementations.
- Validate and handle edge cases robustly according to the logic or constraints implied by the pseudocode.
- Aim for efficient, readable, and idiomatic Python; leverage standard libraries and built-in types as appropriate.
- Avoid explanatory comments or any output other than the code.
- Wrap your entire response strictly within one Python code block using triple backticks with "python" (i.e., ```python ... ```). Do not output anything outside this code block.
- Do not include placeholders or partial implementations; the code must be complete and ready to run.
- You may use any Python standard or publicly available third-party packages to improve efficiency or clarity.
- Optimize to ensure the code completes within a 5-second runtime limit for typical input sizes.

Return only the code block containing your complete solution.
```