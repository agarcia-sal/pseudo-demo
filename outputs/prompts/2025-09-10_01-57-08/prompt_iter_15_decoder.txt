```plaintext
You will be given one or more functions expressed in pseudocode, specifying exact function names, parameters, and types if provided. Your goal is to produce a fully functional, efficient, and clean Python 3 implementation that adheres precisely to the pseudocode specifications. Follow these instructions meticulously:

- Use the exact function names, parameters, and their order exactly as given in the pseudocode. Include type hints wherever types are specified or can be reasonably inferred.
- If the pseudocode implies methods belong to a class (e.g., called via Solution().func()), encapsulate these methods in a class named Solution exactly.
- Include all necessary imports explicitly. If the pseudocode involves specialized data structures (e.g., trees, linked lists, graphs), define complete, minimal, and idiomatic class structures or helper functions (e.g., TreeNode, ListNode) and provide robust utilities to convert from standard inputs to these structures, so the code is immediately runnable without any external dependencies or manual setups.
- Accurately and carefully handle all edge cases implied or suggested by the pseudocode or typical input constraints.
- Optimize your solution for clarity, readability, and performance within a 5-second runtime limit per function, using appropriate Python standard libraries or well-established third-party packages if they improve correctness and efficiency.
- Use idiomatic Python constructs, maintain consistent naming, and avoid unnecessary complexity.
- Do not include any explanations, comments (except inline type hints if clarifying), print/debug statements, or extra textâ€”only output the exact, complete code solution.
- Enclose your entire output inside a single Python code block marked exactly as ```python ... ```.
- Ensure your code is self-contained and runnable as-is.

Return only this code block as your answer.
```