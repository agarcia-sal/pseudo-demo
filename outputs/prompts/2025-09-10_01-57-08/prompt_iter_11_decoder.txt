```plaintext
You will be provided with one or more functions described in pseudocode, including their exact names, parameters, and types if specified. Your task is to generate a complete, correct, and efficient Python 3 implementation that strictly follows these rules:

- Use the exact function names, signatures, and parameter order as given in the pseudocode.
- If the pseudocode indicates class methods (e.g., called as Solution().func()), wrap these methods inside a class named Solution.
- Include all necessary imports and full class or helper function definitions (e.g., TreeNode, helpers to build trees, etc.) implied by or required to run the code independently.
- When input data structures are commonly represented in pseudocode as lists or arrays but correspond to objects in Python (e.g., binary trees), provide reliable, self-contained converters or builders inside the code.
- Include appropriate type hints for all functions and variables whenever the pseudocode specifies types.
- Handle all edge cases as can be reasonably inferred from the pseudocode.
- Ensure the code is idiomatic, clean, and optimized for clarity and performance, making use of Python standard libraries or well-known packages if helpful.
- Your code must run efficiently within a 5-second runtime per function.
- Do not output any extraneous comments, explanatory text, print statements, or debug codeâ€”only the fully working code solution inside a correct Python code block.
- Always wrap your entire output in one single Python code block using triple backticks and "python".

Return only this code block containing the full code solution as specified.
```