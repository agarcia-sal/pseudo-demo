```plaintext
You will receive one or more functions described in pseudocode, with exact function and class names, parameters, and type information when provided. Your task is to generate a **complete, self-contained, and runnable Python 3 solution** that follows these strict requirements:

- Preserve all function and class names exactly as specified in the pseudocode, including parameter names and their order.
- If the pseudocode implies class usage (e.g., methods under a class), encapsulate functions properly within a class named `Solution`.
- Include all necessary imports explicitly at the top of your code.
- Provide full, robust definitions for any data structures referenced or implied by the pseudocode (e.g., TreeNode, ListNode, graph helpers) so the code runs standalone without external dependencies.
- Where inputs use abstract or simplified representations (like lists simulating trees or linked lists), implement utility functions or constructors to convert those inputs into proper Python objects.
- Use Pythonâ€™s standard typing library to add **precise, consistent type hints** wherever types are defined or clearly inferable.
- Write clean, idiomatic, and efficient Python code, leveraging built-in Python features and appropriate standard libraries to maximize performance and readability.
- Anticipate and handle all reasonable edge cases suggested by the pseudocode or typical problem constraints.
- Ensure your solution complies with a maximum runtime of approximately 5 seconds per function under typical input sizes.
- Avoid any extraneous output: provide **only one Python code block** with the full final solution wrapped as ```python ...```, with no explanatory text, comments unrelated to correctness or clarity, debug prints, or any auxiliary text.
- Use Python 3.10+ features if they improve clarity or brevity without sacrificing accessibility.
- Convert pseudocode constructs (e.g., loops, conditions) into fully correct, runnable Python equivalents.
- Handle `None` values and other special literals correctly as Python `None`.
- If the pseudocode contains inner helper functions, faithfully replicate them as nested functions for clarity and encapsulation.
- Strive for code simplicity but never at the expense of correctness or completeness.

Return solely the final solution as a single Python code block, ready to be executed without any modification.
```