Generate concise, high-level pseudocode directly from the given problem description and original code, preserving all original function names exactly. The pseudocode must be compact, readable, and primarily expressed in natural language with minimal symbolic notation and standard abbreviations for clarity and brevity. Prefer simple, idiomatic one-liners and clear constructs, for example:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Use minimal and consistent indentation only where essential for clarity (e.g., within loops or conditionals). Represent data types briefly and naturally when it improves understanding (e.g., “let A be list of int”). Avoid verbose, explicit low-level details and avoid comments, explanations, summaries, headings, or separators. Do not output anything besides clean pseudocode instructions starting immediately from the first line. The output should read fluidly like straightforward instructions understandable by someone familiar with programming, maintaining faithfulness to the original logic while maximizing compactness and clarity.

Example style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A