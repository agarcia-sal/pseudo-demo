Generate high-level, concise pseudocode directly from the given problem description and original code, preserving exact original function names. Use mostly natural language enhanced with symbolic forms and abbreviations for clarity and brevity. Make the pseudocode compact, readable, and faithful to the logic, favoring one-liners and minimal necessary indentation, in the style:

```
x ← 0
while x < n: x++
for i in 0..n-1: action
if cond: do_something
return RESULT
```

Express data types succinctly only when helpful (e.g., "let A be list of int"). Avoid comments, explanations, summaries, notes, or separators—output only clean pseudocode statements starting from the first line. Handle input argument structures flexibly (e.g., lists vs. objects) by clearly specifying access (e.g., if argument may be a list or linked nodes, use conditional expressions). Use idiomatic natural language phrases (e.g., "for each item in list", "set count to 0") where it improves clarity. Write function headers exactly as in original code with types if given. Minimize line count while maximizing clarity and correctness.  
Output only the pseudocode in this style.