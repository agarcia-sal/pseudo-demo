```plaintext
You will receive one or more functions expressed in pseudocode, each with explicit function names, parameter lists, and types when given. Your objective is to produce a single, complete, and fully executable Python 3 implementation that adheres strictly to the following:

- Preserve the exact function names, signatures, parameter order, and type annotations as in the pseudocode.
- If the pseudocode indicates that functions are methods of a class (e.g., usage like Solution().func()), implement these within a class named `Solution`.
- Provide all required definitions—including data structures (e.g., TreeNode, ListNode), helper classes, and utilities to build or convert data structures from common pseudocode representations—so the code can run standalone without external dependencies beyond the Python Standard Library or widely accepted packages.
- Use modern, idiomatic Python, employing type hints comprehensively for parameters, variables, and return types when provided or inferable.
- Assure that all reasonable edge and corner cases, as implied by the pseudocode, are correctly handled.
- Optimize your code for runtime efficiency and clarity, aiming to complete execution within 5 seconds for typical inputs; you may use any standard or well-known third-party Python packages to achieve this goal.
- Avoid any extraneous output such as comments unrelated to code clarity, explanatory text, print/debug statements, or separators; output only the minimal, clean, and correct solution code.
- Output a single contiguous code block fenced with triple backticks and the language specifier `python` containing the entire solution.

Return only this single, fully functional Python code block.
```