Rewrite the input pseudocode into a functionally identical but thoroughly transformed version that preserves exact function and class names as well as their full hierarchical and signature structure. Your rewritten pseudocode must:

- Rename exclusively all local variables and parameters to entirely new, unrelated labels, ensuring every occurrence is consistently updated; do not rename function names, class names, or alter their structural hierarchy.

- Radically restructure control flows by applying any combination and nesting of these transformations:
  - Convert FOR loops ↔ WHILE loops, including changing loop conditions and counters accordingly.
  - Replace IF-ELSE statements with SWITCH-CASE constructs or nested guard conditions and vice versa.
  - Flatten nested conditionals into sequential conditions or nest simple conditions arbitrarily, preserving logic.
  - Reorder logically independent conditional branches or loops.
  - Introduce early returns or consolidate multiple return points.
  - Use explicit flags, state variables, or guards to simulate flow control when appropriate.

- Reorder independent operations, statements, and expressions freely without violating dependencies. Separate complex expressions into multiple simpler steps using temporary variables, or combine multiple instructions into compact expressions with temporary helpers.

- Transform expressions extensively by:
  - Substituting operators with synonyms or logically equivalent constructs (e.g. “!=” → “not equal to”, AND → ∧, OR → ∨).
  - Changing data access: e.g., array[index] ↔ array.at(index) if semantically valid.
  - Modifying numerical literals by equivalent representations (e.g., decimal ↔ hexadecimal where valid).
  - Applying explicit casting or intermediate variables to break down or combine computations.

- Vary iteration idioms and data traversal approaches by:
  - Switching between index-based, element-based, pointer-like, or iterator-based looping styles.
  - Reversing or permuting iteration order where safe.
  - Rearranging independent data accesses including multiple reads or writes.

- Inject new temporary helper variables or auxiliary constructs as needed for clarity or restructuring, with precise and consistent usage.

- Modify formatting arbitrarily: vary indentation, line breaks, spacing, grouping of statements, style of comments (if any), adhering only to valid pseudocode syntax.

- Do not introduce any semantic shortcuts, algorithmic simplifications, or changes in stepwise computational behavior; avoid using built-in or library functions that would shortcut explicit algorithmic steps present in the original pseudocode.

- Output only the transformed pseudocode text exactly, with no explanations, delimiters, or commentary.

The output pseudocode should be structurally, lexically, syntactically, and stylistically as distinct as possible from the input while provably equivalent in all effects and behaviors. Preserve the function names, class names, method names, their hierarchical nesting, and signatures precisely and unaltered. Output only the rewritten pseudocode.