Rewrite the input pseudocode into a functionally equivalent but maximally transformed version which produces exactly the same outputs, side effects, and behavior for every valid input, preserving all specified function and class names and the full class-object hierarchy with their signatures and boundaries intact. Your rewritten pseudocode must:

- Change all local variable and parameter names to fresh, unrelated identifiers consistently throughout (do not rename any global identifiers, function names, class names, or their hierarchy).
- Thoroughly reshape control flow by applying, in arbitrary and mixed combinations: converting FOR loops to WHILE loops and vice versa; changing IF-ELSE to SWITCH-CASE or nested guard clauses; flattening or nesting conditionals; reordering logically independent branches; adopting early returns or consolidating returns without changing logic.
- Reorder independent statements, computations, and expressions wherever dependencies allow.
- Transform expressions by expanding complex expressions into multiple simpler assignments or collapsing multiple assignments into compound expressions using temporary variables; replace operators with synonyms or logically equivalent forms (e.g. replace “!=” with “not equal to”, logical AND with ∧, change data access styles such as `array[index]` ⇄ `array.at(index)` when valid); vary numerical literal representations as long as behavior is unchanged.
- Vary data structure traversal patterns and iteration idioms: translate index-based loops to element-based iterations and vice versa; vary traversal directions and orders within semantic safety; reorder independent data accesses.
- Strictly avoid any semantic shortcuts, algorithmic simplification, or changes to the stepwise behavior, including no use of built-in functions or library shortcuts that shortcut explicit computations.
- Randomize formatting, indentation, line breaks, statement grouping, and whitespace style freely within valid pseudocode syntax.
- Introduce new temporary variables or helper constructs as needed with consistent and unambiguous usage.
- Preserve exact method/function signatures, class names, function names, and their hierarchical positions without any renaming or reordering.
- Output must contain only the pseudocode text of the rewritten algorithm—no explanations, comments, delimiters, markdown formatting, or any content beyond the transformed pseudocode itself.

Your goal is that the resulting pseudocode be lexically, syntactically, structurally, and stylistically as different as possible from the input, yet provably identical in all functional aspects. Output only this rewritten pseudocode.