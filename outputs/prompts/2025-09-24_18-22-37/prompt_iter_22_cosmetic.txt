Rewrite the input pseudocode into a functionally identical version that preserves *all* original behavior, outputs, side effects, function and method signatures, and the precise class hierarchy and boundaries unaltered. Your goal is to make the rewritten pseudocode maximally distinct from the original at every lexical, syntactic, structural, and stylistic level, while guaranteeing semantic equivalence *in every detail*.

To achieve this, you must:

- Rename **all local variables and parameters only**, inventing fresh, unrelated names consistently throughout; **do not rename** global variables, functions, classes, method names, or class hierarchies.
- Reshape all control structures by applying arbitrary, mixed transformations such as:
  - Converting FOR loops ↔ WHILE loops (including variations like repeat-until),
  - Replacing IF-ELSE chains with SWITCH-CASE blocks, nested guards, or early exits,
  - Flattening nested conditionals or introducing nesting where none existed,
  - Reordering logically independent branches and statements without changing data dependencies or evaluation order,
  - Inverting conditions where safe, employing De Morgan’s laws or logically equivalent forms.
- Reorder independent statements, expression evaluations, and assignments aggressively, preserving dependency and side-effect correctness.
- Rewrite all expressions by expanding them into multiple simpler assignments or collapsing multiple statements into compound expressions using temporary variables; replace operators with synonyms or logically equivalent expressions (e.g., `!=` → “not equal to”, `AND` → `∧`, replace arithmetic with equivalent forms). Vary numeric literal forms where behavior is unaffected (e.g., `2` → `1+1`, or using unary minus).
- Vary data access and traversal patterns, including:
  - Changing indexed loops to element-wise or iterator-based loops and vice versa,
  - Altering traversal order (forward ↔ backward) when safe,
  - Reordering independent data accesses.
- Introduce new temporary variables, helper assignments, or auxiliary constructs as needed, ensuring clear and consistent usage.
- Vary formatting freely — indentation, line breaks, whitespace, grouping — within valid pseudocode syntax.
- **Absolutely do not apply any semantic shortcuts, algorithmic simplifications, or use built-in/library functions or shortcuts that alter the explicit stepwise logic or semantics.** The algorithm’s procedural unfolding and stepwise states must remain exactly as in the input.
- Preserve the original function names, class names, and the complete class-object hierarchy including all method signatures and boundaries exactly as they appear. No renaming or reordering is allowed for these.
- The final output must be valid pseudocode text only—no explanations, comments, delimiters, or any text beyond the rewritten pseudocode.

Output only the transformed pseudocode text. The rewritten code must preserve *every* functional aspect as strictly as possible while being as lexically, syntactically, structurally, and stylistically different from the input as can be achieved.