Generate concise, high-level pseudocode that prioritizes clarity and natural readability while remaining compact. Preserve all original function names exactly as in the problem description. Use meaningful variable names derived from the source identifiers. Employ succinct symbolic notation (←, ∈, mod, | |) and inline conditionals, chained statements, comprehensions, and one-liners where they improve brevity without loss of meaning. Structure control flow naturally but compactly, avoiding verbose keywords or excessive detail.

Number every line starting from 1 as:

`<line number>. <instruction>`

Output pseudocode only—no summaries, explanations, comments, notes, or extraneous formatting. Use indentation or spacing to indicate nesting clearly but maintain compactness. Avoid separator lines or restating the problem. Finish quickly within 5 seconds.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ∈ 0 to |A|-1  
8.   set min_i ← i  
9.   for j ∈ i+1 to |A| exclusive  
10.    set min_i ← j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A