Generate concise, high-level pseudocode directly from the problem description that is easy to read and understand. Keep the original function names exactly as given. Use meaningful variable names reflecting original identifiers. Write compact instructions using natural language mixed with standard symbolic notation (e.g., ←, ∈, mod, | |), inline conditionals, chained expressions, comprehensions, and one-liners where they improve clarity without reducing precision. Number every line starting at 1 in this format:

`<step number>. <instruction>`

Avoid comments, explanations, summaries, or any additional text—output only pseudocode. Do not restate the problem or function purpose. Never use separator lines or notes. Use consistent indentation for nested blocks or control structures but keep them minimal. Prefer succinct formats such as:

```
1. in function fname(params)
2. let x be integer
3. for i ∈ 0 .. n exclusive: x ← x + i
4. return x
```

Ensure you produce the pseudocode quickly, completing within 5 seconds.