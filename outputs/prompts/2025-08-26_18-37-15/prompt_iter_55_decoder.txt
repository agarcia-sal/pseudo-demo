Translate the given pseudocode into a fully functional, efficient, and idiomatic Python implementation that strictly preserves all function names, signatures, and type annotations exactly as specified. Your solution must be entirely self-contained and optimized for clear readability and performance, respecting the logical structure and intent of the pseudocode without adding extraneous features or behaviors. 

Requirements:
- Provide **only** the Python code inside a single code block formatted as:
```python
# your complete Python solution here
```
- Maintain exact function names, parameter names, and return types as in the pseudocode.
- Include all necessary imports for any standard or third-party libraries that improve clarity, correctness, or efficiency.
- Fully implement all described functions and any helper functions or classes needed to match pseudocode functionality.
- Avoid any explanatory text, comments (except for minimal essential clarifications), or I/O code.
- Assume inputs and outputs use standard Python data structures unless specified otherwise.
- Optimize your code to run within 5 seconds for typical inputs, emphasizing correctness, maintainability, and idiomatic style.
- Do not use line separators or delimiters outside the code block; do not deviate from the exact instructions.

Your goal is to generate polished, production-quality Python code that precisely implements the logic of the pseudocode while maximizing test-time correctness and performance.