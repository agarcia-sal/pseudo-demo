Generate concise, natural, and high-level pseudocode from the problem description, preserving all original function names exactly. Use meaningful variable names that reflect original identifiers. Prioritize clarity with minimal verbosity by using symbolic notation (←, ∈, mod, | |), inline conditionals, chained expressions, comprehensions, and one-liners where they simplify and compact logic. Number each line starting from 1 following this exact format:

`<step number>. <instruction>`

Omit comments, explanations, summaries, notes, or any restatement of the problem. Output only the pseudocode that is easy to read and understand, blending natural language and symbols fluidly. Avoid separator lines or extra formatting. Complete output within 5 seconds.

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j=i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A