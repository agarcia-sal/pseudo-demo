Translate the given pseudocode into a concise, idiomatic, and fully functional Python implementation that strictly preserves all function names, signatures, and type annotations exactly as provided. Your solution must be fully self-contained, runnable within 5 seconds, and directly reflect the pseudocode’s logic without adding or omitting any behaviors.

Please adhere to the following instructions precisely:  
- Output **only** the complete Python code enclosed within a single fenced code block formatted as:  
```python
# your translated Python code here
```  
- Preserve all function names, signatures, and explicit type annotations exactly as in the pseudocode.  
- Include all necessary imports — standard or third-party — that improve clarity, efficiency, or correctness, avoiding unused imports.  
- Implement all functions and any helper functions entirely; code should be ready-to-run with no missing components.  
- Use Pythonic constructs and optimizations for clarity, correctness, and performance, while maintaining faithful correspondence with the pseudocode logic (no extraneous I/O, logging, or comments, except when absolutely essential to explain subtle logic).  
- Assume all input/output are conventional Python data types as implied by the pseudocode unless otherwise stated.  
- Prioritize readable, maintainable, and efficient code that avoids redundant computation and unnecessary data structures, securing completion well within the 5-second execution constraint.

Your task is to produce polished, production-quality Python code that maximizes correctness, readability, and runtime efficiency strictly aligned with the provided pseudocode.