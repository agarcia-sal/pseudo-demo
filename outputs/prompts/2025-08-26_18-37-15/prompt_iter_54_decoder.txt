Translate the given pseudocode into a fully correct, efficient, and idiomatic Python implementation that strictly preserves all function names, signatures, and type annotations exactly as provided. Your implementation must be complete and self-contained, including any necessary imports, and must directly reflect the logic of the pseudocode without adding unnecessary features or input/output handling. Optimize for clean, readable, and performant Python code that executes within 5 seconds for typical inputs.

**Instructions:**  
- Format the entire solution **only** as one Python code block wrapped with triple backticks and the `python` tag, like this:  
```python
# your translated Python code here
```  
- Keep all function names and signatures exactly as in the pseudocode, with precise retention of any type annotations.  
- Fully implement every function and required helpers; include imports only if they enhance clarity, correctness, or performance.  
- Avoid any explanatory comments or plain text output unless a comment is essential for understanding intricate logic.  
- Assume default Python standard data structures for inputs and outputs unless otherwise specified.  
- Do not include any input/output code or debugging statements.  
- Prioritize idiomatic, maintainable Python and efficient logic faithful to the pseudocode.  
- Use any standard or third-party Python libraries judiciously if they bring meaningful improvements.  
- The final code must run within a 5-second limit on typical problem scales.

Your goal is to produce polished, production-quality Python that maximizes correctness, clarity, and performance, perfectly mirroring the provided pseudocode.