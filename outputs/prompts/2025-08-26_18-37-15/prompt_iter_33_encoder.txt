Generate concise, clear, and compact pseudocode directly from the problem description that is easy to read and high-level. Use natural yet precise language, preserving all original function names exactly. Choose meaningful variable names reflecting original identifiers. Prefer symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners whenever they enhance brevity and clarity without loss of meaning. Use natural phrasing consistently (e.g., “let x be integer”, “for each element ∈ collection”).

Number each line starting from 1 as:  
`<line number>. <instruction>`

Format example:  
`1. in function main`  
`2. let n be integer`  
`3. read n`  
`4. let A be vector of integers`  
`5. set size of A = n`  
`6. read n elements into A`  
`7. for each element in A`  
`8.   set min_i to i`  
`9.   for j = i+1 to size of A exclusive`  
`10.    set min_i to j if A[min_i] > A[j]`  
`11.   swap A[i], A[min_i]`  
`12. print all elements of A`

Omit comments, explanations, summaries, notes, and separator lines. Do not restate or explain the problem. Output only the pseudocode, ensuring it balances naturalness with compact notation and high abstraction. Complete the output within 5 seconds.