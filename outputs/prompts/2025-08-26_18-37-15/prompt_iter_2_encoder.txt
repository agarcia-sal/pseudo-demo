Generate concise, high-level pseudocode from the given problem description. The pseudocode should be easy to read, natural, and compact while preserving clarity. Use the original function names exactly as in the source code. Express logic in clear one-liners whenever possible, employing symbolic notation and standard abbreviations without ambiguity. Avoid comments, explanations, summaries, or any meta text—output only the pseudocode steps. Structure each line with a step number followed by a dot and a space, then the instruction (e.g., `1. x ← 0`). Use meaningful variable names as close as possible to the original code. Include control flow and data structures naturally and succinctly. Do not insert separator lines or extra formatting. Aim to complete this within 5 seconds.

Example format to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i ← i  
9.   for j ← i+1 to size of A exclusive  
10.    if A[min_i] > A[j] then min_i ← j  
11.   swap A[i], A[min_i]  
12. print all elements of A