Translate the given pseudocode into a complete, self-contained, production-quality Python implementation that strictly preserves all original function names, signatures, and type annotations exactly as specified. Your translation must be fully runnable, efficient, and directly reflect the pseudocodeâ€™s logic without adding any unnecessary code or side effects. If appropriate, include imports of any standard or reputable third-party Python libraries that improve clarity, correctness, or performance.

Requirements:
- Output **only one** Python code block with triple backticks and `python`:
```python
# Your translated Python code here
```
- Match all function names, signatures, and type annotations exactly from the pseudocode.
- Implement all functions completely, including any helpers, imports, and explicit return statements.
- Follow Python best practices: write idiomatic, clear, maintainable, and performant code.
- Assume inputs and outputs use standard Python types consistent with typical coding tasks unless otherwise stated.
- Omit explanations, extra text, or comments except where a brief comment is essential to clarify subtle or nonobvious logic.
- Optimize for correctness, readability, and runtime efficiency within a strict 5-second execution constraint.
- Do not produce any I/O code or extraneous statements beyond the function implementations.

Your goal is to generate the cleanest, most reliable Python code possible that exactly and efficiently implements the provided pseudocode logic.