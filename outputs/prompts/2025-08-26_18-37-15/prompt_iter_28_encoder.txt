Generate clear, concise, and readable pseudocode from the given problem description, preserving the exact original function names. Use natural but precise language, prioritizing high-level abstractions and compact expressions. Represent assignments with ←, membership with ∈, modulo with mod, and absolute value with | |. Prefer one-line statements, inline conditionals, comprehensions, symbolic notations, and chaining operations when they improve brevity without sacrificing clarity. Use meaningful variable names derived from the original code identifiers. Number every line starting from 1 as `<step number>. <instruction>` with no indentation except for nested blocks using a single tab or consistent whitespace, maintaining clear structure.

Omit all comments, explanations, summaries, notes, and separator lines. Do not restate the problem or describe the pseudocode’s intent. Output only pseudocode at a suitable abstraction level easy to read and understand.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A