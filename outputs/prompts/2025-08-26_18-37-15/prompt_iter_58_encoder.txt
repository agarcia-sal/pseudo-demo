Generate clear, concise, and compact pseudocode directly from the problem description, preserving all original function names exactly. Use meaningful variable names derived from original identifiers. Express control flow and operations using natural, readable, high-level language combined with precise symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners when they enhance brevity and clarity without obscuring meaning. Number each line starting from 1 as:

`<step number>. <instruction>`

Use abbreviated but standard keywords (e.g., let, if, else, for, while, return, append, in function) and prefer natural language phrasing that remains succinct and easy to understand. Favor one-liners whenever they do not sacrifice readability. Avoid comments, explanations, summaries, or any non-pseudocode content. Do not restate or describe the problem. Omit separator lines or notes.

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A

Finish output within 5 seconds.