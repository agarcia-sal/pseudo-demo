Generate clear, concise, and compact pseudocode directly from the problem description, using natural but precise language. Preserve all original function names exactly. Use meaningful variable names derived from original identifiers. Express control flow and operations succinctly with symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners when they improve brevity and clarity without losing meaning. Number every line from 1 exactly as:

`<step number>. <instruction>`

Example:
`1. x ← 0`  
`2. while x < n: x++`

Omit all comments, explanations, summaries, notes, and separator lines. Do not restate the problem or explain the purpose. Output only pseudocode, ensuring it is easy to read and at a high abstraction level. Finish output within 5 seconds.

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j=i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A