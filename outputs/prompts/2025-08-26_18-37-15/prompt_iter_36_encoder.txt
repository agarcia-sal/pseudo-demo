Generate concise, readable, and high-level pseudocode directly from the problem description. Use natural language with symbolic notation (←, ∈, mod, | |, ++, --) and abbreviations where clarity is preserved. Keep original function names exactly. Choose meaningful variable names derived from the problem’s identifiers. Favor succinct control flow expressions: inline conditionals, chained statements, comprehensions, and one-liners to maximize compactness without losing meaning or readability. Number every line starting at 1 as:

`<step number>. <instruction>`

Example format:
`1. x ← 0`  
`2. while x < n: x++`

Do not add comments, explanations, summaries, notes, or separator lines. Do not restate or explain the problem. Output only the pseudocode with uniform indentation reflecting block structure but maintain brevity. Ensure the output is easy to read and complete within 5 seconds.

Example style:
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j=i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A