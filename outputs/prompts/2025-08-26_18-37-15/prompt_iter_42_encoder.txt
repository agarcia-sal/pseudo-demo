Generate concise, natural, high-level pseudocode directly from the problem description, preserving all original function names exactly. Use meaningful variable names derived from original identifiers. Express control flow compactly with symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners when they enhance clarity without losing precision. Use natural language phrasing but keep instructions succinct and abstract.

Number every line starting at 1 as follows (no extra formatting or separator lines):

`<step number>. <instruction>`

Examples:
`1. let x ← 0`  
`2. while x < n: x++`

Omit comments, explanations, summaries, or restatements of the problem. Output only pseudocode easy to read and understand at a high abstraction level.

Adopt idiomatic pseudocode conventions:
- Use “in function <name>” for function start  
- Use “let” or “set” to declare/assign variables  
- Use “for <var> ∈ <collection>” or “for i ∈ 0 to |array|-1” for loops  
- Use one-liners for simple conditionals or assignments (e.g., `if cond: return val`)  
- Use comprehensions for concise collection operations

Finish output swiftly (within 5 seconds).

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ∈ 0 to |A|-1  
8.   set min_i ← i  
9.   for j ∈ i+1 to |A| exclusive  
10.    set min_i ← j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A