Generate easy-to-read, understandable, and concise pseudocode directly from the problem description, preserving exact original function names. Use natural yet compact language that communicates intent at a high level without loss of meaning. Prefer symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners to express control flow and operations succinctly. Employ meaningful variable names derived from original identifiers.

Number every pseudocode line starting from 1 as:

`<line number>. <instruction>`

Use the format:
- For function start: `in function <function_name>`
- Naming variables with type hints naturally: `let var be <type>` or `let var ← <expression>`
- Use comprehensions for filters and transforms
- Use minimal punctuation and no comments, explanations, summaries, or separators
- Do not restate the problem or add clarifications
- Output only pseudocode, ensuring brevity, clarity, and high abstraction
- Finish output within 5 seconds

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A