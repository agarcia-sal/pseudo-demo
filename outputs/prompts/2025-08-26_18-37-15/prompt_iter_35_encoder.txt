Generate concise, clear, and readable pseudocode directly from the problem description, preserving all original function names exactly. Use natural but compact language with meaningful variable names derived from the problem’s identifiers. Represent control structures and operations succinctly using symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners whenever they maintain clarity and brevity. Number every line starting from 1 as:

`<line number>. <instruction>`

Output only pseudocode—omit explanations, comments, summaries, or any extraneous text. Avoid restating the problem or inserting clarifications. Keep pseudocode at a high abstraction level but easy to follow. Prefer natural-language phrasing that flows smoothly and reads like clear instructions. Use compact expressions but avoid excessive abbreviation that harms understanding. Do not include separator lines or other formatting. Complete output within 5 seconds.

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to |A| exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A