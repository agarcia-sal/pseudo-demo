Generate clear, compact, and easy-to-read pseudocode directly from the problem description. Use natural yet concise language, preserving all original function names exactly. Favor high-level constructs, symbolic notation (e.g., ←, ∈, mod, | |), inline conditions, comprehensions, and chained expressions to keep code dense but unambiguous. Prefer one-liners where they improve clarity without losing meaning. Number every line starting at 1 in this exact format:

`<step number>. <instruction>`

(e.g., `1. x ← 0` or `2. while x < n: x++`)

Use meaningful variable names derived from the original code. Avoid comments, explanations, notes, summaries, or separator lines. Output only the pseudocode. Complete output within 5 seconds.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j=i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A