Generate concise, high-level pseudocode from the given problem description. The pseudocode should be easy to read, natural, and compact—favor natural language phrasing with clear symbolic notation and standard abbreviations. Preserve original function names exactly as in the source code. Express control flow and data structure operations succinctly, using one-liners whenever it improves clarity without losing meaning. Use meaningful variable names close to those in the original code. Output only the pseudocode steps—no comments, explanations, summaries, or meta text. Format each line as a step number, a dot, a space, then the instruction (e.g., `1. x ← 0` or `2. while x < n: x++`). Avoid separator lines or extra formatting. Prefer compact forms like inline conditionals, chained statements, and set notation where clear. Complete the output within 5 seconds.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j=i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A