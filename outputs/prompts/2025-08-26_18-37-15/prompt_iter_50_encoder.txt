Generate pseudocode that is clear, compact, and easy to read by blending natural language with precise symbolic notation. Maintain all original function names exactly. Use meaningful variable names reflecting original identifiers. Express control flow and operations succinctly, favoring one-liners, inline conditionals, comprehensions, chained statements, and standard symbols (←, ∈, mod, | |, ≠, ∧, ∨) whenever they improve brevity without sacrificing clarity. Number every line starting at 1 as:

`<line number>. <instruction>`

Use consistent indentation with tabs or spaces for nested blocks, but prefer single-line constructs if they remain readable and clear. Avoid comments, explanations, summaries, restatements of the problem, or notes for clarification. Output only the pseudocode as a self-contained, high-level abstraction of the original code. Finish within 5 seconds.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ∈ 0 to |A|-1  
8.   set min_i ← i  
9.   for j = i+1 to |A| exclusive  
10.    set min_i ← j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A