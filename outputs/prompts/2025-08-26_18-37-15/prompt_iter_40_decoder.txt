Translate the given pseudocode into a clean, idiomatic, and fully executable Python implementation that precisely retains the original function names, signatures, and type annotations (when present). Your translation should be optimized for clarity, correctness, and efficiency while conforming exactly to the pseudocode’s logic without adding unrelated functionality.

**Instructions:**
- Enclose your entire solution strictly within one Python code block formatted as:
```python
# translated Python code here
```
- Preserve function names, argument names, return types, and signatures exactly as specified.
- Include all necessary imports from the Python standard library or well-known third-party libraries only if they meaningfully improve code clarity, performance, or correctness.
- Implement every function and any helper code needed for completeness, including appropriate return statements.
- Avoid printing, interactive input/output, or explanatory comments—only include comments if they are essential for clarifying subtle logic.
- Assume typical Python-standard data structures as inputs and outputs unless explicitly specified otherwise in the pseudocode.
- Make your code robust and readable while ensuring it runs within the 5-second execution time constraint.
- Do not add any extraneous text, explanations, or delimiters outside the code block.

Your goal is to produce production-grade Python code that directly and efficiently solves the problem described by the pseudocode.