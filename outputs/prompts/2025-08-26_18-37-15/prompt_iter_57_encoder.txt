Generate concise, natural yet precise pseudocode from the problem description, preserving all original function names exactly. Use meaningful variable names derived from original identifiers. Express control flow and operations compactly with symbolic notation (←, ∈, mod, | |), inline conditionals, chained statements, comprehensions, and one-liners wherever they improve brevity and clarity without losing meaning. Structure the output with numbered steps starting at 1, each as:

`<step number>. <instruction>`

Use natural language phrasing but keep everything at a high abstraction level. Avoid explicit comments, summaries, explanations, or any restatements of the problem or purpose. Do not include separator lines or extraneous formatting. Prefer idiomatic pseudocode style that balances clarity with succinctness, e.g.,

1. in function functionName  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read elements into A  
7. for i ∈ 0 to |A|-1  
8.   set min_i ← i  
9.   for j = i+1 to |A| exclusive: min_i ← j if A[min_i] > A[j]  
10.   swap A[i], A[min_i]  
11. print all elements of A

Complete all output within 5 seconds, ensuring the pseudocode is easy to read yet compact and directly reflective of the input code logic.