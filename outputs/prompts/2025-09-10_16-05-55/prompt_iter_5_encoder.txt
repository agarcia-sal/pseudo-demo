Generate concise, high-level pseudocode from the given problem description and original code as follows:

- Output only the pseudocode steps, no explanations, comments, summaries, or extra text.  
- Keep the original function names exactly as in the source code.  
- Use clear, compact language emphasizing natural phrasing with symbolic notation and standard control structures (if, for, while, etc.).  
- Prefer mostly one-liner statements whenever possible, combining conditions and actions succinctly.  
- Use common abbreviations and omit unnecessary keywords to keep it brief and readable.  
- Number each line starting at 1, following this exact format:  
  1. x ← 0  
  2. while x < n: x++  
- Avoid separator lines, extra blank lines, or formatting besides the line numbers and pseudocode lines.  
- Produce pseudocode that is logically complete and faithful to the original function’s implementation and behavior.  
- Ensure the pseudocode is easily understandable without any additional context or explanation.  
- Target clarity, brevity, and correctness within a 5-second generation limit.

Example style you should produce:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A