Translate the given pseudocode into a fully working, highly efficient, and idiomatic Python function. The generated code must strictly:

- Define **only** the function named exactly as in the pseudocode, with the same parameters.
- Include **all** required imports, helper functions, and custom data structures (e.g., TreeNode, ListNode) **within the same single Python code block**.
- Automatically detect when input parameters represent common abstract data types—such as binary trees, linked lists, or nested lists—and implement any minimal parsing or construction code inside the function or helper functions, so that the returned function can be called directly with natural Python arguments (e.g., lists, integers).
- Avoid references to any classes or wrappers named `Solution` or others unless explicitly required by the pseudocode.
- Use Python type hints to improve code clarity, applying them concisely and meaningfully.
- Use only standard and widely accepted Python libraries; external dependencies are allowed only if explicitly stated in the pseudocode.
- Ensure the implementation is performant and concise, targeting execution well under 5 seconds for typical input sizes.
- Avoid printing, comments, explanations, or extraneous text. Output strictly valid, runnable Python code that reproduces the exact logic described by the pseudocode.
- Output your entire solution inside a **single** code block using triple backticks with `python` syntax highlighting, like so:

```python
def functionName(parameters):
    # optimized, complete implementation here
    ...
```

Your output must be a self-contained, ready-to-run code snippet that exactly implements the pseudocode’s functionality, using idiomatic Python and adjusting input/output as needed for natural, direct calls. 

Produce the Python code now.