Generate concise, easy-to-read pseudocode from the given problem description and original code. The pseudocode must:

- Use predominantly natural language with symbolic notation, focusing on compactness and a high-level overview.
- Retain the exact original function name and parameters.
- Prefer mostly one-line statements combining control structures (if, for, while, etc.) and assignments.
- Use standard common abbreviations and minimal syntax required for clarity.
- Avoid comments, explanations, summaries, notes, or any descriptive text; output only the numbered pseudocode steps.
- Number lines starting at 1 followed by a period and a single space, then the statement (e.g., `1. x ← 0` or `2. while x < n: x++`).
- Do not output any separator lines, extra blank lines, or verbose formatting—strictly lines of pseudocode.
- Ensure completeness: the pseudocode must logically implement the entire function as per the original code.
- Keep the pseudocode compact enough to output within 5 seconds.
- Frame the entire pseudocode in the style of natural imperative instructions without boilerplate like “define function” unless it improves clarity.

Example style:

1. in function largestPalindrome(n)  
2. if n = 1: return 9  
3. upper ← 10^n - 1  
4. lower ← 10^(n - 1)  
5. for i from upper down to lower + 1:  
6.  pal ← integer of concat(str(i), reverse str(i))  
7.  check conditions on pal and factorization  
8. return result

---

Your output must be ONLY the pseudocode according to these instructions.