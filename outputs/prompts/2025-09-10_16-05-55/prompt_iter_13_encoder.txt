Generate concise pseudocode that directly reflects the logic of the given problem’s original code. The pseudocode must:

- Use clear, natural language with symbolic notation to express operations compactly and at a high abstraction level.  
- Exactly preserve all original function names and parameter names without alteration.  
- Prefer mostly one-line statements combining control constructs (if, for, while, etc.) and expressions using standard pseudocode notation and common abbreviations, avoiding verbose detail.  
- Avoid any explanation, comments, summary, notes, or redundant phrasing—output only raw pseudocode steps.  
- Enumerate each pseudocode line starting from 1, strictly following this format:  
  1. x ← 0  
  2. while x < n: x++  
- Omit all separators or extra formatting beyond line numbers and statements.  
- Ensure completeness and correctness such that the pseudocode fully and logically corresponds to the original function’s implementation.  
- Emphasize readability and ease of understanding without requiring additional context.  
- Respond within a 5-second limit, optimizing brevity without sacrificing accuracy or clarity.  

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A