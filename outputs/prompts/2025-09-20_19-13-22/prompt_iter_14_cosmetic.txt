Rewrite the given pseudocode into a new version that is functionally identical but as syntactically and structurally distinct as possible.  
- Preserve all original function names exactly, the exact class names, and their original class and object hierarchies without modification.  
- Do not change the external interface, inputs, outputs, or the algorithm’s semantics in any way.  
- Transform control flow by applying varied constructs (e.g., convert FOR-loops to WHILE-loops or recursion, switch between index-based and iterator-based loops, invert conditionals, use guard clauses or early returns).  
- Rename all local variables comprehensively with new arbitrary but consistent identifiers, while never altering function or class identifiers.  
- Reorder independent statements where it does not affect correctness, unroll or fold loops, extract or inline expressions, or rewrite expressions with algebraic equivalences (e.g., change “a + b” to “b + a”, use De Morgan’s laws transparently).  
- Change formatting extensively, including whitespace, indentation style, and line breaks, and replace some language constructs with alternative idioms or pseudocode conventions.  
- Avoid introducing any explanatory comments, annotations, or extraneous text—only output the rewritten pseudocode.  
- Ensure the rewritten pseudocode can be directly substituted for the original without any change in external behavior, performance characteristics, or side effects.  
- The output must be ONLY the transformed pseudocode, strictly no additional content or explanation.