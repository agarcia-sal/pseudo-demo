Rewrite the given pseudocode into a semantically identical but syntactically and structurally highly divergent version, ensuring all original functionality is preserved exactly. Maintain all original function names, class names, and the exact class and object hierarchies without changes. Your rewriting must drastically alter:

- Control flow constructs (e.g., convert FOR loops into WHILE loops or recursion, replace IF-ELSE chains with SWITCH-like constructs where possible, unroll or refactor loops)
- Variable naming (rename variables consistently but differently from the original)
- Expression structures and order (rearrange computations, change order of conditions or logical expressions)
- Statements grouping and formatting (alter indentation, line breaks, and statement grouping)
- Data structure usage (replace arrays with linked lists or equivalent where applicable, use alternative standard operations)
- Logical approaches (e.g., convert iterative logic to recursive, flatten nested blocks, or vice versa)
- Built-in operations with alternative but equivalent pseudo-operations

Do not add any explanations, comments, meta-text, or anything other than the transformed pseudocode itself. The output must contain only the resulting pseudocode reflecting all the above transformations while preserving perfect functional equivalence and the exact API signatures and class structures of the input.