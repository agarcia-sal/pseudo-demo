Rewrite the given pseudocode to produce a semantically identical version that strictly preserves all original functionality, including exact function names, class names, and class/object hierarchies.  
Transform the code to maximize syntactic and structural divergence by applying any and all of the following techniques in combination:

- Replace control flow constructs with logically equivalent alternatives (e.g., convert FOR loops into WHILE loops or recursion, substitute IF-ELSE chains with SWITCH or nested conditions, etc.).
- Alter the order of independent statements and rearrange code blocks where possible without changing behavior.
- Perform systematic and consistent variable renaming, ensuring no original variable names are retained but names remain meaningful and consistent.
- Rewrite expressions and conditions using equivalent logic, including De Morganâ€™s laws, distribution, short-circuiting rearrangements, and use of auxiliary variables.
- Change indentation, spacing, line breaks, and formatting styles extensively.
- Replace literal constants by equivalent expressions or precomputed variables.
- Inline or extract helper functions as appropriate, changing their structure and placement.
- Change data structure usage where equivalent in behavior (e.g., replacing arrays by linked lists or list comprehensions by explicit loops), only if it does not alter semantics.
- Reorder parameters or use named parameter notation if pseudocode style allows and semantics remain unchanged.

Do not introduce any annotations, comments, explanations, or additional text beyond the fully rewritten pseudocode itself. Output only the new pseudocode.

Strictly maintain all interface signatures (function names, parameter names, and class names and relationships exactly as in the original).  
The output format remains pseudocode.