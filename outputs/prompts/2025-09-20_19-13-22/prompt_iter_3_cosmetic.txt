Rewrite the provided pseudocode into a functionally identical version that preserves all behavior exactly but differs as much as possible in surface form. Maintain all original function names, class names, and their hierarchical class/object relationships without change. Your transformation should include, but is not limited to:

- Reordering and restructuring control flows by swapping loop types (FOR ⇄ WHILE), unrolling or introducing recursion, or using early exits and guards.
- Renaming all local variables and parameters to different, consistent identifiers (while preserving scope and meaning).
- Altering expression layouts, including changing operand orders and using equivalent expressions (e.g., replacing `a + b` with `b + a` if valid).
- Reformatting indentation, line breaks, and whitespace freely.
- Replacing built-in or standard operations with equivalent logic or helper constructs.
- Introducing alternative data structure usage or operations that do not affect the algorithm’s semantics.
- Splitting or merging statements as long as functionality stays identical.

Do not modify function or class signatures, global structure, or any externally visible API elements. Do not add any comments, explanations, or output other than the transformed pseudocode itself. Output only the rewritten pseudocode.