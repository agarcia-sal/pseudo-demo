Rewrite the provided pseudocode into a new version that is fully functionally equivalent but deliberately transformed to maximize syntactic, structural, and stylistic difference from the original.  
**Strictly preserve all original function names exactly, as well as all class names and their exact class/object hierarchies without any modification.**  
Your rewriting must include a combination of the following transformations as appropriate:  
- Convert iterative loops into alternate loop types or recursion and vice versa.  
- Reorganize control flow and conditional logic (e.g., replace nested IFs with early returns, switch-case styles, or guard clauses).  
- Rename all local variables and parameters consistently but differently from the original.  
- Change expression order and grouping without affecting evaluation results.  
- Replace standard operations with equivalent expressions (e.g., use arithmetic identities, logical negations, or De Morgan’s laws).  
- Alter data structure usage style (e.g., replace arrays with lists, change sorting approaches or use different indexing methods).  
- Modify formatting, indentation, and line breaks for a distinct visual structure.  
- Use alternative algorithmic idioms or auxiliary helper functions if helpful, as long as overall functionality remains intact.  

Do **NOT** change any class/function signatures, add any extra output, comments, explanations, or annotations—only output the rewritten pseudocode itself.  
Ensure your output is pure pseudocode text in the same structural style (e.g., class-based if original is class-based) but visually and syntactically as different as possible from the input.