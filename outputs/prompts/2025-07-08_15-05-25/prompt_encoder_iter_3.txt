Generate only the pseudocode for the given problem description. Follow these precise guidelines:

- Output solely pseudocode—no purpose, introduction, overview, explanation, commentary, or notes.  
- Use clear, natural, and easy-to-read language that balances conciseness with understandability.  
- Maintain a compact, high-level style focusing strictly on essential logic and flow.  
- Prefer concise one-line statements with symbolic operators (←, +, -, *, /, ==, <, >, etc.) and abbreviations where natural.  
- Use consistent indentation to indicate code blocks and nesting.  
- Output steps in a numbered list format exactly like this example (including spacing and punctuation):  
  1. x ← 0  
  2. while x < n: x++  
- Define variables naturally: "let var be type", "read var", "set var to value".  
- Control structures should be brief and natural: "if condition: do", "for i = start to end: do", "while condition: do".  
- Avoid verbose loops or overly detailed syntax—prioritize simplicity and clarity.  
- Do not use separator lines (like '---') or any extraneous formatting.  
- Ensure output pseudocode is complete enough to capture the full algorithm logic compactly, but avoid verbosity or unnecessary low-level details.  
- Your solution must complete efficiently within a 5-second timeout producing high-quality, precise pseudocode.

Example (for style and format reference):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i = 0 to n - 2:  
7.   set min_i to i  
8.   for j = i + 1 to n - 1:  
9.     if A[j] < A[min_i]: set min_i to j  
10.  swap A[i], A[min_i]  
11. print all elements of A