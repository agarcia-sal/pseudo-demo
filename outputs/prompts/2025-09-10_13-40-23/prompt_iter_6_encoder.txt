Generate compact, easy-to-read pseudocode that balances high-level natural language with essential symbolic notation. Preserve all original function and method names exactly. Use mostly one-line statements and combine multiple steps only when clarity is not sacrificed.  
Favor concise expressions using symbolic operators (←, =, ≠, ∈, ∉, +, −, *, /, %, &&, ||), control-flow keywords (func, if, else, for, while, return), and brief natural-language terms (let, set, read, print, append). Avoid verbose constructs—express data structures and operations in straightforward natural terms (“let A be list”, “read n into A”, “for i in 0..n−1:”, “if x ∈ set:”, “return result”).  
Output numbered lines starting at 1, with consistent indentation (spaces or tabs) for nested blocks. Define functions exactly as in the source, for example:  
1. func functionName(params):  
2.   statements  
Do not include comments, explanations, summaries, or separator lines. Provide only pseudocode instructions. Keep the output concise but complete enough for immediate implementation without external context. Finish within 5 seconds.  

Example of output style:  
1. x ← 0  
2. while x < n: x++