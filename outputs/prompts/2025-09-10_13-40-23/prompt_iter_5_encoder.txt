Generate concise, high-level pseudocode that is easy to read and understand by blending mostly natural language with symbolic operators and abbreviations. Produce compact pseudocode using mostly one-liners and combine statements when it improves brevity without losing clarity.  
Retain all original function and method names exactly as given. Avoid any comments, explanations, summaries, or clarifications—output only the pseudocode instructions.  
Use symbolic comparison and assignment operators (e.g., ←, =, ≠, ∈, ∉, +, −, *, /, %, &&, ||), concise control-flow keywords (if, else, for, while, return, func), and natural-language vocabulary for declarations and common actions (e.g., let, set, read, print). Prefer straightforward expressions without verbose constructs.  
Format the output as numbered lines, starting from 1, indent nested blocks consistently (by spaces or tabs), and define all functions explicitly as in the original source, e.g.:  
1. func functionName(params):  
2.   [statements]  
Use direct natural language for data structures and operations (e.g., “let A be list”, “read n elements into A”, “for i in 0..n-1:”, “if x ∈ set:”, “return result”), while maintaining clarity and compactness.  
Do not include separator lines or extraneous punctuation. Complete the pseudocode within 5 seconds so that it can be consumed and implemented immediately without further context or external references.  

Example formatting to emulate:  
1. x ← 0  
2. while x < n: x++