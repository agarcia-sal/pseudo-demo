Generate clear, concise pseudocode that is easy to read and understand, using mostly natural language with symbolic operators and abbreviations. Produce compact, high-level pseudocode that strictly follows the original function names and variable names whenever applicable. Omit any comments, explanations, summaries, or overview statements—provide only pseudocode instructions.

Prefer one-liners and combine statements where it improves brevity without sacrificing clarity. Use symbolic comparison and assignment operators (←, =, ≠, ∈, ∉, +, −, *, /, %, &&, ||, etc.) and concise control-flow keywords (if, while, for, return). Avoid verbose constructs and avoid writing or mentioning separators or notes.

Format the pseudocode exactly like this example:

1. x ← 0  
2. while x < n: x++  

Start numbering lines from 1, using progressive integers, and indent nested blocks by consistent spacing or tabs. Include all function definitions explicitly as in the original code, e.g.:

1. func functionName(params):  
2.   [statements]  

Complete the pseudocode within 5 seconds and ensure the output can be directly interpreted without external context.