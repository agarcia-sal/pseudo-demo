Translate the given code into clear, concise pseudocode that strictly preserves all control flow structures—variable assignments, conditionals, loops, and function calls—expressed uniformly and simply. Use mostly natural language phrasing combined with symbolic notation and common abbreviations to keep the pseudocode compact, high-level, and easy to read. Prioritize one-line statements whenever feasible, but maintain clarity and readability. It is acceptable to omit detailed expressions and intricate data structure internal details if this reduces line count and speeds generation within the 5-second time limit.

Number each pseudocode step sequentially, starting from 1, following this format:

1. x ← 0  
2. while x < n: x++

Explicitly include function definitions as:  
in function FUNCTION_NAME

Use indentation to indicate nested blocks (loops, conditionals, etc.). Avoid separator lines, comments, explanations, summaries, or output beyond the numbered pseudocode lines. Do not add extra notes or verbose wording; use straight-to-the-point, intuitive language reflecting the original program structure one-to-one.

Example style your output should conform to:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: set min_i to j  
 swap A[i], A[min_i]  
print all elements of A