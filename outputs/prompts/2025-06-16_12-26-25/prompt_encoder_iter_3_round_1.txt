Translate the given code into concise, high-level pseudocode that preserves the exact original structure of control flow—including assignments, conditionals, loops, and function calls—using uniform, simple, and consistent notation. Express logic clearly and readably with mostly natural language phrasing, integrating symbolic forms and standard abbreviations to keep statements compact and mostly one line. It is acceptable to omit some details or lower-level expressions if this reduces overall line count significantly, as long as the program flow and essential logic remain clear and unambiguous.

Number each step sequentially starting from 1, following this exact format:

1. x ← 0  
2. while x < n: x++  

Avoid comments, explanations, summaries, headings, or separators. Do not include clarifications or ancillary text—output only the numbered pseudocode lines. Use straightforward, intuitive language and keep pseudocode easy to read and understand without verbosity. Omit minor or highly detailed expressions if they do not affect overall understanding or control flow.

Reflect the code structure closely, preserving nesting and order, but prioritize brevity and clarity within a 5-second generation constraint. Prefer natural language verbs like “let,” “set,” “read,” “print,” “call,” and “return” as appropriate.

Example style your output should emulate (no extraneous text):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.   swap A[i], A[min_i]  
12. print all elements of A