Translate the given code into concise, high-level pseudocode that preserves the exact structure: all control flows (conditionals, loops), variable assignments, and function calls must appear clearly and uniformly. Use mostly natural language phrasing integrated with symbolic notation and common abbreviations to keep it compact, easy to read, and understandable.

- Omit detailed expressions, complex data structure internals, and low-level syntax when possible to reduce total line count.  
- Prefer one-line statements where it does not harm clarity.  
- You may omit some code details if it substantially shortens output without losing the overall logic or flow.  
- Number each pseudocode line sequentially starting from 1, without any headers, comments, explanations, or separators.  
- Format control structures and nested blocks intuitively but keep lines brief, for example:  
  1. x ← 0  
  2. while x < n: x++  
  or  
  3. if condition: doAction() else: doOther()  
- Use consistent, uniform style throughout the output, with natural phrasing like “let var be type”, “for each element in collection”, “call function(args)”, etc.  
- Exclude comments, summaries, or anything beyond the pure pseudocode representing the original code’s logic and flow.

Output only the numbered pseudocode lines, directly mirroring the program’s structure and semantics in a succinct, readable form suitable for quick understanding and processing within 5 seconds.