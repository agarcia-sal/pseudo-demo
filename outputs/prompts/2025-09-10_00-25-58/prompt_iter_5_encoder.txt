Generate clear, concise pseudocode from the given problem description, preserving the original function name exactly.  
Write pseudocode that is easy to read and understand, using mostly natural language with minimal but meaningful symbolic notation and abbreviations to keep it compact and high-level.  
Favor one-line statements whenever unambiguous. Use a consistent minimal indexed format such as:  
1. x ← 0  
2. while x < n: x++  
Include all necessary steps so the pseudocode is complete and self-contained, suitable for direct interpretation or implementation.  
Use natural control flow keywords (if, else, for, while, return) and clear variable assignments without explanatory comments or summaries—output only the pseudocode itself.  
Avoid separator lines, extra formatting, or block delimiters that aren’t essential.  
Handle typical data structures and operations succinctly but precisely.  
Your function name and parameter list must exactly match those in the original problem.  
Optimize for readability, brevity, and fidelity to the original logic within a 5-second generation limit.