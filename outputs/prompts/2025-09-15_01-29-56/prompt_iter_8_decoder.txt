Translate the given pseudocode into fully functional, syntactically correct, and efficient Python code, strictly preserving all class names, function names, method signatures, variable names, and hierarchical structure as specified. Your output must:

- Contain only the final Python code enclosed in a **single** code block formatted as:

```python
# translated code here
```

- Implement all control flow, data operations, and logical constructs exactly as described, converting pseudocode idioms into clear, idiomatic Python.
- Include any necessary import statements and auxiliary methods to produce a fully self-contained, executable solution.
- Retain all logic and details from the pseudocode exactlyâ€”do not add, omit, or alter algorithmic steps or data structures.
- Maintain the original naming conventions and structural organization (classes, functions, parameters) precisely as in the pseudocode.
- Use advanced but standard Python features and libraries judiciously to improve correctness, robustness, and runtime performance (complete within 5 seconds).
- Handle implicit edge cases and boundary conditions suggested or implied by the pseudocode.
- Avoid any comments, explanations, debugging statements, print calls, or extraneous text outside the code block.
- Ensure consistent, valid Python syntax that can run immediately when copied into a Python interpreter.

Adhere strictly to these instructions to guarantee the highest fidelity translation from pseudocode to reliable, production-quality Python code.