Translate the given pseudocode into a fully functional, efficient, and idiomatic Python 3.7+ implementation enclosed within a **single** Python code block as follows:  

```python
# your complete translated code here
```  

Your translation must strictly adhere to the following criteria:  

- Preserve **exactly** all class names, method/function names, signatures, parameter names, variable names, and the full nesting and structural hierarchy as presented in the pseudocode without any changes.  

- Implement the logic, control flow, and data manipulations precisely as described with perfect semantic equivalence—**no additions, removals, or logical alterations** beyond faithful translation.  

- Use Python’s modern built-in types and standard libraries (e.g., collections, heapq, functools, itertools, typing, math, etc.) **only if they improve clarity, correctness, or runtime efficiency** without deviating from the algorithm. **Avoid any third-party or external packages.**  

- Include all necessary import statements, helper functions, or auxiliary classes referenced or implied by the pseudocode so that the produced code is fully standalone and immediately executable.  

- Handle all explicitly stated or logically implied edge cases, boundary conditions, and input constraints suggested by the pseudocode.  

- Output nothing besides valid Python code inside a **single** ```python ... ``` code block. There must be no comments (unless present in original pseudocode), debug prints, explanatory text, or blank lines outside this code block.  

- Ensure the output code is syntactically correct, runnable without modifications, and optimized to execute within a 5-second runtime constraint where applicable.  

- Favor idiomatic, clean, and efficient Python constructs while honoring the original pseudocode’s variable naming and program structure exactly for perfect traceability and readability.  

Adhere to these instructions meticulously to deliver a highest-fidelity, production-quality Python solution that translates the pseudocode precisely and efficiently.