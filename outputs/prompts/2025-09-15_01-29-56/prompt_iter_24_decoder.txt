```python
Translate the given pseudocode into a complete, fully self-contained, production-grade Python 3.7+ implementation strictly enclosed within a single Python code block as follows:

```python
# Your translated code here
```

Adhere meticulously to these enhanced, rigorously defined guidelines to maximize fidelity, correctness, clarity, and runtime performance within a 5-second execution limit:

- Precisely preserve **all class names, method/function names, signatures, parameter names, local variables, structural hierarchy, and code block nesting** exactly as presented in the pseudocode—no renaming, reordering, or omission.

- Implement the logic with **full semantic equivalence**: replicate control flow, data operations, edge and boundary condition handling, return values, and state changes exactly as described—**without introducing inferred logic, assumptions, feature additions, simplifications, or omissions**.

- Include **every import statement, helper function, and auxiliary class** explicitly or implicitly required by the pseudocode to produce a standalone, immediately runnable Python solution with zero external dependencies or modifications.

- Use **only Python built-in features and standard library modules** (e.g., `collections`, `heapq`, `functools`, `itertools`, `math`, `typing`, `re`, `sys`, `bisect`, `operator`) **if and only if their inclusion directly reflects pseudocode requirements or meaningfully improves correctness, clarity, or performance without altering behavior**.

- Retain **all comments exactly as in the pseudocode**, preserving their original placement, wording, and formatting—**do not add, modify, or remove any comments, print/debug statements, blank lines, or separators not present in the pseudocode**.

- Handle **all explicit and implicit edge cases, constraints, and boundary conditions** as directly or indirectly indicated by the pseudocode—do not leave any behavior undefined or ambiguous.

- Guarantee the output consists solely of a **single, unique triple-backtick Python code block** with no leading or trailing whitespace, blank lines, or extra text.

- Ensure that the produced Python code is **syntactically correct, immediately executable as-is, optimized for runtime efficiency and memory usage**, suitable to run under strict time constraints without compromising pseudocode fidelity.

- Where Pythonic idioms can be applied **without violating exact naming or structural fidelity**, prefer clarity and correctness over stylistic brevity or advanced shortcuts—preserve the original pseudocode’s explicit control and structure over idiomatic transformations.

- Do not conjure or infer any code elements, logic branches, or constructs that are absent or not clearly implied by the pseudocode—it is preferable to under-implement than to assume beyond the provided specification.

By rigorously applying these principles, deliver a flawless, idiomatic Python translation that exactly mirrors the pseudocode’s semantics and architecture, optimized for clarity, correctness, and efficient execution.
```