Write clear, concise, and easy-to-read pseudocode directly reflecting the given problem’s code. Preserve all original class and function names and their object-oriented structure exactly as described. Use compact, natural language phrasing with symbolic assignments and abbreviations where appropriate. Favor one-liner statements and high-level constructs to keep the pseudocode brief yet understandable. Do not include any summaries, explanations, comments, or purpose statements—only pseudocode. Format the pseudocode as numbered lines like this:

1. x ← 0  
2. while x < n: x++  

Use consistent keywords such as FUNCTION, SET, FOR, WHILE, IF, RETURN, etc., and keep statements intuitive. Ensure the pseudocode matches control flow and logic precisely but remains as succinct as possible within a 5-second generation time. The output should be solely the pseudocode in this style and format, with no extra text or separators.  

Example:  
If the code is  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg
```  
Then output:  
1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.    INCREMENT total BY num  
5.   SET avg TO total DIVIDED BY LENGTH OF nums  
6.   RETURN avg  
7. END FUNCTION