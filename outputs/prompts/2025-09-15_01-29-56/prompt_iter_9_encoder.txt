Write clear, concise, and easy-to-read pseudocode from the given problem description, preserving the original class and function names exactly as specified. Represent class and object-oriented structures the same way they are presented in the problem. Use a compact, high-level style favoring natural language with symbolic assignments and abbreviations where appropriate, and prefer one-liners for simple statements such as loops and conditionals.

Do not include any purpose, summary, explanation, notes, comments, or separator lines. The output must be pseudocode only.

Follow this example format exactly:
1. x ← 0  
2. while x < n: x++  

If the input code is:

```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

The output should be:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Make your pseudocode compact but readable and unambiguous, balancing natural language with high-level symbolic constructs. Keep indentation consistent to reflect code structure clearly but minimize verbosity. Use established control flow keywords (IF, WHILE, FOR, RETURN, SET, INCREMENT, DECREMENT, FUNCTION, CLASS) and commonly understood shorthand. Your pseudocode should be correct, fully representative, and runnable if translated back into code.

Aim for clarity, brevity, and fidelity to the original code’s semantics within a 5-second execution limit.