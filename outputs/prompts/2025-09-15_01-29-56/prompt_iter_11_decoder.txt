Translate the provided pseudocode into complete, efficient, and runnable Python code enclosed within a single Python code block as below:  

```python
# translated code here
```

Your translation must:

- Exactly preserve all class names, method names, function signatures, parameter names, variable names, and the original class/method/function nesting and structure from the pseudocode.

- Faithfully implement all logic, control flow, and data operations described in the pseudocode with full semantic equivalenceâ€”no additions, deletions, or alterations to the algorithm or data structures.

- Use idiomatic, modern Python (version 3.7+) built-in constructs and standard libraries (e.g., collections, math, itertools, functools, heapq, typing, etc.) as appropriate to maximize clarity, correctness, and performance within a 5-second runtime constraint.

- Handle any explicit or implicit edge cases and boundary conditions suggested or implied by the pseudocode.

- Include all necessary import statements and auxiliary functions or classes so the solution is immediately executable as standalone Python code.

- Output only valid Python code enclosed in a **single** Python code block. No comments, explanations, debug prints, or extra text outside the code block.

- Ensure the code is syntactically correct and can be directly run without modification or syntax errors.

- Keep the same naming scheme and structural hierarchy strictly consistent with the pseudocode to ensure perfect traceability.

- Favor built-in Python functionality and efficient data structures, but avoid external or non-standard packages.


Adhere rigorously to these instructions to produce the highest-fidelity, optimized, production-quality Python implementation that matches the pseudocode precisely.