Translate the provided pseudocode into a complete, production-ready Python 3.7+ implementation enclosed strictly within a single Python code block as follows:

```python
# Your translated code here
```

Strictly follow these enhanced comprehensive instructions to maximize accuracy, fidelity, and efficiency:

- Preserve **all class names, method and function names, signatures, parameter names, local variable names, and the exact structural and nesting hierarchy** from pseudocode without any deviations, reordering, or renaming.

- Implement the logic with **full semantic equivalence**: control flow, data manipulation, and return values must strictly mirror what the pseudocode expresses—**no feature additions, no logic simplifications, no inferred interpretations beyond the pseudocode text**.

- Include **all imports, helper functions, and auxiliary classes explicitly or logically necessitated by the pseudocode** to produce a fully self-contained, immediately runnable solution that requires no external modifications.

- Use **only Python standard libraries or built-in modules** (including but not limited to `collections`, `heapq`, `functools`, `itertools`, `math`, `typing`, `re`, `sys`, `bisect`, `operator`) as needed—only if usage **directly preserves or improves semantic clarity, correctness, or efficiency** without changing behavior.

- Retain **verbatim all comments present in the pseudocode**, keeping them inside the translated code unchanged. **Do not add any additional comments, print/debug statements, blank lines, or separators** that are not in the pseudocode.

- Handle **all explicit and implicit edge cases, boundary conditions, and constraints** as suggested or required by the pseudocode logic—do not leave any undefined behavior.

- Guarantee the output is enclosed **only once** in a single triple-backtick Python code block ```python ... ```, with **no text or whitespace before or after**.

- Produce code that is **syntactically correct, immediately executable as-is, and optimized for performance and memory usage**—be mindful of the 5-second runtime limitation.

- Apply Pythonic conventions only as long as they do not compromise fidelity to the pseudocode’s naming and structure; prioritize readability and strict correspondence over stylistic preferences or Python idiomatic shortcuts.

- Do not invent or assume any missing elements not clearly implied by the pseudocode. Only create additional constructs (methods, classes, imports) if the pseudocode explicitly or implicitly requires them for correctness or completeness.

By strictly adhering to these principled guidelines, deliver a flawless, idiomatic Python translation that replicates exactly the pseudocode semantics and structure, optimized for clarity, correctness, and runtime performance.