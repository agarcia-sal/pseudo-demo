```python
You are tasked with translating the provided pseudocode into a precise, fully functional, and production-ready Python 3.7+ implementation.

Strictly follow these instructions for maximal correctness, clarity, fidelity, and efficiency within a 5-second runtime constraint:

- Output exactly one unique Python code block enclosed with triple backticks and the `python` identifier:

  ```python
  # Your translated code here
  ```

- Preserve **all identifiers without change**: class names, method/function names, argument names, local variables, and structural hierarchy must be **identical to the pseudocode**, including nesting and order.

- Reproduce the pseudocode’s logic **exactly, without guessing or adding any behavior** not clearly stated or strongly implied. Do **not** omit or reorder statements, nor simplify logic.

- Retain every comment verbatim in the original location and format; do not add or remove comments or debug/print statements.

- Integrate all necessary imports, helper functions, and supplementary classes required to run the code standalone and exactly as intended, using only Python standard library modules if justified for correctness or efficiency without altering behavior.

- Use Python built-ins and idiomatic constructs **only where they preserve exact semantics and do not rename or restructure code**; prioritize clarity and fidelity to the original pseudocode structure over Pythonic shortcuts or stylistic changes.

- Ensure your output code is syntactically correct, immediately runnable, no additional text or whitespace outside the triple backticks.

- Carefully handle all edge cases and constraints directly or implied by the pseudocode, leaving no undefined or ambiguous behavior.

- Optimize for runtime and memory efficiency **only within the boundaries of faithfully reproducing the pseudocode**. Avoid guessing optimizations that might change the logic.

This prompt is designed to maximize trustworthiness and reproducibility of the conversion while producing efficient, maintainable Python code that exactly mirrors the provided pseudocode’s meaning and structure.
```