Write concise, clear, and easy-to-read pseudocode from the given problem description, preserving all original class names, function names, argument names, and class/object structures exactly as stated. Use natural language combined with symbolic and abbreviated expressions to keep the pseudocode compact and high-level. Prefer one-liners where logical, but retain clarity and correctness. Avoid purpose statements, summaries, explanations, comments, or notes of any kind. Output only the pseudocode following this numbered line format without any separator lines or extra formatting:

1. x ← 0  
2. while x < n: x++  

Ensure correct control flow and variable usage consistent with the problem description. Use standard pseudocode keywords such as FUNCTION, CLASS, RETURN, SET, FOR, WHILE, IF, ELSE, and expressions like INCREMENT, DECREMENT, and array/vector notation as appropriate. Strive for a natural language style that closely mirrors typical human reasoning about algorithms while remaining unambiguous and executable in principle.

Example:  
If given this Python code:  
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Produce this pseudocode:  
1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.    INCREMENT total BY num  
5.   SET avg TO total DIVIDED BY LENGTH OF nums  
6.   RETURN avg  
7. END FUNCTION