Write clear, concise, and easy-to-read pseudocode directly from the given problem description. Use natural language phrased compactly and at a high level. Preserve all original class names, function names, and method signatures exactly as provided, including their class and object structures. Express loops, conditionals, and assignments naturally and simply, preferring one-liners, symbolic assignments (e.g., ←, ++, --), and standard abbreviations only when they enhance clarity without ambiguity.

Do not include any explanations, comments, purpose statements, summaries, or separators. Output only the pseudocode as a numbered list of steps with consistent indentation representing code blocks.

Use the following format exactly:

1. CLASS ClassName  
2.   FUNCTION functionName(parameters)  
3.    SET variable TO value  
4.    FOR each element IN collection  
5.     IF condition THEN  
6.      RETURN value  
7.    RETURN result  
8.   END FUNCTION  
9. END CLASS  

Prefer brevity and high-level natural flow over overly verbose syntax. Limit pseudocode to what can be generated within 5 seconds, focus on correctness and faithful structure reproduction, and output no markdown or extra text.

Example:  
For the code below:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Produce:  
1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.    total ← total + num  
5.   SET avg TO total DIVIDED BY LENGTH(nums)  
6.   RETURN avg  
7. END FUNCTION