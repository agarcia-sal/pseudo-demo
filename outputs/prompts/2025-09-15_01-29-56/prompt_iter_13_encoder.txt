Write clear, easy-to-read pseudocode that mirrors the exact class names, function names, and structure as given in the problem description, preserving method signatures within their class. Use natural, concise, and high-level language with symbolic assignments, abbreviations, and one-liner loops or conditionals wherever appropriate. Do not include any explanations, comments, notes, summaries, or overview statements—only the pseudocode itself. Follow the numbered line format shown below exactly, without any separator lines or extra decorations:

1. x ← 0  
2. while x < n: x++  

Use uppercase keywords like FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION for clarity but keep code compact. When possible, combine related simple statements in single lines. Reflect all return statements explicitly. Maintain indentation logically to show code blocks. For data structures and types, use descriptive yet brief terms (e.g., list_of_numbers, dict, vector) consistent with the problem context.

Example:  
If given this function:

    def calc_average(nums):  
        total = 0  
        for num in nums:  
            total += num  
        avg = total / len(nums)  
        return avg  

Output the pseudocode as:

1. FUNCTION calc_average(list_of_numbers)  
2.   SET total_sum TO 0  
3.   FOR each number IN list_of_numbers  
4.    INCREMENT total_sum BY number  
5.   SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
6.   RETURN average_value  
7. END FUNCTION