Translate the provided pseudocode into a single, complete, and production-quality Python 3.7+ implementation enclosed strictly within one Python code block as follows:

```python
# Your full translated code here
```

While translating, adhere to these enhanced, precise instructions:

- Maintain **exactly** all class names, method/function names, signatures, parameter names, variable names, and the full structural and nesting hierarchy from the pseudocode **without any renaming or reordering**.

- Implement the algorithm’s logic with **100% semantic equivalence**, preserving control flow and data operations exactly—**no modifications, no additions of functionality or logic unless explicitly indicated by the pseudocode**.

- Use any standard Python library or module (including but not limited to `collections`, `heapq`, `functools`, `itertools`, `math`, `typing`, `re`, `sys`, `bisect`, `operator`) **only if it directly enhances clarity, correctness, or runtime efficiency without changing semantics**. Prioritize standard libraries and avoid any third-party dependencies.

- Include **all necessary imports**, auxiliary/helper functions, and auxiliary classes — anything referenced or logically implied by the pseudocode — so that the output code is fully **self-contained and immediately runnable**.

- Ensure all **explicit and implicit edge cases, boundary conditions, and constraints suggested by the pseudocode are handled correctly**.

- Preserve **any comments present in the original pseudocode verbatim** inside the code, but do not add any additional comments, debug print statements, explanatory texts, separators, or blank lines outside or inside the code block.

- The output must be **ONLY** the Python code enclosed in one single triple-backtick python code block. No text before, after, or separating the code block.

- Guarantee the code is **syntactically correct, executable without modification, and optimized for performance** to run within a 5-second time budget on all inputs consistent with the pseudocode constraints.

- Follow Pythonic idioms, clean style, and efficient constructs **only insofar as they do not obscure alignment with the pseudocode’s structure and naming**. Avoid unnecessary complexity — clarity and strict fidelity take precedence.

- Do not introduce or infer any missing pieces not implied by the pseudocode itself—if initialization or helper structures are needed, add them only if clearly required by the pseudocode.

By meticulously applying these principles, deliver a flawless, idiomatic, and complete Python translation that replicates the pseudocode behavior exactly and performs optimally within time constraints.