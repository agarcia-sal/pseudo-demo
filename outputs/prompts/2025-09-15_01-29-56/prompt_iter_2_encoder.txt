Write clear, compact, and easy-to-read pseudocode strictly reflecting the input problem’s code, preserving all class names, function names, and object structures exactly as given. Use more natural language but keep the style concise and high-level, favoring symbolic assignments, abbreviations, and one-liners where fitting. Do not include any explanations, summaries, comments, purpose statements, or extraneous notes—output only the pseudocode.

Use this numbered format without separator lines:

1. x ← 0  
2. while x < n: x++

- Keep all indentation logical and consistent with control flow.  
- Use common pseudocode keywords (FUNCTION, RETURN, FOR, WHILE, IF, SET, INCREMENT/DECREMENT, etc.) as appropriate.  
- Translate expressions and statements directly and idiomatically, avoiding excessive verbosity.  
- Handle data structures by descriptive natural-language names (e.g., list_of_numbers, map, queue) when appropriate, but retain the original variable and class names.  
- Strive for maximal clarity with minimal verbosity, balancing natural language with concise pseudocode conventions.  
- End functions explicitly with END FUNCTION (and classes/end of class structure if helpful).

Example style for a simple function:

FUNCTION calc_average(list_of_numbers)  
 SET total_sum TO 0  
 FOR each number IN list_of_numbers  
  INCREMENT total_sum BY number  
 SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
 RETURN average_value  
END FUNCTION