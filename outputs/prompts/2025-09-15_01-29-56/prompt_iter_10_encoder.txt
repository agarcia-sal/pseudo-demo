Write concise, clear, and easy-to-read pseudocode from the given problem description, preserving all original class names, function names, and their structure exactly as in the source code. Use a compact, high-level style that blends natural language with symbolic assignments and one-liner statements where appropriate. Avoid any purpose, summary, explanatory text, comments, or notes. Prioritize concise expressions, abbreviations, and idiomatic pseudocode. Follow exactly this numbered line format with no separator lines:

1. x ← 0  
2. while x < n: x++  

Use keywords like FUNCTION, RETURN, SET, FOR, WHILE, IF, ELSE, IN as needed, and maintain consistent indentation reflecting code blocks. The output should be only the pseudocode that mirrors the input’s logic and control flow, suitable for quick understanding and correct reconstruction of the algorithm. For example:

If input is:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode is:
```
1. FUNCTION calc_average(nums)
2.   SET total TO 0
3.   FOR each num IN nums
4.    INCREMENT total BY num
5.   SET avg TO total DIVIDED BY LENGTH OF nums
6.   RETURN avg
7. END FUNCTION
```

Aim for clarity, brevity, and fidelity to the original structure, and produce output within 5 seconds.