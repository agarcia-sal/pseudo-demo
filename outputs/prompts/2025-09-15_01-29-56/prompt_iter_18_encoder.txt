Write concise, clear, and easy-to-read pseudocode directly from the given problem description. Preserve all original class and function names exactly as provided, including the class and method structure. Use compact, high-level natural language with symbolic assignments, abbreviations, and one-liner control flow where appropriate, without extra explanations, purpose statements, notes, or summaries. Output only the pseudocode, formatted as numbered lines:

1. x ← 0  
2. while x < n: x++

Keep the pseudocode concise yet natural and understandable. Follow this style:

- Use uppercase keywords like FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION.
- Maintain original function signatures exactly.
- Express simple assignments and updates symbolically (←, ++, --).
- Use plural terms like "each element IN list" for loops.
- Prefer one-liner loops and conditionals when they remain clear.
- Avoid separator lines or comments.
- Structure pseudocode logically within the class and method as per input.

Example input code:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Example pseudocode output:
```
1. FUNCTION calc_average(list_of_numbers)
2.   SET total_sum to 0
3.   FOR each number IN list_of_numbers
4.    INCREMENT total_sum BY number
5.   SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
6.   RETURN average_value
7. END FUNCTION
```

Aim for clarity and brevity to produce runnable, faithful pseudocode within a 5-second time limit.