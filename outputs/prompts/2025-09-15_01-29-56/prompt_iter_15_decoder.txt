Translate the provided pseudocode into a complete, syntactically correct, and fully executable Python 3.7+ implementation enclosed **only** within a single Python code block as shown below:  

```python
# your entire translated code here
```

Your translation must strictly comply with all these requirements:

- Keep **exactly** the same class names, method/function names, argument names, signatures, variable names, and all structural and nesting details exactly as they appear in the pseudocode. No renaming or reordering.

- Translate all control flow, logic, and data manipulations **faithfully and precisely**, with exact semantic equivalence—do not add, omit, or alter any core algorithmic step or condition.

- You may leverage **any** Python built-in features, standard libraries, or modules (including `collections`, `heapq`, `functools`, `itertools`, `typing`, `math`, `re`, `bisect`, `decimal`, etc.) if and only if these clearly improve the code’s correctness, readability, or runtime efficiency, without changing the original algorithm or logic.

- The generated code must be **standalone** and **ready-to-run**: include all necessary import statements and any helper functions or classes required or implied by the pseudocode.

- Carefully handle all explicitly stated and logically implied edge cases, boundary conditions, and input constraints suggested by the pseudocode.

- Preserve the original indentation style and closely reflect pseudocode's structure for maximal traceability. Use idiomatic Python constructs and Pythonic best practices for clarity and efficiency, but never at the cost of deviating from the pseudocode’s correctness or structure.

- Return **only** the code inside a single triple-backtick python code block. Do **not** include any explanations, comments added by you (except those that exist in original pseudocode), debug statements, print calls, or blank lines outside this block.

- Ensure your code runs correctly without modification and completes efficiently within 5 seconds on typical test inputs.

- Use explicit and unambiguous constructs; avoid overwriting Python keywords or built-in names.

By meticulously following these directives, produce the highest-fidelity, idiomatic, and performance-optimized Python translation of the given pseudocode.