Write concise, easy-to-read pseudocode directly from the given problem description, preserving all original class and function names exactly as provided (including method signatures and object structures). Use clear, natural language phrased compactly and at a high level. Prefer one-liners, symbolic assignments (e.g., ←, ++, --), and abbreviations only when they improve succinctness without sacrificing clarity. Represent loops, conditions, and data structures naturally and simply, avoiding overly verbose constructs.

Do not include any purpose statements, summaries, explanations, comments, notes, or separators of any kind. The output should be solely the pseudocode as a numbered sequence of lines, following this exact format:

1. x ← 0  
2. while x < n: x++

Use consistent indentation to represent code blocks, and output only the pseudocode (no markdown, no extra text). If the code defines classes and functions, maintain the same structure and naming conventions. Where applicable, write short, instructive statements like:

- SET variable TO value  
- FOR each element IN collection  
- IF condition THEN  
- RETURN value  

Do not add extraneous stylistic flourishes, and strive for brevity and clarity combined, with an emphasis on natural language flow. Limit pseudocode length to what can be generated within 5 seconds, focusing on correctness and faithful structure representation.  

Example:

If the code is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Produce:  
1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.    total ← total + num  
5.   SET avg TO total / LENGTH(nums)  
6.   RETURN avg  
7. END FUNCTION