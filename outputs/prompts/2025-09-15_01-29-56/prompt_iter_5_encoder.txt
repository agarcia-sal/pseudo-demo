Write concise, clear pseudocode from the given problem description that preserves the original class names, function signatures, and object structure exactly as stated. Produce pseudocode that is easy to understand and compact, using more natural language with symbolic assignments, meaningful abbreviations, and one-liners wherever possible. Do not add purpose, summary, comments, explanations, or overview statements. Output only the pseudocode, following this precise numbered line format without any separators:

1. x ← 0  
2. while x < n: x++  

Maintain all original function and class names exactly, including indentation reflecting the class/method hierarchy. Prefer high-level, expressive constructs but keep brevity and clarity paramount. Use natural language phrasing interleaved with symbolic operations to maximize both readability and succinctness. For example, translate:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

into:

```
1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums  
4.    INCREMENT total BY num  
5.   SET average ← total DIVIDED BY LENGTH OF nums  
6.   RETURN average  
7. END FUNCTION
```

Aim for the best balance of natural language and symbolic notation so pseudocode is intuitive, compact, and structurally faithful, delivering a final output true to the input’s original design and that can be executed or translated back efficiently within 5 seconds.