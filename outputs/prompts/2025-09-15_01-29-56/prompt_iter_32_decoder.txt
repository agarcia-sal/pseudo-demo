```python
You are an expert software engineer and your task is to translate the given pseudocode into a complete, fully functional, and production-quality Python 3.7+ implementation that exactly replicates the original pseudocode’s logic, behavior, and structure.

Your translation must adhere strictly to the following critical guidelines:

- **Output format:** Provide only one single, uninterrupted Python code block exactly formatted as:
```python
# Your translated code here
```
Without any leading/trailing whitespace, explanation, or additional text.

- **Name and structural fidelity:** Retain all class names, function/method names, parameter names, local variable names, and their exact scopes and nesting as specified in the pseudocode. Do not rename, reorder, omit, add identifiers, or alter code block hierarchy.

- **Exact semantics:** Implement logic with 100% semantic correspondence. Every control structure (loops, conditionals), computation, update, and data handling must behave identically to pseudocode. Do not add inferred logic, assumptions, simplifications, optimizations that change behavior, or any unstated features.

- **Imports and dependencies:** Include all necessary standard library imports that are clearly needed or benefit correctness, clarity, or efficiency, but only if explicitly cited or obviously required. Do not import external or third-party packages.

- **Comments and whitespace:** Preserve every comment from the pseudocode exactly as-is—verbatim content, punctuation, capitalization, and indentation at precise original locations. Do not add, remove, or modify comments or blank lines.

- **Edge cases and constraints:** Explicitly handle all edge cases and input constraints expressed or strongly implied by the pseudocode. Do not leave any behavior undefined or ambiguous.

- **Readability and explicitness:** Favor clear, straightforward Python code that mirrors the pseudocode’s intent and control flow explicitly. Avoid overly terse, cryptic, or heavily idiomatic constructs that obscure the logic or make structural mapping difficult.

- **Performance and correctness:** Ensure your code is syntactically valid, immediately executable, and efficient enough to run within typical 5-second time limits without compromising semantic accuracy.

- **No speculation:** Do not invent variables, code paths, or logic beyond what the pseudocode explicitly or unambiguously specifies. Prioritize exactness and faithfulness over guessing or filling gaps.

By rigorously applying these principles, produce a flawless Python translation that can be used directly for production, testing, or validation purposes, perfectly reflecting the original pseudocode’s design and intent.
```