Write concise and clear pseudocode that closely mirrors the original code’s logic and structure while being easy to read and understand. Keep the original class and function names exactly as in the problem description, and preserve their nesting and object-oriented structure.

Produce compact, high-level pseudocode using natural language with symbolic assignments (←, ++, --), abbreviations where appropriate, and prefer one-liners without losing clarity. Use indentation to show blocks. Avoid purpose statements, summaries, explanations, or comments. Do not add notes or extra formatting like separator lines.

Use the following numbered line format exactly, including line numbers:

1. x ← 0  
2. while x < n: x++

For example, given a Python function:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Your output pseudocode should be:

1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.    INCREMENT total BY num  
5.   SET avg TO total DIVIDED BY LENGTH OF nums  
6.   RETURN avg  
7. END FUNCTION

Within your output:

- Use uppercase keywords for FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION, etc.  
- Maintain consistent indentation for clarity.  
- Use symbolic operators for assignments and increments.  
- Use natural, concise language for control flow and data structures (e.g., FOR each item IN list, WHILE condition).  

Your output must be **only** valid pseudocode as described—no extra text, no explanations. Complete within a 5-second limit.