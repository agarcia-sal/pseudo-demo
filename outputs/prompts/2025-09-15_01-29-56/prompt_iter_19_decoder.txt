Translate the given pseudocode into a single, fully self-contained, and production-quality Python 3.7+ implementation strictly enclosed within one Python code block as follows:

```python
# Your complete translated code here
```

Adhere rigorously to all of the following constraints:

- Preserve **exactly** all class names, method/function names, signatures, parameter names, variable names, and the entire structural and nesting hierarchy from the pseudocode **without any renaming, reordering, omission, or addition**.

- Implement the logic of the pseudocode with **100% semantic fidelity**, precisely replicating control flow, conditions, data operations, and updates **with no invented logic or assumptions**, except where disambiguation is necessary and explicitly implied.

- Include **all necessary imports, helper functions, and auxiliary classes** referenced or logically entailed by the pseudocode, ensuring the output code is completely **self-contained and executable** without requiring external code or dependencies beyond the Python Standard Library.

- You may use any **Python standard library modules** (including but not limited to collections, heapq, functools, itertools, math, typing, re, sys, bisect, operator) if and only if they directly contribute to clarity, correctness, or runtime performance without altering the algorithm’s semantics.

- Handle **all explicit and implicit edge cases, boundary conditions, and constraints** evident or suggested in the pseudocode exactly.

- Retain **all comments in the pseudocode verbatim inside the code**, preserving their exact wording and placement; do not add, remove, or modify comments.

- The final output must be **only** the Python implementation enclosed in one single triple-backtick python code block; absolutely no extra text, explanations, or blank lines inside or outside the code block.

- Ensure the generated code is **syntactically correct, immediately runnable, and efficient**, capable of running to completion within 5 seconds for any input scenario consistent with the pseudocode’s constraints.

- Write idiomatic Python code only in ways that do not reduce clarity or adherence to the pseudocode’s variables, structure, and naming—prioritize fidelity and readability over stylistic preferences.

- Do **not** invent or infer any missing elements beyond what the pseudocode explicitly or logically implies, except minimal necessary standard initializations or data structures explicitly required for correctness.

By following these principles, produce a flawless, exact, idiomatic, and optimal Python translation of the pseudocode that replicates its behavior perfectly without deviation.