```python
You are tasked with translating the provided pseudocode into a complete, fully functional, production-quality Python 3.7+ implementation that faithfully and precisely mirrors every detail of the pseudocode’s semantics and structure.

Please follow these explicit instructions rigorously:

- Output only a single, continuous Python code block enclosed exactly as follows (with no leading/trailing whitespace or extra text):
```python
# Your translated code here
```

- Preserve exactly all class names, method/function names, parameter names, local variable names, their scopes, access patterns, and code block nesting as given in the pseudocode. Under no circumstances rename, reorder, omit, or inject identifiers or change the code’s structural layout.

- Implement logic with absolute semantic fidelity: control flow, algorithms, conditions, loops, variable updates, edge-case handling, method return values, and side effects must match the pseudocode precisely. Do not add assumptions, inferred features, simplifications, or any logic not unambiguously specified.

- Include all imports, helper functions, and auxiliary classes that are explicitly stated or clearly required to produce a self-contained, runnable Python solution with zero external dependencies or manual modifications.

- Restrict imported modules strictly to Python standard library packages. Only use them if explicitly indicated by the pseudocode or if their application improves code correctness, clarity, or efficiency without altering intended behavior.

- Retain every comment verbatim from the pseudocode, preserving their exact content, capitalization, punctuation, indentation, and location. Do not add, remove, or alter comments, blank lines, print/debug statements, or separators.

- Fully handle every explicit and implicit constraint, boundary condition, and edge case specified or strongly suggested by the pseudocode. Do not leave behavior undefined or ambiguous.

- Prefer direct, readable Python constructs that reflect pseudocode logic clearly and correctly, avoiding overly terse one-liners or advanced Python idioms that obscure explicit control or interfere with structural fidelity.

- The output code must be syntactically correct, immediately executable without further edits, and optimized for performance and memory usage to run within strict 5-second time limits wherever applicable—without compromising the exact semantics of the pseudocode.

- Do not invent or speculate about any code elements, variables, logic paths, or constructs not present or clearly implied in the pseudocode. Accuracy and faithfulness take precedence over speculation.

By adhering strictly to these principles, produce an impeccable Python translation that precisely replicates the pseudocode’s design, logic, and interfaces, ready for immediate use in production or testing environments.
```