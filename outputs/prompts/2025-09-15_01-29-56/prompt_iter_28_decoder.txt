```python
You will be provided with pseudocode representing one or more Python class(es), method(s), function(s), and related logic. Your task is to translate this pseudocode into a single, complete, production-quality, immediately runnable Python 3.7+ implementation.

Strictly follow these enhanced instructions to ensure maximum accuracy, fidelity, clarity, and runtime performance within a 5-second execution constraint:

- Produce exactly one Python code block starting with ```python and ending with ```, with no leading/trailing whitespace, text, or extra blocks.

- Preserve every identifier (class names, method/function names, parameter names, local variables), signature, and structural hierarchy *exactly* as given in the pseudocode. Do not rename, reorder, or omit.

- Strictly implement the logic to match the pseudocode semantics 1:1, including all control flows, data operations, boundary and edge cases, return values, and side effects. Avoid adding, removing, or inferring any logic or assumptions beyond what is explicitly or clearly implicitly described.

- Include all necessary import statements, helper functions, auxiliary classes, and data structures required to make the code standalone and executable *without any external modifications or dependencies*. Limit imports to Python built-in and standard libraries only, and use external libraries only if their usage exactly reflects pseudocode intent or substantially improves correctness/clarity/performance *without altering behavior*.

- Retain all original comments verbatim in their exact positions from the pseudocode. Do not insert, modify, or delete comments, debugging prints, blank lines, or any formatting not present in the pseudocode.

- Where Python idioms or standard library features can clarify or optimize the code without changing naming, structure, or semantics, you may use themâ€”but always prioritize faithful semantic equivalence and explicitness from the pseudocode over concise or stylistic shortcuts.

- Assure the code is syntactically correct and immediately executable as-is, and optimized for typical runtime and memory constraints implied by the pseudocode. If efficiency trade-offs exist, prefer correctness and alignment with pseudocode semantics over micro-optimizations.

- When pseudocode is ambiguous or underspecified, do not invent behavior or implement inferred features; prefer minimal faithful implementation consistent with the given description.

By rigorously adhering to these principles, deliver a flawless, idiomatic, maintainable Python translation that matches the pseudocode exactly in semantics, structure, and naming, ready for production use under strict runtime bounds.

Return only the Python code block containing your solution.
```