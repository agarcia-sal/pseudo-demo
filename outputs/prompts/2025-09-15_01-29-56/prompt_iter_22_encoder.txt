Write concise, easy-to-read pseudocode directly from the given problem description, preserving all original class and function names exactly as they appear, including class/object structures.  
Use clear, natural language that is compact and high-level, favoring one-liners, symbolic assignments (e.g., ←, ++, --), and standard abbreviations where appropriate.  
Do NOT include any purpose, summary, comments, notes, or explanations. Output only the pseudocode statements.  
Format the pseudocode as numbered lines like this:

1. x ← 0  
2. while x < n: x++

Prefer using structured constructs (FUNCTION, CLASS, IF, FOR, WHILE, RETURN, etc.) with indentation where suitable.  
Maintain brevity without sacrificing readability or correctness. Avoid verbose phrasing but keep statements understandable.  
Do not add separators or extra formatting beyond the numbering and indentation.  

Example:  
Given Python code  
```
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  
Output pseudocode:  
```
1. FUNCTION calc_average(list_of_numbers)  
2.   SET total_sum TO 0  
3.   FOR each number IN list_of_numbers  
4.    INCREMENT total_sum BY number  
5.   SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
6.   RETURN average_value  
7. END FUNCTION  
```

Your goal is clarity, faithfulness to structure and naming, natural language with symbolic clarity, and compactness, while generating valid and testable pseudocode within a 5-second runtime limit.