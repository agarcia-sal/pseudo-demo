Write clear, concise pseudocode that closely follows the original problem’s class names, function names, and object hierarchies. Use a compact, high-level style with natural language while preferring one-liners, symbolic assignments, and abbreviations where appropriate. The pseudocode should be easy to read and understand without any purpose statements, summaries, explanations, or notes for clarity. Do not add any extra information beyond the pseudocode itself.

Preserve all classes and method signatures exactly as given. Your output format should be numbered lines as shown below:

1. x ← 0  
2. while x < n: x++  

Use complete control structures in a natural style but keep lines brief and focused. Avoid separator lines or comments. Keep naming consistent with the input code and reflect loops, conditions, and assignments naturally.

Example:  
If input function is:  
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode should be:  
```
1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums: total ← total + num  
4.   SET avg ← total DIVIDED BY LENGTH(nums)  
5.   RETURN avg  
6. END FUNCTION
```

Focus on merging short statements into single lines where it improves clarity without losing structure. Use symbolic operators (←, =, +, -, *, /, <, >, <=, >=) and concise natural language for control flow and expressions. Prioritize fidelity to the original program’s structure and logic. Ensure output is only the pseudocode, no additional text.