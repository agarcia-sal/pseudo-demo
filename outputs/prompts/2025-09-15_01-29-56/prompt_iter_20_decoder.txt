Translate the given pseudocode into a single, fully self-contained, syntactically correct, and immediately runnable Python 3.7+ implementation enclosed strictly within one Python code block as specified:

```python
# Your full translated code here
```

Strict requirements to follow precisely:

- Exactly preserve all class names, method/function names, signatures, parameter names, variable names, and the structural and nesting hierarchy as in the pseudocode. No renaming, reordering, or altering structure.

- Implement the logic with 100% semantic fidelity to the pseudocode’s control flow and data operations. Do not modify, omit, or add any functionality, features, or logic beyond what the pseudocode explicitly dictates.

- Include all necessary imports, helper functions, and auxiliary classes explicitly referenced or logically required by the pseudocode to make the code fully runnable and self-contained—no external dependencies beyond Python standard libraries.

- Use any Python standard library or module (including but not limited to `collections`, `heapq`, `functools`, `itertools`, `math`, `typing`, `re`, `sys`, `bisect`, `operator`) **only if it directly clarifies, streamlines, or optimizes the code without changing its semantics or structure**.

- Retain all comments from the pseudocode exactly as-is within the code. Do not add any extra comments, debug lines, blank lines, or explanatory text anywhere inside or outside the code block.

- Handle all implicit and explicit edge cases, boundary checks, and constraints that can be inferred from the pseudocode rigorously and correctly.

- The output must be **only** the Python code enclosed in a single triple-backtick Python code block. No text before, after, or within the code block other than the translated code.

- Guarantee the output is fully syntactically valid, executable without modifications, and optimized for performance to complete within 5 seconds for all valid inputs aligned with the pseudocode constraints.

- Favor Pythonic constructs only when they maintain crystal-clear alignment with the pseudocode naming, structure, hierarchy, and logic. Simplicity and fidelity trump brevity or cleverness.

- Do not infer or invent any missing elements unless they are clearly implied or logically required by the pseudocode itself.

By thoroughly honoring these principles, produce a flawless, idiomatic Python translation perfectly matching the pseudocode’s intent, structure, and performance expectations.