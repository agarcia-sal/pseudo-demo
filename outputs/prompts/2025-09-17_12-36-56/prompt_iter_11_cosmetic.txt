Given original pseudocode as input, produce a completely rewritten version that is functionally identical but maximally distinct in syntax, structure, and style. Your output must strictly obey these rules:

1. **Output only the rewritten pseudocode, with no explanations, comments, annotations, or notes—nothing but code.**

2. **Keep every class and function name exactly the same as in the original, preserving hierarchy, nesting, and scope without change.** Do not add, remove, or rename classes or functions, nor alter their signatures or parameters.

3. **Transform all other code elements aggressively to maximize difference while preserving exact behavior:**
   - Change all variable names arbitrarily and consistently within their scope.
   - Convert control flow constructs freely (e.g., for → while, while → for, if-else → switch/case or conditional expressions).
   - Reorganize logical and arithmetic expressions using equivalent alternatives, including De Morgan laws, distribution, commutativity, reordering of independent conditions/statements.
   - Invert condition checks when semantically safe (e.g., `if (a > b)` → `if (!(a <= b))`).
   - Modify data access and manipulation styles (e.g., array indexing offsets, iterator directions, key existence checks) as long as semantics are preserved.
   - Change loop indexes, ranges, and directions (e.g., 0-based vs 1-based iteration).
   - Split statements into multiple steps or merge multiple statements into one expression where valid.
   - Substitute equivalent assignment, update, or expression forms (e.g., `x = x + 1` → `x += 1`; ternary ops).
   - Rearrange order of independent instructions.
   - Use alternative idiomatic constructs in the pseudocode language for given operations.

4. **No addition or removal of any classes, functions, or their parameters. Do not modify input/output interfaces or external effects.**

5. **The rewritten pseudocode must remain syntactically valid under standard pseudocode conventions and fully runnable with equivalent results.**

6. **Preserve exact input/output behavior, side effects, and data flow—only alter form and naming beyond class/function identifiers.**

7. **No stylistic or formatting changes other than those resulting directly from the logical/structural transformations above.**

Your submission must be a valid, semantically identical transformed pseudocode that exhibits maximal lexical and structural novelty while strictly respecting all these constraints.