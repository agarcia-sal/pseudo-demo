Generate concise, high-level pseudocode for the given problem while strictly preserving original class names, method names, parameters, and overall class-object structure. The pseudocode should be easy to read, understandable, and use primarily natural language combined with symbolic notation and common abbreviations. Avoid any explanations, summaries, purpose statements, or comments—output only the pseudocode aligned with the algorithmic logic.

- Use compact, often one-line, statements whenever possible.
- Use clear indentation for nested blocks.
- Use short, descriptive variable names or symbols.
- Keep control flow constructs clean and minimal (e.g., `if cond: stmt`, `for i in range:`).
- Use assignment arrows (`←`), `let`, or standard pseudocode conventions consistently.
- Maintain the same function and class definitions structure as in the original code.
- Format the output as numbered lines starting at 1, for example:  
  1. x ← 0  
  2. while x < n: x++  

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A  

Do not add any separators or extraneous formatting lines.

Your output must fit in 5 seconds runtime and focus solely on the algorithm steps, preserving logical order and clarity.