```python
Translate the given pseudocode into clean, optimized, and production-ready Python 3 code with full fidelity to all class names, method names, signatures, and the class/object hierarchy as presented in the pseudocode. Your entire output must be inside one Python code block like this:

```python
# translated Python code here
```

Follow these precise guidelines to maximize code correctness, usability, and runtime efficiency:

1. Preserve exactly all class names, method names, parameter names, types (if given), and overall structure from the pseudocode without alteration.

2. Convert all pseudocode syntax and placeholders into valid Python:
   - Replace `null` and similar with `None`.
   - Change any pseudocode operators or syntax to standard Python.
   - Use Python 3 typing hints where the pseudocode specifies or implies types.

3. Include all relevant and minimal necessary imports (e.g., `collections`, `heapq`, `typing`) so the code is self-contained and runnable as-is.

4. Implement any implied or standard auxiliary data structures such as `TreeNode`, `ListNode`, or others *exactly once per structure*, only if the problem uses them or the pseudocode implies them.

5. Provide robust, idiomatic, and performance-conscious helper functions to:
   - Convert common input formats (e.g., list with `None` for null) *directly* into these structures (e.g., `build_tree_from_list`, `build_linked_list`).
   - Handle edge cases neatly (empty inputs, single elements, null roots, etc.).
   - Avoid unnecessary complexityâ€”include only those helpers essential to turn input examples into proper objects the solution can consume.

6. Do **not** output any explanations, comments (except minimal inline clarifying comments if critical), or additional text outside the Python code block.

7. Your code should be fully executable on its own without further editing or external dependencies beyond standard Python 3 libraries.

8. Optimize the code for readability and performance:
   - Use efficient algorithms and data structures.
   - Avoid redundant computations.
   - Use collections and generators appropriately.
   - Ensure no excessive memory usage or unnecessary overhead to meet the 5-second runtime constraint on large inputs.

9. Make sure any referenced variables from input are properly converted before usage to avoid runtime attribute errors (e.g., do not treat input lists as nodes, always use helper builders).

Adhering to this prompt ensures your solution is precise, idiomatic, fully runnable, ready for direct testing, and optimized for common coding challenge environments.
```