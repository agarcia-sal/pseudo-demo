Generate concise, high-level pseudocode strictly preserving all original class names, method names, parameters, and class-object organization exactly as in the input code. Write pseudocode that is easy to read, compact, and primarily uses natural language mixed with symbolic notation and common abbreviations. Prefer mostly one-line statements and minimal control flow constructs (e.g., `if cond: stmt`, `for i in range:`). Use consistent assignment notation (`←` or `let`) and concise, readable variable names or symbols. Keep indentation clear for nested blocks. Output only pseudocode—do not include explanations, comments, summaries, or any extraneous text or formatting lines.

Format output as numbered lines starting from 1, like:

1. x ← 0  
2. while x < n: x++

Maintain function names exactly as in the original code. Keep the original class definitions and structure intact. Avoid any separators or blank lines. Your pseudocode should focus purely on algorithmic logic at a high level, balancing readability with succinctness, and fit within a 5-second runtime constraint. 

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A