Generate clear, concise, and high-level pseudocode for the given problem description, preserving exact class names, method names, parameters, and the original class-object structure. The pseudocode must be readable, using mostly natural language combined with common symbolic notation and short abbreviations. Focus on compactness, favoring mostly one-line statements with minimal necessary indentation for nested blocks.

- Maintain the original function signatures exactly as given.
- Keep the original class definitions and nesting unchanged.
- Use short, meaningful variable names or symbols.
- Use standard pseudocode conventions consistently (e.g., assignment arrows `←`, `let`, `for`, `if`).
- Keep control flow statements succinct and clean (e.g., `if cond: stmt`, `for i in range:`).
- Do not include any explanations, comments, summaries, or purpose statements.
- Do not output any separator lines or extraneous formatting.
- Number every output line sequentially starting at 1, for example:  
  1. x ← 0  
  2. while x < n: x++

Example pseudocode style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A