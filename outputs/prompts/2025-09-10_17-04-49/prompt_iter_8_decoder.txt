```python
Translate the provided pseudocode into clean, efficient, and fully runnable Python 3 code exactly preserving all class names, method names, parameter names, types if present, and the class/object hierarchy as given. Enclose your entire output within a single Python code block as follows:

```python
# your translated Python code here
```

Strictly follow these enhanced, comprehensive guidelines to maximize correctness, reliability, and performance:

1. Preserve absolutely every name (classes, methods, parameters) and the full structure from pseudocode without any renaming or reordering.

2. Accurately translate all pseudocode constructs and operators into valid Python 3 syntax, including:
   - Replace all occurrences of pseudocode null/None-equivalents like `null` with Python's `None`.
   - Convert pseudocode assignment arrows (e.g., '←') into `=` and adapt other operators to standard Python.
   - Use explicit Python 3 type hints wherever types are given or clearly implied in the pseudocode.
   - Reflect exact method/function signatures including decorators if applicable.

3. Automatically detect if the problem uses common data structures such as:
   - Linked lists (`ListNode`), binary trees (`TreeNode`), graphs, or others.
   Only define these classes once, unambiguously and idiomatically, exactly as per their usage.
   
4. Implement *robust*, *idiomatic*, and *minimal* helper utilities needed to:
   - Convert typical input representations (e.g., list with `None` for absent nodes) into corresponding data structures (e.g., build linked lists, build binary trees).
   - These builders must be comprehensive, cover all edge cases (empty input, single-node, etc.), and reliable for direct use.
   - Ensure no input argument in the final solution methods is mistakenly left as raw list/primitive—always build data structures first inside solution methods or through helpers.
   
5. Include all necessary standard imports your code relies upon, no more, no less (e.g., `from typing import Optional, List`, `collections`, `heapq`, etc.) to ensure the code runs standalone.

6. Optimize the translated code for readability and runtime efficiency:
   - Use Pythonic constructs, built-in functions, and data structures.
   - Avoid redundant or repeated computations.
   - Employ generators and efficient iteration where appropriate.
   - Keep memory usage lean and runtime well within typical competitive programming limits (≤5 seconds on large inputs).

7. Your output should contain **only** the final Python code block. No explanations, comments (except very brief, crucial clarifications inline if indispensable), or extra text should be included.

8. If pseudocode inputs for classes are given as lists or other primitive types during examples/tests, your code should handle all such conversions internally to prevent attribute errors, e.g., calling `.next` on a list must never happen—always convert lists to proper nodes first.

9. If the pseudocode shows use of `null`, `nil`, or similar, replace **all** such tokens with Python `None` everywhere—class definitions, helper functions, and solution methods alike.

10. Do **not** insert separator lines or nonfunctional text in your response. Code should be production-level, ready for immediate testing or submission.

Adhering to all these points guarantees maximal correctness, seamless direct execution, strict conformance to the original pseudocode design, and robust handling of all edge test cases for diverse coding problem domains.
```