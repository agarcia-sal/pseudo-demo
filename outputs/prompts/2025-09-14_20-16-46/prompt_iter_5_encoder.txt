Write compact, clear, and high-level pseudocode from the given problem description or code.  
- Maintain identical class names, function names, method signatures, and overall structure as in the original.  
- Reflect the logic accurately, using natural language mixed with symbols and concise abbreviations.  
- Prioritize one-liners and succinct loops or conditions without losing readability.  
- Use indentation consistently to represent nested code blocks; do not include any extra separators, comments, or explanations.  
- Avoid summaries, notes, or clarifications—output only pseudocode.  
- Follow this formatting style exactly (with numbering optional):  
```
1. x ← 0  
2. while x < n: x++
```
- When naming variables or collections, use meaningful natural language equivalents as needed but keep short and precise.  
- Prefer symbolic operators (←, =, +, /, etc.) and common pseudocode keywords (SET, FOR, WHILE, IF, RETURN, FUNCTION, CLASS, END FUNCTION/CLASS).  
- Match the problem’s original data types, inputs, outputs, and structural patterns strictly.  
- Example style:  

Given:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```