Translate the given pseudocode into fully functional, clean, and idiomatic Python code with these strict guidelines:

- Preserve all class names, function names, parameter names, signatures, and the overall class/object structure exactly as presented in the pseudocode. Do not alter them.
- Implement **only** the logic described by the pseudocode—no added or removed functionality.
- Include definitions for any custom data structures or classes (e.g., ListNode) explicitly implied by the pseudocode.  
- Maintain Python naming conventions and style (PEP 8), but do not rename pseudocode identifiers.
- Carefully handle all potential edge cases inferred from the pseudocode to prevent runtime errors.
- Avoid assumptions about input beyond what is explicitly stated or logically implied in the pseudocode.
- Add only necessary imports explicitly required by the pseudocode logic. Do not include any unused imports.
- Provide all code inside a single, properly formatted Python code block:

```python
# Your complete translated Python code here
```

- Ensure your implementation is efficient and concise to run reliably within 5 seconds on typical hardware for reasonable input sizes.
- Do not include any test scaffolding, print statements, I/O handling, comments unrelated to the pseudocode translation, or explanation text—only provide the implementation.
- Your code should faithfully and robustly reflect the pseudocode semantics while using idiomatic Python constructs for clarity, maintainability, and correctness.

Focus on an exact, idiomatic translation that guarantees correctness, completeness, and optimal test-time performance.