Write readable, high-level, and compact pseudocode strictly preserving all original class names, method and function names, parameters, and object-oriented structure exactly as in the problem description. Your pseudocode should be concise and natural, mixing clear language with symbolic operators and common abbreviations. Prefer single-line statements and succinct loops or conditionals, always using consistent indentation to reflect control flow and nesting.

Use only full uppercase keywords: FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, END FUNCTION, END CLASS, etc.  
Retain data structures and method signatures exactly (including parameter names and any type info given). Use meaningful variable names and keep lines as brief as possible without losing clarity. Combine natural expressions with symbols naturally, e.g., +=, ==, DIVIDED BY, LENGTH OF.  
Do NOT include explanations, comments, notes, summaries, or formatting lines.

Present output pseudocode in the exact style below, following this format exactly (no blank lines between lines, no separators):

1. x ‚Üê 0  
2. while x < n: x++  

Example:  
If original code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Produce pseudocode:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```