Write clear, compact, and readable pseudocode that preserves the exact class, method, and function names and the original object-oriented structure from the problem description. Use more natural language phrasing combined with symbolic operators and abbreviations but keep it high-level and concise. Favor one-line statements and succinct loops or conditionals, structured with consistent indentation showing control flow and nesting, following this format without separator lines:

1. x ← 0  
2. while x < n: x++

Do not add explanations, comments, notes, or summaries—output only pseudocode. Use full keywords like FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc., but keep phrasing natural and the pseudocode easy to understand. Retain the data structure and method signatures exactly as given (including parameter names and types if shown). When expressing operations, mix natural language and symbols naturally (e.g., DIVIDED BY, +=, ==). Prefer meaningful variable names and keep lines as compact as possible without sacrificing clarity. End functions and classes explicitly if applicable using END FUNCTION or END CLASS.

Example:

If original code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce pseudocode:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```