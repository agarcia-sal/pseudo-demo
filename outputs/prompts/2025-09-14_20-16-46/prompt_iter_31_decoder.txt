Translate the given pseudocode into fully functional, clean, and idiomatic Python code with the following important instructions:

- Preserve all class names, function names, signatures, and their hierarchy exactly as shown in the pseudocode. Maintain classes, methods, visibility, and structure without modification.
- Faithfully implement the logic as specified: do not omit, add, or alter functionality or control flow.
- If custom data structures or types (e.g., `ListNode`, `TreeNode`) are implied or referenced, define them completely and consistently in your translation.
- Strictly follow Python typing conventions and include appropriate type hints if they can be reasonably inferred from the pseudocode.
- Handle edge cases explicitly when clearly implied or logically necessary to ensure robustness and prevent runtime errors.
- Avoid assumptions about input formats beyond what the pseudocode or common conventions imply.
- Import only necessary standard or third-party Python modules essential for the logic; avoid unused or extraneous imports.
- Implement all return statements and ensure output matches the pseudocode intent exactly.
- Follow Python best practices and PEP 8 style conventions to maximize readability, maintainability, and clarity.
- Optimize the solution for efficiency so it runs within 5 seconds on typical modern hardware even for large inputs.
- Do **not** include any print/debug, test scaffolding, main guards, or input/output code.
- Enclose the entire solution in a *single* Python code block formatted as:

```python
# Your translated Python code here
```

Focus on producing robust, idiomatic, and well-structured Python code that faithfully represents the pseudocode logic and structure, ready for reliable test-time execution.