Write concise, clear, and easily readable pseudocode strictly preserving all original class names, method/function names, parameter names, types (if shown), and the original object-oriented structure exactly as given in the problem description. Represent control flow and nesting with consistent indentation and compact one-line statements where possible, using a natural but high-level language style combined with symbolic operators and standard pseudocode keywords: FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, END FUNCTION, END CLASS, etc.

Favor:

- Meaningful variable names closely aligned to those in the original code,
- Using symbolic operators (e.g., +=, ==, <, >, //, %) mixed naturally with natural language phrases (“LENGTH OF”, “DIVIDED BY”, “IN”, “TO”, etc.),
- Succinct loops and conditionals in one line when clarity isn't sacrificed,
- Explicitly marking the end of functions and classes,
- Compact high-level instructions avoiding low-level implementation details,
- Preserving original data structures and method signatures verbatim,
- Avoiding comments, explanations, notes, or any additional text—output only the pseudocode.

Do not use separator lines or block comments. Output only the minimal pseudocode that fully represents the algorithm’s core logic as derived from the original code’s structure and identifiers.

Format pseudocode in this style:

1. x ← 0  
2. while x < n: x++  

Example conversion if original code is:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:

```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```

Strictly follow these instructions to generate pseudocode that balances natural language expressiveness and concise symbolic notation, preserving exact method/class signatures and structures for accurate reproducibility and test-time correctness.