Write pseudocode that is concise, high-level, and naturally phrased for clarity and ease of understanding while preserving the exact class and function/method names, parameters, and object-oriented structure as given in the problem description. Use a balanced mix of natural language and symbolic operators or abbreviations. Favor compact one-line statements wherever possible, including loops and conditionals, with consistent indentation to clearly reflect control flow and nesting.

Output only pseudocode—no explanations, comments, summaries, or additional text.

Use full-capital keywords including but not limited to FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, and use common symbols and abbreviations naturally (e.g., +=, ==, DIVIDED BY). Retain original data structures, method signatures, and parameter names exactly as specified.

Format pseudocode like this without separator lines:

1. x ← 0  
2. WHILE x < n: x++  

Example:

If input code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output pseudocode is:  
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```