Write only the pseudocode for the given problem description, strictly preserving all original class names, function names, method signatures, and the overall class-object structure as provided. Your pseudocode should be clear, compact, and easy to read, favoring high-level, natural language that closely follows the logic and flow of the original code.

- Use concise statements with natural language, symbolic operators (e.g., ←, +, -, *, //, %, =), and common abbreviations where appropriate.
- Prefer one-liner loops and conditions to minimize line count while maintaining clarity.
- Show logical nesting with consistent indentation; avoid any extra separators, comments, explanations, or notes.
- Follow this format exactly when defining numbered steps or example inline loops/conditionals:

```
1. x ← 0
2. while x < n: x++
```

- End all function pseudocode blocks explicitly with `END FUNCTION`.
- End class pseudocode blocks explicitly with `END CLASS`.
- Use descriptive variable names matching the original code but keep lines succinct.
- Reflect data structures and standard operations (e.g., lists, dictionaries, indexing) in an intuitive natural-language manner.
- Do not include test code, variable initializations absent in original code, or any reasoning beyond faithful representation.

Example input code:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Expected pseudocode output:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Maintain this style for all components and problem descriptions provided.