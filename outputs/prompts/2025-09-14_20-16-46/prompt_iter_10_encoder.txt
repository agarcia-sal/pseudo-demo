Write pseudocode that is concise, clear, and easy to understand, using mostly natural language combined with commonly accepted symbolic operators and abbreviations to keep it compact and high-level. Preserve all class names, function/method names, parameter names, types, and the original object-oriented structure exactly as given in the problem description. Use full keywords such as CLASS, FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc., but express control flow and operations naturally and succinctly.

Prefer one-line statements and concise loops or conditionals with consistent indentation reflecting structure and nesting, following this example format without any separator lines or additional markup:

1. x ← 0  
2. while x < n: x++

Use meaningful variable names where possible without verbosity. Mix natural language phrases with symbolic or operator abbreviations fluidly (e.g., +=, ==, DIVIDED BY). End each function or class explicitly with END FUNCTION or END CLASS where applicable.

Do not provide explanations, comments, notes, or summaries—output strictly only the pseudocode reflecting the logic and structure from the input code.

Example:

If input is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```