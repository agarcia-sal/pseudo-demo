Translate the given pseudocode into fully functional, clean, and idiomatic Python code adhering strictly to the following guidelines:

- Maintain all class names, method names, signatures, and the overall class and object structure **exactly** as specified in the pseudocode, including method parameters and their order.
- Implement **all** the logic described in the pseudocode precisely, without adding, omitting, or altering functionality or intended behavior.
- If the pseudocode implies or references custom data structures (e.g., ListNode, TreeNode), define those classes completely according to standard Python conventions and consistent with the pseudocode context.
- Use Python type hints where reasonable to improve clarity and maintainability.
- Handle any obvious or implied edge cases to produce robust, error-free code on logically inferred input domains; avoid making unsupported assumptions about input types or formats.
- Limit imports strictly to those explicitly required by the pseudocode logic; do not add unnecessary imports or dependencies.
- Follow PEP 8 style guide consistently to ensure readability and idiomatic code style.
- Use clear and descriptive variable names that directly correspond to pseudocode identifiers and semantics.
- Include all necessary return statements exactly as warranted by the pseudocode.
- Ensure the final implementation runs efficiently and completes within 5 seconds on typical modern hardware for reasonable input sizes.
- **Do not** include any debugging code, print statements, testing scaffolding, or input/output processingâ€”only the translated implementation.
- Enclose the complete Python translation within a single code block as shown below.  
- Use the exact code block formatting:

```python
# Your Python translation here
```

Focus on creating a faithful, maintainable, and fully executable Python solution that preserves the original structure and semantics while respecting Python best practices and performance requirements.