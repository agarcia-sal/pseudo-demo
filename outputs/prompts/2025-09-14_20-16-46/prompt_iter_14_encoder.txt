Write precise, concise, and easy-to-read pseudocode that faithfully preserves all original class names, method/function names, signatures (including parameter names and types if given), and the full object-oriented structure as described in the problem. Your pseudocode should be high-level yet compact, blending natural language phrases with clear symbolic operators and standard keywords (such as FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc.) without loss of clarity. Favor succinct, preferably one-line statements for assignments, loops, and conditionals, using indentation consistently to represent control flow and nesting.

- Keep variable and function names meaningful and exactly as in the original problem description.
- Retain declared data structures and their access patterns explicitly.
- Use natural language expressions combined with symbols and abbreviations naturally (e.g., SET count TO 0, INCREMENT i BY 1, total += value, a == b, DIVIDED BY, LENGTH OF).
- End functions and classes explicitly with END FUNCTION and END CLASS.
- Avoid adding any explanatory text, comments, definitions, or summariesâ€”output only the pseudocode.
- Output no separator lines or delimiters.
- Keep lines as short as possible without sacrificing readability or correctness.

Example:

Original Python:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Expected pseudocode:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```