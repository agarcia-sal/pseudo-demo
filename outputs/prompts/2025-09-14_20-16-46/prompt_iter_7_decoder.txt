Translate the given pseudocode into clean, efficient, and idiomatic Python code with the following detailed requirements:

- Keep all class names, function names, parameters, and the exact class and function structure as specified in the pseudocode without modification.  
- Implement every detail of the pseudocode logic precisely without adding, removing, or altering the intended behavior.  
- If the pseudocode implies or uses custom data structures (e.g., ListNode, TreeNode), include their full, correct Python definitions so the code is self-contained and runnable.  
- Carefully infer and code all type hints consistent with Python best practices where appropriate to improve clarity and maintainability.  
- Avoid any assumptions about input types or formats beyond what is explicitly or logically stated in the pseudocode. If input validation or edge case handling is implied, implement it robustly to prevent runtime errors.  
- Only import Python standard library modules explicitly necessary to realize the pseudocode logic; do not include unused imports.  
- Use clear, descriptive variable names in Python consistent with the pseudocode’s intent; maintain semantic clarity and readability.  
- Follow PEP 8 style guidelines strictly (including naming conventions, spacing, and indentation) to produce professional-quality Python code.  
- Do not generate any input/output code such as print statements, prompts, or test scaffolding. Provide only the final implementation.  
- Concentrate on correctness and robustness first, then on readability and efficiency. The solution must run within 5 seconds on typical test inputs of reasonable size.  
- Enclose your entire solution within a single Python code block, exactly as follows:

```python
# Your fully translated and self-contained Python code here
```

- Do **not** include any extra text, explanations, or comments outside the code block.  
- Ensure that return statements are consistent with the function’s specified output.  
- Optimize variable and control flow to stay true to the pseudocode semantics, clear to any Python developer reviewing the code.  
- Your final output should be ready for immediate use or testing without any manual adjustments.

This prompt is designed to produce faithful, idiomatic, maintainable, and test-ready Python implementations from any pseudocode input.