Translate the given pseudocode into fully functional, clean, and idiomatic Python code that satisfies all of the following criteria:

- **Preserve all class names, function names, signatures, and the hierarchical class and object structure exactly as presented in the pseudocode.**  
- Implement all logic implied by the pseudocode precisely—no omitted or added functionality.  
- Define any custom data structures (e.g., ListNode, TreeNode) if referenced or implied in the pseudocode, ensuring they match typical usage conventions unless otherwise specified.  
- Add necessary imports only if explicitly required by the pseudocode’s logic; avoid unnecessary imports.  
- Conform to Python best practices, including PEP 8 style guidelines for readability, naming, and formatting. Use type hints where appropriate and consistent with the pseudocode.  
- Handle typical edge cases logically implied by the pseudocode to prevent runtime errors, but do not assume input beyond what the pseudocode expresses or strongly infers.  
- Include correct and meaningful return statements consistent with function intent; do not add extraneous print statements, input/read code, or testing scaffolds.  
- Ensure efficient and robust solutions that run correctly within a 5-second time limit on standard hardware for reasonable input sizes. Optimize for clarity and maintainability while maintaining faithful translation.  
- Enclose the entire output within a single, uninterrupted Python code block formatted exactly as follows:

```python
# Your complete translated Python code here
```

- Do **not** include any separator lines or commentary outside of the code block.  
- You may leverage any standard or third-party Python libraries that improve correctness, clarity, or efficiency, but only if their use is justified by the pseudocode and problem domain.  
- Carefully preserve all algorithmic details and structural nuances from the pseudocode to ensure output consistency and correctness across diverse test cases.  
- The final code should be immediately usable for programmatic evaluation without requiring manual modification or supplementation.

Focus on producing a foolproof, idiomatic, and high-quality Python translation that integrates seamlessly with automated testing to maximize accuracy and performance at runtime.