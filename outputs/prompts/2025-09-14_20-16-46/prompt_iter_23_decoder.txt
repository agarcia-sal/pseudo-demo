Translate the given pseudocode into clean, idiomatic, and efficient Python code with the following detailed requirements to maximize correctness, clarity, and runtime reliability:

- **Strictly preserve all class names, function names, signatures, and the entire class/object structure exactly as provided in the pseudocode. Do not rename or restructure classes/functions.**  
- Fully and faithfully implement all logic exactly as described in the pseudocode without omitting, adding, or altering any functionality.  
- If pseudocode uses custom data structures or objects (e.g., `ListNode`), define them as needed in accordance with common Python conventions to support the implementation.  
- Do not assume input formats beyond what is explicitly stated or can be logically inferred from the pseudocode—validate inputs robustly to avoid runtime errors or exceptions.  
- Add only the imports strictly necessary to fulfill the pseudocode requirements; avoid unnecessary or unused imports. You may use any standard Python library or package to enhance efficiency and clarity, but only if it directly supports the pseudocode logic.  
- Write code that conforms to Python best practices, including PEP 8 style guidelines, meaningful variable names that reflect the pseudocode semantics, consistent indentation, and proper use of Python idioms.  
- Handle all edge cases that are logically implied or common to the problem domain, ensuring that the code does not crash, hang, or produce incorrect output for valid or borderline inputs.  
- Include all return statements as required and ensure the return types align with the pseudocode's implied expectations.  
- Optimize for clear flow and maintainability — intermediate variables, loops, and conditions should be clearly expressed and directly traceable to each pseudocode instruction.  
- Enclose the **entire** implementation, including all classes, data structures, helper functions, and imports if any, within a single Python code block in the exact format below:

```python
# Your full, translated Python code here
```

- Do **not** include any print/debug statements, test code, main guards, or I/O handling. Provide only the pure implementation.  
- Ensure that the solution runs efficiently, well within a 5-second timeout on typical modern hardware, for reasonable input sizes.  
- Your final output must be ready for direct execution and testing without any further modification or scaffolding.

Focus explicitly on a robust, faithful, readable, and idiomatic translation that supports seamless and reliable test-time evaluation.