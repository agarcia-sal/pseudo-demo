Translate the given pseudocode into well-structured, clean, and efficient Python code with these strict guidelines:

- Maintain all class names, function names, signatures, and the complete class structure exactly as presented in the pseudocode, including method placement and indentation.
- Fully implement the logic described in the pseudocode precisely—do not add or omit any functionality or steps.
- Define any implied custom data structures or classes (e.g., ListNode) exactly if they appear in or are required by the pseudocode.
- Use accurate Python typing hints if the pseudocode suggests input/output types, enhancing clarity and correctness.
- Write idiomatic, PEP 8-compliant Python code prioritizing readability, maintainability, and correctness.
- Handle all edge cases reasonably implied by the pseudocode, ensuring robustness without making unfounded assumptions about input beyond what is logically conveyed.
- Import only the necessary Python standard or third-party libraries if explicitly or implicitly required by the pseudocode; avoid unnecessary imports.
- Include all appropriate return statements consistent with the function’s intended behavior.
- Do not include any print/debug statements, test scaffolding, or input/output handling—only the class and method implementations.
- Ensure your solution completes execution efficiently within a 5-second time frame on typical modern hardware and handles reasonable input sizes gracefully.
- Enclose the entire translated Python code within a single Python code block as follows:

```python
# Your translated Python code here
```

Focus on a faithful and thorough translation that results in robust, idiomatic, and optimized Python code ready for direct use and testing.