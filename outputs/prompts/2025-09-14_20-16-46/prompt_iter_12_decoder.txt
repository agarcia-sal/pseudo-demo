Translate the pseudocode into fully functional, clean, and idiomatic Python code with these mandatory guidelines:

- Preserve **exactly the same class names, function names, parameters, signatures, and class structure** as presented in the pseudocode.
- Implement the entire pseudocode logic precisely without adding, omitting, or altering functionality or behavior.
- If any data structures, helper classes (e.g., ListNode), or custom types are implied or referenced in the pseudocode but not defined, include their complete, correct Python definitions.
- Ensure robust handling of all edge cases that can be logically inferred from the given pseudocode to avoid runtime errors or exceptions.
- Import only the minimal necessary Python standard or external packages **if and only if explicitly required** by the pseudocode logic (e.g., math, collections, itertools), without superfluous imports.
- Use idiomatic Python best practices and follow PEP 8 styling conventions for variable names, spacing, and structure to maximize readability and maintainability.
- Include all required return statements exactly as indicated or implied by the pseudocode.
- Do NOT add any extraneous code such as print statements, debugging, I/O handling, or test scaffolding; output only the pure implementation.
- Your completed translation must run efficiently and finish execution within 5 seconds on typical inputs.
- Enclose the entire translated code in a **single, properly formatted Python code block** as follows:

```python
# Paste your translated Python code here
```

Deliver a faithful, clear, concise, and executable Python implementation that strictly corresponds to the given pseudocode and facilitates seamless testing and deployment.