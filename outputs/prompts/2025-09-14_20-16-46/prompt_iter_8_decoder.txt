Translate the given pseudocode into fully working, idiomatic Python with the following strict guidelines:

- **Retain all class names, function names, parameters, and overall class structure exactly as presented in the pseudocode, preserving method signatures and hierarchy without alteration.**  
- Implement the logic comprehensively and accurately according to the pseudocode, without omissions, additions, or modifications to the intended functionality.  
- Define all custom data structures or types (e.g., ListNode, TreeNode) implied or explicitly stated in the pseudocode to ensure the code is complete and runnable as-is.  
- Make no assumptions beyond the pseudocode about input types or formats. Handle edge or boundary cases clearly suggested by the pseudocode to prevent runtime errors.  
- Use only necessary imports explicitly required by the code logic; avoid unused imports.  
- Ensure your code is idiomatic, clean, readable, and adheres to Pythonic conventions (PEP 8) where applicable, including naming conventions and clear variable naming that reflects pseudocode semantics.  
- Include all necessary return statements consistent with the function’s intent and control flow.  
- Optimize the implementation for both correctness and efficiency so it reliably runs within 5 seconds on typical modern hardware for reasonable test inputs.  
- Do **not** include any print statements, test scaffolding, input/output handling, or any extraneous code—only provide the direct implementation.  
- Enclose the **entire** translated code snippet inside a single, correctly formatted Python code block exactly as follows:

```python
# Your translated Python code here
```

Focus on faithful, robust translation that yields a complete, self-contained, idiomatic Python solution ready for seamless test-time execution with high correctness and efficiency.