Translate the given pseudocode into fully functional, clean, and idiomatic Python code with these enhanced guidelines:

- Maintain all class names, function names, parameters, and the class/object hierarchy exactly as presented in the pseudocode without any renaming or restructuring.  
- Implement the pseudocode logic precisely and completely, without adding or omitting any intended behavior or functionality.  
- Define any custom data structures or classes implied or referenced (e.g., ListNode) explicitly to ensure standalone correctness.  
- Infuse appropriate Python type hints based on the pseudocode context where applicable, enhancing code clarity and correctness.  
- Enclose your entire solution in a single Python code block with this syntax:

```python
# Your fully translated Python code here
```

- Write clean, readable, and PEP 8-compliant Python code emphasizing clarity and maintainability while optimizing for runtime efficiency.  
- Import only necessary standard libraries if explicitly required by the pseudocode logic; avoid any extraneous or unused imports.  
- Handle edge cases that are suggested or implied by the pseudocode inputs or logic to prevent runtime errors and ensure robust execution.  
- Do not speculate about input formats beyond those explicitly given or logically implied; ensure safe, defensive coding for unknown or borderline inputs.  
- The code must include all essential return statements consistent with each functionâ€™s intent.  
- The final Python implementation must run correctly and efficiently within a 5-second timeout on typical modern hardware for reasonable input sizes.  
- Do not include any input/output code, debugging prints, main functions, or test scaffolding; submit *only* the implementation code as specified.  
- Refrain from using separator lines or extraneous comments that clutter the implementation; keep the solution concise and focused.

Focus on delivering a faithful, optimized, and idiomatic Python translation of the pseudocode that maximizes correctness and test-time robustness.

---

**Example adherence highlights:**  
- Exact function signatures and class definitions as in the pseudocode  
- Explicit definitions of auxiliary classes (e.g., ListNode), if they appear in the pseudocode  
- Proper and minimal imports only when strictly necessary  
- Use Python built-ins and standard language features idiomatically  
- Defensive checks for indices, nulls, or boundaries as indicated by loops or conditions in pseudocode  
- Accurate handling of all return paths  

Your response should be a single, carefully formatted prompt following these instructions that reliably and efficiently converts any provided pseudocode to Python code suitable for test-time execution.