Write concise, compact, and easy-to-read pseudocode that closely follows the structure and naming of the original problem description. Preserve all class names, method/function names, parameter names, and their object-oriented relationships exactly as given. Use a natural-language style combined with widely recognized symbolic operators and concise abbreviations, favoring succinct one-line commands, loops, and conditionals that clearly reflect control flow and nesting with consistent indentation.

Output only the pseudocode—no explanations, comments, headers, summaries, or notes. Use these full keywords in uppercase as appropriate: CLASS, FUNCTION, END FUNCTION, END CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, AND, OR, NOT, etc. When detailing operations, mix natural language verbs and phrases with symbols seamlessly (e.g., +=, ==, DIVIDED BY, LENGTH OF, MAX, MIN). Prefer meaningful variable names but keep lines short and clear.

Format all control flow as follows (without separators or extra lines):

1. x ← 0  
2. while x < n: x++

Complete function and class definitions explicitly with END FUNCTION and END CLASS where applicable.

Example:  
If original code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Your output pseudocode should be:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```