Write pseudocode that is concise, easy to read, and highly natural language–oriented while retaining necessary symbolic operators and abbreviations for clarity and brevity. Output only the pseudocode—no explanations, comments, or summaries.

Strictly preserve all class names, function/method names, signatures, parameter names, and the original object-oriented structure exactly as given. Maintain nesting and control flow with consistent indentation.

Favor one-line statements when possible, and use succinct loops and conditionals formatted like:

1. x ← 0  
2. while x < n: x++

Use full uppercase keywords such as FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc. Use natural phrasing combined with symbolic operators (e.g. +=, ==, DIVIDED BY) naturally and sparingly. Choose meaningful variable names to keep lines compact but clear.

Explicitly end functions and classes with END FUNCTION and END CLASS.

Do not use separator lines or add any text other than the pseudocode itself.

Example:  
If the original code is

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

the pseudocode must be

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```