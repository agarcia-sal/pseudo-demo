Translate the given pseudocode into fully functional, clean, and idiomatic Python code adhering to the following enhanced guidelines:

- Retain **exactly** the same class names, function names, parameters, and class/method structures as shown in the pseudocode, without any modification or omission.
- Implement all logic described in the pseudocode precisely, including all control flows, computations, and returns, without adding or removing any functional detail.
- Define any custom data structures (e.g., linked list nodes, trees) implied or referenced in the pseudocode exactly as needed.
- If type hints can be logically inferred from the pseudocode, include them for clarity and maintainability; otherwise, omit them.
- Import only Python standard libraries or packages explicitly required by the logic; avoid any unnecessary or extraneous imports.
- Handle all edge cases that are either explicitly stated or reasonably implied by the pseudocode to avoid runtime errors.
- Avoid assumptions about input formats beyond what the pseudocode states or logically implies.
- Optimize for readability, clarity, and Pythonic style (following PEP 8 conventions), including proper naming, spacing, and clean code structure.
- Ensure that all return statements fully reflect the intended output of the pseudocode.
- Do not include any input/output handling, debugging print statements, or test scaffoldingâ€”only provide the implementation.
- Enclose the entire translated code within a single, properly formatted Python code block as follows:

```python
# Translated Python code here
```

- Your code must run efficiently and complete within 5 seconds on typical modern hardware for reasonable input sizes.
- Strive for a faithful, maintainable, and robust Python translation that aligns perfectly with the pseudocode to maximize correctness and seamless execution performance.