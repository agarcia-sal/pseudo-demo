Translate the given pseudocode into a fully working, clean, and idiomatic Python implementation that strictly adheres to the following criteria:

- Preserve all class names, function names, signatures, and class hierarchy exactly as presented in the pseudocode without adding or removing any classes or methods.
- Accurately and completely implement the logic described in the pseudocode, avoiding any change in behavior or functionality.
- Define any custom data structures or helper classes (e.g., ListNode, TreeNode) explicitly if they appear or are implied by the pseudocode, ensuring compatibility and correctness.
- Use type annotations wherever possible to clarify input and output types, without altering the original function signatures.
- Write code that is efficient, robust, and handles edge cases logically implied by the pseudocode to prevent runtime errors.
- Use only necessary importsâ€”include standard Python libraries or packages only if clearly required for correctness or performance.
- Ensure variable names and code structure reflect the pseudocode semantics closely for maximum readability and maintainability.
- Do not add any input/output code such as print statements, testing scaffolding, or data conversion; output only the final implementation.
- Enclose the entire translated Python solution in a single, properly formatted Python code block like this:

```python
# Your translated Python code here
```

- Optimize for both clarity and speed, ensuring the solution runs efficiently within 5 seconds on typical modern hardware for standard input sizes.

Focus on a faithful, idiomatic, and well-structured Python translation that is immediately usable and testable without requiring modifications.