Write clear, concise, and natural-language pseudocode that strictly preserves all original class and function/method names, including their parameters and object-oriented structure, exactly as described in the problem. Represent control flow with compact, readable one-line statements and succinct loops or conditionals, using symbolic operators (e.g., +=, ==, <, >) combined naturally with plain English phrases for clarity but no verbose explanations. Use full uppercase keywords: CLASS, FUNCTION, END FUNCTION, END CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc.

Ensure:

- The structure and nesting are clearly shown by consistent indentation.
- Use meaningful variable names matching the original code wherever possible.
- Favor natural phrases like “INCREMENT x BY 1” or “SET total TO sum DIVIDED BY count” but keep sentences short.
- Avoid comments, notes, or explanations—output ONLY the pseudocode.
- Do not insert separator lines or extra formatting beyond consistent indentation.
- End classes and functions explicitly with END CLASS or END FUNCTION if applicable.
- Use a style like:

```
1. x ← 0
2. while x < n: x++
```

Example:

Input:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```