Translate the given pseudocode into efficient, clean, and idiomatic Python code, adhering strictly to these guidelines:

- Maintain all class names, function names, function signatures, and the class/object structure exactly as presented in the pseudocode—do **not** rename or restructure unless explicitly required by the pseudocode.  
- Fully and faithfully implement the algorithmic logic described, without adding or omitting any functionality, while carefully interpreting all control flows, conditions, and operations.  
- Define any custom data structures or types (e.g., ListNode) precisely as implied or described in the pseudocode.  
- Manage edge cases logically inferred from the pseudocode context to ensure robustness and prevent runtime errors. Make no unwarranted assumptions about input formats beyond what is stated or clearly implied.  
- Write Python code that follows best practices: clear variable naming, PEP 8 style conventions, proper use of type hints when inferable, meaningful comments **only if they clarify non-trivial logic**, and idiomatic constructs ensuring readability and maintainability.  
- Optimize for time and space efficiency to guarantee the implementation runs within 5 seconds on typical modern hardware for reasonable input sizes.  
- Include only the necessary imports explicitly required for the pseudocode’s functionality—avoid unused or extraneous imports.  
- Provide appropriate return statements exactly as expected from each function’s intent.  
- Output the entire solution enclosed within a single Python code block:

```python
# Your translated Python code here
```

- Do **not** include any code related to input reading, output printing, logging, debugging, or test scaffolding. The output should be solely the implemented code corresponding directly to the pseudocode.

Focus on delivering a direct, idiomatic, robust, and efficient Python translation that can be seamlessly executed and tested without modification.