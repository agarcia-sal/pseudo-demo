Write compact, high-level pseudocode that mirrors the exact class, method, and function names along with the original object-oriented structure given in the problem description. Use mostly natural language but incorporate symbolic operators and standard pseudocode keywords (FUNCTION, CLASS, SET, FOR, WHILE, IF, ELSE, RETURN, IN, TO, BY, etc.) to keep it concise, clear, and easy to read. Retain parameter names and types exactly as provided.

Prefer one-line statements and succinct loops or conditionals with consistent indentation to show control flow and nesting. Use meaningful variable names and blend natural phrases with symbols naturally (e.g., +=, ==, DIVIDED BY). Avoid verbose details, implementation minutiae, comments, explanations, or summaries — output only the pseudocode. Explicitly mark the end of functions and classes (END FUNCTION, END CLASS) when applicable.

Format the pseudocode like this without any separator lines:

1. x ← 0  
2. while x < n: x++

Example:

Given Python code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce pseudocode:  
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```