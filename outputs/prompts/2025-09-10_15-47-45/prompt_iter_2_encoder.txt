Generate concise, easy-to-read pseudocode from the given problem description that captures the original algorithm’s logic and preserves the exact function name. The pseudocode should be compact and high-level, using natural language with symbolic notation and abbreviations, preferring one-liner statements when possible. Avoid any purpose, summary, explanations, comments, or overview; produce only the pseudocode. Follow this structured format exactly (no separator lines):

1. in function FunctionName  
2. let variables be appropriately typed or implied  
3. assignment and control flow statements in short form (e.g., x ← 0, while x < n: x++)  
4. use indentation for nested blocks but keep lines as brief as feasible  
5. use concise constructs for loops, conditionals, and data operations  
6. return value lines as in original function

Example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i from 0 to n-1  
7. min_i ← i  
8. for j from i+1 to n-1  
9.  if A[min_i] > A[j]: min_i ← j  
10. swap A[i], A[min_i]  
11. print all elements of A

Ensure the pseudocode strictly follows the input function’s name and parameters, is easy to read, and fits within a 5-second generation budget by optimizing for brevity and clarity. Output only the pseudocode as per above instructions.