Translate the provided pseudocode into a single, self-contained, idiomatic, and optimized Python 3 script, adhering to these precise guidelines:

- Enclose the entire script within one Python code block starting with ```python and ending with ```, with no extraneous text or comments inside or outside the block.
- Use exclusively Python 3 standard libraries; **third-party packages are not allowed**.
- Handle all inputs strictly through `input()` calls or reading directly from `sys.stdin` without prompts, explanatory text, or extra output.
- Fully implement the pseudocode logic exactly as described, while substantially improving performance and code quality by:
  - Selecting the most efficient algorithms and data structures suitable for the task.
  - Exploiting Python’s built-ins, comprehensions, generators, and idioms for clarity, brevity, and speed.
  - Optimizing input/output procedures to guarantee execution well within typical 5-second time constraints.
  - Thoughtfully managing edge cases, boundary conditions, and potential pitfalls, ensuring rigorous correctness.
  - Avoiding unnecessary computations, intermediate variables, or memory overhead.
- Write clean, readable, and maintainable code with consistent style and clear flow, prioritizing computational efficiency without sacrificing understandability.
- Your output must contain **only** the runnable code satisfying the above, no debugging, logging, comments, or explanation.
- Assume pseudocode correctness; your role is translating it into a robust, performant, and idiomatic Python 3 solution that passes all correctness and performance tests reliably.

This prompt strikes a balance between maximal code clarity and rigorous performance guarantees while strictly conforming to input/output conventions and the pseudocode’s intent.