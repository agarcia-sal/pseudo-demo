Translate the given pseudocode into highly efficient, idiomatic, and production-quality Python 3 code that strictly adheres to the following criteria:

- Output your entire solution enclosed in a single Python code block starting with ```python and ending with ```, with no additional text, comments, or logs outside or inside the block.
- Use only Python 3 standard libraries that need no external installation; no third-party or non-standard modules are permitted.
- Input must be read strictly using bare `input()` calls or from `sys.stdin` without passing any prompt strings or extraneous text.
- Your code must faithfully implement the pseudocode’s logic while significantly enhancing it by:
  - Employing algorithmic optimizations ensuring the solution works efficiently within typical competitive programming constraints and runs under 5 seconds.
  - Using the best-suited data structures and Python idioms (list comprehensions, generator expressions, built-ins, unpacking, etc.) to maximize clarity and performance.
  - Handling all possible edge and boundary cases robustly, guaranteeing correctness on all valid inputs.
  - Minimizing memory footprint and removing redundant calculations or state to improve runtime and readability.
  - Streamlining input/output operations—prefer fast I/O methods where beneficial.
- Ensure the code has a clear, maintainable structure with meaningful variable names and no unnecessary complexity, while prioritizing speed and correctness.
- Do **not** include any comments, debug prints, explanations, or formatting beyond the required code block.
- Assume all pseudocode logic is complete; your focus is an optimal, direct, idiomatic Python 3 translation ready for immediate execution and validation.

Your final output must be an immediately runnable Python 3 solution that excels in correctness, efficiency, and idiomatic style under the prescribed constraints.

```python
```