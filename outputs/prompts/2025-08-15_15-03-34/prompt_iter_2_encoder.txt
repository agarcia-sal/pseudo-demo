Generate clear, concise pseudocode from the given problem description using a high-level, compact style that balances natural language and symbolic notation. The pseudocode should emphasize readability and understanding while remaining succinct and precise. Use abbreviations and one-liners where possible without losing clarity. Avoid purpose statements, comments, explanations, or summaries—output only the pseudocode itself.

Format steps as numbered lines starting from 1 and use arrows (←) for assignments. Use natural control flow keywords (if, while, for, else, function, return) and keep each control structure on a single line if simple, otherwise indent the nested block consistently. Use symbolic operators and abbreviations (mod, div, +=, ≠, etc.) to keep lines short but try to preserve clear logical expression.

Follow this style strictly (note: no separator lines, no extra formatting):

1. x ← 0  
2. while x < n: x++  
3. if x mod 2 = 0: print(x) else: x ← x + 1  
4. for i in 1 to n: sum += i  

Prefer declarative statements with just enough detail to understand the logic and flow—no low-level code specifics or verbose data structure operations, but do define variables, inputs, and functions clearly if relevant.

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers with size n  
read elements into A  
for i in 0 to n-1:  
  set min_i ← i  
  for j in i+1 to n-1: if A[min_i] > A[j]: min_i ← j  
  swap A[i], A[min_i]  
print A

Your pseudocode should be easy to read, sufficiently detailed to guide implementation, and efficient to produce within 5 seconds.