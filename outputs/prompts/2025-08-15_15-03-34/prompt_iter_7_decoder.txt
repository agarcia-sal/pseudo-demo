Translate the pseudocode into clean, efficient, and idiomatic Python code that precisely implements the given logic. Your generated code must:

- Use only Python standard libraries or built-in features; external packages beyond the standard Python distribution are not permitted.
- Employ plain input() calls without any prompt strings (e.g., use `input()` or `sys.stdin.read()`).
- Wrap the entire solution in a single Python code block, demarcated with triple backticks and `python` (i.e., ```python ... ```).
- Prioritize correctness, clarity, and performance: Your code should handle edge cases robustly, avoid unnecessary computations or memory usage, and run within a 5-second time limit for typical inputs.
- Use Pythonic constructs and data structures fitting the logic, leveraging built-in functions, comprehensions, short-circuiting, and lazy evaluation as appropriate.
- Do not output any commentary or explanations—only provide the final code enclosed in the code block.
- Avoid redundant imports or lines and prefer clean, minimal, and well-structured code that directly reflects the pseudocode intent while improving readability and speed.

Focus especially on:

- Handling input/output exactly as required.
- Writing clear, maintainable control flows.
- Detecting and optimizing hotspots or nested loops from the pseudocode.
- Using naming conventions that, while concise, preserve the pseudocode’s variable semantics.

Only output your converted Python code enclosed in the specified markdown code block.