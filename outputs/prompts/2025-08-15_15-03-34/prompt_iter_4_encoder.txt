Generate succinct, clear pseudocode from the given problem description that balances natural language and symbolic notation to maximize readability and conciseness.  
Produce a high-level, compact algorithm outline using mainly one-line statements with minimal nesting.  
Use standard control structures (function, if, else, for, while, return) and assignment arrows (←).   
Name variables descriptively yet briefly; favor common abbreviations and direct expressions of operations, conditions, and iterations.  
Number each pseudocode line sequentially starting at 1, exactly as below:  

1. x ← 0  
2. while x < n: x++  

Omit comments, explanations, initialization details unless essential, summaries, or formatting separators.  
Avoid filler phrases or verbose constructs; present only the algorithm steps necessary to fully implement the solution.  
When representing loops, ranges should be explicit and concise (e.g., for i in 1 to n or for each element in A).  
Write data structure usage plainly (e.g., vector, list, string) and directly access their elements without verbose syntax.  
Do not include input/output handling unless integral to the algorithm logic; if included, keep minimal and clear.  
The output should be self-contained pseudocode that can be quickly understood and implemented by a competent programmer.  
Complete output within 5 seconds with no trailing newlines or extra spaces.