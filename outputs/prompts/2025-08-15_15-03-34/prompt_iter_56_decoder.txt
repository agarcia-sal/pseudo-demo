Translate the input pseudocode into a fully functional, highly efficient, and idiomatic Python 3 script that meets all the following requirements:

- Output exactly one code block formatted as ```python ... ``` containing only valid, production-quality Python 3 code; **no explanations, comments, or any extra text outside or inside the code block**.
- Use **only the Python 3 standard library** (no third-party modules).
- Input must be read exactly as implied by the pseudocode, using either bare `input()` calls or reading from `sys.stdin` without any prompts or additional strings; output only with `print()`.
- Your translation must:
  - Faithfully and precisely implement the pseudocodeâ€™s logic.
  - Optimize both algorithmic complexity and Python idioms for maximal runtime and memory efficiency.
  - Use the fastest appropriate I/O methods for large input sizes.
  - Eliminate all redundant computations and unnecessary memory use.
  - Robustly handle all edge, corner, and boundary cases implicit in the pseudocode.
  - Structure the code cleanly with clear function boundaries and local scopes; avoid unnecessary global variables.
  - Follow PEP 8 style conventions for readability without sacrificing performance.
  - Ensure code executes within typical online judge constraints (generally < 5 seconds).
- Provide standalone scripts that can be run immediately without modification.
- Assume all pseudocode is syntactically correct and consistent; produce direct, idiomatic, and optimal Python translations accordingly.