Translate the provided pseudocode into a fully functional, highly optimized, and idiomatic Python 3 script that strictly conforms to these conditions:

- Enclose your entire solution in a single code block starting with ```python and ending with ``` with no additional text or comments inside or outside the block.
- Use **only Python 3 standard library modules**; third-party packages or external dependencies are forbidden.
- All input must be read via bare `input()` calls or from `sys.stdin` without any prompt strings or extra output.
- Output only what is strictly required to implement the pseudocode’s functionality—no debugging statements, logs, comments, or extraneous prints.
- Faithfully reproduce the pseudocode’s logic but elevate your translation by:
  - Selecting and implementing the optimal algorithms and data structures to maximize runtime and memory efficiency.
  - Using Pythonic idioms, built-ins, comprehensions, and generator expressions to deliver concise yet readable code.
  - Minimizing unnecessary variable assignments, redundant calculations, and memory overhead.
  - Handling all edge cases and boundary conditions robustly to guarantee correctness across all valid inputs.
  - Performing input/output operations efficiently to ensure the program runs comfortably within a strict 5-second runtime limit on typical large inputs.
- Prioritize clarity and maintainability while ensuring peak computational performance.
- Assume the input pseudocode is logically correct; your responsibility is to transform it into an elegant, optimized Python 3 solution that passes all tests flawlessly.

Your output must be a ready-to-run Python 3 script contained solely within one properly formatted code block meeting all above conditions.