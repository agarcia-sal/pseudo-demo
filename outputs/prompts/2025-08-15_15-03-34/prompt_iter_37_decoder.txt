Translate the given pseudocode into efficient, well-structured, and idiomatic Python 3 code that meets these strict criteria:

- Wrap the entire solution in a single Python code block starting with ```python and ending with ```, with no extra text or comments inside or outside the block.
- Use only Python 3 standard library modules; **third-party libraries are not permitted**.
- Handle all inputs strictly via bare `input()` calls or by reading `sys.stdin` directly, with no prompt strings or extra output.
- Faithfully implement the pseudocode logic but enhance it by:
  - Choosing the most performant algorithms and appropriate data structures to optimize runtime and memory.
  - Leveraging Python’s built-in functions, comprehensions, and idioms for maximum clarity and conciseness without losing readability.
  - Efficiently managing input/output to confidently run well within a 5-second limit on typical problem sizes.
  - Addressing all edge cases and boundary conditions robustly to ensure correctness in all valid input scenarios.
  - Removing any redundant computations, intermediate variables, and unnecessary memory usage.
- Write code that is clean, straightforward, and maintainable, with consistent style and clear flow, while prioritizing computational efficiency.
- Output no debugging, logging, or explanatory text—only runnable code exactly implementing the pseudocode’s intent with the above enhancements.
- Assume the pseudocode is syntactically and logically correct; your role is to deliver a direct, optimized, and idiomatic Python translation that passes all correctness and performance tests seamlessly.

Your output must be a ready-to-run Python 3 script strictly complying with these rules, ensuring maximum clarity and efficiency.