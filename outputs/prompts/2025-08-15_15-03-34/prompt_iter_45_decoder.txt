Translate the provided pseudocode into a single, self-contained, idiomatic, and highly optimized Python 3 script that meets these comprehensive requirements:

- Output your solution enclosed strictly in one Python code block, starting with ```python and ending with ```, with absolutely no preceding or trailing text or comments.

- Your code must use **only Python 3 standard libraries**; no third-party packages or external dependencies are allowed.

- Implement all input reading through bare `input()` calls or direct reading from `sys.stdin` (without prompt strings or extraneous output), and produce only the required final outputs with no debug or explanatory prints.

- Faithfully realize the pseudocode logic but significantly enhance it by:

  - Applying the most appropriate efficient algorithms and data structures to minimize time and memory usage.

  - Utilizing Pythonâ€™s native idioms, built-ins, generator expressions, comprehensions, and language features for concise yet readable code.

  - Ensuring robust handling of edge cases and boundary conditions so the solution never fails on valid inputs.

  - Avoiding unnecessary variables, redundant computations, and superfluous data storage.

  - Managing input-output operations efficiently to perform well under strict time constraints (ideally finishing well within 5 seconds on large inputs).

- Structure the code cleanly and logically, maintain consistent style, and prioritize clarity alongside computational efficiency.

- Assume the pseudocode is logically correct; your goal is to deliver a high-fidelity, direct translation that is optimized, maintainable, and guaranteed to pass all correctness and performance tests.

- Do not produce any text other than the requested runnable Python code snippet.

Your final output must be a ready-to-execute Python 3 script encapsulated exactly as follows:

```python
# your entire optimized Python 3 solution here
```