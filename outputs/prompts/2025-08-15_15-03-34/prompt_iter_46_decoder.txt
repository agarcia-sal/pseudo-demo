Translate the provided pseudocode into an optimized, clean, and idiomatic Python 3 program that strictly follows these requirements:

- Output only one Python code block starting with ```python and ending with ```, containing the entire solution; no extra text, comments, or explanations inside or outside the block.
- Use only Python 3 standard library modules; **third-party libraries are not allowed**.
- Input must be read exclusively via bare `input()` calls or reading from `sys.stdin` without prompts or additional output.
- Faithfully implement the pseudocode logic while significantly enhancing performance and reliability by:
  - Selecting the most efficient algorithms and data structures appropriate to the problem.
  - Utilizing Python built-ins, comprehensions, generator expressions, and idiomatic constructs to maximize readability, conciseness, and speed.
  - Managing input/output with minimal overhead to ensure the solution reliably executes within 5 seconds on typical problem scales.
  - Eliminating redundant computations and memory overhead, and handling all edge and corner cases rigorously.
  - Avoiding unnecessary variable assignments and intermediate states to reduce runtime and memory footprint.
- Ensure your code is clean, straightforward, easy to maintain, and consistently styled—prioritize clarity without sacrificing efficiency.
- Do not include debugging code, logging, explanatory comments, or any output other than what is strictly required by the pseudocode.
- Assume the pseudocode is correct; your goal is a direct, carefully optimized, ready-to-run Python 3 translation that passes all correctness and performance requirements.

Your final output must be a single, self-contained Python 3 script strictly adhering to these rules and capturing all the original pseudocode’s semantics with maximal clarity and efficiency.