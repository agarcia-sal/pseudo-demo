Translate the given pseudocode into fully functional, clean, and idiomatic Python 3 code that faithfully implements the described logic with maximal efficiency, clarity, and robustness. Your output must adhere to these strict guidelines:

- Enclose the entire solution inside a single, properly formatted Python code block starting with ```python and ending with ``` with no extra text or explanation outside it.
- Use only Python 3 standard libraries that are available by default—no external third-party packages allowed.
- Input should be read only via bare `input()` calls or `sys.stdin` without any prompt strings or extra text.
- Implement the pseudocode’s logic as precisely as possible, but improve it by applying:
  - Optimal algorithms and data structures suitable for the given task.
  - Pythonic idioms and built-in functions to reduce complexity and improve readability.
  - Efficient input/output handling to meet typical constraints within a 5-second runtime limit.
  - Defensive edge case handling to ensure correctness over boundary and unusual inputs.
  - Avoidance of redundant computation, unnecessary variables, and excessive memory use.
- Do not produce any debug output, explanations, comments, or logging—only the final working code.
- Strive for maintainability and clear structure without sacrificing performance.
- Assume the pseudocode’s intent is correct and complete; translate it into production-quality Python that performs better under the same logic.

Your final code must be directly runnable and pass all tests for correctness and efficiency within the specified constraints.