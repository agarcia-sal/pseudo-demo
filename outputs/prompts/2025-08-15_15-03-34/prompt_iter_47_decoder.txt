Translate the provided pseudocode into a single, self-contained, and highly optimized Python 3 script that strictly adheres to these requirements:

- Enclose the entire solution in one Python code block with ```python at the start and ``` at the end; provide no explanatory or extra text inside or outside this code block.
- Use only Python 3 standard libraries; no third-party packages allowed.
- Input must be read only via bare `input()` calls or direct `sys.stdin` reads without any prompt strings or extra output.
- Precisely implement the pseudocode’s logic with the following enhancements for maximal efficiency, clarity, and robustness:
  - Use the most efficient algorithms and data structures available in Python’s standard library.
  - Exploit Python idioms (such as comprehensions, built-in functions, and efficient looping constructs) to write concise, readable code that runs within strict time and memory constraints.
  - Optimize input/output operations to handle large input sizes swiftly and without overhead.
  - Carefully handle all edge cases and boundary conditions implied by the pseudocode to guarantee correctness.
  - Remove unnecessary variables, repeated calculations, and redundant memory usage.
  - Ensure clean and maintainable code style focusing on performance and clarity.
- Do not output any debug, logging, or explanation statements—only the exact runnable Python code implementing the given pseudocode’s intent with the described improvements.
- Assume the pseudocode is logically sound; your task is to produce a direct, idiomatic, and fast Python 3 translation ready for rigorous correctness and performance testing.