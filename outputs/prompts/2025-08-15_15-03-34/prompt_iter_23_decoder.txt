```plaintext
You are given pseudocode describing an algorithm or procedure. Translate it into clear, concise, and efficient Python code that precisely implements the described logic.

Requirements:
- Output only valid, self-contained Python code enclosed in a single fenced code block:
  ```python
  # your code here
  ```
- Use only the Python standard library and built-in functions; external dependencies are NOT allowed.
- Input must be read with plain calls like input() or sys.stdin methods without any prompt strings.
- Output only the final result(s), with no additional explanations, logging, or debugging prints.
- Prioritize clarity, idiomatic style, and performance appropriate for typical inputs to run within 5 seconds.
- Use Pythonâ€™s best practices: list comprehensions, generator expressions, built-in functions, and suitable data structures for speed and memory efficiency.
- Carefully handle all edge cases from the pseudocode; avoid redundant computations or unnecessary data copies.
- When feasible, leverage built-in modules for common tasks (e.g., math, collections, pathlib, sys).
- Write code that is robust, concise, and easy to read while strictly aligning with the pseudocode logic.

Your response must contain nothing except the complete, optimized Python code implementing the input pseudocode, wrapped only inside the specified ```python ... ``` code block.
```