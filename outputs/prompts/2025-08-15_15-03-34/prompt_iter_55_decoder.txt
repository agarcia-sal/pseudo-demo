Translate the provided pseudocode into an optimized, idiomatic, and production-quality Python 3 script that strictly follows these comprehensive guidelines:

- **Output only a single Python code block**, enclosed exactly as ```python ... ```, with **no extra text, comments, or explanations** inside or outside the block—just the ready-to-run code.
- Use **only Python 3 standard libraries**; no third-party packages are allowed.
- Handle **all input exclusively via bare `input()` calls or by reading from `sys.stdin`**, reading exactly what the pseudocode implies, and produce output only via standard `print()` calls as needed. No prompt strings, debug prints, or additional output are permitted.
- Faithfully implement the pseudocode’s logic while substantially improving it by:
  - Selecting the most efficient algorithms and data structures, minimizing time and space complexity.
  - Exploiting Python built-ins, comprehensions, generator expressions, `itertools`, and other idiomatic constructs to enhance clarity, brevity, and speed.
  - Implementing highly performant input/output methods suitable for large data (e.g., buffered reading if appropriate).
  - Thoroughly addressing all edge cases, boundary conditions, and corner cases to guarantee correctness.
  - Eliminating redundant operations, repeated calculations, and unnecessary memory allocations.
  - Avoiding global variables unless strictly beneficial; prefer local scopes and functions where they improve modularity and readability.
  - Ensuring that the code finishes execution well within the typical 5-second runtime constraint for usual input sizes.
- Deliver **clean, well-structured, and maintainable code**, exhibiting consistent style and logical flow without sacrificing performance.
- Assume the pseudocode is syntactically correct — your role is purely to produce an idiomatic, direct, and optimal Python 3 translation that passes all tests flawlessly.

Your output must be a complete, standalone Python 3 script ready for immediate execution.