Translate the provided pseudocode into a single, self-contained, highly optimized, and idiomatic Python 3 script that strictly conforms to these requirements:

- Output only one Python code block, enclosed exactly by triple backticks and the language specifier:  
  ```python  
  # your code here  
  ```  
  No additional text, explanation, or comments inside or outside the code block.

- Use **only Python 3 standard library** modulesâ€”no third-party imports allowed.

- Read all inputs exactly as described using bare calls to `input()` or directly from `sys.stdin` (e.g., `sys.stdin.read()`), never with prompts or extra I/O text.

- Faithfully implement the pseudocode logic; however, actively improve by:  
  - Selecting or devising the fastest known algorithms and data structures suitable for the problem scale.  
  - Applying Pythonic idioms, built-ins, and comprehensions to maximize code clarity and efficiency without sacrificing readability.  
  - Minimizing overhead and memory usage by eliminating redundant computations, variables, or passes.  
  - Handling all edge and boundary cases rigorously, ensuring correctness on any valid input.  
  - Optimizing input/output operations to run well within 5 seconds on typical input sizes.

- Write clean, maintainable Python code with consistent style, clear flow, and well-chosen variable names, prioritizing runtime performance and memory efficiency.

- Do not print debug info, explanation, logging, or any output beyond what the pseudocode requires.

- Assume the pseudocode is syntactically and logically sound; your goal is a direct, correct, idiomatic, and performance-tuned Python 3 translation that passes all correctness and efficiency tests effortlessly.

Your final output must be a ready-to-run Python 3 script strictly adhering to these rules, enabling maximum correctness and speed.