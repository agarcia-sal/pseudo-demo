Translate the given pseudocode into a fully self-contained, highly efficient, and production-ready Python 3 script by strictly adhering to these enhanced requirements:

- Output **only a single Python code block**, exactly enclosed as ```python ... ```, with **no extra text, comments, or explanations** outside or inside the block.
- Use **only Python 3 standard libraries**. No third-party packages or external dependencies are allowed.
- Read all input exactly as implied by the pseudocode using bare `input()` calls or `sys.stdin` reads without any prompt strings. Use only standard output with `print()` for results; no debugging or extraneous prints.
- Your translation must be a **direct, idiomatic, and optimized implementation** of the pseudocodeâ€™s logic, improving it by:
  - Employing the most efficient algorithms and data structures to minimize time and memory usage.
  - Using Pythonic constructs such as comprehensions, generators, built-in functions, `itertools`, and buffered I/O techniques to enhance speed and clarity.
  - Handling all conceivable edge cases and corner cases rigorously to guarantee correctness and robustness.
  - Avoiding redundant computations, repeated passes, and unnecessary memory allocations.
  - Structuring code with proper encapsulation: functions, local variables, and minimal or no globals to improve readability and maintainability.
  - Ensuring the program consistently runs within typical competitive programming limits (under 5 seconds for standard input sizes).
- The output must be a complete executable script that requires no modifications and passes all correctness and performance tests flawlessly.
- Assume the pseudocode is syntactically valid; your role is to produce the best possible Python 3 realization, not to analyze or fix pseudocode.

**Remember:** Your entire submission must be precisely one Python code block starting with ```python and ending with ```, nothing else.