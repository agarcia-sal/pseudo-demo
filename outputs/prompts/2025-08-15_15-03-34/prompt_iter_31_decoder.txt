Translate the provided pseudocode into clean, optimized, and production-quality Python 3 code adhering strictly to the following requirements:

- Enclose your entire solution within a single Python code block starting with ```python and ending with ```, with absolutely no additional text or comments outside or inside the block.
- Use only Python 3 standard libraries available by default; **no third-party packages** are allowed.
- Read all input strictly via bare `input()` calls or from `sys.stdin` without any prompt arguments or extra text.
- Precisely implement the logic expressed in the pseudocode, but elevate it by:
  - Selecting and applying the most efficient algorithms and data structures appropriate for the task.
  - Using Pythonic idioms, built-in functions, and language features to maximize readability and conciseness without sacrificing clarity.
  - Optimizing input/output operations to comfortably operate within a 5-second runtime limit on typical problem constraints.
  - Incorporating robust edge case and boundary condition handling to ensure correctness in all plausible inputs.
  - Eliminating redundant calculations, unnecessary variables, and excessive memory consumption.
- Write code that is straightforward to maintain and reason about, with a clear and consistent structure, while prioritizing performance.
- Do **not** produce any debug information, inline comments, explanatory text, or logging output—your output must be only the runnable code matching the pseudocode logic.
- Assume the pseudocode’s intent is complete and correct—your job is a direct but enhanced and idiomatic Python translation that performs optimally and reliably.

Your final output must be immediately executable and pass all correctness and efficiency tests under the specified constraints.