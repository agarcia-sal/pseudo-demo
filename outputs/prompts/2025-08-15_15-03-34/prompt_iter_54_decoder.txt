Translate the provided pseudocode into a single, highly efficient, idiomatic, and clean Python 3 script enclosed strictly within a single Python code block starting with ```python and ending with ```. Your translation must adhere to the following enhanced requirements:

- Use **only Python 3 standard libraries**; do not import or rely on any third-party packages.
- Handle **all input via bare** `input()` calls, or by reading from `sys.stdin` directly, **without any prompt text or auxiliary output**.
- Faithfully implement the logic expressed in the pseudocode, but optimize and elevate it by:
  - Selecting the most performant algorithms and carefully chosen data structures to minimize time and space complexities.
  - Employing Python’s best idioms, built-in functions, comprehensions, generators, and language features for clarity, brevity, and speed—without sacrificing readability or correctness.
  - Efficiently managing input-output operations to ensure execution well within typical 5-second time constraints for moderately large inputs.
  - Robustly covering all edge and corner cases implicit in the problem domain.
  - Pruning redundant variables, computations, and memory allocations for lean, minimal runtime overhead.
- Write code that exhibits clean structure and straightforward control flow, using consistent naming, spacing, and style for maintainability.
- Produce **no debugging output, explanations, or comments**—output strictly runnable, final code matching the pseudocode’s intended behavior, fully optimized.
- Assume the pseudocode is both syntactically correct and logically sound; your role is to produce an immediately executable, best-practice Python 3 solution that passes all correctness and performance tests seamlessly.

Your output should be exactly one Python 3 script wrapped entirely in a single code block as described, ready for immediate execution without modification.