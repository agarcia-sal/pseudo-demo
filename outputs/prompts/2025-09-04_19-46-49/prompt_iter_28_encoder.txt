Generate concise, clear, and high-level pseudocode directly from the given problem description and original code, obeying these rules:

- Start with the exact function name from the original code, formatted as:  
  in function function_name

- Number all pseudocode steps sequentially from 1, using this exact style:  
  1. x ← 0  
  2. while x < n: x++

- Use mostly one-line steps combining natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | |) to express variables, assignments, conditions, loops, and returns succinctly.

- Prefer natural, idiomatic, compact expressions that clearly convey intent at a moderately high level without unnecessary detail; for example:  
  if x > 0: y++  
  for i ∈ range: do_something

- When multiple simple actions occur in one step, separate them by commas or semicolons only if it enhances brevity without impairing clarity.

- Use meaningful variable names as in the original code; abbreviate only if it reduces length while preserving clarity and recognizability.

- Avoid low-level details, extensive nesting, parentheses, comments, explanations, summaries, blank lines, or any output except the numbered pseudocode lines.

- Outputs should be dense but readable and comprehensive, minimizing line count while maintaining correctness and completeness.

- Do not include any headings, separators, metadata, or notes—output only the pseudocode lines.

- Aim to produce natural, human-readable pseudocode under 5 seconds that balances clarity, conciseness, and expressiveness.

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A