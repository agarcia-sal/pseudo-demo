Generate concise, high-level pseudocode directly from the given problem description and original code with these rules:

- Begin with the exact function name(s) from the original code:  
  in function function_name

- Use numbered steps starting at 1, all one-line or tightly combined lines; format steps as:  
  1. x ← 0  
  2. while x < n: x++

- Express logic with a mix of natural language and symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value), using idiomatic syntax (e.g., if x > 0: y++).

- Use meaningful variable names from the original code; abbreviate only to boost compactness without losing clarity.

- Favor natural, succinct phrasing at a moderately high level that emphasizes intent, avoiding low-level detail but remaining unambiguous.

- Combine simple operations separated by commas or semicolons in one line when it enhances brevity and readability.

- Use clear symbolic expressions for conditions, loops, assignments, and returns.

- Omit comments, summaries, blank lines, headers, or explanatory text; output pseudocode lines only.

- Avoid extra parentheses except when necessary for clarity.

- Keep the output dense but readable, minimizing line count while ensuring complete and accurate logic.

- Avoid separator lines or visual breaks.

- Do not shorten the function name or change it.

- Output only the pseudocode, formatted as shown.

Example of desired format and style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A