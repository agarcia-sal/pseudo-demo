Translate the given pseudocode into a fully functional, idiomatic, and Pythonic implementation that faithfully preserves all original function names, logic, and subtle behaviors—including implicit edge cases and input assumptions—with no deviation. Your code must be efficient enough to complete within 5 seconds on typical inputs. Prioritize robust correctness, clarity, maintainability, and runtime performance.

Specifically:

- Use precise type hints for all functions and variables, favoring Python’s built-in typing and standard library types.  
- Include comprehensive, clear docstrings for every function, documenting purpose, parameters, return values, exceptions, and side effects (if any).  
- Handle all potential input types and corner cases as implied or logically inferred by the pseudocode, including empty inputs, invalid inputs when reasonable, and boundary behaviors.  
- Use Pythonic idioms, language features, and standard libraries or well-established third-party packages if they improve clarity, correctness, or performance, but avoid unnecessary complexity.  
- Write clean, concise code favoring readability without sacrificing efficiency. Avoid redundant computation and prefer built-in functions or efficient algorithms when applicable.  
- Adhere strictly to the original function names specified in the pseudocode.  
- Do not include any explanation, commentary, or extra text outside the Python code block.  
- Enclose your entire solution in a single Python code block formatted as below:

```python
# Complete translated implementation respecting all above requirements
```

Your translation will be evaluated on correctness, idiomatic style, coverage of edge cases, documentation quality, and efficiency.