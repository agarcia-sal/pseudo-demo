Translate the given pseudocode into a single, complete, and fully executable Python implementation that:

- Exactly preserves all function names, parameters, control flow, logic, and implicit or explicit edge cases.
- Demonstrates idiomatic, readable, and maintainable Python style aligned with best practices.
- Includes precise type annotations throughout (functions, parameters, variables) using standard typing or `typing_extensions` where helpful.
- Provides comprehensive, clear docstrings adhering to Google style or NumPy style, describing inputs, outputs, exceptions, side effects, and relevant behavior details inferred from the pseudocode.
- Implements robust input validation and error handling consistent with the pseudocode’s implied contracts.
- Optimizes for correctness, clarity, and runtime efficiency within a 5-second execution time limit.
- Leverages built-in Python libraries and trusted third-party packages (e.g., `typing`, `collections`, `itertools`, `math`, `numpy`) as appropriate to enhance performance and reduce verbosity—without adding unnecessary complexity.
- Avoids extraneous commentary, explanations, or separators outside a single Python code block.

Output only the fully realized Python solution enclosed in one Python code block formatted exactly as:

```python
# Your translated, optimized, and well-documented Python code here
```

No additional text, comments outside docstrings, or formatting beyond this code block.