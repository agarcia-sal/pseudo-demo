Generate clear, concise, and high-level pseudocode from the given problem description and original code adhering strictly to these rules:

- Start with the exact function name from the original code:  
  in function function_name

- Use mostly one-line, numbered steps starting at 1, in this exact format:  
  1. x ← 0  
  2. while x < n: x++

- Combine simple, related operations using commas or semicolons only when it enhances compactness without sacrificing clarity.

- Favor natural, idiomatic expressions that are easy to read and understand, using a balanced mix of natural language and standard symbolic operators (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).

- Retain meaningful variable names from the original code; abbreviate only if it shortens lines without causing ambiguity.

- Represent control flow succinctly without unnecessary punctuation: use `if cond:`, `else if cond:`, `for x in y:`, `while cond:` without extra parentheses or braces.

- Express assignments, conditions, loops, and returns clearly and compactly; prefer using one line per step unless clarity demands separate lines.

- Avoid low-level implementation details; convey algorithmic intent at a moderately high abstraction level while ensuring correctness.

- Do not include comments, explanations, summaries, notes, or blank lines; output only pseudocode numbered lines.

- Omit any separators, headings, or additional formatting; keep output focused solely on pseudocode.

- Keep output compact and readable with minimal line count while maintaining accuracy and completeness.

- Use symbolic operators for common operations (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥) consistently but do not overuse symbols at the expense of natural readability.

- When dealing with collections, prefer concise iteration statements like `for x ∈ collection:` or `for i = 0 to n – 1:`.

Aim to produce pseudocode that balances brevity, clarity, and natural expression, optimized for completion within 5 seconds.