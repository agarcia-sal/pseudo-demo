Generate concise, clear, and high-level pseudocode directly from the given problem description and original code with these rules:

- Start with the exact function name(s) from the original code as:  
  in function function_name

- Use sequentially numbered steps starting at 1, formatted like:  
  1. x ← 0  
  2. while x < n: x++

- Write mostly one-line steps combining natural language, standard programming symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), and idiomatic control flow expressions without extra parentheses (e.g., if x > 0: y++).

- Prefer clear, meaningful variable names from the original code; abbreviate only if it shortens lines without losing clarity.

- Combine simple related statements separated by commas or semicolons to keep lines compact yet readable.

- Convey the algorithm’s intent at a moderately high level, using natural language that is direct and unambiguous, avoiding low-level implementation details or verbose explanations.

- Omit all comments, summaries, or notes; output pseudocode lines only.

- Avoid blank lines and separator lines; keep output dense but readable.

- Preserve correctness and completeness while minimizing line count.

- Favor natural expressions for loops, conditions, assignments, and returns, keeping readability paramount.

- Output pseudocode that can be generated in under 5 seconds and is easy to understand.

Example of pseudocode style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A