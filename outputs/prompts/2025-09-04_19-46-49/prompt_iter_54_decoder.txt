Translate the given pseudocode into a fully functional, idiomatic, and highly efficient Python implementation that precisely mirrors the specified function names and logic, including all explicit and implicit behaviors, edge cases, and data handling nuances. Your solution must prioritize correctness, readability, maintainability, and optimal runtime performance (within 5 seconds per execution), leveraging Python’s latest best practices.

Requirements for your translation:

- Preserve original function names exactly as in the pseudocode.
- Rigorously handle all input types and edge cases deducible from the pseudocode and problem context.
- Use precise and comprehensive type annotations for functions, arguments, return types, and relevant variables to enhance clarity and static type checking.
- Provide complete, descriptive docstrings using the Google or NumPy style that explain the function’s purpose, parameters, return values, behavior under edge cases, and possible exceptions.
- Employ concise, idiomatic Python constructs, such as comprehensions, built-ins, `typing` module features (`Sequence`, `Iterable`, `Union`, `TypeVar`, etc.), and relevant standard or well-known third-party libraries if they improve clarity or performance without overcomplicating the solution.
- Avoid unnecessary verbosity or redundant comments; the code itself should be clean and self-explanatory.
- Avoid any extra text or explanation outside the code block; only output the translated code enclosed within a single Python code block.

Conclude your response solely with the completed Python code block as follows:

```python
# Your improved, production-quality Python code implementing the pseudocode here
```