Generate concise, clear, and easy-to-read pseudocode from the given problem description and original code. The pseudocode must:

- Retain the original function names exactly as in the code.
- Be compact and high-level, using natural language enriched with symbolic representations, common abbreviations, and programming idioms.
- Use mostly one-liners and concise numbered steps in this exact format:
  
  1. x ← 0  
  2. while x < n: x++

- Express all variables, control flow, and data manipulations explicitly but briefly.
- Avoid any purpose statements, summaries, explanations, comments, or clarifications—output only the pseudocode.
- Prefer clear variable names from the original code; abbreviate only when it improves brevity without harming understanding.
- Use simple control structures (for, while, if) and operators (←, +, –, *, /, mod, ∈, etc.).
- When applicable, represent complex expressions compactly with parentheses and common shorthand.
- Do not include any section or separator lines.
- Output a minimal number of steps to keep pseudocode succinct but complete.
- Assume a 5-second runtime limit: generate the best clear and idiomatic pseudocode within this constraint.