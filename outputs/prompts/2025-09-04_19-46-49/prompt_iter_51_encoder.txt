Generate concise, natural-language pseudocode from the given problem description and original code with these precise instructions:

- Start with the exact function name(s) from the original code:  
  in function function_name

- Write all steps numbered sequentially from 1, in the exact format:  
  1. statement  
  2. statement

- Use mostly one-line steps combining natural language and familiar symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥) as appropriate to express assignments, conditions, loops, returns succinctly.

- Incorporate meaningful variable names from the original code; abbreviate only if it reduces length without losing clarity.

- Prefer compact, idiomatic control flow without extra punctuation, e.g., if x > 0: y++ or for i in list:

- Emphasize clear, moderately high-level intent using natural language blended with symbols; do not descend to low-level operations or verbose detailed steps.

- Combine simple sequential actions with commas or semicolons on one line only if it improves brevity without hurting readability or introducing ambiguity.

- Omit comments, summaries, explanations, blank lines, or any separators; output only numbered pseudocode lines.

- Avoid extraneous words; keep pseudocode minimal yet complete and unambiguous.

- Use plural or concise expressions for loops when possible (e.g., for x ∈ list, for i = 0 to n-1).

- Return pseudocode within 5 seconds, optimizing clarity, brevity, correctness, and readability.

Example of the expected output style:

in function example_func  
1. let n be integer, read n  
2. let A be vector of integers, size of A ← n  
3. read n elements into A  
4. for i = 0 to n-1  
5. set min_i ← i  
6. for j = i+1 to n-1 if A[min_i] > A[j]: min_i ← j  
7. swap A[i], A[min_i]  
8. print all elements of A