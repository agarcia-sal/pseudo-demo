Translate the provided pseudocode into a fully working, idiomatic, and efficient Python implementation that exactly preserves all function names, logic, and behavior—including implicit details and edge cases—while maximizing code clarity, correctness, robustness, and performance (within a 5-second runtime limit). Your solution must include:

- Precise handling of all input types and edge cases logically inferred from the pseudocode, with defensive checks and meaningful exceptions if applicable.
- Comprehensive, accurate docstrings for each function using standard conventions (Google or NumPy style), clearly describing parameters, return types, side effects, and error conditions.
- Full type annotations on all functions, arguments, and variables where appropriate, ensuring static type compatibility.
- Utilization of Pythonic idioms and best practices that promote readable, maintainable, and performant code; leverage relevant standard libraries or well-known third-party packages when they improve clarity or efficiency without overcomplicating code.
- Meaningful variable names and modular structure where helpful, but do not alter the original function names or algorithmic intent.
- No superfluous comments, explanations, or separators outside the code block. Your entire output must be enclosed in exactly one Python code block:

```python
# Complete translated Python code here
```

Adhere strictly to these instructions, focusing on fidelity to the pseudocode combined with production-quality Python implementation.