Generate concise, clear, and readable pseudocode from the given problem description and original code with these requirements:

- Begin output by stating the exact original function name, formatted as:  
  in function function_name

- Write steps as numbered one-line instructions starting at 1, each line concise but expressive, for example:  
  1. x ← 0  
  2. while x < n: x++

- Prefer compact one-liners using commas or semicolons only if clarity is retained or enhanced

- Use a blend of clear natural language and widely accepted pseudocode symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value)

- Express control flow (if, else if, else, loops, return) idiomatically and naturally; avoid verbose or awkward syntax

- Maintain original meaningful function and variable names; abbreviate sparingly only when it improves line length without losing clarity

- Capture the core logic at a moderately high level—omit low-level implementation details but do not miss essential operations

- Do not include comments, explanations, blank lines, summaries, or any text outside pseudocode lines

- Use plural terms for collections and natural iteration expressions (e.g., "for x in numbers")

- Return the complete pseudocode within 5 seconds, optimized for readability, correctness, and faithful logic representation

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A