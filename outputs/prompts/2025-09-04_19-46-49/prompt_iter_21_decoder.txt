Translate the provided pseudocode into a fully functional, production-quality Python implementation that:

- Maintains exactly the same function names and logic, including all implicit behaviors and edge cases.
- Includes comprehensive and precise type annotations (leveraging `typing` and/or standard library types) to maximize static analyzability.
- Provides detailed, PEP-257-compliant docstrings covering function purpose, inputs (with expected types and constraints), outputs, exceptions raised, and any side effects.
- Uses idiomatic, clean, and readable Python constructs optimized for clarity and performance within a 5-second runtime constraint.
- Handles inputs robustly and validates assumptions where logically necessary, raising proper exceptions if preconditions are violated.
- Employs appropriate and efficient use of Python standard libraries and widely used third-party packages when beneficialâ€”without sacrificing simplicity or readability.
- Avoids redundant code and unnecessary complexity.
- Includes meaningful variable names consistent with Python best practices.
- Omits any extraneous explanations, comments unrelated to clarity, or output outside a single Python code block.

Return only the complete Python code enclosed in triple backticks with the language identifier as shown below:

```python
# Your fully translated, robust, and optimized Python code here
```