Generate concise, clear, high-level pseudocode directly from the given problem description and original code, strictly following these rules:

- Begin with the exact function name from the original code:  
  `in function function_name`

- Use numbered, mostly one-line steps starting at 1, e.g.:  
  `1. x ← 0`  
  `2. while x < n: x++`

- Combine simple, related actions using commas or semicolons when it increases brevity without hurting clarity.

- Use a mix of natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), aiming for succinct, readable expressions that clearly convey intent.

- Choose meaningful variable names from the original code; abbreviate only if it shortens lines and keeps meaning clear.

- Express control flow compactly and idiomatically without unnecessary parentheses or verbose constructs; use syntax like:  
  `if x > 0: y++`

- Represent common data operations idiomatically, such as looping through collections with:  
  `for x ∈ collection`

- Avoid all comments, explanations, blank lines, summaries, headers, or separators—output only pseudocode lines, numbered and in order.

- Keep the pseudocode dense but readable, minimizing line count while ensuring full correctness and completeness.

- Use a natural, conversational high-level style that is easy to read and understand by humans familiar with algorithms, avoiding overly detailed low-level steps.

- Do not introduce any new terminology or extraneous formatting beyond numbered pseudocode lines.

The goal is a compact, natural-language style pseudocode under 5 seconds, perfectly faithful to original functionality, exemplified by:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A