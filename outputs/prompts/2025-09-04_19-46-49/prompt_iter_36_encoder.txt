Generate concise, clear, and high-level pseudocode from the given problem description and original code adhering strictly to these rules:

- Start with the exact function name from the original code on a separate line, formatted as:  
  in function function_name

- Number all pseudocode lines sequentially starting at 1, with this exact format:  
  1. x ← 0  
  2. while x < n: x++

- Write mostly one-line steps that combine simple actions using commas or semicolons only when they improve brevity without sacrificing clarity.

- Use natural, compact language expressing intent at a moderately high abstraction level—no low-level details but remain unambiguous; prefer idiomatic constructs (e.g., if x > 0: y++ rather than verbose conditions).

- Use variables and function names exactly as in the original code; abbreviate only to save space without loss of meaning.

- Employ standard mathematical/logical symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | |) and concise control flow words (if, else if, else, for, while, return).

- Avoid comments, explanations, notes, blank lines, separators, or summaries; output only pseudocode steps.

- Integrate loops, conditionals, assignments, returns, and data structure manipulations as naturally brief one-liners or succinct compound steps to minimize line count yet ensure correctness and completeness.

- Prioritize readability and clarity over extreme compression, but keep output dense and under 5 seconds to generate.

Example style:

in function main  
1. let n be integer  
2. read n  
3. let A be vector of integers, size of A ← n  
4. read n elements into A  
5. for i in 0 to size of A exclusive  
6. set min_i to i  
7. for j = i+1 to size of A exclusive if A[min_i] > A[j]: min_i ← j  
8. swap A[i], A[min_i]  
9. print all elements of A