Generate concise, clear, and easy-to-read pseudocode from the given problem description and original code, adhering to these guidelines:

- Begin with the exact function name from the original code, e.g.,  
  in function function_name

- Use sequentially numbered steps starting at 1, formatted exactly as:  
  1. x ← 0  
  2. while x < n: x++

- Write mostly one-line steps mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), combining simple actions with commas or semicolons only if it improves compactness without sacrificing clarity.

- Use meaningful variable names from original code; abbreviate only when it clearly reduces length while preserving readability.

- Prefer idiomatic, natural-language-like expressions for control flow without unnecessary punctuation, e.g.,  
  if x > 0: y++

- Focus on a high-level, intent-revealing description: avoid verbose low-level details but keep logic unambiguous and complete.

- Minimize lines and tokens while ensuring correctness and clarity. Avoid comments, explanations, summaries, blank lines, or separators.

- Output only the pseudocode, no other text.

- Aim for dense yet readable code that can be generated within 5 seconds.

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A