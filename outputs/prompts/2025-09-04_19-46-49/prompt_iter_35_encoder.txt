Generate concise, clear, and natural high-level pseudocode directly from the original code and problem description, following these requirements:

- Begin with the exact function name from the original code:  
  in function function_name

- Number each pseudocode step sequentially starting at 1 in the style:  
  1. x ← 0  
  2. while x < n: x++

- Use mostly one-line steps combining meaningful variable names and symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), blending natural language with symbolic expressions to express assignments, conditions, loops, and returns succinctly.

- Keep statements compact and at a moderately high level, preferring idiomatic, readable control flow without extra parentheses (e.g., if x > 0: y++), combining related simple operations with commas or semicolons only if it improves brevity without losing clarity.

- Retain original variable names; abbreviate only when it clearly improves conciseness and readability.

- Use natural language phrases to convey intent precisely but avoid low-level details, explanations, comments, notes, or blank lines; output strictly pseudocode lines only.

- Avoid separators or extra formatting beyond line numbering; keep the output dense, minimal in line count, yet complete and unambiguous.

- Return the pseudocode quickly (within 5 seconds), optimized for clarity, brevity, and correctness.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A