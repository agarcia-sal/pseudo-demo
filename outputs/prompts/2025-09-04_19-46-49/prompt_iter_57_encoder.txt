Generate concise, clear, and readable pseudocode from the given problem description and original code with these rules:

- Begin output with the exact function name(s) from the original code, formatted as:  
  in function function_name

- Number all steps sequentially on separate lines, starting at 1, using a compact style with symbolic assignment and control structures, for example:  
  1. x ← 0  
  2. while x < n: x++

- Use a balance of precise natural language and standard pseudocode symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value) to keep steps both elegant and explicit

- Prefer one-line instructions, combining related simple operations with commas or semicolons only if doing so improves clarity and brevity

- Maintain meaningful variable and function names exactly as in the original code, abbreviating only if it clearly simplifies lines without ambiguity

- Express control flow idiomatically and straightforwardly (e.g., if x > 0: y++), avoiding unnecessary verbosity or over-detailed low-level steps, while ensuring all essential logic is represented accurately

- Use plural nouns and natural language terms for collections and iterations when it enhances readability, e.g., “for x in numbers”

- Do not include comments, explanations, summaries, blank lines, separator lines, or any text outside pure pseudocode

- Return the pseudocode swiftly (within 5 seconds), optimized for a compact, readable, faithful representation of the core algorithm

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive: set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A