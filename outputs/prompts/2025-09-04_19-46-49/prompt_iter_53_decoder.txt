Translate the provided pseudocode into a fully functional, clean, and highly efficient Python implementation that **matches the original function name exactly** and retains every detail of the logic—including all implicit behaviors, edge cases, and expected input handling—without altering the algorithm's intent. Your solution must be production-quality, leveraging Python best practices:

- Use precise and comprehensive **type annotations** for all functions, parameters, and relevant variables.
- Include detailed **docstrings** describing the function’s purpose, parameters, return types, raised exceptions (if any), side effects, and behavior on edge cases.
- Optimize for clarity, readability, and performance within a **5-second execution budget**, favoring built-in and well-established third-party libraries when they improve robustness or efficiency.
- Use idiomatic Python constructs and patterns reflecting modern, maintainable code.
- Gracefully handle inputs inferred from the pseudocode, including empty inputs and boundary conditions.
- Avoid extraneous explanations—deliver **only the complete Python code** wrapped in a single code block with the exact function signature as in the pseudocode.

Output your entire solution enclosed strictly like this:

```python
# Full, rigorously tested Python code implementing the pseudocode
```

No additional text, formatting lines, or separators before or after the code block.