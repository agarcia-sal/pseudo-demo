Generate concise, compact pseudocode from the given problem description and original code adhering strictly to these rules:

- Start with the exact function name from the original code as:  
  in function function_name

- Use numbered steps beginning at 1, in the exact format:  
  1. x ← 0  
  2. while x < n: x++

- Prefer single-line statements that blend natural language and intuitive symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), minimizing line count while preserving precision.

- Express assignments, conditions, loops, and returns clearly but tersely, combining multiple simple operations on one line separated by commas or semicolons only if this maintains readability.

- Retain meaningful original variable names; abbreviate only when it shrinks lines without losing clarity or introducing ambiguity.

- Write pseudocode at a moderate-high level of abstraction using natural language phrasing to convey intent clearly—avoid verbose detail yet remain exact.

- Use idiomatic, minimalistic flow control expressions without redundant parentheses or keywords, e.g., if x > 0: y++.

- Exclude any comments, explanations, notes, blank lines, or section dividers; output solely pseudocode lines.

- Keep output dense and readable with a strong emphasis on compactness, clarity, and correctness to maximize informativeness under a 5-second generation limit.

Example style:

in function example  
1. let n be integer  
2. read n  
3. let A be vector of integers, set size of A = n  
4. read n elements into A  
5. for i in 0 to n-1:  
6. set min_i to i  
7. for j = i+1 to n exclusive: set min_i to j if A[min_i] > A[j]  
8. swap A[i], A[min_i]  
9. print all elements of A