Generate concise, high-level, and easy-to-read pseudocode directly from the given problem description and original code abiding by these rules:

- Begin with the exact function name(s) from the original code:  
  in function function_name

- Use mostly numbered one-line steps mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).

- Express variables, assignments, conditions, loops, and returns succinctly; prefer one-liners and combine simple steps with commas or semicolons when it enhances brevity without losing clarity.

- Use meaningful variable names from the original code; abbreviate only if it shortens lines and keeps clarity.

- Favor idiomatic control flow expressions without extra parentheses, e.g., if x > 0: y++.

- Write compact, natural language that expresses intent clearly at a moderately high level—avoid low-level detail but remain unambiguous.

- Avoid comments, explanations, notes, summaries, blank lines, or separators; output only pseudocode lines.

- Number all steps sequentially starting at 1, using this exact style and format, for example:

1. x ← 0  
2. while x < n: x++

- Keep output dense but readable, minimizing line count while ensuring accuracy and completeness.

- The goal is to return the pseudocode under 5 seconds, optimized for clarity, conciseness, correctness, and natural high-level expression.

Example of desired pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A