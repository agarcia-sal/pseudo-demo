Translate the provided pseudocode into a fully functional, idiomatic, and efficient Python implementation that precisely mirrors all function names, logic, and implicit behaviorsâ€”including handling all inferred edge cases and input types robustly. Your code must be production-quality, emphasizing clarity, correctness, maintainability, and runtime efficiency within a 5-second execution limit.

Specifically, your translation should:

- Retain the exact function names as given in the pseudocode.
- Include comprehensive type annotations everywhere (function signatures, variables, and return types).
- Provide clear, well-structured docstrings following the NumPy or Google style, documenting purpose, parameters (with types and descriptions), return values, exceptions (if any), and side effects.
- Use Pythonic idioms, standard libraries, and widely adopted third-party libraries where they clearly improve readability or performance without adding undue complexity.
- Correctly handle all corner cases and input variations implied by the pseudocode (e.g., empty inputs, invalid types, boundary conditions).
- Be self-contained and avoid extraneous text or explanations outside the single Python code block.
- Optimize for clarity and runtime performance equally; prefer vectorized or algorithmically optimal solutions when applicable.

Provide the complete translated solution enclosed strictly within a single Python code block as follows:

```python
# Your precise, well-documented, robust Python implementation here
```