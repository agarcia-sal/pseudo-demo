Generate direct, concise, and high-level pseudocode strictly from the given problem description and original code with these rules:

- Begin output with exactly:  
  in function function_name

- Number all steps sequentially starting from 1, using this format (no extra spacing or punctuation):  
  1. x ← 0  
  2. while x < n: x++

- Use mostly single-line steps combining natural language and symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value).

- Prefer compact, idiomatic, and unambiguous expressions for assignments, conditionals, loops, returns; combine simple actions with commas or semicolons only if it improves succinctness without loss of clarity.

- Keep variable names from the original code; abbreviate only if clarity and brevity improve.

- Use more natural language and high-level constructs to capture intent clearly, avoiding low-level detail and verbosity.

- Handle control flow succinctly:  
  - Use “if cond:” without parentheses, "else if" (not "elif"), and inline guards where appropriate.  
  - Use “for var ∈ collection:” or “for i = start to end exclusive:”.

- Avoid comments, explanations, blank lines, separators, or summaries—output only the numbered pseudocode lines.

- Output dense but readable pseudocode, minimizing total lines while preserving correctness and full coverage.

- The goal is to produce the best balance of clarity, natural expressiveness, brevity, and accuracy under 5 seconds.

Example of the expected style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i ∈ 0 to size of A exclusive  
	set min_i to i  
	for j = i+1 to size of A exclusive  
		set min_i to j if A[min_i] > A[j]  
	swap A[i], A[min_i]  
print all elements of A