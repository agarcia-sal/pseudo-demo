Translate the provided pseudocode into a fully functional, production-quality Python implementation that exactly preserves the original function name(s) and core logic, including any implicit behaviors and edge cases. Your code must:

- Prioritize correctness, efficiency, and clarity, executing well within a 5-second runtime limit.
- Use Python 3.10+ features and type hints comprehensively on all functions, parameters, and variables where appropriate.
- Include detailed, clear docstrings following the Google style or NumPy style, documenting purpose, inputs (with types and expected constraints), outputs, exceptions (if any), and side effects.
- Handle all plausible input types and edge cases inferred from pseudocode or naturally anticipated scenarios.
- Use idiomatic, Pythonic constructs, leveraging standard library modules or widely used third-party packages only when they enhance clarity, maintainability, or performance without adding unnecessary complexity or dependencies.
- Implement robust input validation or error handling only if clearly implied by the pseudocode or necessary for correctness.
- Avoid redundant code or overly verbose explanationsâ€”only produce the final source code.
- Enclose your entire answer strictly within a single Python code block with ```python ... ``` delimiters.

Do not add any text outside the code block. Ensure the output is ready to run and easy to understand for a developer revisiting the code later.