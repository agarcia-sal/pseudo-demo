Generate concise, clear, and easy-to-read pseudocode based solely on the given problem description and original code. The pseudocode must:

- Use the exact function name(s) as in the original code.
- Be compact and high-level, blending natural language and common programming symbols.
- Present steps mostly as concise one-liners or succinct numbered instructions in this precise format:

  1. x ← 0  
  2. while x < n: x++

- Express all variables, control flows, and data operations explicitly but briefly, avoiding verbosity.
- Favor meaningful variable names from the code; abbreviate only when it shortens clearly without losing meaning.
- Use simple, idiomatic control structures (if, for, while) and operators (←, +, –, *, /, mod, ∈, etc.) with parentheses and shorthand to keep expressions compact.
- Organize loops and conditionals naturally, allowing multiple short statements per line if it improves clarity and brevity.
- Omit comments, explanations, summaries, or any extraneous text—output only the pseudocode.
- Avoid any separators, headings, or section breaks.
- Minimize line count while maintaining completeness and readability.
- Aim for a style similar to this example:

  in function main  
  let n be integer  
  read n  
  let A be vector of integers  
  set size of A = n  
  read n elements into A  
  for all elements in A  
  set min_i to i  
  for j = i + 1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
  print all elements of A

Generate the clearest, most idiomatic pseudocode within a 5-second limit.