Translate the provided pseudocode into a complete, precise, and production-ready Python implementation that strictly preserves all original function names, control flow, and logic—including all implicit details and edge cases. Your solution must prioritize correctness, readability, and runtime efficiency within a 5-second limit.

Requirements:

- Implement all inferred functionality exactly as described or implied by the pseudocode.
- Use descriptive, comprehensive docstrings following the Google or NumPy style that document purpose, parameters (with types), return types, raised exceptions (if any), and side effects.
- Include full and accurate Python type annotations for all function signatures and variable declarations where appropriate.
- Employ Pythonic idioms, idiomatic constructs, and standard or widely adopted third-party libraries when they improve clarity, robustness, or performance without adding unnecessary complexity.
- Handle all input types and corner cases explicitly, including validation if the pseudocode or problem context suggests it.
- The function name(s) **must be identical** to those in the pseudocode.
- Return exactly the output(s) implied by the pseudocode.
- Write clean, well-structured, and maintainable code aligned with best professional practices.
- Do not include any explanation, reasoning, comments unrelated to code clarity, or any output other than the code itself.

Output your entire solution enclosed only in one Python code block with triple backticks and “python” after the opening backticks, as shown below:

```python
# Your complete, idiomatic, fully annotated Python implementation here
```