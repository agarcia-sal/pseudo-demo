Generate concise, natural, and high-level pseudocode directly from the given problem description and original code following these rules:

- Begin exactly with:  
  in function function_name

- Use sequentially numbered steps starting at 1, each typically one line. Combine related simple actions with commas or semicolons only if it improves brevity without losing clarity.

- Express assignments, conditions, loops, and returns succinctly using common symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥) and idiomatic control flow phrasing without extra parentheses, e.g., if x > 0: y++.

- Prefer meaningful variable names from original code; abbreviate only to shorten lines without losing readability.

- Use clear, compact natural language that conveys intent at a moderately high abstraction level—avoid low-level detail but remain unambiguous.

- Favor one-liners for simple branches and loops, but indent nested structures by one tab to show hierarchy.

- Use standard, concise constructs for iteration, e.g., for x ∈ collection, for i = start to end exclusive.

- Do not include comments, explanations, notes, summaries, blank lines, or separators; output only numbered pseudocode lines.

- Keep output minimal and readable—minimize line count while ensuring correctness, completeness, and clarity.

Example style:

in function main  
1. let n be integer  
2. read n  
3. let A be vector of integers, size of A ← n  
4. read n elements into A  
5. for i in 0 to size of A exclusive  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
6. print all elements of A