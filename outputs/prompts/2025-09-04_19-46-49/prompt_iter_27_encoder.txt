Generate concise, high-level pseudocode from the given problem description and original code obeying these rules:

- Start with the exact function name(s) as in the original code:  
  in function function_name

- Write all steps numbered sequentially from 1, using the exact format:  
  1. x ← 0  
  2. while x < n: x++

- Use mostly one-line numbered steps combining natural language and symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, ++, --) to express assignments, conditions, loops, returns succinctly and clearly.

- Prefer compact, natural, slightly high-level language that clearly conveys intent; avoid low-level detail without losing precision or correctness.

- Use meaningful variable names from the original code; abbreviate only if it improves brevity and clarity.

- Favor idiomatic control flows without extraneous parentheses or keywords, e.g., if x > 0: y++.

- Combine simple operations with commas or semicolons in one line when it enhances brevity but keeps readability and unambiguity.

- Avoid comments, explanations, summaries, blank lines, or separators; output only the pseudocode lines.

- Keep pseudocode dense but easy to understand, minimizing line count while preserving accuracy and completeness.

- The output must be purely pseudocode, automatically optimized for clarity, conciseness, and correctness, fitting within 5 seconds runtime.

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A