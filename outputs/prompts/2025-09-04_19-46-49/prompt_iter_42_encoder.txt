Generate concise, compact, and easy-to-read pseudocode directly from the given problem description and original code, abiding by these rules:

- Begin with the exact function name(s) from the original code:  
  in function function_name

- Use numbered one-line steps starting at 1 in this exact style:  
  1. x ← 0  
  2. while x < n: x++

- Prefer mostly one-liners mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), combining simple assignments and control flow statements with commas or semicolons only if it shortens the pseudocode without losing clarity.

- Express variables, assignments, conditions, loops, and returns succinctly and idiomatically; avoid parentheses except for clarity only when absolutely necessary.

- Use meaningful variable names from the original code; abbreviate only if it improves conciseness and preserves clarity.

- Write at a moderately high level, emphasizing intent over implementation detail; avoid low-level mechanics but remain precise and unambiguous.

- Use natural language phrasing when it enhances readability, e.g., “for all x in list,” “if x > 0: y++,” “append x to list,” “return value.”

- Represent control flow compactly, e.g., use `if condition: action` or `for x ∈ collection:` inline when possible.

- Do not include any comments, explanations, notes, summaries, blank lines, or separators; output only numbered pseudocode lines.

- Minimize total lines while ensuring completeness and correctness; prioritize clarity and brevity equally.

- The output must fit within a 5-second generation time and reflect a natural, consistent style.

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A