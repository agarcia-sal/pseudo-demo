Generate clear, concise, and high-level pseudocode from the given problem description and original code with these rules:

- Start output with the exact function name(s) from the original code, using this format:  
  in function function_name

- Write all steps as sequentially numbered one-line instructions, starting at 1, using the exact style:  
  1. x ← 0  
  2. while x < n: x++

- Prefer compact one-liners that combine related simple operations with commas or semicolons only if clarity is maintained or improved

- Use a mix of precise natural language and standard pseudocode symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value)

- Express variables, assignments, conditions, loops, and returns clearly and idiomatically; avoid unnecessary parentheses or verbose syntax

- Preserve original, meaningful variable and function names; abbreviate only if it shortens lines without losing clarity or intent

- Capture intent at a moderately high level—avoid low-level detail but do not omit essential logic; focus on readability and precision over raw brevity

- Do not include comments, explanations, summaries, blank lines, section separators, or non-pseudocode text

- Keep flow control idiomatic and natural (e.g., if x > 0: y++ rather than cumbersome expressions)

- Use plural natural-language terms for collections and iteration when clear (e.g., “for x in numbers”)

- Return the complete pseudocode within 5 seconds, optimized to balance conciseness, correctness, readability, and faithful logic representation

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for x in A  
 set min_i to x’s index  
 for j = min_i + 1 to length of A: if A[min_i] > A[j]: min_i ← j  
 swap A[min_i], A[x’s index]  
print all elements of A