Translate the provided pseudocode into a fully functional, efficient, and idiomatic Python implementation that:

- Strictly maintains all original function names, logic, and any subtle or implicit behaviors, including comprehensive handling of inferred edge cases.
- Includes complete and precise type annotations for all functions, parameters, variables, and return values, using Python’s typing module or appropriate third-party types when beneficial.
- Provides detailed, clear docstrings formatted according to the NumPy or Google style, covering function purpose, all parameters (with types and expected ranges), return values, raised exceptions, and any side effects or assumptions.
- Uses Python’s best practices and idioms to ensure readability, maintainability, and optimal runtime performance (aiming to run within 5 seconds), leveraging the standard library or well-established third-party libraries as needed without overcomplicating the code.
- Is robust: handles invalid inputs gracefully by raising appropriate exceptions where the pseudocode implies or where reasonable, ensuring no silent failures or ambiguous behavior.
- Avoids any extraneous text outside the Python code block.

Output the entire solution strictly inside a single, properly formatted Python code block as follows:

```python
# Your fully translated, robust, performant, and well-documented Python code here
```