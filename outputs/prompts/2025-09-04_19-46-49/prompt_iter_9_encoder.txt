Generate clear, concise, and compact pseudocode directly from the given problem description and original code with these rules:

- Start with the exact function name(s) as in the original code:  
  in function function_name

- Use mostly numbered one-line steps mixing simple natural language and common programming symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).

- Express variables, assignments, conditions, loops (for, while), and returns succinctly and explicitly without verbosity.

- Prefer meaningful variable names from the original code; abbreviate only if clarity or brevity improves.

- Combine multiple simple steps on one line separated by commas or semicolons if it reduces line count and keeps readability.

- Use standard idiomatic control flow syntax without unnecessary parentheses, e.g., if x > 0: y++.

- Write compact, high-level natural language for operations—favor readability over low-level detail while maintaining unambiguity.

- Output only pseudocode lines without any explanation, notes, comments, summaries, blank lines, or separators.

- Keep the output dense but easy to read; minimize total line count while ensuring correctness and completeness.

- Follow exactly this numbering format and style example:

1. x ← 0  
2. while x < n: x++

Example pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Return the pseudocode as fast as possible, targeting under 5 seconds, optimized for brevity, clarity, natural high-level expression, and correctness.