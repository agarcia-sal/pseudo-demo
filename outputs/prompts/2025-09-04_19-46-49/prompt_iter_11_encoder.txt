Generate concise, high-level pseudocode directly from the given problem description and original code, following these instructions precisely:

- Start by stating the exact function name as in the original code, e.g.,  
  in function function_name

- Write pseudocode as numbered, mostly one-line steps, mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).

- Use meaningful variable names from the original code; abbreviate only if it improves brevity without losing clarity.

- Express all variables, assignments, conditions, loops, and return statements succinctly; combine simple related operations on the same line separated by commas or semicolons if it reduces line count without sacrificing clarity.

- Use idiomatic, natural-language-style control flow without superfluous parentheses or verbosity, for example:  
  if x > 0: y++

- Favor compact, clear expressions that emphasize the intent at a moderate abstraction level—avoid low-level implementation details but produce unambiguous steps.

- Avoid comments, explanations, notes, summaries, blank lines, or separators; output only the pseudocode lines.

- Number all steps sequentially starting from 1, using this exact style and format (no extra indentation at the start):  
  1. x ← 0  
  2. while x < n: x++

- Keep the output dense but readable, minimizing total line count while fully preserving correctness and completeness.

- Use natural language terms like “for all elements in”, “append to”, “set size of”, “read into”, where appropriate for clarity and conciseness.

- The goal is pseudocode that is succinct, intuitive, readable, and returned within 5 seconds.

Example of the expected pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A