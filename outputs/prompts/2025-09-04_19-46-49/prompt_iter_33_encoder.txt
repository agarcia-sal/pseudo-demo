Generate concise, clear, and compact pseudocode strictly from the given problem description and its original code, adhering to these rules:

- Start exactly with:  
  in function function_name

- Use numbered steps starting at 1, in the exact format:  
  1. x ← 0  
  2. while x < n: x++

- Prefer mostly one-liners mixing natural language with standard concise symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), abbreviations only if they keep clarity and brevity.

- Express variables, assignments, loops, conditions, and returns at a moderately high level, emphasizing intent and readability without verbose detail; combine simple operations in one line where natural.

- Use meaningful names from the original code; do not rename variables arbitrarily but abbreviate sensibly.

- Write idiomatic control flows without extraneous parentheses (e.g., if x > 0: y++).

- Avoid comments, explanations, notes, summaries, blank lines, or separators — output pseudocode lines only.

- Keep output minimal in line count but fully accurate and unambiguous.

- The pseudocode should read naturally and intuitively, balancing compactness and clarity, suitable for quick understanding and easy verification.

- Do not output anything except the pseudocode conforming precisely to these rules.

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A