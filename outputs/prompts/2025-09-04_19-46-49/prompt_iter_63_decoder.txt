Translate the provided pseudocode into a fully functional, production-quality Python implementation that:

- **Strictly preserves** the original function names and all logic—including implicit behavior and edge cases—inferred from the pseudocode.
- Produces **highly readable, maintainable, and efficient** code tailored to execute **within 5 seconds** for typical inputs.
- Utilizes idiomatic Python 3.10+ syntax and constructs, including:
  - Precise **type annotations** for all functions and variables.
  - Comprehensive, clear, and concise **docstrings** following the Google or NumPy style documenting purpose, parameters, return values, exceptions, and edge cases.
  - Appropriate use of standard library modules or widely used third-party packages (e.g., `typing`, `collections`, `itertools`, `math`, or `numpy`) to enhance correctness, readability, and performance without overcomplicating the solution.
- Implements robust **input validation or error handling** only when strongly implied by the pseudocode or standard assumptions; otherwise, trust input validity.
- Avoids redundant code and verbose comments; focus on clarity through code structure and naming.
- Does **not** include any explanatory text or formatting outside the Python code block.

Deliver the final solution enclosed in a single Python code block as follows:

```python
# Your complete, optimized, and idiomatic Python translation here
```

Ensure the resulting code matches the pseudocode’s semantics perfectly and is immediately usable and testable.