Generate concise, readable pseudocode directly from the original code and problem description with these precise rules:

- Begin with the exact function name from the original code, as:  
  in function function_name

- Number all steps sequentially starting at 1, using this style and format:  
  1. x ← 0  
  2. while x < n: x++

- Use mostly one-line numbered steps mixing clear natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value). Combine closely related simple operations with commas or semicolons to improve compactness without losing clarity.

- Prefer meaningful variable names taken from the original code; abbreviate sparingly only if it improves brevity without hurting clarity.

- Express control flow idiomatically and succinctly (if condition: ..., for x ∈ y:, while condition: ...), avoiding unnecessary parentheses or verbose constructs.

- Emphasize high-level intent in natural language, avoiding low-level implementation detail but remain fully unambiguous and accurate.

- Omit comments, explanations, summaries, headers, blank lines, or separators; output pseudocode lines only.

- Keep total line count minimal while ensuring completeness and correctness.

- Use natural expressions for common operations (e.g., append x to list, return value) and avoid redundant syntax.

- The goal is to produce elegant, dense pseudocode in under 5 seconds that balances clarity, compactness, and precision.

Example output style to follow exactly:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A