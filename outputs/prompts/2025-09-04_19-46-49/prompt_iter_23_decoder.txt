Translate the provided pseudocode into a fully functioning, clean, and efficient Python implementation that exactly preserves the original function names, logic, and all implicit behaviors—including all edge cases and input variations. Your solution should:

- Use precise and idiomatic Python 3 syntax with type annotations for all function signatures and variables where relevant.
- Include comprehensive, clear docstrings following the Google or NumPy style that describe the function’s purpose, parameters (with types), return values (with types), exceptions raised, and any side effects.
- Handle all inferred input types robustly and cover all potential edge cases, including empty inputs and unusual but valid scenarios.
- Optimize for correctness, readability, and maintainability while respecting a 5-second runtime constraint.
- Leverage the Python Standard Library and widely used third-party libraries (if they meaningfully improve clarity or performance) without overcomplicating the solution.
- Use Pythonic idioms and constructs to produce concise, expressive, and performant code.
- Avoid any extraneous commentary or explanation—only output the final code within a single Python code block.

Output only the final code enclosed exactly as follows (with no additional text or delimiters):

```python
# Your complete, polished Python code here
```