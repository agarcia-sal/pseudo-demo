Generate concise, readable, and high-level pseudocode from the given original code and problem description with these rules:

- Begin output with:  
  in function function_name  
  where function_name is exactly as in the original code

- Number all steps sequentially starting at 1, each step on one line, following this format exactly:  
  1. x ← 0  
  2. while x < n: x++

- Prioritize compact one-liners that merge simple related operations using commas or semicolons only if clarity improves or remains unaffected

- Use a balanced mix of clear natural language and conventional pseudocode symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | | for absolute value)

- Express variables, assignments, conditions, loops, and returns clearly and idiomatically—avoid extra parentheses, verbose syntax, or awkward phrasing

- Preserve original, meaningful names for functions and variables; abbreviate only if it shortens lines without losing meaning or intent

- Capture all essential logic at a moderately high conceptual level—avoid trivial low-level detail and redundancy but do not omit or paraphrase critical steps

- Iterate over collections naturally using plural or collective terms where meaningful (e.g., “for x in numbers”)

- Return only the pseudocode—no comments, summaries, explanations, blank lines, or decorative separators

- Optimize for concise readability, precision, faithfulness to original logic, and a balance of natural language and symbols, all within a 5-second response time

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive: set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A