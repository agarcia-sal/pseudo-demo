Translate the given pseudocode into a fully functional, idiomatic, and optimized Python module that precisely implements the logic, function names, and behavior describedâ€”including all implicit cases and edge behaviors. Your translation should demonstrate a deep understanding of the problem by producing robust, maintainable, and performant code that meets or beats reasonable industry standards and runs within a 5-second execution constraint.

Your solution must:

- Preserve all original function names and their exact intended logic.
- Handle all input types and edge cases explicitly or by inference from the pseudocode.
- Include comprehensive, clear docstrings explaining function purpose, arguments (with types), return values, raised exceptions, and side effects.
- Provide full type annotations (PEP 484/526 style) for all function signatures and variables where appropriate, using `typing` and standard library types.
- Use Pythonic idioms and constructs (e.g., comprehensions, generators, context managers, built-ins, and standard or well-maintained libraries), prioritizing clarity and correctness without sacrificing efficiency.
- Raise relevant exceptions if the pseudocode implies error conditions or invalid inputs.
- Avoid any extraneous commentary, explanation, or output outside the single, contiguous Python code block.
- Explicitly include necessary imports at the top.
- Structure code cleanly with appropriate helper functions or classes if needed, maintaining single-responsibility.

Output your entire solution enclosed in a single Python code block exactly as below:

```python
# Your rigorously tested, idiomatic, thoroughly typed, and well-documented Python solution here
```