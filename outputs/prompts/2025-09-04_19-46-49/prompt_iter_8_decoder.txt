Translate the given pseudocode into a fully functional, clean, and highly idiomatic Python implementation that exactly preserves the original function names, control flow, logic, and all implicit behaviors including edge cases. Your solution should focus on correctness first, then on maximizing clarity, robustness, and performance within a 5-second runtime constraint.

Requirements:
- Implement the solution as a single, self-contained Python snippet enclosed strictly within a ```python ... ``` code block.
- Retain all function names exactly as given in the pseudocode.
- Use precise and comprehensive Python type annotations for function signatures and internal variables wherever appropriate.
- Provide clear, informative docstrings for all functions and classes, documenting their purpose, parameters with types, return types, raised exceptions if any, and any side effects or assumptions.
- Handle all inputs and edge cases strongly inferred from the pseudocode, including empty inputs, boundary values, and invalid input scenarios where relevant.
- Prefer Python built-in functions, data structures, standard library modules, or well-known third-party packages if they improve clarity or efficiency without adding unnecessary complexity.
- Use idiomatic Python patterns, list comprehensions, generator expressions, context managers, and appropriate error handling to make the code clean, concise, and maintainable.
- Avoid redundant code, unneeded comments, or extraneous text. Include only the final working Python code.
- Do not include separators or explanatory text outside the code block.

Your final submission MUST be ONLY formatted like this:

```python
# Your complete, polished, and tested Python code implementing the pseudocode here
```

This approach guarantees your translated code is production-quality, easily understood by other developers, and optimized for the given constraints.