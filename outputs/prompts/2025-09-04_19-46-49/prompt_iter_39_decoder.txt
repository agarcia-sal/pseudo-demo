Translate the pseudocode into a fully working, efficient, and idiomatic Python implementation that **exactly preserves the original function names, signatures, control flow, and behavior, including all edge cases and implicit details**. Your solution should focus on:

- Correctness: fully handle all input types and edge conditions clearly implied by the pseudocode.
- Readability & maintainability: use expressive variable names, Pythonic idioms, and concise structure.
- Explicitness: provide comprehensive type annotations for functions and variables wherever meaningful.
- Documentation: include clear, detailed docstrings describing purpose, arguments, return values, exceptions, and side effects.
- Performance: optimize runtime efficiency within a 5-second execution timeout.
- Robustness: validate inputs when applicable, raising appropriate exceptions if necessary.
- Use of standard Python libraries or well-known third-party packages is allowed to improve clarity or performanceâ€”but do so only if it genuinely benefits the implementation and keeps it straightforward.

Your final output must:

- Contain **only** the Python code inside a single triple-backtick code block labeled `python`.
- Preserve the function names exactly as stated in the pseudocode.
- Avoid any extra commentary, separators, or explanation outside the code block.

Example format:

```python
# Your fully translated, optimized, idiomatic Python code here
```

Provide the best-possible interpretation and implementation of the pseudocode adhering to these guidelines.