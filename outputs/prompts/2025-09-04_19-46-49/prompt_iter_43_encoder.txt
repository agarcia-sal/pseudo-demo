Generate concise, high-level pseudocode directly from the given problem description and original code with the following rules:

- Start with the exact function name as in the original code, formatted:  
  in function function_name

- Use mostly numbered, succinct one-line steps mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).

- Express variable declarations, assignments, conditions, loops, and returns compactly; combine simple related actions with commas or semicolons to minimize lines but keep clarity and unambiguity.

- Use meaningful variable names from the original code; abbreviate only if it improves compactness without losing clarity.

- Write control flow lines idiomatically, omit unnecessary parentheses, e.g., if x > 0: y++.

- Keep the language natural, intent-focused, moderately high-level—avoid low-level detail and avoid verbosity.

- Do not add comments, explanations, notes, summaries, blank lines, or separators; output pseudocode lines only.

- Number every step sequentially starting at 1, following this style exactly:  
  1. x ← 0  
  2. while x < n: x++

- Avoid line wrapping; keep lines concise but readable; prefer one-liners unless multi-line is necessary for clarity.

- Use symbolic operators whenever appropriate to improve compactness and precision.

- The output pseudocode should be easily readable, pure pseudocode, and no extraneous text.

- The goal is to produce clear, concise, and precise pseudocode under 5 seconds optimized for brevity, natural style, correctness, and high-level clarity.

Example:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A