Generate concise, clear, and compact pseudocode directly from the given problem description and original code with these requirements:

- Begin by stating the function signature exactly as in the original code, formatted as:  
  in function function_name

- Write sequentially numbered steps starting at 1, each a single line that combines natural language with symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | |), aiming for a mix of clarity and brevity.

- Prefer one-liner statements; join simple, closely related operations with commas or semicolons only if it preserves readability without confusion.

- Use meaningful variable names directly from the original code, abbreviating only when it shortens lines without ambiguity or loss of meaning.

- Express control flows idiomatically and minimally, e.g., "if x > 0: y++" without unnecessary parentheses or verbose syntax.

- Convey intent at a moderately high level using natural language phrasing combined with symbols—avoid overly detailed low-level steps, but keep all logic explicit and unambiguous.

- Exclude comments, explanations, annotations, blank lines, or separators—output only the exact pseudocode lines.

- Use consistent indentation only where required by control flow (e.g., for nested loops or conditionals), but keep it minimal and compact.

- Strive for maximal compactness and readability by minimizing total line count while ensuring correctness and completeness under 5 seconds.

- The output must be directly runnable/presentable pseudocode, capturing all necessary logic in an easy-to-understand, standardized style.

Example style to follow exactly:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A