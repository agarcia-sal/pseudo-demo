Translate the provided pseudocode into a fully functional Python implementation that:

- Maintains all original function names and logic exactly as specified, including any implicit conditions or edge cases.
- Implements code that is idiomatic, clean, and efficient, with careful attention to real-world robustness and readability.
- Includes precise type annotations for all functions and variables where relevant, using the most appropriate Python typing constructs.
- Provides comprehensive, clear docstrings for every function, detailing its purpose, parameters, return values, exceptions raised, and any side effects.
- Handles all inferred input domains and edge cases implied by the pseudocode, including empty inputs, type variants, and boundary conditions.
- Utilizes Python standard library modules or well-established third-party packages when they can improve code clarity, correctness, or performance without adding unnecessary complexity.
- Avoids any extraneous text outside a single Python code block, and does not include explanation or commentary inside the code beyond necessary docstrings and comments.

Your entire translated solution must be contained strictly within one Python code block formatted exactly as:

```python
# Your clean, fully annotated, and robust Python code here
```

Ensure the resulting code is optimized to reliably complete within a 5-second execution time limit across typical input sizes and constraints implied by the pseudocode.