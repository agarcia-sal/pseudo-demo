Generate clear, concise pseudocode from the given problem and original code as follows:

- Start with the exact function name(s) from the original code, prefixed by  
  in function function_name

- Number each step sequentially from 1, using this style exactly:  
  1. x ← 0  
  2. while x < n: x++

- Write mostly one-line steps combining natural language with common symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥, | |), using standard abbreviations only if they improve brevity without losing readability

- Keep control structures idiomatic and compact, e.g.  
  if x > 0: y++  
  for i = 0 to n-1:

- Employ meaningful variable names from the original code; abbreviate only when safe and clear

- Express variables, assignments, decisions, loops, and returns succinctly—prefer merging simple actions with commas or semicolons on a single line when clarity permits

- Use moderate natural language to convey intent at a high level without unnecessary low-level detail, avoiding verbosity or ambiguity

- Omit comments, explanations, notes, blank lines, or any output besides pseudocode lines; do not add summaries or separators

- Make the pseudocode compact yet fully accurate and complete, minimizing lines but preserving readability and correctness

Example pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
	set min_i to i  
	for j = i+1 to size of A exclusive  
		set min_i to j if A[min_i] > A[j]  
	swap A[i], A[min_i]  
print all elements of A