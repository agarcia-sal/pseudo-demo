Generate concise, clear, and high-level pseudocode directly from the given problem description and original code, following these instructions:

- Start with the exact function name(s) from the original code:  
  in function function_name

- Use sequentially numbered steps starting at 1, formatted exactly as:  
  1. x ← 0  
  2. while x < n: x++

- Prefer mostly one-line steps mixing natural language and standard symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥), combining simple actions with commas or semicolons only if it improves brevity without reducing clarity.

- Write variable declarations, assignments, loops, conditions, and returns succinctly, emphasizing readability and intent using idiomatic, concise phrasing (e.g., if x > 0: y++), avoiding parentheses unless necessary.

- Keep the level moderately high: clear and unambiguous yet avoid low-level or verbose detail; express intent naturally with minimal words.

- Use meaningful variable names from the original code; abbreviate only when it shortens lines without confusing meaning.

- Do not add comments, explanations, summaries, blank lines, or separators. Output only pseudocode lines.

- Structure loops and conditionals compactly, e.g.:  
  for i ∈ list: if cond: action

- Avoid redundant variable initializations if they can be merged into subsequent steps without losing clarity.

- Minimize total line count while preserving completeness and correctness.

- The result should be easy to read, natural, and compact, targeting a balance between brevity and clarity to fit under a 5-second generation time.

- Do not output anything besides the pseudocode lines.

Example style your output should follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A