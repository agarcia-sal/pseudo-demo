Generate concise, clear, and compact pseudocode directly from the given problem description and original code. The pseudocode must:

- Begin with the exact function name(s) from the original code using the format:  
  in function function_name  
- Use mostly one-line numbered steps mixing simple natural language with standard programming symbols (←, +, –, *, /, mod, ∈, =, ≠, <, >, ≤, ≥).  
- Express variables, assignments, conditions, loops (for, while), and returns succinctly and explicitly but avoid verbose or redundant wording.  
- Prefer meaningful variable names from the original code; abbreviate only if clarity is preserved or improved.  
- Allow multiple simple actions on one line separated by commas or semicolons if it reduces total lines without hurting readability.  
- Use idiomatic control flow with parentheses omitted if unambiguous, e.g., if x > 0: y++  
- Omit any explanations, comments, summaries, or notes; output only the pseudocode steps.  
- Avoid separators, headings, or blank lines; keep output dense yet readable.  
- Minimize total line count while ensuring the pseudocode is complete and unambiguous.  
- Follow this numbering and style example exactly:

1. x ← 0  
2. while x < n: x++  

Example pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Return the pseudocode as fast as possible, targeting under 5 seconds, optimized for clarity, brevity, and correctness.