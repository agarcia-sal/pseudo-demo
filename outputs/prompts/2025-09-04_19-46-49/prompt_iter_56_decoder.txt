Translate the given pseudocode into a fully functional, idiomatic, and highly efficient Python implementation that strictly preserves all function names, logic, control flow, and implicit behaviors—including edge cases and input variations—inferred from the pseudocode. Your code should optimize for correctness, readability, maintainability, and runtime performance within a 5-second execution limit. 

Specifically, your translation must:

- Use precise Python type annotations for all functions and variables wherever applicable, leveraging standard typing modules and numeric abstract base classes.
- Include clear, comprehensive docstrings following the Google or NumPy style, documenting the function’s purpose, parameters, return values, raised exceptions (if any), and side effects.
- Implement thorough handling of all input types and edge cases as suggested or implied by the pseudocode and examples, avoiding assumptions beyond what the pseudocode allows.
- Employ Pythonic idioms, built-in functions, and standard or widely accepted third-party libraries (only if they significantly enhance clarity, maintainability, or performance) to produce elegant, concise, and scalable code.
- Preserve the original function and variable names exactly as provided in the pseudocode.
- Return or raise errors explicitly only as logically required by the pseudocode.
- Avoid extraneous comments, explanatory text, or separators outside the single code block.

Enclose your entire solution within a single, properly formatted Python code block as follows:

```python
# Your complete, robust, and idiomatic Python code here
```