Translate the given pseudocode into a fully functional, clean, and efficient Python implementation that strictly preserves all original function names, logic, and behavior—including implicit assumptions and edge cases. Your code must be production-quality: prioritize correctness, readability, idiomatic style, and optimal performance within a 5-second runtime constraint. Use appropriate Python features such as type annotations, expressive docstrings, exceptions for invalid inputs where logically inferred, and leverage standard or widely accepted third-party libraries only if they significantly enhance clarity or efficiency without adding unnecessary complexity.

Requirements:
- Maintain original function signatures and names exactly as given.
- Precisely handle all input types and edge cases reasonably inferred from the pseudocode.
- Include comprehensive docstrings describing purpose, parameters (with types), return values, raised exceptions, and any side effects.
- Provide type hints on all function parameters and return types, and on internal variables when beneficial for clarity.
- Use idiomatic Python constructs for clarity and performance; avoid unnecessary computations or overhead.
- Do not include any extraneous text, comments unrelated to the code’s understanding, or delimiter/separator lines outside the code block.
- Enclose the entire solution in a single Python code block formatted as shown:

```python
# Your complete, clean, and efficient Python implementation here
```

Your translation should be fully self-contained and executable as-is.