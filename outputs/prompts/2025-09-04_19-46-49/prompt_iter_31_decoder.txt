Translate the provided pseudocode into a fully working, efficient, and Pythonic implementation that faithfully preserves all function names, control flow, and logic—including implicit behaviors and all possible edge cases. Your solution should prioritize correctness, clarity, and maintainability while ensuring runtime performance suitable for input sizes that complete within 5 seconds. 

Specifically, your code must:

- Use precise and expressive type annotations (including generics and unions where appropriate) to fully capture inputs and outputs.
- Include comprehensive, clear docstrings using the NumPy or Google style that describe the purpose, parameters, return values, raised exceptions, and any side effects or assumptions.
- Handle all input types and edge cases explicitly inferred or reasonably expected from the pseudocode.
- Utilize idiomatic Python constructs, leveraging the standard library and well-established third-party packages (if they improve clarity and performance) without sacrificing simplicity.
- Avoid unnecessary complexity, redundant code, or verbosity—aim for concise, readable, and idiomatic Python.
- Match the original function name exactly as given in the pseudocode.
- Include any necessary imports at the top.
- Provide properly scoped variables with meaningful names and include in-line comments only where clarity demands it.
- Enclose **only** the complete Python code solution in a single code block formatted as:

```python
# Your fully implemented, well-structured Python solution here
```

Do not output any explanation or additional text beyond this code block.