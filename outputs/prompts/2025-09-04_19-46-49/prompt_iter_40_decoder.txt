Translate the provided pseudocode into a complete, highly readable, robust, and performant Python implementation that strictly preserves all original function names, logic, and implicit behaviors—including edge cases and input variations. Your translation should:

- Deliver fully functional code ready to run as is, enclosed entirely within a single Python code block:
  ```python
  # translated code here
  ```
- Incorporate precise and expressive Python type annotations for all functions and variables when applicable.
- Include comprehensive, clear docstrings following the Google or NumPy style that cover function intent, parameters (with types and expected constraints), return values, and possible exceptions or side effects.
- Reflect idiomatic, Pythonic design leveraging built-in functions, data structures, standard libraries, or well-known third-party libraries (if that improves clarity, performance, or safety) — but avoid unnecessary complexity or dependencies.
- Implement thorough input validation and handle all inferred edge cases explicitly, with graceful, predictable behavior.
- Optimize runtime efficiency to respect a 5-second execution limit while maintaining clarity and accuracy.
- Avoid adding any text outside the code block; no explanations, comments beyond those inside the code, or separators.

Your implementation should represent production-quality code that a Python developer could readily understand, maintain, and extend, while strictly matching the logic of the given pseudocode without deviation or omission.