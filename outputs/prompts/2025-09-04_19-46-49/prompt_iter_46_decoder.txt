Translate the provided pseudocode into a fully functional, clean, and idiomatic Python implementation that exactly preserves the original function names, logic, and implicit behavior—including all edge cases and input variations deduced from the pseudocode. Your translation must be production-quality, rigorously correct, and optimized for clarity, maintainability, and performance within a 5-second execution budget.

Specifically, your solution must:

- Use precise type annotations for all functions, parameters, and local variables where applicable.
- Include comprehensive, PEP-257–compliant docstrings clearly describing: the function’s purpose, detailed argument types and semantics, return types, exceptions raised, and any side effects or important notes.
- Rigorously handle all reasonable input types and boundary conditions implied by the pseudocode.
- Employ idiomatic Python constructs and best practices, leveraging relevant built-in modules or widely used standard third-party packages to maximize readability and efficiency without unnecessary complexity.
- Avoid any extra explanations, comments beyond essential docstrings, or non-code text outside the single required code block.
- Ensure the function name and signature exactly match those indicated in the pseudocode.
- Write the entire solution as a single contiguous block of Python code wrapped strictly within triple backticks and `python` (i.e., ```python ... ```).

Adhere strictly to these instructions to produce the highest-quality, robust, and elegant Python code from the given pseudocode.