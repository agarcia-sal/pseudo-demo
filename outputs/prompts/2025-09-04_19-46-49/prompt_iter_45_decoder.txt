Translate the provided pseudocode into a fully functional, robust, and idiomatic Python implementation that strictly retains all original function names and logic including implicit behaviors and edge cases. Your output must:

- Produce clean, readable, and maintainable code optimized for correctness and efficiency within a 5-second runtime budget.
- Use precise type annotations (including generics or protocols if appropriate) to maximize typing clarity and static-checking support.
- Include comprehensive, clear docstrings covering function purpose, parameters (with types), return values, exceptions, and noteworthy side effects or assumptions.
- Gracefully handle all inferred input variations and edge conditions, validating inputs explicitly if necessary.
- Employ Pythonic idioms, built-in functions, and suitable standard or popular third-party libraries (e.g., itertools, collections, math, numpy) only if they enhance correctness, performance, or clarity without adding unnecessary complexity.
- Avoid any extraneous explanations, comments unrelated to code clarity, or formatting beyond the code itself.
- Enclose your entire solution in a single Python code block using triple backticks and `python` as the language specifier.
- Preserve all function and variable names exactly as specified in the pseudocode.
- Do not include any text outside the code block.

Example structure:

```python
# Your fully translated Python code here
```

This approach ensures a precise, production-level translation from pseudocode to Python, leveraging modern typing and best practices while strictly adhering to the original intent and complexity constraints.