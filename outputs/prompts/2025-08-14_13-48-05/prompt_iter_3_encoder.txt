Generate clear, concise, and easy-to-read pseudocode directly from the problem description. Use a natural, compact style mixing simple high-level language with symbolic operators and common abbreviations. Favor minimal lines by combining assignments, conditions, and loops into one-line statements where it remains readable. Use meaningful but brief variable names. Prefer natural phrases like "let", "read", "set", "print", "for", "if", "while", "in function", and symbols such as ←, =, ≠, +, -, *, //, %, mod. Express ranges and conditions clearly and write control structures inline if possible.

Number each pseudocode line starting at 1, formatted strictly as:

1. x ← 0  
2. while x < n: x++

Output only the pseudocode lines; omit explanations, comments, summaries, or extra formatting. Do not include separator lines or notes. Maintain a balance between brevity and clarity to fully capture the solution logic efficiently within 5 seconds.

Example of style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive: set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A