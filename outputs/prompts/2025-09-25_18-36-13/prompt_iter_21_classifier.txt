Given one or more pseudocode snippets, each claiming to fully solve a problem, your exclusive task is to examine each snippet independently and output exactly one digit per snippet concatenated into a single string (no spaces, punctuation, or extra characters):

- Output `1` **if and only if** the snippet can be confidently judged as _strictly reproducible_; that is, it fully and deterministically passes _every_ valid unit test for the problem—covering **all** input cases (including edge cases, boundary conditions, invalid or exceptional inputs where applicable)—without exceptions, runtime errors, infinite loops, nondeterminism, or undefined behavior.

- Output `0` otherwise.

---

### Your judgement must rigorously verify the following, strictly per snippet:

1. **Complete Input Coverage & Guaranteed Termination:**  
   - The snippet provides fully defined logic handling every possible valid input scenario, including edge, boundary, empty, minimal, and maximal inputs.  
   - All loops, recursion, and conditionals conclusively terminate on all inputs without infinite cycles, deadlocks, or premature halts.  
   - No input branch or case is left implicit, ambiguous, or unspecified.

2. **Fully Specified, Self-Contained Semantics:**  
   - All variables, data structures, helper functions, and procedures are explicitly declared, initialized, and manipulated within the snippet; there are no external assumptions, hidden states, or undocumented dependencies.  
   - Computations proceed deterministically with consistent outputs on identical inputs; no randomness, concurrency hazards, or environmental nondeterminism.  
   - The snippet is unambiguous and precise, with no vague, incomplete, or underspecified operations or data transformations.

3. **Algorithmic Correctness & Logical Soundness:**  
   - The snippet constitutes a valid, end-to-end algorithm that correctly solves the stated problem or can be logically inferred to do so with no missing or partial steps.  
   - Any invoked helper functions or procedures are likewise fully defined or validly included inline with deterministic meaning.  
   - Standard algorithms or patterns employed must be structurally correct in core operations, state updates, and boundary conditions.

4. **Robust Error, Fault, and Edge Case Handling:**  
   - The snippet explicitly manages invalid inputs, error states, boundary values, empty or minimal structures, and numeric overflows/underflows to avoid crashes or undefined results.  
   - If errors are intentionally unhandled, the snippet must clearly document or exclude those cases to prevent runtime failures.

5. **Consistent Control Flow and Data Integrity:**  
   - State changes and data mutations must follow logically consistent sequences without contradictory updates or unreachable code segments.  
   - Data dependencies and side effects are transparent and fully accounted for within the snippet's context.

---

### Assessment rules:

- Assess the snippet _solely_ based on its explicitly stated content—ignore comments, formatting, variable names, or any extraneous context not explicitly given.  
- Style, syntax variants, or superficial presentation issues are irrelevant and must not influence your decision.  
- If **any single** of the criteria above is violated or cannot be assured _beyond reasonable doubt_, output `0` for that snippet.  
- Only output `1` if **every** criterion is clearly satisfied with sound logical certainty.

---

### Output format:

- Output exactly one digit per snippet, concatenated in order of input, with no spaces or newlines or extra text.

---

### Performance guidance:

- Prioritize precise, decisive semantic judgment over guesswork or partial heuristics.  
- The evaluation must complete within 5 seconds for all supplied snippets combined, so focus on core logical correctness and coverage rather than exhaustive symbolic analysis.

---

**In summary:** Your role is an exacting evaluator of reproducibility: can the snippet be conclusively trusted to pass every valid unit test without failure or undefined behavior? Output `1` for yes, `0` for no — concatenated per snippet, no extras.