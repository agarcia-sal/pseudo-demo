Given one or more pseudocode snippets, each claiming to be a fully self-contained solution to a problem, your task is to output exactly one digit per snippet — `1` or `0` — concatenated without spaces or separators, in the same order as the snippets are presented.

Output `1` for a snippet **if and only if** you can confidently determine that it is strictly reproducible; that is, it will deterministically pass _all_ valid unit tests for the problem it solves without any failure, infinite loop, undefined behavior, or runtime error—even in edge cases. Output `0` otherwise.

---

### Rigorous evaluation criteria (apply comprehensively and independently to each snippet):

1. **Complete and Deterministic Specification**  
   - The snippet must fully specify the algorithm’s behavior on every valid input, covering all normal, boundary, and corner cases with no ambiguous, partial, or missing logic branches.  
   - It must guarantee termination of all control flow constructs (loops, recursion, conditionals) with no possibility of infinite loops, deadlocks, or partial computations.  
   - All output values and internal states must be deterministically derived from inputs alone; no hidden randomness, nondeterminism, or reliance on external mutable state is permitted.

2. **Self-Contained Semantics and Definitions**  
   - All variables, data structures, and helper functions invoked are declared, defined, initialized, and updated solely within the snippet, without implicit dependencies on external environment, runtime side effects, or external data.  
   - The snippet must specify the meaning and expected behavior of all operations it uses (e.g., arithmetic, indexing, recursion), leaving no underspecified or vague steps.

3. **Algorithmic Correctness and Logical Soundness**  
   - The snippet must implement a valid, logically correct algorithm that aligns with the stated or strongly implied problem requirements.  
   - Partial solutions, incomplete heuristics, or mere outlines lacking critical computations or helper routines are not reproducible.  
   - Any invoked auxiliary subroutine must be fully defined or validly included within the snippet.  
   - Recognizable algorithmic patterns or standard solutions must be implemented correctly in core components and edge handling.

4. **Fault Tolerance and Robustness**  
   - The snippet must explicitly handle or validly exclude invalid inputs, exceptions, numerical boundary conditions (overflows/underflows), empty or degenerate structures, and all error situations to avoid runtime failures or undefined results.

5. **Consistent State and Control Flow Integrity**  
   - State modifications and data updates must be logically consistent, without contradictory, unreachable, or silently incorrect operations.  
   - Control flow must be well-structured to ensure sound progression and preservation of data integrity throughout execution.

---

### Strict instructions and assumptions:

- Assess only the snippet itself. **Ignore** variable names, comments, whitespace, formatting, or any external context not explicitly present in the snippet.  
- Do not judge based on syntax correctness, language specifics, or superficial style details.  
- If **any single condition above is violated or in doubt**, output `0` for that snippet.  
- Output `1` only when **all** criteria are met beyond reasonable doubt for full reproducibility.

---

### Output formatting:

- Output exactly one character per snippet: `1` (reproducible) or `0` (not reproducible).  
- Concatenate these in the input order, with no spaces, line breaks, punctuation, or any other characters.  
- No extra explanation, no trailing newline.

---

### Performance and reasoning guidelines:

- Your judgment must be semantically precise, logically decisive, and efficiently computable within a 5-second total timeout.  
- Prioritize clear, sound reasoning over guesswork or heuristic approximations.  
- If reproduction is ambiguous or partial, default to `0` to avoid false positives.

---

**Summary:** Treat each snippet as a black-box but fully self-describing algorithmic solution. Assign `1` if and only if it is guaranteed fully reproducible—completely defined, terminates reliably, handles all valid inputs and edge cases, and encodes a correct algorithm guaranteed to pass all unit tests. Otherwise assign `0`. Output the combined result string with no additional text.