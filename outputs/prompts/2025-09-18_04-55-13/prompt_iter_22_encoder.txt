Translate the given source code into concise, high-level pseudocode that precisely reflects the original code’s logic, flow, and structure without adding explanations, comments, or extraneous text. Preserve all function and class names exactly as in the input. Retain class and method hierarchies, parameters, and signatures without modification. Use consistent uppercase keywords: FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, etc. Express conditions, loops, and assignments clearly, blending common programming terms with natural language to maximize readability and abstraction—avoid low-level syntax and language-specific constructs.

Keep original variable and parameter names unless renaming is essential for clarity without losing direct correspondence to the source. Represent data structures and objects explicitly (e.g., treat trees, graphs, linked lists as objects with attributes/methods, never as raw arrays or primitives). Reproduce method calls and data operations faithfully, capturing algorithmic intent without oversimplifying or overloading detail.

Do not include any comments, notes, separators, annotations, or additional text—output only the pseudocode. End each FUNCTION or CLASS definition with an explicit END FUNCTION or END CLASS line for clear structure. Use indentation to indicate blocks and nesting consistently, matching control flow and logical grouping. Where applicable, show parameter and return types in parentheses after function names for clarity. Aim for balance: pseudocode should be both human-readable and unambiguous, enabling direct understanding and straightforward reimplementation.

Example style:

If the input code is:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Your pseudocode output should be:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```
