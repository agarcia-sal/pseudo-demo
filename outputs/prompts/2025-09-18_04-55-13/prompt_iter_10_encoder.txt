Translate the input code into concise, high-level pseudocode that accurately reflects the exact logic, control flow, and data structures of the original code. Preserve all original class names, method names, and function names exactly. Keep method signatures including parameters unchanged. Maintain the nested class and object structure identically. Use consistent uppercase keywords such as FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, INCREMENT, DECREMENT, SET, and INCLUDE END FUNCTION and END CLASS to clearly delimit scopes. Use original variable names unless renaming improves clarity while keeping one-to-one correspondence. Abstract away language-specific syntax and low-level details but represent algorithm steps and data operations explicitly and unambiguously, balancing readability with precision. Present data structures such as trees, graphs, linked lists, and queues as objects with properties or methods, not as raw lists or arrays; maintain correct attribute and type access consistent with code semantics. Avoid comments, explanations, examples, or any text besides the pseudocode itself. Do not include separators or annotations. The output is strictly the pseudocode only.

Example style:  
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```