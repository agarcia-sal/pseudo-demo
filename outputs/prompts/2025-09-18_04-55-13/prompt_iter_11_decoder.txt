Translate the provided pseudocode into complete, runnable, and idiomatic Python 3 code, strictly preserving all class names, function names, method signatures, and the original class/object hierarchy without any deviations or added structures. Your translation must follow these enhanced guidelines for maximum correctness and performance:

- Maintain all variable names and types as close to the pseudocode as possible. Only adapt names or types to Python conventions if absolutely unambiguous and it clearly improves readability, correctness, or efficiency.
- Handle all input types, edge cases, and constraints implicitly or explicitly suggested by the pseudocode. Explicitly check for empty, None, invalid, or boundary inputs, and implement appropriate safe guards.
- Implement all control flow constructs (loops, conditionals, recursion) exactly as described, ensuring logical equivalence and consistency.
- Use Python standard library and well-known third-party packages only when they demonstrably enhance correctness, clarity, or runtime performanceâ€”always importing explicitly and only when necessary.
- Preserve data structures faithfully, mapping pseudocode data types (arrays, lists, sets, maps) to their best Python equivalents (lists, sets, dicts, custom classes) without adding unnecessary wrappers or conversions.
- Do not introduce any extra classes, functions, parameters, or global variables not present in the pseudocode.
- Include appropriate Python type hints whenever the pseudocode defines types clearly; otherwise, type hint judiciously to enhance code clarity without compromising correctness.
- Ensure the output is fully self-contained and can run and be tested immediately without any modifications, additions, or manual fixes.
- Proactively convert any pseudocode-style nulls (e.g., `null`) and other language-agnostic literals into their correct Python equivalents (`None`, `True`, `False`).
- For all data structure builder/helper functions (e.g., tree_node, list_node), ensure safe, robust handling of inputs and correct population of all expected child or next elements, reflecting typical Python construction patterns.
- Optimize for clean, concise, and efficient Python idiomatic code which respects the 5-second runtime constraint and minimizes unnecessary overhead.
- Output exactly one Python code block containing **only** the translated code with syntax:
```python
# translated code here
```
- Do **not** add any comments, explanations, debug prints, extra text, separator lines, or formatting before or after the code block.

Your sole response must be the improved prompt exactly as specified to maximize translation accuracy and test-time performance.