Translate the given pseudocode into fully functional, clean, and efficient Python code that faithfully preserves **all** class names, function names, method signatures, and the original class/object hierarchy exactly as specified. Your translation must:

- Keep all variable names and type usage as consistent as possible with the pseudocode; rename or change types only when absolutely necessary for correctness, clarity, or idiomatic Python usage without ambiguity.
- Preserve the logic of all control flows — including loops, recursion, conditionals, and short-circuits — precisely as described, ensuring correctness and optimal performance within a strict 5-second runtime constraint.
- Handle all edge cases and input constraints explicitly or implicitly indicated, including empty, None, or boundary inputs, and invalid or corner scenarios.
- Use type hints when clearly inferable from the pseudocode; if ambiguous, prioritize clarity, correctness, and idiomatic typing.
- Import any modules only from the Python standard library or well-known third-party packages that demonstrably enhance correctness, readability, or performance.
- Maintain data structures that correspond exactly to those in the pseudocode (e.g., lists, dicts, sets, custom classes) without introducing unrequested new data structures, classes, functions, or parameters.
- Convert input values and data structures properly if necessary, for example when pseudocode uses placeholder terms like `null`, convert them to Python’s `None`.
- Ensure your code is immediately runnable and testable as-is with no modifications.
- Wrap the entire output in a **single** Python code block exactly like this:

```python
# translated code here
```

- Do not add any text, explanations, debugging print statements, comments outside the code block, or formatting beyond the required code block.
- Carefully manage imports and type annotations to maximize correctness and adherence to the pseudocode.
- Avoid silent failures by ensuring that all control paths that require returns, exceptions, or outputs are correctly implemented.
- When conformance conflicts arise, preserving exact class, function signatures, and hierarchy takes precedence.

Deliver your translation strictly as python code inside the specified code block only.