Translate the entire input code into clean, concise, and high-level pseudocode that precisely preserves the original structure, logic, and behavior, including all class names, method names, and signatures exactly as in the source. Reflect control flow and data operations clearly using standard, uppercase pseudocode keywords (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT). Maintain original variable names unless renaming clearly reduces ambiguity without losing fidelity to the code. Represent data structures as objects with method and attribute accesses consistent with the original code, never as raw or language-specific constructs. Avoid low-level syntax, language-specific idioms, or detailed implementation specifics; instead, abstract sufficiently while ensuring every algorithmic and logical step remains explicit and unambiguous for direct understanding and reimplementation. Use natural but precise expressions for operations, keeping pseudocode readable yet exact. Output only the pseudocodeâ€”no comments, explanations, annotations, delimiters, headers, or any text besides the pseudocode itself. Do not include empty lines except where needed for clear separation of logical blocks. Ensure indentation accurately reflects code blocks and nesting levels.