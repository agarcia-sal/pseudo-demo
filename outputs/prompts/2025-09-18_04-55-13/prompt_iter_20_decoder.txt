Translate the given pseudocode into executable, well-structured, and optimized Python code that strictly preserves all class names, function names, method signatures, and the class/object hierarchies exactly as stated. Your translation must adhere to these enhanced requirements:

- Retain all variable names, data structures, and types as closely as possible to the pseudocode, applying Python-native naming and typing only when it is unambiguous and improves clarity or correctness.
- Precisely implement control flows (loops, conditionals, recursion), including all implicitly or explicitly indicated edge cases, such as empty inputs, None/null values, boundary and invalid cases. Validate inputs where logically implied.
- Use appropriate Python idioms and language features to enhance correctness and efficiency, including short-circuit evaluations, comprehensions, generators, built-in functions, and standard library modules.
- Include all necessary imports explicitly, favoring only Python’s standard library and widely-used, stable third-party packages that clearly improve correctness, readability, or performance.
- Fully preserve the pseudocode’s data structures and types (lists, sets, dicts, custom classes) without adding or removing them. Where pseudocode omits types, use meaningful Python type hints prioritizing precision.
- Never introduce additional classes, functions, or parameters beyond those found in the pseudocode. Nested or helper functions are allowed only if explicitly presented or logically required to implement the pseudocode’s intent.
- Ensure the output is executable as-is, supporting direct testing and integration without further edits.
- Handle all references to null (or equivalent) values properly, converting them into Python’s None, and ensure collection types and iteration guards robustly prevent index or key errors.
- Write clean, idiomatic Python with consistent indentation, spacing, and naming conventions that help readability while respecting the pseudocode’s structure.
- Enclose your entire solution inside a single code block exactly formatted as:

```python
# translated code here
```

- Provide no explanations, comments (unless present in pseudocode), debugging output, or any text outside of the specified code block.
- Do not add extra formatting or separator lines.
- Prioritize correctness, completeness, clarity, and performance balanced within the 5-second runtime limit.

Deliver only the Python code inside the designated code block, faithfully reflecting the pseudocode in structure and semantics, optimized for robustness and test-time reliability.