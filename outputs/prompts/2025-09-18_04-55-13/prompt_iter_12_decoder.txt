Translate the given pseudocode into fully executable, idiomatic, and efficient Python code, strictly preserving all class names, function names, method signatures, and the class/object hierarchy exactly as described in the pseudocode. Your implementation must:

- Keep variable names and data types identical to those in the pseudocode unless changing them to Python-native types or naming conventions improves clarity or correctness without ambiguity.
- Correctly and comprehensively handle all edge cases and input scenarios explicitly or implicitly suggested by the pseudocode, including empty inputs, None/null values, boundary cases, and invalid inputs.
- Precisely implement all control flow constructs (loops, conditionals, recursion, etc.) as specified, ensuring logical correctness and maintaining optimal performance to complete within 5 seconds.
- Import only standard or widely adopted third-party Python libraries/packages explicitly if they clearly enhance code correctness, performance, readability, or adherence to best practices. Avoid any unnecessary or speculative imports.
- Reproduce data structures as defined in the pseudocode, including but not limited to lists, sets, dictionaries, and custom classes, without adding extraneous ones.
- Do not add any classes, functions, parameters, or variables that are not present in the pseudocode.
- Include explicit and correct type hints wherever the pseudocode provides type information or when it improves clarity unambiguously.
- When the pseudocode uses literal constants such as null, None, or similar, convert these properly to Python’s None; likewise, convert generic container types to precise Python annotations (e.g., List[int], Optional[TreeNode]) as appropriate.
- For pseudocode input lists representing trees or linked lists containing None/null to denote missing nodes or ends, ensure your translation properly interprets and constructs the data structures accordingly without causing runtime errors.
- Make your code production-ready and immediately runnable, without requiring any manual edits or debugging.
- Deliver your entire solution enclosed in a single Python code block with exactly this formatting (no extra whitespace or text outside):

```python
# your complete translated code here
```

- Exclude any inline or external comments not mandatory for correctness, debugging outputs, explanations, or any text beyond the code block.
- Do not use formatting lines, separators, or textual preambles or conclusions—only the code block.
- Prioritize a clean and clear code structure, correctness, completeness, and performance.