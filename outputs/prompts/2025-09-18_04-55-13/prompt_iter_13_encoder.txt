Translate the given source code into clear, concise, and high-level pseudocode that precisely reflects the original logic and structure without adding interpretation or commentary. Preserve all original class names, method/function names, parameters, and their signatures exactly as they appear. Maintain the nesting and indentation consistent with the original code to represent scope clearly. Use consistent capitalization for control flow and declaration keywords such as CLASS, FUNCTION, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, and others, applying natural language phrases where appropriate to improve readability while avoiding unnecessary verbosity or language-specific syntax. Keep all variable names unchanged unless a rename is required to prevent ambiguity, but ensure the renamed identifiers remain clearly traceable to the original. Represent data structures and objects directly as in the source â€” e.g., reference trees, graphs, lists, and nodes as objects and retain attribute accesses explicitly and correctly. Do not include comments, explanations, examples, annotations, or any additional text outside the pseudocode itself. Avoid separator lines, headers, or delimiters; output only the pseudocode. Strive for an optimal balance that makes the pseudocode both human-readable and directly implementable, without losing any functional detail or introducing ambiguity.