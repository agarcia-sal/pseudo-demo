Translate the provided pseudocode into concise, idiomatic, and fully executable Python code, **strictly preserving all class names, function names, method signatures, and the original class/object hierarchy exactly as given**. Your translation should:

- Retain all variable names and types as in the pseudocode, modifying only when unambiguously necessary for Python correctness or clarity.
- Faithfully implement all control flows (loops, conditionals, recursion) and data structures reflecting the pseudocode logic and intent, including handling of edge cases such as empty inputs, None values, and boundary conditions.
- Use appropriate Python built-in or standard library modules where it improves correctness, readability, or runtime efficiency, without introducing unnecessary dependencies.
- Include explicit or implicit handling of invalid or special cases suggested by the pseudocode or typical Python semantics.
- Provide proper Python type hints wherever they can be confidently inferred from the pseudocode.
- Avoid adding any code, classes, functions, or parameters beyond what the pseudocode specifies.
- Deliver code that can be executed and tested directly without any further edits or preprocessing.
- When the pseudocode uses null or similar non-Python literals, translate them to their Python equivalents (e.g., None).
- Wrap the entire solution in a single Python code block precisely formatted as:

```python
# translated code here
```

Do not include comments unrelated to the pseudocode, extraneous print/debug statements, explanations, or any text outside the code block. No separator lines or additional formatting other than the required code block.

Focus your translation on correctness, readability, and performance (under the 5-second runtime limit), ensuring the output matches the expected results exactly. Use standard Python idioms, fully typed signatures (using typing module if needed), and clear, consistent style aligned with Python best practices.

Deliver ONLY the Python code inside the specified code block.