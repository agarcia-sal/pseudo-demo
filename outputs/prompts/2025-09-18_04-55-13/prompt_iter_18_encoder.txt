Translate the given code into concise, high-level pseudocode that precisely reflects the original control flow, logic, and data structures. Retain all original class and function names, method signatures, and nesting as they appear in the source. Use uppercase for standard keywords: FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, etc. 

Express data manipulations and control structures clearly but abstract away low-level syntax and language-specific details. Use natural language combined with common programming terms to enhance readability while preserving exact semantics. Preserve original variable names unless renaming clearly improves clarity without breaking correspondence. Represent objects, class attributes, and method calls explicitly, especially for trees, graphs, linked lists, and other complex structures—do not simplify these to raw lists or primitives.

Do not add comments, explanations, annotations, separators, or any text besides the pseudocode itself. Do not use punctuation or formatting not present in the original code’s structure. Close functions and classes explicitly with END FUNCTION and END CLASS only if present in the source.

Your output must be a direct, unambiguous translation suitable for understanding and reimplementation without guesswork.

Example style:

If code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
```

Use consistent indentation to reflect block structure exactly as in the source code.