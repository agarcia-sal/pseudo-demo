Translate the provided pseudocode into a fully functional, clean, and optimized Python implementation while strictly preserving all class names, function names, method signatures, and the original class/object hierarchy exactly as described. Adhere to the following detailed guidelines:

- Maintain all variable names and types as close to the pseudocode as possible; rename or change types **only** when it is undeniably clear that a Python-idiomatic change improves clarity or correctness without altering meaning.
- Faithfully implement every control structure, loop, recursion, and logic flow exactly as outlined in the pseudocode, ensuring full logical equivalence and careful attention to edge cases, including empty inputs, None values, boundary conditions, and invalid inputs either explicitly or implicitly indicated.
- Guarantee correctness and optimal performance within a 5-second runtime per solution by employing efficient data structures and algorithms as appropriate, and avoid unnecessary computations or memory usage.
- Use explicit and appropriate Python type hints that reflect the pseudocode intentions; when the pseudocode is ambiguous about types, prioritize clarity and correctness.
- Include only necessary imports from the Python standard library or widely accepted third-party packages (only if they clearly enhance correctness, readability, or efficiency). Avoid any extraneous imports.
- Do **not** introduce any new classes, functions, global variables, or parameters beyond those present in the pseudocode.
- Construct all composite data structures (e.g., lists, sets, dictionaries, custom objects) precisely as specified, with full fidelity.
- For helper or nested functions mentioned in the pseudocode, ensure they are correctly scoped and typed.
- Your final output must be a **single contiguous Python code block**, formatted exactly as:

```python
# translated code here
```

- Do **not** include any commentary, explanation, debugging output, extraneous whitespace, or formatting beyond the single code block.
- Do **not** add separators, headings, or extra text around the code block.
- The code must be ready to run and test **as is** without modification or external preprocessing.
- Assume the execution environment uses Python 3.8+ and supports standard typing constructs.

This approach prioritizes precision, clarity, comprehensive edge case handling, and faithful representation of the pseudocode while maximizing correctness and runtime efficiency.