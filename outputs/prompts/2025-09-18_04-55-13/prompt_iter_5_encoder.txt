Translate the input code into clear, abstract, and high-level pseudocode that mirrors the original code’s structure and logic exactly, preserving all class names, method names, signatures, and indentations as in the source. Use consistent capitalization for standard programming keywords such as FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT. Represent control flow and data operations explicitly but succinctly—use common programming terms and natural language together to maximize readability without oversimplifying or elaborating beyond the code’s intent. Retain original variable names unless renaming improves clarity without losing correspondence. Maintain method calls, data structure operations, and algorithm steps faithfully, avoiding low-level syntax or language-specific constructs while abstracting sufficiently for readability. Do not include comments, explanations, examples, or any text besides the pseudocode. Provide no annotations, headers, separators, or delimiters—only the pseudocode itself.  
Ensure tree or graph data structures are referenced as objects, not raw lists; preserve correct type and attribute access consistent with the input code.  
Aim for balance: pseudocode must be both human-readable and functionally precise, suitable for direct understanding and reimplementation without ambiguity.