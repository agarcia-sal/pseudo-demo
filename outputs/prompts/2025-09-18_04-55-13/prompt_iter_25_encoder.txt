Translate the input code into concise, high-level pseudocode that directly reflects the original code’s logic, structure, and flow without adding explanation or commentary. Preserve all original class names, method names, and signatures exactly as in the source code. Reflect original variable names unless renaming clearly improves clarity without obscuring correspondence. Use consistent capitalization for core keywords: FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, etc. Represent control flow and data operations explicitly but succinctly, combining common programming terms and natural language for readability without oversimplifying or expanding beyond the code’s intent. Maintain method calls, data structure operations, and algorithm steps faithfully, abstracting away only language-specific syntax and low-level details. Represent complex data structures (like trees and graphs) as objects with properties and methods rather than raw lists or arrays. Provide no comments, notes, explanations, separators, or any text aside from the pseudocode itself. Ensure the output is immediately interpretable and suitable for unambiguous, direct reimplementation. Output pseudocode should follow this style example:

FUNCTION calc_average(list_of_numbers)
    SET total_sum to 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION