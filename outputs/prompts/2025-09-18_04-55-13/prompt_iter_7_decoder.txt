Translate the given pseudocode into clean, efficient, and fully functional Python code, preserving **exactly** all class names, function names, method signatures, and the original class/object hierarchy as described. Your translation must:

- Keep all variable names and types as close to the pseudocode as possible, only changing names or types to Python-idiomatic ones when it is absolutely unambiguous and improves clarity or correctness.
- Correctly handle all possible edge cases and input constraints explicitly or implicitly suggested by the pseudocode, including empty or None inputs, boundary values, and invalid cases.
- Implement all loops, conditional statements, recursion, and control flows precisely as described, ensuring logical correctness and optimal performance within a 5-second runtime limit.
- Add all necessary imports from the Python standard library or well-established third-party libraries only if they clearly improve correctness, readability, or performance.
- Maintain data structures consistent with the pseudocode, including types like lists, sets, dicts, and custom classes.
- Avoid introducing any additional classes, functions, or parameters not present in the pseudocode.
- Use proper type hints when evident from the pseudocode; if typing is not provided or ambiguous, prefer clarity and correctness.
- Ensure your code is ready to be run and tested directly without modification.
- Enclose the entire solution in a single Python code block formatted precisely as follows:

```python
# your translated code here
```

- **Do not** include any explanations, comments outside the code block, debugging prints, or extra text of any kind.
- **Do not** add separator lines or any formatting other than the required code block.
- Focus on clear structure, correctness, completeness, and efficiency.

Deliver ONLY the Python code inside the specified code block.