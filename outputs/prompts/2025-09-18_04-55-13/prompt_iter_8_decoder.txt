Translate the provided pseudocode into clean, efficient, and fully working Python code enclosed in a single Python code block as ```python ... ```. Your translation must meet all these strict requirements:

- Preserve **exactly** all class names, function names, method signatures, and the class/object hierarchy from the pseudocode, with no addition or removal of classes, functions, or parameters.
- Retain variable names and data types as closely as possible, only adjust to Python-idiomatic forms when absolutely unambiguous and only to enhance clarity or correctness.
- Handle all potential edge cases and input constraints implicitly or explicitly suggested by the pseudocode, including empty inputs, None/null values, boundary conditions, and invalid inputs.
- Implement all control flows exactly as described: loops, recursion, conditionals, and early returns, ensuring logically correct algorithms with an emphasis on optimal runtime performance (target ≤5 seconds).
- Import only necessary modules and packages—standard libraries or well-established third-party libraries justified by correctness, readability, or significant performance gains.
- Apply accurate and consistent data structures (lists, dicts, sets, queues, custom classes) as per pseudocode intent.
- Incorporate explicit type hints wherever strongly implied by the pseudocode; if ambiguous, prioritize code clarity, maintainability, and correctness.
- If the pseudocode implies or uses null, None, or equivalent placeholders, translate properly to Python’s None and handle accordingly.
- Avoid adding any debugging code, print statements, inline or external comments beyond what is needed for typing or imports within the code block.
- Return code that is directly runnable and testable without requiring post-processing or modification.
- Format your entire answer strictly and solely as a single python code block:  

```python
# your translated code here
```

- Do **not** add any explanations, prose, comments outside the code block, separators, or any text before or after the code block.

Focus on producing structurally clear, semantically precise, robust, and optimized Python code faithfully derived from the pseudocode provided.