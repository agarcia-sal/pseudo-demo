Translate the given source code into concise, high-level pseudocode that precisely preserves the original class names, function names, parameters, and code structure, including correct nested relationships and indentation. Use consistent uppercase keywords such as FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, etc., to clearly indicate control flow and operations. Abstract away language-specific syntax and low-level details; use standard programming constructs combined with natural language phrases for clarity and readability without adding explanations, comments, or examples. Keep all original variable names intact unless renaming is necessary to remove ambiguity while preserving one-to-one correspondence. Represent data structures and method calls faithfully, especially for objects like trees and linked lists, maintaining attribute access and preserving types as shown in the input. The pseudocode must be self-contained and unambiguous, enabling direct understanding and accurate reimplementation. Do not include any text besides the pseudocodeâ€”no annotations, headers, summaries, or delimiters. Ensure all constructs and nesting reflect the logic of the original code exactly.

When producing pseudocode, follow this example style exactly:  

Input code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```