Translate the input code into clear, concise, and high-level pseudocode that precisely reflects the original code’s logic, structure, and flow. Preserve all class names, method names, and function signatures exactly as given, including their nesting and hierarchy within classes or objects. Use consistent, uppercase keywords for control structures and declarations—such as FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT, END IF, END FOR, END WHILE, END FUNCTION—to explicitly mark blocks and improve readability.

Express control flow and data operations using common programming terms combined with natural language to maximize clarity without unnecessary detail or oversimplification. Keep all original variable names unless renaming would demonstrably reduce ambiguity while maintaining one-to-one correspondence. Reflect method calls, data structure accesses, and algorithmic steps faithfully, abstracting away only language-specific syntax or low-level constructs, but never altering algorithmic intent.

Represent data structures such as trees and graphs as objects with attributes and methods—not as raw lists or primitives—and preserve attribute and type access consistent with the original code. Ensure list and string indexing or slicing is expressed clearly but succinctly, suitable for direct reimplementation. When possible, show block delimiters (END statements) to avoid ambiguity in nested structures.

Output only the pseudocode itself—no comments, explanations, headers, separators, or any additional text. Do not provide summary, notes, or clarifications. The pseudocode must be self-contained, exact in semantics, and sufficiently high-level for human understanding and direct coding from the pseudocode without ambiguity or omissions.

Example style for a function with a loop and arithmetic:

FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    END FOR
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION