Translate the input code into clear, concise, and high-level pseudocode that strictly preserves the original code’s class and function names, signatures, and their hierarchical structure (including class and method nesting). Represent all control flows, data operations, and algorithmic steps in an explicit but succinct manner using standardized, uppercase pseudocode keywords (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT). Preserve original variable names exactly unless renaming is necessary to avoid ambiguity while maintaining one-to-one correspondence. Use abstract terms for data structures and operations—avoid language-specific syntax or low-level details, but retain sufficient detail to enable unambiguous reimplementation. Represent objects such as trees or graphs as objects with attributes, never as raw lists or arrays. Do not add comments, explanations, or any text besides pseudocode. Do not use separators, delimiters, or annotations—output only the pseudocode text. Use consistent indentation to reflect code structure clearly. End all FUNCTION and CLASS blocks explicitly with “END FUNCTION” or “END CLASS” for clarity. Do not generate any line that does not correspond directly to the code logic or structure. Ensure the pseudocode balances readability with exact functional representation to allow direct understanding without needing the original code.