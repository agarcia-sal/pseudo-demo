Translate the given pseudocode into fully working, efficient, and idiomatic Python code with strict adherence to the following constraints and enhancements:

- Preserve all class names, function names, method signatures, and the original class/object hierarchy exactly as stated in the pseudocode.
- Maintain variable names and types consistent with the pseudocode, only adapting them to Python conventions when absolutely necessary for clarity or correctness.
- Handle all implicit and explicit edge cases thoroughly, including empty inputs, None values, boundary conditions, and invalid inputs, ensuring no runtime errors or exceptions unless logically mandated.
- Precisely implement all control flows—loops, conditionals, recursion, and early returns—matching the pseudocode’s logic and intent, while optimizing for correctness and ensuring solutions run efficiently within a 5-second time constraint.
- Import only from Python standard libraries and well-known, reliable third-party libraries if and only if it clearly improves correctness, readability, or efficiency. Avoid unnecessary imports.
- Use appropriate Python built-in data structures matching those in the pseudocode (lists, sets, dicts, tuples, custom classes).
- Do not add classes, functions, parameters, or global variables beyond those defined in the pseudocode.
- Apply Python type hints consistently and precisely whenever type information is clear or can be safely inferred; otherwise prioritize code clarity and correctness.
- Implement robust defensive programming to translate constructs like null/None values carefully and safely.
- Ensure the output code is complete, immediately runnable, and testable without any modifications.
- For any nodes or tree/list constructions from arrays, assume input lists may contain Python None (not 'null'); handle this gracefully.
- Enclose the entire solution in a **single, exact** Python code block formatted as:

```python
# Insert your fully translated and ready-to-run Python code here
```

- Provide no explanatory text, comments outside the code, debugging output, separator lines, or any additional formatting or text.
- Your output must consist solely of the Python code block with the complete code.

Focus on delivering clean, robust, logically faithful, and high-performance Python code that directly corresponds to the given pseudocode input.