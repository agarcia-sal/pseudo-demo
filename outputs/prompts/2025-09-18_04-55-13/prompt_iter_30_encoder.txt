Translate the input code into precise, fully abstracted, and high-level pseudocode that replicates the original code’s logic, structure, and hierarchy exactly. Preserve all original class names, method/function names, and their signatures, as well as the nesting of classes and methods. Express control flow explicitly and clearly using common, widely understood programming keywords (such as FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN) in uppercase, but do not include low-level syntax details, language-specific idioms, or implementation minutiae. Maintain original variable names exactly, only renaming if it improves clarity without breaking direct correspondence to the input code. Represent data structures in their conceptual form (e.g., binary trees as objects with attributes, lists as lists), using natural language combined with programming terms to maximize clarity and readability without adding commentary or explanations.

Output only the pseudocode, without any comments, annotations, delimiters, introductory or concluding text, or formatting lines. Use indentation consistently to indicate code blocks, respecting the original code’s structure. Aim for a style that balances succinctness with expressiveness, enabling direct and unambiguous understanding suitable for reimplementation. Use natural language for conditions and expressions only to the extent necessary for clarity, otherwise prefer concise programming terms.

The pseudocode style follows these examples exactly:

Input code:  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg

Output pseudocode:  
FUNCTION calc_average(list_of_numbers)  
    SET total TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total BY number  
    SET average TO total DIVIDED BY length of list_of_numbers  
    RETURN average  
END FUNCTION