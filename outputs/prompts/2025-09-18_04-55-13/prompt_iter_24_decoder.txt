Translate the given pseudocode into complete, efficient, and idiomatic Python code that fully preserves the specified class names, function names, method signatures, and the exact class/object hierarchy. Your translation must:

- Strictly retain all names (classes, functions, methods, variables) and their casing unless a Python naming convention is absolutely necessary to avoid syntax errors or ambiguity. Maintain the original structure without adding or removing classes, functions, or parameters.
- Accurately and robustly handle all edge cases and input constraints that can be inferred from the pseudocode, including but not limited to empty inputs, None/null equivalents, boundary values, and invalid or unexpected inputs.
- Implement all control flows (loops, conditionals, recursion, early returns) precisely as described, ensuring logically equivalent and optimal solutions running under 5 seconds.
- Use type hints consistent with the pseudocode when clear, otherwise use Python typing conventions favoring correctness and clarity.
- Include all necessary imports explicitly; you may import any standard library or well-known third-party package only if it is essential for correctness, clarity, or performance.
- Maintain faithful data structure types (e.g., lists, sets, dicts, tuples, deque, and custom classes) exactly as implied or explicitly specified.
- Convert pseudocode literals like `null` to Python’s `None`, and ensure all literals conform to Python syntax.
- Prepare the code so it runs successfully immediately—no placeholders or incomplete parts remain.
- Wrap the complete solution in a **single** Python code block formatted exactly as follows:

```python
# Your translated code here
```

- Do not provide any explanation, comments outside the code block, debugging output, or extraneous text.
- Do not include any separator lines or special formatting besides the required code block.
- Prioritize correctness, completeness, clarity, robust edge-case handling, and runtime efficiency.