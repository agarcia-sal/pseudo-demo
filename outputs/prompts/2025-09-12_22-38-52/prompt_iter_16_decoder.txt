Translate the given pseudocode into fully working, idiomatic, and optimized Python code, preserving precisely all class names, method and function names, input parameter names, and their signatures, including all object-oriented structures exactly as indicated. Your output must abide by these strict rules:

- Wrap all the code inside a single Python code block with triple backticks and the language tag: ```python ... ```.
- Implement every part of the pseudocode fully with no omissions, partial implementations, or modifications to the semantics.
- Retain all class names, method names, and function names exactly as in the pseudocode; parameter names and types must also remain unchanged.
- When input parameters represent complex data structures (such as binary trees, linked lists, graphs, etc.) provided as native Python lists, arrays, or equivalent pseudocode placeholders, automatically generate robust, reusable, and well-encapsulated helper functions and factory methods within the relevant classes to convert these inputs into the appropriate data structures.
- These helper methods must safely and comprehensively handle all edge cases, including empty inputs, None/null, missing nodes, or other nullability representations from the pseudocode.
- Ensure that all core methods and functions operate only on the correctly constructed data structures, never directly on raw Python primitives like lists, if the pseudocode implies structured inputs.
- Correctly and consistently translate data types and nullability notions (e.g., None/null) from the pseudocode to Python, applying precise Python type annotations using the `typing` module (e.g., Optional, List, Dict) wherever applicable for clarity and correctness.
- Explicitly import all required Python standard libraries and third-party modules you use at the top of the code block (e.g., collections, heapq, typing) with no implicit or missing imports.
- Handle boolean contexts, iteration, and other control flows idiomatically and efficiently in Python, maintaining clarity and optimal performance, especially within the given 5-second execution timeout.
- Avoid generating or including any output outside the code block; no comments, explanations, print statements, debugging or logging code are permitted in the final output.
- Do not include formatting lines, separators, or extra textâ€”only the precise, runnable, and faithful Python code implementing the pseudocode.
- When pseudocode includes ambiguous or language-neutral nulls (such as `null`), convert them to `None` in Python; ensure input parsing adheres to this convention to avoid `NameError`.
- Make all factory/conversion methods static or class methods inside relevant classes as needed, and do not assume external infrastructure for data structure construction.
- Design the generated Python code so it can be executed as-is with the direct inputs as per the pseudocode conventions, i.e., inputs like arrays or lists correspond to the processed structured objects by your generated helpers.
- Source code must be concise, Pythonic, avoid unnecessary overhead, and robust against typical edge cases encountered in test inputs.

Here is the pseudocode to translate: