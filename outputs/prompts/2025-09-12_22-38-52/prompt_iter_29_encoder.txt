Generate concise, compact pseudocode that is easy to read and understand, using a natural high-level style. Preserve all original class names, function names, parameters, and exact nesting from the input code, including full class and function headers verbatim.  
Favor one-liners, symbolic operators (←, +, -, *, /, XOR, etc.), and common control structures in minimal form (e.g., `if cond then`, `while cond do`, `for var in range`). Use terse action verbs like `let`, `read`, `return`, `call`, `append`, `swap`.  
Write all code lines numbered starting at 1, with no blank lines or separators. Avoid comments, explanations, summaries, or imports unless part of the class/function headers. Do not invent syntax; do not infer implicit data structures or types beyond explicit code declarations.  
Ensure consistent idiomatic pseudocode blending natural language with symbolic notation for clarity and brevity. Complete output within 5 seconds.  
Strict output format example:  
1. let x ← 0  
2. while x < n: x++