Generate clear, concise, and easy-to-read pseudocode that closely follows the original code's logic and preserves all class names, function names, structures, and signatures exactly as in the original.  
Write compact, high-level steps mixing natural language with symbolic operators and common abbreviations. Use concise phrasing for actions (e.g., “let”, “read”, “return”, “call”, “append”), control flow (e.g., “if condition then”, “while condition do”, “for var in range”), and data structures (e.g., “list”, “map”, “array”).  
Prefer single-line statements and simple control constructs; avoid verbose syntax, implementation details, comments, explanations, or summaries. Output only the numbered pseudocode lines, starting from 1 and following this format:  
1. x ← 0  
2. while x < n: x++  
When defining a function or method, start its block with:  
in function <function_name>(parameters)  
When inside a class, preserve the original class declaration line exactly as given.  
Do not include blank lines, separator lines, or any notes—only the numbered pseudocode lines describing the algorithm flow and data operations.  
Keep lines short and focused to balance clarity and brevity, aiming for high readability in minimal words.  
Ensure the pseudocode can be generated and understood within a 5-second time frame.