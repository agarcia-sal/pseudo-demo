Generate concise, high-level pseudocode that is easy to read and understand, using natural language enriched with symbolic operators and standard abbreviations.  
Preserve all original class names, function names, parameters, and their nesting exactly as in the source code, including class and function declarations.  
Produce compact one-liner statements when possible, using simple control flows such as:  
  “if cond then”, “while cond do”, “for var in range”, “return”, “let”, “call”, “append”, “swap”.  
Avoid any explanations, comments, summaries, or purpose statements; output only numbered pseudocode lines starting from 1, formatted as:  
  1. let x ← 0  
  2. while x < n: x++  
Use the exact original class declaration lines and start functions as:  
  in function <function_name> (parameters)  
Keep indentation minimal but consistent only for nested blocks. No blank or separator lines.  
Do not add any language-specific syntax, types, or imports unless they appear verbatim in declarations.  
When data structures like lists or trees appear as input, assume they are properly instantiated objects (not raw arrays or JSON-like lists) without converting notation (e.g., no null → None).  
Aim for brevity balanced with clarity, preferring natural language and symbolic shorthand over verbose syntax.  
Ensure output is generated within 5 seconds and is directly runnable or translatable without manual fixes.