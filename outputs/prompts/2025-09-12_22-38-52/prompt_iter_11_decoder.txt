Translate the given pseudocode into complete, idiomatic, and efficient Python code, strictly preserving all class names, function/method names, and the exact input/output signatures and object-oriented structure from the pseudocode. Your output must follow these precise instructions:

- Place the entire solution inside one Python code block marked with triple backticks and the `python` language tag:  
  ```python  
  ...code...  
  ```  
- Fully implement all described functionality—no partial code, placeholders, or omissions.
- Preserve all class names, function names, method signatures, parameter names, and return types exactly as given.
- When inputs represent complex data structures (e.g., binary trees, linked lists) as lists or arrays, automatically generate robust, well-tested, and safe factory/conversion methods inside the relevant classes (e.g., `TreeNode`, `ListNode`) to create correct Python object structures from these inputs.  
- Ensure the main solution methods consume only properly instantiated data structures (not raw lists) and never assume raw list inputs internally. If pseudocode implies such structures, convert them at the interface.
- Properly map pseudocode nullability (`null`, `None`) and data types to Python idioms, using accurate type hints from the `typing` module (`Optional`, `List`, `Dict`, etc.) wherever reasonable and beneficial.
- Explicitly include *all* necessary standard or third-party imports at the top (from collections, typing, heapq, itertools, etc.)—never omit imports.
- Normalize pseudocode names like `null` to Python’s `None` in your conversions and code.
- Do not add any extra explanation, comments, print/debug statements, or separators inside or outside the code block—only the final, runnable solution.
- Your code must be runnable as-is without modifications and fulfill the logic of the pseudocode exactly.
- Prioritize clear, concise, pythonic style and efficiency tuned for a 5-second runtime limit.
- For large or complex data structure helpers, cover common edge cases robustly, such as empty inputs or all-null values.
- Use best practices for BFS/DFS builder methods for trees, iterative/dummy-head approaches for linked lists, and careful null handling to avoid runtime errors.
- Importantly, detect and convert any pseudocode input that is a list representing a data structure *automatically* inside the code—not left as raw lists to the user.

Here is the pseudocode to be translated: