Generate concise, clear pseudocode that is easy to read and high-level, using mostly natural language with symbolic operators and common abbreviations.  
Preserve all original class names, function names, parameter names, and structures exactly as in the source code, maintaining their nesting and declarations.  
Use one-line or minimal-line statements where possible, with simple control flow (e.g., “if cond then”, “while cond do”, “for var in range”) and concise actions (e.g., “let”, “read”, “return”, “call”, “append”, “swap”).  
Avoid detailed implementation specifics, verbose syntax, comments, explanations, summaries, or any purpose statements—output only the pseudocode lines.  
Number each line sequentially starting at 1, formatting like:  
1. x ← 0  
2. while x < n: x++  
Start functions with:  
in function <function_name> (parameters)  
Start classes with the exact original class declaration line.  
Do not add blank or separator lines; output only the numbered pseudocode steps.  
Focus on balancing brevity with readability—use enough natural language for clarity but keep lines compact.  
Do not include any language-specific types or imports unless they appear verbatim in class or function signatures.  
Ensure output can be reliably generated and read within 5 seconds.