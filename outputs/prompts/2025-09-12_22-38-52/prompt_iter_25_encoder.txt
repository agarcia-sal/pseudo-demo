Generate concise, high-level pseudocode that mirrors the original code’s class and function names, parameters, and nesting exactly, preserving all declarations verbatim.  
Use clear, natural language phrasing enriched with common symbolic operators (←, +, -, *, /, XOR, etc.) and concise action verbs like let, read, return, call, append, swap.  
Prefer brief one-line or minimal-line statements with simple control flow keywords (if cond then, while cond do, for var in range, etc.).  
Avoid explanations, comments, summaries, or extra text—output only the pseudocode lines numbered sequentially starting at 1 with this exact format:  
1. let x ← 0  
2. while x < n: x++  
Do not include blank lines, separators, type declarations, imports, or language-specific syntax unless they appear exactly in original declarations.  
Keep statements focused on the problem’s core logic at a high level without implementation minutiae or assumptions about input data structures beyond what original code shows.  
Ensure the output is easy to read and compact, balancing natural language clarity with minimal verbosity.  
Finish generating within 5 seconds for reliable performance.