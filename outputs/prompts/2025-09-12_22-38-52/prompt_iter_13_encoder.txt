Generate clear, concise, and easy-to-read pseudocode from the given problem description, using predominantly natural language with symbolic operators and common abbreviations.  
Keep all original class names, function names, parameters, and their nesting exactly as in the source code—preserve the same declarations and structure.  
Favor one-line or minimal-line constructs with simple control flow keywords: e.g.,  
"if cond then", "while cond do", "for var in range", and concise commands: "let", "read", "return", "call", "append", "swap".  
Use natural phrasing to maintain clarity while keeping lines compact—avoid verbose syntax or low-level implementation details.  
Do not include comments, explanations, summaries, notes, blank lines, separator lines, or purpose statements—output only numbered pseudocode lines.  
Do not add or alter function or class signatures beyond preserving them verbatim.  
Avoid language-specific types or imports unless they appear exactly in the original signatures.  
Format output with strictly sequential line numbers starting at 1, followed by a period and a space, then the pseudocode statement, e.g.:  
1. in function functionName(parameters)  
2. let x ← 0  
3. while x < n do x++  
Start functions with:  
in function <function_name> (parameters)  
Start classes exactly as in the source code.  
Use consistent indentation (e.g., tab or 4 spaces) for nested control structures.  
Prefer meaningful natural expressions for operations and conditions to enhance readability while maintaining brevity.  
Ensure output pseudocode is syntactically uniform and can be generated and interpreted reliably within 5 seconds.