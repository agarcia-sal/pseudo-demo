Translate the given pseudocode into fully functional, idiomatic, and efficient Python code, preserving exactly all class names, method names, function signatures, and any object-oriented structure indicated by the pseudocode. Your output must adhere strictly to the following requirements:

- Enclose the entire code in a single Python code block marked with triple backticks and the language tag: ```python ... ```
- Implement every part of the pseudocode completely—no partial implementations or omissions.
- Preserve function and method names exactly as given, and maintain their input parameter names and types.
- Automatically infer and handle any necessary data structure conversions for inputs or outputs. For example, when input parameters represent trees or linked lists as lists or arrays, generate robust helper methods or factory functions inside the respective classes to convert these inputs into the corresponding data structures. Similarly, make sure that the actual methods in the solution never assume inputs are raw Python lists if the pseudocode indicates otherwise.
- Define all required helper classes, methods, and functions, including constructor and factory methods for treating common data structures such as binary trees and linked lists, ensuring these helpers handle edge cases (empty inputs, None/null values) safely.
- Correctly map pseudocode data types and nullability notions (e.g., None/null) to their Python equivalents, applying appropriate type annotations using the `typing` module when possible.
- Include all necessary standard library imports explicitly at the top of the code block (e.g., collections, typing, heapq, etc.) and do not omit them.
- Avoid any code or text outside the code block, including explanations, comments, print statements, or debug output.
- Do not add extra text, separators, or or formatting—only the relevant Python code.
- Strive for clear, concise, and pythonic implementations; ensure the code is optimized to execute efficiently within a 5-second timeout.
- Ensure the generated code is directly runnable without modification and faithfully implements the logic described in the pseudocode.

Here is the pseudocode to be translated: