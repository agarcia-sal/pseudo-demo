Generate concise, clear, and easy-to-read pseudocode that is high-level but uses natural language with symbolic operators and common abbreviations to enhance clarity and compactness.  
Preserve all original class names, function names, parameters, and their nesting and declarations exactly as in the source code.  
Prefer short, one-line or minimally multiline statements using simple, direct control flow constructs like:  
  “if cond then”, “while cond do”, “for var in range”, etc.  
Use concise actions such as “let”, “read”, “return”, “call”, “append”, “swap”, and symbolic assignments like “←”, avoiding verbose syntax or detailed implementation specifics.  
Do not include comments, explanations, summaries, or any notes—output only the numbered lines of pseudocode, strictly incremental starting at 1, with the format:  
  1. x ← 0  
  2. while x < n: x++  
Start classes with their original declaration line exactly.  
Start functions with:  
  in function <function_name> (parameters)  
Do not add blank or separator lines.  
Avoid any language-specific types or imports unless verbatim in original signatures.  
Ensure the output pseudocode can be generated quickly (within 5 seconds) and balances brevity with natural language readability without oversimplification.  
Do not alter input data formats or object structures; assume all inputs are in original code’s native form (e.g., actual objects, not raw lists or null literals).  
Focus on producing a correct, clean, and minimal pseudocode representation faithful to the source code structure and names.