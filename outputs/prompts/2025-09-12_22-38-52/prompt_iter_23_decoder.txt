```python
Translate the given pseudocode into fully functional, idiomatic, and optimized Python code that directly and faithfully implements all logic, maintaining all class names, function signatures, and object-oriented structure exactly as indicated.

Your output must meet all these strict criteria:

- Output only a single Python code block using triple backticks with `python` as the language tag: ```python ... ```
- Implement every detail from the pseudocode without omission or partial implementation.
- Preserve all class names, method names, and function signatures precisely as given, including input parameter names and types.
- If any input parameters represent complex data structures (such as trees or linked lists) given as raw lists/arrays in the pseudocode, provide robust, fully encapsulated helper factory methods or static methods within relevant classes to convert these inputs into proper class instances before use. The core solution methods must always operate on constructed class instances, never raw lists.
- Handle nullability and missing values safely and explicitly: e.g., interpret pseudocode `null` or `None` as Python `None`. Sanitize inputs at factory creation.
- Include all commonly used standard library imports explicitly at the top of the code block: for example, collections (deque, defaultdict), typing (Optional, List, Dict, Union), heapq, itertools, functools, math, etc., depending on usage.
- Define all necessary helper classes, methods, and functions, including constructors and factory methods, ensuring edge cases (empty inputs, None values) are correctly handled.
- Use precise, modern Python typing annotations throughout, using the `typing` module.
- Ensure the generated code is standalone and runnable without any need for modifications.
- Do NOT output anything outside the single Python code blockâ€”no comments, explanations, debug info, or extra text.
- Use clear, concise, and pythonic code patterns. Prioritize code readability without sacrificing performance.
- Optimize code to complete within a 5-second timeout on typical inputs.
- When translating pseudocode control flow and data types, enforce correct Python idioms, e.g., use `is None` and `is not None` for null checks, always use `==` or `!=` properly, etc.
- Where pseudocode uses symbolic constants like `null`, always convert them to `None` in Python.
- Always initialize and update all variables explicitly; don't rely on implicit behaviors.
- Where pagination of inputs or traversal is necessary (e.g., for tree construction), implement complete and bug-free construction logic robustly, validating indices and presence of nodes.
- When multiple helper utilities are needed (like building TreeNode from list, or ListNode from list), implement these inside the related classes as `@staticmethod` converters named clearly.
- Avoid any assumptions about input format beyond what pseudocode indicates; handle edge cases gracefully.
- Your output must be exactly one Python code block fulfilling all above conditions, ready for immediate execution.

Here is the pseudocode to be translated:
```