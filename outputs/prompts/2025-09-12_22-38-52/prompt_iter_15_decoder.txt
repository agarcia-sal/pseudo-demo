Translate the provided pseudocode into clean, fully functional, idiomatic, and efficient Python code that strictly preserves all class names, function/method names, signatures, and object-oriented structure exactly as indicated. Your output must conform precisely to the following requirements:

- Enclose the entire solution in a single Python code block using triple backticks and the language tag:  
  ```python  
  ...  
  ```  
- Implement every aspect of the pseudocode completely and correctly—no partial or omitted features.  
- Keep all class and method/function names exactly as given, including parameter names and order, and retain the class/object structure.  
- Inputs that represent complex data structures (e.g., trees, linked lists) as lists/arrays must be converted inside your code into their corresponding data structures via robust factory or helper methods defined within the same class or relevant class. These helpers must properly handle edge cases such as empty inputs, and inputs containing `None` or `null` (mapping these to Python’s `None`).  
- Ensure your main solution functions/methods never assume raw lists as inputs where the pseudocode implies structured inputs. Instead, use the factory/helper methods automatically to convert inputs.  
- Use explicit and appropriate Python type annotations from the `typing` module wherever relevant and possible, keeping faithful to nullability and type semantics in the pseudocode.  
- Explicitly import all Python standard library modules your code depends upon at the top of the code block (e.g., `from collections import deque`, `from typing import Optional, List`, etc.). Do not omit any imports.  
- Correctly and consistently map pseudocode nulls (`null`) to Python `None`, and ensure input preprocessing or parsing handles this so the code runs without `NameError`s related to undefined `null`.  
- Avoid any text, comments, explanations, print/debug/output statements, or separators outside the code block. Only output the Python code.  
- Strive for idiomatic, clean, concise, and well-optimized Python code that executes efficiently within a 5-second timeout.  
- The entire code you generate should be directly runnable as provided without modification, faithfully implementing the logic described by the pseudocode.  
- Use all needed Python packages from the standard library and consider including only those absolutely necessary to maintain minimal, performant code.

Here is the pseudocode to be translated: