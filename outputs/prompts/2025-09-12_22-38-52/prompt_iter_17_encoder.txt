Generate succinct, high-level pseudocode that is clear and natural to read. Use mostly plain language with symbolic operators and common abbreviations.  
Preserve all original class names, function names, and parameter names exactly, maintaining their full nesting and declaration structure.  
Prefer compact, one-line or minimal-line statements using simple control flow constructs:  
 • if condition then  
 • while condition do  
 • for variable in range / for element in collection do  
Use concise action verbs such as: let, read, return, call, append, swap, set.  
Avoid detailed implementation details, language-specific syntax, comments, explanations, summaries, or additional text—output only the pseudocode lines.  
Number every pseudocode line sequentially from 1, using this format:  
1. x ← 0  
2. while x < n: x++  
Start functions with:  
in function <function_name>(parameters)  
Start classes with the exact original class declaration line.  
Do not insert blank lines or separators; output only numbered pseudocode lines.  
Do not invent or substitute type annotations or data structures not explicitly declared in the original code.  
Do not interpret or transform input data formats; assume input variables (e.g. tree roots, lists) are already provided as specified.  
Balance brevity and clarity—use enough natural language for easy understanding while keeping lines compact and focused.  
Ensure output pseudocode can be confidently parsed and executed within 5 seconds.