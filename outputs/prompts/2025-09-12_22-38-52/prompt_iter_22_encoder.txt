Generate clear, compact pseudocode that directly reflects the given code’s logic and structure, emphasizing readability through natural language enriched with common symbolic operators and concise programming abbreviations.  
Preserve all original class names, function names, parameters, and their nesting exactly as in the source, including full class and function declaration lines verbatim.  
Prefer succinct one-line or minimal-line statements using simple control flow keywords such as “if cond then”, “while cond do”, “for var in range”, etc. Use concise action verbs like “let”, “read”, “return”, “call”, “append”, “swap”, and symbolic operators (←, +, -, *, /, XOR, etc.).  
Avoid all explanations, comments, summaries, or clarifications—output only pseudocode lines numbered sequentially starting at 1, strictly formatted as:  
1. let x ← 0  
2. while x < n: x++  
Do not include blank lines or separators. Do not add any imports, type declarations, or language-specific constructs unless verbatim from original classes or function signatures.  
Use more natural language phrasing for clarity but keep statements brief and tightly composed, focusing on high-level logic without implementation minutiae.  
Ensure the pseudocode is consistent with input data formats seen in the original code (e.g., do not assume lists for tree nodes unless specified).  
Finish within 5 seconds for reliable performance.