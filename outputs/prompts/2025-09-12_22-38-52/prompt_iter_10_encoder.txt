Generate clear, concise, and high-level pseudocode that prioritizes readability and brevity by using natural language enriched with symbolic operators and common abbreviations.  
Strictly preserve all original class names, function names, parameter names, and their nesting and declarations exactly as in the input code.  
Begin class blocks using the exact original class declaration lines. Begin functions with:  
 in function <function_name> (<parameters>)  
Favor one-line or minimally-lined statements where logical, such as:  
 if cond then action  
 while cond do action  
 for var in range do action  
Use simple, explicit verbs for actions (let, read, return, call, append, swap) and symbolic notation (←, +, -, *, /, XOR, etc.).  
Avoid all comments, explanations, summaries, notes, or purpose statements—output only numbered pseudocode lines.  
Number each line sequentially starting from 1 with the format:  
1. let x ← 0  
2. while x < n do x++  
Do not insert blank lines or separators.  
Do not include language-specific imports, data types, or syntactic details unless they appear verbatim in class/function signatures.  
Express control flow clearly but concisely; use natural language enough for clarity but keep lines compact to support quick reading and generation under 5 seconds.  
Do not modify or invent variable or function names; keep all identifiers as in the source.  
Ensure the pseudocode accurately represents the input code’s logic and structure.