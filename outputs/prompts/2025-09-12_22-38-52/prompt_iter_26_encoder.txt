Generate pseudocode that is concise, natural, and high-level, emphasizing clarity without verbosity. Preserve all original class names, function names, parameters, and nesting exactly as in the input code, including full class and function headers verbatim.  
Produce numbered lines starting at 1 with no blank lines or separators. Use minimal words per line, favoring symbolic operators (←, +, -, *, /, XOR, etc.), common control structures in compact forms (e.g., `if cond then`, `while cond do`, `for var in range`), and terse action verbs like `let`, `read`, `return`, `call`, `append`, `swap`. Prefer single-line statements when possible.  
Avoid comments, explanations, summaries, or imports unless directly copied from class/function declarations. Do not add language-specific syntax or assumptions beyond what is explicit in the original code (e.g., do not infer data structure formats like list construction for trees unless specified).  
Maintain consistent, idiomatic pseudocode style, combining natural language terms with symbolic notation for brevity and readability. Complete output within 5 seconds.  
Strict output format example:  
1. let x ← 0  
2. while x < n: x++