```python
Translate the given pseudocode into complete, runnable, clean, idiomatic, and optimally efficient Python code while strictly preserving all class names, method names, and function signatures exactly as specified in the pseudocode, including their object-oriented structure.

Your translation must adhere to these enhanced requirements:

- **Delimiter:** Wrap the entire solution inside a single fenced Python code block with triple backticks and the language tag ```python ... ```—output no text outside this block.
- **Exact Naming & Signature:** Maintain all original class names, method names, parameter names, and their order exactly as in the pseudocode; do not alter them.
- **Full Implementation:** Implement every line and logic detail from the pseudocode with no partial or omitted parts.
- **Input Conversion & Helpers:** When inputs represent complex data structures (e.g., binary trees, linked lists, graphs) encoded as nested or flat lists with nullable placeholders (e.g., `null`, `None`), automatically generate robust `@staticmethod` or factory methods inside the relevant classes to convert these inputs into fully constructed object instances. These helpers must:
  - Properly handle and interpret all null-like literals (`null`, `None`, etc.) as Python `None`.
  - Support edge cases such as empty inputs or inputs consisting solely of nulls.
  - Use appropriate standard data structures (queues, stacks, dictionaries) for construction.
- **Type Annotations & Imports:** Use precise Python type annotations employing the `typing` module (e.g., `Optional`, `List`, `Dict`, `Union`) everywhere relevant, including methods in helper classes. Import all necessary standard libraries explicitly at the top of the code block—even if unused after optimization—to ensure code completeness and readiness.
- **Null & Data Type Mapping:** Correctly map pseudocode nulls/none to Python’s `None`, and translate data types idiomatically.
- **No External Text:** Avoid comments, print/debug statements, explanations, or any extra output. Only print the Python code that corresponds entirely to the pseudocode.
- **Direct Run-Ready Code:** The output must be immediately runnable as-is, requiring zero external modification.
- **Efficient, Clean, and Pythonic Code:** Use efficient algorithms and pythonic patterns to ensure the solution runs under 5 seconds time limit. Optimize helper methods for speed and memory.
- **Robustness against Input Formats:** Inputs passed as function/class parameters may be raw lists or nested lists representing complex structures. The main functions and methods must never assume these inputs are directly usable without conversion. Instead, accept native data structures (e.g., `TreeNode`, `ListNode`), and the conversion factory methods must be used explicitly when needed.
- **Consistent Use of Class Structures:** Nest helper methods logically within their respective classes (e.g., `ListNode.from_list`, `TreeNode.from_list`), avoiding global helper function pollution.
- **No Separators or Extra Formatting:** Do not insert separators, banners, or additional formatting text.

Here is the pseudocode to be translated:
```