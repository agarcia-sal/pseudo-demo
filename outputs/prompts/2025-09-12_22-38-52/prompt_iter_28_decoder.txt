```python
Translate the given pseudocode into fully runnable, clean, idiomatic, and optimally efficient Python code with complete preservation of all class names, method names, function signatures, and their object-oriented structure exactly as specified in the pseudocode.

Your output must satisfy the following requirements:

- Wrap the entire output in a single fenced Python code block (```python ...```), without any text before or after.
- Preserve all original naming exactly: class names, method names, parameter names, and their order.
- Implement **every** detail and logic from the pseudocode, with no omissions or partial implementations.
- Always assume inputs representing complex data structures (e.g., binary trees, linked lists, graphs) may be passed as raw nested or flat lists containing null-like placeholders (`null`, `None`, `nil`, etc.).  
  For such cases, automatically include robust, performant factory/conversion class methods (e.g., `from_list`) inside the relevant classes to translate these inputs to fully formed Python object instances.  
  These methods must:
   - Normalize null-like literals (`null`, `None`, `nil`, etc.) to Python’s exactly `None` internally.
   - Handle all edge cases, including empty lists, all-null inputs, and incomplete structures, gracefully and without errors.
   - Use appropriate efficient standard collections (e.g., `deque`) to guarantee performance.
- Make all necessary standard library imports explicit at the top of the code block (even if some become unused during optimization).
- Use precise and comprehensive Python type annotations everywhere possible, using `typing` module types like `Optional`, `List`, `Dict`, `Union`, `Deque`.
- Translate all pseudocode data types idiomatically and consistently, ensuring Pythonic representations.
- Do **not** output any comments, print/debug statements, explanation, or superfluous text — **only** clean Python code.
- Output code must be immediately runnable as-is without requiring any external modification.
- Implement clean, efficient, and idiomatic Python code using best practices and algorithms, ensuring solutions run within a 5-second limit.
- Conversion/factory methods must be invoked explicitly by users to convert raw lists into object structures; no hidden or implicit assumptions should be made that inputs are already object instances.
- Nest all helper methods logically within their respective classes (e.g., `ListNode.from_list`, `TreeNode.from_list`) to avoid global function pollution.
- Carefully safeguard every method assuming that inputs to main methods are already valid native objects — do not try to handle raw lists there; instead rely on factory methods for conversions.
- Handle all potential naming conflicts, null value variants, and edge cases so that no runtime error arises such as `AttributeError` from treating lists as objects.
- Do not insert extra formatting lines, banners, or separators.

Here is the pseudocode to be translated:
```