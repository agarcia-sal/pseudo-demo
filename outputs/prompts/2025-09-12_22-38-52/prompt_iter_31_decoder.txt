```python
Translate the provided pseudocode into fully functional, runnable, clean, idiomatic, and optimized Python code, strictly preserving all class names, method names, parameter names, their orders, and the original object-oriented structure exactly as specified.

Adhere to these robust requirements to maximize correctness and efficiency:

- **Output Format:** Wrap your entire answer inside a single, contiguous fenced Python code block using triple backticks and the tag ```python ...``` with no text outside this block.
- **Exact Naming & Structure:** Keep all class, method, and function names exactly as in the pseudocode; do not rename or reorder parameters or modify the class hierarchy or structure.
- **Complete Implementation:** Fully implement all pseudocode logic line-by-line without omission, including all branches, conditions, and loops.
- **Automatic Robust Input Conversions:** When inputs represent complex data structures (trees, linked lists, graphs, etc.) provided as nested or flat lists containing any null-equivalent literals (`null`, `None`, `nil`, `nil`-like strings, or similar), create precisely scoped, robust factory/conversion methods (e.g., `from_list`) inside their respective classes to transform these inputs into fully realized native Python objects. These methods must:
  - Handle all null-like values by mapping them explicitly to Python `None`.
  - Correctly handle edge cases including empty input lists, all-null inputs, and varying input shapes.
  - Use efficient, standard Python data structures (`deque`, `dict`, `set`) internally for construction.
  - Guarantee the resulting instances perfectly replicate the intended structure.
- **Type Hints & Imports:** Include comprehensive and precise type annotations throughout, leveraging the Python `typing` module (`Optional`, `List`, `Dict`, `Union`, etc.). Clearly import all standard Python packages your implementation requires—include even those imports that may become unused after optimization to guarantee completeness.
- **Null & Data Type Handling:** Consistently map pseudocode nulls (`null`, etc.) to Python’s `None` and translate other data types idiomatically with no ambiguity.
- **No Extraneous Output or Comments:** Your output should contain *only* the final Python code—no explanations, print statements, debug lines, comments, or any extraneous characters or text.
- **Run-Ready, Zero-Modification Code:** The code you produce must be immediately runnable as-is, requiring no manual post-processing or fixing.
- **Optimal Efficiency:** Use the most effective and pythonic data structures and algorithms to ensure performance well within a 5-second runtime limit, including efficiency and memory optimizations particularly in helper methods.
- **Input Validation & Layered Conversions:** Do not assume inputs to main methods/functions are already native objects. Main interfaces must accept native data structures like `TreeNode` or `ListNode` only, never plain lists. Conversion from raw input lists to these native objects must be performed explicitly and separately via the class-level factory/conversion methods. This prevents runtime errors such as attribute errors when list inputs are incorrectly passed directly.
- **Encapsulation & No Pollution:** Define all helper methods only within the relevant classes (e.g., `TreeNode.from_list()`, `ListNode.from_list()`) or as static/class methods. Avoid creating global or loose helper functions.
- **Consistent Style:** Use idiomatic, clean Python 3+ style, including usage of `@staticmethod`, helper variables with clear naming, and appropriate separation of concerns.

Here is the pseudocode to translate:
```