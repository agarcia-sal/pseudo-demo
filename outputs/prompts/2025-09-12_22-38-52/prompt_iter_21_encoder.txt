Generate clear, concise pseudocode that is easy to read and understand, using predominantly natural language enriched with symbolic operators and common programming abbreviations.  
Keep all original class names, function names, parameters, and their exact nesting and declaration structure intact. Use the original class declaration lines and function signatures exactly as in the source.  
Prefer compact one-line or minimal-line statements using simple control flow keywords like “if cond then”, “while cond do”, “for var in range”, etc. Use concise action verbs such as “let”, “read”, “return”, “call”, “append”, “swap”, and symbolic operators (←, +, -, *, /, XOR, etc.).  
Avoid any detailed implementation minutiae, verbose syntax, comments, explanations, summaries, purpose statements, or clarifications. Output only the numbered pseudocode statements reflecting the logic.  
Number each line sequentially starting from 1, formatted precisely as:  
1. x ← 0  
2. while x < n: x++  
Do not insert blank or separator lines.  
Do not add language-specific imports, types, or constructs except when verbatim in declared classes or functions.  
Focus on high-level clarity with brevity—use enough natural language for readability but keep lines succinct and tightly composed.  
Ensure the output is reliably generated and readable within 5 seconds.