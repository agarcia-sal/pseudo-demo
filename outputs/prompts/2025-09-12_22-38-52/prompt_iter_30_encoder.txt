Generate concise, clear, and high-level pseudocode preserving all original class and function names, parameters, and nesting exactly as in the input code, including full headers verbatim. Use natural language combined with standard symbolic operators (←, +, -, *, /, XOR, etc.) and common control structures in compact forms (e.g., `if cond then`, `while cond do`, `for var in range`). Favor terse, action-oriented verbs (e.g., `let`, `read`, `return`, `call`, `append`, `swap`). Prefer single-line statements and compact expressions without extra blanks or separators.  
Avoid any comments, explanations, notes, summaries, or import statements unless part of original class/function declarations. Do not infer data formats or add language-specific constructs beyond input code.  
Number all output lines starting from 1 with no blank lines or separators. Indent nested blocks consistently using either spaces or tabs from the original. Complete output within 5 seconds.  
Output only the pseudocode with no additional text or formatting beyond the numbered lines.  

Example formatting style:  
1. let x ← 0  
2. while x < n: x++