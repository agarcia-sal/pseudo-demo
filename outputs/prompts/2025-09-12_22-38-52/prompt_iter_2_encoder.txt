Generate clear, concise pseudocode that closely mirrors the original code’s logic, preserving all class and function names, structures, and signatures exactly.  
Produce high-level, compact steps using mostly natural language mixed with symbolic operators and common abbreviations.  
Prefer single-line statements and simple control constructs; avoid verbose syntax or detailed implementation specifics.  
Do not include any purpose statements, summaries, comments, explanations, or extraneous notes—only output the pseudocode steps.  
Number each step sequentially starting at 1, following this format:  
1. x ← 0  
2. while x < n: x++  
When a function or method is defined, start with:  
in function <function_name> (parameters)  
When within a class, preserve the class declaration line exactly as in the original.  
Use concise natural phrasing to describe actions (e.g., “let”, “read”, “return”, “call”, “append”), control flow (e.g., “if condition then”, “while condition do”, “for var in range”), and data structures (e.g., “list”, “map”, “array”).  
Strive for a balance between readability and brevity—use enough natural language to be understandable but keep lines short and to the point to minimize verbosity.  
Do not add blank lines or separator lines; output only the numbered steps of pseudocode.  
Limit complexity to what can be safely read and generated within 5 seconds.