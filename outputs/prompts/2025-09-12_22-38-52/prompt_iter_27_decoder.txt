```python
You are tasked with translating the given pseudocode into fully working, clean, idiomatic, and performant Python code with these strict requirements:

- Output only a single fenced Python code block with ```python at the start and ``` at the end. No extra text, comments, or explanation.
- Preserve all class names, method names, parameter names, and signatures exactly as given in the pseudocode—no renaming or signature changes.
- Maintain the exact class hierarchy and object-oriented structure as described by the pseudocode.
- Fully implement every line and logical detail of the pseudocode, leaving nothing partial or omitted.
- For any complex input data structures represented as lists or nested lists (e.g., binary trees, linked lists, graphs) that may contain any null-like literals such as `null`, `None`, or similar:
  - Automatically create appropriate robust factory or `@staticmethod` methods inside the respective classes (e.g., `TreeNode.from_list`, `ListNode.from_list`) to convert these raw inputs into fully constructed Python object instances.
  - These factory methods must:
    - Uniformly interpret all null-like placeholders (`null`, `None`, etc.) as Python’s `None`.
    - Handle edge cases gracefully, including empty inputs, all-null inputs, and deeply nested structures.
    - Employ efficient data structures like deque, dict, or stack when building complex structures.
    - Use precise and consistent Python type annotations (from the `typing` module, including `Optional`, `List`, `Union`, `Deque`) for parameters, return types, and attributes.
- Import all necessary standard or widely accepted Python libraries explicitly at the top of the code block, including `typing`, `collections`, or others needed. Even if some imports become unused after optimization, keep them for completeness.
- Do not assume input parameters to main functions/methods are directly usable objects if the pseudocode input format uses raw lists or nested lists. Instead, require explicit conversion via the factory methods you provide.
- Use idiomatic Python style and the most efficient algorithms and data structures to ensure the code runs well within a 5-second time limit on all input sizes.
- Avoid global helper functions; all helper methods and utility functions for conversions must be logically nested inside their corresponding classes.
- Map all pseudocode null-like values to Python `None` consistently in code and conversion helpers.
- No use of print statements, debugging lines, or explanatory comments—output only pure runnable Python code.
- The final provided code must be complete, runnable as-is, with no need for external modifications, so that internal tests calling exported methods or classes never receive raw lists directly but properly typed objects.
- Do not output any separator lines, banners, or extra formatting.
- Use any standard Python packages or modules needed to optimize clarity, correctness, and runtime performance.

Here is the pseudocode to translate:
```