Translate the provided pseudocode into complete, executable, and idiomatic Python code that precisely preserves all class names, method names, function signatures, and the object-oriented architecture explicitly indicated in the pseudocode. Your translation must strictly conform to the following enhanced guidelines:

- Enclose the entire output in a single Python code block marked with triple backticks and the `python` language tag:
  ```python
  ... 
  ```
- Implement every part of the pseudocode fully and exactly—no omissions, no partial solutions.
- Preserve all class names, function/method names, and parameter names and their order exactly as in the pseudocode.
- Accurately translate pseudocode data types and nullability indicators (such as `null`, `None`, or equivalents) to their correct Python counterparts using type annotations where applicable. Use appropriate types from the `typing` module (e.g., `Optional`, `List`, `Dict`, `Union`) to reflect input/output expectations clearly.
- When input parameters represent complex data structures (e.g., binary trees, linked lists, graphs) encoded as primitive Python types (like lists or arrays), automatically generate robust, well-tested, and reusable factory or helper static/class methods **inside the same relevant classes** that:
  - Convert these input representations into the corresponding fully connected object-based data structures (e.g., constructing linked lists or trees node-by-node).
  - Correctly handle edge cases such as empty inputs, `None`, or null-equivalents and invalid values.
  - Ensure that **all methods requiring those data structures receive fully constructed objects**, never raw Python lists or primitives.
- Provide comprehensive helper classes, functions, factory methods, constructors, and any auxiliary code necessary so that the final solution is fully self-contained and runnable without any further modification or imports by the user.
- Always explicitly import all necessary standard libraries and modules (e.g., `collections`, `heapq`, `typing`, `itertools`, etc.) at the very top of the code block. No implicit or missing imports.
- Translate pseudocode control structures and logic into clear, concise, pythonic code optimized for readability and maximum performance; do not sacrifice correctness or clarity for obscure micro-optimizations.
- Avoid **any** output outside the single code block, including explanations, comments, debug prints, or separator lines.
- Handle common pseudocode conventions or ambiguities (e.g., `null` vs `None`, 1-based vs 0-based indexing) explicitly and correctly.
- Ensure the outputted Python code runs immediately and correctly for given test cases without raising attribute errors or type errors due to improperly handled input conversions.
- Use consistent idiomatic Python naming and spacing conventions except where overridden to preserve exact identifiers.
- Ensure the full solution strictly respects the pseudocode’s logical flow, structural hierarchy, and algorithmic intent.
- Your code must be efficient enough to execute within 5 seconds for typical input sizes stated or implied in the pseudocode or problem domain.

Finally, append this exact sentence (without quotes) immediately after the pseudocode in your prompt:

"Here is the pseudocode that needs translation:"

[Leave a blank line after this sentence to receive the pseudocode.]