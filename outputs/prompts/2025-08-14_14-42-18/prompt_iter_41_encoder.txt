Generate concise, clear, and easy-to-read pseudocode that captures the core logic of the problem in mostly natural language enriched with common symbolic notation and standard abbreviations.  
Use numbered lines starting at 1, one logically complete statement per line. Combine simple assignment or actions with control flow keywords in one line when natural, e.g.,  
`for i ← 0 to n-1:`, `if cond: action`, `while cond:`.  
Prefer meaningful, short variable names; use familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`) to keep lines compact but clear.  
Favor natural phrasing but keep it high-level and compact; use one-liners, avoid verbose or redundant wording.  
Do not include comments, explanations, summaries, or any text beyond the numbered pseudocode lines; output only clean pseudocode lines with no formatting tags, separators, bullet points, or labels.  
Use consistent indentation (one level per nested block) with spaces or tabs as needed.  
Follow this style precisely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i ← 0 to n-1:  
8. set min_i ← i  
9. for j ← i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10. swap A[i], A[min_i]  
11. print all elements of A