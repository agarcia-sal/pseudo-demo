Generate concise, clear, and high-level pseudocode from the given problem description using a natural but compact style that balances readable language and standard symbolic notation. Output only numbered lines starting from 1, one complete instruction per line, preferring short one-liners (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`). Use meaningful, simple variable names and standard operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`). Employ natural language phrases where clarity benefits (e.g., `read n as integer`, `print result`), but keep lines succinct and avoid verbosity. Do not include comments, explanations, extra formatting, separators, or labels; output only pure pseudocode lines. For control flows, use indentation only when strictly needed to show blocks; otherwise, prefer concise inline forms. Maintain numeric line order and minimal punctuation to maximize clarity and compactness. Follow exactly this style example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i ← 0 to size of A - 1:  
8. set min_i ← i  
9. for j ← i + 1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10. swap A[i], A[min_i]  
11. print all elements of A