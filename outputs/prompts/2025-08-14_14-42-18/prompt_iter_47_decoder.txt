```plaintext
You are given pseudocode describing an algorithm or program logic. Your task is to translate it into an optimized, production-ready Python program that precisely implements the pseudocode with high efficiency, correctness, and robustness. 

Strict requirements:

- Output **only** a single complete Python program enclosed strictly in a single fenced code block labeled:
```python
# entire program here
```
- Use plain `input()` calls for all inputs—no prompts, no extra strings.
- Include **all necessary imports and definitions explicitly** so the program is runnable as-is.
- You may use any standard Python libraries and popular third-party packages (e.g., numpy, collections, itertools) to write clear, efficient, and idiomatic code.
- The program must run correctly and efficiently within a 5-second runtime constraint; prioritize algorithmic optimization, minimizing time and memory overhead.
- Precisely follow the input/output formats implied by the pseudocode: do not produce extraneous output such as debug, logging, or explanatory text.
- Handle every edge case logically inferable from the pseudocode; ensure robustness for all valid inputs.
- Prefer Pythonic constructs: comprehensions, generators, built-in functions, efficient data structures, vectorized operations, and algorithmic optimizations over naive or brute-force approaches.
- Avoid unnecessary loops, repeated computations, redundant casts or copies; leverage lazy evaluation and streaming computations wherever applicable.
- Use meaningful variable and function names consistent with the pseudocode and Python conventions to maximize readability without sacrificing brevity.
- Modularize code into functions or classes only if it improves clarity or reuse; otherwise, a concise global-script style solution is acceptable.
- Ensure the final code runs without any manual modifications or environment setup beyond standard Python or common packages.

Your response must consist solely of the final Python code block—no comments outside the block, no explanation, no extra text.
```