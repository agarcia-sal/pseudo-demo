```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to translate it into a concise, efficient, and production-quality Python program that precisely implements the given instructions. 

Strictly adhere to the following rules:

- Return only the entirety of your Python code enclosed in a single code block labeled ```python
``` with no extra text, explanation, or comments outside the code block.
- Use plain `input()` with no prompts for all input operations; do not output or include any input messages or formatting.
- Include all necessary imports explicitly; do not omit any dependencies.
- Your code must run correctly and efficiently within a 5-second time limit, optimized for runtime and memory use.
- Exploit Pythonâ€™s idiomatic, high-level features including comprehensions, generators, built-in functions, efficient data structures, standard library, and popular third-party libraries if helpful (e.g., numpy, collections).
- Fully cover all edge cases implied or reasonably inferable from the pseudocode.
- Match output format exactly as implied by the pseudocode: no extra prints, debug info, or formatting.
- Avoid redundant computations, unnecessary data copying, or inefficient constructs. Use lazy evaluation or streaming when possible.
- Use clear and meaningful variable names aligned with pseudocode conventions or common Python style.
- Modularize via functions or classes only if it improves clarity or performance; otherwise a clear, minimal global script is acceptable.
- Ensure your solution executes correctly and immediately on standard Python 3 environments without manual setup.

Produce the final optimized Python code implementing the pseudocode accordingly, enclosed within the exact markdown format below:

```python
# your full Python solution here
```
