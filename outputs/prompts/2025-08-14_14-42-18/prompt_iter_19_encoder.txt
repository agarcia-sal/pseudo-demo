Generate clear, concise, high-level pseudocode from the given problem description that balances natural language readability with compact symbolic notation. Use simple, meaningful variable names and standard operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `<=`, `>=`) for clarity and brevity. Express control structures and assignments primarily in short one-liners combining action and flow (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`). Number each pseudocode line starting at 1; each line must contain exactly one instruction or a logically grouped, succinct expression. Avoid comments, explanations, summaries, or extra text—output only the numbered pseudocode lines as plain text. Do not include separators or metadata. The style should emphasize compactness while preserving readability, for example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i ← 0 to n-1:  
7. set min_i to i  
8. for j ← i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
9. swap A[i], A[min_i]  
10. print all elements of A