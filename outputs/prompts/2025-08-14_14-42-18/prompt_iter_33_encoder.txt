Generate clear, concise, and readable pseudocode that is compact and high-level, using mostly natural language enhanced with symbolic notation and common abbreviations.  
Write each instruction as a single numbered line starting at 1, with exactly one logically grouped statement per line.  
Favor short one-liners combining actions and control flow where appropriate, such as `for i ← 0 to n-1:`, `if cond: action`, or `while cond:`.  
Use meaningful, simple variable names and familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`) for clarity and brevity.  
Produce the pseudocode without any comments, explanations, or extra text—only numbered pseudocode lines as plain text.  
Avoid verbose phrasing; prefer succinct, consistent terminology and symbolic expressions to keep lines compact and expressive.  
Do not include separator lines, headers, summaries, or meta information.  

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to n-1:  
8. set min_i to i  
9. for j ← i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10. swap A[i], A[min_i]  
11. print all elements of A