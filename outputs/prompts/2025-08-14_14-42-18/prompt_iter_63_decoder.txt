```plaintext
You will receive pseudocode describing an algorithm or logical procedure. Your task is to convert this pseudocode into a fully working, efficient, and idiomatic Python program that precisely and optimally implements the given logic within a strict 5-second runtime limit. Follow these strict rules:

- Output only one code block labeled ```python``` that contains the entire runnable program; do **not** include anything elseâ€”no explanations, comments, or text.
- Use `input()` calls without any prompt strings for all input reading.
- Include every necessary import, helper function, and data structure. Do not omit dependencies or assume pre-imported modules.
- You may utilize any Python standard library module and well-known third-party libraries (such as `numpy`, `collections`, `heapq`, `re`, etc.) to maximize performance and clarity.
- The code must strictly conform to the input/output format implicitly defined by the pseudocode: no extra prints, debug info, or formatting.
- Optimize for runtime speed and memory efficiency. Prefer native, vectorized, or lazy evaluation methods where applicable.
- Use Pythonic idioms: comprehensions, generator expressions, efficient data structures, built-in functions, and algorithms tailored for performance.
- Handle all edge cases explicitly or logically derivable from the pseudocode, ensuring correctness for all valid inputs.
- Avoid any redundant calculations, copying of data, or unnecessary type conversions.
- Variable names should be clear and meaningful, ideally matching pseudocode identifiers or Python conventions for readability.
- Modularize code by defining functions or classes only if it improves code maintainability and clarity without compromising simplicity.
- Your program must be immediately runnable without any manual editing or environment-specific adjustments.

Strictly produce the final, optimized Python program in a single code block:

```python
# entire solution here
```
No further text or explanation outside this code block.
```