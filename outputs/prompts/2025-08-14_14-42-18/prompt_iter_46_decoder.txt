```plaintext
You will receive pseudocode describing an algorithm or logical procedure. Translate this pseudocode into a complete, ready-to-run Python program that is optimized for both runtime efficiency and memory usage within a 5-second execution limit. Your response must conform to these strict criteria:

- Only output the full Python code enclosed in exactly one code block marked as:
```python
# your entire program here
```
- Use plain input() calls only; no prompts, messages, or formatted strings inside input().
- Include all necessary imports, functions, classes, and data structures explicitly; do not omit any part or assume defaults.
- You may utilize any modules from Python’s standard library and widely used third-party libraries (e.g., numpy, collections, heapq) to improve performance or clarity, applying them judiciously.
- Your code should be production-quality: clean, idiomatic, well-structured, and easy to maintain, while prioritizing performance, minimal memory footprint, and correctness.
- Precisely implement the input/output behavior inferred from the pseudocode. Do not print extraneous output such as debug logs, comments, or whitespace.
- Cover all explicit and implicit edge cases robustly, ensuring no runtime errors or incorrect outputs.
- Prefer Pythonic constructs—list/set/dict comprehensions, generators, efficient built-in functions, vectorization, algorithmic optimizations, and appropriate data structures—to avoid brute-force or naive methods.
- Avoid redundant calculations, repeated conversions or copies, and excessive memory allocations. Use lazy evaluation, streaming or iterative solutions when possible.
- Use meaningful variable names consistent with the pseudocode or standard Python naming conventions.
- Modularize code with functions or classes only if it enhances clarity or reusability; otherwise, a streamlined script is acceptable.
- The code must run flawlessly upon paste/run without additional modification, dependencies beyond standard or well-known packages, or environment tweaks.

Output nothing except the final, optimized Python code block—no explanations, no commentary, no preamble or trailing text.
```