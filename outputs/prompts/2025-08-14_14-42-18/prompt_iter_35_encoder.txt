Generate clear, concise, and compact pseudocode from the problem description using mostly natural language enriched with common symbolic notation and standard abbreviations.  
Output only numbered instructions starting at 1, one logically complete statement per line. Combine simple actions with control flow in one line where natural, e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`.  
Prefer meaningful simple variable names, use familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`) to keep lines short but clear.  
Write pseudocode that is easy to read and understand, favoring natural phrasing but avoiding verbosity. Use compact expressions and one-liners when possible.  
Do not include comments, explanations, or any text beyond the numbered pseudocode lines. Do not use any formatting tags, separators, bullet points, or labels—only clean numbered lines of pseudocode.  
Follow this style exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i ← 0 to n-1:  
7. set min_i to i  
8. for j ← i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
9. swap A[i], A[min_i]  
10. print all elements of A