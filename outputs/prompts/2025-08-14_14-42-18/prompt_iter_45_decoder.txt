```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to produce a fully functional, highly optimized Python program that precisely implements the given pseudocode. 

Requirements:
- Output **only** the complete Python program wrapped in a single code block labeled exactly:
```python
# entire program
```
- Use plain `input()` calls for all inputs; do not include any prompt text, formatting, or extra output.
- Include all necessary imports, helper functions, and data structures explicitly—do not assume any pre-imported modules.
- You may use any Python standard library or widely-used external libraries (e.g., numpy, collections, heapq) to maximize algorithmic performance and memory efficiency.
- Optimize rigorously for runtime (≤5 seconds) and minimal memory usage while adhering strictly to the pseudocode logic:
  * Eliminate redundant computations or data structure copying.
  * Use efficient algorithms and Pythonic idioms: comprehensions, generators, vectorized operations, lazy evaluation, builtin functions and methods, and advanced data structures.
  * Handle all edge cases implied or logically deducible from the pseudocode.
- Do not output any diagnostics, debugging information, explanatory comments, or unrelated text.
- Use clear, descriptive, and conventional variable names consistent with the pseudocode and Python best practices.
- Modularize with functions or classes only if it meaningfully improves clarity or reusability; minimal scripts are acceptable.
- Ensure the code executes correctly and immediately in a standard Python 3 environment without external setup.

Your entire response must be exactly and solely the final optimized Python code block—no explanations or anything else outside the block.
```