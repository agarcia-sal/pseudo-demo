```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to translate this into an efficient, clean, and fully functional Python program that strictly follows the pseudocode's instructions and implied input/output format. Adhere precisely to these requirements:

- Provide only the complete Python program inside a single fenced code block labeled ```python```.
- Use plain `input()` calls exclusively for all inputs without prompts or extra formatting.
- Include every necessary import and helper function explicitly; do not omit or presume anything.
- You may use Python standard library and well-known third-party packages (e.g., numpy, collections, itertools) to optimize performance, memory, or clarity.
- Implement all edge cases explicitly or as logically inferable from the pseudocode.
- Prioritize idiomatic, concise, and high-performance code that runs correctly within a 5-second runtime limit.
- Avoid any extraneous output such as debug prints, comments (except optionally inside the code block for clarity), or blank lines outside the code block.
- Use efficient data structures, vectorized operations, comprehensions, generators, lazy evaluation, or algorithmic optimizations wherever applicable to minimize time and memory.
- Use clear, conventional Python variable names consistent with the pseudocode and standard idioms.
- Define functions or classes only if they enhance modularity, readability, or performance; otherwise, a straightforward script is acceptable.
- Your code should run correctly as-is without manual adjustments or environment configuration.
- Eliminate redundant computations, unnecessary data copying, or conversions.
- Strictly match the input/output formats implied by the pseudocode.
- Your entire response must be solely the final Python code blockâ€”no explanations, no commentary, no additional text.

Respond now with your optimized Python implementation enclosed in exactly this format:

```python
# your complete program here
```
```