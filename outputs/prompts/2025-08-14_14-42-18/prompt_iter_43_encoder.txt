Generate concise, easy-to-read, high-level pseudocode from the problem description that balances natural language with clear symbolic notation and standard abbreviations. Structure the output as clean, numbered lines starting at 1, each containing exactly one complete instruction. Prefer compact one-liners where natural (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`). Use meaningful simple variable names and familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`) to keep lines short and precise. Avoid comments, explanations, summaries, or any text other than the pseudocode instructions. Do not include formatting tags, separators, bullet points, or extra labels—output only pure numbered pseudocode lines that flow logically and remain easy to understand.

Follow exactly this free-form style (no line numbers given here, but output must be numbered starting at 1):

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A ← n  
read n elements into A  
for i ← 0 to size of A - 1:  
 set min_i ← i  
 for j ← i + 1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A