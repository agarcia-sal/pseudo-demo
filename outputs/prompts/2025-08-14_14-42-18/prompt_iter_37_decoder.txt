```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to generate a complete, clean, and highly optimized Python program that precisely implements the pseudocode. Adhere strictly to these instructions:

- Provide your entire solution solely as a single Python code block labeled exactly:
```python
# your entire program here
```
- Use only `input()` without prompts for all input operations.
- Include all necessary imports, helper functions, and data structures explicitly—do not omit or assume any dependencies.
- You may leverage any Python standard libraries and widely used third-party packages (e.g., numpy, collections, itertools, functools) if they improve clarity or performance.
- Write Pythonic and idiomatic code that optimizes for speed and memory within a strict 5-second runtime limit.
- Cover all explicit or logically implied edge cases comprehensively.
- Do not produce any extra output beyond what is required by the pseudocode’s input/output format—no debugging prints, comments, or logs.
- Prioritize usage of efficient algorithms and data structures; prefer vectorized operations, comprehensions, generators, memoization, lazy evaluation, or streaming techniques over naive or brute-force methods.
- Employ meaningful, conventional variable names, aligning with typical Python style and the pseudocode’s terminology whenever possible.
- Structure code to maximize readability and modularity: define functions and classes only if they enhance clarity or reuse; otherwise, a concise script is acceptable.
- Avoid redundant calculations, excessive data copying, or unnecessary conversions. Optimize loops and conditionals carefully.
- Your program must be immediately runnable and portable, requiring no manual modifications or environment-specific configurations.

Your full response must be exclusively the complete Python code block implementing the pseudocode, nothing else.
```