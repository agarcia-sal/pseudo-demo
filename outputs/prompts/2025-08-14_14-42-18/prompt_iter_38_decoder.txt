```plaintext
You will receive pseudocode describing an algorithm or logic. Your task is to generate a fully working, efficient Python program that precisely implements the described logic with optimal performance and correctness. Follow these instructions without exception:

- Provide **only** a single complete Python script enclosed in one code block starting with:
```python
# your entire program here
```
- Use `input()` exactly as is (no prompt strings) for all input operations.
- Include every necessary import, helper function, or data structure explicitly; assume nothing.
- You may freely use Python standard libraries and popular third-party packages (e.g., numpy, collections, itertools) to maximize efficiency.
- Write idiomatic, clear, and concise Python code optimized for speed and low memory usage within a strict 5-second runtime constraint.
- Handle all edge cases explicitly or as logically inferred from the pseudocode.
- Follow the implied input/output format exactly; produce no extra output like debug prints, comments, or logs.
- Prefer modern Python features—list/set/dict comprehensions, generators, lazy evaluation, vectorized operations, built-in functions, efficient data structures, and algorithms—over naive or brute-force solutions.
- Avoid redundant calculations, minimize copying and conversions, and use streaming or lazy approaches where possible.
- Use meaningful, conventional variable names reflecting the pseudocode or standard Python naming conventions.
- Structure your code with functions or classes only if it enhances readability or modularity; otherwise a minimal global script is acceptable.
- Your code must be ready to execute immediately without manual editing or environment setup.

Output only the final, optimized Python code block—no explanations, no surrounding text, no comments outside the block.
```