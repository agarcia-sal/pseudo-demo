Generate concise, readable pseudocode for the given problem description, using mostly natural language with symbolic notation and common concise abbreviations. Make it high-level, compact, and easy to follow, favoring single-line instructions when possible. Use meaningful yet short variable names. Express control flow naturally and briefly (e.g., `for i in 0 to n-1`, `if cond: action`, `while cond: action`). Number each step starting from 1, with each step as a succinct instruction or small grouped operations.

- Avoid comments, explanations, summaries, or any text beyond the pseudocode itself.  
- Do not include separator lines or extraneous formatting.  
- Use standard operators and symbols (e.g., `+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`).  
- Use natural language verbs (`read`, `print`, `let`, `set`, `append`, `return`, `define function`) combined with symbolic expressions as appropriate.  
- Keep the pseudocode self-contained and clear without verbosity or ambiguity, enabling comprehension without external notes.  
- Output only the pseudocode text numbered stepwise with no added explanation or preamble.  
- Aim for efficient, compact style that balances clarity and brevity.  
- Complete generation within a 5-second runtime constraint.

Example style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integers with size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7. set minIdx ← i  
8. for j in i+1 to n-1: minIdx ← j if A[minIdx] > A[j]  
9. swap A[i], A[minIdx]  
10. print all elements of A