Generate concise, high-level pseudocode directly from the problem description using mostly natural language with compact symbolic notation and common abbreviations.  
Write each instruction as a single numbered line starting at 1. Each line must contain exactly one clear, logically grouped statement.  
Prefer short one-liners combining action and control flow when sensible (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`).  
Use simple, meaningful variable names; use familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`).  
Express data structures minimally (e.g., "let A be vector of integers size n"); avoid verbose declarations.  
Do not include comments, explanations, overviews, or any text other than the numbered pseudocode lines.  
Output only the numbered lines as plain text with no extra tags, labels, or formatting separators.  
Keep pseudocode easy-to-read, natural, compact, and high-level to capture algorithm logic clearly and succinctly.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i ← 0 to n-1:  
7. set min_i to i  
8. for j ← i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
9. swap A[i], A[min_i]  
10. print all elements of A