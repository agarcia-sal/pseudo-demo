```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to produce a fully working, optimal Python implementation that precisely fulfills the pseudocode’s intent and constraints. Follow these explicit instructions:

- Respond **only** with the final Python code, inside a single, fenced code block labeled `python`, like so:
```python
# your complete code here
```
- Use plain `input()` calls only for all inputs—no prompt strings or formatted messages.
- Include **all** necessary imports and auxiliary definitions explicitly; do not assume anything is pre-imported or predefined.
- Prioritize correctness, efficiency, and minimal resource usage to ensure the code completes within 5 seconds on typical competitive programming input sizes.
- Handle **all** possible edge cases implied by the pseudocode logic, including empty inputs, boundary values, and special cases.
- Follow exactly the input/output format and behavior implied or stated in the pseudocode; produce no extra output, logging, debugging, or comments outside the code block.
- Write idiomatic, clean, and maintainable Python code, leveraging efficient data structures, algorithms, and Python standard or widely used libraries (e.g., collections, itertools, math, re, numpy, heapq).
- Avoid redundant calculations, unnecessary copying, or conversions; use generators, comprehensions, or vectorized operations when they improve performance and clarity.
- Use meaningful and consistent naming aligned with the pseudocode variables or standard Python conventions.
- Structure your code to be as concise as possible without sacrificing readability; use functions or classes only when it improves modularity or clarity.
- Ensure your code requires no manual modification or environment setup before running.

Your entire response must be only the final optimized Python code block—no explanations or additional text outside it.
```