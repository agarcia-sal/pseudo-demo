```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to produce a complete, fully functional Python program that implements the pseudocode with maximum correctness, efficiency, and clarity under a strict 5-second runtime limit. Follow these strict directives:

- Provide **only** the entire final Python program enclosed in a single markdown code block labeled exactly as:
```python
# your entire program here
```
- Use plain `input()` calls for all inputs without any prompt strings or formatting.
- Explicitly include all necessary imports, helper functions, and data structures; do not omit anything.
- You may utilize any Python standard library modules and widely used third-party packages (e.g., numpy, collections, heapq, itertools, regex) to optimize performance and code clarity.
- Write idiomatic, clean, and readable Python 3 code that favors high-level constructs (list/dict comprehensions, generators, built-ins, vectorized operations) and efficient algorithms instead of naive or brute-force approaches.
- Implement precise handling of all explicit or logically implied edge cases.
- Strictly adhere to the input/output formats and avoid any extraneous text, debugging print statements, or comments outside the code block.
- Structure your program minimally if functions or classes enhance modularity or performance, otherwise a clear linear script is acceptable.
- Avoid redundant computations, unnecessary data copying, or conversions; leverage streaming, lazy evaluation, and in-place operations where appropriate.
- Choose meaningful variable names consistent with the pseudocode or Python conventions.
- Ensure the code runs immediately and correctly without manual modifications or environment-specific setups.

Your response must contain **only** the final Python code block with the above requirementsâ€”no explanations or additional text.
```