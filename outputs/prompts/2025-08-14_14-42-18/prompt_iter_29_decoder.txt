```plaintext
You will receive a piece of pseudocode describing an algorithm or program logic. Your task is to translate this pseudocode into a complete, efficient, and production-ready Python program with maximal correctness and performance, optimized to run within a 5-second limit on typical constraints.

Follow these firm instructions:

- Output **only** the full Python program wrapped in a single, properly fenced code block labeled exactly as:
```python
# your entire program here
```
- Use only plain `input()` calls for all inputs; do not include input prompts, messages, or any formatting strings.
- Include all necessary imports explicitly; do not omit anything essential or assume implicit context.
- You may leverage any Python standard library or widely used third-party libraries such as `numpy`, `collections`, `heapq`, `itertools`, or `math`â€”use advanced, high-performance constructs and algorithms to optimize runtime and memory usage.
- Prioritize clarity, idiomatic Python style, and maintainability **only if** it does not compromise speed or memory efficiency.
- Implement thorough handling of all edge and corner cases that can be deduced from the pseudocode, ensuring no undefined behaviors.
- Strictly adhere to the input/output format implied by the pseudocode; do not output any extra text, debugging info, logging, or commentary.
- Use efficient data structures and algorithms; prefer vectorized operations, generators, comprehensions, fast lookups, and lazy evaluation to minimize overhead.
- Avoid unnecessary recomputations, redundant data conversions, or superfluous memory allocations.
- Choose meaningful and conventional variable and function names aligned with standard Python practices or the pseudocode naming.
- Modularize the code with functions or classes **only when** it enhances code clarity, reusability, or performance without bloating the codebase; otherwise, concise script style is preferred.
- Ensure the output program runs correctly and immediately as-is without any environment tuning or manual adjustments.
- Your code must be robust, reliable, concise yet comprehensive enough to solve the problem efficiently under the specified constraints.

Your entire submission must consist solely of the final Python code block, with no explanations, comments outside the code block, or any additional text.
```