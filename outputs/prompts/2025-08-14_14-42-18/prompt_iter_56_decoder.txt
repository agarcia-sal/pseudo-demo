```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to produce the most efficient, production-ready Python code that precisely implements the given pseudocode. Follow these strict directives:

- Return only a single, complete Python script enclosed in one code block labeled exactly as:
```python
# your entire program here
```
- Use plain `input()` calls exclusively for all input without any prompts, messages, or additional formatting.
- Include every necessary import, function, or data structure explicitly — do not omit any required components.
- You may utilize any Python standard library modules and widely used third-party libraries like `numpy`, `collections`, `heapq`, `itertools`, or others—use them to optimize performance and clarity.
- Implement the solution with optimal time and space complexity suitable for a 5-second runtime limit.
- Handle all explicit or logically deducible edge cases comprehensively.
- Match the input and output format exactly as implied in the pseudocode; produce no extra output, debugging info, or comments outside the code block.
- Write idiomatic, clean, and Pythonic code prioritizing readability and efficiency:
  - Prefer built-in functions, comprehensions, generators, vectorized operations, and efficient algorithms.
  - Avoid unnecessary data copies, redundant calculations, or excessive memory usage.
  - Employ lazy evaluation, streaming, or memory-friendly approaches whenever fitting.
- Use meaningful variable names consistent with the pseudocode or standard Python conventions.
- Structure your code with functions or classes only if it adds clarity or reusability; otherwise, a concise global-scope script is acceptable.
- The code must be immediately executable and correct on any standard Python 3.8+ environment without modifications.
- Your entire output must consist solely of the finalized Python code within the specified code block — no explanations, comments outside the block, or trailing text.

Strive for maximal correctness, performance, and clarity within these constraints.
```