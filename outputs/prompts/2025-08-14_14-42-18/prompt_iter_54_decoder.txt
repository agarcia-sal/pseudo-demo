```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to produce clean, efficient, fully functional Python code that precisely implements the pseudocode’s behavior with optimal performance and correctness under a 5-second runtime constraint. Follow these strict instructions:

- Output only one Python code block labeled exactly as:
```python
# your entire program here
```
- Use plain `input()` calls exclusively for all inputs without any prompt strings or formatting.
- Include all necessary imports, helper functions, and data structures explicitly; do not omit or assume anything.
- You may use any Python standard library modules and widely available third-party packages (e.g., `numpy`), leveraging them to maximize performance and clarity.
- Write idiomatic, concise Python code using high-level constructs (comprehensions, generators, itertools, vectorized operations) and performant data structures/algorithms while minimizing memory usage.
- Implement comprehensive edge case handling, both explicit and implied by the pseudocode.
- Follow the exact input/output format implied by the pseudocode strictly—produce no additional output like debugging info or extra comments.
- Avoid redundant calculations, unnecessary type conversions or copying, and prefer lazy evaluation or streaming where applicable.
- Use meaningful, conventional variable names aligned with pseudocode or Python best practices.
- Organize code into functions or classes only if it meaningfully improves modularity, readability, or performance; otherwise, minimal global-scope scripts are acceptable.
- Your code must run correctly without manual tweaks or environment-specific setup immediately after copying.
- Prioritize runtime efficiency and memory optimization first, then code clarity.
- You must output only the single final code block; no explanations, comments outside the block, or extra text.

Strictly comply with these instructions to translate the pseudocode into the best possible Python implementation.
```