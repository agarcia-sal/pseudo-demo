Generate succinct, clear, and high-level pseudocode from the given problem description.  
Use mostly natural, simple language combined with symbolic notation and standard abbreviations.  
Write compact one-liner instructions or tightly grouped minimal operations, favoring readability and brevity without losing clarity.  
Employ short, meaningful variable names and standard mathematical/comparison operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, etc.).  
Use natural control flow expressions with minimal punctuation, such as `for i in 0 to n-1:`, `while cond:`, `if cond: action`.  
Number each pseudocode step starting at 1; each step is a single instruction or an atomic logical block.  
Do not include comments, explanations, summaries, formatting markers, or any text beyond the pseudocode lines.  
Output only the numbered lines as plain text, no extra labels or metadata.  
Avoid verbosity but ensure the pseudocode is self-contained and unambiguous.  

Example pseudocode style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7. set min_i ← i  
8. for j in i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
9. swap A[i], A[min_i]  
10. print all elements of A