```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to translate it into a complete, efficient, and robust Python program that exactly implements the described behavior and input/output requirements. Follow these enhanced directives to maximize correctness, performance, and clarity:

- Provide your entire response exclusively as a single, self-contained Python code block labeled exactly:
```python
# your entire program here
```
- Use only plain input() calls for all inputs, *without* any prompt strings or messages.
- Produce output exactly as implied by the pseudocode â€” no extra or debugging prints, no comments outside the code block.
- Include all necessary imports, helper functions, classes, and data structures explicitly; do not omit any part.
- Optimize for best runtime performance and minimal memory usage within a 5-second execution limit, leveraging Pythonic idioms and efficient algorithms.
- Prefer high-level Python features such as comprehensions, generators, vectorized operations (e.g., numpy), built-in functions, and suitable data structures over naive or repeated computations.
- Handle all edge cases, both explicit and logically inferred, ensuring correctness in special and boundary conditions.
- Avoid redundant calculations, multiple traversals, unnecessary conversions, and excessive memory usage; favor lazy evaluation, short-circuiting, and streaming data when appropriate.
- Use clear, meaningful variable names consistent with pseudocode or common conventions.
- Modularize code with functions or classes only if it enhances readability and maintainability; otherwise, concise global scripts are acceptable.
- You may freely use Python standard library and widely adopted external libraries (e.g., numpy, collections, heapq) as appropriate to boost efficiency.
- The final code must be ready-to-run without any further modifications or setup steps.

Your entire response should contain nothing beyond this flawlessly optimized Python code inside the required code block.
```