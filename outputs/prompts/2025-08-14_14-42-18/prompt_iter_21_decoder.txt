```plaintext
You are given pseudocode describing a problem solution. Translate it into clean, efficient, and fully runnable Python 3 code that satisfies these strict guidelines:

- Output only one Python code block formatted exactly as:
```python
# code here
```
with no text, comments, or explanations outside the code block.

- Use only unprompted input calls: `input()` or appropriate variants (e.g., `sys.stdin.readline().rstrip('\n')`) matching the pseudocode input style exactly. No prompts or extra print/debug statements allowed.

- Provide all necessary imports explicitly at the top. Include any helper functions or data structures required for a complete, standalone solution.

- Optimize for both clarity and maximum runtime performance within a 5-second time limit and typical memory constraints. Replace naive algorithms with well-known efficient algorithms or Python standard/third-party libraries where applicable.

- Fully handle all edge cases implied or possible by the pseudocode. Ensure robustness and correctness under all valid inputs.

- Use idiomatic Python 3 code â€” prefer built-in functions, comprehensions, generators, vectorized operations (e.g., with numpy), and optimized standard libraries (`collections`, `heapq`, `itertools`, `bisect`, `math`, `functools`, `sys`, `re`, `pathlib`, `numpy`, etc.) over manual loops or unoptimized code.

- Reproduce input/output behavior exactly as specified by the pseudocode. No additional output or reads.

- Avoid any trailing or leading whitespace outside the Python code block.

This prompt should produce the best possible balanced solution translating any given pseudocode into clean, production-grade Python code optimized for correctness and speed inside the provided runtime limits.
```