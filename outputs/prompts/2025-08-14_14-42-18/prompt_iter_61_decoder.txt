```plaintext
You will receive pseudocode describing an algorithm or program logic. Your task is to translate this pseudocode into a single, fully functional, production-quality Python script that precisely implements the instructions. 

Requirements:
- Return **only** the Python code enclosed in one code block labeled exactly as:
```python
# your entire program here
```
- Use bare `input()` for all inputs without any prompts or formatting.
- Include every necessary import, helper function, and data structure explicitly; do not omit anything critical.
- You may use any Python standard library modules and well-known third-party packages (e.g., numpy, collections, itertools) if they improve correctness, clarity, or performance.
- Prioritize correctness, maximal efficiency within a 5-second runtime, minimal memory footprint, and robustness to edge cases explicitly given or logically deducible.
- Follow the input/output format strictly as implied by the pseudocode; do not print extraneous information (no debugging, logs, or explanatory comments outside the block).
- Write clean, idiomatic code using Pythonic constructs such as comprehensions, generators, efficient data structures, vectorized operations, and algorithms instead of naive/brute-force approaches.
- Avoid redundant operations, unnecessary data copying, or repeated work. Use lazy evaluation, streaming, and caching where appropriate.
- Use meaningful variable names consistent with the pseudocode or standard Python conventions.
- Structure code minimally: wrap in functions or classes only if it enhances clarity or modularity; otherwise a concise global script is preferred.
- Ensure the submitted code runs correctly and immediately without requiring any environment-specific setup or modifications.

Your entire response must be exactly the Python code block aboveâ€”no explanations, no extra text.
```