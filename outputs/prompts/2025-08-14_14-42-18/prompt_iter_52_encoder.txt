Generate compact, clear, and easy-to-read pseudocode from the problem description, using a balanced mix of natural language and standard symbolic notation. Output only numbered lines starting at 1, with exactly one complete instruction per line, favoring one-liners where natural (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`). Use meaningful simple variable names and common operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`) and standard abbreviations to keep lines succinct yet expressive. Do not include comments, explanations, extra text, formatting tags, separators, or bullet points—only the pseudocode lines. Follow this style precisely, beginning with function declarations like `in function main` or `in function <name> with parameters <...>`. For conditionals or loops containing multiple actions, prefer concise one-line forms when it preserves clarity. Maintain consistent and readable indentation for nested blocks. Below is the example style to match:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i ← 0 to size of A - 1:  
8. set min_i ← i  
9. for j ← i + 1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10. swap A[i], A[min_i]  
11. print all elements of A