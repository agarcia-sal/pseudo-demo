Generate clear, concise, and easy-to-read pseudocode from the problem description, blending natural language with standard symbolic notation and common abbreviations. Use compact one-liners whenever natural (e.g., `for i ← 0 to n-1:`, `if cond: action`, `while cond:`). Prefer meaningful simple variable names and familiar operators (`+`, `-`, `*`, `//`, `mod`, `<`, `=`, `!=`, `←`). Number each line starting at 1, with exactly one complete instruction per line. Avoid comments, explanations, labels, formatting tags, separators, or any text other than the pseudocode lines themselves. Structure the pseudocode at a high level, focusing on essential steps with moderate natural language to ensure readability and understanding. Follow this example style precisely:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i ← 0 to size of A - 1:  
8. set min_i ← i  
9. for j ← i + 1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10. swap A[i], A[min_i]  
11. print all elements of A