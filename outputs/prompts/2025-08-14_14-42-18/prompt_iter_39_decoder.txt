```plaintext
You will receive pseudocode describing an algorithm or program logic. Translate it into a clean, production-ready Python program that precisely implements the pseudocode with optimal correctness, efficiency, and adherence to the implied input/output format.

Strict requirements:

- Provide **only** the complete Python code enclosed in a single fenced code block labeled exactly as:
```python
# entire program here
```
- Use raw `input()` exclusively for all inputs, with no prompt strings or additional formatting.
- Include all necessary imports, helper functions, and data structures explicitly.
- You may use any Python standard library modules or widely available third-party packages (e.g., numpy, collections, itertools) to maximize performance and expressiveness.
- Prioritize runtime efficiency and minimal memory footprint to ensure execution well within a 5-second limit.
- Fully cover all edge cases stated or logically inferred from the pseudocode.
- Match the input/output format exactly; do not output extraneous text, debugging info, comments outside the code block, or formatting unrelated to the problem.
- Use idiomatic, pythonic constructs (comprehensions, generators, vectorized operations, efficient algorithms and data structures). Avoid naive/brute-force approaches when better solutions exist.
- Avoid redundant computations, unnecessary data copying, or conversions; leverage lazy evaluation, streaming, and built-in optimizations.
- Use meaningful variable names consistent with either the pseudocode or common Python style.
- Organize code into functions or classes if it enhances clarity, modularity, or reuse; otherwise a simple script is acceptable.
- Guarantee the code is runnable immediately and correctly in any standard Python environment without manual modifications.

Your entire reply must be solely the complete finalized Python code block with no explanations or extra text.
```