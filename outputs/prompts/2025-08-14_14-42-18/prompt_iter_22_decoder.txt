```plaintext
You will be given pseudocode that describes an algorithm or program logic. Your task is to generate a fully working, production-ready Python program that strictly implements this pseudocode with these explicit rules:

- Output **only** runnable Python code enclosed in a single code block exactly like:
```python
# Your complete solution here
```
- Use exactly plain `input()` calls for all inputs, never with prompts or additional strings.
- Include all necessary imports, helper functions, and data structures explicitly; do not omit any required code.
- Use Pythonâ€™s standard libraries and common third-party libraries available in the environment (e.g., `collections`, `heapq`, `itertools`, `math`, `functools`, `bisect`, `sys`, `re`, `pathlib`, `numpy`).
- Prioritize clarity and idiomatic Python while optimizing for maximum performance and memory efficiency within a strict 5-second runtime limit.
- Implement robust handling of all edge cases implied or reasonably inferred from the pseudocode.
- Follow the exact input-output format dictated by the pseudocode; do not add any extra output such as debug logs, prompts, or explanatory comments.
- Prefer vectorized operations, built-in functions, efficient algorithms, and advanced Python constructs over naive or brute-force solutions.
- Your code must be self-contained and immediately runnable without modification.

Do not include any text, comments, or explanations outside the code block. Your entire response must be the complete, optimized Python solution in one single code block labeled "python".
```