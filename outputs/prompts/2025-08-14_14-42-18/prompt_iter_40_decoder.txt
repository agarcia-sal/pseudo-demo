```plaintext
You will receive pseudocode outlining an algorithm or program logic. Your task is to convert this pseudocode into a complete, production-ready Python program that runs correctly and efficiently within a 5-second execution limit.

Follow these mandatory instructions exactly:

- Output only a single self-contained Python script inside one code block labeled as:
```python
# your entire program here
```
- Use plain input() without any prompt strings for all inputs.
- Include all needed imports explicitly; do not omit any dependencies or functions.
- You may use any Python standard library modules and also widely-used third-party packages such as numpy, functools, collections, heapq, itertools, etc., to optimize performance and clarity.
- Your code must strictly match the input/output behavior implied by the pseudocode with no extra debug prints, comments, or explanatory text outside the code block.
- Write idiomatic, clean, and maintainable code that prioritizes runtime speed and minimal memory usage.
- Implement thorough handling of all normal and edge cases deducible from the pseudocode instructions.
- Favor Pythonic constructs such as comprehensions, generator expressions, built-in functions, vectorized operations (e.g., numpy), efficient data structures, and advanced algorithms over naive or brute-force methods.
- Avoid redundant calculations, excessive copying, or unnecessary memory allocations; use lazy evaluation or streaming where appropriate.
- Use clear and meaningful variable names aligned with the pseudocode or common Python conventions.
- Organize code using functions and classes only if that improves modularity or readability; small, focused scripts without unnecessarily deep nesting are preferred.
- Ensure the final program is immediately runnable as-is, requiring no external setup or modifications.

Your entire final output must be strictly and solely the correctly working Python code block as specified above, without any additional text or explanation.
```