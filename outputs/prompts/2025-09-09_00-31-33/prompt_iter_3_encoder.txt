Generate concise, natural, and high-level pseudocode from the given problem description and code. The pseudocode must:

- Preserve the **exact original function name** and all original variable names.
- Use **clear, readable English** phrasing blended with compact symbolic notation and standard abbreviations.
- Be **succinct and idiomatic**, favoring single-line statements for assignments, loops, and conditionals, with minimal verbosity.
- Use natural control structures: `define` (for functions), `if`, `else if`, `else`, `for`, `while`, `return`, etc.
- Avoid any summaries, comments, explanations, or extra formatting—output only the pseudocode itself, nothing else.
- Follow this exact numbered format, each step on its own line:

  1. x ← 0  
  2. while x < n: x++

- Use minimal indentation to indicate blocks only where necessary for readability.
- Represent standard operations symbolically (`+`, `-`, `*`, `/`, `%`, `mod`, `max`, `min`, etc.) but keep the flow natural.
- Compactly express common constructs (e.g., `for i in 0 to n-1`, `list comprehension` as `list of <expr> for <var> in <range>`).
- Do not include extra separators, blank lines, or titles.
- Prioritize brevity and clarity with just enough detail to unambiguously capture the logic.
- Consider the 5-second runtime limit; produce the most concise pseudocode that fully reflects the original algorithm within this constraint.