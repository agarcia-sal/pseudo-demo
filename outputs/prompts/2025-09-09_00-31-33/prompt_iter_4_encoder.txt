Generate concise, clear pseudocode from the given problem description and code that meets these criteria:

- Pseudocode must be easy to read and understand, using natural language with compact, high-level statements that capture the full logic without redundancy.
- Retain the exact original function name and variable names.
- Prefer single-line statements, symbolic operations, and standard abbreviations.
- Use natural control structures (if, for, while, define, return) with minimal verbosity.
- Format each step as a numbered line with a single command, without separator lines, extra formatting, commentary, summaries, or explanations—output only the pseudocode itself.
- Follow this exact style and indentation approach (with numbering):

1. x ← 0  
2. while x < n: x++  

- Use minimal punctuation and keywords to keep pseudocode compact yet clear.
- When iterating with nested loops or conditionals, use consistent indentation (e.g., one tab per nested block).
- Prioritize clarity but always produce the shortest valid pseudocode fully representing the algorithm’s logic and flow.
- Assume a strict 5-second runtime limit; output the best concise pseudocode possible within constraints.
- Avoid any lines not directly representing code steps or control flow. The pseudocode should be self-sufficient and neatly structured to make the algorithm obvious at a glance.

Example of the target style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A