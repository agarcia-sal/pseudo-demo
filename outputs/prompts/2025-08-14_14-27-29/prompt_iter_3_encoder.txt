Write concise, high-level pseudocode that is clear and easy to understand, using natural language with compact expressions, symbolic assignments, and abbreviations. Structure the pseudocode as a numbered list of succinct steps. Prefer one-line statements that combine control flow and operations where possible. Avoid explanations, summaries, comments, or any non-pseudocode text. Omit separators or decorative lines.

Use simple control keywords (e.g., if, while, for) with straightforward conditions and increments. Adopt readable but minimal syntax:  
- Use ← for assignments  
- Use natural language for declarations (e.g., “let n be integer”)  
- Use ranges like “for i in 0 to n-1” or “for all elements in A”  
- Use symbolic operators (mod, =, ≠, etc.)  
- Use natural language verbs for actions (read, print, set, swap, append)

Example format:  
1. let n be integer  
2. read n  
3. let A be vector of integers with size n  
4. read n elements into A  
5. for i in 0 to n-2:  
6. set min_i ← i  
7. for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
8. swap A[i], A[min_i]  
9. print all elements of A

Your output must be only the pseudocode steps, no extra text. The pseudocode should capture the logic efficiently, prioritizing clarity and brevity. Generate the best possible pseudocode within a 5-second timeout.