Translate the given pseudocode into a fully functional, idiomatic, and efficient Python 3.9+ program strictly following these enhanced guidelines:

- Return **only** the complete Python code, enclosed in a single triple-backtick Python code block (```python ... ```), without any commentary, explanation, imports not required, or extra text.
- Preserve **exactly** all class names, method/function names, argument names, variable names, their order, nesting, and code structure as given in the pseudocode.
- Implement the logic **completely and precisely** as specified in the pseudocode—no additional features or assumptions; no omission or modification of intended behavior.
- Include all necessary imports explicitly. You may use any well-established Python standard library or widely used, stable third-party libraries (e.g., `collections`, `math`, `typing`, `heapq`, `bisect`, `itertools`, `numpy`, `sympy` if truly beneficial) only if required to fulfill correctness, clarity, or efficiency. Avoid superfluous imports.
- Use comprehensive Python type annotations (PEP 484/586/591 style) accurately wherever types can be clearly inferred or aid readability and maintainability.
- Translate pseudocode constructs customarily and idiomatically in Python:
  - `LENGTH(s)` → `len(s)`
  - `FOR i IN RANGE LENGTH(s)` → `for i in range(len(s))`
  - `FUNCTION foo(args)` → `def foo(args):` (nested consistent with pseudocode)
  - `RETURN SUBSTRING s FROM start TO end + 1` → `return s[start:end + 1]`
  - Use explicit Python control flow constructs for loops and conditions as denoted.
- Maintain faithful logic equivalence in all control flows, including edge conditions, loop boundaries, and return values. Handle all edge and corner cases to avoid runtime exceptions.
- Aim for clear, concise, maintainable, and idiomatic Python that balances simplicity with correctness and efficiency.
- Optimize for runtime and memory usage to reliably run within 5 seconds on typical inputs.
- Do **not** add any debugging output, print statements, logging, or interactive I/O beyond what the pseudocode requires.
- Do **not** rename or reorder variables, functions, classes or change method signatures. Do **not** add extra helper functions, classes, or data structures unless explicitly or strongly implied by the pseudocode logic.
- Keep indentation consistent and correct according to Python syntax, matching the pseudocode block structure exactly.
- If multiple functions or classes appear in the pseudocode, preserve all in your final output so the code is self-contained and runnable as is.
- If the pseudocode is incomplete or ambiguous, do your best to infer the minimal faithful implementation but do not overreach.

```python
# Fully translated Python code here exactly as per above rules
```