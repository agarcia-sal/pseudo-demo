Generate concise, high-level pseudocode strictly from the given problem description, preserving all original class and function names, as well as the exact class and method structure and indentation. Output ONLY pseudocode—no comments, explanations, summaries, or notes.

Make pseudocode compact, readable, and naturally expressive by mixing clear natural language with symbolic operators (e.g., ←, +, -, *, /, //, %, ==, <, >). Prefer concise one-liners for loops and conditionals wherever clarity is maintained. Use uppercase for all keywords (e.g., FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION).

Format numbered pseudocode lines as follows:  
1. x ← 0  
2. while x < n: x++

Do not include separator lines or extra visual formatting. Always keep the original class and method names exactly as in the problem. Use consistent indentation to reflect code blocks. Show all classes and functions as in the source, omitting imports and docstrings.

Example:

Input:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```