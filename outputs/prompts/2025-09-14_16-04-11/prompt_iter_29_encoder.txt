Generate concise, clear, and high-level pseudocode from the given problem description, strictly preserving all original class and function names and their exact class/object nesting structure. Output only the pseudocode—no explanations, comments, summaries, or meta information. Use natural language verbs combined with symbolic operators (e.g., ←, +, -, *, /, //, %, ==, <, >) and standard abbreviations where appropriate. Prefer compact one-liner loops and conditionals if they remain easily readable. Format each pseudocode line with a line number as follows:

1. x ← 0  
2. WHILE x < n: x++

Use uppercase keywords (FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION, etc.) to improve clarity. Write natural yet succinct statements, e.g., "SET total_sum TO 0", "INCREMENT total_sum BY number", "FOR each item IN collection". Omit separators or extra blank lines. Indent consistently to reflect nested blocks. The pseudocode should be easy to read within seconds and logically structured, avoiding verbose or redundant wording. Ensure faithful retention of all original function and class names and their hierarchy. Do not include docstrings, import statements, notes, or explanations.

Example:  
Given this Python function:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums: total ← total + num
    SET avg TO total / LENGTH(nums)
    RETURN avg
END FUNCTION
```