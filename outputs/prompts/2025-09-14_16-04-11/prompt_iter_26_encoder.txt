Generate clear, concise, and compact pseudocode from the given problem description.  
- Preserve all original class and function names exactly as given, maintaining full class/object structure and indentation.  
- Use natural language verbs combined with symbolic operators (←, +, -, *, /, //, %, ==, <, >, etc.) and abbreviations to keep lines short but readable.  
- Prefer one-liner loops and conditionals if clarity is maintained.  
- Number each line starting at 1, following this format:

1. x ← 0  
2. WHILE x < n: x++  

- Use uppercase keywords: FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, END IF, etc.  
- Use "SET var TO expression" or "INCREMENT var BY value" to improve naturalness.  
- Avoid comments, explanations, summaries, docstrings, import statements, separator lines, or extra whitespace.  
- Ensure the pseudocode is logically correct, easy to scan in seconds, and readily convertible back to code.  
- Example conversion:  

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

produces:  

```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums
        INCREMENT total BY num
    SET avg TO total / LENGTH(nums)
    RETURN avg
END FUNCTION
```