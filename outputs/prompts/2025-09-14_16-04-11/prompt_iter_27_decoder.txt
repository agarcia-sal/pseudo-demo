Translate the given pseudocode into clean, fully functional, and efficient Python 3.9+ code following these strict guidelines:

- Output **only** the executable Python code enclosed in a single, properly formatted triple-backtick Python code block (```python ... ```), with **no additional text**, comments, explanations, or separators.
- Preserve the exact class names, method/function names, argument names, variable names, and the original code nesting and indentation exactly as presented in the pseudocode without renaming or reordering.
- Faithfully and completely implement the pseudocode logic as stated or clearly implied, **without adding, omitting, or assuming** any extra functionality beyond what is given.
- Include all necessary imports—prefer only the Python standard library and well-maintained public packages only if truly essential. Your code must be self-contained and runnable without external dependencies.
- Use explicit, comprehensive Python 3.9+ type annotations wherever types can be inferred or improve code clarity.
- Write idiomatic, clean, and maintainable Python:
  - Favor direct, simple constructions mirroring the pseudocode semantics.
  - Use built-in functions and language features where appropriate to enhance clarity and performance.
- Handle any edge and corner cases evident from the pseudocode to prevent runtime errors and ensure robustness.
- Optimize the solution for time and memory efficiency, ensuring it reliably runs within a 5-second timeout on typical inputs.
- Do not include any debug prints, interactive input/output, or logging beyond what is explicitly required by the pseudocode.
- Carefully and precisely translate all pseudocode language constructs (like `FUNCTION foo(args)`, `FOR i IN RANGE LENGTH(s)`, `SUBSTRING s FROM start TO end + 1`, assignments, loops, and conditionals) into correct Python syntax preserving original semantics and control flow.
- Do **not** add helper functions, classes, or data structures unless strictly necessary or clearly implied by the pseudocode.
- Maintain consistent Python indentation as per syntax rules that exactly mirrors the pseudocode’s block structure.
- If multiple classes or nested definitions exist in pseudocode, implement all maintaining the same hierarchy.

```python
# Your comprehensive, self-contained, idiomatic Python code implementing the pseudocode here
```