Generate concise, high-level pseudocode from the given problem description, preserving all original class and function names as is. Your output must be purely pseudocode without any comments, explanations, or summaries—only code-like instructions. Use clear natural language mixed with symbolic forms and abbreviations, favor compact one-liners where possible, while maintaining readability and logical structure. Keep the original class and method structure intact, formatting steps with numbered lines as follows:

1. x ← 0  
2. while x < n: x++  

Avoid separator lines or extra formatting. The pseudocode should be easy to understand within seconds, emphasizing clarity and brevity with consistent indentation that reflects code blocks. Follow these conventions:

- Use uppercase keywords (e.g., FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION).  
- Maintain original function and class names exactly as given.  
- Use natural language verbs and terms mixed with symbolic operators (e.g., ←, +, -, *, /, //, %, ==, <, >).  
- Prefer concise expressions, compress loops and conditionals into single lines when clearly readable.  
- Show the overall program structure, including class definitions and method signatures, but omit docstrings or imports.

Example:

If the original code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```

This style ensures pseudocode is both compact and immediately usable for algorithmic understanding or later translation.