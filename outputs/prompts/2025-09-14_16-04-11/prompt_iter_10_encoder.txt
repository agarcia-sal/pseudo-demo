Generate clear, concise, and high-level pseudocode strictly from the given problem description. Preserve all original class and function names exactly as provided, along with the original class and method structure. Produce pseudocode only—no comments, explanations, summaries, or extraneous text. Use natural language combined with symbolic operators and concise abstractions, favoring brief one-liners where readability is maintained. Indent consistently to indicate blocks. Number each executable line as follows:

1. x ← 0  
2. WHILE x < n: x++

Use uppercase keywords such as FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION. Use natural verbs and simple terms combined with symbols (←, +, -, *, /, //, %, ==, <, >). Avoid separator lines or extra formatting. The output should be compact, understandable within seconds, and reflect the logical flow and hierarchy of the original code without losing clarity.

Example:  
Input:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```