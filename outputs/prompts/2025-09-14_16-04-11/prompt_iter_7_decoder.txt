Translate the given pseudocode into fully functional, idiomatic, and efficient Python code that strictly maintains all class names, method names, and structural elements exactly as specified. Your translation must:

- Be enclosed entirely within a single Python code block using triple backticks and `python`.
- Preserve method signatures, class names, and object structures exactly as in the pseudocode without any alteration.
- Include all necessary supporting classes, helper functions, and data structure definitions referenced or implied in the pseudocode.
- Use standard Python libraries and data types; you may import any Python standard or well-known public packages ONLY if clearly required by the pseudocode context.
- Implement the algorithm logic precisely with no assumptions, omissions, or added functionalities beyond what the pseudocode implies.
- Add clear, concise comments only where they enhance readability and understanding.
- Apply idiomatic Python best practices for clarity, performance, and maintainability.
- Incorporate appropriate type hints consistently when input or output types are implied.
- Anticipate and handle relevant edge cases to produce robust, bug-free code.
- Optimize your implementation for time and space efficiency to comfortably run within a 5-second timeout.
- Do not output anything other than the requested Python code (no explanations, test code, or text outside the code block).

```python
# Your translated code goes here
```