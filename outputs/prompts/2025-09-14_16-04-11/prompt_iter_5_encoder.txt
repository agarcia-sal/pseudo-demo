Generate concise, clear, high-level pseudocode strictly reflecting the given problem’s code structure, preserving all original class and function names exactly as provided. Maintain all classes, methods, and their nesting precisely, without adding or removing any definitions. Your output must be only pseudocode—no comments, explanations, or summaries.

Use a blend of natural language and symbolic notation (e.g., ←, +, -, *, /, //, %, ==, <, >) favoring compact, readable one-liners wherever clarity permits. Represent control flow (IF, FOR, WHILE, etc.) and operations using uppercase keywords.

Format steps as numbered lines in this style:

1. x ← 0  
2. WHILE x < n: x ← x + 1

Use consistent indentation to reflect code blocks. Avoid any separator lines, extra annotations, or imports.  

Use natural language verbs mixed with symbolic expressions for assignments and conditions. Prefer concise expressions and compressed loops or conditionals as long as readability is maintained. Keep method signatures and class declarations intact and verbatim.

Example:  
If input is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```

This prompt aims for pseudocode that is instantly comprehensible, compact yet clear, perfectly aligned with the original program’s interface and logic.