Translate the given pseudocode into fully functional, self-contained, and idiomatic Python 3.9+ code by following **all** these detailed criteria precisely:

- Output **only** valid, executable Python code enclosed within a single triple-backtick code block marked as Python (```python ... ```). Provide **no explanations, comments, or extra text** outside the code block.
- Preserve **exactly** all identifiers (class names, function/method names, argument names, variable names) and the original pseudocode’s class and method structure and nesting; do not rename, reorder, add, or remove anything unless strictly required for correctness.
- Implement the logic in the pseudocode **exactly as stated** — no additional functionality or assumptions beyond what is explicitly or clearly implied by the pseudocode.
- Include all necessary imports and definitions (standard library or stable, widely-used public packages only if absolutely necessary) so that the code is fully standalone and runnable.
- Use **precise and comprehensive Python 3.9+ type annotations** wherever type information can be reasonably inferred or where it improves code clarity.
- Translate each pseudocode construct directly and idiomatically to Python, e.g.:
  - `FUNCTION foo(args)` → `def foo(args) -> ReturnType:`
  - `FOR var IN RANGE LENGTH(collection)` → `for var in range(len(collection)):`
  - `SUBSTRING s FROM i TO j` → `s[i:j]`
  - Boolean operators, variable assignments, control flow, and loops all mapped faithfully and clearly.
- Retain and reflect the exact indentation and logical block structure of the pseudocode to ensure semantic equivalence.
- Avoid adding helper functions, classes, or data structures unless they are explicitly stated or absolutely and clearly necessary given the pseudocode logic.
- Handle all edge cases and potential runtime exceptions **explicitly** when reasonably indicated by the pseudocode, so as to produce robust, safe code that will not crash or return incorrect results.
- Write clean, idiomatic Python that prioritizes readability, maintainability, and directness; prefer Python built-ins and common idioms but do not overcomplicate.
- Optimize for runtime and memory efficiency to guarantee the code executes within a 5-second time limit on typical input sizes.
- Do not add debugging prints, logging, interactive input/output, or any behavior not specified in the pseudocode.
- When type hints or imports are necessary (e.g., for complex data structures), use `from typing import ...` appropriately and minimize import scope.
- If the pseudocode references datatype structures (e.g., linked lists, trees), implement them exactly as needed with matching class names and method signatures.

```python
# Your fully translated, standalone, idiomatic, and type-annotated Python 3.9+ code here
```
