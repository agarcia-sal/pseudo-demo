Translate the provided pseudocode into production-ready, idiomatic, and efficient Python code by strictly preserving all class names, method names, function signatures, variables, and structural hierarchy exactly as given. Your submission must meet these specifications:

- Output the entire solution enclosed within a single triple-backtick Python code block (` ```python ... ``` `) with no additional text outside the code block.
- Retain every identifier—class names, method names, variable names, argument names, nested function names—unchanged and in their original scope and nesting.
- Implement all implicitly or explicitly required classes, helper functions, data structures, and imports needed for correctness and completeness.
- Permit use of any Python standard library or any well-established, publicly available Python packages (e.g., `collections`, `typing`, `heapq`, `itertools`, `functools`, `math`, `bisect`, `numpy` etc.) if they clearly improve correctness, performance, or readability; avoid unnecessary imports.
- Fully respect the logic and semantics described by the pseudocode without adding, omitting, or assuming additional functionality.
- Provide precise and consistent type annotations everywhere feasible, including for function parameters, return types, and variables when their types can be confidently inferred.
- Write clean, readable, and maintainable Python code adhering to best practices and idiomatic conventions (PEP 8), including descriptive naming, explicit control flow, and pythonic constructs; avoid verbosity or over-abstraction.
- Insert comments sparingly and only to clarify subtle, complex, or non-obvious code behavior; do not state the obvious.
- Explicitly handle edge cases and error-prone conditions so the solution is robust, correct, and free of runtime exceptions under typical input constraints.
- Optimize for both time and space efficiency to reliably complete execution within 5 seconds for standard problem sizes.
- Do not add debugging statements, print calls, or any input/output handling code.
- Focus on fidelity to the pseudocode, efficiency, clarity, and robustness.
  
```python
# Your fully translated Python code here
```