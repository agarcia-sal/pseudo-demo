Translate the given pseudocode into fully functional, idiomatic Python 3.9+ code with the following precise instructions:

- Provide **only** the complete Python code enclosed within a single triple-backtick block annotated with `python` (```python ... ```), without any extra text, explanations, comments, separators, or debugging information.
- Preserve **all class names, method/function names, argument names, variable names, control flow, and block structure** exactly as in the pseudocode. No renaming, omission, reordering, or introduction of new identifiers or entire code blocks unless logically demanded by the pseudocode.
- Faithfully implement the logic and control flow **exactly** as specified or clearly implied by the pseudocode. Do not invent functionality, alter logic, or omit any steps or edge cases.
- Include all necessary imports, data structures, helper functions, and class definitions so the code is fully self-contained and runnable as-is.
- Use precise and consistent Python 3.9+ type annotations wherever types can be reasonably inferred to improve clarity, correctness, and tooling support.
- Write idiomatic, readable, maintainable, and efficient Python:
  - Use Python built-ins and standard libraries appropriately.
  - Prefer straightforward and direct translations over convoluted constructions.
  - Avoid unnecessary overheads or inefficient constructs to stay well within a typical 5-second runtime ceiling.
- Translate common pseudocode constructs exactly into their idiomatic Python equivalents:
  - `LENGTH(x)` → `len(x)`
  - `FOR var IN RANGE LENGTH(x)` → `for var in range(len(x))`
  - `FUNCTION foo(args)` → a properly indented Python function or method definition inside the correct scope.
- Apply correct indentation and block structure consistent with the pseudocode’s nesting.
- Do not add printing, logging, interactive input/output, or debugging code unless explicitly required by the pseudocode.
- Only add helper functions/data structures/methods when the pseudocode explicitly defines or logically requires them—do not create additional abstractions.
- Ensure the resulting code runs independently and correctly for typical inputs given the problem domain and pseudocode constraints.
- You may use any Python standard library or widely accepted package if that clearly improves correctness or efficiency and is justifiable by the pseudocode.

```python
# Your fully translated, self-contained Python code here
```