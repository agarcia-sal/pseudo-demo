Generate concise, high-level pseudocode from the given problem description preserving all original class and function names exactly as provided, maintaining the original class and method structure. Output only the pseudocode—no explanations, comments, or summaries. Use clear natural language combined with symbolic operators (e.g., ←, +, -, *, /, %, //, ==, <, >).  

Prefer compact one-liners for loops and conditionals where readability is preserved. Use uppercase keywords (FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION) and natural language verbs. Represent variable assignments, increments, and comparisons in explicit, clear terms using natural language mixed with symbols. Indent consistently to reflect block structures, numbering each step starting from 1 as in:

1. x ← 0  
2. WHILE x < n: x ← x + 1  

Do not add separator lines or extra formatting. The pseudocode should be easy to read at a glance, emphasizing clarity, brevity, and logical flow while showing overall program structure including classes and method signatures. Preserve input parameter names and signatures exactly, omit imports and docstrings.  

Example:  
If the input is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. FOR each num IN nums: total ← total + num
3. SET avg TO total / LENGTH(nums)
4. RETURN avg
END FUNCTION
```