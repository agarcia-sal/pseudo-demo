Generate concise, high-level pseudocode from the given problem description, preserving all original class and function names exactly as they appear. Output only pseudocode instructions—no comments, explanations, summaries, or notes. Prioritize clarity and readability with natural language verbs combined with symbolic operators (←, +, -, *, /, //, %, ==, <, >), favoring compact one-liner forms for loops and conditionals when unambiguous. Retain the original class and method structure, using consistent indentation to reflect code blocks. Format pseudocode steps with numbered lines as:

1. x ← 0  
2. while x < n: x++

Use uppercase keywords (FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION) and native function/class names exactly as given. Prefer concise expressions and natural phrasing like “INCREMENT x BY 1,” “FOR each item IN list,” “IF condition THEN,” etc., but keep expressions succinct and algorithmic. Do not add separator lines or extra formatting. Show overall program structure including class definitions and method signatures, but exclude imports or docstrings.

Example:

If the original code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```