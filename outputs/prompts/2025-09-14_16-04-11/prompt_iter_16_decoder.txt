Translate the given pseudocode into complete, highly idiomatic, efficient, and correct Python code, strictly preserving all class names, method names, function signatures, variable names, and the overall structural hierarchy exactly as given. Your generated code must adhere to all the following requirements:

- **Enclose your entire Python solution inside a single triple-backtick code block with `python` as the language tag.**

- Preserve **all identifiers exactly** as in the pseudocode, including class names, method names, function signatures, argument names, variable names, helper functions, and nested functions; do not rename, reorder, or remove any of them.

- Implement the logic **precisely as stated** in the pseudocode, with no implicit assumptions, added features, or missing steps. If the pseudocode describes conditionals, loops, or helper functions, they must be faithfully translated.

- Define any auxiliary classes, data structures, imports, or helper functions fully as required for the code to run correctly and independently. If a data structure or standard algorithm pattern is suggested indirectly by the pseudocode, implement it fully and idiomatically.

- Use only Python standard libraries or openly licensed, widely adopted, and minimal additional packagesâ€”import external packages *only* if absolutely needed for correctness, performance, or clarity as implied by pseudocode or complexity of the problem.

- Apply **accurate, consistent Python type annotations** wherever possible, including types for arguments, return values, intermediate variables, and class attributes, based on the pseudocode context or reasonable inference.

- Write **clean, readable, and maintainable code** using idiomatic Python best practices: meaningful variable names (matching pseudocode), proper indentation, clear control flow, and efficient algorithms.

- Add comments **only** to clarify subtle, non-trivial, or complex logic; avoid obvious or redundant comments. The comments should enhance understanding without clutter.

- Explicitly handle possible edge cases suggested or implied by the pseudocode input domain or logic to ensure robustness and prevent runtime errors.

- Optimize your solution carefully for both time and space complexity so it reliably completes within a 5-second timeout on typical inputs, without sacrificing correctness or readability.

- **Do not include any test cases, debugging code, print statements, or input/output handling; only provide the class and method implementations as required.**

```python
# Your translated Python code goes here
```