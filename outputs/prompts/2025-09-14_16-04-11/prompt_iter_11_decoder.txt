Translate the given pseudocode into complete, correct, and optimized Python code that strictly preserves all class names, method names, and overall structural elements exactly as specified in the pseudocode. Your translation must:

- Be enclosed entirely within a single Python code block using triple backticks and `python`.
- Preserve all method signatures, class names, and object hierarchies exactly as in the pseudocode without modifications.
- Define all supporting classes, helper functions, and data structures that are referenced or clearly implied by the pseudocode.
- Use only Python standard libraries or widely adopted public packages; import external packages only if explicitly required by the pseudocode context or to ensure correctness and efficiency.
- Implement the logic exactly as described in pseudocode, making no assumptions, additions, or omissions beyond the provided instructions.
- Use idiomatic, clean, and maintainable Python, applying best practices including consistent and appropriate type annotations where types are implied or can be inferred clearly.
- Write concise and meaningful comments only where they materially enhance code readability or clarify non-trivial steps.
- Handle all relevant edge cases logically and robustly, ensuring the code is bug-free and resilient.
- Optimize for both time and space efficiency, making the solution performant enough to reliably complete within a 5-second timeout on typical inputs.
- Do not print, log, or return anything besides the required code â€” no explanations, test scaffolds, or extraneous text.
- Avoid altering any given names, including variables, classes, methods, or arguments.

```python
# Your translated code goes here
```