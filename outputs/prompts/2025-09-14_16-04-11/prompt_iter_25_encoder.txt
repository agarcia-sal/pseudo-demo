Generate compact, high-level pseudocode directly from the given problem description, preserving all original class and function names exactly and maintaining their full class/object structure as in the input. Output only the pseudocode—no explanations, comments, summaries, or extra formatting. Use clear, concise natural language combined with symbolic operators (e.g., ←, +, -, *, /, //, %, ==, <, >) and abbreviations where appropriate. Prefer compact single-line loops and conditionals if readability is preserved. Number each line as shown:

1. x ← 0  
2. while x < n: x++

Use uppercase keywords (FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION, etc.) and natural language verbs for clarity. Avoid separator lines or excess whitespace. The pseudocode should be readable within seconds, logically structured with consistent indentation reflecting code blocks, and omit docstrings or import statements.

Example:  
Given this Python function:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce this pseudocode:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```