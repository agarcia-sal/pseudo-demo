Translate the given pseudocode into fully functional, idiomatic, and efficient Python code while strictly preserving all class names, method names, function signatures, variables, and structural hierarchy as provided. Your code must adhere to the following requirements:

- Provide the entire Python solution enclosed **only** within a single triple-backtick code block with the language tag `python`.
- Maintain all class names, method names, and any nested or helper function names exactly as specified in the pseudocode, with no alterations.
- Define all classes, helper functions, data structures, and imports that are explicitly or implicitly required by the pseudocode to run correctly.
- Use only Python standard libraries or publicly available, well-known packages, and import any external packages *only* if clearly justified by pseudocode complexity or needed for correctness, performance, or clarity.
- Implement the pseudocode logic exactly as described without adding, removing, or assuming additional functionality or behavior.
- Apply comprehensive and appropriate Python type annotations wherever types can be reliably inferred or justified.
- Write clean, readable, and maintainable code using Pythonic conventions and best practices, including meaningful naming, clear control flow, and concise use of language features.
- Include comments *only* when they clarify the code, especially to explain non-trivial or subtle parts of the algorithm; avoid redundant or obvious comments.
- Anticipate possible edge cases and handle them explicitly to ensure your code is robust and bug-free.
- Optimize the solution for both time and space complexity so that it reliably executes within a 5-second timeout on typical inputs.
- Do not include any debugging statements, input/output code, or explanatory text outside the code block.
- Avoid modifying any given names â€” keep all identifiers exactly as in the pseudocode, including variable names, argument names, classes, and method names.

```python
# Your translated code goes here
```