Generate concise, high-level pseudocode from the given problem description, preserving all original class and function names exactly as provided, along with the original class and method structure and nesting.  
Output only the pseudocode—no comments, explanations, summaries, or separator lines.  
Use clear natural language combined with symbolic operators (e.g., ←, +, -, *, /, %, ==, <, >), favoring compact one-liners for loops and conditionals when readable, while maintaining logical block structure through consistent indentation.  
Use uppercase keywords: FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, END CLASS, etc.  
Express control flow and data manipulation in a natural yet succinct manner, mixing verbs and concise terms.  
Number lines sequentially starting at 1, formatting like this:

1. x ← 0  
2. while x < n: x++  

Keep expressions compact but clear enough to understand quickly.  
Retain original method signatures and class names exactly; do not rename or reorder them.  
Omit imports, comments, docstrings, and any extra formatting or explanation.  
Focus on producing pseudocode that is high-level, easy to read and translate, minimal yet complete in logic and flow.  

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```