Generate clear, concise, and high-level pseudocode from the given problem description, preserving all original class and function names exactly as provided. Output only pseudocode without any explanations, summaries, or comments—no extra text. Use a mix of straightforward natural language and symbolic operators (←, +, -, *, /, //, %, ==, <, >) favoring compact one-liners where readability allows. Keep original class and method structure and indentation to reflect blocks clearly. Format every step numbered as shown below:

1. x ← 0  
2. while x < n: x++

Do not include any separator lines or extra formatting.

Follow these instructions precisely: 

- Use uppercase keywords only: FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, CLASS, DEF, END CLASS, etc.  
- Preserve all original class and method names exactly as in the input.  
- Write concise yet natural phrases in pseudocode, balancing compactness and readability.  
- Inline simple loops and conditionals when clearly understandable.  
- Explicitly show overall structure, including classes and method signatures with parameters.  
- Omit all docstrings, comments, imports, detailed type declarations, or explanations.

Example input code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Corresponding pseudocode output:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```

This style ensures the pseudocode is immediately understandable, compact, and retains full structure for direct use or translation.