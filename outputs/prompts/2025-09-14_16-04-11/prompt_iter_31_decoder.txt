Translate the given pseudocode into fully runnable, idiomatic, and efficient Python 3.9+ code by following these strict guidelines:

- Output **only** the complete Python code enclosed in a single triple-backtick code block with language tag `python` (```python ... ```), without any additional text, comments, explanations, or separators.
- Preserve **exactly** all class names, function/method names, argument names, variable names, control flow structures, and nesting/indentation as given in the pseudocode — no renaming, reordering, omission, or addition of any identifiers or blocks.
- Implement the pseudocode logic with exact fidelity and completeness — do **not** add, remove, or assume any logic beyond what is explicitly specified or can be logically inferred from the pseudocode.
- Include **all necessary imports**, helper functions, class definitions, and data structures to ensure the code runs independently and correctly without external input/output beyond what pseudocode dictates.
- Use **precise and consistent type annotations** (Python 3.9+ syntax) wherever type information can be reasonably inferred, ensuring clarity and correctness.
- Write clean, idiomatic Python that emphasizes readability, maintainability, and efficiency:
  - Use Python built-ins, data structures, and idiomatic patterns appropriately.
  - Favor straightforward, direct translations over unnecessarily complex constructions.
- Identify and handle all edge cases explicitly if indicated or implied by the pseudocode's control flow or logic, to prevent runtime errors or logical faults.
- Limit runtime and memory overhead—ensure the translated code can reliably run within a 5-second timeout on typical inputs by avoiding inefficiencies.
- Do **not** include any debugging code, print statements, logging, or interactive input/output unless explicitly instructed by the pseudocode.
- Translate pseudocode-specific constructs exactly:
  - e.g., `LENGTH(s)` → `len(s)`
  - `FOR i IN RANGE LENGTH(s)` → `for i in range(len(s))`
  - `FUNCTION foo(args)` → properly defined Python method or function with correct indentation and placement.
- Do **not** invent new helper logic, data structures, or methods unless their need is clear and logically justified by the pseudocode.
- Maintain consistent and syntactically correct Python indentation and structure faithfully reflecting the pseudocode's blocks.

```python
# Your fully translated, self-contained Python code here
```