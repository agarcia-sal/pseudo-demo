Generate concise, high-level pseudocode from the given problem description preserving all original class, function, and method names exactly as provided. Output only pseudocode without comments, explanations, or summaries—no extra text or notes.

- Use clear, natural language mixed with symbolic operators (←, +, -, *, /, //, %, ==, <, >).
- Favor compact one-liners for loops and conditionals when readable, but keep logical flow and readability.
- Maintain all original class and method structures and their nesting.
- Number each line starting at 1, indent blocks consistently to reflect code scope.
- Use uppercase keywords: FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, END CLASS, etc.
- Express control flow and assignments naturally but succinctly, e.g.:

```
1. x ← 0
2. WHILE x < n: x ← x + 1
```

- Do not add separator lines or extraneous formatting.
- Show overall structure including class and method definitions.
- Avoid docstrings, import statements, or annotations.
- Use plural or descriptive variable names only if meaningful and concise.
- Emphasize pseudocode that is easy to read, understand, and translate back to code rapidly.

Example:

Given this function:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce this pseudocode:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```