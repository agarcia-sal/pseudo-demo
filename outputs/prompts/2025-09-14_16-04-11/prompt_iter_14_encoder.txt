Generate clear, concise, high-level pseudocode from the given problem description, preserving all original class and function names exactly and maintaining their class and method structure. The output should consist solely of pseudocode lines—no explanations, comments, summaries, or extraneous text. Use natural language mixed with symbolic operators (←, +, -, *, /, //, %, ==, <, >), favoring one-liner loops and conditionals when readable. Follow consistent indentation to show code blocks. Number each line as follows:

1. x ← 0  
2. while x < n: x++

Adhere to these conventions:

- Use uppercase keywords (FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, CLASS, END CLASS).  
- Keep all original identifiers (class names, method/function names, variables) exactly as provided.  
- Prefer concise expressions and compact flow control, but ensure clarity and straightforward readability.  
- Represent collections and operations using natural language terms combined with symbolic operators (e.g., LENGTH(list), IN, RANGE, MAX).  
- Show complete program structure including classes and method signatures, but omit imports, docstrings, and explanatory comments.  
- Do not include separator lines or extra formatting.

Example:

If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode as:  
```
FUNCTION calc_average(nums)
    SET total ← 0
    FOR num IN nums: total ← total + num
    SET avg ← total / LENGTH(nums)
    RETURN avg
END FUNCTION
```