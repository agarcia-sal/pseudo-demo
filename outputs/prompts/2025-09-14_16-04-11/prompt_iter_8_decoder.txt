Translate the given pseudocode into fully functional, idiomatic, and optimized Python code with the following requirements:

- Preserve all class names, method names, signatures, and hierarchical structures exactly as stated in the pseudocode, without any changes.
- Implement the core logic strictly as implied by the pseudocode, without introducing unrequested features or behaviors.
- Include all referenced or implied helper functions, classes, and data structures in the output.
- Use precise and consistent type hints for all functions, methods, parameters, and return values whenever the pseudocode implies input/output types.
- Write clean, readable, and maintainable code following Python best practices, including use of built-in data structures and standard library modules whenever beneficial.
- Carefully handle edge cases to ensure correctness and robustness across all valid inputs.
- Ensure optimal time and space complexity to run within a 5-second timeout for typical problem sizes.
- Comment sparingly and only where it meaningfully enhances code clarity or understanding.
- Import additional Python standard or widely available third-party packages only if clearly required or unmistakably beneficial based on the pseudocode context.
- Output the complete solution enclosed solely within a single Python code block, i.e., surrounded by triple backticks and starting with ```python.
- Do not include any explanatory text, debugging prints, testing code, or other output outside the code block.

```python
# Your translated code here
```