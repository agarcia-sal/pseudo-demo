Generate concise, high-level pseudocode directly from the given problem description, strictly preserving all original class and function names, signatures, and their hierarchical structure as provided. The pseudocode should be compact yet clear, favor mixing natural language verbs with symbolic operators (←, +, -, *, /, //, %, ==, <, >, etc.) and prefer single-line loops and conditionals where readability is maintained. Number each line sequentially starting at 1, using consistent indentation to represent code blocks, with this exact format:

1. x ← 0  
2. WHILE x < n: x++

Use uppercase for all keywords (FUNCTION, SET, FOR, WHILE, IF, ELSE, RETURN, END FUNCTION, etc.), avoid comments, explanations, summaries, or any additional formatting such as separators or headers. Include all class and method definitions exactly as named and structured in the problem, and omit imports or docstrings.

Favor more natural language expressions (e.g., INCREMENT x BY 1 instead of x ← x + 1), but keep them concise without verbosity. Use meaningful variable names as in the problem but compress code into one-liners where it remains easily understandable at a glance.

Example conversion:  
Input:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:  
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR num IN nums: INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH(nums)
    RETURN avg
END FUNCTION
```

Ensure the pseudocode is immediately comprehensible, compact, and ready for algorithmic interpretation or translation without ambiguity or excess detail.