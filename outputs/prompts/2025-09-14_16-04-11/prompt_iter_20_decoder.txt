Translate the given pseudocode into correct, efficient, and idiomatic Python code with the following strict guidelines:

- Return **only** the fully working Python code inside a single triple-backtick code block tagged with `python`.
- Preserve all class names, method names, function names, signatures, variable names, and structural hierarchies **exactly** as in the pseudocode without any renaming, rearranging, or omission.
- Include all necessary imports, class and helper function definitions, and data structures to ensure completeness and standalone correctness.
- Use Python standard libraries or well-known public packages **only if absolutely needed** for correctness or performance; justify any external imports with their necessity.
- Precisely implement the logical flow described by the pseudocode, **neither adding nor omitting** any functionality or assumptions.
- Add comprehensive type annotations everywhere types can be inferred or are meaningful.
- Write clean, readable, maintainable, and idiomatic Python code using best practices (e.g., meaningful names, simple control flow, proper use of built-ins).
- Add **only minimal comments**, solely to clarify non-obvious or intricate parts of the translation; avoid redundant explanations.
- Explicitly handle all edge cases as implied or suggested by the pseudocode to avoid runtime errors or incorrect outputs.
- Optimize the solution for both time and space, to reliably execute within a 5-second timeout on typical inputs.
- Do **not** include any print statements, debugging output, or any I/O code beyond what the pseudocode requires.
- Do **not** modify any identifier from pseudocode â€” every class, method, variable, and argument name must be identical.
- Where pseudocode uses constructs like LENGTH(s), FOR i IN RANGE LENGTH(s), or FUNCTION foo(args), translate them to clear, efficient Python equivalents, preserving semantics exactly.
- Ensure careful and consistent matching of indentation and code block structure corresponding to the pseudocode layout.
- Avoid introducing helper code, logic, or data structures not supported or implied by the pseudocode.

```python
# Your fully translated Python code goes here
```