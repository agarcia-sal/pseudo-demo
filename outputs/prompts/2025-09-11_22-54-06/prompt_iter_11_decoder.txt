```python
Translate the given pseudocode into fully functional, clean, and idiomatic Python code enclosed solely within one Python markdown code block (```python ... ```).  
Your translation must:  
- Preserve all class names, function names, signatures, and their nesting exactly as in the pseudocode.  
- Replace all pseudocode null-like literals (`null`, `Null`, `None`, etc.) with Python’s `None`.  
- Identify any complex data structures (e.g., binary trees, linked lists, graphs) implied by input arguments or pseudocode descriptions. When such inputs may appear as plain Python lists or arrays, implement robust, reusable helper functions to convert these lists into proper Python data structures (e.g., `ListNode`, `TreeNode`) with all necessary supporting classes and constructors. Make these helpers included and used automatically so that calling the top-level solution methods with lists behaves correctly as intended.  
- Import from Python standard libraries or widely accepted, lightweight packages only. Avoid unusual or external dependencies.  
- Thoroughly handle all edge cases gracefully (empty inputs, single-node structures, null roots, etc.) to avoid runtime errors.  
- Ensure no input parameter in the final code is left as a plain Python list when a complex structure is expected—always perform type-checking and conversion inside the solution code.  
- Write well-structured, efficient, and well-tested code aiming for clarity, correctness, and runtime within 5 seconds. Favor readability and correctness over premature micro-optimizations.  
- Comment internally only where clarity of complex logic is needed; do not add any explanation or text outside the code block.  
- Avoid partial implementations or placeholders; produce full working code that can be executed immediately as-is.  

Return only one Python code block in the exact format below:

```python
# Your complete, tested Python translation here
```

Add no extra text or markdown outside this code block.
```