Translate the given pseudocode into complete, clean, and efficient Python code wrapped entirely in a single Python markdown code block. Your translation must strictly preserve all original function and class names, including their signatures and structural hierarchy (classes, methods, etc.).  
Convert any pseudocode data representations of complex structures (e.g., trees, linked lists) into correct Python implementations, providing all necessary helper classes and constructors. Automatically replace null-like literals (e.g., `null`) with Python’s `None` to ensure no runtime errors occur.  
If input parameters are expected to be tree or linked list roots but are given as lists (e.g., level-order or element arrays), implement robust helper functions to convert these lists into proper data structures within the returned code, ensuring that usage from main functions remains consistent with the pseudocode.  
Use only Python standard libraries or well-known packages; optimize for clarity, correctness, and runtime efficiency under a 5-second execution time constraint. Write idiomatic Python with meaningful variable names and appropriate comments only when needed for clarity inside the code, but include no additional explanatory text outside the code block.  
Handle typical edge cases gracefully (e.g., empty inputs, single-element structures) and avoid partial or placeholder implementations—produce fully executable, tested-ready code.  

Return the entire solution as one Python code block like this:

```python
# Your fully implemented translated code here
```

Do not add any text or markdown outside the code block.