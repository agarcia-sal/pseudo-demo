```python
Translate the given pseudocode into a fully working, clean, idiomatic, and directly runnable Python implementation enclosed entirely within ONE Python markdown code block starting with ```python and ending with ```.  
Your translation must:  

- Preserve all class names, function names, method signatures, and nesting as exactly specified in the pseudocode, ensuring no changes to their names or structure.  
- Convert all pseudocode null-like literals (`null`, `Null`, `NONE`, or similar) into Python’s `None`. Do not leave them as raw strings or undefined symbols.  
- Automatically identify complex data structures (e.g., binary trees, singly or doubly linked lists, graphs, Union-Find, tries, etc.) from parameter names, types, or pseudocode context. For each:  
  • Define robust, concise helper classes with proper constructors, type annotations, and class docstrings if helpful. Use modern typing hints throughout.  
  • Provide standard, reusable, and defensive conversion functions that reliably transform input representations (e.g., nested lists with `None` for absent nodes in trees; flat lists for linked lists) into the actual data structure objects. These must handle common coding challenge input formats and edge cases, including empty lists, malformed or partial inputs, and invalid values gracefully.  
  • Integrate conversion logic **inside** the main solution method(s), so that any input parameter representing a complex structure is automatically and safely converted before use, even if the caller does not prepare the input. This ensures the solution protects itself from invalid or raw inputs and never assumes the caller has pre-processed them.  
- Never assume or leave input parameters that represent complex structures as raw lists or arrays inside your logic; always convert them reliably before proceeding but avoid redundant conversions if already done.  
- Use only Python standard libraries and those very widely accepted as minimal and dependency-free (e.g., `collections`, `typing`, `heapq`, `math`), avoiding any heavy or unusual dependencies.  
- Enforce rigorous error handling and input validation defensively to prevent runtime exceptions on edge cases such as empty inputs, minimal or single-node structures, completely `None` inputs, unexpected data types, or partially missing nodes. Your code should gracefully handle or reject such inputs without crashing.  
- Write concise, clear, maintainable code prioritizing correctness, readability, and performance, but avoid premature or confusing micro-optimizations. The solution should run comfortably within a 5-second time limit on typical problem inputs.  
- Insert explanatory comments only where the logic is non-trivial or subtle. Avoid over-commenting clear, self-explanatory code.  
- Include all necessary imports inside the single Python code block.  
- Do not output any text outside the single Python code block (no explanations, disclaimers, or extra markdown).  
- Preserve exact code block formatting—start with ```python and end with ``` only.  
- Make sure the entire code is fully functional and can be executed or tested immediately, NOT partial snippets or skeletons.  
- Use modern Python 3.8+ typing syntax and best practices throughout for clarity and robustness.

Return exclusively this single markdown Python code block containing the full translated solution.
```