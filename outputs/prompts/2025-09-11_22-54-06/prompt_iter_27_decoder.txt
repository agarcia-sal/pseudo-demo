```python
Translate the given pseudocode into a complete, clean, idiomatic, fully executable Python solution enclosed in a single Python code block (```python ... ```).  
Your code must adhere strictly to the following guidelines:

- **Preserve all class names, method/function names, signatures, and structural nesting exactly as they appear in the pseudocode**.  
- Convert all variants of "null"-like literals (`null`, `Null`, `None`, etc.) to Python’s `None`.  
- **Fully detect and support all implied complex data structures** (e.g., linked lists, binary trees, graphs) from parameter names, types, or pseudocode context, and:  
  • Provide precise, minimal, reusable, and robust helper class definitions (e.g., `TreeNode`, `ListNode`) with complete constructors including modern Python type hints.  
  • Implement comprehensive conversion utility functions that convert typical input forms (such as Python lists with nested `None`s for trees or simple lists for linked lists) into these data structures. These converters must gracefully handle empty inputs, invalid types, irregular nesting, and `None` values—guaranteeing no runtime errors upon usage.  
  • Inside all solution methods, include defensive input processing so that any parameter representing a complex structure—whether given as raw lists or otherwise—is internally converted before applying core logic. Callers should never need to pre-process inputs.  
- Use only Python’s standard library or widely accepted, minimal-dependency packages if absolutely necessary (prefer built-ins). Avoid adding any dependencies without compelling need.  
- Handle **all edge cases rigorously**, including empty inputs, single-item inputs, `None` roots, and malformed input lists—ensuring full correctness and zero runtime exceptions.  
- Write concise yet clear, maintainable, and idiomatic Python code prioritizing correctness and readability. Avoid unnecessary micro-optimizations that impair clarity or maintainability.  
- Use Python 3.9++ syntax where appropriate, including type hints (`from typing import ...`), dataclasses if useful, and modern typing constructs.  
- Add explanatory comments **only on complex or subtle logic**, keeping the main code self-explanatory.  
- Your final output must be a **single, contiguous Python code block**, starting with ```python and ending with ```. Do not output any additional text, explanations, or markdown outside this block.  
- Place all import statements inside the code block at the top, minimally and clearly.  
- Your code must be directly runnable and testable without further modification or stubs. Provide complete functionality.  
- Maintain original method and class formatting and spacing but ensure consistent clean style.  

Return this perfectly executable Python code block containing the whole translated solution only.
```