```python
Translate the provided pseudocode into a single, complete, idiomatic, and directly runnable Python 3.9+ solution enclosed fully within one Python code block (```python ... ```).  
Your translation must:

- Preserve all class names, method and function names, exact method signatures, and code nesting precisely as shown in the pseudocode.  
- Normalize all null-like literals (`null`, `Null`, `NONE`, etc.) to Python’s `None` across all inputs, outputs, and internal usage, including in test inputs embedded as literals.  
- **Robustly detect any complex data structures implied or explicitly defined by parameters or pseudocode context—such as linked lists, binary trees, doubly linked lists, graphs, or nested collections—and provide minimal, modern, reusable helper classes with full type hints and dataclass decorators if appropriate (e.g., `ListNode`, `TreeNode`, `GraphNode`).**  
- Provide comprehensive, defensive, fault-tolerant conversion helpers that transform common Python-native input formats (e.g., lists with nested `None`s for trees, flat lists for linked lists, adjacency lists/dicts for graphs) into those data structures. These converters must:  
  • Thoroughly validate inputs for type correctness, emptiness, malformed or irregular nesting, and unexpected values, gracefully returning `None` or empty structures without exceptions.  
  • Correctly support all valid edge cases including empty inputs, single-node/single-element cases, and inputs containing or starting with `None`.  
- Automatically preprocess all method parameters representing complex structures inside the solution code so callers can pass raw input forms (native lists, dicts, primitives) directly without needing to preprocess.  
- Use only Python standard libraries and widely accepted minimal-dependency packages if absolutely necessary; prefer standard libraries. Document imports clearly.  
- Adhere strictly to clean, idiomatic, readable Python style, prioritizing maintainability and clarity over micro-optimizations. Use consistent formatting, spacing, and naming conventions aligned with modern Python standards.  
- Use full Python 3.9+ syntax and features including standard `typing` annotations, `collections`, `dataclasses` as applicable, type aliases, generics, and f-strings for clarity and type safety.  
- Comment only on complex or subtle parts of the logic, keeping code self-explanatory elsewhere.  
- Ensure all generated code including helper classes and converters are contained within the single output code block, with no extraneous text or markdown outside it.  
- Put all imports at the very top of the code block in a minimal, clear manner.  
- Guarantee output code is directly executable and testable as-is, requiring no modifications, stubs, or external setups.  
- Maintain method and class formatting and indentation as in pseudocode, but apply consistent modern style inside methods and helpers.  
- Proactively handle and transform any literal `null` occurrences in the pseudocode or input samples into `None` so that `NameError: name 'null' is not defined` and similar runtime errors never occur.  
- For iteration constructs like “for index, element in collection with index,” use Python’s `enumerate` properly.  
- Detect logical operators like XOR and translate properly.  
- Use helper functions for common conversions but avoid extraneous or redundant code.  
- When returning values, ensure types and structures exactly match the pseudocode contracts.  

Return **only** the final comprehensive, robust, idiomatic Python code in one contiguous triple-backtick python code block, nothing else.
```