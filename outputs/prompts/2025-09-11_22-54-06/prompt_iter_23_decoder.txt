```python
Translate the input pseudocode into a single, complete, and directly executable Python solution enclosed strictly within one Python code block (```python ... ```).  
Adhere to these key requirements:  

- **Preserve exactly** all class names, function names, signatures, and their nesting/structure as given in the pseudocode.  
- Convert all null-like pseudocode literals (`null`, `Null`, `None`, etc.) to Python’s `None`.  
- Reliably **detect any implied complex data structures** (e.g., linked lists, binary trees, graphs, union-find) using input parameter names, types, or pseudocode context. For each detected structure:  
  - Define robust, idiomatic helper classes (`TreeNode`, `ListNode`, `UnionFind`, `GraphNode`, etc.) with correct type annotations and constructors.  
  - Provide comprehensive, reusable converter functions that turn typical input representations (e.g., arrays/lists with `None` placeholders for trees, flat lists for linked lists) into these structures. These functions must:  
    - Handle irregular, empty, or malformed inputs gracefully without raising exceptions.  
    - Skip or sanitize invalid entries logically when building structures (e.g., ignore leading `None`s in linked list arrays).  
  - Internally transform all function parameters representing complex types into these classes before executing main logic, ensuring callers need no preprocessing.  
- Replace any parameter that conceptually represents a complex structure and is given as a raw list or other primitive input with the corresponding properly converted structure before running the core algorithm.  
- Apply defensive programming: insert rigorous but efficient input validation and type checks that guarantee zero runtime errors and robust handling of edge cases (empty inputs, minimal nodes, completely null trees, invalid types, etc.).  
- Use only Python standard libraries or minimal, widely-adopted, no-dependency packages. If absolutely necessary, any imports must be minimal, explicit, and placed inside the code block at the top.  
- Employ modern Python typing hints (`typing`) everywhere for maximum clarity and maintainability.  
- Write clean, idiomatic, well-structured, and performant code that fits within the typical 5-second execution limit for competitive problems without resorting to complex micro-optimizations that reduce readability.  
- Add comments sparingly and only for non-trivial, algorithmically complex, or non-obvious sections. Avoid obvious comments.  
- Output fully working code only—no stubs, placeholders, partial snippets, or text explanations outside the single code block.  
- Do not add any text or markdown outside the sole Python code block.  
- The output block must use exactly the syntax ```python to start and ``` to end, preserving formatting and indentation faithfully.  

Return exclusively this one Python code block containing the entire runnable solution implementing the pseudocode accurately and idiomatically, ready for testing as-is.
```