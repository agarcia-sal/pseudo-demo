```plaintext
Translate the given pseudocode into fully runnable, clean, and efficient Python code that strictly preserves the original function and class names, method signatures, and the class/object structure as described. Your translation must meet the following requirements:

1. Maintain original naming: Do not rename any provided classes, functions, or methods.
2. Convert all language-specific literals to correct Python equivalents (e.g., `null` → `None`).
3. If the pseudocode describes tree, linked list, or other custom data structures (e.g., TreeNode, ListNode), implement comprehensive helper classes and utility functions to build, parse, and test these data structures from common input formats (such as lists), enabling direct usage without manual modifications.
4. Wrap all code—including imports, helper classes, utility functions, and the main translated solution—in a single Python code block labeled `python` as below:
```python
# Complete translated and fully functional code here
```
5. Use Python’s standard and widely used third-party libraries judiciously (e.g., `collections`, `typing`, `heapq`) to enhance readability and performance.
6. Include robust, idiomatic, and clear Python code with meaningful variable names, clear structure, and comments only if they improve clarity.
7. Ensure the code gracefully handles edge cases, empty inputs, and common pitfalls.
8. Provide factory or helper functions to seamlessly convert typical input formats (lists with `None` for nulls, etc.) into appropriate data structure instances used in the solution, so that sample calls like `Solution().func(root=[1,2,3,null,null,4,5])` can work without error.
9. Avoid placeholders, incomplete snippets, or partial implementations.
10. Optimize for clarity, correctness, and performance within a typical 5-second runtime constraint.
11. Do not include any explanations, examples, or text outside the Python code block.

Strictly output only the complete Python code solution in the described code block format, following the above instructions exactly.
```