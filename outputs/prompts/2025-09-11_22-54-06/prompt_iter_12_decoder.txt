```python
Convert the provided pseudocode into a complete, clean, and idiomatic Python implementation within a single Python markdown code block (```python ... ```).  
Your code must:  
- Preserve all original class names, method/function names, parameters, signatures, and nesting exactly as in the pseudocode.  
- Convert all pseudocode null-style literals (`null`, `Null`, `None`, or equivalents) into Python’s `None`. Treat input examples or code snippets with `null` as `None` internally.  
- Accurately detect and implement all implied complex data structures (e.g., binary trees, linked lists, graphs) from inputs or descriptions. Provide robust, reusable helper classes and factory/conversion functions (e.g., `ListNode`, `TreeNode`) to transform plain input lists into these structures. Include these helpers fully and use them automatically inside the solution to convert inputs before running core logic.  
- Include all necessary imports, restricted to Python standard libraries and widely accepted minimal dependencies only; avoid niche or obscure packages.  
- Implement strict, runtime-safe type checking and input validation: ensure no parameter expected to be a complex structure remains a plain list or primitive. Perform all conversions inside the provided solution code so the solution method can be called directly with raw inputs such as lists.  
- Cover all edge cases gracefully and thoroughly (empty inputs, single-node or empty structures, None roots/heads, etc.) to prevent errors or incorrect behavior.  
- Write self-contained, fully executable code: no placeholders, partial implementations, or scaffold comments. The output should run out-of-the-box.  
- Comment concisely and only where absolutely needed to clarify nontrivial logic. Avoid any explanation, extra text, or narrative outside the single code block.  
- Optimize primarily for correctness, clarity, and reliability; ensure solutions run within 5 seconds and handle typical input sizes efficiently. Avoid premature micro-optimizations that reduce readability.  
- Convert all instances of ‘null’ or similar from pseudocode or test inputs into Python `None` explicitly—this prevents `NameError`.  
- If implied, provide helper functions or methods that enable easy conversion from test-style raw inputs (e.g., `root = [1,2,null,3]`) into proper data structures internally within the solution code.  
- Do not add or remove class or function definitions beyond what the pseudocode specifies, except to include helper classes/functions for data structures needed.  
- Return your entire solution exclusively enclosed in exactly one Python code block formatted as below with no additional output or text:

```python
# Your fully implemented Python solution starts here.
```
```