```python
Translate the input pseudocode into a complete, clean, idiomatic, and fully executable Python implementation.  
Enclose all your code exclusively within one Python markdown code block (```python ... ```).  
Your code must:  
- Preserve all class names, function names, and signatures verbatim, keeping their exact nesting and structure as in the pseudocode.  
- Convert all pseudocode null-like literals (`null`, `Null`, `None`, etc.) to Python’s `None`.  
- Automatically detect any implied complex data structures (binary trees, linked lists, graphs, etc.) based on input parameter types or pseudocode context. For these, provide:  
  • Fully defined helper classes (e.g., `TreeNode`, `ListNode`) with proper constructors.  
  • Robust, reusable, and well-tested conversion functions that transform plain Python lists (including nested lists with None for missing nodes) into these data structures, supporting typical input conventions used in coding challenges.  
  • Defensive type checks and conversions inside the main solution code, so that all inputs representing complex structures are properly transformed before logic execution—without requiring caller preparation.  
- Avoid leaving any input parameter that conceptually represents a complex structure as a raw list; always convert internally.  
- Use only Python standard libraries or well-established, minimal, dependency-free packages (prefer standard Python).  
- Handle all edge cases rigorously (empty inputs, minimal nodes, None roots, invalid/empty lists, unexpected types) to ensure zero runtime errors and maximum correctness.  
- Write concise but clear code, prioritizing correctness, readability, maintainability, and performance—within a 5-second execution limit. Avoid complicated micro-optimizations that hurt clarity.  
- Add comments **only** on complex or non-obvious logic parts—make the implementation self-explanatory otherwise.  
- Provide fully working code; do not output partial code snippets, placeholders, or stubs. The code should be directly runnable and testable.  
- Import statements must be placed inside the code block, clearly and minimally.  
- Do not add any text or markdown outside the single Python code block.  
- Preserve exact formatting of the code block: start with ```python and end with ``` only.  
- Use modern Python typing hints and best practices for clarity.  

Return only this single Python code block containing the entire translated solution.
```