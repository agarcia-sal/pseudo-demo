```python
Translate the given pseudocode into a fully working, idiomatic, and clean Python solution enclosed strictly within a single Python markdown code block (```python ... ```).  
Your solution must:

- Keep all class names, function names, and method signatures exactly as in the pseudocode, preserving their nesting and structure verbatim.  
- Replace any pseudocode null-like literals (`null`, `Null`, `none`, `None`, etc.) with Python’s `None`.  
- Automatically detect common complex data structures such as linked lists, binary trees, and graphs by analyzing parameter names, types, or usage context. For each detected structure:  
  • Define standard, minimal helper classes (e.g., `ListNode`, `TreeNode`) with type hints and constructors.  
  • Provide robust, reusable, and well-documented helper functions that convert typical list-based inputs (including nested lists with `None` for missing nodes) into the relevant data structures.  
  • Internally and defensively convert all inputs that conceptually represent these structures before executing main logic, never leaving raw lists for such parameters.  
- Use only Python’s standard library or widely accepted dependency-free packages—avoid exotic or heavy dependencies.  
- Enforce rigorous edge case handling (empty lists, `None` values, minimal or invalid inputs, unexpected types) to produce zero runtime errors and maximize correctness and robustness.
- Employ modern Python features and best practices, including typing annotations, dataclasses if appropriate, and clear variable naming for readability and maintainability.  
- Write clear, concise code that balances readability and performance, targeting solutions that run well within a 5-second execution limit without sacrificing clarity for micro-optimizations.  
- Add comments only to clarify complex, non-obvious, or subtle logic; avoid redundant commentary on straightforward code.  
- Place all necessary import statements inside the code block at the top, minimizing imports to essentials only.  
- Return **only** the complete Python code block; do not add any explanation, separators, extraneous text, or markdown outside the code block.  
- Preserve exact code block format starting with ```python and ending with ```.  
- Ensure the generated code is directly executable and testable without modification or additional setup.

Return this single, final Python code block containing the entire translated implementation.
```