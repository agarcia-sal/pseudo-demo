Translate the given code into clear, concise pseudocode that preserves all control flow (if, else, while, for, switch/case), variable assignments, and function calls uniformly and simply. Use mostly natural language with symbolic notation and standard abbreviations, structuring pseudocode to be compact, readable, and high-level—prefer short one-line statements, concise identifiers, and consistent indentation to reflect nesting. You may omit less critical details if needed to minimize lines, prioritizing brevity without losing essential logic or flow. Do not include explanations, comments, summaries, or any extra formatting—output only the numbered pseudocode steps starting at 1, strictly following this style:

1. let x ← initial_value  
2. if condition: action  
3. for i from start to end: action  
4. call function(args)  
5. in function fname:  
  statements  

Avoid separator lines or extra notation. Use phrase forms like “let var be type,” “read,” “print,” “set,” and common control flow keywords aligned with typical pseudocode conventions. Emphasize clarity with natural phrasing while keeping output minimal and logically faithful. Output the final pseudocode within 5 seconds.