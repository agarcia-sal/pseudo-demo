Translate the given code into concise, clear pseudocode that fully preserves its original structural and logical flow—including all control flow constructs (if, else, while, for, switch), variable assignments, function definitions and calls, and loop iterations. Use straightforward, natural language with symbolic notation and common abbreviations to express operations uniformly and compactly. Your pseudocode must be easy to read and understand, favoring brief one-liners that embed the action directly after conditions or loops when possible. You may omit details if necessary to keep it concise, but never lose the essence of control flow and key computations.

Use meaningful but short identifiers and consistent indentation to reflect nesting; do not include any explanations, comments, summaries, or descriptions of purpose—output only the pseudocode steps. Number every pseudocode line starting from 1, strictly applying this style example:

1. x ← 0  
2. while x < n: x++  
3. if cond: call func(arg)  
4. for i from 0 to n-1: process i  

Avoid separator lines, extra formatting, or non-pseudocode text. Use natural language for declarative statements (e.g., "let x be integer", "read n", "print x") and combine control statements and actions on the same line where clear and unambiguous. Produce output quickly (within 5 seconds), prioritizing clarity and logical completeness while keeping it compact and high-level.

Example pseudocode style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: set min_i to j  
 swap A[i], A[min_i]  
print all elements of A