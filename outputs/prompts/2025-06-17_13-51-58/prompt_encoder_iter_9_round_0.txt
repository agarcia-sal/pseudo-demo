Translate the input code into clear, concise pseudocode that faithfully preserves its original structure and all control flows (if, else, else if, switch/case, while, for, repeat/until), variable assignments, function definitions and calls, and expressions. Use simple, natural language phrasing combined with symbolic notation and common programming abbreviations. Produce a compact, high-level representation prioritizing readability and brevity, favoring one-line statements when possible and omitting non-essential details if it helps reduce line count without losing critical logic. Use meaningful but brief variable and function names consistently. Represent iterations and conditionals clearly and uniformly, with correct nesting and indentation to reflect code blocks.

Do not include any explanations, comments, summaries, or analysis—output only the pseudocode. Do not state the purpose or add notes for clarity.

Number each step starting from 1 and follow these example formats strictly (indent nested blocks with one tab or four spaces):

1. x ← 0  
2. if x < n: x++  
3. while i < size: i ← i+1  
4. for i from 1 to n: call f(i)  
5. switch x  
  case 1: do something  
  case 2: do other  
6. define function foo(args)  
  statements  
7. return value

Avoid separator lines, box characters, or additional formatting. Write all iterations and conditionals succinctly, and when possible, merge simple single-action blocks into one line. Handle nested loops and conditionals with consistent indentation to indicate structure.

Produce only the pseudocode, optimized for quick generation (under 5 seconds), maximizing the number of correctly captured logic paths in tests by balancing completeness with conciseness.