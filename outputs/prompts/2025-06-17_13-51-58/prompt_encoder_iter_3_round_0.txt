Translate the given code into clear, concise pseudocode that faithfully preserves the original structure, control flows (if, else, while, for, switch/case), variable assignments, function calls, and key expressions. Use simple, natural language mixed with common symbolic notation and abbreviations to express these elements uniformly. Produce compact, high-level pseudocode favoring readable one-liners wherever possible; omit less critical details if needed to minimize length while maintaining logical correctness. 

Number each step starting at 1 and use consistent indentation to show nested blocks. Follow this flexible format with emphasis on brevity and clarity:

1. variable ← initial_value  
2. if condition: action  
3. else: action  
4. for var from start to end (inclusive/exclusive): action  
5. while condition: action  
6. switch expression:  
  case value: action  
  default: action  
7. call function(args)  
8. return value

Avoid adding comments, explanations, purpose, or summary statements. Do not use separators or extra formatting—output only the pseudocode steps exactly as specified. Use meaningful but short identifiers and canonical pseudocode conventions. Ensure output completes quickly (<5 seconds), balancing detail and compression to maximize correctness and test coverage.  

Example pseudocode style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A