Translate the given code into clear, concise pseudocode that precisely preserves its original control flow and key operations: branching (if, else if, else, switch/case), loops (for, while), variable assignments, function calls, and expressions. Use consistent, simple symbolic notation combined with natural language phrases. Favor compact, high-level one-line statements; merging consecutive simple operations per line is encouraged. It is acceptable to omit less critical details if it reduces line count without losing essential logic or altering behavior.

Represent variable declarations, assignments, and updates clearly using arrows (←). Express loops and conditionals using plain phrases (e.g., "for i from start to end:", "while condition:", "if condition:", "else:"). Maintain consistent indentation to show nesting, and use short but meaningful variable and function names. Use standard pseudocode conventions and avoid language-specific syntax.

Output only the numbered pseudocode steps starting at 1, without extra headers, commentary, explanations, meta-text, or separator lines. Do not include code purpose, summaries, or clarifications. The pseudocode should be easy to read, logically faithful, and as brief as possible within these constraints. Complete the output promptly within 5 seconds.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i from 0 to n-1:  
7.   let min_i ← i  
8.   for j from i+1 to n-1:  
9.     if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A