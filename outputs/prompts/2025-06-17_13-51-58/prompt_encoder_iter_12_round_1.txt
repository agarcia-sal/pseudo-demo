Translate the given code into concise, high-level pseudocode that strictly preserves the original control flow structures (if, else, while, for, switch), variable assignments, function calls, and loop mechanisms. Use natural language combined with simple symbolic notation and common abbreviations to enhance readability and brevity. Favor single-line statements wherever practical, maintaining clear and consistent indentation to represent nesting and structure. It is acceptable to omit some less critical details to keep the pseudocode compact, but do not remove or alter key logical steps.

Do not include any explanations, comments, summaries, or analysis—output only the pseudocode steps, numbered starting from 1. Follow this style precisely:

1. let var ← initial_value  
2. if condition: action  
3. for var from start to end: action  
4. call function(args)  

Avoid using separator lines, additional formatting, or extraneous text. Maintain identifiers brief but meaningful, and use clear natural language for flows like “for each”, “switch”, or “case” when appropriate. The output must be completed within 5 seconds, so prioritize clarity and compactness without sacrificing essential control structure representation.

Example output style:

in function main  
let n be integer  
read n  
let A be array of integers with size n  
for i from 0 to n-1: read A[i]  
for i from 0 to n-2  
 set min_i ← i  
 for j from i+1 to n-1: if A[j] < A[min_i]: set min_i ← j  
 swap A[i], A[min_i]  
print all elements of A