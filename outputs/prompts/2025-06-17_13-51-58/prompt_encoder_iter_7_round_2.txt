Translate the given code into concise, high-level pseudocode that preserves its original logical structure and all control flow constructs (if, else, while, for, switch), variable assignments, function calls, and loops. Express statements simply and uniformly, using natural language combined with symbolic notation and standard abbreviations. Prioritize readability with compact, mostly one-line steps; use meaningful but brief variable names and consistent indentation to reflect nesting. You may omit less essential details or intermediate expressions to reduce length, but never remove entire control structures or key operations. Do not include comments, explanations, summaries, or descriptions—output only the numbered pseudocode lines, starting at 1, strictly following this style:

1. var ← initial_value  
2. if condition: action  
3. for i from start to end: action  
4. call function(args)  

Avoid separator lines or extra formatting. When representing complex expressions or nested calls, simplify them while preserving intent. Use natural language phrases for actions (e.g., “read”, “print”, “swap”), symbolic operators (←, ++, --), and loops or conditionals in compact form. Complete within 5 seconds by balancing brevity and clarity, favoring concise one-liners that maintain the exact control flow and effect of the original code.

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers with size n  
for i from 0 to n-1: read A[i]  
for i from 0 to n-2:  
 set min_i ← i  
 for j from i+1 to n-1:  
  if A[j] < A[min_i]: set min_i ← j  
 swap A[i], A[min_i]  
print all elements of A