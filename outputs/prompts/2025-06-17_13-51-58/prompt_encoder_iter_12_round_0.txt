Translate the given code into clear, easy-to-understand pseudocode that strictly preserves the original code’s structure and captures all control flows (if, else, switch, while, for), variable assignments, function calls, and expressions uniformly and simply. Use mostly natural language phrasing combined with concise symbolic notation and common abbreviations. Prefer compact, high-level one-liners that keep logical flow intact but may omit some low-level details or verbose syntax to minimize line count. Indent nested blocks consistently to reflect code hierarchy. Use brief but meaningful variable and function names without explanations, comments, or summaries. Output only the numbered pseudocode steps starting at 1, strictly following this style:

1. var ← initial_value  
2. if condition: action  
3. for var from start to end (exclusive): action  
4. call function(args)  

Do not add lines with separators, headings, or extra formatting. Omit any clarifications or restatements of code purpose. Prioritize readability and brevity equally; concise omissions are preferred when they help fit within a strict 5-second runtime limit. The final output must be purely the streamlined pseudocode reflecting the original code’s logic and flow.