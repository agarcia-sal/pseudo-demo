Translate the input code into clear, compact pseudocode that strictly preserves its original logical structure: all control flows (if, else if, else, while, for, switch/case), variable assignments, loops, function calls, and expressions must be represented uniformly and simply. Use a concise mix of symbolic notation and high-level natural language phrasing, prioritizing one-line statements wherever possible. Omitting minor details is allowed to keep pseudocode brief, but never omit essential logic, control flow, or key operations. Use meaningful but short variable and function names, consistent indentation to mark nested blocks, and conventional pseudocode keywords and constructs. Do not add comments, explanations, summaries, or any meta-text—output exactly and only the pseudocode lines numbered sequentially starting from 1, using this exact style:

1. x ← 0  
2. while x < n: x++  
3. if condition: doAction()  
4. for i from start to end exclusive: update i  

Avoid any separator lines or extra formatting. Write only the pseudocode steps. The output should be minimal, easy to read, and faithful to the code’s logic. Complete output promptly within 5 seconds.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A