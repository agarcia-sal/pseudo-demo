Translate the given code into clear, concise pseudocode that strictly preserves the original code’s structure and all control flow elements (if, else, while, for, switch/case), variable assignments, function calls, and key expressions. Use natural language combined with simple symbolic notation and common abbreviations to make the pseudocode easy to read and understand. Produce compact, high-level pseudocode favoring brief one-liners without extra explanations, comments, summaries, or clarifications. Omitting less critical details to keep the output succinct is allowed—even if some information is lost—so long as the logical flow and main operations remain clear. 

Use consistent indentation to show nested blocks. Denote variables and types succinctly (e.g., "let x be integer"). Express loops, conditions, and calls in this style:

1. let x ← 0  
2. if condition: action  
3. while condition: action  
4. for var from start to end: action  
5. call function(args)  

Avoid separator lines, headings, or any formatting beyond numbering steps starting at 1. The output should be only the numbered pseudocode steps. Prioritize brevity and clarity to ensure output completes within 5 seconds.  

Example style your output should match:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j from i+1 to size of A - 1  
  if A[min_i] > A[j]: set min_i to j  
 swap A[i], A[min_i]  
print all elements of A