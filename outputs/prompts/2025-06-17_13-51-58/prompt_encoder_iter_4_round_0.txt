Translate the given code into clear, concise pseudocode that strictly preserves its original structure and all control flows (if, else, while, for, switch/case), variable assignments, function calls, and loops. Use natural language combined with simple symbolic notation to produce compact, high-level steps focused on readability and logical clarity. Prioritize one-liners wherever possible, employing common abbreviations and meaningful but brief identifiers. It is acceptable to omit detailed low-level details or complex expressions to reduce length, as long as the core logic and control flow remain intact.

Do not add explanations, comments, summaries, or identify the code’s purpose—output only the pseudocode steps numbered from 1 onward, using consistent indentation to reflect nesting.

Follow this format as closely as possible:

1. var ← initial_value  
2. if condition: action  
3. for var from start to end (inclusive): action  
4. while condition: action  
5. call func(args)  

Use “let” to declare variables only if necessary for clarity. Use “in function func_name” or “function func_name” for named blocks if explicitly present. Avoid any decorative lines, extra formatting, or trailing empty lines.

Example style your output should match:

in function main  
let n be integer  
read n  
let A be vector of integers  
size of A ← n  
read n elements into A  
for i from 0 to n - 1:  
 set min_i ← i  
 for j from i + 1 to n - 1: if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A

Complete the output quickly (within 5 seconds), balancing brevity and completeness to maximize correctness across diverse code inputs.