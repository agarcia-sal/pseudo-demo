Translate the given code into clear, concise, and high-level pseudocode that faithfully preserves its exact structure and all control flow constructs (if-else, while, for, switch/case), variable assignments, function calls, and expressions. Express these in straightforward natural language combined with common symbolic notation and abbreviations to maximize readability and compactness.  
- Favor single-line statements whenever possible, merging simple actions into one line without losing clarity.  
- Use consistent indentation to denote nested blocks and reflect the code’s structure precisely.  
- It is acceptable to omit less critical details if this reduces verbosity, prioritizing brevity over exhaustive completeness while fully maintaining logical flow and key operations.  
- Use meaningful but short variable names and function names directly from the code or simplified if appropriate.  
- Do not add explanations, comments, summaries, or describe the purpose of the code—output only the pseudocode itself.  
- Do not include extra formatting, separators, or blank lines.  

Number each step sequentially starting at 1, strictly following this format with natural-language style statements:

1. variable ← initial_value  
2. if condition: action  
3. else: action  
4. for var from start to end: action  
5. while condition: action  
6. switch var:  
  case value: action  
7. call function(args)  

Example style your output should emulate:  

in function main  
let n be integer  
read n  
let A be array of integers size n  
for i from 0 to n-1: read A[i]  
for i from 0 to n-2  
 set min_i to i  
 for j from i+1 to n-1: if A[j] < A[min_i]: set min_i to j  
 swap A[i], A[min_i]  
for i from 0 to n-1: print A[i]

Complete output strictly as numbered pseudocode steps only, within 5 seconds, optimizing for clarity, brevity, and faithful control flow preservation.