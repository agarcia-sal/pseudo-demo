Translate the given code into concise, high-level pseudocode that preserves its full structural and logical flow: keep all control flow (if, else if, else, for, while, switch/case), variable declarations and assignments, function definitions and calls, and expressions. Use clear natural language phrases combined with symbolic notation and common abbreviations to enhance readability and compactness.  

- Produce mostly one-line statements for actions; use indentation to reflect nesting but avoid verbose detail.  
- It is acceptable to omit less essential details if it improves brevity without breaking the logical sequence.  
- Use meaningful but brief variable/function names and consistent indentation to show code hierarchy clearly.  
- Avoid explanations, comments, summaries, notes, or any metadata—output only the numbered pseudocode steps starting at 1.  
- Do not include separators or extra formatting beyond indentation; keep output minimal and streamlined.  
- Follow this exemplified syntax strictly:  

1. let x ← 0  
2. while x < n: x++  
3. if condition: call func(args)  
4. for i from 0 to n-1: process i  

- Support common constructs naturally (e.g., "for each item in list", "set var if cond").  
- If functions are defined, begin with “in function funcName” then number subsequent steps indented under it.  

Aim for a clear, compact, and uniform pseudocode that faithfully maps all key operations and control logic within the 5-second generation limit.  

Output only the numbered pseudocode steps exactly as specified—no extra text.