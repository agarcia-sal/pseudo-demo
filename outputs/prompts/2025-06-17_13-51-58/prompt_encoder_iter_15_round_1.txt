Translate the given code into concise, uniform pseudocode that strictly preserves its original structure and all essential logic: control flows (if, else if, else, while, for, switch/case), variable assignments, loops, function calls, and expressions. Use clear, simple symbolic notation combined with natural language phrasing to create brief, high-level one-liners whenever possible. Prioritize readability and compactness—even if this means omitting non-critical details or lowering line count—while never omitting essential control flow or key operations. Use short, meaningful variable and function names consistently, indent nested blocks clearly, and follow standard pseudocode conventions for loops and conditionals. Output only the numbered pseudocode steps, starting at 1, with no comments, explanations, summaries, notes, or meta-text. Do not add separator lines or extra formatting. The style should match this example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers, size n  
5. read n elements into A  
6. for all elements in A:  
7.   set min_i to i  
8.   for j from i+1 to size of A exclusive:  
9.     if A[min_i] > A[j]: set min_i to j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Complete the output promptly within 5 seconds; optimize for clarity, brevity, logical fidelity, and easy understanding.