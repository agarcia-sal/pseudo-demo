Translate the input code into clear, concise pseudocode that faithfully preserves its original structure and all control flow constructs (if, else, switch, while, for, do-while), variable assignments, function calls, and expressions. Use natural language enhanced with simple symbolic notation and common abbreviations to keep the pseudocode both easy to read and high-level. Favor brief, well-structured one-liners and omit less essential details when it reduces length without breaking logical flow. Use consistent indentation to reflect nesting, and concise but meaningful variable and function names. Do not include any explanations, comments, summaries, or descriptions—output only the pseudocode. Format numbered steps starting at 1, strictly following this style:

1. x ← 0  
2. if condition: action  
3. for i from 0 to n - 1: action  
4. call func(args)  

Loops and conditionals with multiple statements should use indentation and line breaks to show scope but keep each line succinct. When appropriate, combine simple statements to reduce line count. Avoid any decorative separators or extraneous formatting. The output should be solely the pseudocode and returned within 5 seconds; always prioritize clarity and logical completeness over verbosity. 

Example:

in function main  
let n be integer  
read n  
let A be array of integers size n  
for i from 0 to n - 1  
 set A[i] ← read integer  
for i from 0 to n - 1  
 set min_i ← i  
 for j from i + 1 to n - 1  
  if A[j] < A[min_i]: set min_i ← j  
 swap A[i], A[min_i]  
print A elements