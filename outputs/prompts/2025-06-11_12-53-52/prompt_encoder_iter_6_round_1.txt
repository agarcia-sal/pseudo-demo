Generate concise, high-level pseudocode strictly from the given problem description. Output only the pseudocode without any purpose, summary, explanation, or clarifying notes. Write in clear, natural language combined with symbolic representations and standard abbreviations for algorithmic steps. Use mostly one-line statements, keeping code compact and easy to follow, reflecting control structures and data operations succinctly.

Follow this exact style and formatting:

1. variable ← value  
2. while condition: operation  
3. for i in range start to end: operation  

Use these conventions:  
- Declare types and variables naturally (e.g., “let n be integer”)  
- Perform assignments with “←” or “set”  
- Use “read” or “input” for input operations  
- Use “print” for output  
- Use indentation or clear scoping to indicate nested loops or conditionals, but keep statements compact and mostly one line if possible  
- Use idiomatic control flow keywords: if, else if, else, for, while  
- Avoid comments, explanations, or separators (no lines like “-----”)  
- Avoid verbose or explicit syntax; prefer clarity but brevity  

Example of ideal output format and style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i in 0 to n-1:  
 set min_i ← i  
 for j in i+1 to n-1: set min_i ← j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A  

Your output should focus purely on the core algorithmic steps, without any external commentary or prose. Aim for the pseudocode to be understandable and implementable by a competent programmer at a glance, maximizing clarity within a minimal line count. Remember the 10-second time limit—produce the highest quality pseudocode within this constraint.