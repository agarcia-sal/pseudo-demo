Generate concise, high-level pseudocode from the given problem description.  
- The pseudocode must be easy to read and understand. Use natural language combined with symbolic representations and common abbreviations.  
- Focus on clarity with compact, succinct algorithmic steps. Prefer one-liner statements wherever possible.  
- Produce only pseudocode, no purpose, summary, explanation, or notes. No comments or separator lines.  
- Use consistent variable naming and control flow statements, avoiding verbose syntax.  
- Follow this numbering format strictly at each line start:  

1. x ← 0  
2. while x < n: x++  

- Represent loops, conditions, and assignments clearly but concisely, using natural language constructs.  
- Begin with any function or main scope definitions as needed to set context (e.g., “in function main”).  
- Handle input/output with simple statements like “read n” or “print all elements”.  
- Maintain a balance of natural language and symbols to keep pseudocode accessible but efficient.  
- Do not include blank lines; output pseudocode continuously with line numbers.  
- Your function has a 10-second timeout; prioritize producing the best-quality pseudocode within this time.