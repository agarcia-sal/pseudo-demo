Generate concise, clear, and easy-to-read pseudocode that faithfully implements the solution described in the problem. The pseudocode must:

- Use exactly the same function name as in the original code.
- Be compact, high-level, and predominantly natural language with symbolic operators and standard abbreviations.
- Use consistent, short variable names and succinct control structures.
- Prefer one-line statements where they maintain clarity, formatted as:  
  1. x ← 0  
  2. while x < n: x++
- Employ precise, natural expressions for data structures and operations, e.g., “let A be array of integers”, “for i from 0 to n-1”, “append x to list L”.
- Avoid explanations, comments, summaries, or any non-pseudocode output—only the stepwise pseudocode.
- Do not include separator lines or extra formatting.
- Strive for minimal line count without sacrificing correctness or readability.
- Use indentation only for nested blocks, keeping it consistent and minimal.
- Represent conditionals and loops succinctly, e.g., “if cond: action”, “for each e in collection: action”.

Example style:

in function main  
let n be integer  
read n  
let A be array of integers of size n  
for i from 0 to n-1: read A[i]  
for i from 0 to n-2  
 set min_i to i  
 for j from i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A