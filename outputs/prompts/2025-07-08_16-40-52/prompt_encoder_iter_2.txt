Generate clear, easy-to-read pseudocode from the problem description. Use mostly natural language combined with concise symbolic notation and abbreviations to keep it compact and high-level. Write primarily one-liners with straightforward structure. Number each step exactly as follows:

1. x ← 0  
2. while x < n: x++

Omit all purpose statements, summaries, comments, explanations, or notes—output only the pseudocode itself. Do not include separator lines or unnecessary formatting. Follow consistent indentation for nested structures but keep them minimal. Emphasize readability and clarity in the pseudocode style, balancing expressiveness with brevity.

Example of expected style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Your results must optimize clarity and succinctness within a 5-second time limit; produce the best possible pseudocode accordingly.