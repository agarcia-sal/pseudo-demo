Translate the provided pseudocode into a complete, efficient, and idiomatic Python program focused on correctness, clarity, and performance within a 5-second runtime limit.

**Requirements:**

- Provide your entire solution enclosed strictly inside a single Python code block formatted exactly as:
  
  ```python
  # code here
  ```

- Your code must be fully self-contained, reading all input using plain `input()` calls without any prompt strings.
- Do not output any debug messages, separator lines, or extraneous textâ€”only the final required outputs.
- Use Python standard libraries or widely available external packages if they clearly improve efficiency, readability, or robustness.
- Write clean, well-structured, and Pythonic code that anticipates typical edge cases implied by the pseudocode.
- Include minimal comments solely to clarify complex or non-obvious logic, avoiding verbosity.
- Ensure your implementation follows best practices, such as meaningful variable names and modular design where appropriate.
- Optimize your code to handle large inputs efficiently and avoid unnecessary computations.
- Assume the pseudocode defines the full logic needed; do not add unrelated functionality or guess unstated requirements.

Focus on delivering a clear, robust, well-tested Python solution that accurately reflects the given pseudocode logic and performs optimally under typical constraints.