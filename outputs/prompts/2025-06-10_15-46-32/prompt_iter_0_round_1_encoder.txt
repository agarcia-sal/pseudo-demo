Generate concise, high-level pseudocode from the given problem description that is easy to read and understand. Use natural language combined with symbolic assignments and compact one-liners wherever possible. Avoid redundant verbosity—express control flow (loops, conditionals) and data operations clearly but succinctly. Use common abbreviations and idiomatic pseudocode constructs to keep it compact without losing clarity. Produce only the pseudocode—do not add any purpose, summary, explanations, comments, or notes. Do not include separator lines or extra formatting.

Follow this exact numbered format with examples like:

1. x ← 0  
2. while x < n: x++  

Strive for logical order and completeness, reflecting the problem steps precisely but briefly. Use:

- `let var be type` for declarations  
- `read`, `print` statements for I/O  
- high-level loops and conditionals in natural language style, optionally combined in one-liners  
- symbolic assignments and standard operators (`←`, `+`, `<`, etc.)  

Example style pseudocode to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A