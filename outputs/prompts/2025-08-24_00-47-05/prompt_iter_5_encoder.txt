Generate clear, concise, and high-level pseudocode from the given problem description. Use predominantly natural language with minimal but effective symbolic notation and common abbreviations. Structure the pseudocode in numbered steps, favoring compact one-liners per step when possible, while ensuring readability and logical flow. Avoid comments, explanations, summaries, or notes—produce only the pseudocode itself.

Follow these guidelines for style and format:

- Use precise verbs like let, set, read, append, return, for, if, while, etc.
- Prefer natural phrasing but allow symbols for assignments (←), comparisons (=, <, >), arithmetic (+, -, *, /), and increments (++ or +=).
- When appropriate, combine multiple simple actions in one line separated by semicolons.
- Use indentation only for clarity inside loops or conditional blocks.
- Do not add separator lines, headers, or extra text before or after.
- Output only the pseudocode numbered steps, starting at 1.

Example format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i from 0 to n-1:  
7.   set min_i ← i  
8.   for j from i+1 to n-1: if A[j] < A[min_i]: set min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A

Ensure the pseudocode is easy to follow yet highly succinct and directly aligned with the problem at hand. Complete output promptly within 5 seconds.