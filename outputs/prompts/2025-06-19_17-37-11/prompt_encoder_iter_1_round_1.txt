Translate the given code into clear, concise, and easy-to-read pseudocode that balances natural language with symbolic notation to maximize both understandability and compactness. Use mostly one-liner statements except when multi-line blocks improve clarity. Favor high-level expressions, natural language verbs (“let,” “set,” “read,” “print,” “call,” “return”) and control keywords (“if,” “else,” “for,” “while,” “in function”) along with standard symbols (←, ==, !=, ≥, ≤, +, -, *, /, etc.) for assignments, conditions, and operations.

Output rules:
- Number each line sequentially starting at 1.
- Write meaningful, balanced lines that neither split trivial operations nor overload with too many separate statements.
- Prefer using natural language for data declarations (e.g. “let A be vector of integers with size n”) and concise symbolic logic for conditions and assignments.
- Represent loops and conditionals compactly, placing simple bodies directly after colons when appropriate.
- Use abbreviations and symbolic notation to keep pseudocode succinct but never sacrifice clarity.
- Do not add any explanations, summaries, comments, notes, or separators—output only the numbered pseudocode.
- Use indentation to show nested blocks, but keep overall formatting as plain numbered lines without bullets or extra markup.

Example style your output should follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.    let min_i ← i  
8.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
9.    swap A[i], A[min_i]  
10. print all elements of A

Produce pseudocode that is easy to follow, high-level, and compact within the 5-second time limit.