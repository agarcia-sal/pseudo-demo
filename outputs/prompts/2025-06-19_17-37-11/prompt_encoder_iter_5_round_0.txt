Translate the input code into concise, high-level pseudocode that is clear and easy to read, using mostly natural language combined with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Prioritize compactness and clarity with mostly one-line statements that effectively represent meaningful program steps without excessive splitting or verbosity.  

Strict formatting and style rules:  

- Begin each function with: `in function <name>`  
- Declare variables and data structures naturally, e.g., `let A be vector of integers`, `set size of A = n`  
- Use concise natural language for input/output and common operations, e.g., `read n`, `print all elements of A`, `read n elements into A`  
- Write loops and conditionals succinctly, using colons and inline forms where it preserves clarity:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple if statements, assignments, and updates without extra lines when it enhances compactness but do not compromise clarity or readability  
- Use natural descriptive terms, preferring clarity over obscure abbreviations unless the abbreviation is standard and unmistakable  
- Do not include comments, explanations, summaries, or any text beyond the pseudocode lines themselves  
- Number every output line sequentially, starting from 1, with no empty lines or separators  
- Group logically connected instructions tightly into single lines or minimal lines to balance high-level abstraction with easy understanding  
- Avoid unnecessary verbosity while maintaining readability and a natural flow of instructions  

Example of target style pseudocode:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only minimal, direct pseudocode lines representing the input code. Aim for maximum clarity, compactness, and a consistent, high-level abstraction within these guidelines.