Translate the input code into clear, concise, and high-level pseudocode that prioritizes readability and simplicity using mostly natural language combined with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce mostly single-line statements that represent meaningful program steps compactly without sacrificing clarity.

Adhere strictly to these rules:

- Start each function with: `in function <name>` on its own line  
- Declare variables and data structures naturally and briefly, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`  
- Use concise natural phrases for input/output and operations, e.g.,  
  `read n`  
  `print all elements of A`  
  `read n elements into A`  
- Write loops, conditionals, and updates in succinct one-liners using colons and optional inline ifs:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple conditional assignments and updates to increase compactness but do not obscure logic  
- Prefer standardized, intuitive abbreviations only if they clearly improve compactness without ambiguity; otherwise use natural descriptive terms  
- Avoid comments, explanations, summaries, or delimiters; output only minimal pseudocode lines  
- Number pseudocode lines sequentially from 1 with no blank lines or separators  
- Group logically connected steps in as few lines as meaningful, balancing abstraction and clarity  
- Use indentation only where it meaningfully groups nested blocks (e.g., inside loops or conditionals), avoiding unnecessary extra indentation or multiline expansions  

Example target style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Output only this clearly formatted pseudocode corresponding directly and minimally to the input code, maximizing high-level abstraction, compactness, and readability within these instructions.