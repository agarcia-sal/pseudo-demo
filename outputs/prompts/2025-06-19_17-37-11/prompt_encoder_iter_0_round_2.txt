Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Use primarily natural language phrasing combined with symbolic notation and standard abbreviations to strike a balance between expressiveness and brevity. Produce mostly one-liner statements, but split lines when a step is complex or involves nested control flow for clarity. Number each line sequentially from 1 with no gaps. Your output must contain only the pseudocode—no explanations, summaries, comments, or meta-information.

Follow these guidelines precisely:

- Use natural language verbs such as “let,” “set,” “read,” “print,” “in function,” and control flow words like “if,” “else,” “while,” “for,” “for each,” “return.”
- Use symbolic operators for assignments and comparisons: ←, ==, !=, <, >, ≤, ≥, +, –, *, /, %, etc.
- Write loops and conditionals compactly; simple statements may follow colons, but use indentation or separate lines for nested blocks for readability.
- Structure pseudocode at a balanced granularity: avoid trivial single-operation lines as well as overly long lines combining multiple steps.
- Use clear, intuitive variable and data structure descriptions (e.g., “vector of integers,” “size of A,” “element in A”).
- Avoid any separator lines, bullet points, or extraneous formatting—only numbered pseudocode lines.

Example format you should produce (note the mix of natural language and symbols with compact, readable structure):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.    let min_i ← i  
8.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
9.    swap A[i], A[min_i]  
10. print all elements of A

Produce such concise, natural-language-rich pseudocode that faithfully and clearly translates the input code within the 5-second time limit.