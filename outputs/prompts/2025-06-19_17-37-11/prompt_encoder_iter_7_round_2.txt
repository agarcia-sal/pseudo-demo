Translate the input code into concise, high-level pseudocode that is easy to read and understand. Use mostly natural language blended with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Express operations and control flow succinctly, prioritizing one-liners with minimal words but clear meaning. Abbreviate only when unambiguous and improving compactness.  

Follow these rules exactly:  

- Start each function with `in function <name>`  
- Declare variables and data structures concisely and naturally, e.g. `let A be vector of integers`, `set size of A = n`  
- Use brief natural commands for input/output: `read n`, `read n elements into A`, `print all elements of A`  
- Write loops and conditionals in minimal form using colons and one liners where possible:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < min: set min ← A[i]`  
- Use inline conditionals and updates without extra lines only when clarity is preserved  
- Avoid comments, explanations, summaries, or notes—output pseudocode lines only  
- Number lines sequentially from 1, with no blank lines or separators  
- Group logically connected steps compactly to maximize readability and abstraction, balancing natural language and symbolic notation  
- Avoid verbose phrasing; opt for high-level, meaningful phrases that cover multiple steps when suitable  

Produce only the pseudocode lines corresponding exactly to the input code, with maximal clarity and compactness.  

Example style:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A