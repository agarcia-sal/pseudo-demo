Translate the input code into clear, concise, and compact pseudocode that is easy to read and understand. Use mostly natural language combined with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. 

Follow these precise formatting and style rules:

- Start each function with: `in function <name>`
- Declare variables and data structures naturally and briefly, e.g., `let A be vector of integers`, `set size of A = n`
- Express input/output operations simply, e.g., `read n`, `print all elements of A`, `read n elements into A`
- Use tight, one-line loops and conditionals with colons for heads and inline bodies whenever possible, e.g.:
  - `while x < n: x++`
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Combine loop or conditional heads and simple bodies in a single line; multiline blocks are allowed only when necessary for clarity or logical grouping
- Favor descriptive natural language terms over obscure abbreviations; abbreviate only when unambiguous and improves compactness
- Omit comments, explanations, notes, summaries, or any extra text; output only the pseudocode lines
- Number output lines sequentially starting from 1 with no blank lines or separators
- Group logically connected steps into minimal lines to balance high-level abstraction, clarity, and compactness

Example of the target style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only the minimal and direct pseudocode lines representing the input code. Maximize readability by blending compact symbolic expressions and natural language, leveraging single-line constructs to express meaningful program steps at an appropriate abstraction level.