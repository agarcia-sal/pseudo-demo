Translate the input code into clear, concise, and compact pseudocode that is easy to read and understand. Use mostly natural language combined with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Prefer mostly single-line statements that convey meaningful program steps without unnecessary splitting or verbosity. 

Follow these strict formatting and style rules:

- Begin each function with: `in function <name>`  
- Declare variables and data structures naturally, e.g., `let A be vector of integers`, `set size of A = n`  
- Use concise natural language for input/output and operations, e.g. `read n`, `print all elements of A`, `read n elements into A`  
- Write loops and conditionals succinctly, using colons and one-liners when possible:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple if statements, assignments, and updates without extra lines to increase compactness, but do not sacrifice clarity  
- Use natural descriptive terms over abbreviations unless the abbreviation clearly improves conciseness without ambiguity  
- Avoid comments, explanations, summaries, or any extra text beyond pseudocode  
- Output only pseudocode lines, numbered sequentially starting from 1, no extra blank lines or separators  
- Group logically connected steps into minimal pseudocode lines, balancing high-level abstraction and readability  

Example of the target style:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only the minimal, direct pseudocode lines corresponding to the input code, maximizing readability, compactness, and high-level abstraction within these rules.