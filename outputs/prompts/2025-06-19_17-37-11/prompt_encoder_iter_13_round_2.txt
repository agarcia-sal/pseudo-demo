Translate the input code into concise, high-level pseudocode that is both easy to read and compact. Use mostly natural language with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Emphasize expressing meaningful program steps clearly, using one-line statements wherever possible.

Follow these strict rules:

- Start each function with:  
  `in function <name>`

- Declare variables and data structures simply and naturally, e.g.:  
  `let A be vector of integers`  
  `set size of A = n`

- Express input/output and data operations succinctly, e.g.:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use loops and conditionals compactly with colons and inline expressions when clarity is maintained, e.g.:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Prefer minimal indentation and multi-line blocks only when strictly necessary for clarity.

- Combine logically related steps into single lines without sacrificing readability.

- Use natural descriptive names freely, but accepted abbreviations are allowed if they keep the code clear.

- Avoid all comments, explanations, notes, summaries, or text other than pseudocode lines.

- Number every line sequentially from 1, without blank lines or separators.

Example pseudocode style your output should adopt:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the minimal lines strictly needed to represent the input code behavior with maximum clarity, compactness, and abstraction.