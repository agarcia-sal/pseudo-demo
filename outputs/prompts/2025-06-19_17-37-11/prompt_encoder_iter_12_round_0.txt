Translate the given code into concise, high-level pseudocode that is easy to read and understand, using mostly natural language enriched with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Express meaningful steps in mostly one-line statements that combine clarity with compactness. Use natural but descriptive identifiers and common accepted abbreviations without losing readability.

Follow these rules precisely:

- Begin each function with: `in function <name>`
- Declare variables and data structures simply and naturally, e.g.:  
  `let A be vector of integers`  
  `set size of A = n`  
- For inputs, outputs, and data operations, use crisp expressions such as:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`  
- Write loops and conditionals succinctly using colons and inline expressions as much as clarity permits, e.g.:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < min_val: set min_val ← A[i]`  
- Use inline conditionals, assignments, and updates whenever they keep pseudocode clear and succinct
- Prefer natural naming and familiar abbreviations without sacrificing clarity
- Avoid any comments, explanations, notes, summaries, or any text beyond pseudocode lines
- Output only the final pseudocode lines, numbered sequentially starting at 1, without blank lines or any separators
- Combine logically connected operations into minimal lines to balance readability and brevity
- Use tab indentation only inside multi-line loop or conditional blocks, but prefer single-line forms to minimize indentation

Example style to match:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate strictly minimal pseudocode lines capturing the code’s logic with maximal clarity, compactness, and natural high-level abstraction in this format only.