Translate the input code into clear, concise, and compact pseudocode that is easy to read and understand. Use predominantly natural language integrated with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce primarily single-line pseudocode statements that express meaningful program logic steps without unnecessary splitting or verbosity. 

Follow these guidelines strictly:

- Start each function with: `in function <name>`
- Declare variables and data structures naturally and briefly, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`
- Express inputs/outputs and common operations compactly, e.g.,  
  `read n`  
  `print all elements of A`  
  `read n elements into A`
- Write loops and conditionals as succinct one-liners when possible, using colons and minimal keywords:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Use inline updates and conditionals within loops to keep pseudocode tight but clear, e.g.,  
  `for i in 0 to n-1: set min_i ← i; for j in i+1 to n-1: set min_i ← j if A[j] < A[min_i]`
- Prefer descriptive natural terms but allow common abbreviations only if unambiguous and concise  
- Omit all comments, explanations, summaries, or extraneous text—output pseudocode lines only  
- Number each pseudocode line sequentially starting at 1, without extra blank lines or separators  
- Group closely related operations to balance high-level abstraction, compactness, and readability  
- Avoid verbose phrasing; keep lines short enough to maintain clarity without over-condensing  
- Do not use separator lines, headings, or notes  

Example of the target style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: set min_i ← j if A[j] < A[min_i]  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only minimal, direct pseudocode lines corresponding to the input code, maximizing readability, compactness, and abstraction within these rules.