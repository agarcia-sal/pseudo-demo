Translate the given code into clear, concise, and high-level pseudocode that balances natural language readability with compactness. Use one-liner statements wherever possible with symbolic notation and standard abbreviations to keep the output succinct yet easy to follow. Number each line sequentially starting from 1. Your output must contain only the pseudocode—no explanations, summaries, comments, or overview statements. Follow this style precisely:

- Use natural language phrases like “let,” “set,” “read,” “print,” and control flow words such as “if,” “while,” “for,” “in function.”
- Use symbols (←, ==, !=, +, -, >, <, etc.) for assignments and conditions.
- Write loops and conditionals compactly, optionally placing simple one-line statements after colons.
- Avoid lines that are either too short or unnecessarily long; include meaningful operations per line to ensure balanced granularity.
- Do not use separator lines, bullet points, or extraneous formatting—only numbered pseudocode lines.

Example format:

1. in function main  
2. let n ← 0  
3. read n  
4. let A be vector of integers with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.    let min_i ← i  
8.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
9.    swap A[i], A[min_i]  
10. print all elements of A

Produce efficient, readable pseudocode that respects these guidelines within the time limit.