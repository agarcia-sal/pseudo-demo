Translate the given code into clear, concise, and compact pseudocode that is easy to read and understand. Use mostly natural language enriched with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Prefer one-line statements unless multi-line blocks are essential for clarity. Use concise expressions for loops and conditionals, employing colons and inline conditions when readable. Use natural descriptive names; abbreviations are allowed only if they preserve clarity.

Strict formatting rules:

- Start each function with:  
  `in function <name>`

- Declare variables and data structures simply, e.g.:  
  `let A be vector of integers`  
  `set size of A = n`

- Express I/O and data operations compactly, e.g.:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Write loops and conditionals as compactly as possible without losing readability:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Minimize indentation and avoid splitting logically connected steps unnecessarily.

- Avoid comments, explanations, summaries, or extra text—output only the numbered pseudocode lines.

- Number all lines sequentially from 1, with no blank lines, separators, or extra formatting.

- Combine related steps into minimal lines that balance brevity with clarity.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the minimal pseudocode lines strictly representing the input code’s logic with maximum clarity, high-level abstraction, and compactness following these rules exactly.