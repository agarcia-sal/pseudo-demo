Translate the input code into clear, readable, concise pseudocode using predominantly natural language mixed with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and calculations. Prioritize compact, high-level descriptions using mostly single-line statements that convey logical steps without verbosity or unnecessary splitting.

Strict formatting and style rules:

- Start each function with: `in function <name>`
- Declare variables and data structures naturally and briefly, for example:  
  `let n be integer`  
  `let A be vector of integers`  
  `set size of A = n`
- Use short, explicit commands for input/output, e.g., `read n`, `print all elements of A`, `read n elements into A`
- Write loops and conditionals compactly with colons and inline expressions when clear:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Inline simple conditionals, assignments, and updates on a single line to maximize compactness but never at the cost of clarity
- Use consistent, commonly understood abbreviations only if they clearly improve compactness without ambiguity. Otherwise, prefer natural descriptive terms
- Do not include comments, explanations, summaries, or any text beyond the pseudocode lines
- Output only the pseudocode lines, numbered sequentially starting at 1, no blank lines or separators
- Group tightly related steps into minimal lines while balancing abstraction and readability

Adhere closely to this example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate just the minimal direct pseudocode corresponding to the input code, maximizing readability, compactness, and high-level abstraction within these rules.