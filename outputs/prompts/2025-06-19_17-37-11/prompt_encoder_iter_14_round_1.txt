Translate the input code into clear, concise, and compact pseudocode that is easy to read and understand, using mostly natural language enriched with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Focus on high-level abstraction and brevity while maintaining clarity.

Strict instructions:

- Start each function with:  
  `in function <name>`

- Declare variables and data structures simply and naturally:  
  `let x be integer`  
  `let A be vector of integers`  
  `set size of A = n`

- Represent input/output and data operations compactly:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use symbolic, natural, and compact expressions for loops and conditionals, preferring one-line forms with colons and inline conditions:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Allow minimal, consistent indentation only for essential nested blocks; otherwise, use one-liners to keep pseudocode tight.

- Use clear, descriptive names but accept widely known abbreviations that do not hurt readability.

- Omit all comments, explanations, summaries, or extraneous text; output only pseudocode lines.

- Number every line sequentially from 1 with no blank lines or separators.

- Combine logically connected steps into single lines when it preserves clarity and compactness.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce the minimal number of concise lines strictly representing the code’s semantics with high-level abstraction, balancing natural expression with symbolic compactness for ease of understanding and efficient line usage.