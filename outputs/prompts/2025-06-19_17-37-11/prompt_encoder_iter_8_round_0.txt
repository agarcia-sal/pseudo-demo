Translate the input code into concise, high-level pseudocode that is easy to read and understand, prioritizing natural language with symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) and commonly accepted abbreviations to maintain compactness. Use mostly one-liner statements that express meaningful program logic without verbosity or unnecessary splitting.

Strict formatting and style rules:

- Begin each function with: `in function <name>`  
- Declare variables and data structures naturally and succinctly, e.g., `let A be vector of integers`, `set size of A = n`  
- Use short, clear expressions for I/O and operations, e.g., `read n`, `print all elements of A`, `read n elements into A`  
- Write loops and conditionals on one line whenever possible, using colons and inline conditionals:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple assignments, conditionals, and updates without extra line breaks, as long as clarity is retained  
- Prefer natural descriptive words but use standard abbreviations without ambiguity to minimize length (e.g., `init` for initialize, `idx` for index)  
- Number each pseudocode line sequentially from 1, output only pseudocode lines (no explanations, comments, summaries, or separators)  
- Group related steps into minimal lines, balancing conciseness with readability—avoid excessive details but preserve essential logic  
- Do not add any extra text besides the pseudocode  

Example style output:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2: if A[i] > A[i+1]: swap A[i], A[i+1]  
8. print all elements of A