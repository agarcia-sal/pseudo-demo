Translate the input code into clear, concise, and compact pseudocode that balances natural language with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, arithmetic, and updates. Prioritize readability and high-level abstraction, expressing meaningful program steps with minimal lines without sacrificing clarity.

Strict formatting and style rules:

- Start each function with: `in function <name>`  
- Declare variables and data structures naturally (e.g., `let A be vector of integers`, `set size of A = n`)  
- Use concise, natural expressions for inputs/outputs and operations (e.g., `read n`, `print all elements of A`, `read n elements into A`)  
- Use symbolic or abbreviated forms where they increase compactness without losing clarity  
- Write loops and conditionals succinctly, preferring one-line forms with colons where possible:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple ifs, assignments, swaps, and updates in a single statement when it improves conciseness, but never obscure meaning  
- Use consistent, clear terminology avoiding ambiguous abbreviations   
- Omit all comments, explanations, summaries, or extraneous text—output only the pseudocode lines  
- Number lines starting at 1 without blank lines or separators  
- Group logically connected operations compactly, balancing readability and abstraction; do not over-condense or split trivially  
- Avoid redundant declarations or steps; keep declarations immediately before usage where helpful  

Example target style (do not deviate):  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only minimal, precise pseudocode lines that correspond directly to the input code, maximizing line compactness and clarity at once. Avoid excessive verbosity or overly terse output.