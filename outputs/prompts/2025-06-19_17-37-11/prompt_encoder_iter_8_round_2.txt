Translate the input code into clear, concise, and readable pseudocode that balances natural language and symbolic expressions for assignments, conditions, and arithmetic. Use mostly single-line statements that compactly express meaningful program steps without redundancy or excessive detail.

Follow these explicit formatting and style instructions:

- Start with `in function <name>` for each function  
- Declare variables and data structures explicitly and naturally, e.g.,  
  `let n be integer`  
  `let A be vector of integers`  
  `set size of A = n`  
- Use compact, natural phrasing for input/output and data operations:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`  
- Write loops and conditionals succinctly, preferring inline forms for simple bodies and using colons and indentation only when necessary, for example:  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
  `while x < n: x++`  
- Use standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) consistently for assignments, comparisons, and arithmetic  
- Favor commonly understood abbreviations only if they improve brevity without sacrificing clarity, otherwise use descriptive names  
- Avoid comments, explanations, summaries, or any extra text beyond the pseudocode itself  
- Number output lines sequentially starting at 1, no blank lines or separators  
- Group logically connected steps into as few lines as possible without making lines overly dense or hard to parse  
- Use indentation only to indicate blocks clearly when multiline bodies are unavoidable

Example target pseudocode style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Produce only the minimal direct pseudocode lines needed to represent the input code, maximizing clarity, compactness, and suitable high-level abstraction without redundancy or verbosity.