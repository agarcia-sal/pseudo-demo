Translate the input code into clear, concise pseudocode that balances natural language with symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce compact, high-level, easy-to-read pseudocode with mostly single-line statements, minimizing verbosity without losing clarity.

Adhere strictly to these guidelines:

- Start each function block with: `in function <name>`
- Declare variables and data structures naturally and succinctly, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`
- Use brief natural language for I/O and operations, e.g.,  
  `read n`  
  `print all elements of A`  
  `read n elements into A`
- Write loops and conditionals in compact, mostly one-line forms using colons:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Inline simple conditionals and updates without extra lines, keeping clarity and flow  
- Use standard symbolic operators preferentially; favor well-known abbreviations where they improve compactness without ambiguity  
- Avoid all explanation, comments, summaries, or notes—output only direct pseudocode lines  
- Number all lines sequentially starting at 1; do not add blank lines or separators  
- Group steps logically into minimal lines balancing abstraction and readability—do not over-condense or over-split  
- Use consistent formatting and indentation as appropriate for nested constructs  
- Generate output only in the prescribed numbered pseudocode format

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.  swap A[i], A[min_i]  
11. print all elements of A

Your output must be strictly pseudocode lines formatted exactly as above, minimal yet expressive, maximizing clarity, compactness, and appropriate abstraction.