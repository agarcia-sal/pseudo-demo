Translate the input code into clear, concise, and compact pseudocode emphasizing readability and high-level abstraction. Use mostly natural language combined with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Write mostly one-line statements that represent meaningful program steps without unnecessary splitting or verbosity.

Strict guidelines to follow:

- Begin each function with:  
  `in function <name>`

- Declare variables and data structures simply using natural phrases, e.g.:  
  `let A be vector of integers`  
  `set size of A = n`

- Express input/output and data operations concisely, e.g.:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Prefer compact, readable loop and conditional expressions using colons and inline conditions when clear:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Use one-liners wherever clarity is preserved; use minimal indentation only if multi-line blocks are essential.

- Favor natural descriptive names, but commonly accepted abbreviations are allowed if they do not reduce understanding.

- Avoid all comments, explanations, summaries, or any text beyond the pseudocode lines.

- Number every line sequentially from 1 without blank lines, separators, or extra formatting.

- Combine logically related steps into minimal lines that balance conciseness and readability.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the minimal number of pseudocode lines strictly representing the input code’s behavior with maximum clarity, high-level abstraction, and compactness following these rules exactly.