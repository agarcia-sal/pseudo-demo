Translate the input code into high-level, compact pseudocode that balances natural language readability and symbolic conciseness. Use mostly natural phrasing with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Write mostly one-line statements expressing meaningful program steps without verbosity or unnecessary line splitting.

Follow these precise formatting rules:

- Start each function with: `in function <name>`
- Declare variables naturally: `let x be integer`, `let A be vector of integers`, `set size of A = n`
- Express input/output succinctly: `read n`, `read n elements into A`, `print all elements of A`
- Use concise, idiomatic loop and conditional syntax, favoring one-liners and inline conditions without losing clarity, for example:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Prefer simple, direct updates and assignments inline (e.g., `set sum ← sum + A[i]` or `if x == 0: return 1`)
- Use natural words over obscure abbreviations unless well-known and unambiguous
- Do not include comments, explanations, summaries, or extra text—only pseudocode lines
- Number all lines sequentially starting at 1, no blank lines or separators
- Group logically unified steps coherently to minimize lines but maintain clear high-level abstraction
- Avoid overly verbose expressions; favor clarity with brevity
- Use indentation for loop and conditional bodies where multi-line, but prefer one-liners with colon when possible

Produce only the minimal pseudocode lines capturing the core algorithm logic clearly, compactly, and readably, strictly adhering to this style.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A