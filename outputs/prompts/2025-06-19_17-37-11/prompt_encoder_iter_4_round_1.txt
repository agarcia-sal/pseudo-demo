Translate the input code into concise, high-level pseudocode that is clear, compact, and easy to understand. Use mostly natural language combined with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Prioritize single-line statements expressing meaningful steps without unnecessary splitting, but allow minimal multi-line blocks for clarity in loops and conditionals.

Strict formatting and style rules:

- Begin each function with: `in function <name>`
- Declare variables and data structures naturally and briefly, e.g., `let A be vector of integers`, `set size of A = n`
- Use short, natural phrases for input/output and common operations: `read n`, `print all elements of A`, `read n elements into A`
- Write loops and conditionals succinctly, using colon and inline bodies when simple:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Inline simple ifs, assignments, and updates to keep pseudocode compact without losing clarity
- Prefer clear, short variable names but allow common concise abbreviations if unambiguous
- Avoid comments, explanations, summaries, or additional text beyond pseudocode
- Output only pseudocode lines, numbered sequentially from 1, no blank lines or separators
- Group logically connected operations to balance abstraction, readability, and line count
- For nested blocks where clarity requires, indent subsequent lines by one tab, omitting explicit block delimiters
- Use natural phrasing but avoid verbosity; replace verbose phrases with shorter synonyms or common pseudocode idioms

Example target style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only the direct, minimal pseudocode lines that capture all logic of the input code, maximizing clarity, conciseness, and high-level abstraction within these rules.