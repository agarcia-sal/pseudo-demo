Translate the given code into clear, concise, and compact pseudocode that maximizes readability and abstraction using mostly natural language combined with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce mostly one-line statements that represent meaningful program steps without verbosity or unnecessary splitting. Use high-level constructs with succinct natural descriptions and minimal formality.

Strict guidelines to follow:

- Start each function with: `in function <name>`
- Declare variables and data structures simply and naturally, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`  
- For input/output and data operations, use concise expressions such as:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`  
- Write loops and conditionals concisely with colons and inline conditionals as often as clarity allows, e.g.:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Use inline simple if conditions, assignments, and updates whenever they do not reduce clarity.
- Prefer natural descriptive names but use common abbreviations that do not sacrifice understanding.
- Avoid comments, explanations, summaries, or any text beyond the pseudocode statements.
- Output only the final pseudocode lines, numbered sequentially starting at 1, with no blank lines or separators.
- Combine logically related steps into minimal pseudocode lines balancing readability and compactness.
- Do not include separator lines or extraneous formatting.
- Use tab indentation only inside multi-line loop or conditional blocks (avoid if possible by preferring single-line forms).

Example target pseudocode style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only the minimal pseudocode lines strictly representing the input code’s logic, maximizing clarity, compactness, and high-level abstraction while adhering rigidly to the above style and format.