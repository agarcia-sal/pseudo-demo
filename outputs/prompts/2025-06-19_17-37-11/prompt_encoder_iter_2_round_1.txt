Translate the given code into clear, concise, and easy-to-read pseudocode that balances natural language with symbolic notation. Prioritize high-level, compact expressions, using mostly one-line statements that capture meaningful operations without sacrificing clarity. Number each line sequentially from 1. Your output must include only pseudocode—no explanations, comments, summaries, or formatting other than line numbers.

Follow these detailed guidelines:

- Use natural language keywords like “let,” “set,” “read,” “print,” “in function,” and control flow terms: “if,” “else,” “while,” “for,” “return.”
- Use symbolic operators for assignment and conditions (←, ==, !=, >, <, ≥, ≤, +, -, *, /, %, ++, --).
- Write control structures compactly, placing simple statements after colons when appropriate (e.g., `for i in 0 to n-1: read A[i]`).
- Avoid splitting trivial steps into multiple lines; each line should represent a meaningful step, neither overly fragmented nor overloaded.
- Use standard abbreviations sparingly only if they preserve readability.
- Use natural language to describe data structures and inputs succinctly (e.g., “let A be array of integer with size n”).
- Avoid any extra formatting, bullet points, separator lines, or explanatory text—only numbered lines with pseudocode.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integer with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.   set min_i ← i  
8.   for j in i+1 to n-1: if A[j] < A[min_i]: set min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A

Generate the pseudocode promptly and accurately according to these instructions.