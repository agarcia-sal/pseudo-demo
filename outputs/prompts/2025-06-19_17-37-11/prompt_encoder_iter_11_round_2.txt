Translate the input code into clear, concise, and easy-to-read pseudocode that strikes a precise balance between natural language and symbolic notation for assignments, comparisons, and arithmetic (use ←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --). Maximize abstraction by using common high-level programming constructs and meaningful, natural variable names with standard abbreviations only when clarity is not sacrificed.

Strict instructions:

- Begin every function with: `in function <name>`
- Declare variables and data structures naturally and simply, for example:  
  `let n be integer`  
  `let A be vector of integers`  
  `set size of A = n`
- For input/output and data operations, use concise, natural expressions such as:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`
- Prefer mostly one-liner pseudocode lines representing logically complete steps; allow minimal and necessary indentation with tabs inside multi-line loops or conditionals only when single-line forms reduce clarity.
- Prefer for-loops and while-loops expressed compactly with colons and inline conditions, e.g.:  
  `for i in 0 to n-1:`  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Use inline simple if conditions, assignments, and updates whenever that does not reduce clarity, avoiding verbose splitting.
- Use meaningful names in natural language; use standard abbreviations only if they do not reduce readability.
- Do not add any comments, explanations, summaries, or extra text beyond the pseudocode lines themselves.
- Output only the final pseudocode lines, numbered sequentially starting from 1, with no blank lines, separators, or extraneous formatting.
- Combine logically related operations into the fewest pseudocode steps possible without losing clarity or naturalness.
- Avoid unnecessary formality but keep a professional, consistent style that is easy to understand.

Example target pseudocode style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the pseudocode strictly representing the input code’s logic, optimizing for readability, compactness, and abstraction under these instructions.