Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Emphasize natural language phrasing combined with symbolic notation to keep it compact and expressive. Prioritize one-line statements wherever possible, but use short blocks if essential for clarity and structure. Number each line sequentially starting from 1. Your output must contain only the pseudocode—no explanations, comments, summaries, or extra formatting.

Guidelines:  
- Use natural language commands such as “let,” “set,” “read,” “print,” and control flow words like “if,” “while,” “for,” “in function.”  
- Use symbols (←, ==, !=, +, -, >, <, etc.) for assignments, comparisons, and expressions.  
- Write loops and conditionals compactly; for simple single statements after control keywords, place them on the same line after a colon. For multi-step blocks, indent consistently by one level per block.  
- Maintain balanced line granularity—avoid lines that are too short or overloaded. Break down complex operations into clear, manageable steps.  
- Use standard abbreviations (e.g., “idx” for index, “vec” for vector/list if needed) only if it clearly improves conciseness without losing readability.  
- Do not add separator lines, bullet points, or extra punctuation. The output must contain only numbered lines with pseudocode.  
- Begin with any function definitions or entry points explicitly (e.g., “in function main”).

Example style your pseudocode should follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. for i in 0 to n-1: read A[i]  
7. for i in 0 to n-2:  
8.    let min_i ← i  
9.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
10.    swap A[i], A[min_i]  
11. print all elements of A

Produce the pseudocode that adheres strictly to these rules and style, maximizing clarity, brevity, and logical structure within a 5-second processing limit.