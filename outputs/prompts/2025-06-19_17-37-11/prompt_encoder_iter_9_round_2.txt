Translate the input code into clear, concise, and compact pseudocode that prioritizes readability and high-level abstraction using mostly natural language enhanced with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --). Use mostly single-line statements but split only when it improves clarity. 

Follow these detailed instructions precisely:

- Start with `in function <name>` for each function.  
- Declare variables and data structures naturally and succinctly, e.g., `let A be vector of integers`, `set size of A = n`.  
- Express input/output and basic operations concisely using natural phrases, e.g., `read n`, `print all elements of A`, `read n elements into A`.  
- Use tight, idiomatic loop and conditional forms, favoring one-liners with colons, e.g.:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple updates, assignments, or conditionals whenever it keeps pseudocode compact but clearly understandable (avoid unnecessary verbosity or splitting).  
- Prefer clear, descriptive variable names but use well-known abbreviations or symbols to maintain conciseness without ambiguity.  
- Use symbolic operators consistently for assignments, arithmetic, and comparisons.  
- Omit comments, explanations, summaries, and any extraneous text; output only direct pseudocode lines.  
- Number lines sequentially from 1 without blank lines or separator lines.  
- Group logically connected instructions into minimal pseudocode lines to maintain a balance between readability and brevity, avoiding overly dense or overly fragmented lines.  
- Capitalize keywords like `in function` and control structures exactly as shown.  
- For nested loops or conditionals, indent the inner block by one tab or 4 spaces per level, but keep statements per line minimal to avoid confusion.  
- Avoid verbose natural language that dilutes clarity; adopt a compact yet expressive style that reads like high-level code instructions rather than prose.

Example target style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only minimal, direct pseudocode lines strictly following these rules, to maximize clarity, compactness, and appropriate abstraction directly reflecting the input code structure and operations.