Translate the given code into concise, high-level pseudocode that balances readability with compactness. Use mostly natural language with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Express full statements in mostly single lines unless logically better grouped. Follow these rules precisely:

- Start each function with: `in function <name>`
- Declare variables and data structures simply and naturally, e.g., `let A be vector of integers`, `set size of A = n`
- Use straightforward commands for input/output and data operations: `read n`, `print all elements of A`, `read n elements into A`
- Write loops and conditionals in minimal, clean form using colons and optional inline conditions, for example:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Prefer one-line statements with inline ifs or updates when clear and compact; break into more lines only if clarity demands
- Use descriptive names or concise abbreviations only when unambiguous and improving compactness; avoid unnecessary verbosity
- Omit comments, summaries, and explanations. Output only the pseudocode lines
- Number all lines sequentially starting from 1, with no blank lines or separators
- Group logically connected steps tightly but preserve clear flow and abstraction level—avoid both excessive fragmentation and overly long lines

Example style output:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Produce only such minimal direct pseudocode lines for the input code, maximizing clarity, compactness, and appropriate abstraction with consistent style and punctuation.