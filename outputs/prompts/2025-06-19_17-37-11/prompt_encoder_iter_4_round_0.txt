Translate the given code into minimal, clear, and compact pseudocode that is easy to read and understand. Represent program logic with a balanced mix of natural language and standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --). Emphasize high-level abstraction and concise expression of algorithmic steps, prioritizing single-line statements and inline simple conditionals and updates whenever clarity permits.

Strictly follow these guidelines:  
- Begin each function with: `in function <name>`  
- Declare variables and data structures naturally, e.g., `let A be vector of integers`, `set size of A = n`  
- Express input/output compactly, e.g., `read n`, `print all elements of A`, `read n elements into A`  
- Use idiomatic loop and conditional syntax using colons and one-liners when suitable:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple ifs, assignments, and increments without extra lines, but never lose clarity or introduce ambiguity  
- Use clear natural language, favor descriptive names over obscure abbreviations, but allow common short forms for well-known concepts  
- Omit comments, explanations, notes, summaries, or any extra text beyond pseudocode lines  
- Output only sequentially numbered pseudocode lines starting at 1, no blank lines or separators  
- Group logically connected operations into minimal pseudocode lines while preserving readability and abstraction  
- Avoid verbosity or excessive splitting of logical steps, but write sufficiently detailed pseudocode to capture essential program structure and flow  

Example style:  
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only the pseudocode lines required to represent the input code accurately, maximizing clarity, compactness, and level of abstraction within these rules.