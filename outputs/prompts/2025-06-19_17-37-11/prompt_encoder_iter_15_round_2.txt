Translate the given code into clear, concise, and easy-to-read pseudocode emphasizing natural language with symbolic operators for assignments (←), comparisons (==, !=, <, ≤, >, ≥), arithmetic (+, -, *, /, %, ++, --), and conditions. Focus on producing compact, high-level one-line statements describing meaningful steps, minimizing verbosity and nesting. Use simple natural phrases for variables and data structures (e.g., “let A be vector of integers,” “set size of A = n”) and concise expressions for I/O and common operations (e.g., “read n,” “print all elements of A”). Prefer loops and conditionals written in a compact style with colons and inline conditions when clarity is maintained (e.g., “while x < n: x++,” “for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i”). Use minimal indentation only for essential multi-line blocks, otherwise keep to one line per statement. Assign clear, descriptive names but allow common abbreviations if they do not harm clarity. Do not include any comments, explanations, summaries, or extra text beyond the pseudocode lines. Number every pseudocode line sequentially from 1 with no blank lines or separators.

Follow this exact structure:

- Start each function with:  
  `in function <function_name>`

- Declare variables simply:  
  `let x be integer`  
  `let A be vector of integers`  
  `set size of A = n`

- Use I/O statements directly:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use compact, symbolic conditions and assignments within loops and conditionals:  
  `for i in 0 to size of A - 2:`  
  `  set min_i ← i`  
  `  for j in i+1 to size of A -1: if A[j] < A[min_i]: set min_i ← j`  
  `  swap A[i], A[min_i]`

Example of desired output style (line numbering must start at 1 and increment by 1):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the minimal pseudocode lines strictly representing the code’s logic with maximum clarity, compactness, and adherence to the above style and rules.