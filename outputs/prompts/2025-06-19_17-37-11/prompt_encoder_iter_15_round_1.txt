Translate the given code into concise, clear, and easy-to-read pseudocode using predominantly natural language with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --). Focus on high-level abstraction and compactness without losing clarity. Use mostly one-line statements representing meaningful operations; use minimal indentation and line breaks only for necessary multi-line blocks.

Guidelines to follow exactly:

- Start each function with:  
  `in function <name>`

- Declare variables and data structures succinctly using natural phrases:  
  `let A be vector of integers`  
  `set size of A = n`

- Express input, output, and data operations briefly, e.g.:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use compact, natural loops and conditionals with colons and inline conditions when clear:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Use commonly accepted abbreviations only when they maintain readability and understanding.

- Avoid comments, explanations, summaries, or any text beyond pseudocode lines.

- Number every pseudocode line sequentially from 1, no blank lines or extra formatting.

- Combine logically related operations into single lines to balance conciseness and readability.

- Favor an intuitive, natural flow of steps with mostly one-liners unless clear multi-line blocks are necessary.

Example producing the same style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce only the minimal number of well-structured pseudocode lines strictly representing the code’s logic with maximal clarity, high-level abstraction, and compactness, following these instructions precisely.