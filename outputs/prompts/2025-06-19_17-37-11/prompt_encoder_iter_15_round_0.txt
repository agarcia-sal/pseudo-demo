Translate the given code into concise, high-level pseudocode that prioritizes clarity, readability, and compactness using mostly natural language combined with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic.

Guidelines:

- Begin each function with  
  `in function <name>`

- Declare variables and data structures simply and naturally, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`

- Express inputs, outputs, and data operations briefly and clearly, e.g.,  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use mostly one-line statements for meaningful program steps; break only when clarity demands it.

- Prefer concise loops and conditionals with inline conditions and colons, e.g.,  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Use minimal indentation only for multi-line loop or conditional bodies that cannot be compacted.

- Choose natural, descriptive names; abbreviations allowed if they do not hinder understanding.

- Avoid all comments, summaries, explanations, or non-pseudocode text.

- Number every pseudocode line sequentially starting at 1 without blank lines or extra formatting.

- Combine logically related steps into single lines where it preserves clarity and readability without verbosity.

Produce only the minimal number of lines strictly representing the input code’s logic, balancing abstraction, conciseness, and readability.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A