Translate the input code into clear, concise, and easy-to-read pseudocode that captures the logic accurately at a high level. Use natural language phrases with a preference for brevity and clarity, while employing symbolic notation (←, ==, !=, +, -, >, <, etc.) for assignments and conditions. Write mostly one-line statements; if a control structure contains a single simple statement, place it on the same line after a colon. Use standard abbreviations and avoid verbosity, keeping pseudocode compact but expressive enough to understand flow and intent without ambiguity.

Number each pseudocode line sequentially starting at 1 and output only those numbered lines—no explanations, comments, summaries, or extra formatting. Avoid overly short or excessively long lines by balancing detail and succinctness.

Use control flow keywords naturally: "let," "set," "read," "print," "if," "else," "while," "for," "in function," and "return." When declaring variables or collections, specify types and sizes concisely (e.g., "let A be vector of integers with size n"). Write loops and conditionals compactly, optionally embedding simple single statements after colons.

**Example style:**

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.    let min_i ← i  
8.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
9.    swap A[i], A[min_i]  
10. print all elements of A

Produce efficient, high-level, and readable pseudocode strictly following this numbered-line format without deviation, prioritizing clarity and succinctness.