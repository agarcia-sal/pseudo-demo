Translate the given code into clear, concise, and compact pseudocode that balances natural language and symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Use mostly one-liners that express complete meaningful steps without unnecessary splitting or verbosity, maintaining high-level abstraction while ensuring readability.  

Follow these explicit rules exactly:

- Start each function with: `in function <function_name>`  
- Declare variables and data structures naturally and succinctly, e.g., `let A be vector of integers`, `set size of A = n`  
- Use concise natural language for inputs and outputs: `read n`, `print all elements of A`, `read n elements into A`  
- Express loops and conditionals as compact one-liners using colons and minimal keywords:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple if conditions, assignments, increments, and updates on the same line without extra lines, but never sacrifice clarity  
- Prefer precise, unambiguous abbreviations only when they significantly improve compactness without confusion  
- Avoid comments, explanations, summaries, or extra text beyond pseudocode lines  
- Number each output line sequentially starting from 1, no blank lines or separators  
- Group logically connected operations into minimal lines to keep the pseudocode high-level and compact  
- Always prefer using symbolic operators and concise natural language in combination to maximize clarity and brevity  

Example of target style:
```
1. in function main
2. let n be integer
3. read n
4. let A be vector of integers
5. set size of A = n
6. read n elements into A
7. for i in 0 to size of A - 2:
8.   set min_i ← i
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j
10.   swap A[i], A[min_i]
11. print all elements of A
```

Produce only the minimal, direct pseudocode lines strictly following these rules to maximize readability, compactness, and abstraction, without any filler or additional text.