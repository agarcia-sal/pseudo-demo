Translate the given code into concise, clear, and readable pseudocode using mostly natural language mixed with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce compact, mostly one-line statements that capture meaningful steps at a high abstraction level without unnecessary splitting or verbosity.

Write pseudocode that is easy to understand and naturally phrased, using brief and descriptive names and common abbreviations only if clarity is preserved. Prefer high-level constructs and inline conditionals or loops when unambiguous. Use tab indentation only for multiline blocks when absolutely needed; prefer single-line forms to keep output compact.

Follow these strict rules:

- Start each function with: `in function <name>`
- Declare variables and data structures naturally, e.g.,  
  `let A be vector of integers`  
  `set size of A = n`
- Represent input/output and data operations succinctly, e.g.,  
  `read n`  
  `read n elements into A`  
  `print all elements of A`
- Write loops and conditionals concisely, using colons and inline expressions, e.g.,  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Combine logically connected statements into single lines when it improves clarity and compactness.
- Do not add comments, explanations, summaries, notes, or any text besides the pseudocode statements.
- Number all output lines sequentially starting at 1 with no blank lines or separators.
- Do not use any separator lines or extraneous formatting.
- Ensure output pseudocode strictly and precisely represents the given code’s logic with optimal balance between readability, high-level abstraction, and compactness.

Example style your output should match:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only the minimal set of clear, logically grouped pseudocode lines strictly expressing the input code’s control flow and data operations, maximizing natural readability and concise abstraction under these rules.