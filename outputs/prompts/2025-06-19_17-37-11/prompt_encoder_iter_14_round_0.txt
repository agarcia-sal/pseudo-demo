Translate the given code into concise, high-level pseudocode that is easy to read and understand. Use mostly natural language with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Favor brief, clear one-line statements that represent meaningful steps without splitting unnecessarily. When multi-line blocks are essential (e.g., nested loops or conditionals), use minimal indentation for clarity.

Strict rules:

- Begin each function with:  
  `in function <name>`

- Declare variables and data structures succinctly and naturally:  
  `let A be vector of integers`  
  `set size of A = n`

- Express input/output and data operations compactly:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`

- Use compact loops and conditionals, employing colons and inline conditions where clarity is maintained:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`

- Prefer one-liners unless multiple lines improve clarity. Group logically related statements together to balance brevity and readability.

- Use natural descriptive names; abbreviations allowed if clarity is retained.

- No comments, summaries, explanations, or extra text beyond pseudocode lines.

- Number each line starting from 1 with no blank lines or separators.

- Avoid unnecessary verbosity; keep pseudocode both natural and symbolic for efficient expression.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce strictly minimal pseudocode lines that capture the code behavior with maximal clarity, high-level abstraction, and compactness as per these instructions.