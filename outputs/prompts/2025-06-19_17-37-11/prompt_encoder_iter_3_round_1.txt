Translate the input code into concise, clear, and high-level pseudocode combining natural language with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Focus on readability and compactness by expressing meaningful program steps mostly in single lines without unnecessary splitting or verbosity.  

Strictly follow these guidelines:

- Start each function with: `in function <name>`  
- Declare variables and data structures naturally and briefly, e.g., `let A be vector of integers`, `set size of A = n`  
- Use compact natural language for I/O and operations, e.g., `read n`, `print all elements of A`, `read n elements into A`  
- Write loops and conditionals succinctly, using colons and one-line forms when possible:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Prefer single-line if statements, assignments, and updates without extra lines, but maintain clarity and logical grouping  
- Use descriptive terms but apply abbreviations only if they shorten lines clearly and unambiguously  
- Omit comments, explanations, summaries, and any text besides the direct pseudocode lines  
- Number lines sequentially starting at 1, without blank lines, separators, or extraneous formatting  
- Group logically connected steps together with minimal lines, balancing high-level abstraction and clarity  

Example target style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only the minimal pseudocode lines directly corresponding to the input code, maximizing readability, compactness, and abstraction within these rules.