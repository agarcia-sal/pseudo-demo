Translate the given code into clear, concise, and high-level pseudocode that is easy to read and understand. Use natural language with symbolic and standard programming notation, making the pseudocode compact while capturing key operations and logic precisely. Favor one-line statements whenever they remain clear; otherwise, break into meaningful steps without excessive fragmentation. Number each line sequentially starting from 1. Your output must contain only the pseudocode—no explanations, summaries, comments, or any formatting beyond line numbers and code.

Follow these guidelines precisely:

- Use natural language keywords such as “let,” “set,” “read,” “print,” and control flow constructs like “if,” “while,” “for,” and “in function” to maintain readability.
- Use symbolic operators for assignment and conditions (←, ==, !=, +, -, >, <, etc.).
- Write loops and conditionals compactly and place simple statements on the same line after colons where clarity permits.
- Ensure each line expresses a meaningful, self-contained operation or control statement; avoid lines that are too short (trivial) or too long (overloaded).
- Use standard programming abbreviations judiciously but prioritize readability.
- Avoid any extraneous formatting: no separator lines, bullet points, indentation beyond what is necessary for clarity inside loops or conditionals (optional but minimal).
- Output only pseudocode lines with line numbers—no extra text.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. for i in 0 to n-1: read A[i]  
7. for i in 0 to n-2:  
8.    set min_i ← i  
9.    for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
10.    swap A[i], A[min_i]  
11. print all elements of A