Translate the input code into clear, concise, and compact pseudocode that emphasizes readability and high-level abstraction using mostly natural language combined with standard symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Produce pseudocode that balances natural language and symbolic clarity while keeping lines short and meaningful.

Follow these formatting and style rules strictly:

- Start each function with: `in function <name>`  
- Declare variables and data structures naturally and succinctly, e.g., `let A be vector of integers`, `set size of A = n`  
- Express input/output simply: `read n`, `read n elements into A`, `print all elements of A`  
- Use compact, idiomatic loops and conditionals with colons and inline statements when clear:  
  - `while x < n: x++`  
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`  
- Inline simple assignments, conditions, and updates within loops and branches without extra lines if it does not reduce clarity  
- Prefer well-known, minimal abbreviations only if unambiguous, otherwise favor descriptive names  
- Avoid comments, explanations, step summaries, or extraneous text—output only the pseudocode lines  
- Number every line sequentially from 1, no blank lines or separators  
- Group logically connected operations into the fewest lines possible without losing clarity or flow  
- Use a consistent, minimal indentation style to indicate nesting (prefer tabs or 4 spaces), aligning nested logic clearly  
- Maintain uniform style for control flow keywords (`for`, `while`, `if`, `else`) and assignment keywords (`set`, `let`)  
- Prefer “to” and “exclusive” or “inclusive” to specify loop ranges clearly and compactly where helpful

Example target style output:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A exclusive:  
8.   set min_i ← i  
9.   for j in i+1 to size of A exclusive: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A  

Generate only the minimal, direct pseudocode lines strictly corresponding to the input code, maximizing readability, compactness, and high-level abstraction under these guidelines.