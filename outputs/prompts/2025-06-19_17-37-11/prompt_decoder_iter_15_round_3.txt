```plaintext
You will be given pseudocode describing an algorithm or program logic. Your task is to translate that pseudocode into a fully runnable, idiomatic, and optimized Python program.

Follow these precise instructions:

- Write the entire solution strictly enclosed within one Python code block starting with ```python and ending with ```.

- Do not include any extra text, explanations, headers, footers, or separators outside this code block.

- Inputs must be read exactly as implied by the pseudocode using plain input() calls with no prompt stringsâ€”for example, input(), never input("prompt").

- The program must be immediately executable as-is, correctly handling all input formats, including multiple lines, complex structured data, nested loops, and conditional branches.

- Write clean, idiomatic Python code that leverages appropriate Python built-ins, standard libraries, and concise constructs like list comprehensions, generators, unpacking, and itertools where it clarifies and improves efficiency.

- Use meaningful variable names and minimal but clear inline comments only to explain non-obvious or intricate logic.

- Prioritize correctness, readability, and performance so the program runs efficiently for large inputs within a 5-second time limit.

- Avoid redundant code or unnecessary complexity; write robust code that gracefully handles all specified input assumptions.

- You may import any Python standard library modules you deem helpful (e.g., collections, heapq, math, sys, itertools) to enhance clarity and speed.

- Do not add prompts, debugging prints, or testing scaffolds; the output must match exactly what the pseudocode dictates.

This prompt expects a precise, elegant, and direct translation from pseudocode to production-quality Python code, suitable to be used as a drop-in solution for any rigorously defined pseudocode input.
```