Translate the given code into clear, concise, and compact pseudocode maximizing natural language with symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Make pseudocode easy to read and understand by using mostly one-liner statements that express meaningful program steps without verbosity, while maintaining clarity.

Use this strict style and formatting:

- Start each function with: `in function <name>`
- Declare variables and data structures naturally: `let A be vector of integers`, `set size of A = n`
- Express input/output simply: `read n`, `print all elements of A`, `read n elements into A`
- Use loops and conditionals in minimal form, favoring colon-separated one-liners where possible:
  - `while x < n: x++`
  - `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Inline short if statements, assignments, and updates on a single line to keep compactness without losing clarity
- Prefer descriptive natural terms but allow well-known concise abbreviations when unambiguous
- Avoid comments, explanations, summaries, or extraneous text—output only pseudocode lines
- Number lines sequentially from 1 with no blank lines or separators
- Group logically connected steps tightly for high-level abstraction while preserving readability and flow

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Generate only the minimal pseudocode lines that faithfully reflect the input code’s logic in this style, maximizing natural language clarity, line compactness, and high-level abstraction without verbosity or loss of detail.