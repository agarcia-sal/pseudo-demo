Translate the given code into concise, readable, and high-level pseudocode using mostly natural language with common symbolic operators (←, ==, !=, <, ≤, >, ≥, +, -, *, /, %, ++, --) for assignments, comparisons, and arithmetic. Prioritize clarity and compactness. 

- Number every pseudocode line sequentially starting from 1 without blank or separator lines.
- Begin each function with:  
  `in function <name>`
- Define variables and data structures simply, e.g.:  
  `let A be vector of integers`  
  `set size of A = n`
- Use natural and descriptive identifiers; abbreviations may appear if clear.
- Represent input/output clearly:  
  `read n`  
  `read n elements into A`  
  `print all elements of A`
- Express loops and conditionals compactly using colon syntax and inline conditions when readable:  
  `while x < n: x++`  
  `for i in 0 to n-1: if A[i] < A[min_i]: set min_i ← i`
- Favor mostly one-line statements that combine logically connected operations concisely without unnecessary splitting.
- Use indentation only when absolutely necessary for multi-line blocks; keep all other statements one line.
- Avoid comments, explanations, summaries, or any extra text beyond the pseudocode itself.
- Do not include any separator or delimiter lines.

Example output style to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to size of A - 2:  
8.   set min_i ← i  
9.   for j in i+1 to size of A - 1: if A[j] < A[min_i]: set min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A

Produce the minimal number of pseudocode lines needed to accurately and fully represent the input code’s behavior with maximum readability, high-level abstraction, and compactness, strictly following these instructions.