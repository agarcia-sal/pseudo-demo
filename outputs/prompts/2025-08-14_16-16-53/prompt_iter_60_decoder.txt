```python
Translate the given pseudocode into a complete, minimal, and fully executable Python 3 program strictly adhering to these enhanced constraints:

- Output only one Python code block, exactly enclosed as:
  ```python
  # your complete, production-ready solution here
  ```
- Use only standard I/O functions `input()` and `print()` without any prompts, comments, debugging, or extraneous text.
- Match variable and function names from the pseudocode when meaningful, while applying clean, idiomatic, and performant Python style.
- Implement the pseudocode logic exactly, including all explicit and implicit cases, without adding extra wrappers or scaffolding beyond what pseudocode implies.
- Prioritize runtime and memory efficiency by:
  - Eliminating unnecessary computations and data structures.
  - Exploiting Python's fastest idioms, including comprehensions, generator expressions, built-ins (`map`, `filter`, `any`, `all`), unpacking, short-circuit evaluation, and `divmod`.
  - Leveraging standard libraries optimally and only when they improve clarity or speed (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.).
- If the pseudocode includes a main routine or function, define `main()` accordingly and call it inside:
  ```python
  if __name__ == "__main__":
      main()
  ```
  ensuring proper program execution.
- Do not include comments, blank lines, separators, or explanations inside or outside the code block.
- Your code must be concise, robust, and production-readyâ€”directly reflecting the problem requirements and suitable for immediate use in a performance-critical environment.
- The solution must run within 5 seconds on typical input sizes.
- Do not print or output anything other than the Python code block.
- No assumptions or modifications beyond the pseudocode logic are allowed.

Focus exclusively on delivering the most optimized, idiomatic, and exact Python translation of the pseudocode, ready for competitive programming or high-stakes production use.
```