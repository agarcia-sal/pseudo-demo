Generate concise, clear, and high-level pseudocode for the given problem description that balances natural language readability with symbolic brevity. Use mostly one-line statements combining natural language with symbolic operators (=, ≠, <, >, ≤, ≥, ←, +, –, *, /, %, //) and minimal keywords (for, while, if, else, function, return, call). Prefer natural phrases for common actions (read, print, let, set, swap, join) and compact forms for conditions and loops. Avoid explanations, comments, or summaries. Omit unnecessary punctuation and do not use separator lines.

Format the output strictly as numbered pseudocode lines following this structure:

1. variable declarations or initializations using natural but brief language  
2. inputs read or assigned naturally (e.g., "read n" or "read string s")  
3. control flow statements expressed succinctly with minimal keywords  
4. conditions and arithmetic using symbolic operators and abbreviations  
5. keep short loop or conditional bodies on the same line when reasonable  
6. define and call functions briefly ("define function name", "call name(args)")  
7. maintain a logical, readable flow with minimal verbosity and maximal clarity  

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i = 0 to n-2  
8.   set min_i ← i  
9.   for j = i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.   swap A[i], A[min_i]  
11. print all elements of A

Return only the numbered pseudocode steps in this style and format, ensuring the code is compact yet easy to understand and completes within a 5-second runtime limit.