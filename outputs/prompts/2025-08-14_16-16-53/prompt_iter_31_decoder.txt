```python
Translate the provided pseudocode into a fully functional, efficient, and idiomatic Python 3 program that meets these requirements:

- Output exactly one Python code block formatted as:
  ```python
  # complete, optimized code here
  ```
- Use only standard input/output with `input()` and `print()`; avoid prompts, debugging info, comments, or extraneous text.
- Retain variable and function names from the pseudocode when meaningful; otherwise prefer concise, clear, Pythonic names and constructs.
- Accurately implement the full logic of the pseudocode—including all implicit and explicit cases—without adding unrelated scaffolding or wrappers.
- Optimize code for runtime speed and memory use by:
  - Eliminating unnecessary computations and loops.
  - Leveraging appropriate standard libraries and built-ins (e.g., `collections`, `functools`, `itertools`, `math`, `re`, `heapq`, `operator`) where beneficial.
  - Employing advanced Python idioms prudently, such as generator expressions, comprehensions, multiple assignment, short-circuit evaluation, and unpacking.
- If a main function is implied, define and invoke it using:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Ensure the entire program executes within 5 seconds for typical input constraints.
- Avoid inserting comments, explanations, blank lines, or separator lines outside the required single code block.
- Do not import or use any third-party libraries—only Python’s standard library is permitted.
- Deliver a production-ready, minimal, robust solution strictly aligned with the given pseudocode instructions.

Focus solely on producing the best possible Python translation of the pseudocode under these conditions.
```