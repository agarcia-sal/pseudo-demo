Generate easy-to-read, compact, and high-level pseudocode blending natural language with concise symbolic expressions. Use mostly one-line statements combining conditions and actions without losing clarity. Prefer straightforward, precise terms and avoid redundancy. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `while`, `for`, `return`, `call`, `print`, `break`, `continue`.  
Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly only to highlight key operations or updates. Declare variables with type and initial value on the same line whenever possible, e.g.,  
`let x be integer = 0`.  
Represent collections naturally, e.g., “vector of integers”, “string”, “length of”, “elements of”. Define and call functions as:  
`define function name` / `in function name` or `call name`.  
Avoid indentation; keep related statements on the same line separated by spaces or semicolons. Use explicit control flow keywords (e.g., `break`, `continue`) when necessary. Number output lines sequentially from 1 without blank lines. Output ONLY the pseudocode lines with no comments, explanations, or headers. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A