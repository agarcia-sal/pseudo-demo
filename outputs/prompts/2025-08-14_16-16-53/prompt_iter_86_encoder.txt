Generate concise, easy-to-read pseudocode that balances natural language and symbolic notation for clarity and brevity. Produce mostly one-line statements combining conditions and actions without losing meaning. Use compact expressions, avoiding redundancy but including enough detail to understand logic and data flow. Use only these keywords when needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Prefer symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`. Use assignment `←` sparingly to highlight key updates or definitions. Declare variables by type and initial value on the same line whenever possible (e.g., `let x be integer = 0`). Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; keep logically related statements on the same line separated by spaces or semicolons. Number output lines sequentially starting at 1 with no blank lines or extra output. Output ONLY pseudocode lines, no comments or explanations. Complete output within 5 seconds.

Example style:  
1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A