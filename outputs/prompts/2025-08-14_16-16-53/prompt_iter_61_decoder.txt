```python
Translate the provided pseudocode into a single, complete, and directly executable Python 3 program strictly meeting these requirements:

- Output exactly one uninterrupted Python code block wrapped as:
  ```python
  # your precise, minimal, production-ready solution
  ```
- Use only `input()` and `print()` for I/O, without prompts, comments, blank lines, or any extraneous output inside or outside the code block.
- Preserve meaningful variable and function names from the pseudocode whenever they improve clarity; otherwise, favor concise, idiomatic, and performant Python constructs.
- Faithfully implement the pseudocode’s exact logic and control flow including all implicit and explicit cases; avoid adding any scaffolding, debugging, or non-essential wrappers beyond those explicitly described.
- Maximize runtime and memory efficiency by:
  - Removing all redundant computations, variables, and data structures.
  - Using Python’s most efficient built-ins and language features: comprehensions, generator expressions, `map`, `filter`, `any`, `all`, `divmod`, unpacking, short-circuit evaluation, and optimized standard library modules (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.) only if they improve clarity and performance.
- If the pseudocode defines a main routine or main function, implement it as `def main():`, and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Produce minimal, dense, and idiomatic code without comments, extra newline spacing, or explanatory text.
- Ensure your final solution runs within 5 seconds on realistic input sizes.
- Do not include any assumptions, changes, or enhancements not explicitly stated by the pseudocode.
- Avoid printing or returning anything except the required code block; no explanations, snippets, or text should be output.
- Your submission should be directly suitable for strict competitive programming or production usage with optimal speed and memory consumption.

Focus solely on exact, concise, and high-performance Python translation of the pseudocode for immediate, practical deployment.
```