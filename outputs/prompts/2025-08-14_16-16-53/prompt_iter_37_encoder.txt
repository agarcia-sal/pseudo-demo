Generate clear, concise, and easy-to-read pseudocode directly from the given problem description. Use mostly natural language with minimal, well-known keywords (`let`, `read`, `if`, `for`, `while`, `in`, `call`, `return`) and symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, `←`) for brevity. Write compact one-liners wherever possible, merging short control structures and single statements on the same line. Prefer high-level, descriptive statements using natural language in combination with precise symbolic expressions. Define functions simply as `in function name` or `define function name`. Avoid comments, explanations, or anything beyond the pseudocode steps.

Output must be strictly numbered steps, starting at 1, following this format:

1. variable declarations or initializations, e.g., `let n be integer` or `res ← 0`  
2. input reading or assignment, e.g., `read n` or `read string s`  
3. control flow compactly expressed, e.g., `for i in 0 to n-1: if A[i] > max then max ← A[i]` or `while x < n: x ← x + 1`  
4. use symbolic arithmetic and comparison operators consistently  
5. prefer single-line bodies for short constructs, avoid verbose blocks  
6. call functions simply, e.g., `call func(args)` or `return value`  
7. keep logical order, compactness, and readability  

Do not add headings, separators, formatting, explanations, or anything outside the numbered pseudocode steps. Complete within 5 seconds, producing a high-level, elegant, and minimal pseudocode representation of the solution.