Generate concise, clear, and easy-to-read pseudocode that uses natural language yet remains compact and high-level. Prefer mostly one-line statements that combine conditions and actions without sacrificing clarity. Use simple, familiar keywords only when necessary: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`, and assignment operator `←`. Use symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) sparingly but precisely. Declare variables with type and initial values on one line if feasible. Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Define functions as either `in function name` or `define function name`. Avoid indentation, blank lines, and separator lines; keep all related code compactly on one line separated by spaces or semicolons if needed. Number each output line sequentially starting at 1. Output ONLY the pseudocode lines—no explanations, comments, summaries, or extra text. Complete within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A