Generate clear, concise, and high-level pseudocode that balances natural language with compact symbolic notation. Prefer mostly one-line statements that combine conditions and actions without sacrificing readability; use simple expressions and avoid repetition. Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Declare variables with type and initial value in one line when possible. Express collections naturally, such as “vector of integers”, “string”, “length of”, “elements of”. Use these exact symbolic operators sparingly to highlight logic: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←`. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; keep related statements on the same line separated by spaces or semicolons. Number output lines sequentially starting from 1 with no blank lines or extra prefixes. Output only pseudocode lines, no comments, notes, or explanations. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i; for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7 swap A[i], A[min_i]  
8 print all elements of A