Generate clear, concise, and high-level pseudocode for the given problem description that balances natural language with symbolic notation for compactness and readability. Output only the pseudocode—no explanations, comments, or summaries. Use mostly one-liners and brief statements; prefer succinct loops, conditionals, and assignments with symbols (←, =, ≠, <, >, ≤, ≥, +, –, *, /, %, //). Represent functions and calls briefly (e.g., “in function name”, “call func(args)”). Follow this exact numbered step format:

1. declare and initialize variables  
2. read inputs or assign values in natural language  
3. use minimal keywords for control flow (for, while, if) with bodies on one line where sensible  
4. use natural-named collections and common operations (e.g., read n elements into list A)  
5. keep logical flow clear but compact—avoid verbose syntax or redundant detail  
6. terminate steps at meaningful points, keeping each line to a single core operation  

No separators or formatting lines; output only the numbered pseudocode steps as shown. Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i ← i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A