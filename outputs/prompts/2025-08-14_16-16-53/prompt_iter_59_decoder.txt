```python
Translate the given pseudocode into a single, complete, and fully executable Python 3 program with the following strict requirements:

- Output ONLY one Python code block formatted exactly as follows (no extra text, comments, or explanations):
  ```python
  # complete, optimized code here
  ```
- Use plain standard input/output: read inputs exclusively via `input()` (no prompts or arguments), and write outputs via `print()` only.
- Faithfully implement all pseudocode logic including all explicit and implicit edge cases without adding unrelated wrappers, scaffolding, or commentary.
- Retain pseudocode variable and function names if meaningful; otherwise, apply concise, idiomatic Python naming and style.
- Maximize runtime and memory efficiency by:
  - Eliminating all redundant computations and unnecessary loops.
  - Leveraging all relevant standard Python modules and built-ins (e.g., `collections`, `functools`, `itertools`, `math`, `operator`, `heapq`, `re`, `sys`).
  - Utilizing advanced, succinct Python idioms such as comprehensions, generator expressions, `divmod`, multiple assignment, short-circuiting, unpacking, and functional tools.
- If the pseudocode implies a `main` function, define it and add the standard execution guard:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do NOT include any debugging code, comments, blank lines, separators, or output except the final required output(s).
- Your solution must run correctly and terminate within 5 seconds on typical contest/test inputs.
- Your final code must be minimal, production-ready, idiomatic, and precisely aligned with the pseudocode semantics and constraints.
- You may use any Python standard library or built-in feature provided it improves correctness, clarity, or performance.

Focus entirely on delivering the cleanest, fastest, and most robust Python translation of the pseudocode meeting all above conditions.
```