```python
Translate the given pseudocode into a compact, exact, production-grade Python 3 program that meets these strict criteria:

- Output exactly one Python code block, formatted as:
  ```python
  # complete, correct, and optimized solution here
  ```
- Use only standard input/output: `input()` and `print()` with no prompts, debug info, comments, extra newlines, or any non-code output.
- Keep variable and function names aligned with pseudocode when clear and meaningful, but prefer clean, idiomatic, and performant Python style.
- Faithfully implement the pseudocode logic in full, including all explicit and implicit branches and edge cases, without adding unnecessary wrappers or altering control flow.
- Optimize for runtime and memory efficiency by:
  - Using Pythonâ€™s fastest idioms: comprehensions, generator expressions, built-ins like `map`, `filter`, `any`, `all`, `divmod`, unpacking, short-circuit logic.
  - Minimizing redundant computation and data structures.
  - Prefer built-in standard library modules (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.) ONLY if they clearly improve clarity or speed.
- If pseudocode defines functions (e.g., a main routine or others), implement them as such and include the exact canonical entry point:

  ```python
  if __name__=="__main__":
      main()
  ```
- Avoid comments, blank lines, or separators inside or outside the code block.
- Write concise, robust, idiomatic, and memory-efficient code that directly mirrors the problem requirements and is immediately ready for competitive programming or production use.
- Respect the 5-second runtime limit on realistic inputs; avoid inefficient algorithms or I/O.
- Do not add any assumptions or functionality beyond what pseudocode specifies.
- Do not print anything except the single required Python code block.

Focus exclusively on delivering the most minimal, exact, idiomatic, and high-performance Python translation of the pseudocode, suitable for high-stakes, time-critical environments.
```