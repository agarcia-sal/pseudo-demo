Generate clear, concise, high-level pseudocode using mostly one-line statements that combine conditions and actions without losing readability. Use natural language mixed with precise symbolic operators: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` only to highlight key steps. Use these keywords selectively and only as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Declare variables on one line with type and initial value whenever applicable. Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; keep related statements together separated by spaces or semicolons. Number pseudocode lines starting at 1 with no blank lines. Output only the pseudocode lines, no comments, explanations, or extra formatting. Complete output within 5 seconds. Example style to follow:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A