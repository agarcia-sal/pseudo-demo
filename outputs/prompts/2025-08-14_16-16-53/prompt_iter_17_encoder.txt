Generate concise, high-level pseudocode from the input problem description, prioritizing clarity and readability by blending natural language with symbolic notation and abbreviations. Use mostly one-liners and compact expressions, avoiding verbose syntax or detailed comments. Do not include explanations, summaries, or extraneous output — produce only pseudocode steps.

Follow this exact formatting and logical order:

1. Declare or initialize variables naturally (e.g., "let x be integer", "set res ← 0")  
2. Read inputs or assign values using simple, direct statements (e.g., "read n", "read string s")  
3. Express control flow with minimal keywords (for, while, if), preferably on one line when feasible (e.g., "for i in 0 to n-1:", "if x > 0 then y ← y + 1")  
4. Use symbolic operators for assignment (←), arithmetic (+, –, *, /, //, %), and comparisons (=, ≠, <, ≤, >, ≥)  
5. Combine short conditional or loop bodies on the same line after colon or with inline if where clarity allows  
6. Represent functions/procedures succinctly with "in function name" and calls as "call func(args)" or inline expressions  
7. Preserve logical flow, keep steps numbered sequentially without blank lines or separators, and maintain compactness without losing clear meaning

Example style your pseudocode should mirror:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2: set min_i ← i  
7. for j in i+1 to n-1: set min_i ← j if A[min_i] > A[j]  
8. swap A[i], A[min_i]  
9. print all elements of A

Conform strictly to this format and style, focusing on natural yet compact phrasing that balances brevity and readability. No additional text, comments, formatting lines, or explanations should be included.