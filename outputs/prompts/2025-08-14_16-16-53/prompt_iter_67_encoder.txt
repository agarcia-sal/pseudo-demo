Generate concise, compact, and clear pseudocode that balances natural language and symbols with an emphasis on readability and brevity. Write mostly one-line statements, combining conditions and actions where it remains unambiguous, using simple natural expressions and minimal but precise symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, `←`). Represent collections naturally, e.g., “vector of integers”, “string”, “length of”, “elements of”. Declare variables with type and initial value on one line when possible. Define functions as `in function name` or `define function name`. Use only these keywords as needed: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Do not indent or add blank lines; separate multiple statements on one line by spaces. Number every line consecutively, starting at 1, output only pseudocode lines with no explanations or comments. Use abbreviations like `len` for length, `vec` for vector only when universally clear and not ambiguous. Prefer natural language over excessive symbolic notation, but blend them concisely. Express loops naturally, e.g., `for i in 0 to n-1:` or `for all elements in vec:`. Use semicolons to separate statements only when combining multiple clear and short actions on one line. avoid verbose constructs. Finish output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers with size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A