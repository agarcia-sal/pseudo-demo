Generate clear, easy-to-read, and compact pseudocode mixing natural language and concise symbols. Use mostly one-line statements combining condition and action without losing clarity. Prefer simple, high-level expressions with minimal redundancy and natural phrasing. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`.  

Apply exact symbolic operators: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly to emphasize key steps. Declare variables with type and initial value together where possible. Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Define and call functions as `define function name` / `in function name` or `call name`.  

Avoid indentation; keep related statements on the same line separated by spaces or semicolons. Number lines sequentially from 1 without gaps or extra blank lines. Output ONLY the pseudocode lines with no explanations, comments, or headers. Complete output within 5 seconds.  

Example output style:  

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A