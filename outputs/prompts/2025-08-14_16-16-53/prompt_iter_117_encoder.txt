Generate easy-to-read, concise, and high-level pseudocode that favors natural language blended with symbolic notation. Use mostly one-liner statements combining conditions and actions for compactness without losing clarity. Employ these keywords only as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Use standard symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly to highlight important updates. Declare variables with type and initial value on one line whenever possible (e.g., `let i be integer = 0`). Express collections naturally (e.g., vector/list of integers, string, length of, elements of). Define functions as `define function name` and their body as `in function name`. Call functions with `call name`. Avoid indentation; keep related statements together separated by spaces or semicolons. Number every output line starting from 1, no blank lines or extra spacing. Output ONLY the pseudocode lines without comments, explanations, headers, or separators. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i; for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7 swap A[i], A[min_i]  
8 print all elements of A