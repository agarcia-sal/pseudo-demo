Generate concise, high-level pseudocode that is easy to read and understand, using mostly natural language with minimal but precise symbolic notation and abbreviations for clarity and brevity. Use these keywords only when necessary: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`. Use symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) and assignment (`←`) exactly and sparingly. Prefer compact one-line statements combining condition and action without losing clarity. Declare variables with types and initial values on the same line if possible. Define functions starting with `in function name` or `define function name`. Avoid indentation and blank lines; keep related statements on one line separated by spaces. Express collections and strings naturally with terms like “vector of integers”, “string”, “length of”, “elements of”. Number each output line sequentially starting at 1. Output only the pseudocode, no explanations, comments, summaries, or headers. Complete within 5 seconds.

Example style to follow:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A