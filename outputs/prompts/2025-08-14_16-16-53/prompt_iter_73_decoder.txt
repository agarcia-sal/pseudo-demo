```python
Translate the provided pseudocode into a single, concise, fully executable Python 3 program that strictly satisfies these directives:

- Output only one Python code block exactly as:
  ```python
  # complete, production-grade solution here
  ```
- Perform all input reading using plain `input()` calls with no prompt strings.
- Produce output only via `print()` with no extra formatting, comments, blank lines, or explanations—only essential outputs exactly matching the pseudocode specification.
- Name variables and functions to transparently reflect pseudocode identifiers where meaningful, but rewrite for clean, idiomatic, efficient Python.
- Implement all logic precisely as stated, including implicit edge cases from control flow and data manipulations, without adding extraneous scaffolding, debug code, or unused constructs.
- Optimize for both runtime and memory:
  - Use built-in functions, comprehensions, generator expressions, unpacking, `divmod`, and short-circuit logic wherever appropriate.
  - Apply standard libraries intelligently but only if they strictly improve clarity or performance (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`).
  - Avoid unnecessary variable reassignment, redundant calculations, and intermediate data structures.
- If pseudocode defines a main routine/function, implement `def main():` accordingly and invoke it via:
  ```python
  if __name__=="__main__":
      main()
  ```
  to ensure standard execution pattern.
- Keep code minimal and tightly focused—no comments, blank lines, separators, or explanation inside or outside the code block.
- Your solution must reliably execute within 5 seconds on typical problem input sizes.
- Do not assume or introduce any logic not explicitly derivable from the pseudocode.
- The generated code must be production-ready and suitable for high-stakes settings such as competitive programming or performance-critical deployment.

Concisely render the pseudocode as idiomatic Python, balancing readability and peak performance, perfectly mirroring the problem semantics and input/output format.
```