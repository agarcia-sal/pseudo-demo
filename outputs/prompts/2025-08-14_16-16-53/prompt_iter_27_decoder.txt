```plaintext
You are given pseudocode describing an algorithm. Your task is to translate it into a minimal, production-quality, fully executable Python 3 program that exactly implements the described logic and I/O behavior.

Requirements:
- Output a single Python code block formatted exactly as:
  ```python
  # your complete code here
  ```
- Use standard input/output only: `input()` for input, `print()` for output. No prompts, print statements, debug info, comments, or extra text.
- Preserve variable and function names when meaningful but rewrite with clean, idiomatic, efficient Python style.
- Implement all logic precisely, including any explicit or implicit edge cases in the pseudocode.
- Focus on runtime and memory efficiency:
  - Eliminate redundant computations or loops.
  - Use built-in Python features and standard libraries whenever beneficial (e.g., `collections`, `itertools`, `functools`, `heapq`, `re`, `math`, etc.).
  - Apply advanced Python idioms like comprehensions, generator expressions, multiple assignment, short-circuiting, unpacking, and slicing as appropriate.
- If pseudocode implies a main function, define and call `main()` guarded by:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Your code must be self-contained, no external dependencies beyond the Python standard library.
- Complete execution under typical constraints within 5 seconds.
- Do not include any comments or explanations in the output code.
- Output exactly one python code block and nothing else.

In summary, produce a single, minimal, robust, idiomatic, optimized Python 3 script strictly matching the pseudocode algorithm, using standard input/output, ready for production use.
```