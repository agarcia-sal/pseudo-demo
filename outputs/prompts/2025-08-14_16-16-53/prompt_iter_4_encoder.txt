Generate concise, high-level pseudocode for the given problem description that balances readability with compactness by combining natural language and symbolic notation.  
Prefer mostly single-line statements and minimal keywords (e.g., for, while, if), using common abbreviations and symbolic operators (=, ≠, <, >, ≤, ≥, +, –, *, /, //, %, ←) to express logic succinctly without losing clarity.  
Avoid verbose constructs, explanations, comments, or summaries—output only the pseudocode itself.  
Structure the output as a numbered list representing the execution order, typically starting with:  

1. variable declarations or initializations  
2. input reading or assignment  
3. control flow using brief loops and conditionals, combining short bodies on one line where appropriate  
4. concise function or procedure definitions and calls, e.g., "in function name" or "call func(args)"  

Use natural language phrases for clarity (e.g., "let x be integer," "read n," "print result") but keep statements short and focused. Use consistent, minimal indentation to denote blocks only when necessary.  
Do not include any extra formatting, delimiters, or non-pseudocode text. Output only the numbered pseudocode lines.  

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A