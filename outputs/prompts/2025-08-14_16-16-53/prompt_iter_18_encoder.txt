Generate easy-to-read, high-level pseudocode that is both compact and expressive, using primarily natural language combined with standard symbolic operators and abbreviations. Output only concise, mostly one-liner pseudocode statements without any explanations, comments, or summaries.

Follow this exact style and format:

1. Start with variable declarations or initializations, using natural wording like “let x be integer” or “set x ← 0”  
2. Use simple instructions to read input or assign values (e.g., “read n”, “let A be vector of integers size n”)  
3. Express control flow succinctly with minimal keywords—prefer one-liner loops and conditionals using symbols (=, ≠, <, >, ≤, ≥), and concise syntax (for, while, if)  
4. Combine short conditional or loop bodies on the same line when clear (e.g., “if condition then action”)  
5. Represent functions and procedure calls briefly and naturally (e.g., “in function name”, “call func(args)”)  
6. Use standard arithmetic (←, +, –, *, /, %, //) and logical notation consistently  
7. Maintain logical clarity and flow but keep verbosity to a minimum  

Number each pseudocode step sequentially starting at 1, with no separator lines or extra formatting.

Example pseudocode snippet:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i ← i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Ensure the pseudocode balances natural language readability with symbolic compactness, maximizing clarity and brevity, suitable for a 5-second runtime constraint. Output only the numbered pseudocode steps; omit any extra text or formatting.