Generate a concise, clear, and high-level pseudocode directly from the given problem description. Use mostly natural language with precise symbolic notation and abbreviations for brevity, prioritizing comprehension and logical flow. Express statements compactly, preferring one-liners with minimal keywords such as `let`, `read`, `if`, `for`, `while`, `in`, `call`. Use symbolic operators (=, ≠, <, >, ≤, ≥) and assignment (←). Represent loops and conditionals succinctly, combining short bodies on one line when sensible. Define functions briefly as “in function name” or “define function name”. Avoid comments, explanations, summaries, or notes—output only numbered pseudocode steps.

Follow this numbered format exactly:

1. variable declarations or initializations, e.g. `let n be integer` or `res ← 0`  
2. input reading or assignment in simple natural language, e.g. `read n` or `read string s`  
3. control structures compactly expressed with minimal keywords and symbolic logic, e.g.  
 `for i in 0 to n-1: if A[i] > max then max ← A[i]`  
 `while x < n: x ← x + 1`  
4. use symbolic arithmetic and comparison operators strictly (`+`, `-`, `*`, `//`, `%`, `<`, `=`, `≠`)  
5. prefer single-line bodies when short and clear, avoid verbose blocks  
6. call functions simply, e.g., `call func(args)` or `return value`  
7. keep the pseudocode logically ordered, compact, and easy to read

Do not add headings, separators, or formatting outside the numbered steps. Do not output anything other than the numbered pseudocode. Complete within 5 seconds focusing on producing the clearest, most compact pseudocode representation of the algorithm implied by the problem. Here is the style to imitate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A