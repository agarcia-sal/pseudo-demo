```python
Translate the given pseudocode into a single, minimal, and fully runnable Python 3 program that precisely implements the described logic with maximum clarity, correctness, and efficiency, following these strict guidelines:

- Output exactly one Python code block delimited by triple backticks with the "python" tag, e.g.:
  ```python
  # your code here
  ```

- Use only `input()` and `print()` for all input/output with no prompt strings, comments, debug statements, or extra output.

- Reflect the pseudocode’s variable and function names exactly when appropriate, otherwise apply clear, idiomatic, and performant Python naming and style conventions.

- Implement the pseudocode logic exactly, covering all cases explicitly or implicitly indicated, without adding unrelated scaffolding, extra functions, or changes beyond what the pseudocode specifies.

- Prioritize runtime and memory efficiency by:
  - Avoiding redundant calculations and data structures,
  - Using Python’s fastest idioms such as comprehensions, generator expressions, built-in functions (`map`, `filter`, `any`, `all`, `divmod`, etc.),
  - Employing built-in standard libraries only when they clearly enhance correctness or performance (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.),
  - Minimizing I/O overhead and memory footprint, especially on large input sizes.

- If the pseudocode defines a main routine or function, define `main()` exactly as specified and invoke it within the standard Python entry point:
  ```python
  if __name__ == "__main__":
      main()
  ```
  ensuring straightforward, immediate execution.

- Exclude all comments, blank lines, separators, or explanations inside or outside the code block; output must be pure code.

- The solution must be concise, robust, suitable for a resource-constrained and performance-critical environment, and able to run within 5 seconds on typical inputs.

- Do not assume or add any functionality beyond the pseudocode’s explicit or implicit instructions; do not alter the problem logic or I/O format.

This prompt aims to produce the cleanest, most idiomatic, and exact Python translation of pseudocode suitable for competitive programming, production use, or any high-stakes environment requiring optimal correctness and performance.
```