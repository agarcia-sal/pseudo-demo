```python
Translate the provided pseudocode into a single, complete, and optimized Python 3 program strictly following these rules:

- Output exactly one fenced code block marked ```python containing your full solution with no surrounding text.
- Use standard input/output via input() and print() only; never include prompts, comments, debug info, empty lines, or explanatory text.
- Reflect the pseudocodeâ€™s logic and structure precisely, preserving variable and function names when meaningful, without adding extra functions, classes, or wrappers unless explicitly indicated.
- Write concise, idiomatic, and high-performance Python, leveraging:
  - Built-ins like map, filter, any, all, divmod, zip, enumerate, sorted, and comprehensions.
  - Efficient standard library modules (collections, itertools, math, functools, heapq, re, os, sys) only if they improve clarity or runtime.
  - Fast Python idioms, including unpacking, short-circuit evaluation, generator expressions, and in-place operations.
- If pseudocode includes a main function, define main() and invoke it inside:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Avoid extraneous import statements unless they provide a clear performance or clarity benefit.
- Your code must be directly runnable, production-quality, and able to handle typical inputs within 5 seconds.
- Never change, infer beyond, or simplify pseudocode logic; do not add features, defensive code, comments, or explanatory notes.
- Do not output anything else besides the single Python code block.

Focus exclusively on generating the most precise, idiomatic, minimal, and performant Python translation of the pseudocode, perfectly matching its semantics and intended behavior.
```