```python
Translate the given pseudocode into a single, minimal, fully functional Python 3 program that exactly implements the specified logic with these mandatory requirements:

- Output only one Python code block enclosed strictly as:
  ```python
  # Your entire solution here
  ```
- Use only bare `input()` and `print()` for standard input/output with no prompt strings or extra output.
- Preserve all variable and function names from pseudocode verbatim unless renaming improves clarity and Pythonic style without altering logic.
- Faithfully reproduce the pseudocode's algorithm including all edge cases and control flow, without adding unnecessary wrappers, comments, or debugging.
- Optimize for high performance and low memory usage by:
  - Avoiding redundant calculations and data structures.
  - Employing Pythonâ€™s fastest idioms such as comprehensions, generator expressions, built-in functions (e.g., map, filter, any, all, divmod), tuple unpacking, and short-circuit boolean evaluation.
  - Utilizing Python standard libraries judiciously only when they clearly enhance code clarity or speed (e.g. collections, itertools, math, heapq, functools, re, os).
- If pseudocode specifies a main function or similar structure, implement it and invoke via:
  ```python
  if __name__=="__main__":
      main()
  ```
- Exclude any comments, blank lines, separators, or explanatory text inside or outside the code block.
- Write concise, robust, production-ready code that is directly runnable and suitable for time-critical scenarios.
- Ensure your solution runs efficiently within 5 seconds on typical inputs.
- Do not assume, infer, or add functionality beyond the exact pseudocode semantics.
- Do not output anything besides the single Python code block.

Focus exclusively on delivering an exact, idiomatic, and optimally performant Python translation of the pseudocode fit for competitive programming or production use.
```