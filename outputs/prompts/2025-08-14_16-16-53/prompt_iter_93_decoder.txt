```python
Translate the provided pseudocode into a single, complete, and immediately executable Python 3 program strictly observing these rules:

- Output only one Python code block exactly as:
  ```python
  # complete, efficient, idiomatic code here
  ```
- Use only bare `input()` and `print()` statements—no prompts, comments, debugging, or extra output.
- Preserve all variable and function names as in pseudocode when clearly meaningful; otherwise, apply concise, idiomatic, modern Python naming and style.
- Implement the logic precisely and comprehensively, including all given and implied cases, without adding extra scaffolding beyond what pseudocode demands.
- Maximize runtime and memory efficiency by:
  - Avoiding redundant operations, repeated computations, and unnecessary data structures.
  - Employing fastest Python idioms where suitable (comprehensions, generator expressions, built-in functions like `map`, `filter`, `any`, `all`, `divmod`, unpacking, short-circuiting).
  - Using standard libraries only if they yield clearer or faster code (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.).
- If pseudocode features a main function or routine, define `main()` accordingly and invoke it inside the canonical:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Minimize and avoid blank lines and all comments; the produced code must be dense, clean, and production-ready—ideal for competitive programming and performance-critical deployment.
- The solution must run reliably within 5 seconds on typical inputs.
- Do not print or output anything other than the required Python code block.
- Make no assumptions or modifications not strictly supported by the pseudocode.

Focus solely on delivering the most performant, idiomatic, exact Python translation possible, fit for immediate use in time-sensitive or resource-constrained environments.
```