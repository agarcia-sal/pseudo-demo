```python
Translate the given pseudocode into a minimal, efficient, and idiomatic Python 3 program that strictly adheres to these rules:

- Provide ONLY one self-contained code block enclosed exactly as:
  ```python
  # complete, optimized code here
  ```
- Use standard input/output exclusively with plain `input()` and `print()` functions; no prompts, debugging output, comments, or extra text outside the code block.
- Retain the original variable and function identifiers where appropriate, but adapt for Pythonic clarity, brevity, and performance.
- Accurately implement all logic and edge cases expressed or implied by the pseudocode—no additional scaffolding, interactive prompts, or output formatting.
- Maximize runtime and memory efficiency by:
  - Eliminating redundant computations or looping,
  - Leveraging Python’s built-in libraries and modules (such as `math`, `collections`, `functools`, `itertools`, `heapq`, `re`, `sys`, etc.) judiciously,
  - Applying concise Python idioms like comprehensions, generator expressions, unpacking, and short-circuit evaluation.
- When pseudocode suggests a main function, implement it and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Avoid comments, blank lines, or any extraneous formatting; output raw, production-quality Python code only.
- Ensure the solution reliably executes within 5 seconds under normal input size constraints.
- You may import any standard Python library to improve clarity and performance, but do so within the code block, not outside it.
  
Your sole goal is to deliver the tightest, cleanest, and fastest Python translation directly aligned to the pseudocode instructions, ready to run as-is.
```