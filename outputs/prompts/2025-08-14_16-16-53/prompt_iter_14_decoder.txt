Translate the given pseudocode into a single, self-contained, and fully executable Python 3 program with the following requirements:

- Output only one Python code block enclosed exactly as follows:
  ```python
  # your complete code here
  ```
- Use only standard input and output with `input()` and `print()`; never include any prompt strings, debug statements, or extra text.
- Accurately replicate the pseudocode’s logic, preserving meaningful variable and function names where possible, but adopt idiomatic, concise, and efficient Python 3 style.
- Ensure your code handles all implicit and edge cases inherent in the pseudocode without adding unnecessary wrappers or scaffolding.
- Prioritize optimization for runtime speed and memory efficiency by:
  - Eliminating redundant computations and unnecessary loops.
  - Using Python’s built-in functions and standard libraries (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, etc.) wisely.
  - Employing advanced Python features like generator expressions, comprehensions, multiple assignment, and short-circuit evaluation when beneficial.
- Include a proper `main()` function if the pseudocode suggests one, and call it with the standard `if __name__ == "__main__":` guard to ensure correct script execution.
- Provide code that runs correctly and completes within 5 seconds under typical problem constraints.
- Do not add comments, explanations, or any text outside the code block.
- Do not add separator lines or any extraneous formatting.

Focus exclusively on delivering a minimal, optimized, robust, and production-ready Python program that directly translates the input pseudocode as requested.