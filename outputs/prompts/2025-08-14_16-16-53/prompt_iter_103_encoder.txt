Generate easy-to-read, high-level pseudocode that balances natural language and concise symbolic notation for clarity and compactness. Use mostly one-line statements combining conditions and actions without losing meaning. Prefer simple expressions, avoid needless repetition, and use abbreviations when intuitive. Structure code logically but avoid indentation; separate related statements by semicolons or spaces. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`.  
Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and sparingly `←` to highlight key assignments.  
Declare variables with type and initial value on the same line whenever practical (e.g., `let x be integer = 0`).  
Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”), use idiomatic phrasing like “for i in 0 to n-1” or “for all elements in A”.  
Define and call functions as `define function name` / `in function name` and `call name`.  
Number output lines sequentially from 1 with no blank lines or extraneous output.  
Output ONLY the pseudocode lines, no comments, explanations, or headers.  
Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i be integer = i; for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7 swap A[i], A[min_i]  
8 print all elements of A