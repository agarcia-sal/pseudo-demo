Generate concise, clear pseudocode directly from the problem description, using mostly natural language enhanced with minimal precise symbolic notation. Write high-level, compact steps, mainly one-liners, with preferred keywords: `let`, `read`, `if`, `else if`, `for`, `while`, `in`, `call`, `return`. Use symbolic operators only where unambiguous: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment symbol `←`. Define functions as `in function name` or `define function name`. Combine short conditionals or loops on the same line where clarity allows. Avoid explanations, comments, or headers. Output only numbered pseudocode lines starting at 1, ordered logically, no blank lines or separators. Use compact natural terms like “vector of integers”, “string”, “array”, “empty”. Prefer brevity without losing readability or flow. Use consistent spacing but no indentation, align connected statements on one line. Always prioritize readability and succinctness to convey a high-level algorithm outline efficiently. Complete within 5 seconds.

Example format and style to emulate:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers  
5 set size of A ← n  
6 read n elements into A  
7 for i in 0 to n-2  
8   set min_i ← i  
9   for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
10   swap A[i], A[min_i]  
11 print all elements of A