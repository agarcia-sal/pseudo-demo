Generate concise, clear, and high-level pseudocode for the given problem description that prioritizes readability and understanding while remaining compact. Use mostly natural language combined with symbolic notation and abbreviations to keep it succinct. Prefer single-line statements and minimal keywords for control flow (e.g., for, while, if), with loop or conditional bodies on the same line when short and unambiguous.

Output only numbered pseudocode steps, strictly following this format and order:

1. variable declarations and initializations  
2. input reading or assignment in simple natural language (e.g., "read n", "read line as string")  
3. control flow with minimal keywords and symbolic operators (=, ≠, <, >, ≤, ≥), arithmetic (←, +, –, *, /, %, //), and idiomatic shorthand (e.g., increments as x++ or x ← x + 1)  
4. compact one-line conditionals or loops whenever possible  
5. brief, natural function/procedure notation: e.g., "in function main", "define func(args)", "call func(args)"  
6. preserve logical clarity and flow, avoiding verbosity and unnecessary explanation  
7. no explanatory notes, comments, or formatting lines—only pure pseudocode numbered steps  

Example of desired output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Optimize the pseudocode for clarity, brevity, and high-level abstraction, maintaining a natural language style enriched by symbolic notation and idiomatic pseudocode patterns. Complete within a 5-second runtime constraint; do not add any output beyond the numbered pseudocode steps.