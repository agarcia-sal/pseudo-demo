```python
Translate the provided pseudocode into a single, self-contained, fully functional Python 3 program, strictly adhering to these refined requirements to maximize correctness, efficiency, and clarity:

- Output only one Python code block exactly as:
  ```python
  # complete, optimized, and idiomatic Python 3 solution
  ```
- Use only `input()` and `print()` for standard input/output operations; do not print prompts, debug info, comments, blank lines, or extra whitespace anywhere.
- Follow the pseudocode logic verbatim, including all conditions and behaviors, without adding or omitting any implied detail or altering control flow.
- Preserve variable and function names where meaningful, but apply clean, idiomatic Python naming and style consistently.
- Write production-level code:
  - Use Python’s fastest, clearest idioms: comprehensions, generator expressions, built-ins (`map`, `filter`, `any`, `all`), `divmod`, unpacking, and short-circuit boolean operators.
  - Employ standard library modules optimally and only when they improve speed or readability (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, `sys`, etc.).
  - Avoid unnecessary computations, redundant data structures, or memory overhead.
  - Optimize loops, branching, and data access patterns for best average runtime.
- When pseudocode specifies a main function or similar entry point, define it as `main()` and invoke it within:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not include comments, docstrings, blank lines, or explanatory text in or outside the code block.
- Your translation must run correctly and efficiently within 5 seconds on typical problem input constraints.
- Do not assume or add any functionality beyond the pseudocode’s explicit or implicit instructions.
- Ensure the output follows the pseudocode’s output exactly, no more, no less.

Focus exclusively on delivering the most precise, idiomatic, minimal, and performant Python 3 code that fulfills the pseudocode’s logic, suitable for high-stakes production or competitive programming.