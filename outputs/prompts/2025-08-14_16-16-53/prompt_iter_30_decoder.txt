```python
Translate the provided pseudocode into a self-contained, fully executable, and optimized Python 3 program with the following strict guidelines:

- Output exactly one Python code block formatted as:
  ```python
  # complete, efficient, and production-ready code here
  ```
- Use only standard input/output via `input()` and `print()` without any additional prompts, debug prints, comments, or explanatory text.
- Preserve original variable and function names where meaningful, applying clear, idiomatic, and Pythonic naming and style.
- Implement the pseudocode logic exactly as given, fully covering all explicit and implicit cases without adding unnecessary scaffolding or wrappers.
- Ensure optimal runtime and memory usage by:
  - Eliminating redundant computations or loops.
  - Leveraging Python's standard library modules and built-ins effectively (such as: `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `bisect`, `operator`, etc.).
  - Applying advanced Python idioms with care: comprehensions, generator expressions, unpacking, short-circuit logic, slicing, built-in functions.
- If the pseudocode implies a main entry point, define a `main()` function and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not import or use any non-standard third-party modules.
- Do not print or return anything other than what strictly follows from the pseudocode.
- The code must run correctly and efficiently within a 5-second timeout on typical input sizes.
- Your submission is solely the single requested code block; do not add explanations, comments, or any formatting outside it.
Focus on delivering minimal, robust, production-grade Python code that directly and efficiently implements the given pseudocode logic.
```