Generate concise, clear, and easy-to-read pseudocode from the given problem description using mostly natural language with minimal precise symbolic notation and abbreviations for brevity. Use these keywords only when necessary: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Use symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, `←`) precisely and sparingly to maintain clarity while keeping statements compact. Prefer short one-line statements combining conditions and body for conciseness without losing readability. Declare variables with types and initial values inline when possible. Define functions with `in function name` or `define function name` on a single line. Avoid indentation and blank lines; keep related statements aligned with a single space after each colon. Use natural language terms such as “vector of integers”, “string”, “empty”, “length of”, “elements of” as appropriate. Number all output steps sequentially starting at 1, with step number followed by a period and a space. Do not include comments, explanations, headers, or or summaries—output pseudocode only. Complete within 5 seconds.

Follow this exact output formatting style (note the period after step number and spacing):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to n-2: let min_i ← i  
8. for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
9. swap A[i], A[min_i]  
10. print all elements of A