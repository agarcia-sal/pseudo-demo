```python
Translate the pseudocode into a single, minimal, fully runnable Python 3 program strictly following these refined directives:

- Output exactly one Python code block enclosed as:
  ```python
  # your final, optimized solution here
  ```
- Use only standard `input()` and `print()` calls with no prompts, comments, debug info, blank lines, or extra text.
- Precisely mirror variable and function names from the pseudocode when meaningful; otherwise use clean, idiomatic, and efficient Python naming.
- Implement the pseudocode logic exactly and fully, including all implicit/explicit cases, without adding unnecessary wrappers or scaffolding beyond what the pseudocode dictates.
- Prioritize maximal runtime and memory efficiency by:
  - Avoiding redundant computations and data structures.
  - Exploiting Python’s fastest idioms: comprehensions, generator expressions, built-in functions (`map`, `filter`, `any`, `all`, `divmod`), tuple unpacking, short-circuiting, operator module if helpful.
  - Leveraging standard library modules (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`) only if they enhance clarity, performance, or directly implement pseudocode logic.
- If the pseudocode includes named functions or a main routine, faithfully define those and call `main()` within the
  ```python
  if __name__ == "__main__":
      main()
  ```
  guard for correct execution semantics.
- Produce concise, robust, production-ready code that can be used immediately under competitive programming or production constraints.
- Your code must execute within 5 seconds on typical inputs.
- Do not include any assumptions, speculative optimizations, explanatory comments, or output beyond the Python code block.
- Do not output anything other than the single Python code block containing the solution.

Deliver a precise, idiomatic, elegant, and performant Python translation suitable for high-stakes use—never compromise correctness or fidelity to the pseudocode.