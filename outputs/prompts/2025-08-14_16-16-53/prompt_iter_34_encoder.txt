Generate concise, clear, and easy-to-read pseudocode for the given problem description. Use mostly natural language combined with standard symbolic notation and abbreviations to keep the pseudocode compact and high-level. Prefer succinct one-liners for assignments, loops, and conditionals, minimizing verbosity without sacrificing clarity. Do not include any explanation, comments, or summaries—only the pseudocode steps.

Output only numbered lines following this exact structure:

1. Declare or initialize variables  
2. Describe input reading or assignment in simple natural language  
3. Express control flow with minimal keywords (for, while, if), condensing bodies on single lines when brief  
4. Use common symbolic operators (=, ≠, <, >, ≤, ≥, +, –, *, /, %, //, ←) naturally  
5. Define or call functions briefly as “in function name” or “call func(args)”  
6. Maintain logical progression with clarity and brevity throughout  

Omit any formatting separators or extra formatting. Aim for natural phrasing but keep it compact and unambiguous, balancing expressiveness and conciseness.

Example style your output should match exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i to i  
9.   for j = i+1 to size of A exclusive: min_i ← j if A[min_i] > A[j]  
10.   swap A[i], A[min_i]  
11. print all elements of A