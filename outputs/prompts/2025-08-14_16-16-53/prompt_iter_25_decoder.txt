```python
Translate the provided pseudocode into a single, fully functional, and efficient Python 3 program with these strict conditions:

- Output exactly one Python code block, enclosed precisely as:
  ```python
  # your complete, optimized code here
  ```
- Use only `input()` without prompts and plain `print()` for output; do NOT add any extra text, comments, debugging prints, or user interactions.
- Name variables and functions meaningfully, reflecting the pseudocode, but apply concise, idiomatic, and performance-conscious Python style.
- Implement all explicit and implicit logic faithfully, covering edge cases precisely without adding irrelevant features, scaffolding, or code outside the specified logic.
- Achieve maximal runtime and memory efficiency by:
  - Eliminating redundant computations, loops, or variables.
  - Leveraging Pythonâ€™s built-in functions, standard libraries, and advanced idioms (e.g., comprehensions, generator expressions, built-in algorithms, functools, itertools, collections, regex, math, heapq, etc.) wherever they enhance clarity and performance.
  - Using control flow and data structures optimally, minimizing overhead and maximizing clarity.
- If the pseudocode indicates a main function, define it as `def main():` and invoke it under the standard guard:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Avoid all comments, explanations, or formatting outside the code block.
- The resulting program must be minimal, robust, production-ready, and finish execution in under 5 seconds on typical inputs.
- Do NOT include imports unless explicitly required for correctness or optimization.
- Focus exclusively on translating pseudocode to Python in the cleanest, most efficient manner possible while adhering strictly to above constraints.
```