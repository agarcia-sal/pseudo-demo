Generate clear, easy-to-read, compact pseudocode mixing natural language with concise symbolic notation. Use mostly one-line statements combining conditions and actions without losing clarity. Express data structures naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Declare variables with type and initial value in one line whenever possible. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`, `break`.  

Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly to emphasize key operations. Prefer `←` for assignments except for initial declarations where `let x be integer = value` is preferred. Prefer natural words such as “set”, “append”, “increment”, “decrement” only if they improve readability over symbolic notation.  

Keep related statements on the same line separated by spaces or semicolons without indentation or blank lines. Number output lines sequentially starting at 1. Output only the pseudocode lines — no comments, explanations, or extra text. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i; for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7 swap A[i], A[min_i]  
8 print all elements of A