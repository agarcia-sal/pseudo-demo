Generate compact, clear, and high-level pseudocode that balances natural language with minimal symbolic notation for brevity and clarity. Prefer mostly one-line statements combining condition and action without losing meaning. Use only the following keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Declare variables with type and initial value together when possible. Express collections naturally as “vector of integers”, “string”, “length of”, “elements of”. Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and use assignment `←` sparingly to highlight key updates. Prefer concise idiomatic constructs, e.g. `for i in 0 to n-1`, `if cond then action; else action`. Avoid indentation; keep logically related statements on the same line separated by spaces or semicolons. Number lines sequentially starting at 1 with no blank lines or extra formatting. Output ONLY the pseudocode lines, no comments or explanations. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A