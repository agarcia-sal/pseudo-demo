Generate easy-to-read, compact pseudocode that balances natural language with concise symbolic notation, emphasizing clarity and high-level logic. Use mostly one-line statements combining condition and action, preferring short forms and minimal redundancy while preserving meaning. Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Represent assignments and updates with `←` or common symbolic operators `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`. Declare variables with type and initial value on one line whenever feasible. Express collections naturally (e.g. “vector of integers”, “string”, “length of”, “elements of”). Define and call functions as `define function name` / `in function name` or `call name`. Use minimal punctuation, no indentation, no blank lines, no extra headers or comments. Number each output line sequentially starting at 1. Output only the numbered pseudocode lines with no explanation or additions. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A