Generate clear, concise, high-level pseudocode from the problem description using mostly natural language enriched with standard symbolic notation and brief abbreviations. The pseudocode should be compact yet easy to follow, preferring one-liner statements and minimal keywords. Avoid verbose constructs, explanations, summaries, or comments—output only the numbered pseudocode steps.

Follow this exact format and conventions:

1. Declare or initialize variables naturally, e.g., “let n be integer”, “set res ← 0”  
2. Read or assign inputs clearly, e.g., “read n”, “read line as string”  
3. Use control flow compactly with minimal keywords: for, while, if, else if  
4. Use symbolic operators for comparison and arithmetic: =, ≠, <, >, ≤, ≥, ←, +, –, *, /, %, //  
5. Keep conditional and loop bodies concise, combining short statements on one line if reasonable  
6. Define or call functions succinctly: “in function func_name”, “call func(args)”  
7. Maintain logical flow and clarity while maximizing brevity and natural phrasing

Number all steps sequentially starting from 1 without separators or extra formatting. Output only the pseudocode steps, exactly as shown in this example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i in 0 to n-1  
8.   set min_i ← i  
9.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.   swap A[i], A[min_i]  
11. print all elements of A

Focus on producing succinct, readable pseudocode with balanced use of natural language and symbols, completing within a 5-second runtime limit.