Generate compact, clear, and high-level pseudocode from the given problem description, prioritizing readability and brevity. Use mostly natural language combined with symbolic notation and minimal keywords. Avoid verbose explanations, comments, or summaries—output only the pseudocode steps.

Follow this exact style and format:

1. Use simple variable declarations or initializations using natural phrases (e.g., “let x be integer”, “set sum ← 0”)  
2. Read inputs explicitly and simply (e.g., “read n”, “read array A size n”)  
3. Express control flow concisely with minimal keywords (for, while, if), preferably in one line where logical  
4. Use symbolic comparison (=, ≠, <, >, ≤, ≥) and assignment/arithmetic operators (←, +, –, *, /, %, //) freely but clearly  
5. Combine short conditional or loop statements in one line when possible (e.g., “if x < y then swap x, y”)  
6. Define or call functions succinctly (e.g., “define function func(args)”, “call func(x)”)  
7. Maintain logical flow with a clear numbering sequence of steps, no empty lines or separator lines  
8. Favor natural language for clarity but keep it condensed and compact; do not spell out trivial details  
9. End with outputs where needed (e.g., “print result”)

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Do not include explanations, notes, or separator lines. Use minimal words, symbolic notation, natural language, and compact flow to produce pseudocode that is easy to understand and quick to implement.