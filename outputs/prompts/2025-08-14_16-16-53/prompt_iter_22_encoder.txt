Generate concise, clear, and high-level pseudocode for the given problem description, prioritizing natural language while using symbolic notation and abbreviations to keep it compact and readable. Express all steps as mostly one-liners with minimal but explicit control flow keywords (e.g., for, while, if), using operators like ←, =, ≠, <, >, ≤, ≥, +, –, *, /, %, // for assignments, comparisons, and arithmetic.

Structure your output exactly as numbered pseudocode lines with no explanations, summaries, comments, or separators. Follow this order and style:

1. Declare or initialize all variables clearly (e.g., “let n be integer” or “set count ← 0”)  
2. Read input naturally (e.g., “read n” or “read array A of size n”)  
3. Use compact loop and conditional formats (e.g., “for i in 0 to n–1”, “while condition: do action”) and combine simple bodies on one line  
4. Represent functions briefly as “in function name” or “call func(args)”  
5. Write expressions naturally but concisely, favoring abbreviations and symbolic operators over verbose constructs  
6. Maintain logical clarity with minimal verbosity, avoiding unnecessary detail but ensuring understanding

Output only the numbered pseudocode lines without any extra text, formatting lines, or comments.

Example style your output should follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n–2  
7.   set min_i ← i  
8.   for j in i+1 to n–1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A