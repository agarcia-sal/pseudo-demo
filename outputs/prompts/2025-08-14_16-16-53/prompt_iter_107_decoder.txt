```python
Translate the provided pseudocode into a single, complete, minimal, and fully executable Python 3 program that exactly implements the described logic without any deviation or added assumptions. Follow these strict and optimized guidelines:

- Output only one Python code block, enclosed precisely as:
  ```python
  # complete, production-ready code here
  ```
- All input must be read using `input()` (without prompt strings) and output must be printed only via `print()`.
- Preserve original variable and function names from the pseudocode when meaningful; otherwise, use concise, idiomatic, and performant Python naming conventions.
- Implement all pseudocode steps exactly—including implicit behaviors and edge cases—without adding scaffolding, debugging aids, comments, blank lines, or explanatory text.
- Maximize runtime and memory efficiency by:
  - Removing any redundant computations, variables, or data structures.
  - Applying Python’s fastest constructs, such as comprehensions, generator expressions, `map`, `filter`, short-circuiting logic, tuple unpacking, and `divmod`.
  - Using only standard Python modules from the standard library where they yield clear performance or clarity benefits (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`), never external libraries.
- If the pseudocode defines a main routine or function, define `main()` accordingly and invoke it only as:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not output anything other than the required Python code block; suppress all comments, whitespace lines, or separators inside the block.
- The resulting code must be immediately runnable for competitive programming or production scenarios requiring optimal speed and minimal memory overhead.
- Constrain execution so the solution runs within 5 seconds on typical, large input sizes.
- Never alter the logical flow or outputs implied by the pseudocode—no optimizations should change output or side effects.
- Keep code as terse as possible while maintaining crystal-clear correctness, robustness, and idiomatic Python style.

Deliver a precise, idiomatic, and maximally efficient Python 3 translation of the pseudocode that meets all above criteria, ready for direct deployment in time-critical environments.
```