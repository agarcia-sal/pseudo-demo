Generate concise, clear, and high-level pseudocode that is easy to read and understand by combining natural language with precise symbolic notation, emphasizing compactness and clarity. Use mostly simple one-line statements that tightly integrate conditions and actions without sacrificing readability. Prefer natural expressions for data structures (e.g., “vector of integers”, “string”, “length of”, “elements of”), and declare variables with type and initial value on one line where possible. Use only these keywords when necessary: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Employ symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) and assignment (`←`) sparingly and precisely. Define functions as `in function name` or `define function name`. Avoid indentation and blank lines; place related statements on the same line separated by spaces. Output lines without numbering or additional formatting—just the pseudocode lines as shown in examples. Do not include explanations, comments, headers, or separators. Complete output within 5 seconds.

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers size n  
read n elements into A  
for i in 0 to n-2: let min_i ← i  
for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
swap A[i], A[min_i]  
print all elements of A