Generate concise, high-level pseudocode for the given problem description that balances readability with brevity. Use mostly natural language with clear symbolic operators and abbreviations to keep it compact and easy to follow. Prefer one-liners and short statements, combining simple control flow conditions and updates on the same line where it improves clarity without verbosity. Avoid explanations, comments, or summaries—output only the pseudocode.

Produce output strictly as numbered steps, following this structural style:

1. Declare or initialize variables naturally (e.g., “let n be integer”, “set res ← 0”)  
2. Read input or assign data using straightforward natural language  
3. Use minimal yet clear control flow keywords (`for`, `while`, `if`) with conditions and bodies in one line when reasonable  
4. Represent operators symbolically (e.g., `=`, `≠`, `<`, `>`, `≤`, `≥`, `←`, `+`, `-`, `*`, `/`, `%`, `//`)  
5. Express functions and calls briefly (e.g., “in function func”, “call func(args)”, use `return` inside function definitions)  
6. Maintain natural logical flow focusing on essential algorithmic steps without redundant details  
7. Conclude with output commands (e.g., `print result`) as final steps

Do not add separator lines, headings, or formatting beyond numbered statements. Avoid verbose or overly technical wording. Emphasize a natural, clean style that reads like clear instructions but remains precise and compact.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: if A[j] < A[min_i] then min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A