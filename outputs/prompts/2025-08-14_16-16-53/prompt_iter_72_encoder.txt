Generate clear, concise, and high-level pseudocode that is easy to read and understand, blending natural language with symbolic notation. Prefer mostly single-line statements combining condition and action, using minimal words but preserving clarity. Use straightforward, commonly recognized expressions and avoid verbosity or redundancy. Employ only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and use assignment `←` sparingly to highlight key changes. Declare variables with type and initial value on the same line when possible. Express collections naturally, e.g., “vector of integers”, “string”, “length of”, or “elements of”. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; place related statements on the same line separated by spaces or semicolons. Number output lines starting at 1 with no blank lines or extra formatting. Output ONLY the pseudocode lines. Complete within 5 seconds.

Example output style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A