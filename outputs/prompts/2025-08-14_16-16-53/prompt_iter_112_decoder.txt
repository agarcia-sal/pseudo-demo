```python
Translate the provided pseudocode into a single, complete, and fully runnable Python 3 program under these stringent conditions:

- Output exactly one Python code block formatted as:
  ```python
  # your entire, optimized, production-ready Python solution here
  ```
- Use solely `input()` and `print()` for input/output. No prompts, comments, debug prints, blank lines, or any extraneous output.
- Name variables and functions exactly as in pseudocode unless renaming improves clarity without altering semantics.
- Precisely implement all pseudocode logic, covering explicit and implicit cases, avoiding any code or abstraction not implied by the pseudocode.
- Deliver the code in a clean, idiomatic Python style, maximizing performance and minimizing memory footprint by:
  - Using built-in functions and efficient idioms: comprehensions, generator expressions, concurrent short-circuit evaluation, `divmod`, unpacking, `map`, `filter`, `any`, `all`.
  - Selecting optimal standard libraries (`collections`, `itertools`, `heapq`, `math`, `functools`, `re`, `os`, etc.) only if performance or clarity improves without adding unnecessary dependencies.
  - Avoiding redundant computations, variables, or data structures.
- If pseudocode defines a main routine or function container, implement a `main()` and invoke it inside:
  ```python
  if __name__ == "__main__":
      main()
  ```
- No comments, blank lines, or separators inside or outside the code block.
- Code must be concise yet robust, suitable for competitive programming or production use, reliably running within 5 seconds for typical input sizes.
- Strictly print only the Python code block, no additional text, disclaimers, or explanations.
- Do not interpret or modify the pseudocode beyond what is given. Faithfully translate all logic and control structures.

Focus on delivering the minimal, idiomatic, and fastest possible direct Python translation of the pseudocode, prepared for immediate use in performance-sensitive environments.
```