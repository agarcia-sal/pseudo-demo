Generate concise, high-level, easy-to-read pseudocode blending natural language with succinct symbolic notation. Prefer mostly one-line statements combining condition and action without losing meaning. Use clear expressions, avoid redundancy, and declare variables with type and initial value on the same line when possible. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `else`, `for`, `while`, `return`, `call`, `print`.  

Use these symbolic operators exactly and sparingly to enhance clarity:  
`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←`.  

Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”) and prefer idiomatic concise phrases (e.g., “for all elements in X”, “read n elements into A”). Functions are defined and called as `define function name` / `in function name` and `call name`. Keep related statements together in one line separated by spaces or semicolons; avoid indentation or blank lines. Use simple loops and conditionals combined into one line when clear. Number output lines sequentially starting at 1.

Output ONLY the pseudocode lines without comments, explanations, summaries, or headers. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A