Generate clear, easy-to-read, and compact pseudocode that uses mostly natural language enriched with concise symbolic notation. Write pseudocode at a high level with mostly one-line statements combining condition and action to keep it brief but understandable. Use intuitive abbreviations for common phrases (e.g., “set” for assignment, “read”, “print”, “for”, “while”, “if”, “else if”, “return”, “call”, “define function”, “in function”) and standard symbolic operators exactly as `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, using assignment symbols like `←` only when it significantly improves clarity. Declare variables by type and initial value in one line when possible. Express data structures naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; separate related statements by spaces or semicolons on the same line. Number output lines sequentially starting from 1 without blank lines or extra formatting. Output ONLY the pseudocode lines, no explanations, comments, or headers. Complete within 5 seconds.

Example style your output should follow:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers; set size of A = n  
5 read n elements into A  
6 for i in 0 to n-2: set min_i to i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then set min_i to j  
8 swap A[i], A[min_i]  
9 print all elements of A