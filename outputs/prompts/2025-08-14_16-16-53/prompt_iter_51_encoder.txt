Generate concise, high-level, and easy-to-read pseudocode from the given problem description using mostly natural language with minimal but precise symbolic notation and standard keywords only when essential: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`. Use symbolic operators exactly as needed (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) and assignment (`←`). Prefer short one-line statements combining condition and action without losing clarity. Declare variables with type and initial value on the same line wherever possible. Define functions beginning with `in function name` or `define function name`. Avoid indentation and blank lines; keep related steps together separated by spaces or semicolons. Use natural language phrases like “vector of integers”, “string”, “empty”, “length of”, “elements of” as necessary. Number all output lines sequentially starting from 1 (just numbers, no punctuation). Omit comments, explanations, or any text besides pseudocode lines.

Example output style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A