Generate clear, compact, and high-level pseudocode using mostly one-line statements that combine natural language with concise symbolic notation. Use straightforward expressions, minimizing redundancy while preserving clarity. Declare variables with type and initial value when possible, using phrases like “let var be integer = 0” or “let arr be vector of integers size n.” Use only these keywords exactly as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Use symbolic operators precisely: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%` and sparingly use assignment arrow `←` to emphasize key updates. Express collections naturally, e.g. “vector of strings,” “length of,” “elements of.” Define functions as `define function name` followed by `in function name`; call as `call name`. Avoid indentation; keep logically connected statements on the same line separated by spaces or semicolons. Number output lines starting at 1 without blank lines or extra formatting. Output ONLY the pseudocode lines. Complete output rapidly and do not include any explanations, comments, or headers.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A