Generate clear, concise, and readable pseudocode combining natural language and compact symbolic notation, emphasizing high-level clarity and brevity. Use mostly single-line statements merging conditions and actions without losing clarity. Prefer concise variable declarations with type and initial value in one line. Express collections naturally (e.g., "vector of integers size n", "string", "length of"). Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Employ symbolic operators like `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and use assignment `←` sparingly to highlight key steps. Functions are declared as `define function name` / `in function name` and called as `call name`. Avoid indentation and blank lines; separate related statements by spaces or semicolons. Number output lines starting at 1 with no gaps. Output only pseudocode lines—no comments, explanations, or summaries. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A