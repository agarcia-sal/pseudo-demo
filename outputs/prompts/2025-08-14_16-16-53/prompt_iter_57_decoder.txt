```python
Translate the given pseudocode into a fully executable, production-quality Python 3 program that meets these strict requirements:

- Output precisely one Python code block formatted exactly as:
  ```python
  # complete, efficient code here
  ```
- Use only standard input/output via `input()` and `print()`. No prompts, debug prints, comments, or surrounding text.
- Retain original variable and function names unless renaming clearly improves code readability or performance, applying idiomatic, concise, and Pythonic style.
- Fully implement all explicit and implicit logic from the pseudocode, covering edge cases exactly as described, without extraneous scaffolding or wrappers.
- Maximize runtime and memory efficiency by:
  - Eliminating redundant calculations, loops, and data structures.
  - Leveraging appropriate standard library modules and functions (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, `sys`).
  - Using advanced but clear Python idioms (comprehensions, generator expressions, tuple unpacking, short-circuit logic, built-ins) judiciously.
- If pseudocode implies a main function, define it and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Ensure all input parsing is safe, minimal, and suitable for large inputs (use `sys.stdin.readline` if beneficial).
- Avoid unnecessary imports or complex dependencies beyond Python's standard library.
- The final code must run within 5 seconds for typical competitive-programming inputs.
- Produce no comments, explanations, or formatting outside the single requested code block.
- Deliver clean, minimal, robust, and direct translations strictly aligned with the pseudocode logic to ensure maximum correctness and performance.

Focus exclusively on generating optimized Python 3 code precisely reflecting the pseudocodeâ€™s computation and input/output behavior.
```