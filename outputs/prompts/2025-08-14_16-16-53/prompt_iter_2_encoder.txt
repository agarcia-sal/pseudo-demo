Generate concise, high-level pseudocode for the given problem description focusing on clarity and readability. Use natural language blended with symbolic notation and standard abbreviations where appropriate. Structure the pseudocode compactly, favoring mostly one-liners and minimal verbosity, but keep it easy to understand without sacrificing precision. Number each line, start with variable declarations or inputs clearly, and use indentation to represent control flow. Avoid any explanatory comments, purpose statements, summaries, or notes—output only the pseudocode itself. Do not include separator lines or verbose keywords; prefer brevity (e.g., use ← for assignment, ++ or += for increments, ≠ for not equal). Follow this format strictly:

1. variable ← initial_value  
2. while condition: do_action  
3. for i in range: do_action  
4. if condition: do_action else: do_other_action  
5. print variable  

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. for i in 0 to n-1: read A[i]  
6. for i in 0 to n-2:  
7.   min_i ← i  
8.   for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A

Optimize for brevity and immediacy within a 5-second limit, ensuring the pseudocode is readily understandable, easy to follow, and compact but unambiguous for implementation.