Generate concise, easy-to-read, and high-level pseudocode for the given problem description. Use mostly natural language combined with symbolic notation and standard abbreviations to ensure compactness and clarity. Prefer one-line statements and succinct expressions; avoid verbosity, explanations, comments, or summaries. The output must contain only pseudocode steps, strictly following this format:

1. Declare and initialize variables naturally (e.g., “let x be integer”, “x ← 0”)  
2. Use simple input reading statements (e.g., “read n”, “read list A”)  
3. Express control flow with minimal keywords and compact syntax (e.g., “for i in 0 to n-1: …”, “while x < n: …”, “if condition then statement”)  
4. Employ symbolic comparisons and operators (=, ≠, <, >, ≤, ≥, ←, +, –, *, /, %, //) consistently  
5. Combine short loop or conditional bodies in one line where it enhances brevity without sacrificing clarity  
6. Represent functions or procedures briefly (e.g., “in function name”, “call func(args)”)  
7. Keep logical flow straightforward, using natural language phrases only as needed to preserve clarity  

Do not add blank lines, separator lines, explanations, or formatting outside numbered pseudocode lines.

Example style your output should follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2: set min_i ← i  
7.   for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8.   swap A[i], A[min_i]  
9. print all elements of A