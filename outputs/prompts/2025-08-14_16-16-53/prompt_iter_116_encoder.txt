Generate clear, easy-to-read, and compact pseudocode that blends natural language with concise symbolic notation for high-level clarity. Prefer mostly one-line statements combining condition and action using simple expressions and common symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and occasionally assignment `←` to highlight core operations). Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Declare variables with type and initial value together when possible. Express collections naturally, e.g., “vector of integers”, “string”, “length of”, “elements of”. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation and blank lines; keep related statements on one line separated by spaces or semicolons. Number output lines sequentially starting from 1. Output ONLY the numbered pseudocode lines in the format:  
`1 in function main`  
`2 let n be integer`  
`3 read n`  
`4 let A be vector of integers size n`  
`5 read n elements into A`  
`6 for i in 0 to n-2: let min_i ← i`  
`7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j`  
`8 swap A[i], A[min_i]`  
`9 print all elements of A`  
Complete output quickly within 5 seconds and do not include any explanations, comments, or separators.