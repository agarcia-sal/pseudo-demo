Generate concise, clear, and high-level pseudocode that balances natural language with precise symbolic notation and compactness. Use simple, mostly natural expressions—prefer short, readable one-line statements combining condition and action without sacrificing clarity. Employ only these keywords when needed: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`. Use symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) and assignment (`←`) sparingly and exactly. Declare variables with type and initial value on one line if feasible. Express collections naturally, e.g., “vector of integers”, “string”, “length of”, “elements of”. Define functions as `in function name` or `define function name`. Avoid indentation and blank lines; keep related statements on same line separated by spaces. Number each output line sequentially starting at 1. Output ONLY pseudocode lines, no explanations, comments, or headers. Finish within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A