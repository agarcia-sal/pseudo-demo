```plaintext
Given pseudocode, produce a minimal, fully runnable Python 3 program that exactly implements its logic and semantics. Follow these strict instructions:

- Output exclusively one Python code block using triple backticks and python tag:
  ```python
  # your entire, optimized solution here
  ```
- The code must use only standard input/output with `input()` and `print()`. No prompts, debug messages, comments, or extra text allowed.
- Preserve original pseudocode variable and function names meaningfully where possible, but apply Pythonic conventions for clarity and performance.
- Implement all stated and implied control flow and edge conditions precisely, without adding external scaffolding, verbosity, or test harnesses.
- Prioritize runtime and memory efficiency by:
  * Eliminating redundant computations and unnecessary loops.
  * Leveraging Pythonâ€™s optimized built-in functions, data structures, and standard libraries (e.g., `collections`, `heapq`, `itertools`, `re`, `functools`, `math`).
  * Using advanced Python idioms incl. comprehensions, generator expressions, tuple unpacking, short-circuit logic, and builtin functions (`all`, `any`, `sum`, `map`, `filter`) where it enhances clarity and speed.
- If pseudocode implies a main entry point, define a main() and invoke it via:
  ```python
  if __name__ == "__main__":
      main()
  ```
- The submitted program must be production-ready: concise, robust, and precisely aligned with the pseudocode with no extraneous code or overhead.
- Assume all inputs fit within the efficiency/time constraints of 5 seconds runtime under reasonable input sizes.
- Do not include explanatory comments, multi-line docstrings, usage instructions, or blank lines outside the single code block.
- You may use any Python standard library modules freely as needed to optimize and succinctly implement logic.

Focus solely on delivering the cleanest, fastest Python translation of the provided pseudocode with guaranteed correctness and no fluff.
```