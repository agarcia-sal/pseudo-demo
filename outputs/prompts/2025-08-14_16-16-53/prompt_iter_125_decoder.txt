```python
Translate the given pseudocode into a single, self-contained, and fully executable Python 3 program that precisely implements the logic with no deviation. Adhere strictly to the following criteria:

- Provide only one Python code block, using exactly:
  ```python
  # complete, optimized, production-ready solution
  ```
- Use only `input()` and `print()` for standard input/output without prompts, comments, or extraneous output.
- Preserve variable and function names from the pseudocode when clear and meaningful; refactor only to improve clarity, conciseness, and idiomatic Python style.
- Implement the pseudocode logic verbatim, including all explicit and implicit behaviors, without adding or omitting any features or extra structures beyond those implied.
- Maximize performance and minimal memory footprint by:
  - Using built-in Python functions and language constructs (generators, comprehensions, unpacking, `divmod`, `map`, `filter`, `any`, `all`, short-circuiting) wherever they yield speed or clarity.
  - Incorporating only standard libraries essential for correctness or significant optimization (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`) and only if they directly enhance the solution.
  - Avoiding redundant calculations, data copies, or temporary variables.
  - Employing idiomatic Python techniques favoring speed and readability without sacrificing correctness.
- If the pseudocode includes a main routine or function, define `main()` accordingly and invoke it via:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Omit all comments, blank lines, and non-code text inside and outside the code block.
- The final code must be concise, robust, and suitable for immediate use in competitive programming or production environments where runtime and memory usage are critical.
- The solution must reliably run within 5 seconds on typical input sizes.
- Print nothing other than the final Python code block; no explanations, debug information, or metadata.
- Make no assumptions or alterations beyond the exact pseudocode logic.

Your goal: deliver the most performant, cleanest, and direct Python 3 translation of any pseudocode input, poised for optimal test-time performance and maintainability.
```