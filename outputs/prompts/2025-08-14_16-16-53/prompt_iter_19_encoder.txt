Generate concise, clear, and high-level pseudocode from the given problem description focused on readability and compactness. Use mostly natural language with symbolic operators and abbreviations to keep each step succinct, favoring one-liners and minimal but precise control flow keywords (for, while, if). Express variable declarations, input/output, assignments, loops, and conditions compactly, combining short statements on single lines where clarity allows.

Adhere strictly to the following output format with numbered lines:

1. variable declarations or initializations using natural language and symbols (e.g., “let x ← 0”)  
2. input reading or assignment in simple phrases (e.g., “read integer n”)  
3. compact loops and conditionals with symbolic comparisons (=, ≠, <, >, ≤, ≥) and concise arithmetic symbols (←, +, –, *, /, %, //)  
4. combine short conditional or loop bodies in one line (e.g., “if cond then action; else other_action”)  
5. define or call functions briefly (e.g., “in function name”, “call func(args)”)  
6. maintain a logical flow that balances brevity with clarity, avoiding verbose or redundant wording  
7. output only the numbered pseudocode lines; do not include explanations, comments, summaries, or formatting lines  

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Optimize for conciseness, clarity, and direct representation of algorithm logic. Do not output separators or extraneous text. Strictly follow the 5-second runtime constraint.