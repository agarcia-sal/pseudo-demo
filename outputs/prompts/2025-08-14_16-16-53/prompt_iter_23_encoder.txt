Generate clear, concise pseudocode directly from the problem description that balances natural language and symbolic notation for readability and brevity. Prioritize compact, high-level steps mostly as one-liners, using minimal keywords and terse expressions. Avoid verbose or detailed explanations—output only the pseudocode lines.

Follow this exact output style and format:

1. Start with function or main entry point if applicable (e.g., “in function main”)  
2. Declare or initialize variables succinctly (e.g., “let n be integer”, “x ← 0”)  
3. Read inputs simply (e.g., “read n”, “read n elements into A”)  
4. Use concise, minimal control flow keywords—prefer for, while, if—express conditions with symbols (=, ≠, <, >, ≤, ≥)  
5. Merge short loop or conditional bodies on the same line when possible (e.g., “for i in 0 to n-1: A[i] ← 0”)  
6. Express function definitions or calls briefly (e.g., “define function name(args)”, “call func(args)”)  
7. Use common arithmetic and assignment symbols (←, +, –, *, /, %, //) and keep lines short and straightforward  
8. Preserve logical order for clarity, minimizing unnecessary detail but retaining precision and full algorithm logic  

Do not include explanations, comments, headings, formatting lines, or summaries—only the numbered pseudocode steps as described.

Example style output:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to n-2  
8.   set min_i ← i  
9.   for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A