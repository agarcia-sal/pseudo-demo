```python
Translate the provided pseudocode into a single, minimal, and fully functional Python 3 program with these strict guidelines:

- Output exactly one Python code block, strictly enclosed as:
  ```python
  # complete, optimized solution here
  ```
- Use only bare `input()` and `print()` for all I/O, without prompts, comments, blank lines, debugging statements, or any extra output.
- Retain meaningful variable and function names from the pseudocode where applicable, but rewrite the code following idiomatic, clean, and high-performance Python practices.
- Faithfully implement all pseudocode logic—including implicit details and edge cases—without adding any unrelated scaffolding, comments, or assumptions.
- Maximize runtime and memory efficiency by:
  - Avoiding redundant computations and temporary data structures.
  - Using Python’s fastest constructs: comprehensions, generator expressions, `divmod`, built-in functions (`map`, `filter`, `all`, `any`), unpacking, short-circuit logic.
  - Employing suitable standard libraries (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, `sys`, etc.) only if they clearly improve clarity or speed.
- If pseudocode defines a main routine or function, implement `main()` accordingly and execute it within:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Ensure the final code is concise, robust, production-grade, and immediately runnable in a performance-critical environment (e.g., competitive programming) without modification.
- The entire solution must execute within 5 seconds on typical inputs.
- Do not output anything other than the single Python code block—no surrounding text, explanations, or markdown other than the required ```python ... ``` enclosure.
- Do not modify or extend the pseudocode logic beyond what is explicitly or implicitly stated.

The goal is a razor-sharp, idiomatic, and exact Python translation of the pseudocode, optimized for clarity, speed, memory, and production use.