```python
Translate the pseudocode into a minimal, executable, and idiomatic Python 3 program following these precise guidelines:

- Output exactly one Python code block wrapped with:
  ```python
  # fully optimized, production-quality solution here
  ```
- Use only built-in standard input/output (`input()`, `print()`) without any input prompts, comments, debugging code, or extraneous output.
- Preserve all variable and function names from the pseudocode whenever meaningful, applying idiomatic, concise, and performant Python conventions.
- Faithfully implement all pseudocode logic without introducing extra scaffolding, verbose structures, or assumptions beyond what the pseudocode states.
- Prioritize maximal runtime and memory efficiency by:
  - Avoiding redundant computations, variables, and data structures.
  - Using Python’s fastest idioms: comprehensions, generator expressions, `divmod`, built-in functions (`map`, `filter`, `any`, `all`), tuple unpacking, short-circuiting, and lazy evaluation.
  - Leveraging relevant standard libraries only if they clearly optimize or clarify the logic (`collections`, `heapq`, `math`, `itertools`, `functools`, `re`, `os`, etc.).
- For pseudocode containing a main routine or function definitions, implement `main()` and invoke it with:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not include blank lines, comments, separators, or any output beyond the single specified code block.
- Ensure the solution is ready for direct use in competitive programming or production scenarios with strict time (≤5 seconds) and memory constraints.
- Yield code that is concise, robust, maintainable, and exactly matches the intended behavior of the pseudocode, including all edge and implicit cases.
- Avoid assumptions, transformations, or additions not explicitly or implicitly supported by the pseudocode.
- Do not produce multiple code variants, partial snippets, or explanations; output only the final optimized Python solution block.

Focus exclusively on generating the absolutely best possible Python translation of the given pseudocode for immediate use under strict performance and correctness demands.
```