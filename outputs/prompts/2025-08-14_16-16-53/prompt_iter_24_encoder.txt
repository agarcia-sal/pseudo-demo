Generate concise, clear, and high-level pseudocode strictly following these rules:

- Use mostly natural language combined with symbolic notation and abbreviations to keep it compact and readable.  
- Prefer mostly one-liner statements that express logic succinctly; merge simple conditionals/loops bodies on one line when sensible.  
- Assign and declare variables with simple natural phrases ("let x be integer", "set x ← 0").  
- Use symbolic operators (=, ≠, <, >, ≤, ≥) and assignment/arithmetic symbols (←, +, –, *, /, %, //) liberally for brevity.  
- Express input/output operations in direct natural terms (e.g., "read n", "print result") without extra commands.  
- Represent function/procedure boundaries simply ("in function name") and calls briefly ("call func(args)").  
- Organize pseudocode as numbered steps in this sequence:
  1. variable declarations/initializations  
  2. input reading or assignment  
  3. control flow (for, while, if) using minimal keywords  
  4. computations and updates using symbolic notation  
  5. output  
- Avoid comments, explanations, summaries, or formatting lines. Output only the numbered pseudocode steps and nothing else.  
- Maintain a logical, easy-to-follow flow emphasizing clarity without verbosity.  
- Complete within a 5-second runtime constraint; optimize for brevity, directness, and natural readability.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i in 0 to n-2  
8.   set min_i ← i  
9.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
10.   swap A[i], A[min_i]  
11. print all elements of A