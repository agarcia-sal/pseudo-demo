```python
Translate the provided pseudocode into a concise, idiomatic, and fully executable Python 3 script that adheres exactly to the logic and flow specified, satisfying these requirements:

- Respond ONLY with one python code block formatted exactly as:
  ```python
  # your complete, optimized python code here
  ```
- Use `input()` for all inputs and `print()` for all outputs; do NOT include any prompts, debugging info, comments, or extraneous text.
- Maintain meaningful variable and function names from the pseudocode unless Python conventions or optimizations dictate clearer alternatives.
- Implement all explicit and implicit details shown in the pseudocode without adding superfluous scaffolding or wrappers.
- Optimize for maximal runtime and memory efficiency by:
  - Avoiding repeated calculations and unnecessary loops.
  - Leveraging Python's efficient built-in functions and standard libraries freely (including but not limited to `collections`, `itertools`, `functools`, `heapq`, `math`, `re`, `operator`).
  - Employing advanced idioms such as generator expressions, unpacking, short-circuiting, and comprehensions consistently and judiciously.
- If the pseudocode implies a `main` entry point, define `main()` and call it inside
  ```python
  if __name__ == "__main__":
      main()
  ```
  keeping execution semantics clean and direct.
- Code must be robust and production-ready: minimal (no dead code), performant, and perfectly aligned with the given pseudocode logic.
- Complete execution and output within 5 seconds for typical problem constraints.
- DO NOT include comments, separator lines, explanations, or formatting outside the single required code block.
- You may freely import and use any Python standard library modules but do NOT install or assume external dependencies.

Focus solely on top-tier Python translation quality: clean, lean, direct, and optimized precise implementations strictly according to the pseudocode instructions.
```