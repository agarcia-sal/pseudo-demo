```python
Translate the given pseudocode into a single, self-contained, and ready-to-run Python 3 program strict to these rules:

- Provide output strictly as one Python code block formatted exactly like this:
  ```python
  # full complete solution here
  ```
- Read all input exclusively via `input()` calls without prompts or messages.
- Produce output solely via `print()` with no additional text or comments.
- Preserve the exact variable and function names from the pseudocode when meaningful; otherwise, use concise, idiomatic, and performance-optimized names.
- Implement the logic exactly as described in the pseudocode—no added scaffolding, no omitted or inferred behavior, and no side effects.
- Optimize for speed and memory usage by:
  - Avoiding unnecessary variables, loops, and data structures.
  - Using Python’s fastest built-ins and idioms: comprehensions, generator expressions, `map`, `filter`, `any`, `all`, `divmod`, tuple unpacking, short-circuit logic.
  - Employing standard libraries only if they provide measurable runtime or clarity gain (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.).
- If the pseudocode defines a main function or equivalent, implement `main()` precisely and invoke it via:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Eliminate all comments, blank lines, and extraneous whitespace inside the code block.
- Target a maximum runtime under 5 seconds on typical inputs.
- Produce idiomatic, minimal, deterministic, production-quality code suitable for competitive programming or mission-critical use.
- Output nothing but the well-formed Python code block.

Focus entirely on an exact, efficient, no-frills Python translation of the pseudocode that runs correctly and swiftly without explanation or decoration.
```