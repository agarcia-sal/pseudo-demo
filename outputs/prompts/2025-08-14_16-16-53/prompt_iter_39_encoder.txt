Generate clear, concise, and easy-to-read pseudocode directly from the given problem description. Use mostly natural language with minimal, precise symbolic notation and abbreviations for brevity while preserving clarity and logical flow. Prefer compact one-line statements using these keywords and constructs only when meaningful: `let`, `read`, `if`, `else if`, `for`, `while`, `in`, `call`, `return`. Use symbolic operators strictly (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) and assignment symbol (`←`). Write loops and conditionals succinctly, combining short bodies on the same line when clear. Define functions with `in function name` or `define function name`. Avoid comments, explanations, or headings. Output only numbered pseudocode steps, starting from 1, ordered logically and compactly. Use consistent spacing without indentation but align related statements on one line. Do not add blank lines or separators. Complete within 5 seconds.

Follow this numbered format exactly:

1. in function main (or define function name)  
2. variable declarations or initializations, e.g. `let n be integer`, `res ← 0`  
3. input reading or assignment, e.g. `read n`, `read string s`  
4. control flow compactly expressed, e.g.  
 `for i in 0 to n-1: if A[i] > max then max ← A[i]`  
 `while x < n: x ← x + 1`  
5. function calls, e.g. `call func(args)` or `return value`  
6. final output statements, e.g. `print res`  

Use natural, concise terms like “vector of integers”, “string”, “array”, “empty” as needed. Prefer absolute minimal keywords for clarity and brevity. Ensure the pseudocode reads smoothly as a high-level algorithm outline.

Example style to emulate:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers  
5 set size of A ← n  
6 read n elements into A  
7 for i in 0 to n-2  
8   set min_i ← i  
9   for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
10   swap A[i], A[min_i]  
11 print all elements of A