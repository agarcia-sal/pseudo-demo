```python
Translate the given pseudocode into a complete, production-quality Python 3 program that strictly adheres to these requirements:

- Output exactly one Python code block enclosed as:
  ```python
  # your fully working, optimized code here
  ```
- Use only standard input/output via bare `input()` and `print()` calls; do NOT include prompts, debug prints, comments, or extra text.
- Retain original variable and function names when meaningful, but refactor for clarity, conciseness, and idiomatic Python style, prioritizing readability and performance.
- Implement the pseudocode logic precisely, including all implicitly suggested edge cases, without adding extra infrastructure or scaffolding beyond what is necessary.
- Optimize runtime and memory by:
  - Eliminating any redundant calculations or unnecessary loops.
  - Leveraging Python’s standard library powerful, built-in modules and functions wherever they simplify or accelerate code (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os.path`, `operator`, `sys`).
  - Applying advanced Python idioms judiciously: comprehensions, generator expressions, multiple assignment, built-in functions (like `any()`, `all()`, `sum()`, `map()`, `filter()`), short-circuit logic, and slicing techniques.
- If the pseudocode implies a main routine, implement it as a `main()` function and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Ensure the solution completes within 5 seconds under typical input sizes.
- No comments, no extra formatting or delimiters beyond the single Python code block.
- The submitted code must be immediately runnable and aligned 1:1 with the pseudocode’s intent while embodying best Python practices for clarity and efficiency.

Focus exclusively on producing a minimal, clean, and tightly optimized Python translation of the pseudocode, suitable for production use and competitive programming.