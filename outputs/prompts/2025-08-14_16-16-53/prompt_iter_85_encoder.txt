Generate easy-to-read, high-level, and compact pseudocode that balances natural language with concise symbolic notation, emphasizing clarity without verbosity. Favor mostly one-line statements combining conditions and actions, using common control and data structure keywords:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`.  
Express variable declarations with type and initial value on one line when possible. Use common symbolic operators exactly as `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and use assignment `←` sparingly only to highlight key assignments. Describe collections naturally, e.g. “vector of integers”, “string”, “length of”, “elements of”; prefer direct phrases like “for i in 0 to n-1” rather than verbose loops. Write function definitions and calls as `define function name` / `in function name` or `call name`. Avoid indentation; put related statements on the same line separated by spaces or semicolons. Number output lines sequentially starting at 1 with no blank lines or extraneous output. Output ONLY the pseudocode lines without comments, notes, or explanations. Complete within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A