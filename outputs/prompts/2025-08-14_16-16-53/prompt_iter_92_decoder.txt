```python
Translate the provided pseudocode into a single, minimal, fully executable Python 3 program adhering strictly to these refined conditions:

- Output exactly one Python code block enclosed as:
  ```python
  # complete, production-quality code here
  ```
- Use only standard input/output via `input()` and `print()` with no prompts, comments, debugging, or extraneous output.
- Preserve variable and function names from pseudocode when meaningful; otherwise, use clear, idiomatic, and concise Python naming.
- Implement the pseudocode logic exactly and exhaustively without additions, assumptions, or scaffolding beyond what is specified.
- Optimize for runtime and memory by:
  - Removing redundant or repeated computations using efficient data structures and algorithms.
  - Leveraging Python’s fastest idioms and features (e.g. comprehensions, generator expressions, built-in functions like `map`, `filter`, `any`, `all`, unpacking, `divmod`, short-circuit logic).
  - Utilizing standard libraries only if they clearly improve efficiency or simplify logic (`math`, `collections`, `itertools`, `functools`, `heapq`, `re`, `os`, etc.), never at the cost of clarity or speed.
- If the pseudocode defines a main function or equivalent entry point, implement `main()` and call it inside:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Write code without comments, blank lines, separators, or explanations inside or outside the code block.
- The final solution must be concise, robust, idiomatic, and production-ready—ready for direct deployment or competitive programming use.
- Guarantee execution within 5 seconds for typical input sizes.
- No output beyond the single Python code block.
- Do not redefine or reinterpret logic beyond the explicit and implicit instructions in the pseudocode.

Focus exclusively on delivering the most precise, idiomatic, and high-performance Python translation of the pseudocode, suitable for critical production or competitive environments.
```