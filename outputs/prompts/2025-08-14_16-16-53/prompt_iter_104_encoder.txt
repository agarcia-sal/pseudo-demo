Generate easy-to-read, high-level, and compact pseudocode using mostly one-line statements that blend natural language with concise symbolic notation. Use clear and simple expressions while avoiding redundancy. Prefer natural language phrases for data structures and operations (like “vector of integers”, “length of”, “elements of”), but keep statements terse and informative. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`.  

Apply these symbolic operators exactly as follows:  
`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, with assignment `←` used sparingly only to emphasize key assignments or initialization.  

Declare variables with type and initial value together whenever possible. Use expressions like “split by space”, “substring of”, “append to”, “join elements of” naturally. Define and call functions as `define function name` / `in function name`, and `call name`.  

Omit indentation; keep related instructions on the same or consecutive lines separated by spaces or semicolons. Do not use blank lines or extra formatting like separator lines. Number output lines sequentially starting at 1, listing only the pseudocode lines with no explanations, notes, or comments.  

Output must complete within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A