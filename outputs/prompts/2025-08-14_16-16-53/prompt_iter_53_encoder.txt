Generate concise, clear, and high-level pseudocode from the given problem description that is easy to read and understand. Use mostly natural language mixed with precise symbolic notation and minimal but standard pseudocode keywords only when necessary: `let`, `read`, `if`, `else if`, `for`, `while`, `return`, `define function`, `in function`, `call`. Use symbolic operators and assignment (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, `←`) accurately. Prefer short one-line statements combining conditions and actions for compactness without losing clarity. Declare variables with type and initial value in one line when possible. Use terms like “vector of integers”, “string”, “empty”, “length of”, “elements of”, “substring”, and “split by spaces” naturally for abstraction. Define functions starting with `define function name` or `in function name`. Use lowercase keywords and omit indentation and blank lines; separate related operations by spaces only. Number all output lines sequentially from 1 onwards. Do not produce comments, explanations, summaries, or notes. Output pseudocode only. Complete within 5 seconds.

Example format to follow:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A