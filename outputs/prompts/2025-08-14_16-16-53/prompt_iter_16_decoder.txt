```plaintext
You will be provided with pseudocode describing a complete algorithm or program logic. Translate it into a fully functional, efficient, and minimal Python 3 script that satisfies the following requirements:

- Output exactly one code block fenced with triple backticks and the language tag python:
  ```python
  # your full implementation here
  ```
  
- Use only standard input/output through input() and print() with **no prompts, debugging, comments, or extra text**.

- Respect and preserve the pseudocode’s variable and function names where they make sense, but refine naming and structure for idiomatic, concise, and high-performance Python.

- Translate all pseudocode control flow, data structures, and computations exactly, covering all explicit and implicit requirements and edge cases, without adding unnecessary scaffolding or wrappers that aren’t implied.

- Optimize the resulting code aggressively for both speed and memory:
  - Eliminate redundant computations, avoid superfluous loops.
  - Leverage Python built-in functions, standard libraries (including but not limited to collections, itertools, math, heapq, re, functools), and Python idioms (comprehensions, generator expressions, unpacking, short-circuiting) intelligently.
  - Prefer direct, clear, and fast constructs for algorithmic steps.

- If pseudocode indicates a main entry point, implement and invoke a main() function inside:
  ```python
  if __name__ == "__main__":
      main()
  ```
  to ensure proper script execution.

- Your code must complete within 5 seconds on typical input sizes.

- Do NOT output anything outside the single python code block: no explanations, comments, blank lines, or extra formatting.

- The final output should be clean, professional, minimal, and production-ready Python 3 code perfectly aligned with the pseudocode logic and constraints.

Focus on transforming the pseudocode into the most performant, readable, and idiomatic Python 3 script possible under these rules.
```