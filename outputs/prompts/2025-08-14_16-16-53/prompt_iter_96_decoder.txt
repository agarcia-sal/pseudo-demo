```python
Translate the given pseudocode into a fully functional, minimal, and production-quality Python 3 program strictly following these rules:

- Output exactly one Python code block formatted as:
  ```python
  # complete, optimized solution here
  ```
- Use only `input()` and `print()` for I/O; never include prompt strings or extraneous output.
- Completely and precisely implement the pseudocode’s logic, covering all explicit and implicit cases; do not add extra wrappers, scaffolding, or assumptions beyond the pseudocode.
- Preserve meaningful variable and function names from the pseudocode; rewrite names only for clarity and idiomatic Python style, never to alter logic.
- Write idiomatic, concise, and performant Python:
  - Favor built-in functions, comprehensions, generator expressions, `map`, `filter`, `any`, `all`, `divmod`, unpacking, and short-circuit evaluation.
  - Utilize only standard libraries that demonstrably improve runtime, memory, or clarity, chosen judiciously from (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.).
  - Eliminate unnecessary variables, computations, or data structures while preserving readability and correctness.
  - Prioritize worst-case time and memory efficiency to ensure solutions run well within 5 seconds on typical competitive programming input sizes.
- If the pseudocode defines a main routine or function, implement `main()` accordingly and invoke it with:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not include comments, blank lines, separators, debug prints, or any explanation inside or outside the code block.
- The final code must be directly usable in a performance-critical environment or competition setting without modification.
- Do not assume or add any features not in the pseudocode.

Your response must contain only the Python code block—no additional text or formatting. Focus exclusively on creating the most exact, idiomatic, and optimized Python translation of the pseudocode provided.