```python
Translate the given pseudocode into a single, complete, runnable Python 3 program strictly following these rules to maximize correctness, performance, and idiomatic style:

- Output exactly one Python code block formatted as:
  ```python
  # complete solution code here
  ```
- Use only standard input/output functions: `input()` for all input, `print()` for all output, with no prompt strings, comments, debugging, blank lines, or explanatory text inside or outside the code block.
- Retain variable and function names from pseudocode verbatim when they convey clear meaning; otherwise, use concise, idiomatic Python names without sacrificing clarity.
- Translate the pseudocode logic precisely, fully handling all implicit and explicit cases, without adding extra abstractions, scaffolding, or I/O formatting not present in the pseudocode.
- Prioritize runtime and memory efficiency using:
  - Built-in functions and operators (e.g. `map`, `filter`, `any`, `all`, comprehensions, generator expressions, `divmod`).
  - Python standard libraries only if they directly improve clarity or performance (`collections`, `heapq`, `itertools`, `functools`, `math`, `re`, `os`, etc.).
  - Avoid redundant computations, intermediate data structures, or unnecessary loops.
- When pseudocode defines functions (including `main`), implement them exactly and call `main()` under:
  ```python
  if __name__=="__main__":
      main()
  ```
- Eliminate all comments, explanatory spacing, redundant parentheses, and use concise, Pythonic idiomsâ€”one-liners where safe and readable.
- The final solution must be immediately runnable for competitive programming or production use, suitable for large inputs, and complete within 5 seconds on typical inputs.
- Do not print or output anything other than the requested code block.
- Make no assumptions beyond the given pseudocode and do not alter problem logic or expected behavior in any way.

Deliver only the optimized, idiomatic Python code translation of the pseudocode ready for direct use.
```