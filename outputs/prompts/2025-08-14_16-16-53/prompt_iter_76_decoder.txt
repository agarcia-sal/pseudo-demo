```python
Translate the provided pseudocode into a single, minimal, and fully runnable Python 3 script that directly implements the logic with no modification beyond strict interpretation. Adhere to these rigorous rules to maximize clarity, correctness, and efficiency:

- Deliver exactly one Python code block as follows:
  ```python
  # complete, production-quality code here
  ```
  with no trailing or leading text outside it.

- Use only `input()` and `print()` with no prompts, comments, blank lines, or debug output.

- Retain the intent, structure, variable names, and function names from the pseudocode where meaningful, but replace with idiomatic, concise, and fast Python constructs (e.g., comprehensions, built-ins, unpacking, `divmod`, short-circuit evaluation).

- Implement all logic precisely as pseudocode describes, including edge cases, without adding extra code layers or stubs beyond those explicit or implicit.

- Optimize for runtime and memory efficiency:
  - Avoid redundant computations or data structures.
  - Prefer Python built-ins and standard library modules (`math`, `itertools`, `collections`, `functools`, `heapq`, `os`, `re`, etc.) only when these yield clearer or faster code directly relevant to the pseudocode.
  - Use space- and time-efficient idioms, minimizing overhead and allocations.

- If a `main()` function is specified or implied, define and call it inside the canonical entry point:
  ```python
  if __name__ == "__main__":
      main()
  ```
  Otherwise, output top-level executable code exactly as intended.

- Do not add or remove input/output lines beyond pseudocode instructions; do not assume input formats beyond what pseudocode states.

- Output must be production-ready, concise, readable, and suitable for competitive programming or latency-sensitive applications running within a 5-second limit on typical input sizes.

Focus singularly on direct, idiomatic, and optimal Python translation of the pseudocode logic, suitable for immediate deployment, with zero extraneous output or explanation.
```