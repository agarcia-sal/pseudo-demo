Generate pseudocode that is easy to read, concise, and high-level, blending natural language with standard symbolic operators. Use mostly one-line statements combining condition and action where clarity permits. Use simple forms of expressions, avoid redundancy and verbose syntax. Prefer natural phrases like “let x be integer = 0”, “read n”, “for i in 0 to n-1”, “if condition then action”. Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Employ symbolic operators exactly as `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, with `←` sparingly to highlight key assignments or updates. Declare variables with type and initial value on the same line where possible. Represent collections naturally: “vector of integers”, “string”, “length of”, “elements of”. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; keep related statements on the same line separated by spaces or semicolons. Number output lines sequentially from 1 without blank lines. Omit all explanations, comments, or notes—output only pseudocode lines. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A