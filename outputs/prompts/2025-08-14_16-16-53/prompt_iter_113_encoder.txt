Generate concise, high-level pseudocode that balances natural language clarity with compact symbolic expressions. Use mostly one-line statements combining conditions and actions without losing readability. Prefer common control structures and keywords only as needed from: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`.  
Declare variables with type and initial value on the same line where possible. Express data collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`. Use assignment `←` sparingly and deliberately to highlight key steps. Define and call functions using `define function name` / `in function name` or `call name`. Avoid indentation; keep related instructions on the same line separated by spaces or semicolons. Number each output line sequentially from 1 without blank lines or extra output. Output only pseudocode, no explanations or comments. Complete output efficiently within 5 seconds.

Example style:  
1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A