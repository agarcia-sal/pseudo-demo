```plaintext
Translate the given pseudocode into a complete, efficient, and idiomatic Python 3 program strictly obeying these rules:

- Output only one Python code block exactly as:
  ```python
  # your full executable code here
  ```
- Use only `input()` for reading inputs and `print()` for output; do not add prompts, debugging, comments, or any extra text.
- Accurately implement all pseudocode instructions and logic, including all edge cases and implicit conditions, with no superfluous scaffolding or wrappers.
- Retain pseudocode’s variable and function names where meaningful, but improve naming and code clarity using best Python practices without verbosity.
- Maximize runtime and memory efficiency by:
  - Avoiding redundant calculations and loops.
  - Leveraging Python’s built-in functions, standard modules (like `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, etc.) and language idioms (comprehensions, generator expressions, unpacking, short-circuiting).
- If the pseudocode implies a main function, define `main()` and include the idiomatic guard:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Your solution must be production-ready: concise, robust, optimized, and directly aligned with the pseudocode without adding explanatory comments or formatting outside the single code block.
- Do not separate code sections with blank lines or any separators.
- Ensure your code completes within 5 seconds on typical inputs.
- Do not import any third-party (non-standard) libraries.

Deliver only the single Python code block as specified, strictly adhering to all above instructions.
```