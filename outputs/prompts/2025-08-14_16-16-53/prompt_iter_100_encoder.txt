Generate clear, compact, and high-level pseudocode blending natural language with symbolic operators. Make it easy to read and understand by favoring mostly one-line statements that combine conditions and actions without sacrificing clarity. Use concise constructs and avoid redundancy. Use only these keywords when necessary: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Prefer natural expressions such as “vector of integers”, “string”, “length of”, “elements of”. Declare variables with their type and initial value in one line when possible. Use symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, plus the assignment arrow `←` sparingly to emphasize updates or key steps. Functions are defined as `define function name` / `in function name` and called as `call name`. Avoid indentation; keep logically connected statements on the same line separated by spaces or semicolons. Number output lines sequentially starting from 1 with no blank lines or extra formatting. Output only the pseudocode lines with no comments, explanations, or summaries. Complete the output within 5 seconds.

Example style:  
1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A