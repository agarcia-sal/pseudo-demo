Generate clear, compact, and high-level pseudocode blending natural language with concise symbolic notation. Use mostly one-line statements combining condition and action without losing clarity. Prefer straightforward expressions, minimal redundancy, and natural phrasing. Use only these keywords and phrases as needed:  
`let`, `set`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`, `break`, `continue`, `append`, `swap`.  

Use these exact symbolic operators sparingly to emphasize key operations: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment arrow `←`.  

Declare variables with type and initial value on the same line whenever feasible. Express collections naturally as “vector of integers”, “string”, “length of”, “elements of”. Define and call functions explicitly as `define function name` / `in function name` or `call name`.  

Avoid indentation; keep related statements together separated by spaces or semicolons. Number output lines sequentially starting at 1 with no blank lines. Output ONLY the pseudocode lines, no explanations or notes. Complete output rapidly within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A