Generate concise, easy-to-read, and high-level pseudocode that integrates clear natural language with minimal symbolic notation. Use mostly one-line statements combining condition and action without compromising clarity. Express variables with explicit types and initial values on one line when possible. Describe collections naturally, e.g., “vector of integers”, “string”, “length of”, “elements of”. Define functions as `define function name` followed by `in function name` for the body; call functions as `call name`. Use only these exact keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Use these symbolic operators precisely and sparingly: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and `←` (for assignment, to highlight key operations). Avoid indentation; separate related statements on the same line by spaces or semicolons. Number all output lines sequentially starting at 1 without blank lines. Output ONLY the pseudocode lines—no comments, summaries, or explanations. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers  
5 set size of A = n  
6 read n elements into A  
7 for i in 0 to n-2: let min_i ← i  
8 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
9 swap A[i], A[min_i]  
10 print all elements of A