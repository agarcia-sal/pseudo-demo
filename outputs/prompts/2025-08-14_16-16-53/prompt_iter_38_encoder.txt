Generate concise, easy-to-read pseudocode from the given problem description. Use mostly natural language combined with clear symbolic notation for brevity and clarity. Express logic in compact one-line statements wherever possible, using minimal keywords such as `let`, `read`, `if`, `for`, `while`, `in`, `call`, and assignment operator `←`. Use concise symbolic operators (`=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`) consistently. Define functions briefly as `in function name` or `define function name`. Represent loops and conditionals compactly, combining short bodies on one line without verbose blocks. Output only the numbered pseudocode steps, strictly following this format:

1. [initializations or declarations]  
2. [input reading or assignments]  
3. [control structures and computations]  
4. [function calls and returns]  
5. [output statements]

Do not include comments, explanations, summaries, formatting lines, or separators. Avoid redundant or verbose wording. Keep the pseudocode logically ordered and focused on algorithmic steps. Output only the pseudocode step lines with numbers, no other text or labels. Complete within 5 seconds to produce a clear, compact, high-level algorithm representation.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A