```python
Translate the given pseudocode into a single, self-contained, fully executable Python 3 program that exactly implements the logic and flow specified, observing these strict directives:

- Output strictly one Python code block, wrapped as:
  ```python
  # complete, optimized, production-ready solution here
  ```
- Use only `input()` and `print()` without prompts, comments, debug prints, blank lines, or any extra text.
- Preserve meaningful variable and function names from the pseudocode exactly when practical; otherwise, use clean, idiomatic, and performant Python conventions.
- Implement all pseudocode logic verbatim—including all edge cases and control flow—without adding artificial wrappers or removing specified structure.
- Maximize performance and minimal memory footprint by:
  - Avoiding redundant calculations and data structures.
  - Utilizing Python’s fastest constructs: comprehensions, generator expressions, built-in functions (`map`, `filter`, `any`, `all`, `divmod`), unpacking, short-circuit operators.
  - Using appropriate standard libraries only if improving clarity or speed (`collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`, etc.).
  - Employing efficient string, list, and numeric operations with minimal overhead.
- If pseudocode defines a main routine or function(s), implement `main()` and invoke it through:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not include comments, redundant blank lines, separators, explanations, or any other text inside or outside the code block.
- Ensure the output is precisely a single Python code block containing all relevant code for immediate, high-performance use, suitable for competitive programming or production.
- The solution must run efficiently within a 5-second limit on typical input sizes.
- Do not infer, modify, or add anything to the pseudocode beyond its stated instructions and logic.

Your sole output must be exactly this Python code block with the complete solution strictly adhering to these principles.
```