```python
Translate the provided pseudocode into a single, concise, and fully executable Python 3 program, strictly observing these directives:

- Output exactly one fenced Python code block with syntax:
  ```python
  # complete, production-grade solution here
  ```
- Use only `input()` and `print()` for I/O, without prompts, comments, debugging info, blank lines, or any output aside from the final answer.
- Preserve all variable and function names from pseudocode when meaningful; otherwise, use clean, idiomatic, and performant Python naming.
- Implement the logic exactly as stated, including all explicit and implicit cases; do not add or remove any logic or scaffolding beyond what pseudocode specifies.
- Optimize rigorously for runtime and memory efficiency by:
  - Avoiding redundant computations, data structures, or traversals.
  - Using Pythonic constructs: comprehensions, generator expressions, `map`, `filter`, `any`, `all`, `divmod`, tuple unpacking, and short-circuit operators.
  - Employing standard libraries only when clearly justified for speed or clarity (`collections`, `itertools`, `math`, `heapq`, `functools`, `re`, `os`, etc.).
- If pseudocode defines a main function or routine, implement `main()` and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Do not insert comments, blank lines, or explanation anywhere in the code.
- The code must be minimal, directly reflecting the pseudocode requirements, suitable for high-stakes contexts like competitive programming or production with a 5-second execution cap.
- No output or assumptions beyond pseudocode are allowed; do not include imports unless required to match pseudocode instructions.
- Prioritize clarity compatible with maximum performance; fully leverage Pythonâ€™s native strengths while keeping code compact and easily verifiable against the given pseudocode.

Deliver a precise, elegant, and high-performance Python translation of the pseudocode, ready to run immediately.
```