Generate concise, clear, and high-level pseudocode that is easy to read and understand by combining natural language with precise symbolic notation compactly. Use mostly simple, mostly natural expressions and prefer short one-line statements that merge conditions and actions without losing clarity. Employ only these keywords when necessary: `let`, `read`, `in function`, `define function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`, and `set`. Use symbolic operators `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly and exactly. Declare and initialize variables on one line whenever possible, specifying type naturally (e.g., “let n be integer ← 0”). Express collections naturally (e.g., “vector of integers”, “string”, “length of”, “elements of”). Write loops and conditionals compactly, favoring one-liners with colon-separated syntax for clarity and brevity. Use clear, meaningful abbreviations without sacrificing readability. Avoid indentation and blank lines; place related statements on the same line separated by spaces. Number each output line sequentially starting at 1. Output ONLY the pseudocode lines—no explanations, comments, headers, or separators. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: set min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then set min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A