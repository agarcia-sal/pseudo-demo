Generate concise, easy-to-read, high-level pseudocode directly from the problem description. Use natural language combined with minimal symbolic notation to keep lines compact and clear. Express variable declarations, input/output, and control flow with mostly one-liner statements, merging conditions and actions without losing clarity. Use only these keywords when needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Employ symbolic operators exactly as: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and use assignment `←` sparingly to emphasize key steps. Declare variables with type and initial value in a single line whenever possible. Describe collections naturally, e.g. “vector of integers”, “string”, “length of”, “elements of”. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation and blank lines; keep related commands on the same line separated by spaces or semicolons. Number output lines sequentially starting from 1 with no extra text, explanation, or comments. Complete all output within 5 seconds.

Example output style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i; for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7 swap A[i], A[min_i]  
8 print all elements of A