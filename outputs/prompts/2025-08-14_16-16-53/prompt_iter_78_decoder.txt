```python
Translate the pseudocode into a minimal, idiomatic, and highly efficient Python 3 program that strictly follows the pseudocode logic without deviation or additions. Observe these requirements:

- Output exactly one Python code block like this:
  ```python
  # Your full, production-ready solution here
  ```
- Use only `input()` and `print()` for I/O, without prompts or extra text.
- Preserve variable and function names from pseudocode whenever meaningful, adapting to Python conventions for clarity and performance.
- Implement all logic precisely, including edge cases, without wrapping or scaffolding beyond the pseudocodeâ€™s structure.
- Optimize for speed and memory by:
  - Using fast Python idioms (comprehensions, generator expressions, built-ins like `map`, `filter`, `any`, `all`, `divmod`).
  - Leveraging standard libraries judiciously (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `os`, `re`) only to clarify or accelerate code.
  - Avoiding unnecessary computations, data structures, or iterations.
  - Writing concise, loop- and branch-efficient code.
- If the pseudocode defines a `main()` function, create it and invoke via:
  ```python
  if __name__ == "__main__":
      main()
  ```
- No comments, blank lines, separators, or explanatory text inside or outside the code block.
- The final code must be ready for direct use in production or competitive programming environments, suitable for inputs of typical problem sizes and guaranteed to run within 5 seconds.
- Do not print anything other than the required output or code block.
- No assumptions beyond the pseudocode logic.

Focus exclusively on a direct, clean, and optimal translation from pseudocode to Python that delivers maximal performance and correctness with minimal overhead.
```