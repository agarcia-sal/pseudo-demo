```python
Translate the given pseudocode into a single, minimal, fully executable Python 3 script that strictly adheres to the pseudocodeâ€™s logic and structure while maximizing efficiency and readability. Your solution must meet these explicit requirements:

- Output exactly one Python code block:
  ```python
  # optimized complete implementation here
  ```
- Use only standard input/output with bare `input()` and `print()` calls; no prompts, debug prints, comments, or additional text allowed anywhere.
- Retain original variable and function names only if they enhance clarity and Pythonic style; otherwise, refactor for idiomatic, concise, and performant Python usage.
- Implement all pseudocode logic completely including any implicit cases; do NOT wrap code in unnecessary scaffolding or abstractions beyond what pseudocode implies.
- Optimize code rigorously for speed and memory by:
  - Eliminating redundant operations and unnecessary variables/loops.
  - Leveraging built-in Python modules and functions (e.g., `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, etc.) wherever they improve efficiency or clarity.
  - Employing advanced Python features (generator expressions, comprehensions, tuple unpacking, short-circuit logic, direct standard library calls) judiciously and effectively.
- When pseudocode indicates a main routine, define it and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
  ensuring correct standalone execution.
- Guarantee the completed program runs within 5 seconds under all typical input constraints.
- The final submission must be production-quality: succinct, robust to edge cases, and directly aligned with given pseudocode instructions.
- DO NOT include comments, explanations, blank lines, or separators inside or outside the code block.

Focus solely on delivering the highest-performance, clean Python translation of the pseudocode consistent with these strict instructions.
```