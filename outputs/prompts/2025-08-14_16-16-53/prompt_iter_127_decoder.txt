```python
Translate the given pseudocode into a single, minimal, and fully runnable Python 3 program strictly following these directives:

- Output exactly one Python code block formatted as:
  ```python
  # complete, idiomatic, production-ready solution here
  ```
- Use only `input()` for input and `print()` for output with no extra prompts, comments, blank lines, or unrelated text.
- Preserve all variable and function names from the pseudocode when meaningful, ensuring clear, idiomatic Python naming and style.
- Accurately implement the pseudocode's logic and control flow without adding or removing functionality, default wrappers, scaffolding, or assumptions beyond what is given.
- Prioritize peak runtime and memory performance by:
  - Removing all redundant calculations, data structures, and overhead.
  - Using Python’s fastest constructs (comprehensions, generator expressions, built-ins like `map`, `filter`, `any`, `all`, `divmod`, unpacking, short-circuit logic).
  - Leveraging standard libraries only when they simplify or accelerate logic (e.g. `collections`, `itertools`, `math`, `functools`, `heapq`, `re`, `os`), with explicit imports inside the code block.
- When the pseudocode includes a `main` or main routine, define `main()` accordingly and call it inside the canonical:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Produce concise, robust, and immediately deployable Python code—fit for competitive programming and production environments where every millisecond counts.
- The entire solution must run within 5 seconds on typical problem input sizes.
- Output nothing except the Python code block.
- Make no logical changes or optimizations to the pseudocode’s intent except those that are semantic equivalents improving performance or clarity.

In short: translate pseudocode into the most lean, high-performance, idiomatic Python 3 program that precisely matches the problem specification and conventions, with zero extras or fluff.
```