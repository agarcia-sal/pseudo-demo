Generate clear, compact, and high-level pseudocode blending natural language with concise symbolic notation. Aim for mostly one-line statements that combine condition and action without losing readability. Use simple expressions and avoid redundancy. Use only these keywords as needed:  
`let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`, `break`, `continue`.  
Use symbolic operators exactly: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` selectively to emphasize key operations. Declare variables with type and initial value on the same line when possible. Express collections naturally, e.g. “vector of integers”, “string”, “length of”, “elements of”. Define functions as `define function name` / `in function name`; call them as `call name`. Omit indentation; keep related statements on the same line separated by spaces or semicolons. Number lines starting at 1 with no blank lines or extra text. Output ONLY the pseudocode lines without comments, explanations, or headers. Complete output within 5 seconds.

Example:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A