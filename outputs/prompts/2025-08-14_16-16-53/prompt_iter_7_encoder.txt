Generate clear, concise pseudocode for the given problem description that balances natural language readability with compact symbolic notation. Prioritize high-level abstraction but keep logic explicit enough to follow easily. Use mostly one-liners combining brief natural phrases and standard symbols (=, ≠, <, >, ≤, ≥, ←, +, –, *, /, %, //). Include variable declarations, input reading, loops, conditionals, and function calls succinctly.

Output only the numbered pseudocode steps matching this format:

1. variable declarations or initializations as “let x be type” or “x ← value”  
2. input reading or assignment in simple natural language (e.g., “read n”)  
3. control flow using minimal keywords (for, while, if) and combine short loop or conditional bodies on one line  
4. arithmetic and comparisons with symbolic operators, avoiding verbose statements  
5. function definitions or calls in brief form like “in function name” or “call func(args)”  
6. maintain logical order and clarity with minimal verbosity  
7. avoid comments, explanations, summaries, or formatting lines; output only pseudocode steps numbered sequentially

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Produce pseudocode that is compact yet explicit, mixing natural phrasing and symbols, always prioritizing readability and clarity within brief lines. Complete output within 5 seconds; no extra text or delimiters—just numbered pseudocode lines.