```python
Translate the given pseudocode into a single, fully self-contained, minimal, and production-quality Python 3 program, strictly following these precise rules:

- Output exactly one Python code block with triple backticks and `python` tag:
  ```python
  # entire solution here
  ```
- Use only `input()` (without arguments) and `print()` for all input/output operations.
- Reproduce variable and function names from the pseudocode only when meaningful; otherwise, apply idiomatic, clear, and optimized Python naming conventions.
- Implement the pseudocode logic exactly and exhaustively—no added scaffolding, debugging output, comments, or explanation—in the final code.
- Optimize the solution for runtime and memory efficiency by:
  - Removing redundant computations or data structures.
  - Utilizing efficient Python constructs (comprehensions, generators, built-ins like `any`, `all`, `map`, `filter`, `divmod`).
  - Leveraging relevant standard libraries—but only when they simplify, clarify, or speed up the code.
- When pseudocode defines a main function or equivalent entry point:
  - Implement a `def main():` containing all program logic.
  - Call `main()` under the standard `if __name__ == "__main__":` guard to ensure correct execution.
- Avoid comments, blank lines, or any extraneous spaces inside the code block; maintain minimal vertical footprint without compromising readability.
- Do not output any text aside from the requested Python code block.
- Do not assume or invent features, behaviors, or inputs beyond the pseudocode description.
- Ensure the program is robust and can reliably run within 5 seconds on typical competitive programming inputs.
- Your final submission must be a precise, idiomatic, performant Python translation ready for direct deployment in performance-critical and contest environments.

Focus solely on delivering the leanest, clearest, most idiomatic Python 3 code faithful to the pseudocode logic and constraints, enclosed strictly as a single Python code block.
```