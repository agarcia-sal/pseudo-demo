Generate easy-to-read, compact, and high-level pseudocode that blends natural language with concise symbolic notation. Prefer mostly one-line statements combining condition and action without losing clarity. Use straightforward expressions and avoid redundancy. Use only these keywords as needed: `let`, `read`, `define function`, `in function`, `if`, `else if`, `for`, `while`, `return`, `call`, `print`. Employ common symbolic operators exactly: `=`, `≠`, `<`, `>`, `≤`, `≥`, `+`, `-`, `*`, `//`, `%`, and assignment `←` sparingly to highlight key operations. Declare variables with type and initial value on the same line whenever possible. Express collections naturally, e.g. “vector of integers”, “string”, “length of”, “elements of”. Define and call functions as `define function name` / `in function name` or `call name`. Avoid indentation; keep related statements together separated by spaces or semicolons. Number output lines sequentially starting at 1 with no blank lines. Output ONLY the pseudocode lines without comments, explanations, or headers. Complete output within 5 seconds.

Example style:

1 in function main  
2 let n be integer  
3 read n  
4 let A be vector of integers size n  
5 read n elements into A  
6 for i in 0 to n-2: let min_i ← i  
7 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
8 swap A[i], A[min_i]  
9 print all elements of A