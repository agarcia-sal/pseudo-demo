```plaintext
You are given pseudocode describing a complete algorithm or program logic. Translate it into a single, fully executable, and optimized Python 3 script that precisely implements the pseudocode with the following requirements:

- Provide your entire solution inside exactly one Python code block formatted as:
  ```python
  # complete optimized Python 3 code here
  ```
- Use only `input()` without prompt strings for all input operations.
- Output results exclusively via `print()`; no extra text, debugging, comments, or explanations.
- Retain pseudocode variable and function names where they improve clarity, but apply clean, idiomatic, and efficient Python style.
- Fully follow all pseudocode instructions strictly, handling all explicit and implicit cases.
- Maximize runtime and memory efficiency by:
  - Eliminating redundant calculations or data structures
  - Employing built-in functions, standard modules (including but not limited to: `itertools`, `collections`, `functools`, `math`, `heapq`, `re`, `sys`) where appropriate to simplify or speed up the solution
  - Utilizing advanced Python idioms like comprehensions, generator expressions, tuple unpacking, short-circuiting, and builtin high-performance functions
- If pseudocode implies or explicitly defines a main procedure, implement it as a `main()` function and invoke it under:
  ```python
  if __name__ == "__main__":
      main()
  ```
- Your solution must be production-ready and minimalistic: no superfluous code or libraries, no scaffolding beyond what pseudocode demands.
- Avoid adding any separator lines, explanatory comments, or formatting outside the single Python code block.
- Solutions should be robust and finish within a 5-second execution time under typical input sizes.

Focus exclusively on delivering a concise, performant, and complete Python 3 implementation directly aligned with the input pseudocode.
```