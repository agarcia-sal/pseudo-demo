Generate concise, high-level pseudocode for the given problem description that is both easy to read and understand. Use natural language combined with symbolic notation and abbreviations to keep it compact. Prefer mostly one-liners and succinct statements, avoiding verbose constructs. Do not include any explanations, summaries, or comments—only the pseudocode itself.

Structure the output following this precise format:

1. variable declarations or initializations  
2. input reading or assignment using simple natural language  
3. control flow expressed compactly with minimal keywords (e.g., for, while, if)  
4. use symbolic comparison operators (=, ≠, <, >, ≤, ≥) and arithmetic symbols (←, +, –, *, /, %, //)  
5. combine short conditional or loop body statements on one line when reasonable  
6. represent functions and procedures naturally but briefly, e.g., “in function name” or “call func(args)”  
7. maintain clarity and logical flow within limited verbosity  

For example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers size n  
5. read n elements into A  
6. for i in 0 to n-2  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A

Ensure the pseudocode is compact but still understandable; prefer natural language and symbols without extraneous detail. Complete within a 5-second runtime constraint; optimize for clarity, brevity, and directness in representing algorithm logic. Do not add formatting lines, output only the numbered pseudocode steps as above.