Given one or more pseudocode inputs, your task is to evaluate each independently and determine whether it is **strictly reproducible**—meaning it can be implemented exactly as presented and will pass **all valid unit tests (including normal, edge, boundary, and error cases)** without any assumptions, external knowledge, or guesswork.

For each pseudocode input, produce exactly one digit:  
- **1** if the pseudocode is fully specified, self-contained, unambiguous, and guarantees correctness on all valid inputs,  
- **0** otherwise.

---

### Core Criteria for Reproducibility (All must be unequivocally satisfied):

1. **Explicit and Complete Definitions**  
   - Every variable, parameter, constant, data structure, and function is introduced clearly or can be derived precisely from the pseudocode itself.  
   - Input and output formats/types are explicit or completely determinable unambiguously.  
   - No reliance on undefined or external helpers, hidden libraries, globals, or external states.

2. **Fully Deterministic and Unambiguous Logic**  
   - Control flow (loops, conditionals, recursion) is exhaustively detailed with exact entry, continuation, and termination conditions, ensuring no potential for infinite or undefined behavior.  
   - All branching conditions cover all possibilities with no logical gaps or contradictions that leave interpretation open.  
   - Each operation and line has a clear, well-defined effect within the algorithm’s context.

3. **Precise and Consistent Operations**  
   - All data manipulations, arithmetic/calculations, indexing (including offsets, inclusive/exclusive ranges), and side effects are described with concrete semantics.  
   - No vague commands such as "handle accordingly", "some processing", or "update as needed" without exact procedural steps.

4. **Self-Contained Context: No External Assumptions**  
   - The pseudocode’s correctness and execution depend solely on its stated contents without requiring prior knowledge about language-specific behaviors, platform details, or domain knowledge that is unstated.

5. **Explicit Handling or Logical Exclusion of All Edge Cases and Errors**  
   - Boundary conditions, edge inputs (empty, minimal, maximal), and potential error states are specifically addressed or impossible within the defined domain and logic.  
   - No silent failures, undefined behaviors, or unspecified outcomes exist for any valid input.

6. **Coherent and Consistent Semantics**  
   - No use-before-assignment, contradictory conditions, conflicting variable mutability, or unsound data structure states.  
   - The pseudocode flows logically and optimally towards the stated goal without inner conflicts or inconsistencies.

7. **Ready for Direct Implementation Without Interpretation**  
   - The pseudocode provides all necessary details: initializations, index/range boundaries, termination conditions, data/result constructions, and function returns so that a programmer can translate it line-by-line into executable code verbatim.  
   - No missing details or assumptions about how to fill in gaps exist.

---

### Instructions for Output:

- When given multiple pseudocodes in sequence, output a single concatenated string of digits (`1` or `0`), in the exact order the pseudocodes are presented.  
- Output **only** the concatenated string of `1`s and `0`s, without spaces, line breaks, explanations, or any extra text.  
- Each digit corresponds precisely to one pseudocode input.

---

### Additional Guidance (for internal use, do not output):

- If any aspect is **implied**, left ambiguous, incomplete, or depends on "likely correct assumptions," **output 0** for that pseudocode.  
- Prioritize explicitness and completeness over style or brevity.  
- Avoid crediting pseudocode that relies on unstated knowledge of environment, language libraries, or domain context.  
- Infinite loops or ambiguous halting conditions must lead to output of 0.  
- Missing or incomplete edge case coverage mandates output of 0.

---

### Summary

This evaluation strictly filters for pseudocodes that can be faithfully implemented as-is and guaranteed to pass **all valid unit tests** without any external input, guesswork, or interpretation. Your output must be a pure binary correctness signal per pseudocode input, with `1` indicating full reproducibility and `0` indicating failure on these strict criteria.

---

**Examples:**  
- One fully clear, correct pseudocode input → output `1`  
- One ambiguous or incomplete pseudocode input → output `0`  
- Three inputs, where only the first and last are fully reproducible → output `101`