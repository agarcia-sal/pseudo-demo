Given one or more pseudocode inputs, evaluate each independently and output a **single digit (1 or 0)** per input with no spaces or extra characters. The digit indicates whether the pseudocode is **fully reproducible**, meaning it can be directly and unambiguously implemented exactly as given to pass **all valid unit tests**—covering normal, edge, boundary, and error cases—without any guesswork, assumptions, or missing information.

---

### Instructions for Judging Each Pseudocode:

Output `1` if and only if **every** requirement below is met; otherwise output `0`:

1. **Explicit Completeness and Declaration**  
   - All variables, inputs, outputs, parameters, data structures, constants, functions, and return types are fully declared or unambiguously inferable from the pseudocode scope without external information.  
   - Input and output formats, data types, and valid value domains are completely specified or logically derivable solely from the pseudocode.  
   - No reliance on undeclared external libraries, global states, or hidden dependencies.

2. **Clear, Exhaustive Control Flow and Logic**  
   - Loops, branches, recursion, and all control constructs have explicitly stated, well-defined boundaries, termination conditions, and handle all possible input cases with no gaps or implicit defaults.  
   - All conditional branches collectively cover the entire input domain without ambiguity or omission.  
   - There are no vague instructions, placeholders, or “to be done” parts—every operation and decision is fully expressed.

3. **Precise and Deterministic Operations**  
   - All operations (arithmetic, data manipulation, indexing, state changes) are described with unambiguous semantics and consistent conventions (e.g., indexing base clearly stated or obviously consistent).  
   - No ambiguous evaluation order, side effects, or implicit mutations requiring guesswork.

4. **Self-Contained with No External Context Required**  
   - The pseudocode can be implemented and understood standalone, requiring no platform-specific behaviors, environmental assumptions, or domain knowledge beyond what is explicitly stated.  
   - Any assumptions, if absolutely necessary, must be clearly declared within the pseudocode.

5. **Complete and Explicit Edge, Boundary, and Error Case Handling**  
   - All edge conditions (empty inputs, minimal and maximal valid values, boundary indices) are explicitly handled or logically impossible.  
   - No scenario leads to undefined, silent, or erroneous behavior when executed with any valid input within the declared domain.

6. **Logical Consistency and Semantic Coherence**  
   - The pseudocode contains no contradictions, such as variables used before assignment, conflicting conditions simultaneously presumed true, or inconsistent updates to data.  
   - Every step logically advances toward the stated goal, preserving internal consistency and avoiding ambiguous or contradictory state transitions.

7. **Implementation-Ready Without Interpretation**  
   - The pseudocode can be translated line-by-line into a concrete programming language without any need for additional interpretation, external knowledge, or supplementation.  
   - All initializations, data structures, iterations, and outputs are exhaustively detailed.

---

### Output Format:

- For multiple pseudocode inputs, output a single **string of digits**, each digit corresponding in input order to that pseudocode’s reproducibility verdict.  
- For each pseudocode, output only one digit: `1` if fully reproducible, `0` if not.  
- **Output no spaces, no newlines, no explanations, and no additional characters.**

---

### Important Internal Guidelines (Do Not Output):

- Any need for assumption, guess, or supplementation results in output `0`.  
- Missing explicit details or incomplete case coverage → `0`.  
- Implicit platform, language, or environment reliance → `0`.  
- Infinite or undefined loops, ambiguous termination → `0`.  
- Logical or semantic contradictions → `0`.

---

### Summary:

Output `1` only for pseudocode fully self-contained, explicit, and unambiguous, ready for direct implementation to pass **all** relevant unit tests with no further interpretation. Otherwise, output `0`.

---

**Example:**  
- Single reproducible pseudocode → `1`  
- Single ambiguous pseudocode → `0`  
- Three pseudocodes with first and third reproducible, second not → `101`

---

**Strictly output only the final concatenated digit string. Nothing else.**