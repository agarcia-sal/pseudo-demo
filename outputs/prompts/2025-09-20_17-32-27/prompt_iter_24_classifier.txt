Given one or more pseudocode inputs, evaluate each **independently and absolutely strictly** for whether it is **fully reproducible**, meaning that:

- It is precise, complete, and self-sufficient to the degree that a direct, literal implementation from the pseudocode as given will pass **all** valid unit tests—covering normal conditions, all edge cases, boundary conditions, and error scenarios—without any exception or failure.
- There can be no ambiguity, missing declarations, unstated assumptions, or implied external knowledge of any kind.
- The pseudocode must be fully implementable as-is, producing correct and deterministic results with no requirement for interpretation, guesswork, supplementation, or inference beyond what is explicitly provided.

---

### Evaluation Criteria for Each Pseudocode Input

Judge **fully reproducible** (= output `1`) **only if every one of the following is strictly true:**

1. **Complete Specification of Entities:**  
   - Every variable, parameter, constant, function, data structure, and return type is explicitly defined or clearly and unambiguously inferable from the pseudocode alone.  
   - The input and output formats, data types, valid ranges, and structural details are fully stated or deducible without assumption.  
   - No reliance on undeclared external libraries, global state, hidden functions, or external context.

2. **Unambiguous and Exhaustive Logic & Control Flow:**  
   - Control structures (loops, recursion, conditionals) include explicit initialization, clear termination conditions, and well-defined iteration bounds to avoid infinite loops or premature halts.  
   - Branches and cases are exhaustive and mutually exclusive, fully covering all input domains and possibilities.  
   - All steps and operations are concretely detailed; vague abstractions like “handle accordingly” or “process error” without explanation lead to failure.

3. **Deterministic and Fully Defined Operations:**  
   - Every data operation (indexing, updates, mutations, arithmetic) is precisely specified, including indexing conventions (0-based or 1-based) clearly declared or consistent by context.  
   - There is no ambiguity in evaluation order, side effects, or state changes.

4. **Self-Containment and Independence:**  
   - The pseudocode does not require any external or domain-specific knowledge, environment-dependent behavior, or assumptions beyond what is explicitly stated.  
   - Any dependencies or assumptions must be explicitly declared in the pseudocode.

5. **Complete Handling of Edge, Boundary, and Error Cases:**  
   - All boundary conditions, corner cases, and invalid or special inputs are either explicitly handled or logically impossible given the declarations.  
   - No possible input should cause undefined behavior, silent errors, infinite loops, or crashes.

6. **Logical Coherence and Semantic Consistency:**  
   - No contradictions exist such as use-before-assignment, inconsistent states, or overlapping conflicting conditions.  
   - The pseudocode’s logical flow aligns with its stated goals and maintains data integrity throughout.

7. **Implementation-Ready Clarity—No Interpretation Needed:**  
   - The pseudocode can be directly translated into actual code line-by-line without any guesswork or need to supply missing details or conventions.  
   - Index ranges, initializations, iterations, updates, and outputs are fully detailed and explicit.

---

### Output Format

- For each pseudocode input, output one digit:  
  - `1` if fully reproducible by the above definition.  
  - `0` otherwise.  
- For multiple inputs, output a single continuous string of digits, in the exact order the pseudocodes are provided.  
- Output **nothing else** — no spaces, no punctuation, no commentary.

---

### Important

- Any ambiguity, incompleteness, reliance on unstated assumptions, or need for external knowledge results in `0`.  
- Partial coverage of edge cases or implicit error handling causes `0`.  
- Implicit or ambiguous indexing conventions, control flow, or data updates cause `0`.  
- Insufficient clarity about termination conditions or logical consistency causes `0`.

---

**Example outputs:**  
- Single reproducible pseudocode → `1`  
- Single non-reproducible pseudocode → `0`  
- Three pseudocodes where first and third are reproducible, second is not → `101`

---

**Reminders:**  
- Judge each pseudocode input independently per the above criteria.  
- Output only the concatenated digit string, nothing else.  
- Strict binary judgment: reproducible versus not.  
- The order of output digits matches the order of the pseudocode inputs exactly.

---

This prompt is designed for maximal rigor and clarity to minimize false positives and false negatives in reproducibility classification.