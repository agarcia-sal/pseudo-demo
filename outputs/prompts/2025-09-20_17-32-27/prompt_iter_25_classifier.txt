Given one or more pseudocode inputs, evaluate each pseudocode independently and determine whether it is **fully reproducible**—that is, whether it is complete, precise, and unambiguous enough to be implemented **directly and faithfully** to pass **all valid unit tests** (including all normal, edge, boundary, and error cases) without requiring any assumptions, interpretation, or external knowledge.

For each pseudocode input, output a single digit (concatenated in input order, no spaces or extra characters):  
- Output `1` if and only if the pseudocode is **completely specified, self-contained, and guaranteed** to produce an implementation passing all valid unit tests, strictly satisfying all the criteria below.  
- Output `0` otherwise.

---

### Strict Reproducibility Criteria (every item below must be met):

1. **Explicit and Complete Specification**  
   - All inputs, outputs, variables, data structures, functions, parameters, constants, and return types are explicitly described or unambiguously derivable solely from the pseudocode.  
   - All input domains, types, formats, and constraints are clearly stated or inferable without assumptions.  
   - No references to undefined, external, or undocumented entities (libraries, functions, states, or globals).  
   - No vague or placeholder terminology (e.g., “handle errors,” “process accordingly”) without explicit, algorithmic detail.

2. **Precise Control Flow and Logic**  
   - All loops, recursion, conditionals, and branching are fully and precisely defined with explicit boundaries, termination conditions, and coverage ensuring no infinite loops, unstated behaviors, or logical gaps.  
   - All cases—including normal, edge, boundary, and error conditions—are exhaustively and clearly handled or logically impossible.  
   - The logic covers all input scenarios without silent failures, contradictions, or partial specifications.

3. **Deterministic and Well-Defined Operations**  
   - Every operation, indexing, variable update, arithmetic, and side effect are fully specified with consistent, conventional semantics (e.g., indexing bases, evaluation order).  
   - There is no ambiguity in order of evaluation, data structure mutations, or state changes.  
   - All details needed to translate pseudocode into working code are present without guesswork.

4. **Context Independence and Self-Containment**  
   - The pseudocode is fully self-contained; it requires no external/environmental knowledge, assumptions, or hidden context beyond the pseudocode itself and standard computational models.  
   - Dependencies or assumptions must be explicitly stated or fully derivable internally.  
   - Pseudocode does not rely on unspecified platform, runtime, or language-specific behavior.

5. **Logical Consistency and Coherence**  
   - The pseudocode is free from contradictions (e.g., use-before-assignment, conflicting conditions).  
   - Intermediate states, data structures, and stepwise transformations adhere logically to stated goals and maintain internal consistency.

6. **Direct Implementability Without Supplementation**  
   - The pseudocode is ready for a line-by-line translation into a programming language without requiring interpretation, additional inference, or external knowledge.  
   - All initializations, index ranges, iterations, updates, and results are fully detailed.  
   - It leaves no ambiguity in how to implement any part, including initialization, looping, branching, and return values.

---

### Output Instructions:

- For multiple pseudocode inputs, output a single uninterrupted string of digits corresponding to each input’s reproducibility evaluation, preserving input order.  
- Output only digits: `1` for reproducible pseudocodes, `0` for all others.  
- Do not output any spaces, newlines, punctuation, explanations, probabilities, or partial credit.

---

### Important Internal Judgement Notes (do not output):

- Any implicit assumption, omitted detail, or required inference causes output `0`.  
- Any ambiguity, missing edge case, or incompletely defined operation causes output `0`.  
- Any dependence on external libraries, states, domain knowledge, or platform behavior causes output `0`.  
- Infinite or ill-defined loops, contradictory statements, or incomplete control flow cause output `0`.  
- Judge each pseudocode independently and strictly as a binary reproducibility decision, no partial credit.

---

### Summary:

Only output `1` if the pseudocode is fully explicit, unambiguous, and wholly sufficient for a direct implementation that will pass **all** valid tests without any assumptions or external details. Output `0` otherwise. The output is a strict binary vector reflecting reproducibility of each pseudocode input in exact order.

---

**Example outputs:**  
- One fully reproducible pseudocode → `1`  
- One pseudocode with any ambiguity or incompleteness → `0`  
- For three pseudocodes with first and third reproducible, second not → `101`

---

**Strictly no output other than the concatenated reproducibility digits.**