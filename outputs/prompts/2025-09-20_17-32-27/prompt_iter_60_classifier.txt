Given one or more pseudocode inputs, assess each **independently** to determine if it is **fully reproducible** as defined below.  
Output a single digit per pseudocode input output—concatenated with no spaces or other characters, in order:  
- Output **1** if the pseudocode can be directly and unambiguously implemented exactly as given, requiring no assumptions, filling-in, interpretation, or external knowledge, and guaranteed to pass **all valid unit tests** (normal, edge, boundary, error) without exception.  
- Output **0** otherwise (if there is any ambiguity, missing detail, undefined behavior, incomplete case handling, implicit assumptions, or dependence on external context).

---

### Definitive Criteria for Reproducibility:

For each input pseudocode, **all** of these must be strictly met without exception:

1. **Complete Specification of Interfaces and Data**  
   - All variables, data structures, functions, parameters, return values, and constants are either explicitly introduced or fully inferable solely from the pseudocode itself.  
   - Input and output types, formats, valid domains, and data structures are clearly and exhaustively defined or logically derivable from the pseudocode.  
   - No use or mention of any undeclared functions, libraries, global state, or external data dependencies.

2. **Precisely Defined, Comprehensive Algorithm Logic**  
   - Every control flow construct (loops, conditionals, recursion) specifies exact conditions, loop indices, boundaries, and termination criteria preventing ambiguity or infinite looping.  
   - All branches and conditionals cover the entire input domain exhaustively, with no implicit or skipped cases.  
   - Algorithmic steps are explicit, deterministic, and unambiguous, avoiding vague instructions or placeholders requiring interpretation.

3. **Deterministic, Well-Defined Operations**  
   - Arithmetic, indexing, data mutation, state updates, and side effects are precisely and consistently specified (including indexing base—0 or 1—clearly stated or rendered obvious).  
   - No ambiguous evaluation order, unspecified behavior, or side effects that might vary by language or environment.

4. **Self-Contained, Context-Free Description**  
   - The pseudocode stands alone with no dependence on external context, hidden domain knowledge, environment assumptions, or platform-specific behavior.  
   - Any assumptions or preconditions are explicitly documented or fully derivable from the pseudocode input itself.

5. **Exhaustive, Explicit Handling of Edge and Error Cases**  
   - All edge, boundary, special, or invalid input cases are explicitly handled or logically impossible.  
   - No possible inputs lead to undefined, unspecified, or erroneous behavior silently or otherwise.

6. **Logical Consistency and Internal Coherence**  
   - No contradictions such as use-before-assignment, conflicting simultaneous conditions, or inconsistent internal states.  
   - The pseudocode logically progresses toward fulfilling the stated function goal without ambiguity or missing steps.

7. **Ready for Direct, Exact Implementation**  
   - The pseudocode can be translated line-by-line into a concrete programming language without need for further supplementation, interpretation, guesswork, or implicit knowledge.  
   - All initializations, iterations, indexing, and output constructions are fully detailed.

---

### Response Format and Instructions:

- For each pseudocode input, output exactly one digit: `1` or `0` following the above criteria.  
- For multiple inputs, output the string of digits without spaces, newlines, or any other characters.  
- Output **nothing else**—no explanations, comments, or partial credits.  
- Judgment is based purely on the pseudocode text given for each input, independently.

---

### Important Internal Guidelines (do not output):

- Any ambiguity, missing explicit detail, incomplete coverage of input space, or un-declared dependency → output `0`.  
- Any implied knowledge outside what is explicitly stated or plainly inferable → output `0`.  
- Infinite or undefined loops or termination conditions → output `0`.  
- Partial or ambiguous handling of edge/error cases → output `0`.  
- Contradictions or incoherent logic → output `0`.  
- Only perfectly complete, explicit, and unambiguous pseudocode guaranteed to pass all tests → output `1`.

---

This refined prompt is constructed to maximize accuracy by emphasizing complete exhaustive coverage, explicitly requiring all details to be either declared or unambiguously derivable, and by explicitly forbidding any assumptions or vague statements. It better addresses common failure modes by highlighting deterministic operations, coherent logic, and full edge case handling as strict criteria.

---

**Example outputs:**  
- One fully reproducible pseudocode → output: `1`  
- One ambiguous or incomplete pseudocode → output: `0`  
- Three inputs where only first and last are fully reproducible → output: `101`

---

**Strictly produce only the concatenated string of digits as output, nothing else.**