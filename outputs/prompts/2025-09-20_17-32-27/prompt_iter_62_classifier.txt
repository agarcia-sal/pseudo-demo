Evaluate each provided pseudocode independently for **complete, exact, and unambiguous reproducibility**, meaning the pseudocode can be **directly and faithfully implemented** to pass **all unit tests** (including normal, edge, boundary, and error tests), without any assumptions, interpretations, or additions.

For each pseudocode input, output a single digit concatenated in input order, with no spaces or extra characters:  
- Output **1** if and only if the pseudocode meets **all** of the following criteria strictly, making it fully reproducible and implementation-ready.  
- Otherwise, output **0**.

---

### Comprehensive Criteria for Full Reproducibility:

1. **Complete Specification of Inputs, Outputs, and Declarations**  
   - All input parameters and their data types, valid formats, ranges, and structures are clearly defined or precisely inferable solely from the pseudocode.  
   - All variables, constants, data structures, helper functions, and return values are fully introduced or unmistakably derivable without external knowledge.  
   - No use of undeclared identifiers, external libraries, or hidden states.

2. **Unambiguous and Exhaustively Defined Control Flow and Logic**  
   - Control constructs (loops, recursion, conditionals) have fully specified boundaries and termination conditions with no risk of infinite cycles or undefined halts.  
   - All possible input scenarios, including edge and boundary cases, are explicitly handled or logically impossible. No implicit default “else” or unexplained gaps.  
   - Every step, operation, and decision is described with exact detail—no vague, placeholder, or underspecified instructions.

3. **Deterministic Behavior and Precise Semantics**  
   - Operations, evaluations, data mutations, indexings, and state changes are explicitly defined with clear semantics.  
   - Indexing bases (zero or one) and conventions are either stated or perfectly consistent and derivable from context.  
   - Evaluation order, side effects, and data dependencies are fully specified without ambiguity.

4. **Self-Containment and Absence of External Assumptions**  
   - The pseudocode requires no external context, platform-specific behavior, domain knowledge, or environment beyond what is explicitly stated.  
   - All assumptions, dependencies, and special conditions necessary for correctness are declared within the pseudocode.

5. **Exhaustive Edge, Boundary, and Error Case Coverage**  
   - Edge cases (empty inputs, minimum and maximum values, invalid or exceptional inputs where applicable) are handled explicitly or justified impossible.  
   - No input within the declared valid domain can cause undefined, erroneous, or silent failure states.

6. **Logical Consistency and Semantic Soundness**  
   - No internal contradictions occur (such as conflicting variable values, use-before-assignment, or impossible conditions).  
   - The pseudocode’s steps and data states coherently progress toward the stated goal with consistent invariants.

7. **Direct Implementability Without Interpretation or Supplementation**  
   - The pseudocode is sufficiently detailed to be converted verbatim into a working program line-by-line, with all necessary index ranges, initializations, iterations, and data constructions specified explicitly.  
   - No required guesswork, external clarifications, fill-in, or implicit knowledge are needed.

---

### Output Instructions:

- For multiple pseudocodes, output a contiguous string of digits (e.g., “1010”).  
- Each digit corresponds to the reproduction verdict of the input pseudocode in order.  
- Output strictly only the reproducibility digits; no explanations, comments, or formatting.  
- Output either “1” or “0” per pseudocode to indicate reproducible or not reproducible, respectively.

---

### Internal Operational Notes (do not output/promulgate):

- Any ambiguity, missing details, or external assumptions → output `0`.  
- Implicit or incomplete edge case or error handling → output `0`.  
- Use of undeclared identifiers, libraries, or external context → output `0`.  
- Undefined or infinite loops, incomplete branches, or contradicting logic → output `0`.  
- Full explicitness and completeness required for output `1`.

---

**Summary:**  
Output 1 only when the pseudocode can be implemented fully and exactly to pass **all conceivable tests without any added assumptions**; otherwise output 0. The final output is a strict reproducibility bit-string mirroring the input order.

---

**Example outputs:**  
- Single reproducible pseudocode → `1`  
- Single non-reproducible pseudocode → `0`  
- Three pseudocodes with first and third reproducible, second not → `101`

---

**STRICT:** no extra text or formatting—output only the reproducibility digits string.