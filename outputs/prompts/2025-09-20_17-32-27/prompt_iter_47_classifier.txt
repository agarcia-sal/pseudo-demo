Given one or more pseudocode inputs, evaluate each independently and determine if it is **fully reproducible**. A pseudocode is fully reproducible if it is explicitly complete, unambiguous, and self-contained so that it can be directly implemented without any inference, assumption, or external knowledge, and will pass **all applicable unit tests** — including normal, edge, boundary, and error cases — **without fail**.

For each pseudocode input, output a single digit concatenated in input order, with no spaces or extra characters:

- Output **1** if and only if the pseudocode fulfills all the conditions below and thus guarantees passing all valid unit tests exactly as written.
- Output **0** if it lacks any required detail, contains ambiguity, undefined behavior, missing edge case handling, or relies on assumptions, external context, or incomplete logic.

---

### Strict Criteria for Full Reproducibility (all must be met):

1. **Complete Explicit Specification:**  
   - All variables, parameters, data structures, constants, functions, and return types are fully declared or explicitly deducible solely from the pseudocode.  
   - Input and output are clearly defined by type, format, valid ranges, and structure, without requiring external explanation.  
   - No external dependencies (libraries, environment, hidden states) are referenced without explicit documentation.

2. **Precise, Exhaustive and Deterministic Logic:**  
   - Control flow (loops, conditionals, recursion) has fully specified boundaries, conditions, and invariants guaranteeing no infinite loops or ambiguous stops.  
   - Every branching logic accounts for **all possible inputs** with no unmentioned or implicit cases.  
   - No vague instructions (e.g., “handle errors”, “process accordingly”) without precise operational detail.  
   - Data/state mutations and their sequencing are fully and clearly specified, with unambiguous indexing and conventions, maintaining consistent semantics.

3. **Self-Contained and Context-Free:**  
   - Complete solution stands alone without requiring any unstated domain knowledge, platform behavior, or environmental assumptions beyond what the pseudocode text contains.  
   - All assumptions and dependencies, if any, are explicitly described or derivable without guesswork.

4. **Exhaustive Edge, Boundary, and Error Case Handling:**  
   - All edge cases (empty inputs, smallest/largest values, malformed inputs as applicable) are explicitly accounted for or proven impossible.  
   - No input or intermediate state can lead to undefined, silent failures, exceptions, or errors.

5. **Internal Logical Consistency:**  
   - No contradictions, such as use-before-assignment, conflicting conditions, or inconsistent data states.  
   - The logic steps correctly and coherently toward the intended goal without ambiguity or unstated side effects.

6. **Direct Line-by-Line Implementability Without Interpretation:**  
   - The pseudocode can be translated verbatim into a concrete programming language without addition, omission, or interpretation.  
   - All iterations, indexing, initializations, and result constructions are explicitly described in detail.

---

### Output Instructions:

- For multiple pseudocode inputs, output a single uninterrupted string of digits representing their reproducibility results in order.  
- Each digit must be either `1` or `0` with no spacing, newline, punctuation, or explanation.  
- Do not output anything else besides this digit string.

---

### Important Judgement Notes (do NOT output):

- Any need for supplemental assumptions, guesswork, domain knowledge, ambiguous or incomplete logic yields `0`.  
- Pseudocode that omits, glosses over, or vaguely handles any edge, error, or boundary case yields `0`.  
- Reliance on implicit platform, language, or runtime features disqualifies reproducibility (`0`).  
- Unclear indexing bases, or inconsistent indexing schemes cause `0`.  
- Infinite loops, ambiguous termination conditions, or logically incomplete branching cause `0`.  
- Each pseudocode input is scored strictly without influence from others.

---

**Summary:**  
Output `1` only for pseudocode that is fully self-contained, explicit, unambiguous, logically coherent, edge-case complete, and thus guaranteed to pass all valid unit tests as is. Otherwise, output `0`.

---

**Example outputs:**  
- One fully reproducible pseudocode: `1`  
- One non-reproducible pseudocode: `0`  
- Three pseudocodes with first and third reproducible, second not: `101`

---

**Strictly output only the reproducibility digits with no other text or symbols.**