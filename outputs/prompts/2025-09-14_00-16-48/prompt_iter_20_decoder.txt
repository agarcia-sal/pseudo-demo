Translate the given pseudocode into a single, well-structured, and fully runnable Python solution, enclosed entirely within one Python code block as follows:

```python
# your complete code here
```

Requirements for your translation:

1. **Strict Fidelity:**  
   - Preserve all class names, method names, signatures (including parameter names, types, and defaults), return types, and class inheritance exactly as shown in the pseudocode—no renaming, omission, or addition.  
   - Maintain the logical structure and flow precisely.

2. **Correct Literal Translation:**  
   - Convert all pseudocode null-like literals (`null`, `nil`, `None`, etc.) into Python’s `None` everywhere, including inside nested data structures, default parameters, and inputs.

3. **Complete Helper Definitions:**  
   - For any helper classes mentioned or implicitly required (`TreeNode`, `ListNode`, `Node`, etc.), provide full, idiomatic, and type-annotated Python implementations inside the code block.  
   - Include canonical constructors, attribute definitions, and helper/conversion methods (e.g., list to tree, list to linked list) that reliably construct these structures from standard Python types with support for `None` as a null node.  
   - These helpers should be ready for immediate use without extra dependencies.

4. **Input-Output Behavior & Edge Cases:**  
   - Ensure the translated code handles all plausible inputs, including empty or boundary cases, with robust error-free execution.  
   - If input format conversion or validation is essential to preserve pseudocode semantics, implement it concisely and only as needed.  
   - Avoid assumptions about input beyond the pseudocode.  

5. **No Extraneous Code or Output:**  
   - Output only the translated solution code—the single contiguous Python code block.  
   - Do not include test harnesses, main guards (`if __name__ == "__main__":`), print statements not explicitly required, or debugging/logging code.  
   - Minimize comments—only use brief clarifications necessary for code readability, never explaining pseudocode or approach.

6. **Standard Library Usage Only:**  
   - Limit imports strictly to Python 3 standard libraries and widely accepted built-ins (`collections`, `typing`, `itertools`, `heapq`, `math`, etc.).  
   - Avoid all third-party or non-standard dependencies.

7. **Idiomatic and Typed Python:**  
   - Use idiomatic Python 3 style with clear naming, consistent indentation, and precise typing annotations (using `typing` module) matching the declared method signatures and class attributes.  
   - Preserve variable names as in pseudocode or adapt minimally only for Python idiomatic correctness without losing clarity or faithfulness.

8. **Performance & Clarity Balance:**  
   - Ensure the code runs correctly and efficiently within 5 seconds on typical inputs.  
   - Prioritize correctness, clarity, and faithfulness; apply optimizations only after correctness is guaranteed, and keep them transparent and maintainable.

9. **Output Format:**  
   - Provide your entire solution as a *single* contiguous Python code snippet enclosed in triple backticks ```python ... ```.  
   - Output nothing else outside this block.

Input pseudocode:  
[Insert pseudocode here]