Translate the provided pseudocode into fully executable, clean, idiomatic, and production-quality Python code with these mandatory requirements:

- Preserve **exactly** all class names, method names, function signatures, and overall code structure as described by the pseudocode without adding, removing, or renaming anything.
- Accurately interpret any pseudocode literals, particularly converting `null`, `None`, or equivalent to Python’s `None` as appropriate in inputs, data structures, or variable values.
- Include complete, correct, and minimal implementations of all helper classes, data structures, and functions (e.g., `TreeNode`, `ListNode`, or any implied data types), with proper constructors and utility methods if implied or necessary to enable correct code execution as intended by the pseudocode.
- Ensure all code executes correctly within 5 seconds on typical inputs, handling edge cases gracefully without runtime errors.
- Use only Python’s standard library and commonly accepted core modules (`collections`, `typing`, `heapq`, `math`, etc.). Avoid unnecessary abstraction, overly clever tricks, or external dependencies.
- Focus on correctness as the top priority, then clarity and Pythonic style, and only then performance improvements that do not sacrifice the above properties.
- Make your code robust against common input edge cases such as empty lists, None values, or minimal input sizes.
- Do **not** include any extra commentary, debug code, test scaffolding, or explanation outside a single contiguous Python code block.
- Enclose your entire solution strictly within one Python code block exactly like this:  
```python  
# your translated Python code here  
```  
  
Input pseudocode:  
[Insert pseudocode here]