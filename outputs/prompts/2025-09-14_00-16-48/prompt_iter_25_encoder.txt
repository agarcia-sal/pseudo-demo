Generate concise, elegant pseudocode that clearly captures the full logic and structure of the given code.  
Keep all original class names, function names, and their exact class-object nesting intact without any renaming or restructuring.  
Use a compact style emphasizing mostly one-line statements, blending natural language, common abbreviations, and symbolic notation effectively.  
Favor clarity and high-level abstraction: describe algorithmic steps directly and simply, avoid verbose syntax or low-level implementation details.  
Represent control flows, assignments, expressions, data access, and recursive calls symbolically and succinctly (e.g., let, set, read, print, return).  
Do not include comments, explanatory notes, summaries, or additional text—output only the pseudocode lines.  
Number every line sequentially from 1 with no blank lines or separators, exactly in this format:

1. x ← 0  
2. while x < n: x++  

Ensure function signatures and class definitions remain exactly as in the original code.  
For data structures and method calls, express operations clearly but concisely, avoiding excessive spelling-out or over-complication.  
Write pseudocode that is straightforward to read and understand, suitable for a programmer familiar with basic constructs but prioritizing readability and brevity.  
Output the entire pseudocode within 5 seconds.