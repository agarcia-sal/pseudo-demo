Generate concise, high-level pseudocode directly from the given problem code.  
Keep original class names, function names, and class-object hierarchy exactly as in the source code.  
Use clear, natural-language statements mixed with common abbreviations and symbolic notation for compactness and readability.  
Prefer one-liners whenever possible, using symbolic control flows (e.g., `while`, `if`, `for`), assignments (`←`), expressions, and data access.  
Represent key operations (e.g., recursion, data structures) precisely but succinctly—use terms like “let”, “read”, “set”, “return”, “print”, etc., as needed.  
Do not include any explanations, summaries, comments, or notes—output only the pseudocode that fully captures the original logic and structure.  
Number each line sequentially starting at 1 with no blank lines or extra formatting beyond this numbering pattern:  

1. x ← 0  
2. while x < n: x++  

Ensure function signatures are unchanged and all control structures reflect the original code’s flow.  
Output should be syntactically consistent and easily interpretable for implementation or review.  
Deliver output within 5 seconds.