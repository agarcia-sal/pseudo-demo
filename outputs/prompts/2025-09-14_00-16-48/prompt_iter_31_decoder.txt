Translate the given pseudocode into one cohesive, fully runnable, and idiomatic Python solution enclosed in a single Python code block as shown below:

```python
# your complete solution here
```

Your translation must strictly and comprehensively satisfy all the following criteria:

1. **Exact Structural Fidelity:**  
   - Preserve all class names, method names, signatures, return types, and inheritance exactly as in the pseudocode without any renaming, omission, or addition.  
   - Maintain parameter names and default arguments verbatim regardless of conventions.

2. **Literal and Data Handling:**  
   - Correctly interpret pseudocode null-like literals (`null`, `nil`, `None`, etc.) as Python’s `None` consistently, including within nested default arguments, data structures, and inputs.  
   - Properly convert input lists or arrays representing complex structures (e.g., trees, linked lists) into their respective Python class instances using fully implemented helper constructors/utilities embedded within the code.

3. **Comprehensive Helper Definitions:**  
   - Include complete, standard, and idiomatic definitions for all auxiliary data structures referenced or implied by the pseudocode (e.g., `TreeNode`, `ListNode`, `Node`) with properly typed attributes and fully functional constructors.  
   - Provide robust helper functions/methods to build these structures from native Python representations (e.g., list-to-tree, list-to-linked-list converters) handling `None` nodes gracefully and efficiently.  
   - Avoid any external dependencies or partial definitions; zero ambiguity, all self-contained.

4. **No Extraneous Code:**  
   - Do **not** add test code, main guards (`if __name__ == '__main__':`), input prompts, debug prints, or explanatory comments beyond minimal structural clarifications if absolutely necessary.  
   - The output should be pure runnable solution code matching the pseudocode input/output contract strictly.

5. **Standard Library and Typing:**  
   - Use only Python 3 standard libraries and broadly accepted built-in modules (`collections`, `heapq`, `itertools`, `math`, `typing`, etc.).  
   - Employ type annotations rigorously and idiomatically from the `typing` module (e.g., `Optional`, `List`) exactly as per the pseudocode method signatures.

6. **Code Quality and Style:**  
   - Write clear, idiomatic, and well-structured Python code using consistent indentation and naming conventions aligned with the pseudocode’s style.  
   - Favor simplicity and maintainability; avoid premature optimization or unnecessary abstraction while ensuring correctness.

7. **Robustness and Edge Cases:**  
   - Ensure the translated code fully handles all plausible valid input scenarios, including empty inputs, `None` values, edge conditions, and nested data structures without runtime errors.  
   - Perform input conversions internally wherever needed to conform inputs to expected object types.  
   - Implement careful and precise logic to correctly implement the pseudocode’s algorithm.

8. **Performance Within Constraints:**  
   - Ensure the solution runs efficiently within a 5-second runtime for typical problem sizes.  
   - Optimize only after achieving fully correct, clear, and idiomatic code.

9. **Single Code Block Output:**  
   - Return exactly one contiguous Python code snippet enclosed strictly within triple backticks and `python` tag:  
     ```python  
     # your complete translated solution  
     ```  
   - Do not output any additional text, separators, explanations, or partial snippets.

Input pseudocode:  
[Insert pseudocode here]