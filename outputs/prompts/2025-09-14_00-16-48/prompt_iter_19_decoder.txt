```python
You will be provided with pseudocode defining classes, functions, and logic. Your task is to translate this pseudocode into a single, complete, executable, and idiomatic Python solution within one contiguous Python code block, formatted exactly as:

```python
# your full, runnable solution here
```

Follow these stringent guidelines to maximize correctness, faithfulness, and robustness:

1. **Exact Structural Fidelity:**  
   - Preserve all class names, function/method names, parameter lists, default values, signatures, return types, and class hierarchies exactly as given in the pseudocode, without renaming, omitting, or adding any methods/classes.  
   - Keep method and function signatures intact with proper type hints reflecting the original pseudocode's intent.  
   - Maintain the provided class and nesting structure precisely.

2. **Literal and Keyword Normalization:**  
   - Map any pseudocode representations of null-like values (`null`, `nil`, `None` variants) to Python’s `None` universally—including as default parameter values, within data structures, and function inputs.  
   - Convert pseudocode operators or symbols to valid Python equivalents (e.g., `←` to `=`, `++` to `+= 1`, equality `=` to `==` in conditions) while preserving original logic exactly.

3. **Helper Classes and Data Structure Definitions:**  
   - For any domain-specific or helper data structures referenced (e.g., `TreeNode`, `ListNode`, `Node`), provide their full Python definitions including constructor (`__init__`), attributes with proper typing annotations, and any commonly expected utility methods (like building from lists or arrays).  
   - Utilities should be robust, handling `None` correctly, and aligned with common conventions found in standard coding challenge platforms (e.g., LeetCode style).  
   - Include minimal but sufficient helper functions for constructing input structures from native Python data types if pseudocode implicitly relies on such input forms.  
   - Avoid extraneous helper code unrelated to the direct solution.

4. **Input Handling and Validation:**  
   - Assume inputs follow the intended valid format but add minimal conversion or validation logic only if absolutely necessary to realize the pseudocode’s logic correctly and without runtime errors (e.g., converting input lists to nodes, or validating non-empty inputs).  
   - Prevent common runtime type errors by ensuring that any input conversions conform exactly to the expected types in method signatures.

5. **No Additional Code or I/O:**  
   - Do not add or emit test harnesses, input prompts, output prints, logging, debugging statements, or explanations.  
   - Produce only the solution code that implements the pseudocode’s logic, nothing extra.

6. **Permitted Libraries:**  
   - Use exclusively Python 3 standard libraries and broadly accepted built-ins (`collections`, `typing`, `heapq`, `itertools`, `math`, `functools`, etc.).  
   - Do not use third-party or external packages.

7. **Pythonic Style with Type Safety:**  
   - Write clean, idiomatic Python code that reads naturally.  
   - Use type hints thoroughly and consistently, matching or accurately representing the pseudocode’s types.  
   - Maintain consistent indentation, spacing, and naming aligned with Python conventions (PEP 8), but never rename identifiers from the pseudocode.

8. **Robustness and Edge Cases:**  
   - Ensure the code gracefully handles all valid edge cases implied by the pseudocode (empty inputs, minimal inputs, repeated values, boundary conditions) without exceptions.  
   - Add minimal, necessary guards only to fulfill the correctness requirements implied by the pseudocode.

9. **Performance Awareness:**  
   - Your implementation must be fully correct first. After correctness, optimize if and only if required to ensure execution within a typical 5-second limit on common inputs.  
   - Avoid unnecessary complexity or premature optimization; prefer clarity and correctness.

10. **Output Format:**  
    - Return exactly one single contiguous Python code snippet enclosed within triple backticks and the "python" language tag:  
      ```python  
      # your complete, faithful solution here  
      ```  
    - Do not output any text or markers outside this code block.

Input pseudocode:  
[Insert pseudocode here]
```