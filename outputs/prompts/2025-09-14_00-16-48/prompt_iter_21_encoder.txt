Generate concise, readable pseudocode that is high-level yet precise, capturing the full logic of the original code without omitting any essential detail. Keep all original class names, function names, and their hierarchical structures exactly as in the source code. Use mostly one-line statements incorporating natural language, common symbols (←, =, <, >, etc.), and standard abbreviations to maintain compactness while ensuring clarity and easy understanding. Favor symbolic control flows, assignments, expressions, and data access; avoid verbose comments, explanations, summaries, or extra notes.

Always preserve original function signatures exactly. Number each pseudocode line sequentially starting from 1, strictly following this format for every line:

1. x ← 0  
2. while x < n: x++

Do not include any blank lines, separators, or additional formatting other than numbered pseudocode lines. Use moderate natural language phrasing to improve readability without becoming verbose. Ensure completeness and correctness of logic and fit all output within 5 seconds.

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for all elements in A:  
7.   set min_i to i  
8.   for j = i+1 to size of A exclusive:  
9.     if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A