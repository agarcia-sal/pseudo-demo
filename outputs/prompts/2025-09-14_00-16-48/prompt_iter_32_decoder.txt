Translate the provided pseudocode into a single, fully runnable, and idiomatic Python solution wrapped inside one contiguous Python code block as shown below:

```python
# your complete solution here
```

Your implementation must adhere strictly to these requirements:

1. **Faithfulness:**  
   - Keep all class names, method names, signatures, return types, and class hierarchies exactly as presented in the pseudocode — no renaming, removing, or adding methods or classes.  
   - Retain parameter lists and default values verbatim.

2. **Data Literal Handling:**  
   - Interpret pseudocode `null`, `nil`, or equivalent literals correctly as Python `None` everywhere, including within nested data structures, inputs, and default values.

3. **Helper Classes and Utilities:**  
   - Provide standard, fully featured definitions for any helper classes (`TreeNode`, `ListNode`, etc.) and required utilities.  
   - Include constructors, typed attributes, and useful functions to build these structures from native Python lists or representations conclusively (e.g., list-to-tree and list-to-linked-list converters), matching common LeetCode-style conventions.  
   - Ensure these utilities handle `None` nodes properly without throwing errors.

4. **No External Code:**  
   - Produce only the solution code respecting the pseudocode’s input/output behavior — do not include test harnesses, main guards, input prompts, or print statements beyond what pseudocode dictates.  
   - Do not embed debugging or explanatory comments unless minimally necessary for structural clarity.

5. **Library Usage:**  
   - Use only Python 3 standard libraries and commonly accepted built-ins (`collections`, `typing`, `heapq`, `itertools`, `math`, etc.).  
   - Avoid third-party or non-standard packages.

6. **Code Style & Typing:**  
   - Use clear, idiomatic Python constructs, including type hints from the `typing` module wherever relevant, preserving original method signatures.  
   - Maintain consistent indentation, variable naming, and structure for maintainability.

7. **Robust Input & Edge Case Handling:**  
   - Ensure the translated code correctly handles all plausible valid inputs, including edge cases (empty inputs, single nodes, repeated elements, boundary constraints).  
   - Prevent runtime errors such as attribute errors caused by incorrect data types (e.g., lists instead of nodes).  
   - Add input validation or data conversions if and only if needed to fully realize the pseudocode logic.

8. **Performance:**  
   - Code must run successfully within 5 seconds on typical problem inputs.  
   - Optimize only after full correctness and clarity are achieved, avoiding premature complexity or abstraction.

9. **Output Format:**  
   - Provide *one* single contiguous Python code snippet, enclosed by triple backticks ```python ... ```.  
   - Do not output anything other than this code block.

Input pseudocode:  
[Insert pseudocode here]