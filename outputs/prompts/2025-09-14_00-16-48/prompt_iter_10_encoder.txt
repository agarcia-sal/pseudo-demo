Generate concise, clear, and easy-to-read pseudocode that captures the full logic of the original code, preserving **all original class names, function names, and their hierarchical class-object structure exactly**. Use mostly one-line statements mixing natural language and common symbolic notations to keep the pseudocode compact yet high-level and comprehensible. Favor symbolic control flow and expressions over verbose lines; use abbreviations where natural but avoid cryptic or ambiguous terms. Keep the pseudocode consistent with the original function signatures and return statements. Number each output line sequentially starting from 1, strictly following this exact format without blank lines or separators:

1. x ← 0  
2. while x < n: x++

Do **not** include any explanations, comments, summaries, or notes—output only pure pseudocode. Avoid restating the problem, adding extraneous formatting, or deviating from the structure of the original class or functions. The pseudocode should be ready for direct understanding and implementation. Ensure correctness and completeness within a 5-second runtime limit.