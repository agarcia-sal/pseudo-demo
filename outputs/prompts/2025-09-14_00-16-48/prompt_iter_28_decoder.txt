```python
Translate the given pseudocode into a single, self-contained, fully runnable, and idiomatic Python 3 solution enclosed within one contiguous Python code block as shown:

```python
# your complete solution here
```

Strictly follow these enhanced directives to maximize correctness, fidelity, and runtime reliability:

1. **Exact Signature & Structure Preservation:**  
   - Maintain all class names, method names, parameter names, signatures (including types and default values), return types, and inheritance exactly as given. Avoid renaming, restructuring, or splitting classes/functions.  
   - Keep the original class/object nesting and scope intact.

2. **Literal & Data Conversion Compliance:**  
   - Convert all pseudocode null-like literals (`null`, `nil`, `None`, etc.) to Python’s `None` consistently, including inside any nested data or default argument values.  
   - Convert array and tree representations from pseudocode input format to Python native data types reliably.

3. **Comprehensive Helper Definitions:**  
   - When helper data structures (e.g., `TreeNode`, `ListNode`, `Node`) or utilities are implied or standard in the pseudocode context, include fully featured, idiomatic, and well-typed Python class definitions and helper functions to construct and serialize these structures.  
   - These helpers should robustly handle `None`/null nodes in inputs and outputs, adhere to common conventions (such as LeetCode style), and avoid runtime type errors.

4. **No Extra Outputs or Test Code:**  
   - Output strictly only the solution code to implement the pseudocode, wrapped in one Python code block.  
   - Do not include main guards (`if __name__ == '__main__'`), test harnesses, example calls, print/debug statements, or explanatory comments except where minimally needed for clarity in complex structure definitions or converters.

5. **Permissible Libraries:**  
   - Restrict usage to only the Python Standard Library, including built-in modules such as `collections`, `typing`, `heapq`, `itertools`, `math`, `functools`, and `copy`.  
   - Do not use any third-party or external packages.

6. **Idiomatic, Clear, and Readable Python:**  
   - Use Python’s type hints (`typing` module) consistently, reflecting the pseudocode signatures.  
   - Write clean, PEP-8 compliant code with consistent indentation and variable naming that respects the pseudocode’s naming unless conversion is essential for Python syntax correctness (e.g., replacing invalid identifiers).  
   - Prefer Pythonic constructs and avoid overly clever or premature optimization to favor clarity.

7. **Robust Input Handling & Edge Cases:**  
   - Ensure all plausible valid inputs, including edge cases like empty lists, single nodes/elements, and repeated values, are handled without runtime exceptions.  
   - Convert inputs from pseudocode representations (e.g., list nodes given as plain lists) to fully linked/list/tree forms before any logic that requires structured access.  
   - Add minimal and precise input validation or conversion strictly when necessary to reflect pseudocode intent correctly and prevent type errors (e.g., detect if input is raw list vs. linked nodes, and convert accordingly).

8. **Faithful Logic Translation:**  
   - Convert all pseudocode operators, flow control, and data structures precisely, including bitwise operations, nested loops, conditionals, and increments.  
   - Duplicate nested loops or complex logic exactly as in pseudocode rather than attempting heuristic simplifications that might alter semantics.

9. **Performance Awareness:**  
   - Prioritize correct, idiomatic translations that run within typical 5-second constraints on common problem input sizes.  
   - Avoid heavy overhead or unnecessary abstractions; implement direct, straightforward logic matching pseudocode intent.

10. **Output Format:**  
    - Provide precisely *one* single Python code block, enclosed by triple backticks ```python ... ```.  
    - Do not output anything else.

Input pseudocode:  
[Insert pseudocode here]
```