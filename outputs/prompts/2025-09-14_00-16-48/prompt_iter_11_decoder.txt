Translate the given pseudocode into complete, fully executable, and well-structured Python code that strictly preserves all original class names, method names, signatures, and hierarchy exactly as in the pseudocode, without adding, removing, or changing them.

Your implementation **must** satisfy all of the following:

- Interpret any pseudocode `null` or equivalent literals as Python `None` properly within input data and data structures.
- Provide fully working implementations for all helper classes or data structures (e.g., `TreeNode`, `ListNode`) mentioned or implied by the pseudocode, including constructors and common utility functions that assist in testing.
- Ensure your code uses only the Python standard library and widely accepted built-in modules (e.g., `collections`, `typing`, `math`, `heapq`, `itertools`) to achieve clarity, correctness, and efficiency.
- Your code must handle normal and edge cases robustly and run correctly within 5 seconds on typical inputs.
- Prioritize correctness and fidelity to the pseudocode first; optimize for clarity and idiomatic Python second; then apply non-breaking performance improvements.
- Do not invent unnecessary abstractions, alter API or method signatures, or add extraneous comments or explanations.
- Avoid any test harness code or input/output code outside what the pseudocode specifies; only produce the solution itself.
- Use clear, idiomatic Python constructs and typing hints where helpful.
- Wrap the entire solution in one contiguous Python code block formatted exactly as below:

```python
# your complete solution here
```

Input pseudocode:  
[Insert pseudocode here]