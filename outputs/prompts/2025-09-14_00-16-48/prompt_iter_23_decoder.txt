```python
Translate the given pseudocode into a single, concise, fully runnable Python solution enclosed in one contiguous ```python ... ``` code block.

Your translation must strictly follow these enhanced requirements to maximize accuracy, readability, and test-time correctness:

1. **Exact Structural Fidelity:**  
   - Preserve all class names, method names, method signatures (including parameter names and default values), return types, and class hierarchies *exactly* as in the pseudocode without any renaming, reordering, or omission.  
   - Maintain the same indentation levels and overall structural layout of classes and methods as implied by the pseudocode.

2. **Literal and Data Conversion:**  
   - Convert all pseudocode literals like `null`, `nil`, or language-specific equivalents to Python’s `None` recursively everywhere (including nested structures, default params, inputs, outputs).  
   - Translate any pseudocode operators or constructs idiomatically and precisely — e.g., increment (`++`) as `+= 1`, equality (`=` vs `==`), logical expressions, loops, etc.  
   - Carefully map data types described or implied in pseudocode to appropriate Python built-ins and classes, using typing hints.

3. **Robust Helper Class Implementations:**  
   - If the pseudocode uses standard helper data structures (e.g., `ListNode`, `TreeNode`, `Node`), provide fully-featured Python class definitions for them within the same code block.  
   - Include constructors with type hints, attribute definitions, and override `__init__` accordingly.  
   - Provide utility functions (within the same block) to *build* such structures from common Python literals (lists, nested lists), handling `None` nodes consistently to enable seamless test input generation.  
   - Ensure these utilities and classes match standard conventions commonly expected in coding challenges (e.g., LeetCode style).

4. **Idiomatic and Clean Python Code:**  
   - Use Python 3 idioms with precise type hints from the `typing` module (`List`, `Optional`, `Dict`, `Tuple`, `Union`, etc.).  
   - Avoid extraneous comments, debug prints, or test scaffolding; only minimal comments if critical to clarify complex structures or conversions.  
   - Maintain consistent naming clarity and clean formatting for readability and maintainability.

5. **Minimal and Direct Code:**  
   - Your output must be *only* the Python code enclosed in one triple-backtick code block — no extra narrative or explanation.  
   - Do **not** include any I/O code, main guards, or external testing code — just the direct pseudocode translation and essential helpers.

6. **Standard Library Usage Only:**  
   - Use only Python standard libraries and built-ins permitted in most competitive programming environments (`collections`, `heapq`, `itertools`, `math`, `typing`, `functools`, etc.).  
   - Do not rely on any third-party packages.

7. **Defensive and Correct Input Handling:**  
   - Where pseudocode implies data inputs as lists or nested lists, ensure helper functions *convert* those inputs into the expected class instances robustly (e.g., do not pass raw lists where `TreeNode` is expected).  
   - Handle edge cases and empty inputs gracefully and in line with usual competitive programming norms (e.g., empty lists → `None` trees/lists).  
   - If needed to reflect pseudocode logic, add minimal input validation or transformations—but only as necessary to preserve correctness.

8. **Performance Awareness:**  
   - Generate clean, direct, and correct code first; avoid premature optimization or unnecessary abstraction.  
   - The code should be efficient enough to run on typical problem inputs within 5 seconds.  
   - Prioritize correctness and faithful translation above micro-optimizations.

9. **Consistent Output Format:**  
   - Deliver the entire solution as a single, uninterrupted Python code block:  
     ```python  
     # Complete translated code here  
     ```  
   - No additional text, explanations, separators, or debugging output before or after the code block.

Input pseudocode:  
[Insert pseudocode here]
```