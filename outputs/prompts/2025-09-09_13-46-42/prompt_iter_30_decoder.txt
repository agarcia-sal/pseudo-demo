Translate the given pseudocode into a **complete, production-ready, and fully self-contained Python 3 script** that meets these comprehensive requirements:

- **Retain all identifiers exactly as in the pseudocode** (function names, parameters, variables, classes) without any renaming, abbreviations, or restructuring.
- **Implement every referenced component explicitly and completely**, including classes, nested functions, helper functions, and any implied data structures.
- **Leverage only the Python Standard Library by default.**  
  - If the pseudocode explicitly allows external libraries, include only those minimal dependencies with proper imports, else do not assume any.
- **Perform thorough input validation and type enforcement** on all inputs, raising clear exceptions (`TypeError`, `ValueError`, etc.) for invalid or unexpected input types or values.
- **Apply precise, exhaustive, and consistent type hints everywhere:** on functions (including return types), parameters, local variables, class attributes, and intermediate expressions, strictly compatible with static type checkers like `mypy`.
- **Anticipate and correctly handle all realistic edge cases, boundary conditions, and potential errors** implicitly or explicitly suggested by the pseudocode, including empty inputs, invalid characters, numeric limits, null/None values, and so forth.
- **Write clean, idiomatic, and maintainable Python code using the most efficient algorithms and data structures** to meet typical performance constraints, ensuring all operations settle within a 5-second runtime ceiling on standard input sizes.
- **Do not add any explanatory comments, debug output, example usage, or redundant code.** The output script should be minimalistic yet complete and immediately runnable.
- Your output must be enclosed exactly in a single Python code block with this syntax and no other wrappers or delimiters:

```python
# Complete, minimal, production-grade Python 3 code precisely implementing the given pseudocode
```

This task demands zero post-processing and zero manual refinement; the code should be production-worthy upon generation, passing all correctness, robustness, and performance checks with perfect fidelity to the pseudocode.