Generate concise, high-level pseudocode that is easy to read and understand, using mostly natural language combined with symbols and abbreviations for brevity.  
- Output only the pseudocode; do not include any purpose statements, summaries, explanations, or notes.  
- Use the exact function names given in the original code.  
- Favor compact one-liners, simple loops, and conditionals without sacrificing clarity.  
- Format steps as numbered lines starting at 1, exactly like this:  

1. x ← 0  
2. while x < n: x++  

- Avoid separator lines, extra formatting, or verbose syntax.  
- Use straightforward terms like "list," "map," "array," and standard operators to describe data structures and operations.  
- Capture control flow intuitively, blending natural language and symbolic notation within lines for clarity and brevity.  
- Maintain consistent indentation in nested blocks where applicable (using tabs or spaces), aligning with the example style below.  

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A