Translate the given pseudocode into a fully functional, efficient, and idiomatic Python implementation that exactly matches the pseudocode’s logic, function signatures, and naming conventions. Your output must adhere to the following strict guidelines:

- Return a single, self-contained Python code block enclosed by triple backticks and `python` tag as below:
```python
# Complete Python implementation here
```

- Include all necessary imports from Python’s standard library only (e.g., math, collections, itertools, heapq, typing), without using any external or third-party packages.

- Accurately reproduce all function names, parameter lists, return values, and control flows as described in the pseudocode without alteration.

- Implement any helper classes or functions implied or required by the pseudocode so the solution is runnable and complete out of the box.

- Handle all edge cases and input scenarios explicitly or implicitly defined by the pseudocode, ensuring correctness, robustness, and no runtime errors.

- Optimize for readability, clarity, and performance—your code must run within 5 seconds on typical input sizes, using Python best practices and built-in features without unnecessary overhead.

- Omit all comments, print/debug statements, or explanatory text; provide only clean, production-ready code.

- Use concise, precise, and Pythonic constructs wherever possible, but never alter the fundamental logic or requirements expressed in the pseudocode.

Your submission will be directly used for automated validation and integration; ensure fidelity, completeness, and efficiency above all.