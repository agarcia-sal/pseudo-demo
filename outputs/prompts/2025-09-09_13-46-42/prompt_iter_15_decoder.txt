Translate the given pseudocode into a fully self-contained, executable, and production-quality Python implementation that strictly preserves the original function name, parameter names, control flow, and output type exactly as described. Your solution must:

- Enclose the entire code in a single Python code block, precisely delimited by triple backticks and the word `python`, like so:
```python
# Your complete Python implementation here
```

- Include all necessary helper classes or functions implied by the pseudocode to ensure no external dependencies beyond Pythonâ€™s standard library.
  
- Use only Python standard libraries; do not import or rely on any third-party modules.
  
- Write clear, idiomatic, and efficient Python 3 code, fully leveraging built-in language features, standard data structures, and best practices for readability and maintainability.
  
- Provide comprehensive type hints for all functions, methods, parameters, return types, and any user-defined classes to enhance code clarity, maintain correctness, and support static type checking.
  
- Robustly handle edge cases and input constraints inferred from the pseudocode to avoid runtime errors, exceptions, and undefined behavior.
  
- Optimize for both runtime and memory efficiency, ensuring that the implementation can handle typical inputs and edge cases within 5 seconds on standard hardware without degrading code clarity or correctness.
  
- Use variable and function names that reflect the pseudocode identifiers to maintain semantic alignment without unnecessary renaming.
  
- Do not include any comments, explanatory text, debugging prints, or extraneous output; deliver only the exact Python code that implements the given pseudocode logic faithfully and completely.
  
- Avoid partial or stub code; the output must be a complete, executable function or class as dictated by the pseudocode.

Your submission will be used directly for evaluation and deployment. Ensure your code is correct, complete, clear, and optimized under these constraints.