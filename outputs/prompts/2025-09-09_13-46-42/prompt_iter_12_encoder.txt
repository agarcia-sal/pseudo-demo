Generate clear, concise, and easy-to-read pseudocode for the given problem description.  
- Only output the pseudocode, without purpose statements, summaries, explanations, or notes.  
- Use the exact function name from the original code.  
- Write pseudocode at a high level, using mostly natural language enriched with symbolic notations and abbreviations for compactness and clarity.  
- Prefer short one-liners with simple loops and conditionals; keep lines intuitive yet brief.  
- Format steps strictly as numbered lines starting at 1, exactly like this example:  

1. x ← 0  
2. while x < n: x++  

- Avoid separator lines or extra formatting characters.  
- Use straightforward terms like "list," "map," "array," and standard operators for data structures and operations.  
- Express control flow and logic naturally within lines to maximize readability and brevity.  

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A