Translate the given pseudocode into a fully self-contained, production-ready Python 3 script that satisfies these exacting criteria:

- Preserve **all original identifiers verbatim** (function names, parameters, variables, classes) with no renaming or abbreviation.
- Explicitly implement **every referenced and implied entity**, including nested and helper functions, all classes, and all data structures mentioned or necessary.
- Default to using only the Python Standard Library; incorporate external libraries **only if explicitly authorized by the pseudocode**, importing minimally and precisely.
- Enforce **strict and comprehensive input validation and type checking** on every input and internal data structure. Raise clear, appropriate exceptions (`TypeError`, `ValueError`) on invalid types, values, or structural inconsistencies.
- Apply **precise, exhaustive, and consistent static type annotations** everywhere: function signatures (arguments and return types), local variables, class attributes, and intermediate expressions, following PEP 484 and fully compatible with `mypy`.
- Anticipate and robustly handle **all natural and edge-case scenarios**, including boundary conditions, empty or malformed inputs, `None` values where applicable, invalid characters or values, and other potential exceptions suggested by the pseudocode.
- Implement **the most efficient algorithms and data structures** to ensure correctness and that execution completes within a 5-second timeout on typical inputs.
- Deliver **clean, idiomatic, and maintainable Python code** without unnecessary verbosity or redundancy; omit comments, debugging code, and example usage.
- Your output must be a **single Python code block starting with ```python and ending with ```**, containing only the codeâ€”no explanations or extra text.

This prompt demands a **production-quality, immediately runnable script** that fully and precisely satisfies the pseudocode intent, correctness, robustness, and performance with zero need for post-editing or refinement.