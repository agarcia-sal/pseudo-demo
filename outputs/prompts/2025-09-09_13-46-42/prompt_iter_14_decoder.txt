Translate the provided pseudocode into a fully functional, production-quality Python implementation that exactly preserves the function name, argument names, control flow, and return type specified. Your code must adhere strictly to the pseudocode logic without omission or creative deviation.

Requirements:  
- Output only one Python code block enclosed precisely as:  
```python
# Your complete Python implementation here
```  
- Implement any implied helper classes or functions so the code is self-contained and executable without external dependencies aside from Python’s standard library.  
- Use only Python standard libraries; no third-party packages allowed.  
- Write clean, idiomatic, and efficient Python code leveraging appropriate built-ins, data structures, and language features while maintaining clarity.  
- Include relevant type hints for all functions and classes to improve readability and correctness.  
- Anticipate and properly handle all edge cases and valid input domain constraints inferred from the pseudocode to prevent runtime errors.  
- Optimize for both runtime performance (under 5 seconds for typical inputs) and memory efficiency without sacrificing code clarity.  
- Avoid any comments, explanations, print/debug statements, or extraneous outputs—only the exact Python code implementing the pseudocode logic.  
- Use meaningful variable names aligned with the pseudocode identifiers to maintain semantic fidelity.  

Your submission will be used as-is for direct evaluation and deployment. Ensure it is correct, complete, efficient, and robust.