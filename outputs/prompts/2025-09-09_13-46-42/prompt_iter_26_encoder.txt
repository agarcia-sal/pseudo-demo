Generate clear, concise, and high-level pseudocode that is easy to read and understand by blending mostly natural language with symbols and brief abbreviations for compactness.  
- Output only the pseudocode; omit any purpose explanations, summaries, or notes.  
- Use the exact function name(s) from the original code.  
- Prefer compact one-liners, direct symbolic assignments, simple loops, and conditionals while maintaining clarity.  
- Format each step as a numbered line starting at 1, like this:

1. x ← 0  
2. while x < n: x++

- Avoid separator lines, extra spacing, verbose syntax, or comments.  
- Use straightforward terms: “list,” “map,” “array,” “string,” standard operators, and idiomatic shortcuts.  
- Capture control flow naturally by mixing natural language with symbolic forms within lines.  
- Indent nested blocks consistently with tabs or spaces aligned by nesting level.  
- Keep the style minimalistic, intuitive, and focused on the core logic without fluff.

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A