Translate the provided pseudocode into an immediately runnable, fully self-contained, and highly efficient Python 3 implementation that strictly adheres to the following criteria:

- Precisely retain all original function names, parameter names, class names, and variable names exactly as given in the pseudocode, without any renaming or abbreviation.
- Implement every user-defined class, helper function, and data structure explicitly or implicitly implied by the pseudocode, ensuring zero reliance on non-standard or external third-party libraries. Only Python Standard Library modules are permitted.
- Guarantee robust handling of all edge cases, input constraints, and any potential error scenarios suggested or implied by the pseudocode, so that the output is correct and exception-free under all valid inputs.
- Produce clean, idiomatic, and concise code that balances readability, runtime efficiency, and memory usage, optimized so that the entire solution reliably executes within 5 seconds per run.
- Include comprehensive and precise Python type annotations for all variables, function parameters, returns, and class attributes to maximize clarity and facilitate static type checking.
- Avoid any extraneous content such as comments, print/debug statements, placeholder code, or explanations â€” output only the minimal complete code necessary as the implemented solution.
- Output the entire solution enclosed strictly within a single Python code block formatted exactly as:

```python
# Complete and exact Python implementation here
```

Your final output should be a ready-to-run, fully testable Python program corresponding directly to the pseudocode provided, ensuring correctness, clarity, and optimal performance with no further modification required.