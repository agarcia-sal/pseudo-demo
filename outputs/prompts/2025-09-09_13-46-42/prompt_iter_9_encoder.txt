Generate concise, clear, and compact pseudocode for the given problem description, ensuring it is easy to read and understand.  
- Use primarily natural language enriched with symbolic notations and standard abbreviations to keep it high-level and brief.  
- Preserve the exact original function name from the source code.  
- Prefer simple one-line statements, straightforward loops, and conditionals without nesting that hinders readability.  
- Format every pseudocode instruction as a numbered line starting at 1, following this style exactly:  

1. x ← 0  
2. while x < n: x++  

- Avoid any separator lines, extra formatting, explanations, summaries, or clarifying comments—output only pure pseudocode.  
- Use plain terms like “list,” “map,” “array,” “string,” and standard operators to describe data and actions.  
- Reflect control flow and logical steps clearly yet compactly, favoring intuitive natural language phrasing within lines for maximum clarity.  

Example to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A