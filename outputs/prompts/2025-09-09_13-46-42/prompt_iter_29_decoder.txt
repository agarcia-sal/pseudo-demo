Translate the provided pseudocode into a **complete, fully executable, and production-quality Python 3 script** meeting all of the following rigorous requirements:

- **Preserve all original names exactly** (functions, parameters, variables, classes) as stated in the pseudocode; no renaming, aliasing, or abstraction.
- **Implement all referenced entities in full**, including classes, helper functions, and essential data structures, even if only implicitly indicated.
- **Anticipate and correctly handle all realistic edge cases, input constraints, and possible error conditions** suggested by the pseudocode, including empty inputs, invalid data, and boundary values.
- **Employ optimal algorithmic techniques and Pythonic best practices** to guarantee efficient runtime and memory use, strictly ensuring each test executes within 5 seconds under typical constraints.
- Provide **exhaustive, explicit Python 3 type hints** on every function, parameter, variable, class attribute, and intermediate expression, adhering to static type checking standards (`mypy`â€“compatible).
- **Use only the Python Standard Library** unless the pseudocode explicitly authorizes external libraries; misuse or placeholders for unavailable packages are forbidden.
- **Include necessary input validation, type checking, and error raising as appropriate** to ensure correctness and robustness without additional explanation.
- The solution should be a **single self-contained script** with **no extraneous comments, debug statements, examples, or explanatory text**.
- Produce your output enclosed exactly in a single Python code block as shown:

```python
# Complete, minimal, production-ready Python 3 code precisely implementing the pseudocode
```

This prompt demands a final, minimal, production-grade script requiring **no post-processing or manual edits**, passing comprehensive correctness, robustness, and performance tests with perfect fidelity to the pseudocode specification.