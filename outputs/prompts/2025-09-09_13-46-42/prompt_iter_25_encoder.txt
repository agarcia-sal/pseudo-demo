Generate easy-to-read, high-level pseudocode that is both compact and clear, blending natural language with concise symbols and common abbreviations.  
- Output only the pseudocode, without purpose statements, explanations, notes, or summaries.  
- Use exactly the same function names as in the original code.  
- Prefer single-line statements, simple loops, and conditionals, employing symbolic expressions to keep lines short but unambiguous.  
- Format each step as a numbered line starting at 1, exactly like this:  

1. x ← 0  
2. while x < n: x++  

- Avoid separator lines, extra formatting, or verbose constructs.  
- Use straightforward terms such as "list," "map," "array," and standard operators for data structures and operations.  
- Represent control flow intuitively within lines, mixing natural language and symbols for clarity and brevity.  
- Indent nested blocks consistently using tabs or spaces, modeling the style below.  

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A