Translate the provided pseudocode into an executable, efficient, and idiomatic Python function or class implementation, strictly retaining all original function and method names, parameters, and logic as described. Your output must:

- Be enclosed fully within a single, well-formatted Python code block as shown:
```python
# Complete Python implementation here
```

- Include all necessary imports (standard library or widely available built-ins only), helper functions, or classes required by the pseudocode, so the code is self-contained and ready to run.

- Optimize for performance and clarity while conforming exactly to the pseudocode’s intent, ensuring it executes within 5 seconds on typical input sizes.

- Handle all edge cases implied or directly stated in the pseudocode, producing correct and robust outputs.

- Avoid any commentary, inline or block comments, print statements, or additional explanations—only the clean, final code solution.

- Preserve Pythonic style and best practices, but do not change function names, parameter lists, or return values from those given in the pseudocode.

- Use Python’s standard library features freely, including built-in modules such as math, collections, itertools, heapq, or typing, but do not import external third-party libraries.

Your submission should be a self-contained Python implementation faithful to the pseudocode and immediately usable for automated testing or integration.