Generate clear, concise, and high-level pseudocode that is easy to read and understand, combining natural language with symbols and abbreviations for compactness without losing clarity.  
- Output only the pseudocode; do not include any purpose statements, summaries, explanations, or notes.  
- Use the exact function names as given in the original code.  
- Prefer brief one-line statements, simple loops, and conditionals, using symbolic operators and idiomatic expressions to enhance brevity.  
- Format each pseudocode step as a numbered line starting from 1, exactly like this:  

1. x ← 0  
2. while x < n: x++  

- Avoid separator lines, comments, extra formatting, or verbose syntax.  
- Use straightforward terms such as "list," "map," "array," "string," and standard mathematical and logical operators.  
- Use indentation for nested blocks to reflect control flow, keeping it consistent and minimal (tabs or spaces).  
- Blend natural language and symbols fluently to maintain readability and brevity.  
- When possible, express conditions and actions in concise, natural phrasing (e.g., "set min_i to j if A[min_i] > A[j]").  
- Always keep data structure definitions and manipulations straightforward and simple.  

Example pseudocode style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A