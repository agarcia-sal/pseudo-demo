Generate concise, clear, and compact pseudocode for the given problem description, prioritizing readability and high-level abstraction through natural language with minimal but effective symbolic notation and abbreviations.  
- Output only the pseudocode; omit any purpose statements, summaries, explanations, or clarifying notes.  
- Match original function names exactly as in the source code.  
- Use predominantly one-line statements, simple loops, and conditionals for brevity without loss of clarity.  
- Format pseudocode steps as numbered lines starting at 1, strictly following this pattern:  

1. x ← 0  
2. while x < n: x++  

- Avoid all separator lines, extra formatting, or extraneous characters.  
- Describe data structures and operations with straightforward terms like "list," "map," "array," using standard operators and constructs intuitively.  
- Express control flow naturally within lines, blending natural language with symbolic clarity.  
- Favor high-level constructs and concise syntax without verbose detail, ensuring the pseudocode can be read easily and understood quickly.  

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A