Translate the provided pseudocode into a fully executable, idiomatic, and production-quality Python 3 script by strictly adhering to the following comprehensive requirements:

- Exactly preserve **all original names** (function names, parameters, variables, classes) with zero renaming or abbreviation.
- Include **full implementations of every entity** explicitly or implicitly referenced by the pseudocode, including all helper or nested functions, classes, and essential data structures.
- Use only the **Python Standard Library by default**; import external packages **only if the pseudocode explicitly permits or requires them**, with minimal and precise imports.
- Rigorously enforce **complete input validation**: check types, value ranges, and structural correctness of every function argument and internal data construct, raising explicit exceptions (`TypeError`, `ValueError`) with descriptive messages upon invalid input.
- Apply **comprehensive static type annotations everywhere** — function signatures, class attributes, local variables, and complex expressions — fully compliant with PEP 484 and suitable for full `mypy` static type checking.
- Anticipate and robustly handle **all natural, boundary, and edge cases**, including but not limited to empty inputs, out-of-range values, malformed data, `None` inputs, invalid characters, and any other error conditions logically inferable from the pseudocode.
- Implement **efficient, well-optimized algorithms and data structures** that guarantee correctness and completion within a 5-second runtime on typical inputs.
- Deliver **clean, concise, maintainable, and idiomatic Python code** without extraneous verbosity — omit comments, debugging artifacts, test harnesses, or explanatory text.
- Your response must be a **single Python code block enclosed strictly by ```python and ```**, containing only the translated code exactly matching the pseudocode logic and naming.

This prompt demands an immediately usable Python script that flawlessly complies with the pseudocode specification, balancing correctness, robustness, performance, and strict type safety — no further editing should be necessary.