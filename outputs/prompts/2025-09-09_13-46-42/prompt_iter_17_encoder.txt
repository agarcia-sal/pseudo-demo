Generate concise, clear, and easy-to-read pseudocode for the given problem description. Use predominantly natural language with symbolic notations and abbreviations to keep it compact and high-level.  
- Output only the pseudocode; exclude any purpose statements, summaries, explanations, or clarifying notes.  
- Retain the original function name exactly as in the source.  
- Prefer terse one-liners and simple control structures (loops, conditionals) that reflect logic and flow intuitively.  
- Format each step as a numbered line starting at 1, following this exact style:  

1. x ← 0  
2. while x < n: x++  

- Avoid any separator lines or extraneous formatting characters.  
- Use straightforward terms for data structures and operations (e.g., “list,” “map,” “array,” standard operators).  
- Express control flow simply and naturally within lines for readability.  

Example pseudocode style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A