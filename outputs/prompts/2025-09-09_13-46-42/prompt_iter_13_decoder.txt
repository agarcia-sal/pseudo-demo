Translate the given pseudocode into a complete, efficient, and idiomatic Python implementation that strictly follows the pseudocode’s logic, control flow, function names, parameters, and return types without deviation. Your output must meet these requirements:

- Provide only one Python code block using triple backticks with `python` specifier, exactly as shown below:
```python
# Your fully working Python code here
```

- Preserve the exact function name(s), argument names, and return structure from the pseudocode.

- Implement any missing helper functions or classes implied by the pseudocode so the code runs independently without assumptions.

- Use Python standard library modules freely as needed to enhance clarity, performance, and correctness. Avoid third-party packages.

- Handle all edge cases and input constraints that can be reasonably inferred from the pseudocode, ensuring no runtime exceptions or logical errors.

- Optimize for readability, clarity, and runtime efficiency within a 5-second execution constraint, utilizing best Python practices, including type hints when appropriate.

- Do not include any comments, debug prints, explanatory text, or extra output—only the pure, production-quality Python code implementing the given pseudocode logic.

- Use Python built-ins, idiomatic constructs, and clear variable names to make the code concise yet fully faithful to the original pseudocode semantics and requirements.

Your submission will be directly validated and used as-is; ensure it is correct, complete, and performant on all reasonable inputs derived from the pseudocode.