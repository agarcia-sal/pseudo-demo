Generate clear, concise, and high-level pseudocode that is easy to read and understand by blending natural language with simple symbolic notation and abbreviations for brevity.  
- Output only the pseudocode; do not include any descriptions, explanations, comments, or summaries.  
- Use the exact function names as given in the original code.  
- Prefer compact one-liners where possible, simple loops, and conditionals without losing clarity.  
- Format every step as a numbered line starting at 1, exactly like this:

1. x ← 0  
2. while x < n: x++  

- Omit any separator lines, extra decorative formatting, or verbose syntax.  
- Use straightforward, common terms such as "list," "map," "array," and standard operators for clarity.  
- Represent control flow intuitively by combining natural language and symbolic notation within lines, and indent nested blocks consistently using tabs or spaces.  
- Keep pseudocode focused on key algorithmic steps and core logic, avoiding implementation details unless essential.  
- Emulate the example style below precisely:

Example pseudocode style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A