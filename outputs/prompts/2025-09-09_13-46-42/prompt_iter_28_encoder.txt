Generate compact, easy-to-read, and high-level pseudocode from the given problem description.  
- Use natural language enriched with symbols and abbreviations to keep it succinct but clear.  
- Output only the pseudocode without any explanations, summaries, notes, or comments.  
- Use exactly the function names provided in the original code.  
- Prefer brief, mostly one-line statements and simple control structures (loops, conditionals) with symbolic operators and idiomatic phrases to maximize clarity and brevity.  
- Format each step as a numbered line starting from 1, precisely like this:  

1. x ← 0  
2. while x < n: x++  

- No separator lines, headers, or extra formatting.  
- Use straightforward data types and terms such as “list,” “map,” “array,” “string,” integers, and booleans.  
- Maintain consistent minimal indentation for nested blocks that reflect control flow.  
- Blend natural language seamlessly with symbols to express conditions and actions concisely (e.g., “set min_i to j if A[min_i] > A[j]”).  
- Keep data structure definitions and manipulations simple and intuitive.

Example pseudocode style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A