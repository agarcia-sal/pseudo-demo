Generate concise, clear, and easy-to-read pseudocode from the given problem description. Preserve all original class and function names and their structure exactly as in the problem. Write pseudocode that is high-level, compact, and mostly uses natural language enriched with symbolic notations and abbreviations. Favor one-liners and maintain clarity without verbosity. Do NOT include any purpose, summaries, comments, explanations, or notes—output strictly pseudocode only.

Follow this format precisely:

1. VARIABLE x ← 0  
2. WHILE x < n: x++  

Use consistent indentation where applicable, and keep the pseudocode understandable at a glance. Avoid separator lines or extraneous formatting. Your output should replicate the original class and method layout (including indentation and definitions). Prioritize meaningful natural language constructs combined with symbolic brevity. The output must run conceptually mapped to the input problem’s logic within the same class and methods.

Example:  
If the original code is:  
```  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Then, output:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION  
```

Optimize for the best output quality within a 5-second processing timeout.