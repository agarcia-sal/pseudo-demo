Generate concise, clear, and easy-to-read pseudocode from the given problem description, strictly preserving all original class names, function names, method signatures, and their exact nesting and structure. Produce pseudocode that is high-level, compact, and mostly natural language enriched with symbolic expressions and common abbreviations. Favor one-liner statements where clarity permits, avoiding verbosity while maintaining full logical fidelity to the input code.

Do NOT include any explanations, commentary, summaries, or notes—output **only pseudocode**, formatted consistently with appropriate indentation relevant to control structures and nesting. Do NOT add separator lines or extraneous formatting.

Maintain exact naming for classes, methods, parameters, and variables as in the original, adapting types and data structures to clear natural language descriptions (e.g., list_of_numbers, tree_node), but keep argument order and structure.

Use the following minimalist format style precisely:

1. x ← 0  
2. while x < n: x++

For example, given:

```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Optimize for clarity and conceptual mapping to the original logic within the same class and method boundaries. Produce pseudocode that is immediately understandable, logically sound, and as brief as possible without sacrificing readability or correctness. Assume all input data types and object structures remain consistent with the problem statement.

Do not rewrite or synthesize code beyond generating direct pseudocode from the given input. Your pseudocode must fully and correctly represent the logic and flow of the original source within a 5-second generation limit.