```python
Translate the given pseudocode into a complete, executable, and optimized Python implementation. Your solution must adhere strictly to the class names, method names, method signatures, and overall structural hierarchy as specified in the pseudocode, without any renaming or structural modifications.

Your implementation must:

- Define any required helper data structures or classes (e.g., ListNode, TreeNode) with industry-standard Python conventions and full type hinting where sensible.
- Robustly accept inputs in primitive Python forms or common serialized inputs (e.g., nested lists, JSON-like nulls), and internally convert these to proper class instances without exposing conversion logic outside the main solution classes or functions.
- Handle Python-to-pseudocode data type mappings and edge cases gracefully, including null/None and empty inputs.
- Use built-in Python standard libraries or widely used third-party packages for optimal readability and efficiency; ensure runtime performance viable within a 5-second execution time.
- Include thorough input validation and edge case handling to prevent runtime errors on all inputs logically implied by the pseudocode.
- Return or print outputs exactly as the pseudocode specifies, without adding explanatory comments, debug prints, or extra output.
- Replace any pseudocode or JSON-style literals (e.g., `null`) with valid Python equivalents (`None`) globally in inputs or examples, preventing NameError and runtime failures.
- Enclose your entire final output strictly inside a single markdown python code block:

```python
# your entire code here
```

Do not provide any explanations, comments, or text outside the code block. Maintain precision and correctness to produce reliable, ready-to-run Python code faithfully representing the original pseudocode.
```