```python
Translate the given pseudocode into fully working Python code that exactly preserves all class names, method names, signatures, and class hierarchies as specified in the pseudocode. Your generated code must:

- Use identical class and method names and signatures, with no renaming or structural changes.
- Automatically detect when helper classes or data structures (e.g., ListNode, TreeNode) are implied but not provided, and define them following widely accepted Python conventions.
- Implement robust, reusable input deserialization utilities to convert inputs from primitive Python types or common serialized JSON-like forms (such as lists with None/null placeholders for trees or linked lists) into proper instances of required classes, seamlessly handling null equivalents (e.g., both None and JSON-style null).
- Carefully implement output serialization if pseudocode output suggests complex data types, ensuring returned or printed results strictly follow the pseudocode’s indicated format—including lists, primitives, or class instances—without added commentary or modification.
- Incorporate comprehensive input validation and gracefully handle all edge cases, closely matching the input types and constraints implied by the pseudocode, to prevent runtime errors.
- Apply efficient, idiomatic Pythonic algorithms and data structures. You may use appropriate standard libraries and external packages (e.g., collections, heapq, itertools) if they improve clarity and performance. Your solution should run within a 5-second limit on typical inputs.
- Avoid any explanations, comments, or extraneous text outside the code block.
- Provide only the Python code enclosed in a single markdown code block starting with ```python and ending with ```.

Focus on correctness, completeness, input/output fidelity, and performance within the runtime limit.
```