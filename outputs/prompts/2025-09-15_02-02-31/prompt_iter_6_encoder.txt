Generate concise, clear, and easy-to-read pseudocode directly from the given problem description. The pseudocode must:

- Preserve all original class names, function names, and their exact structure (including indentation and nesting).
- Use mostly natural language enriched with symbolic notations and abbreviations, favoring compact, high-level representations.
- Prefer one-liners wherever possible without sacrificing clarity or correctness.
- Be consistent in formatting following this exact style:

  1. x ← 0  
  2. while x < n: x++
  
- Avoid any comments, explanations, summaries, or notes—output strictly pseudocode only.
- Omit separator lines, extra formatting, or decorative elements.
- Express loops, conditions, variables, operations, and data structures clearly and succinctly, enabling direct conceptual mapping back to the original code logic.
- Maintain meaningful natural language phrases combined with symbolic brevity to improve readability and conceptual accuracy.

Example:  
Given code:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg
```  
Produce pseudocode:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION
```

Optimize your pseudocode output to be compact, natural, and high-level while ensuring strict adherence to function and class definitions and correctness within a 5-second processing window.