Generate concise, clear, and high-level pseudocode that precisely represents the input problem’s logic, structure, and naming. Preserve all original class and function names, including their hierarchy and indentation, producing output inside the exact class and function scopes.

Express control flow with natural language combined with standard pseudocode abbreviations and symbols. Favor compact one-line statements wherever clarity permits. Use expressive constructs such as:  
- `FOR each item IN collection`  
- `IF condition THEN ... ELSE ...`  
- `WHILE condition DO ...`  
- `SET variable TO expression`  
- `INCREMENT variable BY value`  
- `RETURN value`  

Avoid verbose explanations, comments, or any output besides the pseudocode itself. Do not add extra text or separators.

Number each pseudocode line sequentially starting at 1, with consistent indentation reflecting structure, for example:

1. FUNCTION calc_average(list_of_numbers)  
2.   SET total_sum TO 0  
3.   FOR each number IN list_of_numbers  
4.     INCREMENT total_sum BY number  
5.   SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
6.   RETURN average_value  
7. END FUNCTION

Ensure all variable, class, and function names exactly match those in the input code. Use commonly understood pseudocode words and symbols for operations (e.g., ← for assignment, += for increment if fits one line).

Your output must be reliably generated within 5 seconds and always be natural, readable, compact, maintain original logic flow, and suitable for implementation.