Generate concise, clear, and compact pseudocode that accurately and fully reflects the logic and structure of the given problem description. Preserve all original class and function names exactly as provided, maintaining the same class and object hierarchy and indentation levels.  

Use mostly one-line statements where clarity allows, employing natural language enriched with standard symbolic notations and common pseudocode abbreviations. Favor high-level constructs (e.g., FOR each item IN collection, IF condition THEN ...) that transparently represent control flow, data traversal, and operations. Avoid verbosity or cryptic shorthand; every statement must be immediately understandable.

Do NOT include any explanations, comments, notes, summaries, or code outside the pseudocode itself. Output ONLY the pseudocode corresponding exactly to the input, with no extra text.

Follow this precise output style with consistent indentation, no separator lines or decorative formatting, and numbering each line sequentially as shown below:

1. x ‚Üê 0  
2. while x < n: x++  

Example:  
Input code:  
```  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Output pseudocode:  
```
FUNCTION calc_average(nums)  
    SET total TO 0  
    FOR each num IN nums  
        INCREMENT total BY num  
    SET avg TO total DIVIDED BY LENGTH OF nums  
    RETURN avg  
END FUNCTION  
```

Optimize the pseudocode for readability, naturalness, and exact structural fidelity within the given function and class layout, ensuring it can be generated reliably and quickly within 5 seconds.