Generate clear, concise, and high-level pseudocode that precisely mirrors the input problem’s logic, structure, and naming. Preserve all original class and function names, including hierarchy and indentation. The pseudocode should be readable, using natural language enhanced with standard symbols and well-known pseudocode abbreviations, favoring compact one-line statements where clarity allows. Use expressive high-level constructs (e.g., FOR each item IN collection, IF condition THEN …) that transparently represent control flow, data traversal, and operations. Avoid verbose or cryptic forms. Do NOT add comments, explanations, summaries, or text besides the pseudocode itself. Output ONLY the pseudocode exactly reflecting the input.

Use consistent indentation and number each line sequentially starting from 1, as in the format below:

1. x ← 0  
2. while x < n: x++  

Example input:  
```  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Corresponding output pseudocode:  
```
FUNCTION calc_average(nums)  
    SET total TO 0  
    FOR each num IN nums  
        INCREMENT total BY num  
    SET avg TO total DIVIDED BY LENGTH OF nums  
    RETURN avg  
END FUNCTION  
```

Ensure the output pseudocode is compact, uses mostly one-line statements, keeps all names and structures intact, and can be generated reliably within 5 seconds with natural, readable phrasing aligned to the input code’s flow.