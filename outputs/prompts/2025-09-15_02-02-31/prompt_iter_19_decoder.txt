Translate the given pseudocode into optimized, clean, and production-quality Python code that:

- Exactly preserves all class names, method names, signatures, return types, and hierarchical structure as specified in the pseudocode without any renaming or restructuring.
- Automatically defines and integrates any standard auxiliary classes or data structures (e.g., ListNode, TreeNode) with industry-standard Python conventions and typing, ensuring compatibility with typical problem inputs.
- Seamlessly accepts inputs in their typical forms, including primitive Python objects and common serialized formats (e.g., lists for trees or linked lists with `None` for null), internally converts them into appropriate class instances, and exposes only the specified interfaces externally, hiding all conversion logic.
- Rigorously sanitizes inputs and handles edge cases, invalid or unexpected inputs gracefully, preventing runtime errors or exceptions.
- Employs efficient algorithms and optimized Python idioms; leverages Python built-in libraries and widely adopted third-party packages when beneficial for performance or clarity—all while respecting a strict 5-second runtime limit.
- Returns or prints results exactly as dictated by the pseudocode’s return statements or output requirements, without any extra commentary, debugging info, or explanatory comments.
- Outputs only the complete and self-contained Python code block starting with ```python and ending with ``` wrapping the entire code.

Do not output anything except the requested Python code block.