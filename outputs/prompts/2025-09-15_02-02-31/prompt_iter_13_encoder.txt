Generate clear, compact, and easy-to-read pseudocode from the provided problem description while preserving all original class and function names and their structure exactly as given. Your pseudocode should be high-level and concise, favoring natural language enriched with symbolic notations and abbreviations, using mostly one-liners to maintain clarity without verbosity.

Strictly produce pseudocode only—do NOT include any purpose, summary, explanations, comments, or clarifications.

Adhere to the original class and method layout including indentation and definitions, and ensure the pseudocode conceptually matches the input problem logic.

Use this exact format for control structures and assignments, emphasizing brevity and readability:

1. x ← 0  
2. while x < n: x++

Avoid any separator lines or extraneous formatting.

Example:  
Given code:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```
Output pseudocode:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Optimize the pseudocode so it is highly readable, mostly one-liners with meaningful natural language phrases combined with symbolic brevity, and maintain all class and function names exactly. Ensure your output can be intuitively mapped back to the original code within the same class/object structure.

Process and generate the pseudocode within 5 seconds for best output quality.