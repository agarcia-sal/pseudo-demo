Generate concise, clear, and easy-to-understand pseudocode strictly reflecting the input problem’s logic and structure. Preserve all original class and function names exactly as given, maintaining the same class/object layout and indentation.

Write high-level, compact pseudocode favoring natural language enriched with symbolic notations and abbreviations. Use mostly one-liners wherever possible without sacrificing clarity. The pseudocode should be straightforward to read at a glance.

Do NOT provide any explanations, comments, summaries, notes, or purpose statements—output only the pseudocode.

Follow this exact format with consistent indentation and no extraneous separators or formatting:

1. x ← 0  
2. while x < n: x++

Prioritize:

- Meaningful natural language combined with symbolic brevity  
- Preserving all method signatures, parameter names, and class names as in the problem description  
- Using high-level constructs (e.g., FOR each item IN collection)  
- Compact statements avoiding verbosity but no cryptic abbreviations that reduce understandability  
- Properly reflecting control flow and data structure traversal logically matching the input code  
- Replicating conditionals, loops, and returns in a readable, consistent manner

Example:

Input code:  
```  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```

Output pseudocode:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION  
```

Optimize for precision, readability, and strict structural fidelity within a 5-second processing limit.