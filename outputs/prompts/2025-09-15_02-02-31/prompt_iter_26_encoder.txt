Generate concise, clear, and natural pseudocode that directly reflects the input problem’s code logic and flow. Preserve all original class and function names exactly, maintaining their hierarchy, indentation, and object-oriented structure. Use compact, expressive constructs combining natural language with standard pseudocode symbols and abbreviations. Favor mostly one-line statements without losing clarity, utilizing symbolic operators (e.g., ←, +=, ==, <=), standard control flow phrasing (e.g., FOR each item IN collection, IF condition THEN … ELSE …), and typical pseudocode keywords (e.g., FUNCTION, CLASS, RETURN, END FUNCTION). Avoid comments, explanations, summaries, or any text beyond the pseudocode itself. Do not add or omit variables, statements, or structural elements from the original code.

Use consistent indentation with line numbers starting from 1, formatted as:

1. x ← 0  
2. while x < n: x++

The output must be compact yet readable, faithfully preserving naming and structural details (like nested functions or methods) and be reliably producible within 5 seconds.

Example:

Input code:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```

Expected pseudocode output:  
```
1. FUNCTION calc_average(nums)  
2.     SET total TO 0  
3.     FOR each num IN nums  
4.         INCREMENT total BY num  
5.     SET avg TO total DIVIDED BY LENGTH OF nums  
6.     RETURN avg  
7. END FUNCTION  
```