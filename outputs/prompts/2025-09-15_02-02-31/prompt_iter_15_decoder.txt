Translate the provided pseudocode into fully functional, clean, and efficient Python code. Strictly preserve all class names, method names, signatures, and structural hierarchy exactly as given in the pseudocode. Your implementation must:

- Exactly match the class definitions and method signatures without any renaming or structural changes.
- Identify and implement any necessary helper classes or functions (e.g., ListNode, TreeNode) to support standard custom data types; they must follow industry-standard Python conventions.
- Robustly handle inputs that may be given as primitive Python objects or common serialized JSON-like formats (e.g., lists for trees or linked lists) by internally transforming them into appropriate class instances without exposing this complexity outside the main solution.
- Use efficient algorithms and Python standard libraries or widely adopted third-party libraries where appropriate to maximize clarity, correctness, and runtime performance within a 5-second execution limit.
- Include comprehensive input validation and edge case handling to avoid runtime errors on all typical inputs implied by the pseudocode context.
- Return or print results exactly as specified by the original pseudocode's return statements or output conventions, without added explanations or comments.
- Output only the complete Python code snippet, wrapped inside a single markdown code block starting with ```python and ending with ```.

Do not add any explanation, commentary, or extraneous text outside the code block.