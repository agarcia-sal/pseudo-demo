Translate the given pseudocode into clean, correct, and fully functional Python code that matches the pseudocode exactly in class names, method names, signatures, and structure. Your implementation should:

- Preserve all class and method names, signatures, and nesting precisely as in the pseudocode.
- Automatically define any helper classes or standard data structures (e.g., ListNode, TreeNode) needed to support common custom data types, adhering to Python industry standards.
- Include robust, reusable input normalization functions that convert any input (including raw Python literals, JSON-like lists, or nullable elements like `null`) into appropriate class instances internally. These transformations must be completely encapsulated and not exposed outside the main solution.
- Handle `null` and other JSON-like nulls gracefully by mapping them to `None` internally, ensuring compatibility with test inputs using such representations.
- Implement comprehensive input validation and cover all relevant edge cases implied by the pseudocode to avoid runtime errors.
- Use efficient algorithms and Python built-in or popular standard libraries to optimize for both clarity and performance under a 5-second execution limit.
- Strictly follow the output and return conventions of the pseudocode without adding any extraneous print statements, debugging info, or comments.
- Output only the complete, ready-to-run Python code snippet enclosed in a single markdown code block starting with ```python and ending with ```.

Do NOT provide any explanations, commentary, or additional text outside the code block.