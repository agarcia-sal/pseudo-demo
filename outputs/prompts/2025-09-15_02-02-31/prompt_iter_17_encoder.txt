Generate concise, clear, and easy-to-read pseudocode that accurately represents the logic and structure of the input problem without adding any explanations, comments, or notes. Preserve all original class names, function names, parameter names, and maintain the exact class/object layout and indentation as given.

Use mostly compact, high-level natural language with symbolic notations and abbreviations to express operations and control flow. Favor one-liners and minimal verbosity without sacrificing clarity or readability.

Do NOT include any summaries, descriptions, or extraneous formatting such as separator lines. Output only the pseudocode following this exact style, with consistent indentation and no additional delimiters:

1. x ‚Üê 0  
2. while x < n: x++

Prioritize:

- Clear and meaningful natural language combined with symbolic brevity  
- Keeping all method and class signatures exactly as in the original problem  
- Using high-level constructs like FOR each item IN collection, WHILE condition, IF condition THEN  
- Compact statements that preserve understandability (avoid cryptic abbreviations)  
- Faithfully representing conditionals, loops, returns, and control flow in a logically consistent and readable manner  
- Maintaining structural fidelity in indentation and nesting matching the original code hierarchy  

Example input code:  
```  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```

Expected pseudocode output:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION  
```