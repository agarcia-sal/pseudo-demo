Generate clear, concise, and easy-to-read pseudocode from the given problem description.  
Produce the pseudocode using mostly natural language enriched with symbolic notations and abbreviations, balancing readability and compactness.  
Keep it high-level and structured, using one-liners whenever possible without losing clarity.  
Strictly maintain all original class names, function names, parameters, and their object-oriented structure exactly as presented in the problem description.  
Do not include any purpose, overview, explanations, notes, or comments—output only the pseudocode itself.  
Follow this numbered format precisely, using indentation as needed to denote blocks or scopes:

1. FUNCTION function_name(parameter1, parameter2, ...)
2.     variable ← initial_value  
3.     FOR each item IN collection: variable++  
4.     IF condition:  
5.         action  
6.     RETURN result  
7. END FUNCTION

Favor natural phraseology and domain-relevant terminology alongside common programming symbols (←, ++, etc.) to enhance understanding.  
Avoid separator lines or extraneous formatting.  
Optimize the pseudocode to fit within a 5-second generation constraint, ensuring correctness and human readability at a glance.