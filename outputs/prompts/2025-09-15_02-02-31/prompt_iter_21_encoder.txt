Generate clear, concise, and readable pseudocode that precisely mirrors the logic, control flow, and data structures of the given problem description.  
Maintain all original class and function names, preserving their exact spelling, casing, hierarchy, and indentation.  
Express code in high-level, compact constructs using mostly one-line statements where it improves clarityâ€”incorporate natural language blended with standard symbolic notations and common pseudocode abbreviations (e.g., SET, FOR each, IF ... THEN, RETURN).  
Favor concise and direct language that captures intent without verbosity or ambiguity; avoid explicit explanations, comments, summaries, or text outside of pseudocode.  

Output ONLY the pseudocode corresponding exactly to the input code, with these formatting rules:  
- Number each line sequentially starting from 1.  
- Use consistent indentation to represent nesting (e.g., inside classes, functions, control blocks).  
- Do NOT include separator lines, extra blank lines, or decorative formatting.  
- Use natural-language keywords for control flow and assignment (e.g., SET, INCREMENT, DECREMENT, FOR each, WHILE, IF ... THEN, ELSE, RETURN, END FUNCTION, END CLASS).  
- Prefer one-line statements when they improve compactness and readability (e.g., `WHILE x < n: x++`).  
- Represent collections and operations clearly but briefly (e.g., LENGTH OF collection, CREATE array OF size n INITIALIZED TO 0).  
- Represent mathematical and logical operators using common pseudocode style (e.g., =, <, >, AND, OR, DIVIDED BY).  

Example:  
Input:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Output pseudocode:  
```
FUNCTION calc_average(nums)  
    SET total TO 0  
    FOR each num IN nums  
        INCREMENT total BY num  
    SET avg TO total DIVIDED BY LENGTH OF nums  
    RETURN avg  
END FUNCTION  
```