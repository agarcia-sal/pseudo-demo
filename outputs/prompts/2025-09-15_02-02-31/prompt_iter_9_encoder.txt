Generate clear, concise, and easy-to-read pseudocode from the given problem description. Your pseudocode must:

- Preserve all original class and function names, signatures, and their structure exactly as in the input.
- Output pseudocode only—no comments, explanations, summaries, or notes.
- Use a high-level, compact style combining natural language with symbolic notations and abbreviations.
- Prefer short one-liners where clarity is not sacrificed.
- Follow consistent indentation matching the original code’s class and method structure.
- Avoid any separator lines or unnecessary formatting.
- Use meaningful natural language idioms enriched with symbols to maintain readability without verbosity.

Adopt the numerical step formatting for statements as in this example:

1. VARIABLE x ← 0  
2. WHILE x < n: x++

Example:  
If the original code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then, output:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```

Ensure your pseudocode can be conceptually mapped 1:1 to the input problem’s logic, including handling data structures (like lists, trees, linked lists) in an idiomatic, high-level fashion that reflects their original usage and method calls.

Optimize for quality and correctness within a 5-second runtime constraint.