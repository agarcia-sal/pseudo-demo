Translate the provided pseudocode into a fully functional, idiomatic, and concise Python implementation that **faithfully reproduces every detail of the pseudocode’s logic, behavior, and structure without alteration**. Follow these enhanced instructions precisely to ensure maximal fidelity, correctness, and testability:

- Maintain **all class names, function/method names, argument names, signatures, and return types exactly as stated in the pseudocode**, including any nested or inner classes/functions/methods. Do not rename or omit any structural elements.
- Convert all pseudocode control flow constructs (for-loops, while-loops, conditionals, recursion) into their exact Python equivalents that **strictly preserve the original semantics and variable scoping rules**. Use Python idioms only when they are behaviorally identical to the pseudocode.
- **Retain every variable name, scope, and data structure detail from the pseudocode verbatim.** Do not introduce auxiliary variables, remove existing ones, or rename variables unless type annotations require explicit typing.
- If the pseudocode contains type annotations, reproduce them **verbatim** in Python using standard typing syntax (`typing` module if needed). If type annotations are absent, infer and insert the **most precise, idiomatic Python type hints possible** based on context.
- Import **only minimal and essential standard Python libraries** like `typing`, `collections`, `math`—and only if explicitly required to implement the pseudocode accurately.
- Implement exact behavior for all edge cases, boundary conditions, and inputs implicitly or explicitly indicated by the pseudocode. Ensure robustness: your code should never raise exceptions on such inputs.
- Do **not** add print statements, debug code, logging, comments, or scaffolding. Implement exactly what the pseudocode expresses — no more, no less.
- Wrap your entire translation inside a **single Python code block** delineated by triple backticks with `python`.
- Do **not** output anything outside the code block.
- Ensure your translated Python code runs as a standalone snippet, requiring no external context. It must be immediately executable and fully testable by automated systems.
- Prioritize clarity, readability, and idiomatic Python usage, but never at the cost of deviating from the pseudocode’s explicit logic, naming, or structure.

```python
# your translated code here
```