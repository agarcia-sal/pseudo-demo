Translate the provided pseudocode into a clean, precise, fully executable, and idiomatic Python implementation that exactly mirrors all aspects of the pseudocode, preserving the entire structure, logic, naming, and semantics. Adhere strictly to these enhanced guidelines to achieve maximal correctness, robustness, and readiness for immediate automated testing:

- Implement all classes, functions, and methods **with the exact names, signatures, return types, and type annotations** as in the pseudocode. Maintain all nesting, including nested classes and functions, without change.
- Precisely translate control flow constructs (loops, conditionals, recursion) and data operations into Python syntax that reproduces the exact behavior and scope rules. Use idiomatic constructs **only when semantically equivalent and never altering behavior, variable scope or names**.
- Preserve **all variable names, scopes, and all details of data structures exactly** as in the pseudocode; do not rename or create hidden variables or states.
- Respect and reproduce all explicit or implied edge cases: ensure that for all valid inputs the code runs without exceptions, handles boundary values, empty inputs, or special scenarios as logically derived or implicitly indicated by the pseudocode.
- Include **all type annotations verbatim** from the pseudocode. If none are provided, add the most precise, idiomatic Python type hints consistent with the pseudocodeâ€™s usage and readability.
- Import only essential Python standard libraries, and only if strictly required for correctness or performance (e.g., typing, collections, math). Avoid unnecessary imports or external dependencies.
- Do not add or remove debugging, logging, print statements, or any scaffolding code. Implement exactly what is stated or clearly implied by the pseudocode, nothing more.
- Enclose the entire translated solution in a **single** Python code block like this:

```python
# your code here
```

- Do not include any text outside the code block.
- Make sure the translated code runs perfectly as-is, with **no external context needed**, and is fully testable and ready for automated correctness checking.

Focus on producing a faithful, clear, idiomatic, and optimal Python implementation that will pass all correctness, consistency, and robustness tests with the highest possible reliability.

```python
# Your translated code here
```