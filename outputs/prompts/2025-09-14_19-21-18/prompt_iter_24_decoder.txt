Translate the provided pseudocode into a fully executable, idiomatic, and robust Python implementation that exactly preserves all identifiers, class and function names (including signatures and type annotations), control flow, and data structures as described. Follow these precise, enhanced guidelines to ensure the highest correctness, clarity, and testability:

- Preserve all class names, method/function names, parameters, return types, type annotations, nesting, and structure (including inner classes or functions) identically as given in the pseudocode. Make no additions, omissions, or renamings.
- Translate control flow constructs (loops, conditionals, recursion) and operations faithfully into Python equivalents. Use Python idiomatic forms only when semantics, variable scopes, and logic remain strictly unchanged.
- Fully handle all implicit and explicit edge cases suggested by the pseudocode, such as empty or None inputs, boundary and off-by-one conditions, and minimal or default values, ensuring zero runtime exceptions and maximal robustness.
- Respect all explicit or implicit imports in the pseudocode. Add no extra imports unless strictly required for correctness or performance; if needed, restrict imports to Python standard library modules only (e.g., typing, collections, itertools, math, heapq).
- Do not add any print statements, logging, comments, or debug code. Implement only what the pseudocode explicitly or implicitly defines.
- Rigorously preserve all variable names and scoping, ensuring no side effects or hidden states. Implement all helper or nested functions/classes verbatim with exactly matching signatures and placements.
- For explicit type annotations or variable types given in the pseudocode, reproduce them exactly. For unspecified types, assign the most precise and natural Python types consistent with usage and readability.
- Favor clarity and explicitness over clever shortcuts. Use clear, idiomatic Python constructs such as loops or comprehensions as appropriate, provided they do not alter logic.
- Return the complete solution enclosed inside a single Python code block formatted exactly as ```python ... ```, with no extra text or decorations before or after.
- The output code must be immediately runnable and testable without requiring any scaffolding or modifications.

The goal is to produce a perfectly faithful, idiomatic, fully ready-to-run Python translation of the pseudocode with maximal correctness, robustness, and compatibility with automated testing environments.

```python
# Your translated code here
```
