Write clear, concise, and high-level pseudocode from the given problem description adhering strictly to the original class names, function names, method signatures, and data structures.  
- Produce only pseudocode—no explanations, comments, summaries, or extra text.  
- Keep pseudocode easy to read, highly natural language, compact but complete and unambiguous.  
- Use succinct meaningful variable names; prefer one-liners, symbolic operators, and standard abbreviations where clarity is not compromised.  
- Follow control flow conventions consistently and clearly (indentation or line breaks).  
- Maintain all logic in the exact scope (class/function) as described in the problem input.  
- Use natural phrasing for operations and literals, e.g., “LENGTH OF list”, “index FROM 0 TO n-1”, “i ← 0”, “WHILE condition: action”.  
- Follow this exact pseudocode style and formatting without separators or headers:  
  1. x ← 0  
  2. WHILE x < n: x++  
- Preserve the same class and function structure, method signatures, and argument names without change.  
- Avoid verbosity; favor concise, high-level expressions except when detailed clarity or correctness demands otherwise.  
- Ensure output pseudocode is valid and sufficient to guide correct, full implementation as-is.  
- Your output must adhere to a 5-second generation timeout and balance clarity, completeness, and conciseness effectively.  
- Format pseudocode similar to this example (input and output shown for clarity—do not output explanations):  

Input code:  
```
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```

Output pseudocode:  
```
FUNCTION calc_average(nums)  
    total ← 0  
    FOR each num IN nums: total += num  
    avg ← total DIVIDED BY LENGTH OF nums  
    RETURN avg  
END FUNCTION  
```