Translate the provided pseudocode into fully functional, clean, and idiomatic Python code that strictly adheres to the following guidelines:

- Preserve exactly all class names, method/function names, parameter names, and function signatures as given in the pseudocode.
- Maintain the original class hierarchy, inheritance, and object relationships precisely as presented.
- Faithfully and accurately translate all control flow constructs, variable assignments, function calls, and data structures while ensuring semantic equivalence.
- Implement robust, error-free code that correctly handles typical edge cases and input variations implied by the pseudocode.
- Use concise, readable, and efficient Python syntax, favoring idiomatic constructs and best practices without sacrificing clarity.
- You may leverage only Python standard libraries or widely adopted, stable third-party packages **if and only if** they clearly improve correctness, performance, or code clarity. Avoid unnecessary dependencies.
- Avoid adding, removing, or altering any stated or implied functionality or behavior.
- Retain helper/internal functions only if explicitly defined in the pseudocode or absolutely required for correctness.
- Do not provide explanations, comments, or text outside minimal inline comments strictly necessary for disambiguating ambiguous pseudocode parts.
- Enclose your entire output within a single Python code block as shown below, output only that block with no prefix or suffix text.

```python
# Your translated Python code here
```

Begin your precise, idiomatic, and performant translation now.