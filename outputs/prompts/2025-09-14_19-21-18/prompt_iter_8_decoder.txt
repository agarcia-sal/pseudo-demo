Translate the given pseudocode into clean, idiomatic, efficient, and fully functional Python code that strictly meets the following requirements:

- Preserve all class names, method/function names, parameter names, and function signatures exactly as specified in the pseudocode.
- Maintain the original class hierarchy, inheritance, and object relationships exactly as presented.
- Translate control flow, variable assignments, function calls, and data structures faithfully and accurately.
- Ensure the translated code runs error-free and handles typical edge cases robustly.
- Use only Python standard libraries or widely used, stable packages if doing so significantly improves performance or clarity; avoid unnecessary dependencies.
- Retain any helper/internal functions only if explicitly defined or unavoidably required for correctness.
- Avoid adding, removing, or altering any stated or implied functionality.
- Use concise but clear Python syntax, favoring idiomatic constructs for readability and efficiency.
- Do not include explanatory comments or text outside the minimal necessary inline comments for clarity when the pseudocode is ambiguous.
- Enclose your entire translation inside a single Python code block as shown below, and output only that final code block:

```python
# Your translated Python code here
```

Begin your precise, correct, and performant translation now.