Write concise, high-level pseudocode from the given problem description that is easy to read and understand.  
- Preserve all class names, function names, method signatures, and given data structures exactly as stated.  
- Output only the pseudocode—omit any explanations, summaries, comments, or notes.  
- Use natural, clear language with meaningful but succinct variable names. Prefer symbolic and conventional operators, concise one-liners, and common abbreviations.  
- Structure control flow explicitly with indentation or line breaks for clarity and unambiguity.  
- Include all essential logic to solve the problem fully within the original class and function context.  
- Avoid verbose or redundant constructs; express repeated logic compactly unless it reduces clarity.  
- Format literals and expressions naturally (e.g., LENGTH OF list, index FROM 0 TO n-1, x ← 0, WHILE condition: action).  
- Use the following exact style and format with numeric line prefixes, no separator lines, and consistent indentation:  
  1. x ← 0  
  2. WHILE x < n: x++  
  3. IF condition: RETURN result  
- Make sure the pseudocode is immediately implementable, correct, and complete.  
- Use consistent, plain language keywords (e.g., FUNCTION, RETURN, FOR, WHILE, IF, ELSE).  
- Do not redefine provided standard classes or helper functions unless specified.  
- Maximize clarity, correctness, and conciseness to fit within a 5-second generation time.