Translate the given pseudocode into complete, idiomatic, and rigorously robust Python code that strictly preserves the exact structure, naming, and logic of the pseudocode, adhering to the following improved and precise requirements designed to maximize correctness, clarity, and compatibility with test harnesses:

- Class names, method/function names, parameter names, and full signatures must be **identical** to those in the pseudocode (including typing annotations if present) without exception.
- Recreate the entire class and nested structure exactly as specified, respecting inheritance, nested classes, or functions.
- Implement all control flow, data structures, and expressions in clear, idiomatic Python that is semantically equivalent to the pseudocode.
- Guarantee correctness by explicitly handling all edge cases and boundary conditions implied or naturally inferred (e.g., empty inputs, None/null if reasonable, minimal/maximal values).
- Only import from Python’s standard library or highly reputable, widely installed third-party libraries (e.g., itertools, collections, math, typing) when this clearly improves correctness, readability, or performance, and include the import statements exactly if pseudocode requires imports.
- Do not add any logic, side effects, or behaviors beyond what the pseudocode explicitly or implicitly specifies.
- Include helper functions or classes strictly if defined in the pseudocode or absolutely essential to reproduce the core logic; otherwise, avoid extraneous code.
- Write concise, clear, readable, and performant Python code that favors Pythonic idioms—but never at the cost of deviating from pseudocode meaning.
- Do not insert comments, explanations, or any text outside the code block.
- Enclose the final output in a single Python code block formatted exactly as ```python ... ``` with no additional headers, footers, or text.
- Preserve exact function and class names, which ensures compatibility with automated test systems.

Produce a final, thoroughly tested, and ready-to-run Python implementation now.

```python
# Your code goes here
```