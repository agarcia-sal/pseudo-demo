Write concise, high-level pseudocode that is easy to read and captures all necessary logic to solve the given problem completely and correctly.  
- Retain all original class names, function names, and method signatures exactly as in the problem, preserving their nesting and structure.  
- Output only the pseudocode; omit any explanations, comments, summaries, or clarifications.  
- Use natural language expressions but remain compact; prefer symbolic operators, abbreviations, and one-line statements where clarity is not compromised.  
- Structure control flow clearly and consistently with indentation or line breaks, ensuring unambiguous readability.  
- Use meaningful but succinct variable names, keeping statements as short as possible without loss of understanding.  
- Format indexing and looping naturally, for example:  
  1. i ‚Üê 0  
  2. WHILE i < LENGTH OF arr: PROCESS arr[i]; i++  
- Follow this example style precisely without any extra separators or headers:  

```
CLASS Solution  
    FUNCTION exampleFunction(param)  
        SET result TO 0  
        FOR each item IN param  
            INCREMENT result BY item  
        RETURN result  
    END FUNCTION  
END CLASS
```

- Include all logic within the defined classes or functions respecting the original scope; do not introduce external or auxiliary constructs unless explicitly part of the problem.  
- Prefer compact constructs but split complex logic into clear, sequential steps; preserve clarity over extreme terseness.  
- Your pseudocode must be valid and sufficient to guide direct implementation without ambiguity.  
- Optimize for clarity, completeness, and conciseness, balanced for a 5-second generation constraint.