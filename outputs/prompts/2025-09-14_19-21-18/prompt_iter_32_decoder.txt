Translate the given pseudocode into a fully functional, idiomatic, and precise Python implementation that **exactly replicates the pseudocode’s logic, flow, and structural hierarchy without any modifications or omissions**. To maximize accuracy, reliability, and automated test compatibility, follow these strengthened guidelines strictly:

- Preserve **all class names, function/method names, argument names, signatures, return types, and nested structures exactly as presented in the pseudocode**, including inner classes or functions. Do not rename, reorder, or remove any elements.
- Accurately convert each pseudocode statement, control flow construct (for, while, if, recursion), and expression into Python syntax with behaviorally identical semantics and variable scoping. Use Python idioms **only if they are semantically 100% equivalent** to the pseudocode.
- Retain **all variables, names, and data structures verbatim, keeping the original scope and semantics intact**. Introduce no new variables, helper constructs, or data structures beyond what the pseudocode defines.
- If explicit type annotations are provided, replicate them **exactly using standard Python typing conventions and syntax** (`typing` module if needed). If absent, infer and insert the **most specific, correct, and idiomatic Python type hints possible** based strictly on context without guessing beyond what the pseudocode allows.
- Import only the **minimal standard Python libraries absolutely necessary** to implement the pseudocode correctly. Avoid extraneous imports.
- Implement all edge cases, boundary scenarios, and implicit input constraints indicated or suggested by the pseudocode, ensuring your code is robust and never raises unhandled exceptions on valid input ranges.
- Do **not** include any extra elements: no print statements, debug/logging code, example usages, comments, explanatory notes, or scaffoldings of any kind. Code must be solely the direct translation.
- Enclose the entire code output within a **single, standalone, executable Python code block defined by triple backticks and the `python` language tag**.
- Output nothing outside the Python code block.
- Ensure the code is immediately runnable and testable independently, without requiring any external context, dependencies, or frameworks.
- Prioritize clarity and idiomatic expressions only when they do not conflict with the pseudocode’s logic or naming. Fidelity to the pseudocode’s explicit structure and semantics is paramount.

```python
# your exact translation goes here
```