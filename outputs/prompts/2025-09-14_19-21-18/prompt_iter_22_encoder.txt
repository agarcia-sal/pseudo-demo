Write clear, concise, and high-level pseudocode from the given problem description.  
- Preserve all class names, function names, and method signatures exactly as given.  
- Output only the pseudocode—no explanations, comments, summaries, or extra text.  
- Use natural language with concise, meaningful variable names and prefer symbolic operators and abbreviations where it does not reduce clarity.  
- Format control flow with consistent indentation or clear line breaks; prefer one-liners for simple statements and loops to maximize compactness without sacrificing readability.  
- Use standard, natural representations for literals and operations (e.g., LENGTH OF list, index FROM 0 TO n-1, x ← 0, WHILE condition: action).  
- Include all necessary logic fully within the same class or function context as described, enabling direct implementation from the pseudocode.  
- Avoid verbose structures; prefer compact, high-level expressions, but do not sacrifice clarity or completeness.  
- Follow this exact output style without separators or extra numbering beyond single-line instruction numbers starting at 1:  

1. x ← 0  
2. WHILE x < n: x++  

- The result must be valid pseudocode that clearly guides correct implementation as-is.  
- Your function timeout is 5 seconds—optimize for clarity, completeness, and conciseness.  
- Output the pseudocode strictly in the format demonstrated below:  

EXAMPLE:  
If the code is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

The pseudocode should be:  
FUNCTION calc_average(nums)  
    total ← 0  
    FOR num IN nums: total ← total + num  
    avg ← total / LENGTH OF nums  
    RETURN avg  
END FUNCTION