Translate the provided pseudocode into a fully executable, clean, idiomatic, and highly reliable Python implementation strictly preserving **all** given identifiers, structures, and logic, with the following precise instructions to maximize correctness and test compatibility:

- Exactly match **all** class names, method/function names (including their parameters and typing annotations), nesting, and signatures as defined in the pseudocode.
- Mirror all control structures, variable initializations, and data structures precisely, but convert pseudocode conventions to equivalent Python idioms where appropriate without altering semantics.
- Robustly handle all boundary cases and implicit inputs suggested by pseudocode context, such as empty inputs, None/null, minimal or maximal values, and off-by-one scenarios, ensuring no runtime errors.
- Only import from Python’s standard library or widely used, stable packages (like typing, collections, itertools, math, heapq) when clearly justified for accuracy, readability, or performance; if pseudocode specifies imports, replicate them exactly.
- Do **not** introduce any additional functionality, side effects, print/debug statements, or comments. Only implement what the pseudocode explicitly or implicitly requires.
- If the pseudocode defines helper functions, nested functions, or inner classes, implement them verbatim; do not add extraneous helpers.
- Favor idiomatic, performant Python constructs (e.g., comprehensions, builtin functions, with clarity) without deviating from the pseudocode’s logic or naming conventions.
- Output the **entire** complete executable Python code within a single triple-backtick Python code block (```python ... ```), with no other text before or after.
- Ensure the code can be directly run or tested without any modification or additional scaffolding.

Deliver a final solution that is immediately ready-to-use, fully consistent with the pseudocode, and optimized for correctness, clarity, and test harness compatibility.

```python
# Your translated code goes here
```