Translate the given pseudocode into a fully executable, idiomatic, and highly reliable Python implementation, strictly preserving **all** identifiers, class and function names (including signatures and type annotations), control structures, logic, and data structures exactly as in the pseudocode. Follow these enhanced detailed instructions for maximal correctness, robustness, and testability:

- Exactly replicate **all** class names, method/function names, parameters, type hints, nesting, and structure (e.g., inner functions or classes) from the pseudocode without addition or omission.
- Translate all pseudocode control flow (loops, conditionals, recursion) and operations into their precise Python equivalents, using idiomatic Python constructs only when they do not alter semantics or variable scopes.
- Carefully implement all implicit and explicit edge cases signaled by the pseudocode, including handling empty or None inputs, boundary indices, off-by-one conditions, and default or minimal values, ensuring zero runtime exceptions.
- Retain the pseudocodeâ€™s explicit or implicit imports exactly; no extra imports unless necessary for correctness or performance. If imports are needed beyond the pseudocode context, restrict to Python standard library (including typing, collections, itertools, math, heapq).
- Do not add print/debug statements, comments, logging, or any extraneous code. Only implement what the pseudocode explicitly or implicitly calls for.
- Preserve variable naming and scoping meticulously, ensuring no side effects or hidden state; if the pseudocode uses helper or nested functions/classes, implement them verbatim with matching signatures and placement.
- When strict variable types or annotations are given in the pseudocode, replicate them exactly. When not given, use the most natural, precise Python types consistent with usage.
- Favor clarity and correctness over clever shortcuts; use explicit, clear constructs (e.g., loops, comprehensions) as appropriate.
- Enclose the **entire** complete code solution inside a single Python code block formatted exactly as ```python ... ```, with no text or decoration before or after.
- The outputted code must be directly runnable and testable without modification or extra scaffolding.

Deliver a final output that produces perfectly faithful, idiomatic, fully ready-to-run Python code with maximal correctness, robustness, and compatibility with test harnesses.

```python
# Your translated code goes here
```