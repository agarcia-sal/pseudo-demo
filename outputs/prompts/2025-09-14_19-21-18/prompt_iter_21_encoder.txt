Write concise, clear, and high-level pseudocode from the given problem description using natural language interspersed with standard symbolic operators and abbreviations.  
- Preserve all class names, function names, and method signatures exactly as given, maintaining original class-object nesting and scope.  
- Output only the pseudocode—no explanations, comments, summaries, or notes.  
- Prefer succinct one-liner statements when they maintain clarity; otherwise, use well-indented multiline structures for control flow (e.g., IF, WHILE, FOR).  
- Use meaningful but compact variable names and natural phrasing (e.g., LENGTH OF list, index FROM 0 TO n-1, x ← 0).  
- Express literals, conditions, and operations naturally and consistently, favoring symbolic operators (=, <, >, +=, etc.) without redundant verbosity.  
- Follow this exact numbered-line format (no extra separators or blank lines):  
  1. x ← 0  
  2. WHILE x < n: x++  
- Include all necessary logic fully within the declared classes/functions so the pseudocode can be directly used to implement a correct solution.  
- Avoid repetition of unrelated previous pseudocodes; generate fresh pseudocode strictly matching the current input problem.  
- Do not restate the problem; only produce code-like pseudocode aligned to the original function/class design.  
- Your output must be executable-like pseudocode that balances natural language readability with coding precision for straightforward re-implementation.  
- Optimize for clarity, completeness, and compactness under a 5-second generation constraint with no loss in correctness.