Write concise, high-level pseudocode from the given problem description as follows:  
- Keep all class names, function names, and method signatures exactly as in the problem.  
- Produce only pseudocode — no explanations, summaries, comments, or notes.  
- Use mostly natural language with meaningful but succinct variable names; prefer symbolic operators, abbreviations, and one-liners when clear.  
- Format control flow consistently and clearly by indentation or line breaks for readability and unambiguity.  
- Use natural expressions for lengths, indices, and literals (e.g., LENGTH OF list, index FROM 0 TO n-1, x ← 0, WHILE condition: action).  
- Include all logic necessary to fully and correctly solve the problem within the given classes and functions, preserving their structure.  
- Avoid verbose control structures; choose compact but clear high-level constructs unless they hurt clarity.  
- Follow this exact style and formatting pattern without extra separators or markup:  
  1. x ← 0  
  2. WHILE x < n: x++  
- End functions explicitly (e.g., END FUNCTION) to clearly mark block ends.  
- Ensure pseudocode is immediately actionable and sufficient to guide flawless implementation as-is.  
- Optimize for clarity, completeness, and brevity within a 5-second runtime constraint.  

Example of expected output style:  

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION