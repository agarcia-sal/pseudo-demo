Translate the given pseudocode into a single, fully functional, and idiomatic Python implementation that strictly adheres to the original structure, names, and semantics while maximizing correctness, readability, and robustness. Follow these refined and comprehensive guidelines to produce the best-quality code output possible:

- Preserve all declared class names, method/function names, parameter names, signatures, and nesting exactly as given in the pseudocode.
- Maintain all class hierarchies, inheritance, and relationships intact, including nested classes or functions exactly as specified.
- Accurately convert all pseudocode control flow structures, operators, and data operations into clear, efficient, and idiomatic Python equivalents that precisely replicate original logic.
- Ensure full correctness by handling all plausible edge cases the pseudocode implies — such as empty inputs, boundary values, null/None references, and data type constraints — preventing runtime errors or logical faults.
- Use standard Python libraries by default. If a third-party package is genuinely warranted for improved safety, performance, or clarity, include it only when fully justified and relevant.
- Do not inject any behavior, computations, or side effects beyond what the pseudocode explicitly or implicitly defines.
- Include helper/internal functions or classes only if directly present in the pseudocode or absolutely essential for clear, correct translation.
- Prefer concise, efficient, and pythonic constructs that preserve clarity and performance without verbosity or overly terse idioms.
- Explicitly import any standard or third-party modules indicated or clearly needed by the pseudocode.
- Output purely the final Python code block without any additional commentary, explanation, or formatting — start with ```python and end with ``` exactly.
- Double-check that function signatures and class names exactly match the pseudocode, ensuring seamless compatibility with any test harness or automated validator.
- Guarantee the code runs correctly for relevant real inputs by applying robust handling but avoid redundant overengineering.

Begin your precise, careful, and idiomatic Python translation now.

```python
# Your code goes here
```
