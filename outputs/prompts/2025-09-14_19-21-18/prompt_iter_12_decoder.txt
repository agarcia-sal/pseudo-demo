Translate the given pseudocode into fully functional, idiomatic, and efficient Python code, adhering strictly to these requirements:

- Retain all class names, method/function names, parameter names, and function signatures exactly as in the pseudocode without any modification.
- Preserve the entire class structure, hierarchy, inheritance, and all relationships as specified in the pseudocode.
- Precisely convert all control flow constructs, variable assignments, function calls, and data structures to idiomatic Python equivalents, ensuring semantic equivalence and correctness.
- Implement robust code that safely handles all general and edge cases reasonably implied by the pseudocode, avoiding runtime errors.
- Use concise, clean, and readable Python syntax, employing best practices and idiomatic patterns to maximize clarity and performance.
- You may use any standard library or widely-used, stable, third-party Python package that demonstrably improves correctness, performance, or readability—only if justified and clearly beneficial.
- Do not alter, add, or remove any explicitly or implicitly described functionality or behavior.
- Include helper or internal functions only if explicitly defined in the pseudocode or absolutely necessary for correctness and clarity.
- Do not output any explanation, commentary, or extraneous text—only the Python code itself.
- Enclose the entire code output in a single Python code block, exactly as shown below, with no extra prefix or suffix.

```python
# Your translated Python code here
```

Begin your precise, robust, and idiomatic translation now.