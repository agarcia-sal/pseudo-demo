Translate the given pseudocode into a fully executable, idiomatic, and robust Python implementation that preserves every detail of the pseudocode exactly—class names, function and method names (including signatures and type annotations), variables, nesting, data structures, and control flow—without any additions, omissions, or renamings. Your translation must be ready for immediate automated testing and execution, fully reflecting the logic and structure of the pseudocode. Follow these enhanced instructions meticulously:

- Keep all class names, methods/functions, parameters, return types, and nested classes/functions exactly as in the pseudocode. Do not add, remove, or rename anything.
- Accurately convert all control flow and operations (loops, conditionals, recursion, arithmetic) into Python syntax with fully equivalent semantics and scopes. Use idiomatic Python constructs only if they do not introduce any semantic or behavioral changes.
- Handle all explicit and implicit edge and corner cases referenced or implied by the pseudocode—such as empty inputs, boundary values, or special cases—so the code never throws exceptions and behaves consistently.
- Strictly preserve all variable names and their scopes; ensure no hidden state, side effects, or renamings occur.
- Reproduce all type annotations verbatim. If the pseudocode omits type annotations, assign the most precise, idiomatic Python types consistent with usage and readability.
- Import only required standard library modules and only when indispensable for correctness or performance (e.g., typing, collections, math). Do not add unnecessary imports or external dependencies.
- Do not add print statements, logging, comments, debug code, or scaffolding of any kind. Implement only what is explicitly or implicitly defined by the pseudocode.
- Enclose the entire solution in a single Python code block formatted as follows:
```python
# code here
```
(no extra text before or after).
- Ensure the code runs without modification and is fully testable as-is in an isolated environment.

Your goal is to produce a perfectly faithful, clean, idiomatic, and fully functional Python translation that passes all automated correctness and robustness tests with maximal reliability and clarity.

```python
# Your translated code here
```