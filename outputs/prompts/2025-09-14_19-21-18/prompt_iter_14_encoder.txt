Write concise, clear, and high-level pseudocode from the given problem description, preserving all class names, function names, and method signatures exactly as stated.  
- Output only the pseudocode—no explanations, summaries, comments, or notes of any kind.  
- Structure logic to be easy to read and understand, using natural language mixed with succinct symbolic operators and abbreviations.  
- Prefer compact one-liner statements for simple control flow; use indentation or line breaks for nested blocks, ensuring clarity without verbosity.  
- Use meaningful but concise variable names.  
- Format indexing, loops, and conditions naturally, e.g., `FOR i FROM 0 TO n-1: action`, `WHILE condition: action`, `x ← 0`, `IF condition THEN`.  
- Retain all functionality and logic needed to solve the problem within the given class and method structure; do not omit any key detail.  
- Follow this exact formatting style with no extra separators or decorations:  
  1. x ← 0  
  2. WHILE x < n: x++  
- Use uppercase keywords consistently (e.g., IF, FOR, WHILE, RETURN).  
- Produce pseudocode that directly guides correct implementation with no ambiguity or missing steps.  
- Your output must be concise yet complete, optimized for clarity and readability within a 5-second generation limit.