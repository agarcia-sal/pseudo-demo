Generate concise, easy-to-read pseudocode from the given problem description. The pseudocode should be naturally phrased yet compact and high-level, preserving the original class names, function names, and their structure exactly as given. Use symbolic assignments and abbreviations where appropriate, preferring one-liner constructs for simple operations and loops. Do not include any purpose, summary, comments, or explanations—only the pseudocode itself.

Follow this exact style and format:

- Use the original class and function headers unchanged.
- Indent code blocks to show control flow.
- Use uppercase keywords such as FUNCTION, SET, FOR, WHILE, IF, RETURN, END FUNCTION.
- Use ← or TO indicate assignment.
- Use concise natural language phrases like "INCREMENT", "DIVIDED BY", "LENGTH OF".
- Prefer one-liners for simple loops or conditionals (e.g., `WHILE x < n: x++`).
- Use plural terms for collections, singular for elements.
- Do not use any separator lines, comments, or notes.

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

The pseudocode output should be:

```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```