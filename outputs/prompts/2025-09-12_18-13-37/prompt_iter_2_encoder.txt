Generate concise, easy-to-read pseudocode from the given problem description while preserving the original class and function names exactly as in the source code. Maintain the class and method structure with correct indentation and scoping like in the original. Use a compact, high-level style mixing natural language with symbolic representations and abbreviations to enhance clarity and brevity without losing meaning. Prefer one-liners where logical and safe. Do not add any summaries, explanations, comments, or overviews—output only the pseudocode steps. Follow the numbered-step format strictly:

1. in function FUNCTION_NAME (preserve original name and parameters)  
2.   initialize variables as needed  
3.   control structures (loops, conditionals) in abbreviated form on one line if possible  
4.   update variables, return results as needed  
5. end function (implied by indentation)  

Start your output at step 1 with the function signature line (e.g., "in function foo(x, y)") inside the class if applicable, preserving the original code’s class and method nesting and names exactly. Use indentation to reflect code blocks but keep steps numbered sequentially. Avoid separator lines or extraneous formatting. Use straightforward expressions and natural language that read clearly but compactly. Aim for a balance of clarity and brevity, optimizing for average word length and minimal words per line, ensuring the generated pseudocode matches the structure of the original code so it can be implemented with minimal ambiguity.