Given source code containing classes, functions, variables, and control structures, generate strictly hierarchical, maximally abstract pseudocode with the following requirements:

- Preserve all original class names, function names, and parameter names exactly; maintain full nesting and structural hierarchy of classes, methods, and inner elements.
- Use uppercase keywords only for structural markers: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Omit all code comments, metadata, annotations, example usages, or any extraneous text before, inside, or after the pseudocode output.
- Express all data operations, conditions, and control flows clearly and fully in natural language, avoiding any programming or symbolic syntax, literals, or special characters such as brackets, quotes, colons, commas, or periods.
- Replace all operators, arithmetic expressions, and logical conditions with explicit capitalized words: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.
- Describe variable assignment and updates using uniform verbs and phrases such as SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE element FROM list, ASSIGN reference TO object.
- Convert all indexing, slicing, and element access into natural language expressions: element at position index of collection, substring from position start TO position end of string, or equivalent natural phrasing.
- Fully and explicitly spell out all conditional expressions and logical predicates without abbreviations, contractions, or syntax shortcuts.
- Describe all loops using natural, explicit iteration phrases: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds, and preserve loop variables verbatim.
- Treat constructor methods and language-specific special methods by their exact original names including parameters.
- Represent helper functions or auxiliary routines as separate FUNCTIONS with their original names describing only their essential abstract behavior, foregoing any language or implementation details.
- Avoid all literal notation for data or code elements including numbers, strings, symbols, or punctuation; use spelled-out cardinal numbers, natural language phrases, or descriptive word forms instead.
- Maintain consistently moderate syllabic complexity with clear, natural language phrasing that balances abstraction and readability.
- Output exclusively the pseudocode code following the above conventions, preserving all original names and signatures, preserving full contextual structure, without any additional commentary or explanation.

Here is an illustrative example of the expected pseudocode style:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION