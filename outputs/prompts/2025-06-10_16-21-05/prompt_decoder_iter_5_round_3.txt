Translate the given pseudocode into a complete, efficient, and idiomatic Python program that can be executed as-is.  
- Enclose all code strictly in a single Python code block, formatted as:  
```python  
# Your code here  
```  
- Use only `input()` for reading inputs—never include prompt strings or any interactive messages.  
- Do NOT add separator lines, comments for separation, or any extraneous output—output only the final code.  
- Preserve the original pseudocode’s logic but prioritize clarity, correctness, and performance to ensure the solution runs within 10 seconds on typical problem constraints.  
- Utilize Python’s built-in features and standard libraries thoughtfully to improve readability and efficiency; avoid unnecessary imports and overcomplications.  
- Choose meaningful, descriptive variable and function names, apply Pythonic idioms (like comprehensions, unpacking, built-ins), and organize code with clear structure (functions, if appropriate) to make it self-explanatory.  
- Handle all inputs dynamically according to the problem description; never hardcode values or assume fixed input sizes.  
- Ensure your code is robust against common edge cases implied by the pseudocode.  
- Do NOT include explanatory comments inside the code—let the code speak for itself.  
- Output a ready-to-run script that requires no modifications or additional code to function correctly.