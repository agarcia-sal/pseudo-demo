```
You will receive one or more pieces of pseudocode, each intended as a solution to an unspecified programming problem.

For each pseudocode input, your task is to determine and output a single binary digit indicating whether the pseudocode is reproducible or not. “Reproducible” means that the pseudocode is sufficiently complete, unambiguous, and logically correct such that a competent programmer can implement it and it will pass **all** unit tests for the intended problem.

Evaluate each pseudocode rigorously against the following multi-dimensional criteria:

1. **Definition and Completeness of Interface:**  
   - All required classes, functions, or methods that encapsulate the solution must be explicitly defined and named consistently.  
   - Function/method signatures (names, parameters, and expected return values) must be clearly stated and coherent with the problem’s implied interface.  
   - There are no orphan calls to undefined functions or methods anywhere in the pseudocode.

2. **Logical Soundness and Exhaustiveness:**  
   - Control structures (loops, conditionals, recursion) are fully specified with clear entry, body, and exit conditions that guarantee termination where needed.  
   - All variables, data structures, and state elements used are explicitly initialized and updated in a manner consistent with common programming logic.  
   - The pseudocode fully implements a concrete algorithm that maps inputs to outputs without gaps or contradictions. Missing or ambiguous logic that would leave implementation choices to guesswork renders the pseudocode non-reproducible.  
   - Handling of critical edge cases and boundary conditions is present either explicitly or clearly implied by comprehensive logic (e.g., empty inputs, maximum values, invalid input conditions).

3. **Clarity, Unambiguity, and Feasibility of Implementation:**  
   - Statements and instructions must be precise and concrete enough to translate into executable code by a skilled engineer without assumptions or guesswork.  
   - Avoid vague descriptions, contradictory instructions, or partial statements that cause interpretive variability.  
   - The pseudocode should not rely on unspecified external components, libraries, or magic constants.

4. **Consistency and Soundness of Output:**  
   - The final outcome or output value(s) of the algorithm are explicitly produced and logically consistent with the stated function/method’s purpose.  
   - Return statements and output-generating steps are sufficiently specified so the output is deterministic and accurate as per the problem’s goal.

5. **Implementation Practicality:**  
   - Although exact language syntax is not required, the pseudocode must be programmatically sensible and free from semantic or structural errors that would guarantee runtime exceptions (such as calling undefined functions, missing returns, or uncontrolled infinite loops).  
   - You should assume the pseudocode is to be implemented in a commonly used imperative or object-oriented programming style.

**Instructions for your output:**  
- For each pseudocode input, output exactly one character:  
  - `1` if and only if the pseudocode **meets all** of the above criteria and is reproducible (able to pass all unit tests).  
  - `0` otherwise.  
- Output the results sequentially, strictly in the order the pseudocode inputs are provided.  
- Do not output anything other than the digits `0` or `1` — no explanations, no whitespace, no line breaks, and no extra characters.

---

**Summary:**  
Determine if the pseudocode is a fully specified, logically sound, unambiguous, and complete solution that a skilled programmer can implement to pass all unit tests. Output `1` if yes, `0` if no. Follow the input order precisely.

Here is the pseudocode input:  
```{INPUT}```  
```