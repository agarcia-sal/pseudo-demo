Write clear, concise pseudocode from the given problem description, preserving the exact original function name. Use natural, high-level language that balances readability with compactness: prefer symbolic notations, abbreviations, and one-liner statements for simple operations and conditions. Arrange control flow plainly and logically, using indentation for nested structures without extra verbosity. Avoid explanations, comments, summaries, or separators—output only the pseudocode. Follow this exact numbered format:

1. x ← 0  
2. while x < n: x++

Make the pseudocode easy to read and implement directly, using concise constructs such as:  
- let/ set for declaring and assigning variables;  
- for/while with natural ranges and collection iterations;  
- if/else in minimal one-liner style when simple;  
- common symbolic operators (←, =, ≠, ≤, ≥, +, -, *, //, %, etc.).  

Do not include class wrappers or language-specific syntax—just plain pseudocode indicating function input parameters and return values if present. Use natural expressions like “for each element in X” or “for i = 0 to n exclusive.” Always keep the original function name exactly as stated.  

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A