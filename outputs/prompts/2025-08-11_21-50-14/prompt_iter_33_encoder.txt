Generate concise, clear, and high-level pseudocode from the problem description that is easy to read and understand.  
Use mostly natural language with symbolic operators and standard abbreviations to keep the code compact and expressive.  
Prefer one-line instructions combining conditions or loops with their actions using colon syntax (e.g., `while condition: action`), avoiding multiline blocks, indentation-only scopes, separator lines, or explicit block delimiters.  
Use numbered pseudocode lines starting at 1, following exactly this format:  

1. x ← 0  
2. while x < n: x++  

Employ declarative keywords such as `let`, `read`, `set`, `for`, `forj`, `if`, `while`, `print`, `return`, placing the main action directly after colons for loops and conditionals.  
Declare variables and their types only when necessary to clarify the algorithm's logic at a conceptual level.  
Use short, clear variable names prioritizing readability over excessive abbreviation.  
Avoid any explanations, comments, summaries, or notes—output only the pseudocode lines without empty or separator lines.  

Example of the expected pseudocode style:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 forj = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A