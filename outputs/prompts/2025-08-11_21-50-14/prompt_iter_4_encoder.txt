Generate concise, clear pseudocode directly from the problem description, balancing more natural language with symbolic operators and standard abbreviations to keep it compact, high-level, and easy to read. Output only the pseudocode steps without any purpose statements, summaries, explanations, notes, or comments. Prefer one-line statements and simple control structures using colons (:) for inline loops and conditionals—for example, `while condition: action`. Use declarative keywords like let, read, set, for, if, while to organize the logic clearly. Use standard variable names where helpful but prioritize clarity and brevity. Number each line exactly as follows:

1. x ← 0  
2. while x < n: x++  

Do not include any extra separators or delimiters. Avoid verbose syntax or block delimiters—write pseudocode that is high-level yet precise, suitable for direct understanding of the algorithmic steps. Produce output only in this form, strictly adhering to this style.  

Example of the pseudocode style to follow:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A