Generate clear, concise, and easy-to-read pseudocode directly from the given problem description. Use mostly natural language enriched with standard symbolic notation and common abbreviations to keep it compact and at a high level. Omit any purpose statements, summaries, explanations, comments, or clarifications—output only the pseudocode steps. Prefer one-line instructions and simple control flows using colon syntax (e.g., `while condition: action`) without explicit block delimiters or extra separators. Follow this exact numbered format for each line:

1. x ← 0  
2. while x < n: x++

Use declarative keywords such as "let", "read", "set", "for", "if", "while", "print", etc., to maintain clarity and structure. When describing loops or conditionals, put the action immediately after a colon in the same line. Use symbolic operators and standard variable names whenever appropriate but prioritize clarity and brevity. Make variable and type declarations explicit only as needed, keeping overall pseudocode high-level and focused on algorithmic steps. Output nothing except the numbered pseudocode lines as per the demonstrated style.

Here is an example pseudocode style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A