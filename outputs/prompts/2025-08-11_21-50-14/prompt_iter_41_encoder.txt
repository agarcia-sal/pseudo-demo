Generate clear, concise, and high-level pseudocode directly from the problem description, using mostly natural language with symbolic operators and common abbreviations. Make the pseudocode easy to understand and compact by expressing logic in short, one-line instructions wherever possible. Use simple control flows with colon syntax (e.g., `while condition: action`), avoiding multi-line blocks, indentation-only blocks, separator lines, or empty lines. Start numbering lines at 1 exactly as follows:

1. x ← 0  
2. while x < n: x++

Use declarative keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, and `return`, placing actions immediately after colons in loops and conditionals. Only declare variables and types when crucial to clarify algorithm logic at a high level. Choose short but descriptive variable names favoring readability over excessive abbreviation. Do not include comments, explanations, summaries, or any notes—output only the pseudocode lines, strictly following the format above. Do not use separator lines (e.g., '-----') or blank lines.

Example of the expected style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A