Generate concise, clear, and high-level pseudocode directly from the provided problem description. Use mostly natural language enriched with common symbolic operators and standard abbreviations to keep it compact and readable. Produce only the pseudocode steps without any purpose statements, summaries, explanations, comments, or clarifications. Present the pseudocode as a numbered list with one instruction per line. Use declarative keywords such as "let", "read", "set", "for", "if", "while", "print", etc. For control structures, place the condition and action on the same line separated by a colon (e.g., `while condition: action`). Omit explicit block delimiters, indentation is optional but kept minimal if used, and do not insert separator lines. Prefer standard variable names and symbolic operators for brevity but ensure clarity. Make variable and type declarations explicit only when necessary to maintain a high-level algorithmic focus. Strictly output only the numbered pseudocode lines with no additional text or formatting.

Follow this exact format:

1. x ← 0  
2. while x < n: x++

Example pseudocode to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A