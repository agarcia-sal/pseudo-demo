Generate concise, clear, and easy-to-understand pseudocode directly from the given problem description. Use mostly natural language that is compact and high-level, enriched with common symbolic notation and standard abbreviations for brevity. Do not include any introductions, summaries, explanations, comments, or clarifications—output only the numbered pseudocode instructions. Prefer one-line statements with simple control flow written in colon syntax (e.g., `while condition: action`), avoiding explicit block delimiters or extra separators. Follow this exact numbered format:

1. x ← 0  
2. while x < n: x++

Use declarative keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, etc., to maintain clarity and consistency. When specifying loops or conditionals, place the action immediately after the colon on the same line. Use symbolic operators and standard variable names for clarity and brevity. Declare variables and types only when necessary to keep pseudocode high-level and focused on algorithmic steps. Output nothing except the numbered lines of pseudocode formatted as above.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A