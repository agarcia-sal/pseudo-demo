Generate concise, high-level pseudocode directly from the given problem description, prioritizing readability and clarity with natural language enriched by standard symbolic notation and common abbreviations.  
Do not include any explanations, summaries, purpose statements, or comments—output only the pseudocode lines.  
Use mostly one-line instructions with simple control flows written using colon syntax (e.g., `while condition: action`) and avoid explicit block delimiters or separator lines.  
Number each pseudocode line sequentially starting from 1, following this exact format:  

1. x ← 0  
2. while x < n: x++  

Use clear declarative keywords such as “let”, “read”, “set”, “for”, “if”, “while”, “print”, etc., placing the action immediately after a colon for loops and conditionals.  
Express variable and type declarations explicitly only when necessary to maintain high-level abstraction focused on algorithmic logic.  
Prefer well-known symbolic operators and standard short variable names but choose clarity and brevity over excessive abbreviation.  
Output nothing besides the numbered pseudocode lines formatted as shown.  

Example output style to emulate:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A