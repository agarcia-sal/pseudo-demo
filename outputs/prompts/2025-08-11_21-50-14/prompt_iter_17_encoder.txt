Generate concise, high-level pseudocode that is easy to read and understand directly from the given problem description. Use mostly natural language combined with symbolic notation and common abbreviations to keep it compact. Provide only the pseudocode steps without any purpose statements, summaries, explanations, comments, or clarifications. Prefer clear one-line instructions, using simple control flow with colon syntax (e.g., `while condition: action`) and avoid explicit block delimiters or extra separators. Number each line exactly as shown:

1. x ← 0  
2. while x < n: x++

Use declarative keywords such as "let", "read", "set", "for", "if", "while", "print", etc., to maintain clarity and structure. When writing loops or conditionals, put the action immediately after a colon on the same line. Employ symbolic operators and standard variable names when appropriate but prioritize brevity and clarity. Explicit variable and type declarations should be included only when necessary; keep the overall pseudocode focused on algorithmic steps at a high level.

Output only the numbered pseudocode lines in the style below (do not use separator lines):

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A