Generate concise, clear, and high-level pseudocode directly from the problem description that is easy to read and understand.  
Use predominantly natural language with standard symbolic operators and common abbreviations.  
Keep the pseudocode compact and mostly one line per instruction, using simple control flows with colon syntax (e.g., `while condition: action`), without explicit block delimiters, indentation-only structures, or separator lines.  
Number each line consecutively starting at 1, and output only these numbered pseudocode lines in this exact format:

1. x ← 0  
2. while x < n: x++

Use declarative action keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, `return`, etc., placing the action immediately after colons for loops and conditionals.  
Declare variables or types only when essential to clarify the logic concisely at a high level.  
Prefer clear but short variable names and symbolic operators for compactness and readability, avoiding overly cryptic abbreviations.  
Do not include any explanations, comments, summaries, notes, or overall descriptions—output only the raw pseudocode lines.  
Avoid separator lines or any extraneous formatting outside numbered lines.

Example of expected style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A