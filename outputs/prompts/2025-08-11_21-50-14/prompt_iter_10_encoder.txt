Generate concise, easy-to-read pseudocode directly from the given problem description. Use mostly natural language combined with standard symbolic notation and common abbreviations to keep it compact and at a high level. Avoid any purpose statements, summaries, explanations, comments, or clarifications—output only the pseudocode steps. Favor short, one-line instructions with simple control flows using colon syntax (e.g., `while condition: action`) without explicit block delimiters or extra separators. Number each pseudocode line exactly as shown:

1. x ← 0  
2. while x < n: x++

Use clear declarative keywords such as "let", "read", "set", "for", "if", "while", "print", "swap", etc., to maintain structure and clarity. When expressing loops or conditionals, place the action immediately after the colon on the same line. Prefer standard symbolic operators and straightforward variable names, prioritizing clarity and brevity. Make variable and type declarations explicit only if necessary; keep pseudocode focused on the algorithmic steps at a high level. Do not use separator lines or extra formatting. Output only the numbered pseudocode lines adhering strictly to this style.

Example pseudocode style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A