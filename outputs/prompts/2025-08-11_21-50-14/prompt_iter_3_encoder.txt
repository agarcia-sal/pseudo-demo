Generate clear, concise, and easy-to-read pseudocode directly from the given problem description. Use mostly natural language with common symbolic operators and standard abbreviations to keep it compact and high-level. The output should include only the pseudocode lines—no purposes, summaries, explanations, comments, notes, or extra formatting. Express algorithmic steps in one line whenever possible, using simple control structures with a colon (:) followed by their action (e.g., `while condition: action`). Prefer declarative keywords like “let”, “read”, “set”, “for”, “if”, “while”, etc., to maintain clarity and flow. Use symbolic and abbreviated forms freely but prioritize understandability. Number each line exactly as shown:

1. x ← 0  
2. while x < n: x++

Avoid explicit block delimiters, extra separators, or blank lines. Your pseudocode should be compact, high-level, structured, and easily understandable by someone familiar with algorithms. Produce the output strictly as numbered pseudocode steps only.

Example style the pseudocode should follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A