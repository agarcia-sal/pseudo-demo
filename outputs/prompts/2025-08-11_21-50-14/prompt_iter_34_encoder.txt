Generate clear, concise, and compact pseudocode directly from the problem description, easy to read and understand.  
Use predominantly natural language with symbolic operators and minimal but standard abbreviations.  
Express all control flows as single-line statements using colon syntax (e.g., `while condition: action`), avoiding explicit block delimiters, indentation-only blocks, separator lines, or multiline instructions.  
Number all lines starting from 1, exactly as in this format:

1. x ← 0  
2. while x < n: x++

Use declarative keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, `return`, placing actions immediately after colons.  
Declare variable types only when essential for clarity, with short, meaningful variable names that prioritize readability over excessive abbreviation.  
Use symbolic operators (`+`, `-`, `*`, `/`, `<`, `>`, `=`, `!=`, `++`, `--`) naturally within statements.  
Prefer including explicit loop bounds (e.g., `for i = 0 to n exclusive`) and conditionals that directly reflect the algorithm’s logic without extra commentary or explanation.  
Do not include any description, explanation, comments, summaries, notes, or empty/separator lines—output only the numbered pseudocode lines.  

Example of expected pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i = 0 to size of A exclusive  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A