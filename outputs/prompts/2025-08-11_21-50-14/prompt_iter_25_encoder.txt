Generate clear, concise, and high-level pseudocode directly from the problem description that is easy to read and understand.  
Use mainly natural language enriched with standard symbolic notation and common abbreviations.  
Express the algorithm compactly with mostly one-line instructions using simple control flows in colon syntax (e.g., `while condition: action`), avoiding explicit block delimiters, indentation-only, or separator lines.  
Output only the numbered pseudocode lines starting at 1, exactly in this format:  

1. x ← 0  
2. while x < n: x++  

Use declarative action keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, `return`, etc., placing the action immediately after colons for loops and conditionals.  
Include variable/type declarations only when essential to clarify the logic at a high level.  
Prefer symbolic operators and short but clear variable names, choosing readability over excessive abbreviation.  
Do not include any explanations, comments, summaries, overviews, or notes—output only the pseudocode lines.  

Example of expected style:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A