Generate clear, concise, and high-level pseudocode from the problem description, easy to read and understand.  
Use mostly natural language with symbolic operators and common abbreviations, keeping the code compact and high-level.  
Prefer one-line instructions using simple control flows with colon syntax (e.g., `while condition: action`), avoiding explicit block delimiters, indentation-only blocks, separator lines, or multiline constructs.  
Output numbered pseudocode lines starting at 1, exactly in this format:  

1. x ← 0  
2. while x < n: x++  

Use declarative keywords such as `let`, `read`, `set`, `for`, `if`, `while`, `print`, `return`, placing the action directly after colons for loops and conditionals.  
Declare variables/types only when they are essential to clarify the algorithm’s logic at a high level.  
Use short but clear variable names prioritizing readability over excessive abbreviation.  
Avoid explanations, summaries, comments, or overviews—output only the pseudocode lines.  
Do not include empty lines or separator lines.  

Example of the expected style:  

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A