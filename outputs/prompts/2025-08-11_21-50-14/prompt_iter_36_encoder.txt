Generate concise, clear, and high-level pseudocode strictly from the problem description.  
Use mostly natural language, symbolic operators, and common abbreviations to keep it compact and easy to understand.  
Prefer short one-line instructions with simple control flow using colon syntax (e.g., `while condition: action`), without block delimiters, indentation-dependent blocks, separator lines, or multiline constructs.  
Number each pseudocode line starting from 1 exactly like this:

1. x ← 0  
2. while x < n: x++

Use declarative verbs: `let`, `read`, `set`, `for`, `if`, `while`, `print`, `return`. Place the action immediately after colons in loops and conditionals.  
Declare variables and types only when essential to clarify the high-level algorithm logic; otherwise, omit explicit typing.  
Choose short, readable variable names that prioritize clarity over obscure abbreviations.  
No explanations, summaries, comments, empty lines, or separator lines—output only pseudocode lines.  
Avoid redundant or overly detailed steps; keep it intuitive yet minimalistic.

Example of required style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
	set min_i to i  
	for j = i+1 to size of A exclusive  
		set min_i to j if A[min_i] > A[j]  
	swap A[i], A[min_i]  
print all elements of A