Generate concise, numbered pseudocode lines starting at 1, each line beginning with the line number and a space, directly implementing the problem logic in a compact, high-level style.  
Use predominantly clear natural language mixed with common symbolic notation and widely understood abbreviations.  
Favor single-line statements that combine control flow and actions when it keeps pseudocode brief without losing clarity or correctness.  
Prefer concise declarations (e.g., "let x be integer," "let A be vector of integers"), direct assignments, loops, conditionals, and function definitions as needed.  
Use indentation only to clarify nested blocks but keep it minimal and consistent; otherwise, prefer one-liners.  
Do not include any explanations, summaries, comments, clarifications, decorative formatting, or separator lines—output only the numbered pseudocode lines.  
Avoid verbose phrasing but keep the instructions easy to read and understand by using natural language wording rather than terse code-like tokens.  
Do not state the problem, its purpose, or add notes—output exclusively the actionable pseudocode steps.  
Follow this example format exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.     set min_i to i  
9.     for j = i+1 to size of A exclusive  
10.        set min_i to j if A[min_i] > A[j]  
11.    swap A[i], A[min_i]  
12. print all elements of A