Generate concise, easy-to-read pseudocode from the given problem description with the following requirements:

- Use mostly natural language enriched with symbolic representations and standard abbreviations.
- Express the logic compactly and at a high-level without unnecessary detail.
- Avoid any purpose statements, summaries, explanations, clarifications, or comments.
- Produce only the pseudocode itself; no extra text or separators.
- Prefer one-liners wherever possible (e.g., `while x < n: x++`).
- Structure code logically and clearly, using indentation for nested blocks but keep each step as concise as possible.
- Number each line starting at 1 followed by a period and a space, then the instruction (e.g.,  
  `1. x ← 0`  
  `2. while x < n: x++`).
- Use natural-language keywords like `let`, `read`, `print`, `for`, `if`, `while`, `in function <name>`, `set`, `swap`, `return`.
- Represent data structures and control flow clearly but succinctly (e.g., `let A be vector of integers`, `for all elements in A`, `if condition: action`).
- Ensure the pseudocode flows logically and enables quick understanding of algorithmic steps.
- Keep output within a 5-second complexity/timeout budget by favoring brevity and clarity above exhaustive detail.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n-1  
7.   let min_i ← i  
8.   for j in i+1 to n-1  
9.    if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A