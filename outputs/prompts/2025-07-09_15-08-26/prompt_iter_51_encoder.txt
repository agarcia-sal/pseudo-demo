Generate clear, compact pseudocode that directly implements the problem logic with a focus on readability and natural phrasing using mostly natural language combined with common symbolic notation and standard abbreviations.  
Favor concise one-line statements that blend control flow and actions to keep the code compact but clear and correct.  
Number each line starting at 1, with the format:  
1. instruction  
Use natural, straightforward phrases like “let x be integer,” “read n,” “for i from 0 to n-1,” “if condition then action,” “set x ← y,” “call function f(x).”  
Indent only when absolutely necessary for nested blocks; otherwise, keep statements on one line.  
Do not include comments, summaries, explanations, or any additional text—only the numbered pseudocode lines.  
Avoid decorative formatting or separators.  
Use conventional pseudocode constructs: declarations, assignments, loops, conditionals, function definitions, and simple data structure operations.  
Ensure the pseudocode flows logically and mirrors typical algorithmic reasoning without unnecessary verbosity.  
Example style to follow:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read all elements into A  
6. for i from 0 to n-1:  
7. set min_i ← i  
8. for j from i+1 to n-1: if A[j] < A[min_i] then set min_i ← j  
9. swap A[i], A[min_i]  
10. print all elements of A