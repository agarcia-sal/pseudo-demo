Generate concise, clear, and high-level pseudocode that directly encodes the problem’s logic in mostly natural language combined with standard symbolic notation and common abbreviations. Prioritize readability and compactness: use mostly one-line instructions mixing control flow and statements when clarity is preserved or improved. Start line numbering at 1, as in:

1. x ← 0  
2. while x < n: x++  

Use succinct declarations (e.g., “let x be integer,” “let A be vector of integers”), direct assignments, conditionals, loops, and function definitions as needed, always in pseudocode style—do not include code from any real programming language syntax. Avoid comments, explanations, summaries, or extra formatting. Do not add separator lines or notes. The output must be only the numbered pseudocode lines, no additional text.

Favor natural phrasing that communicates intent clearly over terse minimalism, but keep instructions compact and focused. Combine control keywords and statements in one line when it enhances brevity without sacrificing understandability. Use indentation only where it clearly aids comprehension (such as control blocks inside loops or conditionals), but keep the overall format simple and straightforward.

Example output style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A