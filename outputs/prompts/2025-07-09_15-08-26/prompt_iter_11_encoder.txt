Generate clear, concise pseudocode from the given problem description. The pseudocode must be easy to read and understand, use natural language combined with symbolic notation and abbreviations, and remain high-level and compact.  
Present all instructions as numbered steps starting at 1, each line beginning with the step number, a period, and a space (e.g., "1. x ← 0"). Prefer one-liners that express control flow and operations succinctly without sacrificing clarity.  
Do not include any explanations, comments, purpose statements, summaries, or notes—output only the pseudocode. Avoid separator lines or extra formatting. Use common programming constructs naturally and consistently (e.g., "for i in 1 to n", "if condition:", "while condition:", "swap", "read", "print").  
Aim to fully convey the algorithm’s logic compactly and clearly within a 5-second generation constraint.  
Example pseudocode style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7.   set min_i to i  
8.   for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.   swap A[i], A[min_i]  
10. print all elements of A