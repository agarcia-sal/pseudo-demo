Generate concise, high-level pseudocode that is easy to read and understand, using natural language enriched with symbolic notation and abbreviations. Output only the pseudocode steps—no purpose, summaries, explanations, or clarifications. Favor brevity and clarity with mostly one-line instructions, combining control flows and actions where it improves compactness without losing readability. Number each line sequentially followed by a period and a space, then the instruction, for example:

1. x ← 0  
2. while x < n: x++

Use clear variable declarations, loops, conditionals, assignments, and function definitions as needed, reflecting standard pseudocode style but prioritizing natural phrasing and minimal verbosity. Avoid decorative separators or extraneous formatting. The pseudocode must directly encode the problem logic in a streamlined, natural, and compact form suitable for rapid understanding and straightforward translation into code.

Example style your pseudocode should emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A