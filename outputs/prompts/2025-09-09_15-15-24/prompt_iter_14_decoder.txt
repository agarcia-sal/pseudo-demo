Translate the given pseudocode into a fully functional, clean, and efficient Python 3 implementation that precisely follows the pseudocode’s logic, variable names, function names, and parameter lists without any alteration.  
- Keep the exact function signature and names as given.  
- Define any helper classes or data structures described in the pseudocode above the main function.  
- Utilize Python 3 idiomatic constructs and built-in libraries to optimize clarity, correctness, and performance. You may import any standard or third-party packages if they clearly improve code quality or efficiency, but avoid unnecessary imports.  
- Implement robust handling for all edge cases implicitly or explicitly indicated by the pseudocode. Ensure the solution can run within a 5-second time limit on typical inputs.  
- Return only the complete working Python code enclosed within a single ```python ... ``` code block, with no extra text, explanations, or comments outside that block unless necessary imports or class definitions are required.  
- Write concise, readable code free from redundancy or partial implementations, exactly mirroring the control flow, variable usage, conditions, loops, and data manipulations of the pseudocode, including correct handling of comparison operators and control structures.  
- Ensure that all expressions, especially those involving conditionals, loops, and arithmetic, precisely reflect the pseudocode’s intent to avoid subtle misinterpretations or off-by-one errors.  
- If floating-point infinities are implied, use `float('inf')` or `float('-inf')` as appropriate.  
- Maintain consistent naming and formatting that matches the pseudocode for ease of verification.

Output format exactly as:

```python
# fully working Python 3 code here
```