Convert the entire input source code into an unambiguous, fully detailed, and high-level pseudocode representation that meets all the following conditions:

- Preserve all original function and class names exactly, along with their full parameter lists and types if available, retaining complete nested and hierarchical class and object structures unchanged.

- Use only uppercase English keywords to express all control flow and structural constructs, including but not limited to: FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK, CONTINUE, TRY, EXCEPT, RAISE.

- Express all operators entirely in full English words without any symbols or abbreviations. For example: PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, INTEGER DIVIDE, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, LESS THAN OR EQUAL TO, GREATER THAN OR EQUAL TO, AND, OR, NOT.

- Represent all data structures explicitly and literally, avoiding any language-specific shortcuts. For example, replace comprehensions with explicit loops and stepwise constructions, specify empty lists as “LIST WITH ELEMENTS EMPTY”, dictionaries as “DICTIONARY WITH ENTRIES EMPTY”, and ranges as “RANGE FROM X TO Y”.

- Preserve all literals, constants, identifiers, and type annotations exactly as they appear in the source code, without alteration.

- Each pseudocode line must represent exactly one fundamental statement or logically indivisible operation from the original source code to maintain strict semantic fidelity, ensuring the pseudocode can be used to reconstruct the original code accurately and without ambiguity.

- Indent only to denote block structures consistent with control flow or scopes; avoid any additional blank lines, comments, or metadata in the output.

- Represent method invocations explicitly and in natural language style: use “CALL function_name WITH ARGUMENTS …” or “CALL method_name OF object WITH ARGUMENTS …” rather than symbolic or shorthand call forms.

- Use explicit indexing in all loops—never implicit iteration. Always name and use loop counters clearly and explicitly for iterating sequences, collections, or ranges.

- When manipulating numeric literals, spell them as numerals exactly as given (e.g., 0, 1, 100).

- Do not include any explanatory text, comments, summaries, or separator lines. Output only the pseudocode, nothing else.

- The pseudocode style should be abstract and human-readable, suitable for a technically proficient reader with no language-specific syntax, faithful to the original logic and names.

Example format:

FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR index FROM 0 TO LENGTH OF list_of_numbers MINUS 1
        SET number TO ELEMENT AT index IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION