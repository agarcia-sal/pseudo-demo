Generate concise, clear, and easy-to-read pseudocode directly from the given problem description. Use natural language combined with symbolic notation and abbreviations to keep it compact, high-level, and unambiguous. The pseudocode must:

- Preserve the original function name exactly as in the source code.
- Prefer one-line statements when readable and maintain logical clarity.
- Use familiar constructs like loops, conditionals, assignments with arrows (←), and simple control flow expressions.
- Avoid any purpose, summary, explanatory comments, notes, or overview—only pure pseudocode steps.
- Omit separator lines, unnecessary indentation beyond readability, and verbose variable declarations.
- Format numbering as shown below, for example:

1. x ← 0  
2. while x < n: x++  

- Introduce meaningful variable names derived from the problem context where possible to enhance understanding without verbosity.
- Structure the pseudocode logically to reflect the original algorithm but abstract away language-specific syntax.
- Ensure all key steps and decision points in the original logic are faithfully represented.

Your output must be only the pseudocode meeting these criteria. Optimize for readability and correctness within a 5-second generation time limit.