Generate pseudocode that is clear, concise, and highly readable by blending natural language with standard symbolic notation and widely recognized abbreviations. Produce a compact, high-level sequence of numbered steps, preferring single-line statements without losing clarity or expressiveness. Use precise language for variables, control flow, data structures, and arithmetic operations, employing:

- natural constructs like “let,” “read,” “print,” “for,” “while,” “if,” “else if,” “function,” etc.  
- symbolic operators (=, ≠, <, ≤, %, //, +, -, *, /, ←, +=, mod) where appropriate  
- common abbreviations (e.g., “len” for length, “idx” for index, “cnt” for count) to keep pseudocode succinct  

Number each line starting from 1, as shown:

1. let n be integer  
2. read n  
3. let A be vector of integers of size n  
4. for i in 0 to n-1:  
5. set min_i ← i  
6. for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
7. swap A[i], A[min_i]  
8. print all elements of A  

Do not include headings, explanations, comments, notes, or extra formatting. Avoid separator lines or summaries. Keep the style consistent, factual, and minimalistic so that the pseudocode can stand alone as a clear, easy-to-follow algorithm.