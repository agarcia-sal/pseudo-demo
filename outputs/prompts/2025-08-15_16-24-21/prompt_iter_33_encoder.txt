Generate concise, readable pseudocode for the given problem description using natural language and common symbolic notation. Use a compact, high-level style with brief, mostly one-line statements while maintaining clarity and flow. Number each statement sequentially as:

1. x ← 0  
2. while x < n: x++  

Use minimal keywords and no comments, explanations, summaries, or extraneous formatting. Express variables, loops, conditions, assignments, and data structures naturally but succinctly, favoring natural phrasing over rigid syntax. Write clearly understandable, self-contained pseudocode that balances brevity with explicitness by:

- Preferring natural phrasing like "let x be integer" or "read n"  
- Writing loops and conditionals inline where possible ("for i in 0 to n-1: if A[i] > x then...")  
- Using symbolic operators (←, =, <, %, etc.) and common abbreviations (e.g., "mod" for modulo)  
- Expressing data structures with simple terms (vector, list, string) and sizes when needed  
- Using “set”, “let”, or assignment arrows consistently for clarity  
- Avoiding literal code syntax (like Python-specific constructs) and verbose constructs  
- Omitting redundant steps and keeping the flow logical and direct  

Do not include separators or headers. Output only numbered pseudocode steps.  

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read elements into A  
for i in 0 to n-1:  
 set min_i ← i  
 for j in i+1 to n-1: if A[min_i] > A[j] then min_i ← j  
 swap A[i], A[min_i]  
print all elements of A