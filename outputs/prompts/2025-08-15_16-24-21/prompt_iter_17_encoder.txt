Generate clear, concise, and high-level pseudocode for the given problem description using mostly natural language combined with symbolic notation and familiar abbreviations. Write each step as a single line whenever possible to maximize compactness without losing clarity or readability. Number each line sequentially starting from 1. Use minimal keywords and no comments, explanations, summaries, or decorative separators.

Express variables, conditions, loops, assignments, function definitions, and data structures naturally but succinctly, favoring commonly understood shorthand and symbols (e.g., ← for assignment, mod for modulo, ranges with “to,” “if” and “then” in simple conditional forms). Use natural contrast operators (e.g., ≠, =), standard mathematical and logical symbols, and clear but brief control flow expressions.

The output pseudocode should stand alone, be straightforward to read, and maintain a consistent terse style prioritizing brevity and flow.

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i in 0 to size of A - 1:  
8. set min_i ← i  
9. for j in i + 1 to size of A exclusive: if A[min_i] > A[j] then set min_i ← j  
10. swap A[i], A[min_i]  
11. print all elements of A