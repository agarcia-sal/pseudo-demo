Generate clear, concise, and easy-to-read pseudocode for the given problem description, using predominantly natural language mixed with symbolic notation and common programming abbreviations. Write the pseudocode in a compact, high-level style that favors single-line statements whenever possible, while preserving full clarity and understandability. Number each step sequentially as shown:

1. x ← 0  
2. while x < n: x++

Use minimal keywords; express variables, loops, conditions, assignments, and data structures naturally but succinctly. Avoid explanations, comments, summaries, or any extra formatting such as separator lines. Prefer short, direct phrasing and symbolic operators (←, =, ≠, <, ≤, %, +, −, *, /, mod). Use “let” or “set” to declare or assign variables; for loops and conditionals should be compact, using “for var in start to end:” or “if condition then action”. When writing functions, begin with “in function fname”. Data structures like arrays or lists can be described simply as vectors or lists, specifying size if relevant. Writing should prioritize straightforward logic flow and readability through brevity and consistent style.

Example of the style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i in 0 to n−1:  
 set min_i ← i  
 for j in i+1 to n−1: if A[min_i] > A[j] then min_i ← j  
 swap A[i], A[min_i]  
print all elements of A