Given a piece of pseudocode, analyze it thoroughly and determine whether it is **fully reproducible**, meaning it logically and unambiguously implements a complete, correct algorithm that will pass *all* corresponding unit tests without failure or runtime error. Your decision must be based *only* on the pseudocode as given, without assumptions beyond the provided details.

Output **1** if the pseudocode is reproducible, or **0** if it is not.  
**Do not output any additional text, explanation, or formattingâ€”only the single digit character ("1" or "0").**  
The outputs for multiple pseudocodes should be in the exact order the pseudocode inputs are provided.

To determine reproducibility, consider whether the pseudocode:  
- Clearly defines all variables, data structures, and control flows needed to solve the problem.  
- Uses consistent, unambiguous logic and indexing with no undefined behavior.  
- Properly initializes and updates all essential elements.  
- Accurately handles all edge cases implied by its context or input structure.  
- Exhibits no contradictions, missing components, or major logical errors that would cause test failures or incorrect outputs.  

If any part of the pseudocode is vague, incomplete, or incorrect to the degree it would fail any test, mark it **0**. Only if the pseudocode is a complete, well-specified algorithm guaranteed to pass all relevant tests mark it **1**.