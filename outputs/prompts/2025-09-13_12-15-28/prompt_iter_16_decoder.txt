Translate the provided pseudocode into a fully functional, optimized, and idiomatic Python implementation adhering to these strict requirements:

- Preserve **all class names, method/function names, signatures, input/output formats, and data structures exactly as defined** in the pseudocode, without any renaming, rearrangement, or elimination of structure or nesting.
- Focus on correctness, efficiency, and clarity: produce production-quality code able to execute within 5 seconds on typical inputs.
- Implement all logic explicitly and completely, covering every detail and edge case implied or stated by the pseudocode, with no assumptions or omissions.
- You may import and use **any Python standard library or popular third-party packages** if (and only if) they genuinely enhance correctness, performance, or readability—avoid unnecessary imports.
- Do not include any explanations, text, print statements, or comments outside or inside the code block, unless the pseudocode explicitly requires comments.
- Output exactly one complete Python code block, marked with triple backticks and `python` — no more, no less.
- Do not infer or invent any functionality beyond the pseudocode; treat the input as fully sufficient and authoritative.
- Maintain explicit function signatures, including type hints if originally present or implied.
- Fully honor class or function nesting, indentation, and encapsulation as in the pseudocode; do not flatten or refactor.
- Optimize data structures and algorithms prudently for clarity and runtime efficiency, balanced with fidelity to the pseudocode.
- Handle all input edge cases gracefully and robustly.
- Assume that the pseudocode provided just before the prompt is the only specification and must be translated literally.

Here is the pseudocode to translate: