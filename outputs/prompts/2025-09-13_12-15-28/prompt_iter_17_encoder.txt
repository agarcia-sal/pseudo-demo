Given a problem description and its code, produce concise, clear, high-level pseudocode that is easy to follow. Use mostly natural language enriched with succinct symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) and standard abbreviations (idx, cnt, tmp) for compactness. Preserve all original class and function names exactly with their nesting inside classes/objects intact. Use consistent indentation for blocks with spaces or tabs. Prefer one-liner statements; combine simple sequential actions after colons (e.g., for i in 0 to n-1: x++, y←i). Use natural expressions like "let", "if", "else", "for", "while", "return" to convey logic clearly and briefly. Number each line from 1, output only the pseudocode lines—no comments, explanations, summaries, or separators. Avoid verbose wording; balance natural readability with brevity.

Example style:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. var ← initial_value or update expressions  
5. for each i in container: process i  
6. if cond: action1 else: action2  
7. while cond: action  
8. combine simple statements on one line when unambiguous  
9. indent nested blocks uniformly   

Do not add markdown, formatting, or extraneous output. Provide strictly pseudocode only.