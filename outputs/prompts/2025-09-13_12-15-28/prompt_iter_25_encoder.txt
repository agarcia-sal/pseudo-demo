Given a problem description and its original code, generate concise, clear pseudocode that is easy to read and understand by blending natural language with succinct symbols and common abbreviations. Retain all original class and function names exactly, preserving their nesting within classes/objects. Produce compact, high-level pseudocode favoring one-liners with symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) and standard shorthand (e.g., idx, cnt, tmp). Use natural language for clarity but keep statements brief. Indent consistently with spaces or tabs to show block structure. Number each line from 1 and output only pseudocode lines—no comments, explanations, summaries, or separators.

Style guidelines:  
- Begin with declarations like: in class <ClassName>  
- Then function signature: in function <FunctionName>(parameters)  
- Declare variables with: let var be type or inferred type  
- Assign or update variables with ← or =  
- Use control structures (if, else, for, while, return) preferring concise single-line forms or combined statements after colons  
- Combine simple sequential statements on one line when clear (e.g., while x < n: x++ ; if x ≠ y: z ← x + y)  
- Use loops like: for each item in collection, for i = 0 to n exclusive  
- Keep consistent indentation for nested blocks  
- Preserve naming and structure exactly as in original code  

Do not add code explanations, comments, separators, or markdown. Output only pseudocode lines as per above.