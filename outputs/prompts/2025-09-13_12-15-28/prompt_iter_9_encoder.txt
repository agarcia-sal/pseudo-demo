Given a problem description and its original code, generate concise, high-level pseudocode that is easy to read and understand using primarily natural language combined with common symbols and abbreviations for brevity. Preserve all original class and function names with exact casing and nesting within their original class structures. Favor single-line statements and combine logically simple actions after colons. Use common shorthand (e.g., idx, cnt, tmp) to keep pseudocode compact. Indent nested blocks consistently with spaces or tabs. Number each line starting from 1. Output only the pseudocode lines without comments, explanations, summaries, or any extra text or separators.

Example style to follow:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. assign or update vars with ← or =  
5. use control structures: if, else, for, while, return on one line or combined after colon  
6. use operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) and common abbreviations  
7. indent logically nested blocks  
8. combine simple statements in one line when clear (e.g., while x < n: x++)  

Do not add any formatting, markdown, or separator lines. The output must be strictly pseudocode only.