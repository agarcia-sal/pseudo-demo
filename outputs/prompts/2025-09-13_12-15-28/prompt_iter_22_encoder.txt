Given a problem description and its original code, generate concise, high-level pseudocode that balances clarity and brevity by combining natural language with precise symbolic notation. Preserve all original class and function names along with their exact nesting within classes or objects. Use consistent indentation with spaces or tabs for nested blocks. Favor one-liner statements and merge simple sequential actions after colons. Employ common concise abbreviations (e.g., idx, cnt, tmp) and standard operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠). Number each line starting from 1. Do not add comments, explanations, summaries, separators, or formatting such as markdown. Output strictly the pseudocode lines only.

Example style:  
1. in class <ClassName>  
2. in function <FunctionName>(params)  
3. let var be type or inferred type  
4. var ← initial_value or updated_value  
5. for each item in collection: single_statement or nested_block indented  
6. if condition: single_statement or nested_block  
7. combine simple statements in one line when clear: e.g., while x < n: x++  
8. indent logical blocks consistently and clearly  

Do not deviate from original function/class names or hierarchy. Keep pseudocode compact, high-level, and easy to read. No extra output beyond numbered pseudocode lines.