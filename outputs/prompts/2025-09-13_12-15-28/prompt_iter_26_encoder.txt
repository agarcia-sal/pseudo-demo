Given a problem description and its original code, generate concise, clear, and high-level pseudocode that is easy to read and understand. Use predominantly natural language with well-chosen symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) and standard abbreviations (e.g., idx, cnt, tmp). Preserve all original class and function names exactly, respecting their nesting within classes or objects. Prefer compact one-line statements and combine simple actions after colons when it improves clarity and brevity. Indent nested blocks consistently and clearly. Number each line starting from 1 and produce only pseudocode lines without any comments, explanations, summaries, or separators.

Format pseudocode like this example:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. var ← expression or assignment  
5. if condition: do action else: do other  
6. for each item in collection: single or combined statements  
7. while condition: concise statements with increments/decrements  
8. indent nested blocks with consistent spaces or tabs  

Do not enclose output in markdown or add blank lines. Output strictly pseudocode only.