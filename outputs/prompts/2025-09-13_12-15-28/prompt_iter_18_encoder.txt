Given a problem description and its original code, generate concise, high-level pseudocode that is both easy to read and understand. Use mostly natural language with selective, clear symbolic operators and common abbreviations to keep it compact yet expressive. Preserve all original class and function names exactly, maintaining their full nesting within classes or objects. Express control flow, assignments, and simple operations preferably in single lines; combine related simple statements after colons when unambiguous. Use standard shorthand for variables (e.g., idx, cnt, tmp) and symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠). Indent nested blocks consistently with spaces or tabs. Number each pseudocode line sequentially starting from 1. Output only the pseudocode lines without any comments, explanations, summaries, or formatting lines. Follow this example style strictly:

1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. assign or update variables with ← or =  
5. use control structures: if, else, for, while, return as concise one-liners or combined after colons  
6. combine simple statements on one line when clear (e.g., while x < n: x++)  
7. indent logical blocks accordingly  

Do not add markdown, separators, or other formatting. The output must be solely well-structured pseudocode.