Given a problem description and its original code, generate clear, concise, and high-level pseudocode that balances natural language with expressive symbolic notation for readability and brevity. Preserve all original class and function names exactly, maintaining their nesting and hierarchy within classes or objects. Use common concise abbreviations (e.g., idx, cnt, tmp) and standard symbols (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) to express operations clearly. Prefer single-line statements and combine simple consecutive actions using colons. Indent nested blocks consistently with spaces or tabs, reflecting logical structure. Number lines starting at 1. Output pseudocode only — no explanations, comments, headers, or extra formatting. The pseudocode should be easy to read, compact, and focused on core logic.

Example style:

1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be <type or inferred type>  
4. assign or update vars with ← or =  
5. use control structures: if, else, for, while, return as one-liners or combined after colons  
6. merge simple statements on one line (e.g., while x < n: x++)  
7. indent logically nested blocks with uniform spacing  

Do not add markdown, separator lines, or comments. The output must be strict pseudocode only.