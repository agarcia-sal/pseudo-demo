Given a problem description and its original code, generate concise, high-level pseudocode that is easy to read and understand by blending natural language with standard symbols and common abbreviations. Preserve exact class and function names, nesting them properly within their respective classes/objects. Use single-line statements and prefer one-liners combining simple actions after colons whenever clear. Compactly express control flow using concise keywords (if, else, for, while, return) and symbolic operators (+, -, *, /, =, ≠, <, >, ≤, ≥, &, |, ^). Use common shorthand variable names (idx, cnt, tmp) sparingly for clarity. Indent nested blocks consistently using spaces or tabs, without mixing. Number each line sequentially from 1, starting with class and function declarations described using the keywords “in class <ClassName>” and “in function <FunctionName>(parameters)”. Output only pseudocode lines—no comments, explanations, summaries, or any extra formatting such as markdown or separator lines.

Example style:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. var ← value or expression  
5. for var in collection: simple_stmt  
6. if condition: stmt else: stmt  
7. while cond: stmt  
8. nested blocks indented consistently  
9. combine simple stmts on one line when unambiguous  

Do not alter function or class names. Do not include blank lines or commentary. The output must be strictly pseudocode only.