Given a problem description and its original code, generate concise, clear pseudocode that preserves all original class and function names with exact casing and nesting within the original class structure. Use natural, readable language mixed with common symbolic operators and widely understood abbreviations (e.g., idx, cnt, tmp) to maintain brevity and clarity. Favor single-line statements and combine logically simple actions after colons. Indent blocks consistently with spaces or tabs. Number each pseudocode line starting at 1. Avoid comments, explanations, summaries, or any text besides the pseudocode itself. Output only the pseudocode with no extra formatting or separators.  

Example format:  
1. in function <function_name>  
2. let <var> be <type> or inferred type  
3. assign with ‚Üê or =  
4. use control: if, else, for, while, return, etc.  
5. use operators (&, |, ^, +, -, *, /, <, >, <=, >=, =, !=) and common abbreviations  
6. indent nested blocks  
7. combine simple statements after colons if logical (e.g., while x < n: x++)