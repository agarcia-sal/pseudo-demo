Given a problem description and its original code, generate concise, high-level pseudocode that is easy to read and understand by blending natural language with compact symbolic notation and standard abbreviations. Preserve all original class and function names exactly, including their nesting within classes or objects. Use consistent indentation with spaces or tabs to reflect code structure. Favor one-line statements and combine simple actions after colons when clarity is maintained. Use common shorthand variable names (e.g., idx, cnt, tmp) and standard operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠). Number each line sequentially starting from 1. Output strictly pseudocode only—no comments, explanations, summaries, or separators.

Format examples:

1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. var ← value or update var ← expression  
5. if condition: action else: action  
6. for var in collection: one-liner statements  
7. indent nested blocks accordingly  

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i in 0 to n-1  
 set min_i ← i  
 for j in i+1 to n-1  
  if A[j] < A[min_i]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A