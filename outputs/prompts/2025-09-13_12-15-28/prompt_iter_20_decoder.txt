Translate the given pseudocode into fully functional, clean, and optimized Python code, ensuring the following requirements are strictly met:

- Keep **all original class names, method/function names, signatures, input/output formats, and data structures exactly as given in the pseudocode without any change**.
- Provide your entire response solely as one contiguous Python code block enclosed by triple backticks and labeled `python` (```python ... ```). **Do not** include any explanatory text, comments, or extra output outside this code block.
- Implement the logic thoroughly and precisely, explicitly handling all stated and implicit edge cases from the pseudocode to maximize correctness across all test scenarios.
- Write idiomatic, performant, and memory-efficient Python code optimized to run reliably within 5 seconds on typical inputs.
- You may import and use any Python standard library modules or third-party libraries if they help produce cleaner, clearer, or more efficient code â€” but avoid imports that are unused or unnecessary.
- Preserve the exact class and nesting structure from the pseudocode; do not alter or flatten class or method hierarchy.
- Avoid adding any debugging, logging statements, print calls, or any unrelated code.
- Do not infer or invent any functionality or API beyond what the pseudocode explicitly provides.
- Assume the pseudocode is complete and self-contained; translate it as faithfully as possible without omissions or additions.
- Ensure code style is consistent and professional, suitable for production usage.

Here is the pseudocode to translate: