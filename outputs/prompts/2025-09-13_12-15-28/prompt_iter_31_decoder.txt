Translate the given pseudocode into high-quality, production-ready Python code adhering strictly to the following requirements:

- **Preserve every class name, method/function name, parameter name, input/output signature, and data structure exactly as shown in the pseudocode** with no changes.
- Implement **all logic with complete fidelity**, explicitly covering all stated and implied edge cases, ensuring robustness and correctness.
- The structure must exactly reflect the pseudocode’s nesting of classes, functions, and methods; **do not flatten, reorder, or alter the hierarchy**.
- Code must be **idiomatic, clean, well-structured, and optimized for time and space efficiency**, suitable for execution within a 5-second timeout on typical inputs.
- You **may import any relevant Python standard libraries or popular third-party libraries** to improve clarity, conciseness, or performance—but avoid unused or superfluous imports.
- Output **only the final code in one uninterrupted Python code block**, enclosed as follows:  
  ```python
  # your complete solution here
  ```  
  Do **not** include comments, explanations, print/debug statements, test code, or any text outside this block.
- Do **not** assume or invent any additional functionality, helper functions, or data structures beyond what the pseudocode explicitly defines.
- Trust that the pseudocode represents a complete, self-contained specification; do **not** omit or add any features.
- Follow best practices for production code style, readability, and maintainability without sacrificing performance.

Here is the pseudocode to translate: