Given a problem description and its original code, generate clear, high-level pseudocode that is easy to read and understand using mostly natural language combined with concise symbols and common abbreviations. Preserve original class and function names exactly, maintaining their nesting in classes/objects. Use single-line statements wherever possible, merging simple actions after colons. Keep pseudocode compact by using standard shorthand (e.g., idx, cnt, tmp) and symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠). Indent nested blocks consistently with spaces or tabs. Number each line from 1. Output only pseudocode lines—no comments, explanations, summaries, or separators.

Example style:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. assign or update vars with ← or =  
5. use control structures: if, else, for, while, return as one-liners or combined after colon  
6. combine simple statements on one line when clear (e.g., while x < n: x++)  
7. indent logical blocks accordingly  

Do not add formatting, markdown, or separator lines. The output must be strictly pseudocode only.