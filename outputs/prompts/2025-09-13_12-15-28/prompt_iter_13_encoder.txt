Given a problem description and its original code, generate concise, high-level pseudocode that is easy to read and understand, blending natural language with minimal symbols and standard abbreviations (e.g., idx, cnt, tmp). Preserve all original class and function names exactly, including their nesting within classes/objects. Use single-line statements wherever possible by combining simple operations after colons. Favor symbolic operators (&, |, ^, +, -, *, /, <, >, ≤, ≥, =, ≠) for brevity. Indent all nested blocks consistently using spaces or tabs. Number each line starting at 1. Output strictly pseudocode lines only—no comments, notes, explanations, separators, formatting, or markdown.

Format examples:  
1. in class <ClassName>  
2. in function <FunctionName>(parameters)  
3. let var be type or inferred type  
4. assign or update vars with ← or =  
5. use control structures as single lines or combined after colons: if, else, for, while, return  
6. combine simple statements clearly on one line (e.g., while x < n: x++)  
7. indent logical blocks to show scope  

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i in 0 to n-1  
	let min_i ← i  
	for j in i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
	swap A[i], A[min_i]  
print all elements of A