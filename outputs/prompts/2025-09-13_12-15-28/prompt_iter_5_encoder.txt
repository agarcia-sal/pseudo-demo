Given a problem description and corresponding original code, generate concise, high-level pseudocode that mirrors the original class and function names exactly, preserving code structure and nesting. Use clear natural language combined with standard symbolic operators and common abbreviations (e.g., idx, cnt, tmp) for brevity and clarity. Favor single-line statements and minimal wording while ensuring each step precisely captures the algorithm’s logic. Indent nested blocks with consistent spaces or tabs. Present pseudocode as numbered lines starting at 1, without comments, explanations, or summaries.

Format example:

1. in function <function_name>  
2. let <var> be <type> or inferred type  
3. assign variables with ← or =  
4. use control keywords: if, else, for, while, return, etc.  
5. use operators (&, |, ^, +, -, *, /, <, >, <=, >=, =, !=) and abbreviations  
6. indent nested blocks  
7. combine simple statements after colons if logical (e.g., while x < n: x++)  

Output only the pseudocode—no extra text or formatting. Aim for clarity and compactness within a 5-second runtime.