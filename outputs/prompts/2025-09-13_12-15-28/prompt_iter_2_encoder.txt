Given a problem description and the original code, generate concise, easy-to-read, and high-level pseudocode that reflects the original structure and naming exactly (including function and class names). Use natural language with symbolic notations and abbreviations for compactness, emphasizing clarity without losing essential algorithmic detail. Output only the pseudocode—no explanations, comments, summaries, or notes.

Format the pseudocode as numbered steps. Prefer simple one-liners; use indentation for nested blocks. Preserve the class and method structure as in the original code. Use minimal words while keeping lines understandable. Follow this style precisely:

1. in function <function_name>  
2. let <var> be <type> or inferred type  
3. assign or initialize variables with ← or =  
4. use typical control flow keywords: if, else, for, while, return, etc.  
5. use symbolic operators (&, |, ^, +, -, *, /, <, >, <=, >=, =, !=) and common abbreviations (idx for index, cnt for count, tmp for temporary)  
6. indent nested blocks by one tab or equivalent spaces  
7. combine simple statements into one line after colons when logical (e.g., while x < n: x++)

Example to emulate:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i from 0 to size of A - 1  
7. set min_i ← i  
8. for j from i+1 to size of A - 1  
9.  if A[j] < A[min_i]: min_i ← j  
10. swap A[i], A[min_i]  
11. print all elements of A

Aim to produce the clearest pseudocode representation possible within 5 seconds.