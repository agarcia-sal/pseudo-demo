Generate concise, easy-to-read pseudocode closely reflecting the original code’s logic and using the exact original function names and parameter names. Express the solution in a compact, high-level style blending natural language with symbolic operators, abbreviations, and one-liners where sensible. Use simple, clear control structures (e.g., if, else if, for i in range, for each), direct assignments (without filler words like “let,” “set,” or “initialize,” unless required for clarity or data type), and prefer implicit iterations or comprehensions for brevity and clarity. Write direct return statements without added explanation. Avoid comments, summaries, headings, or separators—output only numbered pseudocode lines.

Use this exact format (line number, period, space, then pseudocode line):

1. x ← 0  
2. while x < n: x++

Ensure each pseudocode snippet is self-contained, complete, and easy to understand, balancing clarity with brevity. Preserve original function signatures exactly. Favor one-liners and symbolic expressions when natural, but do not sacrifice readability. Do not include blank lines or extra whitespace.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A