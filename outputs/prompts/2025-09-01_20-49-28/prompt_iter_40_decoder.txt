```python
Translate the provided pseudocode into a clean, idiomatic, and production-quality Python implementation that strictly:

- Retains all original function names, parameter names, and the core logical structure exactly as in the pseudocode, avoiding any speculative additions or omissions.
- Infers and applies precise Python type hints from the pseudocode context for all functions, parameters, and return types.
- Handles all implied edge cases and input anomalies robustly, throwing well-chosen exceptions where appropriate.
- Uses only minimal necessary imports, prioritizing Pythonâ€™s standard library but allowing third-party packages solely if they clearly enhance correctness, clarity, or performance without introducing unnecessary dependencies.
- Generates concise, optimized, and readable code, leveraging Python built-ins, comprehensions, generators, short-circuit logic, and standard data structures efficiently.
- Eliminates redundant calculations, superfluous variables, and extraneous control flows; code should be minimal but maintainable and clear.
- Ensures no debugging code, print statements, logging, inline comments, or test scaffolding appear in the output.
- Completes execution swiftly (within 5 seconds for typical inputs), balancing runtime speed with code clarity and reliability.
- Outputs strictly a single Python code block, fenced with triple backticks and labeled `python` (i.e., ```python ... ```), and includes absolutely no text, explanation, or metadata outside this block.
```