Generate clear, concise, and easy-to-read pseudocode that directly implements the solution, strictly preserving the original function names and signatures. Write pseudocode that is compact and high-level, blending natural language with symbolic notation, abbreviations, and one-liners whenever possible. Use simple, explicit control flow constructs such as `if`, `else if`, `for i in range`, `for element in collection`. Prefer implicit loops and concise expressions for brevity without sacrificing clarity. Use direct assignments without filler words like “let,” “set,” or “initialize” unless essential for clarity. Use straightforward return statements for outputs. Avoid any comments, explanations, summaries, or any non-pseudocode text—output only numbered pseudocode lines starting at 1. Do not use separator lines or any formatting outside line numbers and code. Format strictly as:

1. x ← 0  
2. while x < n: x++

Ensure each solution is complete, self-contained, and readable, balancing brevity with clarity while preserving original function signatures exactly. For example:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A