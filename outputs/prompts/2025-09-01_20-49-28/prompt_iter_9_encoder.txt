Generate clear, high-level pseudocode that accurately implements the given problem using the exact original function names. Use concise natural language combined with symbolic notation, compact expressions, and one-liners to maximize clarity and brevity. Emphasize direct assignments and simple control structures; avoid filler words like “let,” “set,” or “initialize” unless needed for precision. Prefer implicit looping forms such as “for each,” “for i in range,” or “for all items.” Use straightforward “return” statements for outputs. Exclude all explanations, comments, summaries, or separators—output only the pseudocode itself, formatted as numbered lines exactly like this:

1. x ← 0  
2. while x < n: x++

Ensure the pseudocode is a self-contained, easily understood solution that balances natural language with symbolic brevity and uses consistent indentation for blocks. Here is an ideal style example to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A