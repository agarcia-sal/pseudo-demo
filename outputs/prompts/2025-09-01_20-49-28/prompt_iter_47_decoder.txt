```python
Convert the given pseudocode into a direct, fully functional, and idiomatic Python implementation that meets these criteria:

- Use exactly the same function names, parameter names, and logical structures as in the pseudocode, without adding, omitting, or speculating any behavior.
- Infer and annotate all parameter and return types precisely using Python type hints.
- Handle all explicit and implicit edge cases robustly, including empty inputs, invalid states, and boundary conditions, consistent with the pseudocodeâ€™s intent.
- Output only a single, syntactically valid Python code block labeled with `python` (```python ... ```), with no explanations, comments, or any text outside of it.
- Only import from the Python standard library, unless a third-party library demonstrably improves performance or clarity without unnecessary complexity or dependencies.
- Write concise, clear, performant, and memory-efficient Python code that leverages built-in language features, comprehensions, generator expressions, data structures, and algorithms optimally.
- Eliminate redundant computations, intermediate variables, and superfluous control flow to produce lean code while preserving readability and maintainability.
- Avoid any debugging, logging, or test-code scaffolding.
- Ensure the resulting implementation runs correctly and efficiently within 5 seconds on typical input sizes, prioritizing a balance of runtime efficiency, correctness, and idiomatic style.
```