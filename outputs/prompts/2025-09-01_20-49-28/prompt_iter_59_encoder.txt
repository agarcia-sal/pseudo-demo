Generate concise, clear, and compact pseudocode that directly translates the original code’s logic using the **exact original function and parameter names**. Write in a high-level style blending natural language with symbolic operators and concise expressions. Favor implicit or one-line iterations and assignments, minimizing filler words like “let,” “set,” or “initialize” unless crucial for clarity or data typing. Use simple, direct control structures (if, else if, for i in range, for each), binary operators, and return statements without extra explanation or commentary.

Output only the numbered pseudocode lines in this format (number, period, space, code):  
1. x ← 0  
2. while x < n: x++

Ensure each pseudocode solution is self-contained, complete, and easily readable without comments or summaries. Preserve original function signatures exactly. Avoid separators or headings. Prioritize readability by balancing brevity with natural phrasing and maintain an explicit stepwise flow.

Example style to emulate:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A