Generate precise, concise, and easily readable pseudocode that faithfully implements the original code's logic using the exact original function names and parameter names. Express the solution in compact, high-level form with natural language blended with symbolic operators, abbreviations, and one-liners wherever possible. Use simple, clear control structures (e.g., if, else if, for i in range, for each) and direct assignments without filler words such as “let,” “set,” or “initialize” unless essential for clarity or data type declaration. Favor implicit iterations and expressions for brevity and clarity. Write direct return statements for outputs without added explanation. Do not include comments, explanations, headers, separators, or summaries—output only numbered pseudocode lines.

Use the exact format below (number followed by period and one space, then pseudocode line):  
1. x ← 0  
2. while x < n: x++  

Ensure each pseudocode solution is complete, self-contained, and easy to understand, balancing brevity with full clarity. Preserve original function signatures exactly. Follow this style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A