Generate concise, clear, and easy-to-read pseudocode that directly mirrors the original code’s structure and logic, preserving all original function and parameter names exactly. Express the solution in a compact, high-level style using natural language combined with symbolic operators, abbreviations, and one-line statements whenever it improves brevity without sacrificing clarity. Use simple control constructs (e.g., if, else if, for i in range, for each), direct assignments, and implicit iterations where appropriate. Avoid filler words such as “let,” “set,” or “initialize” unless essential for clarity or type declaration. Omit comments, explanations, summaries, or headers—output only numbered pseudocode lines with this format:  

1. x ← 0  
2. while x < n: x++  

Ensure each pseudocode snippet is complete, self-contained, and easy to understand while balancing brevity and clarity. Preserve exact original function signatures and maintain consistent indentation. Do not insert separator lines or extra blank lines. Prefer one-liners and compact expressions while avoiding overly dense or obscure constructs.  

Example style:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A