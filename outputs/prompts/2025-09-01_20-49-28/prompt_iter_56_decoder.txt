```plaintext
You are given a piece of pseudocode defining one or more functions. Your task is to translate the pseudocode into a single, complete, efficient, and idiomatic Python implementation that exactly preserves all original function names, parameter names, and the logical structure, without adding speculative behavior or placeholders.

Follow these strict requirements:

- Include precise Python 3 type hints inferred from the pseudocodeâ€™s data and expected outputs.
- Implement all implicit edge cases and handle possible input anomalies gracefully and robustly.
- Produce code that is concise, clear, and optimized, leveraging Python built-ins, comprehensions, standard libraries, and optional well-justified third-party libraries only if they significantly enhance clarity or performance without undue bloat.
- Avoid redundant computation, unnecessary variables, or extraneous structures; prioritize readability alongside runtime efficiency, ensuring typical inputs run well within 5 seconds.
- Import only necessary modules, preferring standard libraries and justified external packages.
- Output a single Python code block, enclosed exactly as ```python ... ``` with no extra text, comments, explanations, or output outside this block.
- Maintain function names and signatures as given in the pseudocode.
- Do not include debugging code, logging, or test harnesses.

Strictly output only the final Python code block as specified.
```