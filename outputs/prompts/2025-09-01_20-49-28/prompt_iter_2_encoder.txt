Generate clear, concise pseudocode that directly translates the problem description into a high-level, easy-to-read algorithm. Use natural language combined with symbolic expressions, abbreviations, and one-liners wherever appropriate to maximize compactness and clarity. Always keep the original function names as given. Do not include any explanations, summaries, comments, or notes—only the pseudocode itself. Favor a minimalistic style with simple control structures and assignments, and output in this numbered format:

1. x ← 0  
2. while x < n: x++

Omit separators or decorative lines. Ensure the pseudocode stands alone as a complete solution understandable without extra context. Use pronouns like “let,” “set,” or “initialize” sparingly, preferring direct assignments and clear expressions. Prefer implicit iteration phrases such as “for each element,” “for i in range,” or “for all items,” making loops and conditions as compact as possible. When returning values, use straightforward “return” statements.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A