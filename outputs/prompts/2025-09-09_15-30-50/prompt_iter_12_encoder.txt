Generate compact, clear, and easy-to-read pseudocode from the given problem description and source code adhering to these rules:

- Keep the original function name exactly as in the source.
- Use mostly one-line statements mixing natural language with symbols (←, =, ≠, +, -, *, //, %, ≥, etc.) and standard abbreviations.
- Represent control flow (if, else, for, while) concisely and naturally; inline simple branches and loops if clarity is maintained.
- Use intuitive phrases for collections and iterations (e.g., “let A be vector of integers”, “for each element in A”).
- Avoid low-level details, redundant declarations, comments, explanations, blank lines, or summaries.
- Number each pseudocode line starting at 1, with no extra text before or after output.
- Balance brevity and readability so the pseudocode is instantly understandable yet compact.
- Use minimal but meaningful variable names following the original code where possible.
- Follow exactly this numbering and syntax style (examples):

  1. in function f  
  2. let n be integer  
  3. while i < n: i++

- Do not include separators or explanatory notes.
- Ensure entire pseudocode generation completes within 5 seconds.

Output only the numbered pseudocode lines.