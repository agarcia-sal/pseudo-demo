Generate concise, high-level pseudocode directly from the given problem description and source code, adhering to these rules:

- Keep the original function name exactly as in the source code.
- Use clear, natural language phrasing combined with symbolic notation and standard abbreviations.
- Prefer compact, mostly one-liner constructs; lines may include inline conditionals or loops but remain easy to follow.
- Represent control flow and data structures naturally, avoiding unnecessary verbosity or low-level implementation details.
- Number each pseudocode line consistently starting from 1, in the format:

  1. x ← 0  
  2. while x < n: x++

- Use symbolic operators (←, =, ≠, +, -, *, //, ≥, etc.) freely alongside natural language expressions (“for each”, “if”, “else”, “return”).
- Omit all explanations, comments, summaries, or notes — output only pseudocode lines.
- Avoid extra formatting such as separator lines, extraneous whitespace, or redundant variable declarations.
- When describing collections, use simple and natural wording (e.g., “let A be vector of integers”, “for each element in A”).
- Ensure pseudocode is succinct but readable, fitting within the 5-second generation constraint.
- Strive for balanced clarity and compactness even for complex logic and data structure handling.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
  set min_i to i  
  for j = i+1 to size of A exclusive  
   set min_i to j if A[min_i] > A[j]  
  swap A[i], A[min_i]  
print all elements of A