Generate concise, clear, and easy-to-read pseudocode directly from the given problem description. The pseudocode must:

- Retain the original function name exactly as in the source code.
- Be compact, high-level, and mostly one-liner where possible.
- Use natural language combined with symbolic notation and standard abbreviations.
- Avoid any explanations, comments, summaries, notes, or purpose statements—only pseudocode lines.
- Use consistent numbered-line format like this:

  1. x ← 0  
  2. while x < n: x++

- Prefer clarity and readability by mixing natural expressions (“for each”, “if”, “else”, “return”) with symbols (←, =, ≠, +, -, *, //, etc.).
- Avoid verbose syntax or low-level implementation details unless necessary.
- Reflect control flow and data structures naturally without unnecessary verbosity.
- Do not add extra formatting such as separator lines or extraneous whitespace.
- Ensure the output fits within a 5-second generation constraint.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers with size n  
for i from 0 to n-1: read A[i]  
for i from 0 to n-2:  
   min_i ← i  
   for j from i+1 to n-1: if A[j] < A[min_i]: min_i ← j  
   swap A[i], A[min_i]  
print all elements of A