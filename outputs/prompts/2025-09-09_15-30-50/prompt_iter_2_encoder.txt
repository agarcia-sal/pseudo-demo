Generate concise, compact pseudocode from the given problem description and original code. The pseudocode must:

- Be easy to read and understand, using natural language combined with symbolic notations and abbreviations.
- Preserve the exact function names from the original code.
- Use mostly one-liner statements where possible, and keep the pseudocode high-level.
- Avoid purpose statements, summaries, explanations, notes, or comments—only pseudocode lines.
- Follow this strict numbered-line format with indentation for blocks when needed, e.g.:

1. x ← 0  
2. while x < n: x++  

- Use assignment (←), comparisons (=, ≠, <, ≤, ≥, >), control flows (if, else if, else, while, for), and function calls naturally.
- Use meaningful concise variable names; preserve common idioms from the source (e.g., enumerate, map, list operations) in pseudocode style.
- Do not use any separator or decorative lines.
- Strive for a minimal number of lines while preserving clarity and correctness.
- Ensure output can be generated within 5 seconds.

Example style (not exhaustive):

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for i in 0 to n-1:  
  set min_i ← i  
  for j in i+1 to n-1: if A[min_i] > A[j]: min_i ← j  
  swap A[i], A[min_i]  
print all elements of A