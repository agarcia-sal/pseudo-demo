Generate concise, high-level pseudocode directly from the given problem description and source code observing these rules:

- Keep the original function name exactly as in the source.
- Use mostly one-line statements, combining simple conditionals or loops inline for brevity and clarity.
- Mix natural language with symbols (←, =, ≠, +, -, *, //, %, ≥, etc.) and standard abbreviations.
- Describe data structures and iterations naturally and compactly (e.g., “let A be vector of integers”, “for each element in A”).
- Represent control flow and data handling clearly but avoid low-level implementation details or redundant declarations.
- Number every line starting at 1, formatted exactly as:

  1. x ← 0  
  2. while x < n: x++

- Omit comments, explanations, summaries, blank or separator lines; output only pseudocode lines.
- Make expressions succinct yet readable, balancing high-level abstraction with enough detail to understand complex logic.
- Use intuitive phrases but keep output compact to fit within 5 seconds generation time and minimize line count.

Example style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A