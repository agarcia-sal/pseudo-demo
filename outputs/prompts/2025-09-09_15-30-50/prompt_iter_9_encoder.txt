Generate clear, concise, and high-level pseudocode directly from the given problem description and source code with these rules:

- Preserve the original function name exactly as in the source.
- Use natural language combined with symbols (←, =, ≠, +, -, *, //, ≥, etc.), standard abbreviations, and compact expressions.
- Prefer mostly one-line statements; inline simple conditionals or loops are encouraged for brevity while keeping clarity.
- Represent control flow and data structures naturally without low-level details or redundant declarations.
- Number each pseudocode line starting from 1, formatted as:

  1. x ← 0  
  2. while x < n: x++

- Avoid comments, explanations, summaries, extra formatting, blank lines, or separator lines.
- Use simple natural phrases for collections and iterations (e.g., “let A be vector of integers”, “for each element in A”).
- Keep expressions succinct but readable, balancing compactness with understandability for complex operations.
- Output only pseudocode lines with no additional text.
- Ensure overall output fits within a 5-second generation constraint.

Example style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A