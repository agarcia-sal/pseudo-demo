Generate concise, natural-language-infused pseudocode that is easy to read and captures the problem logic at a high level while retaining exact class names, function names, signatures, and their nesting as in the original problem. Use mostly one-line statements mixing natural language with common symbolic/abbreviated operators for compactness. Avoid comments, explanations, summaries, or any formatting besides minimal indentation. Do not add any separators or extra lines.

Follow this minimalist syntax style:

- Use uppercase keywords like FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT.
- Assignments: `SET variable TO expression` or `variable ← expression`.
- Loops: `FOR each item IN collection`, `WHILE condition`.
- Conditionals inline or block style but keep brevity.
- Preserve original parameter names, variables, class and method nesting.
- Prefer meaningful names but keep lines focused and minimal.
- Return only the pseudocode.

Formatting example:

1. FUNCTION calc_average(list_of_numbers)  
2.   SET total_sum TO 0  
3.   FOR each number IN list_of_numbers: INCREMENT total_sum BY number  
4.   SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
5.   RETURN average_value  
6. END FUNCTION

For classes:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
...  
n.   END FUNCTION  
n+1. END CLASS

If nesting methods, keep clear indentation but minimal.  
Produce only pseudocode output strictly matching this style.