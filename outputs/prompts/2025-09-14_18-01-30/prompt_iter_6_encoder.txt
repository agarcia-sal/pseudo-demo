Generate clear, compact, and natural pseudocode directly from the given problem description, preserving all original class names, function names, and their exact nested structures. Use concise one-line or minimal multi-line statements mixing simple natural language with symbolic operators and standard abbreviations, emphasizing readability and high-level clarity. Prefer meaningful variable names but keep lines short and focused.

Represent control flow and data operations with conventional, intuitive constructs such as:  
- ASSIGN or SET variables with ← or TO  
- FOR loops (e.g., FOR each item IN collection), WHILE loops, IF/ELSE conditions, RETURN statements  
- Arithmetic operators (+, -, *, /, %, etc.) and comparisons (=, <, >, ≤, ≥, ≠)  
- Increment/decrement (e.g., x++, x--) and shorthand operations (e.g., +=, -=) when concise  
- Use natural phrases to explain operations succinctly (e.g., LENGTH OF list, SUBSTRING FROM x TO y)

Do NOT include comments, explanations, clarifications, or summaries. The output must be ONLY pseudocode. Avoid any decorative separators or extra formatting.

Use consistent numbering starting at 1 for each new output, indent nested blocks uniformly by one tab or 4 spaces per level.

Format code blocks as follows (example):  
1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums  
4.     INCREMENT total BY num  
5.   SET average ← total DIVIDED BY LENGTH OF nums  
6.   RETURN average  
7. END FUNCTION

For classes:  
1. CLASS ClassName  
2.   FUNCTION method(params)  
...  
n.   END FUNCTION  
n+1. END CLASS

Ensure the pseudocode is compact, readable, and directly translatable into working code by an experienced programmer within 5 seconds runtime, without need for further notes or clarification.