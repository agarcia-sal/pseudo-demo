Generate concise, high-level pseudocode from the given problem description that emphasizes readability and clarity. Use mostly one-line statements blending natural language with symbolic operators and standard abbreviations to keep the pseudocode compact yet expressive. Preserve all original class names, function names, and their hierarchical structure exactly as given, including class and object contexts.

Do not include explanations, comments, summaries, or clarifications—output only pseudocode. Avoid separator lines or extraneous formatting. Favor meaningful variable names, but keep lines focused and short. Represent control flow (loops, conditionals) and data operations using clear, conventional constructs, allowing natural expressions like `FOR`, `WHILE`, `IF`, `RETURN`, and set/get assignments.

Use this numbered line format without separators:

1. FUNCTION func_name(parameters)  
2.   SET variable TO value  
3.   FOR each item IN collection  
4.     IF condition THEN action  
5.     RETURN result  
6. END FUNCTION

If given a class define it as:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
...  
n.   END FUNCTION  
n+1. END CLASS

The pseudocode should be directly implementable by an experienced programmer without any additional notes, completing within 5 seconds.

Example:

Given:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:

1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums  
4.     INCREMENT total BY num  
5.   SET avg TO total DIVIDED BY LENGTH OF nums  
6.   RETURN avg  
7. END FUNCTION