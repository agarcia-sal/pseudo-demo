Generate concise, clear pseudocode that is easy to read and understand by blending natural language with symbolic expressions to keep it compact and high-level. Keep all original class names, function names, method signatures, and their exact class/object nesting as given.

Use mostly one-line statements with concise keywords and symbols such as `FUNCTION`, `CLASS`, `IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, `←`, `+`, `-`, `*`, `/`, and comparison operators. Use meaningful variable names but keep lines focused and succinct. Avoid comments, explanations, summaries, or formatting lines.

Format pseudocode as follows, without separator lines and using minimal indentation:

1. FUNCTION function_name(params)
2.   SET var ← value
3.   FOR each item IN collection
4.     IF condition THEN
5.       do_something
6.   RETURN result
7. END FUNCTION

For classes:

1. CLASS ClassName
2.   FUNCTION methodName(params)
...
n.   END FUNCTION
n+1. END CLASS

Example:  
Input:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:

1. FUNCTION calc_average(nums)
2.   SET total ← 0
3.   FOR each num IN nums
4.     INCREMENT total BY num
5.   SET avg ← total DIVIDED BY LENGTH OF nums
6.   RETURN avg
7. END FUNCTION