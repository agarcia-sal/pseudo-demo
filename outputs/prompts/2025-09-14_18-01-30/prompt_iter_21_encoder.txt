Generate concise, readable pseudocode from the given problem description that uses mainly natural language with compact, high-level expressions and symbolic shorthand, balancing clarity and brevity. Keep all original class names, function names, method signatures, and nesting exactly as in the source code. Represent control flows and operations with standard concise keywords and operators (`IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, `←`, etc.) and favor one-line statements when possible.

Avoid explanations, notes, comments, summaries, or formatting lines. Output pure pseudocode only, with minimal indentation reflecting code structure, following this style:

- Use natural yet succinct phrases; e.g., `SET total TO 0`, `FOR each item IN collection`, `IF condition THEN action`.
- Use symbolic assignment (`←`) and operators where fitting but retain readability.
- Preserve compactness by combining short statements on one line when clear.
- Maintain the exact code structure for classes, functions, and methods, preserving indentation.
- Do not introduce any new identifiers, rename existing ones, or alter parameter lists.

Format example:

1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums: INCREMENT total BY num  
4.   SET avg ← total DIVIDED BY LENGTH OF nums  
5.   RETURN avg  
6. END FUNCTION

For classes:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
3.     STATEMENTS  
n.   END FUNCTION  
n+1. END CLASS

Example input:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Corresponding output pseudocode:

1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums: INCREMENT total BY num  
4.   SET avg ← total DIVIDED BY LENGTH OF nums  
5.   RETURN avg  
6. END FUNCTION