Generate concise, clear, and high-level pseudocode from the given problem description that balances natural language with symbolic notation for compactness and readability.  
- Preserve all original class names, function names, method signatures, and the exact nesting and class/object contexts.  
- Use mostly single-line statements, leveraging intuitive shorthand operators (`←`, `++`, `--`, `+=`, `-=`, etc.) and concise keywords: `IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`.  
- Prefer meaningful variable names but keep lines succinct and readable.  
- Do not add comments, explanations, summaries, or formatting separators. Output only pure pseudocode.  
- Write pseudocode that is easy to read and understand, using compact and natural expressions without verbose phrasing.  

Follow this formatting style (with minimal or no indentation, no extra separators):

1. FUNCTION functionName(parameters)  
2.   SET variable ← value  
3.   FOR each item IN collection: action  
4.     IF condition THEN do_something  
5.   RETURN result  
6. END FUNCTION  

For classes:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
...  
n.   END FUNCTION  
n+1. END CLASS  

Example:

Given this Python code:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```

Produce this pseudocode:

1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums: total += num  
4.   SET avg ← total DIVIDED BY LENGTH OF nums  
5.   RETURN avg  
6. END FUNCTION