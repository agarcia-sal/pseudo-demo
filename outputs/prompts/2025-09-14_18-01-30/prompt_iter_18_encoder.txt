Generate concise, readable pseudocode from the given code or problem description that balances natural language with compact symbolic notation to maximize clarity and brevity. Preserve all original class names, function names, method signatures, and their exact nested structure, including all classes and methods in their given context.

Use primarily one-line statements with minimal but sufficient natural language. Employ standard pseudocode keywords such as `FUNCTION`, `CLASS`, `IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, and use symbolic operators like `<-`, `=`, `+`, `-`, `*`, `/`, `==`, `!=`, `>=`, `<=` etc. Favor meaningful variable names from the source but keep lines short and focused, avoiding verbosity.

Do not include any comments, explanations, summaries, or formatting extras such as separator lines or extra blank lines. Output only pure pseudocode.

Follow this indentation and style convention exactly (use indentation to indicate nesting, no line numbers):

```
CLASS ClassName
    FUNCTION methodName(parameters)
        SET variable <- value
        FOR each item IN collection
            IF condition THEN
                action
            ELSE
                other_action
        RETURN result
    END FUNCTION
END CLASS
```

Example:

Given Python code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce pseudocode:
```
FUNCTION calc_average(nums)
    SET total <- 0
    FOR each num IN nums
        INCREMENT total BY num
    SET avg <- total / LENGTH OF nums
    RETURN avg
END FUNCTION
```