Generate concise, high-level, and easy-to-read pseudocode directly from the given problem description, blending natural language with symbolic operators and common abbreviations to maximize clarity and compactness. Preserve all original class names, function names, method signatures, exactly as given, including their nesting within classes or objects.

Write mostly one-line statements using clear keywords and symbols such as `FUNCTION`, `CLASS`, `IF`, `ELSE`, `WHILE`, `FOR`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, `←`, `+`, `-`, `*`, `/`, `==`, `!=`, `<`, `>`, `<=`, `>=`. Use meaningful variable names but keep expressions succinct and focused without adding comments, explanations, or formatting separators.

Structure your pseudocode with minimal indentation and no extra blank lines, following this style exactly:

1. FUNCTION function_name(parameters)  
2.  SET variable ← initial_value  
3.  FOR each element IN collection  
4.    IF condition THEN action  
5.  RETURN result  
6. END FUNCTION  

For classes:  

1. CLASS ClassName  
2.  FUNCTION methodName(params)  
...  
n.  END FUNCTION  
n+1. END CLASS  

Example:  

Given this Python code:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Produce the pseudocode:  
FUNCTION calc_average(nums)  
  SET total ← 0  
  FOR each num IN nums  
    INCREMENT total BY num  
  SET avg ← total DIVIDED BY LENGTH OF nums  
  RETURN avg  
END FUNCTION