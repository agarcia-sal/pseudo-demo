Translate the provided pseudocode into a precise, idiomatic, and fully executable Python implementation adhering rigorously to these enhanced guidelines:

- **Strictly preserve all identifiers and signatures exactly** as given in pseudocode, including class names, method/function names, parameter names, order, and casing. Do not rename or reorder them.  
- **Maintain exact nesting, indentation, and scope structure** (classes, methods, inner functions), mirroring pseudocode line-for-line.  
- **Faithfully convert pseudocode constructs to valid Python syntax:**  
  - Map loops, conditions, variable assignments, arithmetic, Boolean logic, and indexing exactly as pseudocode denotes.  
  - Use native Python control flow (`for`, `while`, `if-elif-else`), operators (`and`, `or`, `not`; `==`, `!=`, `//`, `%`), and idiomatic expressions matching semantics indicated.  
  - Translate string, list, or array slicing and indexing consistently with pseudocode logic and 0-based indexing assumed, unless stated otherwise.  
- **Detect all user-defined data structures (e.g., ListNode, TreeNode) referenced in signatures or code paths:**  
  - Define these helpers once in the nearest implied scope with minimal, idiomatic constructors and standard conversion methods (`from_list`, `to_list`, `from_tree`, `to_tree`) that robustly handle empty, null, or edge cases exactly as standard coding challenge utilities do.  
  - Exclude any unused or extraneous helper classes or functions; do not add any beyond those strictly needed.  
- **Handle inputs and outputs exactly per pseudocode specification:**  
  - If pseudocode implies inputs as lists but uses linked-lists (or trees) internally, do automatic conversionâ€”e.g., convert input lists to the expected data structure inside the method only if pseudocode or context requires it. Else assume inputs are in the correct format.  
  - Return output exactly as pseudocode states (e.g., return linked list node, list, integer, string), without adding wrappers or altering types.  
- **Add only minimal, targeted validation or error prevention checks** if explicitly beneficial or clearly required by common challenge constraints; avoid overbroad or redundant guard code.  
- **Use only Python standard library packages; imports allowed strictly if indispensable** for correctness or idiomatic clarity (`collections`, `heapq`, `math`, `functools` for memoization, etc.) but never third-party libraries.  
- **Optimize for clarity, correctness, full edge-case coverage, and runtime efficiency within a 5-second constraint:**  
  - Implement efficient algorithms exactly per pseudocode directives. Apply memoization, pruning, or early-exit guards only if pseudocode strongly suggests or it transparently improves correctness/performance without semantic changes.  
- **Wrap your entire solution in a single explicit Python code block with triple backticks and `python`:**  
  ```python
  # Complete, self-contained, precise Python implementation translating pseudocode as required
  ```  
- **Do not provide explanations, comments, debug prints, main guards, or testing code outside the code block.**  
- **Ensure that the final code is syntactically valid and immediately runnable in standard Python 3 environments.**

```python
# Full and exact Python translation of the provided pseudocode implementing all above requirements verbatim
```