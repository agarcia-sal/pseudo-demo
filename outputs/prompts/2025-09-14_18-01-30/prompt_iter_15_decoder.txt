Translate the given pseudocode into a fully functional, idiomatic, and efficient Python implementation by strictly following these enhanced instructions:

- Preserve all class names, method/function names, and signatures exactly as given in the pseudocode with identical casing and parameter order.
- Maintain identical class and method nesting and indentation levels as depicted.
- Faithfully convert all control flows, expressions, and assignments into their Python equivalents while ensuring no semantic deviation.
- For input parameters representing non-primitive types or data structures (e.g., linked lists, trees), automatically generate minimal, appropriate helper classes (like ListNode or TreeNode) and include code to convert standard Python inputs (lists, tuples, primitives) into the required data structure instances inside the methods. This input conversion must be robust and handle edge cases gracefully.
- Implement idiomatic Python input validation consistent with typical LeetCode-style constraints (e.g., type checks, non-empty validations) but avoid overcomplicating.
- Optimize variable naming, algorithmic clarity, and code structure for high readability and performance within a strict 5-second runtime.
- When appropriate, leverage Python standard libraries or widely accepted packages (e.g., collections, heapq, functools) **only if** they clearly boost clarity, correctness, or efficiency without increasing complexity or breaking conventions.
- Output must be exactly one Python code block with no extra text, explanation, or comments outside the block. Do not include any example calls, main guards, or print statements.
- Carefully convert all pseudocode operators and constructs, e.g., integer division uses //, equality uses ==, assignment uses =, and logical conjunction uses 'and'.
- Ensure all returned values and data formats strictly conform to the pseudocode specification.
- The code must be runnable as-is and require no external dependencies beyond Python's standard library.

Formatting requirement:

```python
# Your translated, runnable, idiomatic Python code strictly matching the pseudocode here
```

This prompt balances rigorous fidelity to pseudocode structure with practical enhancements for input handling and code efficiencyâ€”maximizing correctness and passing rate across diverse test cases under time constraints.