Translate the given pseudocode into a clean, fully self-contained, efficient, and idiomatic Python implementation with the following strict guidelines:

- **Preserve precisely all identifiers and signatures** exactly as given, including class names, method/function names, parameter names, their order, and casing.  
- **Maintain the exact nesting and indentation structure** of classes, methods, inner functions, and scopes without alteration.  
- **Translate each pseudocode construct faithfully into correct Python syntax:**  
  - Convert loop ranges, conditions, variable assignments, arithmetic, Boolean logic, and indexing strictly as shown.  
  - Use Python’s control flows (`for`, `while`, `if-elif-else`), operators (`and`, `or`, `not`; `==`, `!=`, `//` for integer division), and expressions matching pseudocode semantics exactly.  
  - Handle string/list slicing and indexing consistently with pseudocode intent.  
- **Dynamically detect and define any helper data structures** (e.g., ListNode, TreeNode) required by signatures or usage, only if referenced:  
  - Implement these helpers minimally with robust, idiomatic constructors and conversion methods (`from_list`, `to_list`, `from_tree`, `to_tree`) that handle empty inputs and basic validation precisely per common coding challenge expectations.  
  - Define these helpers exactly in the scope implied by the pseudocode, avoiding unused or extraneous helpers.  
- **Respect exact data flows and semantics with zero deviation:**  
  - Do not reorder, rename (except purely local variables if clarity improves without changing logic), or remove variables or lines unless to fix clear bugs or improve clarity without affecting outputs.  
  - Do not assume any behaviors or outputs beyond what pseudocode specifies or strongly implies.  
- **Add only minimal, concise runtime validation** necessary to prevent crashes or runtime errors (e.g., type `None` checks) **only when explicitly beneficial for correctness or typical problem constraints.** Do not add redundant or overbroad checks.  
- **Use only Python’s standard library or built-ins; imports allowed only if indispensable** for correctness or idiomatic clarity (e.g., `collections`, `heapq`, `math`), **never third-party packages.**  
- **Optimize for clarity, correctness, edge case coverage, and performance within a 5-second runtime limit:**  
  - Implement efficient algorithms per pseudocode instructions, add memoization or pruning if pseudocode indicates or if beneficial without semantic change.  
  - Add early input length checks or guard clauses only if explicitly implied or clearly helpful.  
- **Produce a single contiguous Python code block enclosed exactly with triple backticks and `python`:**  
  ```python
  # Complete and exact Python implementation here
  ```  
- **Do not provide any explanation, comments, print/debug statements, main guards, or test harness code outside the code block.**  
- **Ensure the final code returns or outputs results exactly as the pseudocode intends, including return types and output formats.**

```python
# Your exact, idiomatic, and fully encapsulated Python translation respecting all above requirements
```