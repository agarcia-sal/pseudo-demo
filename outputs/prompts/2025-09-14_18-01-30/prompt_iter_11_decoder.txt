Translate the given pseudocode precisely into a complete, executable, and idiomatic Python program observing the following enhanced instructions for accuracy, clarity, and robustness:

- Retain all class names, method/function names, their input/output signatures, and the exact nested class/method structure, indentation, and order as shown in the pseudocode without modification.
- Convert pseudocode control structures (loops, conditionals), expressions, and assignments to their idiomatic Python equivalents faithfully.
- When inputs denote complex data structures (e.g., linked lists, trees), automatically transform standard Python inputs (such as lists or primitives) into the corresponding object instances (e.g., ListNode, TreeNode) so provided methods operate correctly on expected types.
- Include minimal, well-defined helper classes or functions explicitly implied or necessary for the pseudocode to run independently, importing only from the Python standard library or well-known, stable third-party libraries if they improve code quality or performance.
- Implement robust, idiomatic input validation and error handling to ensure graceful failure on invalid inputs consistent with Python best practices.
- Optimize for correctness, readability, and runtime efficiency within a 5-second execution constraint.
- Your output must consist solely of one Python code block formatted exactly as:

```python
# translated code here
```

- Do not include explanations, comments external to the code block, or any other text before or after the code block.

Adhere strictly to these directives to deliver precise, runnable Python code that aligns perfectly with the provided pseudocodeâ€™s structure and semantics.