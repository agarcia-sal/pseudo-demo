Translate the given pseudocode into clean, idiomatic, and efficient Python code by following these rigorous instructions exactly:

- **Preserve all names and signatures exactly as given:** This includes classes, functions/methods, parameters (names, order), and casing.
- **Maintain all nesting and indentation precisely as specified** in the pseudocode, including inner classes or helper functions inside classes.
- **Convert all operations, expressions, and control flow statements into proper Python syntax,** e.g., loops, conditionals, comparisons (`==`), logical operators (`and`, `or`, `not`), integer division (`//`), etc., ensuring semantics are unchanged.
- **Automatically define minimal helper data structures** (e.g., `ListNode`, `TreeNode`) only when input parameters strongly imply those structures (e.g., linked list or tree inputs). Each helper class must be:
  - Scoped correctly within the relevant class if indicated
  - Include robust conversion methods (`from_list`, `to_list`, etc.) handling edge cases and input validation gracefully.
- **Add concise, idiomatic input validation aligned with typical coding challenge environments (like LeetCode):**
  - Validate input types only where critical
  - Avoid unnecessary checks that reduce clarity or performance
- **Optimize variable names and code structure for maximum clarity and readability without changing semantic fidelity.**
- **Use Python’s built-in libraries and the most lightweight, standard packages only if they significantly improve clarity, correctness, or performance.** Never add dependencies without a clear advantage.
- **Ensure the output is a single, self-contained, immediately runnable Python code block** enclosed within triple backticks ```python ... ```.
  - Do **not** include explanatory text, comments outside the code block, example calls, print statements, or main guards.
  - The code must rely solely on Python’s standard library.
- **Respect the return types and exact output format as implied or explicitly stated in the pseudocode.**
- **Scope all helper classes and functions according to the pseudocode structure to maintain proper encapsulation.**
- **Include minimal, meaningful runtime protections that help satisfy a 5-second execution constraint without cluttering the logic.**
- **Target maximal semantic correctness, edge case coverage, and test pass rates** by preserving every detail and subtlety from the pseudocode input.

```python
# Your faithful, idiomatic, and fully self-contained Python translation here, strictly following the above guidelines
```