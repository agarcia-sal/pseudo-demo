Generate concise, high-level pseudocode from the given problem description that prioritizes clarity, readability, and compactness using natural language enriched with symbolic operators and standard abbreviations. Preserve all original class names, function names, and their exact hierarchical structures including classes, methods, and object contexts without changes.

Output only pseudocode, no comments, explanations, summaries, or formatting extras. Avoid separator lines and verbose constructs. Favor meaningful but concise variable names. Use mostly one-line statements with natural control flow keywords like: `FUNCTION`, `END FUNCTION`, `CLASS`, `END CLASS`, `IF`, `THEN`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, `CALL`. Use symbolic operators (`←`, `+`, `-`, `*`, `/`, `%`, `==`, `<`, `>`, `<=`, `>=`, `!=`) and abbreviations (`LEN`, `IDX`, `EL`, etc.) to keep pseudocode compact yet expressive.

Use this numbering and indentation style without separators or extraneous formatting:

1. CLASS ClassName  
2.   FUNCTION funcName(params)  
3.     SET var ← value  
4.     FOR each item IN collection  
5.       IF condition THEN action  
6.         RETURN result  
7.     END FUNCTION  
8. END CLASS

For standalone functions:

1. FUNCTION funcName(params)  
2.   SET var ← value  
3.   WHILE condition  
4.     CALL helperFunc()  
5.   RETURN result  
6. END FUNCTION

Example:

Given:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:

1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums  
4.     INCREMENT total BY num  
5.   SET avg ← total DIVIDED BY LEN(nums)  
6.   RETURN avg  
7. END FUNCTION