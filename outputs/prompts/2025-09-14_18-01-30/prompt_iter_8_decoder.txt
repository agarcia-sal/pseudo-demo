Translate the given pseudocode into clean, idiomatic, and fully executable Python code within a single Python code block as follows:

```python
# Your code here
```

Explicit requirements to follow precisely:

- Keep all class names, method/function names, and parameter/return signatures exactly as stated in the pseudocode, preserving class hierarchy and indentation.
- Convert pseudocode control flows, expressions, and assignments to their correct Python equivalents, maintaining logical behavior and order.
- Where pseudocode methods receive complex structured inputs (e.g., linked lists, trees), automatically convert inputs from common Python types (lists, dicts, primitives) to the appropriate fully functioning data structure instances within the method, to ensure seamless correct operation.
- If the pseudocode implies auxiliary data structures or classes (such as ListNode for linked lists or TreeNode for binary trees), define these helper classes minimally and exactly once in the code so the solution is runnable and self-contained without outside dependencies beyond Python standard libraries.
- Implement robust, idiomatic Python input validation and error handling consistent with Python standards and reasonable guesswork about input expectations.
- Optimize the code for correctness, clarity, and runtime performance (target under 5 seconds), leveraging efficient algorithms and data structures without sacrificing readability.
- You may import and use any widely used, stable, standard or third-party Python library/package if it clearly enhances code clarity, correctness, or performance, but avoid unnecessary dependencies.
- Provide only the minimal complete Python code block containing the functional solution; do not include any explanations, comments outside the code, extra output, or text.
- Do NOT add or remove any classes or methods beyond what pseudocode shows, except helper classes strictly needed to support the given methodsâ€™ functionality.
- Avoid hardcoding test cases or debug printing.
- Ensure final code handles edge cases gracefully and respects all semantic details visible in the pseudocode.

Apply these instructions thoroughly to achieve precise, runnable, and idiomatic Python code faithful to the original pseudocode intent.