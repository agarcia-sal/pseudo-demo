Generate concise, clear, and readable pseudocode from the provided problem description, preserving all exact class names, function names, method signatures, and their nested structure without modification. Use mostly one-line statements with intuitive symbolic operators and concise control flow keywords such as IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, and DECREMENT. Favor meaningful yet succinct variable names. Keep pseudocode high-level and compact, blending natural language with symbols and abbreviations to maximize clarity and brevity.

Output only pure pseudocode without any comments, explanations, summaries, or formatting lines.

Follow this formatting style precisely, using minimal indentation (one tab/4 spaces per block), and no extra separators or blank lines:

Example code:
```
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Example output:
```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums: INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```

For classes, preserve structure as:

```
CLASS ClassName
    FUNCTION methodName(params)
        ...
    END FUNCTION
END CLASS
```

Use symbolic assignment (← or TO), operators (+, -, *, /, %, // where needed), comparisons (=, ≠, <, ≤, >, ≥), and conditions with concise keywords (IF, THEN, ELSE, FOR, WHILE).

Always keep all original names and nesting.

Do not add anything beyond the pseudocode.