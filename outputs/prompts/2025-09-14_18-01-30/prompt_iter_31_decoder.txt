Translate the given pseudocode into a fully faithful, idiomatic, and immediately runnable Python 3 implementation strictly adhering to these enhanced criteria for maximal correctness, semantic fidelity, and robustness:

- Exactly preserve all identifiers (class names, method/function names, parameters) with identical casing and order as specified.  
- Maintain the exact class/member hierarchy and indentation/nesting depth in all definitions, including nested functions or classes.  
- Precisely convert pseudocode constructs to Python:  
  - Translate loops, conditionals, assignments, arithmetic, boolean operations, and indexing one-to-one, respecting 0-based indexing unless stated otherwise.  
  - Use native Python syntax and idioms (`for`, `while`, `if-elif-else`, logical operators, comprehensions as appropriate), ensuring semantic equivalence without altering logic.  
  - Indexing, slicing, and substring operations must match the pseudocode start/end indices and lengths exactly without off-by-one errors.  
- Automatically implement only those user-defined data structures explicitly referenced by the pseudocode:  
  - Provide minimally sufficient, robust helper classes with constructors and standard conversion utilities (`from_list`, `to_list`, `from_tree`, `to_tree`), strictly following standard conventions and correctly handling empty/null cases.  
  - Do not add helper classes or functions beyond what the pseudocode or problem context requires.  
- Input/output handlers:  
  - If inputs are described in types different from the function signatures (e.g., raw lists when a linked list node is expected), insert minimal internal conversions strictly within the method to comply with pseudocode expectations. Else assume inputs conform exactly.  
  - Output values must be returned exactly as specified, without post-processing or wrapping.  
- Insert only explicitly justified validation or guard clauses reflecting standard constraints; avoid speculative or redundant checks.  
- Restrict imports to Pythonâ€™s standard library only, and only when indispensable for correctness or idiomatic clarity (e.g., `collections`, `heapq`, `math`, `functools`). Do not use any third-party packages.  
- Optimize for clarity, correctness, edge case coverage, and runtime efficiency within a 5-second execution window:  
  - Follow the algorithmic approach of the pseudocode exactly, applying memoization, pruning, or early exit strategies only if explicitly indicated or guaranteed to preserve semantics and performance without side effects.  
- Your output must be a single, self-contained Python code snippet enclosed only in a triple-backtick python code block:  
```python
# Complete Python 3 code directly implementing the given pseudocode
```  
- Do not include explanations, comments, debug prints, scaffolding for testing, or any top-level execution guards outside the code block.  
- Your code must be syntactically valid and ready to run in a standard Python 3 interpreter.

This rigorously precise and idiomatic approach ensures maximal output correctness, robust type matching, exact semantic replication, and optimal execution reliability across diverse pseudocode inputs and target problems.