Translate the given pseudocode into an exact, fully executable, idiomatic Python implementation strictly following these advanced instructions to maximize correctness and runtime reliability:

- **Preserve all identifiers verbatim** — class names, method/function names, parameter names, order, and casing must match pseudocode exactly.  
- **Replicate the exact class/member structure and indentation/nesting depth** as pseudocode, including inner functions or nested classes.  
- **Directly map pseudocode syntax and semantics to standard Python constructs:**  
  - Convert all loops, conditionals, assignments, arithmetic, boolean ops, and indexing precisely as indicated, respecting 0-based indexing unless explicitly stated.  
  - Use Python-native control flow statements and operators (`for`, `while`, `if-elif-else`; `and`, `or`, `not`; comparison and arithmetic operators) with idiomatic equivalents maintaining the pseudocode’s logic.  
  - Ensure substring, slicing, or indexing operations are translated with exact start/end indices to maintain semantic equivalence.  
- **Automatically identify and define only the necessary user-defined data structures referenced** (e.g., ListNode, TreeNode):  
  - Implement minimal but robust helper classes with constructors and standard utility methods (`from_list`, `to_list`, `from_tree`, `to_tree`) that precisely handle null or empty inputs as per common challenge conventions.  
  - Do not define any helper classes or functions unless explicitly required by the pseudocode or problem context.  
- **Handle inputs and outputs strictly as pseudocode prescribes:**  
  - If input/output formats mismatch expected data structures (e.g., list vs. linked list), insert minimal automatic conversion only within the method, adhering exactly to pseudocode intent. Otherwise, assume inputs are correctly formatted.  
  - Return outputs exactly in the expected type and form without modification or wrapping.  
- **Incorporate only targeted validation or guard clauses if clearly justified** by typical coding problem constraints; avoid any unnecessary or speculative checks.  
- **You may use Python standard library modules only when indispensable for correctness or idiomatic clarity** (e.g., `collections`, `heapq`, `math`, `functools`) but never third-party packages.  
- **Optimize for clarity, correctness, comprehensive edge case coverage, and efficiency to run within 5 seconds:**  
  - Follow algorithmic approaches precisely as the pseudocode outlines.  
  - Employ memoization, pruning, or early exit strategies only if clearly indicated by pseudocode or proven to maintain semantics and performance without side effects.  
- **Output your entire solution enclosed within a single Python triple-backtick code block:**  
```python
# Your complete, self-contained, Python 3 code correctly translating the given pseudocode
```  
- **Do not provide commentary, explanations, debug output, testing scaffolds, or main guards outside the code block.**  
- **Ensure the final code is syntactically valid and immediately runnable in a standard Python 3 environment.**

This rigorously faithful and idiomatic approach will maximize functional correctness, reduce errors (e.g., type mismatches), ensure exact behavioral replication, and optimize runtime reliability across a wide variety of pseudocode problem inputs and formats.