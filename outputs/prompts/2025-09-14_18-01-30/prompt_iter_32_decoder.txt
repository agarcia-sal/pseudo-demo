Translate the given pseudocode into a precise, idiomatic, and fully runnable Python 3 implementation with these strict and comprehensive guidelines to ensure maximal correctness, semantic fidelity, and robustness:

- Preserve all identifiers exactly as in the pseudocode (class names, function/method names, parameters), including casing and order.  
- Follow the exact class/member and function hierarchy and indentation/nesting as shown in the pseudocode, including nested definitions.  
- Convert all pseudocode constructs to native Python equivalents with 0-based indexing unless otherwise specified:  
  - Loops, conditionals, assignments, arithmetic, boolean logic, indexing, and slicing must be translated one-to-one, paying careful attention to off-by-one errors and boundary conditions.  
  - Use Python idioms for control flow (`for`, `while`, `if-elif-else`) and expressions for clarity, without changing logic or structure.  
- For user-defined data structures explicitly referenced in pseudocode:  
  - Provide minimal, robust implementations with constructors and standard conversion functions (`from_list`, `to_list`, `from_tree`, `to_tree`) following common Python OOP conventions and correctly handling empty or null input.  
  - Do not invent or add any helper classes or functions unless directly implied by the pseudocode or needed for input/output compliance.  
- Input/output handling:  
  - If input types described differ from code signatures (e.g., lists passed where linked lists expected), perform minimal internal, localized conversions strictly within the relevant function or method, to match data structures expected by the pseudocode logic. Avoid any superfluous wrapping or conversion outside these boundaries.  
  - Return output exactly as specified with no extraneous wrapping or post-processing.  
- Include only validation or guard clauses explicitly justified by the pseudocode or its standard constraints; omit speculative or redundant checks.  
- Restrict imports strictly to Pythonâ€™s standard library and only when essential for correctness or idiomatic clarity (e.g., `collections`, `heapq`, `math`, `functools`). Do not use any third-party libraries or unnecessary imports.  
- Optimize output code for clarity, correctness, comprehensive edge-case handling, and runtime efficiency within a 5-second limit:  
  - Preserve the exact algorithmic approach and control flow of the pseudocode, applying optimizations like memoization or early exits only if explicitly stated or guaranteed semantically equivalent and side-effect free.  
- The output must be a single self-contained Python 3 code snippet enclosed in a triple-backtick python code block:
```python
# Complete Python 3 code implementing the pseudocode verbatim
```
- Do not include explanations, comments, debug prints, testing scaffolding, or any top-level script guards outside the code block.  
- Ensure the code is syntactically valid, immediately runnable in standard Python 3, and faithful to all pseudocode details.  

This approach guarantees rigorously exact semantic and structural adherence, robust data type matching, and maximal correctness and reliability across diverse pseudocode inputs and problem domains.