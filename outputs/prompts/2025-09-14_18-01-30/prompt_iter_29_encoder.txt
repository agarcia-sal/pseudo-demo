Generate clear, concise, and high-level pseudocode from the given problem description that is easy to read and understand.  
Use mostly one-line statements combining natural language with symbolic and abbreviated expressions to keep the pseudocode compact.  
Preserve all original class names, function names, method signatures, and their exact class/object nesting structure as given in the problem.  
Prefer meaningful variable names but keep lines succinct and focused. Use symbolic operators (←, +, -, *, /, %, ==, !=, <, >, ≤, ≥) and concise control keywords such as IF, ELSE, FOR, WHILE, RETURN, SET, INCREMENT, DECREMENT.  
Avoid comments, explanations, summaries, or formatting decorations (no separators, no extra blank lines). Output exclusively pseudocode.

Follow this formatting, using minimal indentation only to show code blocks, with one statement per line where possible:

1. FUNCTION func_name(params)  
2.   SET var ← value  
3.   FOR each item IN collection  
4.     IF condition THEN action  
5.   RETURN result  
6. END FUNCTION

For classes:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
3.     …  
4.   END FUNCTION  
5. END CLASS

Example:

Given:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:

1. FUNCTION calc_average(nums)  
2.   SET total ← 0  
3.   FOR each num IN nums  
4.     INCREMENT total BY num  
5.   SET avg ← total DIVIDED BY LENGTH OF nums  
6.   RETURN avg  
7. END FUNCTION