Generate clear, concise, and directly implementable pseudocode from the given problem description that balances natural language with symbolic and abbreviated expressions to maximize compactness and readability. Preserve all original class names, function names, method signatures, and their exact nested structure as given, including class and object contexts.

Produce predominantly one-line statements; use intuitive symbolic operators and concise control flow keywords like `IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`. Favor meaningful variable names but keep statements focused and succinct. Avoid comments, explanations, summaries, or formatting such as separator lines. Output only pure pseudocode.

Follow this formatting style, using minimal indentation and no extra separators, as shown in the example:

1. FUNCTION func_name(parameters)  
2.   SET variable TO value  
3.   FOR each item IN collection: action  
4.     IF condition THEN do_something  
5.   RETURN result  
6. END FUNCTION

For classes:

1. CLASS ClassName  
2.   FUNCTION methodName(params)  
...  
n.   END FUNCTION  
n+1. END CLASS

Example:

Given:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:

1. FUNCTION calc_average(nums)  
2.   SET total TO 0  
3.   FOR each num IN nums: INCREMENT total BY num  
4.   SET avg TO total DIVIDED BY LENGTH OF nums  
5.   RETURN avg  
6. END FUNCTION