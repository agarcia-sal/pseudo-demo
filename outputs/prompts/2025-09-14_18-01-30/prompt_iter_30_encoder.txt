Generate clear, compact, and high-level pseudocode from the given problem description that balances natural language with concise symbolic notation for readability and brevity. Preserve all original class names, function names, method signatures, and their exact nested structure, including classes and object contexts.

Use mostly one-line statements with well-known concise keywords and symbols such as `FUNCTION`, `CLASS`, `IF`, `ELSE`, `FOR`, `WHILE`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`, `‚Üê` or `TO` for assignments, and intuitive operators (`+`, `-`, `*`, `/`, `%`, `==`, `<`, `>`, etc.). Use meaningful variable names but avoid verbosity; keep statements focused and succinct.

Do not add any comments, explanations, summaries, or formatting lines. Output only pure pseudocode strictly following the structure and names of the original code.

Use minimal indentation to show nesting. Avoid separator lines or extra blank lines.

Follow this example style exactly:

If code is:

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:

```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums: INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```

For classes and methods, preserve nesting as:

```
CLASS ClassName
    FUNCTION methodName(params)
        ...
    END FUNCTION
END CLASS
```

For control flow, use:

- `IF condition THEN` for single-line conditions
- `FOR var FROM start TO end:` or `FOR each item IN collection:`
- `WHILE condition:`

Prefer symbolic operators and simple keywords to keep pseudocode elegant and concise.