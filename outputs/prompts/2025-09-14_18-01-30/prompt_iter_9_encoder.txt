Generate concise and clear pseudocode directly from the given problem description, preserving all original class names, function names, and their hierarchical structure exactly as given.  
Use predominantly one-line statements mixing natural language with symbolic operators and standard abbreviations, favoring compactness and high-level clarity without losing precision.  
Prefer meaningful variable names but keep lines short and focused. Represent control flow and data operations using simple, conventional constructs such as `IF`, `WHILE`, `FOR`, `RETURN`, `SET`, `INCREMENT`, `DECREMENT`. Use directional arrows (`‚Üê`) or assignment (`SET x TO y`) consistently for assignments.  

Output only the pseudocode, without explanations, comments, summaries, or extra formatting (no separator lines). Produce pseudocode that an experienced programmer can implement unambiguously and directly within 5 seconds.  

Use this structure pattern (indent with 4 spaces):  

- Functions:  
  ```
  1. FUNCTION func_name(params)  
  2.     <statements>  
  n. END FUNCTION
  ```  

- Classes:  
  ```
  1. CLASS ClassName  
  2.     FUNCTION methodName(params)  
  3.         <statements>  
  m.     END FUNCTION  
  m+1. END CLASS
  ```  

- Control flow can be inline or block style, for example:  
  ```
  n.     IF condition THEN statement  
  or  
  n.     IF condition THEN  
  n+1.         <statements>  
  n+2.     END IF
  ```  

- Use concise natural expressions for collections and lengths such as `LENGTH OF`, `EACH item IN collection`.  

Example input code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Example output pseudocode:  
```
1. FUNCTION calc_average(nums)  
2.     SET total TO 0  
3.     FOR each num IN nums  
4.         INCREMENT total BY num  
5.     SET avg TO total DIVIDED BY LENGTH OF nums  
6.     RETURN avg  
7. END FUNCTION
```