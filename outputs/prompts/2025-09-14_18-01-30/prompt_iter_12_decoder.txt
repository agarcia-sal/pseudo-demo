Translate the pseudocode into a complete, syntactically correct, and idiomatic Python implementation with these enhanced and precise instructions:

- Retain all class names, method/function names, argument names, and return types exactly as given in the pseudocode, preserving the full class and method hierarchy with correct indentation.
- Convert pseudocode control flows, expressions, and assignments into their exact Python equivalents faithfully and clearly.
- Detect any complex data structures implied by the pseudocode (e.g., linked lists, trees) and automatically generate minimal, standard helper definitions (e.g. `ListNode`, `TreeNode`) within the same code block to enable end-to-end functionality.
- Include robust yet idiomatic Python input validation and convert inputs from native Python types (lists, dicts, primitives) into the required object structures before algorithm execution.
- Ensure all helper methods or classes are defined as implied or necessary to run the solution standalone without external dependencies except the Python standard library and widely used public packages.
- Implement logic optimizations and usage of built-in or standard libraries (e.g. `collections`, `heapq`, `bisect`, `itertools`) when they clearly improve performance or readability without altering the intended algorithmic behavior.
- Guarantee the complete code fits within a 5-second runtime constraint on typical test inputs.
- Your output must be a single, self-contained Python code block formatted exactly as:

```python
# your translated code here
```

- Do not include any explanations, extraneous text, or comments outside the code block.
- Do not generate test or I/O code unless explicitly shown in the pseudocode.
- Ensure the final code runs correctly and mirrors the pseudocodeâ€™s logic in all cases with careful type, edge-case, and error handling.

Follow these instructions rigorously to produce precise, clean, and ready-to-run Python code faithful to the given pseudocode.