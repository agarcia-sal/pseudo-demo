Translate the given pseudocode into a fully self-contained, optimized, idiomatic, and immediately runnable Python implementation with the following strict directives:

- Exactly preserve **all class names, function/method names, signatures, parameters, and their order**, including casing and object/class nesting, **as presented in the pseudocode**.
- Maintain the **precise indentation and structure** of classes and methods to fully mirror the pseudocode's hierarchy and scope.
- Convert all language constructs, control flows, data structures, and operations to their canonical Python counterparts **without altering any semantic meaning** (e.g., use `//` for integer division, `and`/`or` for logical operators, `==` for equality).
- When input parameters clearly represent common data structures such as linked lists, binary trees, or graphs, **auto-generate minimal, robust helper classes** (`ListNode`, `TreeNode`, etc.) inside the relevant scope. Include comprehensive classmethods/factory methods (e.g., `from_list`, `to_list`) that convert standard Python native inputs (lists, tuples, primitives) into these data structure instances, handling all edge cases elegantly.
- Enforce **concise, LeetCode-style input validation** that protects against invalid input types and trivial edge cases, but avoid excessive or redundant checks that bloat or obscure the logic.
- Optimize variable naming and control flow to enhance **clarity, readability, and performance** while preserving exact pseudocode behavior and output.
- Use only Python Standard Library or extremely lightweight, commonly accepted packages **when they demonstrably improve correctness, clarity, or efficiency**; otherwise, avoid any third-party dependencies or unnecessary complexity.
- Follow exact output format, return types, and data layouts as implicitly or explicitly indicated by the pseudocode.
- Provide minimal runtime protections to help reliably satisfy a 5-second execution limit on typical LeetCode problem scales.
- Deliver the entire implementation in a **single Python code block, enclosed within triple backticks and marked `python`**. Do not include any explanations, comments, print statements, example calls, or main guards.
- Ensure that all helper classes/methods are properly encapsulated within their parent classes to respect scope and encapsulation from pseudocode.
- Strive for absolute semantic fidelity and maximal test passing by preserving every explicit and subtle detail, edge case, and implied behavior.

```python
# Your complete, faithful, concise, idiomatic Python implementation here
```
