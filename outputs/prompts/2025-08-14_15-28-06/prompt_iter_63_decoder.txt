```python
# Task: Translate the given pseudocode into a clean, efficient, and idiomatic Python 3 program.
#
# Requirements:
# - Output exactly one contiguous Python 3 code block enclosed within ```python ... ```, with no extra text.
# - Use only plain input() calls without prompt strings for input reading.
# - Fully implement all logic from the pseudocode, faithfully covering all cases and edge conditions.
# - Write a standalone, runnable script with no placeholders, debugging prints, partial code, or explanations.
# - Use meaningful variable and function names that reflect the pseudocode’s domain semantics clearly.
# - Optimize for both performance and readability:
#    * Choose the best-suited algorithms and data structures inferred from the pseudocode.
#    * Avoid repeated or redundant computations; keep loops as efficient as possible.
#    * Employ Python built-ins, standard library, and language features idiomatically to enhance clarity and speed.
#    * For very large input volumes suggested by the pseudocode, prefer fast I/O (e.g., sys.stdin.readline). Otherwise, use input().
# - Add concise inline comments only for nontrivial or subtle aspects of the implementation.
# - Avoid dependencies beyond Python’s standard library to maximize portability.
# - Ensure your code handles all corner cases robustly and cleanly.
#
# Deliverable: One polished, performance-minded Python script perfectly fulfilling the pseudocode task.

```python
# Your optimized Python 3 implementation starts here
```
```