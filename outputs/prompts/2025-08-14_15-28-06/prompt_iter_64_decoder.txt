```python
# Task: Convert the given pseudocode into a fully functional, efficient, and clean Python 3 script.
#
# Instructions:
# - Output exactly one Python 3 code block, starting with ```python and ending with ```, with no extra text.
# - Use plain input() calls without prompt strings or comments about input reading.
# - Fully implement all logic from the pseudocode, covering all branches, edge cases, and implied constraints.
# - Deliver a standalone, runnable script: no placeholders, no debug prints, no partial implementations, no explanations.
# - Adopt Pythonic, idiomatic style:
#     * Use meaningful variable and function names that convey purpose and domain concepts.
#     * Prefer built-in functions, comprehensions, generators, and standard library modules for clarity and speed.
#     * Select efficient algorithms and data structures consistent with the task implied by the pseudocode.
#     * Avoid unnecessary recomputations, redundant loops, and inefficient I/O.
#     * For potentially large inputs (suggested by pseudocode or problem semantics), use fast I/O via sys.stdin.readline; otherwise use input().
# - Write concise inline comments strictly for subtle or non-obvious implementation parts, not for trivial code.
# - Restrict dependencies exclusively to the Python standard library to maximize portability.
# - Ensure robust handling of corner cases, invalid inputs (if hinted), and boundary conditions.
# - The final output must be a polished, production-quality Python script that precisely fulfills the pseudocode requirements and optimizes runtime and memory efficiency.
#
# Deliverable: One top-quality Python script enclosed in a single code block as specified.

```python
# Your precise Python 3 solution starts here
```
```