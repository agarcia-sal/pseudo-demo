Generate clear, concise pseudocode from the given problem description. Use simple, natural language enriched with standard symbolic operators (←, =, mod, /, etc.) and minimal, consistent control structures: `if`, `else if`, `else`, `for`, `while`, `function`, `read`, `print`, `let`, `set`, `return`. Produce mostly one-line statements; indent only to show nested blocks clearly and compactly. Favor meaningful but short variable and function names relevant to the problem. Use symbolic assignments and natural expressions like “read integer n”, “for i = 0 to n-1”, “if x mod 2 = 0”, “print result”. Do not include explanations, comments, empty lines, or decorative formatting. Do not add summaries or notes. Format output strictly as a numbered list starting at 1, for example:

1. let n be integer  
2. read n  
3. let A be array of integers size n  
4. read n elements into A  
5. for i = 0 to n-1  
 if A[i] mod 2 = 0 then set A[i] ← A[i] / 2  
6. print A

Keep pseudocode succinct, easy to read, high-level, and focused on core logic. Output only the pseudocode—nothing else.