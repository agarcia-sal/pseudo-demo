```python
# You are to translate the provided pseudocode into a fully functioning, well-structured, and optimized Python 3 program.
#
# Instructions:
# - OUTPUT only the Python code block enclosing the solution: ```python ... ```.
# - Use plain input() with no prompt strings to read all inputs exactly as the pseudocode expects.
# - Output must exactly match the pseudocode's print specifications with no extra messages or blank lines.
# - Create clear, expressive variable and function names logically derived from the pseudocode for readability and maintainability.
# - Rigorously handle all edge cases and input constraints implied by the pseudocode to ensure robustness.
# - Prioritize algorithmic efficiency: select optimal data structures, minimize time complexity, and prevent unnecessary recomputations.
# - Avoid redundant code; merge loops or conditions when sensible without compromising clarity.
# - Employ Python standard library modules or broadly accepted external libraries if they simplify, accelerate, or clarify your implementation.
# - Use advanced input/output techniques (e.g., sys.stdin.readline()) only when large input mandates it; clearly justify this choice with brief inline comments.
# - Add concise, explanatory comments only where the logic is subtle, non-obvious, or critical to correctness and performance.
# - Deliver a complete, runnable, and memory/time efficient Python program that precisely implements the pseudocode logic.
#
# Begin your implementation immediately after this comment.

```python
# Your translated implementation here
```
```