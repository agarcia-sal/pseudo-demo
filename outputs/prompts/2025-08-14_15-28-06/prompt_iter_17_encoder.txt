Generate concise, high-level pseudocode from the given problem description, balancing clarity with compactness using mostly natural language combined with standard symbolic operators (←, =, mod, etc.) and common abbreviations.  
Output only the numbered list of pseudocode steps starting from 1, with mostly one-line statements unless clarity requires minimal multiline structure. Use consistent, simple control flow constructs: `if`, `else if`, `else`, `for`, `while`, `function`, `read`, `print`, `let`, `set`.  
Prefer natural language phrasing for actions (e.g., "read input," "print result," "for each element," "let variable be," "set size of list") and concise but descriptive identifiers reflecting the problem’s entities and logic.  
Avoid explanations, comments, summaries, empty lines, decorative separators, or extra whitespace.  
Use minimal formatting strictly as:  
1. statement  
2. another statement  
3. etc.  
Aim for pseudocode that is easy to read, compact, and high-level—suitable for rapid human understanding and direct implementation within 5 seconds.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i ← i  
9.   for j = i+1 to size of A exclusive  
10.   if A[min_i] > A[j]: set min_i ← j  
11.  swap A[i], A[min_i]  
12. print all elements of A