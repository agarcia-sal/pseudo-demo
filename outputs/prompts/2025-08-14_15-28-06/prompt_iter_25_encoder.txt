Generate clear, concise pseudocode directly from the given problem description.  
Produce easy-to-read, high-level pseudocode that uses mostly natural language with symbolic operators (←, =, mod, etc.) and brief, consistent control structures: `if`, `else if`, `else`, `for`, `while`, `function`, `read`, `print`, `let`, `set`, `return`.  
Favor compact one-line statements with minimal indenting strictly for nested control flow clarity.  
Use concise, descriptive names reflecting the problem context without unnecessary verbosity.  
Represent assignments symbolically with ← and use natural expressions like “read integer n”, “for i = 0 to n-1”, “if x mod 2 = 0”, “print result”.  
Avoid comments, explanations, empty lines, decorative formatting, or separator lines.  
Output only a numbered list of steps starting at 1, exactly as:

1. statement  
2. next statement  
3. etc.

Example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A