Generate clear, concise, and compact high-level pseudocode from the provided problem description.  
Prioritize mostly natural language phrasing combined with simple symbolic operators (←, =, mod, //, etc.) and common abbreviations to keep the code readable yet succinct.  
Output strictly numbered line-by-line pseudocode with minimal formatting, using one-liners wherever clarity is preserved.  
Use consistent, simple control flow constructs and natural, human-like variable assignments and iteration statements.  
Avoid explanations, summaries, comments, or decorative separators—only the pseudocode steps.  
Prefer natural language verbs and structures such as “read,” “print,” “let,” “set,” “if,” “else,” “while,” “for each,” “function.”  
Keep identifiers short but meaningful enough for understanding.  
Use indentation within single lines sparingly to show nested actions (e.g., “if cond: action”).  
Example format:

1. let n be integer  
2. read n  
3. let i ← 0  
4. while i < n: i ← i + 1  
5. print i

Focus on producing elegant, high-level, easy-to-scan pseudocode suitable for quick comprehension and implementation within a 5-second runtime limit.