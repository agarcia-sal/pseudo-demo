Translate the provided pseudocode into a fully functional, clean, and high-performance Python 3 program enclosed in a single code block as shown below. Your solution must adhere to these requirements:

- Use only `input()` with no arguments for reading input.
- Precisely match the input/output behavior dictated by the pseudocode, producing exactly the expected output with no extra characters, spaces, blank lines, comments outside critical inline explanations, or debugging prints.
- Use clear, descriptive variable names naturally derived from the pseudocode.
- Optimize for both clarity and efficiency: implement appropriate algorithms and data structures to ensure correctness and that your code executes within a 5-second time limit on typical competitive programming inputs.
- Robustly handle all possible edge cases implied by the pseudocode.
- Take advantage of any Python standard libraries or built-in modules that improve performance, readability, or correctness (e.g., `sys.stdin.readline` for fast input, `collections`, `heapq`, `itertools`, etc.). Import standard modules only when they meaningfully enhance your solution.
- Avoid unnecessary complexity and redundancy.
- Include brief inline comments only when essential to clarify subtle or complex logic.
- Enclose your entire solution in a single, fenced Python code block exactly as shown below:

```python
# your complete Python 3 solution here
```

**Do not output anything outside this code block.**