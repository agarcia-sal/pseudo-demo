Generate concise, high-level pseudocode from the given problem description using mostly natural language combined with standard symbolic operators (←, =, mod, etc.) and common abbreviations. Output only a numbered list of pseudocode steps starting at 1, using mostly one-line statements unless minimal multi-line formatting improves clarity. Use simple, consistent control structures: `if`, `else if`, `else`, `for`, `while`, `function`, `read`, `print`, `let`, `set`, `return`. Prefer descriptive, concise identifiers reflecting problem entities and logic. Express actions naturally (e.g., "read input", "print result", "for each element", "set variable", "let count be integer"). Avoid explanations, comments, summaries, empty lines, decorative separators, or extra whitespace. Use minimal formatting strictly as:

1. statement  
2. another statement  
3. etc.

Favor compactness and clarity equally—compose mostly one-line statements with occasional indented blocks only to preserve clear control flow. Symbolically assign variables (using ←) and employ loops and conditionals in natural syntax without verbose keywords. Produce pseudocode that is easy to read, quick to understand, and ready for direct implementation within seconds.

Example:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i ← i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A