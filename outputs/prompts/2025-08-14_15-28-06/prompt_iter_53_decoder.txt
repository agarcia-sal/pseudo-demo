```python
# You will be given pseudocode describing an algorithmic problem.
# Your task is to translate it into a clean, fully functional, and efficient Python 3 program,
# strictly adhering to the pseudocode's logic and intent.
#
# Guidelines:
# - Output ONLY a single, self-contained, runnable Python script, enclosed within one ```python ... ``` block.
# - Use plain input() calls without any prompt strings.
# - Rename variables thoughtfully to clear, meaningful names reflecting their roles and data.
# - Carefully handle all input constraints, edge cases, and avoid potential runtime errors.
# - Focus on algorithmic clarity and efficiency: optimize loops, minimize redundant operations, and leverage suitable data structures.
# - You may use any standard or well-known Python libraries if they help correctness, clarity, or performance.
# - Use advanced I/O (e.g., sys.stdin.readline) only when justified by input size; add minimal comments to explain such optimizations.
# - Write minimal but precise comments only to explain nontrivial or subtle logic crucial to correctness.
# - Avoid extra prints, debugging, or blank lines; produce exactly the required output.
# - Do not include multiple code blocks or partial code â€” always deliver one contiguous code block.
# - Avoid unnecessary imports or verbose code not directly relevant to the problem.
#
# Your solution will be tested on diverse cases, so prioritize robustness and correctness over clever tricks.
# If a feature (like a particular library or input method) is not absolutely needed, omit it for simplicity.
#
# Deliver a polished, production-grade script that can be executed as-is.

```python
# Your Python 3 implementation here
```
```