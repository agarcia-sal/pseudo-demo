Generate clear, concise, and high-level pseudocode that is easy to read and understand.  
Use mostly natural language combined with common symbolic operators (←, =, mod, //, etc.) and standard abbreviations.  
Favor one-liner statements whenever they remain clear and unambiguous.  
Express control flow simply and consistently using natural constructs like:  
 “read”, “print”, “let”, “set”, “if”, “else”, “for”, “while”, “function”, “return”, “break”, “continue”, “in”, and “to”.  
Keep variables and identifiers short yet descriptive enough to reflect their roles intuitively.  
Use minimal formatting with numbered lines starting at 1, as in:  

1. let x ← 0  
2. while x < n: x ← x + 1  
3. if condition: action else other_action  
4. for each element in collection: process element  

Avoid any explanations, summaries, comments, or decorative separators in the output.  
Output only the pseudocode steps that directly implement the problem requirements.  
Make the pseudocode compact, high-level, and readily implementable within a 5-second runtime limit.