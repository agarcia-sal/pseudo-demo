```python
# Task: Convert the provided pseudocode into a complete, efficient, and idiomatic Python 3 program.
#
# Instructions:
# - Output exactly one contiguous Python 3 code block, enclosed within ```python ... ```, with no additional text.
# - Use plain input() calls without prompt strings for all input reading.
# - Choose descriptive, meaningful identifiers for variables and functions reflecting pseudocode semantics.
# - Ensure the resulting code fully and accurately implements the logic, correctly handling all edge cases.
# - Optimize for clarity, speed, and memory:
#    * Select data structures and algorithms best suited to the problem as inferred from pseudocode.
#    * Eliminate redundant computations and minimize loops without sacrificing readability.
#    * Use Python built-ins and the standard library effectively; leverage widely trusted, dependency-free libraries if they meaningfully improve performance or clarity.
#    * Switch to faster I/O methods (e.g., sys.stdin.readline) only when large inputs justify the added complexity.
# - Include concise inline comments strictly for complex or non-obvious portions of the code.
# - Produce a clean, runnable, standalone script with no placeholders, debugging output, explanations, or fragmented snippets.
#
# Deliverable: A single, well-structured, performant Python 3 script exactly implementing the pseudocode logic.

```python
# Your refined, high-performance Python 3 code starts here
```
```