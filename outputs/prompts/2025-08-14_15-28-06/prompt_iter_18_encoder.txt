Generate clear, compact, high-level pseudocode from the given problem description using mostly natural language mixed with concise symbolic operators (←, =, mod, etc.) and common abbreviations.  
Output only a numbered list of pseudocode steps starting from 1. Use mostly one-line statements, but allow minimal indentation and multiline structure only when needed for clarity.  
Use simple, consistent control flow keywords: `if`, `else if`, `else`, `for`, `while`, `function`, `read`, `print`, `let`, `set`, `append`, `break`.  
Phrase actions naturally and concisely (e.g., "read input," "print result," "for each element," "let variable be," "set size of list").  
Prefer short, descriptive variable names reflecting problem entities and logic. Use symbolic operators and expressions where it improves brevity and clarity.  
Do not include explanations, comments, summaries, empty lines, or decorative separators.  
Use minimal formatting strictly as:  
1. statement  
2. statement  
3. etc.  
Aim for pseudocode easy to understand at a glance, compact and direct, fit for quick implementation within seconds.  
Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i ← i  
9.   for j = i+1 to size of A exclusive  
10.   set min_i ← j if A[min_i] > A[j]  
11.  swap A[i], A[min_i]  
12. print all elements of A