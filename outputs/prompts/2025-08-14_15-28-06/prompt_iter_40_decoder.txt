```python
# Translate the given pseudocode into an optimized, clean, and fully functional Python 3 program.
#
# Requirements for your translation:
# - Enclose your entire solution within one Python code block: ```python ... ```.
# - Use plain input() without any prompt strings for all input reading.
# - Output exactly what the pseudocode specifies, with no extra text, blank lines, comments, or debugging information.
# - Derive meaningful variable names from the pseudocode context for clarity and maintainability.
# - Correctly handle all input constraints, including edge cases.
# - Optimize for both time and memory efficiency: choose the most suitable algorithms and data structures.
# - You may freely use any standard Python library or well-known, widely available packages to improve correctness, clarity, or performance.
# - Employ efficient input/output methods (like sys.stdin.readline) only when absolutely necessary due to large input sizes, and note this choice with a brief inline comment.
# - Avoid redundant computations and unnecessary memory usage by applying appropriate optimization techniques.
# - Include concise comments only if the logic is complex, non-trivial, or benefits from clarification.
# - Ensure the code is immediately executable and fully implements the logic described in the pseudocode.
#
# Begin your solution immediately below, enclosed in a single fenced Python code block:

```python
# your implementation here
```
```