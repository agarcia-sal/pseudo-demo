```python
# Task: Convert the given pseudocode into a single, fully functional, robust, and idiomatic Python 3 script
# that exactly implements the described logic.
#
# Guidelines for translation:
# - Output only one standalone Python code block wrapped in ```python ... ```, with no extra commentary or text.
# - Use plain input() calls for all inputs without prompt strings.
# - Employ clear, expressive names for variables and functions deduced from pseudocode semantics.
# - Ensure comprehensive edge case handling to avoid runtime errors.
# - Prioritize performance and memory efficiency by:
#   * Selecting optimal algorithms and data structures aligned with the pseudocode aim;
#   * Eliminating redundancy, minimizing loops, and avoiding unnecessary recomputations;
#   * Leveraging Python's standard library and built-ins for concise, fast, and readable code;
#   * Employ advanced I/O techniques like sys.stdin.readline only if justified by input size;
#   * Using well-known, dependency-free third-party libraries is acceptable if they improve clarity or speed.
# - Include only succinct inline comments for nontrivial logic or potential pitfalls.
# - Deliver a clean, runnable script: no placeholders, debug prints, extra lines, or fragmented code.
# - Do not add any pre/post code descriptions, separators, or explanations.

```python
# Your fully optimized Python 3 implementation goes here
```
```