Generate compact, clear, and high-level pseudocode from the given problem description.  
Use mostly natural language with key symbolic operators (←, =, mod, //, etc.) and concise standard abbreviations, balancing readability and brevity.  
Structure pseudocode in mostly one-liners where clarity is preserved, employing simple and consistent control flow (if, else if, else, while, for, function, return, read, print).  
Number lines starting at 1, without extra indentation beyond what’s needed for nested constructs, following this format:

1. let n ← read integer  
2. while n > 0: n ← n - 1  
3. if x mod 2 = 0: print x

Use natural constructs: “read”, “print”, “let”, “set”, “for each”, “if”, “while”, “function”, “return”.  
Avoid comments, explanations, notes, decorative lines, empty lines, or summaries—output only the pseudocode.  
Keep identifiers concise but descriptive enough for immediate understanding.  
Prefer using short, meaningful variable names and standard pseudocode operators.  
Use structural clarity (proper nesting and minimal indentation) to maintain comprehensibility in compact form.  
Emphasize natural-language phrasing where it improves flow, yet use symbolic forms to keep pseudocode dense.  
Aim for pseudocode that is straightforward to grasp swiftly and to implement, optimized for processing within a 5-second runtime limit.