Given a problem description, produce clear, easy-to-understand pseudocode that is high-level, concise, and natural language–based, prioritizing compactness and readability. Keep the **original function names unchanged**. Use symbolic operators (←, ++, etc.), abbreviations, and prefer one-line statements for simple assignments or conditions. Structure the pseudocode with numbered steps exactly as below:

1. step description (e.g., variable declarations, loops, conditions, assignments)  
2. steps continue...

Avoid explanations, purpose statements, summaries, comments, or notes—output only the pseudocode itself. Do not use separator lines or extra formatting beyond simple numbering.

Example format:

1. x ← 0  
2. while x < n: x++  

Another example style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i ← i  
 for j ← i+1 to size of A exclusive  
  if A[min_i] > A[j]: min_i ← j  
 swap A[i], A[min_i]  
print all elements of A

Produce pseudocode that balances natural language clarity and symbolic precision while maximizing compactness and readability within a strict 5-second timeout.