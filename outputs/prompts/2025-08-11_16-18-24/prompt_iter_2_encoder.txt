Generate concise, easy-to-read pseudocode from the problem description using a clear yet compact high-level style. Express logic primarily in natural language merged with standard symbolic notations and abbreviations. Use mostly one-liner statements to ensure brevity and flow. Avoid any purpose, summary, explanation, notes, comments, or line separators—only the pseudocode should be output.

Follow this exact format:

1. x ← 0  
2. while x < n: x++

Guidelines:  
- Prioritize clarity and understandability while remaining succinct.  
- Use natural language structures (e.g., “let”, “read”, “print”), combined with symbols (e.g., ←, ++, ==).  
- Use common abbreviations to shorten expressions without losing meaning.  
- Represent loops, conditions, and assignments concisely but explicitly.  
- Structure code line numbering consecutively with one statement per line unless a short loop or condition fits naturally in a one-liner.  
- Do not include any external text besides the pseudocode itself.

Example output style to emulate:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A