Translate the given code into high-level, clear, and concise pseudocode that strictly preserves all original function and class names, as well as their structure and nesting. Use natural language combined with symbolic expressions and conventional programming keywords (e.g., FUNCTION, SET, FOR, IF, RETURN) to describe operations abstractly but unambiguously. Represent control flow and data operations explicitly, avoiding overly terse one-liners—but keep the pseudocode succinct and readable without verbose explanations, extra commentary, or summaries. Do not add separators or formatting lines; the output should contain *only* the pseudocode.

Focus on producing pseudocode that could be understood by programmers of varied backgrounds, balancing abstraction with precise operation descriptions. Use consistent indentation to show blocks and nesting. Preserve method signatures and class declarations exactly as in the original code, including parameters and return statements, reflecting their logical relationships and scopes clearly.  
Do not produce any notes, explanations, clarifications, or meta-text—output only the pseudocode itself.