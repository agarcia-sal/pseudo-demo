Write concise, easy-to-read pseudocode that mirrors the original code’s structure exactly, preserving all class names, function names, parameters, and data structures without changes. Produce mainly one-liner statements using a blend of natural language and symbolic abbreviations, making the pseudocode compact, high-level, and clear. Avoid any purpose statements, summaries, comments, explanations, or notes—only output pseudocode.

Use a numbered step format with minimal indentation, for example:

1. x ← 0  
2. while x < n: x++  

Maintain all control flows (loops, conditionals) and assignments as in the original code, ensuring syntactic simplicity and brevity. Do not insert separator lines or extra formatting.

Example style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j], then min_i ← j  
 swap A[i], A[min_i]  
print all elements of A

Your goal is to generate the best possible pseudocode within a 5-second time limit, maximizing clarity, brevity, and faithful reproduction of original program structure.