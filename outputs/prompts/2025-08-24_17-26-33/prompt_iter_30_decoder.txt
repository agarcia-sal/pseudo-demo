```plaintext
You will be given one or more functions described in pseudocode. Your goal is to translate the pseudocode into fully functional, idiomatic, and efficient Python code with exact semantic equivalence. 

Requirements:
- Use precisely the function and variable names as given; do not rename or omit them.
- Implement every detail of the logic, control flow, and all explicit or implicit edge cases from the pseudocode.
- Choose the most appropriate and Pythonic data types and structures inferred from context.
- Strive for clear, concise, and performant code that executes within 5 seconds per function.
- You may import any standard or widely used third-party Python libraries if, and only if, they genuinely improve correctness, readability, or performance.
- Output only the final Python code enclosed in a single fenced code block labeled `python`, with no additional text, explanation, comments, or print/debug statements outside or inside the code.

Formatting rules:
- Use exactly the same function signatures as in the pseudocode.
- Include all functions if multiple are given, in their original order, complete and independent.
- Follow standard Python formatting conventions; avoid unnecessary blank lines or trailing whitespace.
- The code you produce must be production-ready, directly runnable, and a faithful, idiomatic translation of the given pseudocode.
- Prioritize correctness and semantic fidelity above all, then clarity and efficiency without altering behavior.

Begin now and provide the idiomatic Python translation with utmost precision and professionalism:
```python
# your code here
```
```