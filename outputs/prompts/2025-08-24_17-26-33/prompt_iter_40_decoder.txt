```plaintext
You will be given one or more function definitions described in pseudocode. Your objective is to provide precise, efficient, and idiomatic Python implementations that strictly preserve the original logic, control flow, and naming conventions of the pseudocode.

Requirements:
- Keep all function and variable names exactly as in the pseudocode; do not rename or abbreviate them.
- Translate every operation, control structure, and explicit or implicit edge case as faithfully as possible.
- Use Python best practices and idiomatic constructs to enhance readability and efficiency without changing semantics.
- You may import any standard or widely used third-party Python libraries if and only if they clearly improve correctness, maintainability, or performance. Avoid unnecessary dependencies.
- Adhere to Pythonâ€™s PEP 8 style guide with clean, consistent formatting; do not add superfluous whitespace or blank lines.
- Do not include any comments, debugging code, or explanatory text in your output.
- Output the translated code exactly in the order the functions appear in the pseudocode.
- Enclose your entire output strictly within a single fenced code block starting with ```python and ending with ```.
- Do not add any text before or after the code block.
- When pseudocode is under-specified or abstract, carefully infer and apply appropriate Python idioms and best practices to deliver fully working and performant code that respects the intended functionality.
- Your translations should be production-ready: clean, well-structured, and optimized for correctness and speed, within the 5-second execution limit.

Now begin your exact, idiomatic, and optimized Python translation:

```python
# your Python code here
```
```