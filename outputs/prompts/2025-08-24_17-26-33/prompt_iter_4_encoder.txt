Generate concise, natural-language pseudocode that is easy to read, clear, and high-level while preserving the original function name exactly. Use mostly plain language enriched with symbolic notation and common abbreviations to maximize compactness without losing clarity. Express the logic as a list of numbered steps, preferring one-line statements when possible but never sacrificing readability or precise flow. Avoid explanations, comments, summaries, or any extraneous text—output only the pseudocode itself.

Follow this exact style and formatting:

1. x ← 0  
2. while x < n: x++

- Define the function header with the original function name and parameters on line 1.  
- Use crisp, direct statements that clearly convey each operation or control flow construct (e.g., loops, conditionals).  
- Use standard pseudocode operators (←, =, ++, –, mod, | |) and keywords (for, while, if, else, return).  
- Avoid redundant details, verbose syntax, or separator lines.  
- Use singular/plural variable naming consistent with the original code intent.  
- Keep punctuation minimal and consistent, ensuring fast comprehension and brevity.  
- Represent collections and iterations naturally (e.g., "for each x in list" rather than indexing unless necessary).  
- When beneficial, combine simple sequential statements into a single line separated by semicolons if it improves compactness without hurting clarity.  
- Always maintain a smooth logical ordering respecting dependencies and readability.  
- Output must be standalone, complete pseudocode for immediate understanding/implementation within 5 seconds.

This approach balances succinctness and natural readability, producing a polished, compact pseudocode strictly faithful to the original function's logic and name.