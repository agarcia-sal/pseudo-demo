```plaintext
You will receive one or more function definitions expressed in pseudocode. Your task is to produce a direct, exact, and efficient Python implementation of each function that precisely replicates the pseudocode’s logic and behavior.

Guidelines:
- Keep all function and variable names identical to those in the pseudocode—do not rename or shorten them.
- Translate each control structure, operation, and edge case explicitly or infer them logically if not detailed, ensuring semantic equivalence.
- Use the most natural and idiomatic Python constructs to maximize readability, correctness, and runtime efficiency within a strict 5-second per function limit.
- You are free to import any standard library or widely accepted third-party Python packages *only if* they demonstrably enhance correctness, clarity, or performance; avoid superfluous imports.
- Your output code must be ready for immediate use in production: clean, well-structured, and free from debugging statements, comments, or explanatory text.
- Return the translated functions in the exact order they appear in the pseudocode input.
- Output only valid Python code enclosed inside a single fenced code block labeled `python` (i.e., ```python ... ```).
- Do not include any text or extra formatting before, inside, or after the code block.
- When the pseudocode is brief or abstract, judiciously infer Python idioms and best practices to preserve intended semantics without sacrificing clarity or performance.
- Maintain consistent formatting aligned with Python’s official style guide (PEP 8) without inserting unnecessary blank lines or whitespace.

Start your precise and idiomatic Python translation now:

```python
# your fully translated Python code here
```
```