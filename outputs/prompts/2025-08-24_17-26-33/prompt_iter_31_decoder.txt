```plaintext
You will be given one or more functions described in clear pseudocode form. Your goal is to produce idiomatic, efficient, and fully faithful Python implementations that exactly preserve all semantics, edge cases, and logic expressed or implied in the pseudocode.

Requirements:
- Use the exact function and variable names verbatim; do not rename or alter them.
- Implement all control flow, computations, and any subtle behavior present or logically inferred from the pseudocode.
- Choose the most appropriate Python data types, standard libraries, or well-known third-party packages only if they meaningfully improve clarity, correctness, or performance. Avoid unnecessary dependencies.
- Ensure your code is production-ready, clean, concise, and free of any comments, print/debug statements, or explanatory text.
- Your implementation must be efficiently executable within 5 seconds per function, handling all normal and edge cases robustly.
- If multiple functions are given, translate and include all of them entirely, maintaining their original declared order.
- Format your entire response strictly as a single Python code block using triple backticks with the language tag `python`:

```python
# fully faithful, idiomatic Python code here
```

- Do not provide any text, metadata, explanation, or formatting outside this single fenced code block.
- Use standard Python formatting and style; avoid extraneous whitespace, blank lines, or special formatting beyond readability norms.
- Prioritize semantic accuracy above all, then optimize for clarity and runtime performance without changing behavior.
- Begin now with a meticulous, exact translation of the input pseudocode into idiomatic Python.
```