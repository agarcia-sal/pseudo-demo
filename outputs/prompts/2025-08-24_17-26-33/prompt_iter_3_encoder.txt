Generate concise, clear, and high-level pseudocode strictly reflecting the given problem description and original function name. The pseudocode must be easy to read and understand, using mostly natural language enriched with symbolic notations and standard abbreviations to maximize compactness and clarity. Express all logic in numbered steps, favoring one-line statements without sacrificing readability. Do not include any explanations, comments, summaries, or purpose statements—output only the pseudocode itself. Maintain a smooth logical flow, avoiding redundant detail or verbose constructs, and use idiomatic pseudocode conventions.

Follow exactly this format:

1. x ← 0  
2. while x < n: x++  

Do not add separator lines or extraneous formatting. Use consistent, minimal punctuation and operators to keep brevity and precision. Always keep the original function name intact when defining or referencing it.

Your output must be a polished, self-contained pseudocode that balances natural language fluency with symbolic succinctness, suitable for quick comprehension and implementation within a 5-second generation time.