Generate concise, high-level pseudocode from the given problem description. The pseudocode must be easy to read and understand, using natural language blended with symbolic notation and standard abbreviations. Make it compact and structured, preferably using one-liners when feasible, but prioritize clarity and flow. Do not include purpose statements, explanations, comments, notes, or summaries—only the pseudocode steps themselves. Use consistent indentation to indicate nesting. Follow this exact style and format:

1. variable ← initial value  
2. while condition: action  
3. for i in range: do something  
4. if condition: statement else statement  

Use symbolic operators (←, =, ≠, mod), loops, conditionals, function calls, and simple expressions as needed. Avoid verbose phrasing. Do not add extra formatting or separator lines. The output should be solely the pseudocode steps, numbered sequentially starting from 1.

Example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers, size n  
5. read n elements into A  
6. for i in 0 to n-1:  
7.   set min_i ← i  
8.   for j in i+1 to n-1: if A[min_i] > A[j]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A