Given a code snippet within classes and functions, generate clear, precise, and high-level pseudocode that retains the exact class and function names and structure as in the original code. Use conventional pseudocode keywords (e.g., FUNCTION, RETURN, IF, FOR, WHILE) and natural language expressions. 

Express data operations abstractly (e.g., SET variable TO value, INCREMENT variable BY amount, APPEND item TO list), avoid language-specific syntax, omit comments, summaries, explanations, or notes. Do not add any text besides the pseudocode itself. Use consistent indentation to represent code blocks. Preserve class and method organization exactly as in the original code, including class declarations and method signatures, reflecting parameters clearly.

Use descriptive but concise language while maximizing readability and abstraction â€” avoid low-level language-specific details, expressions, or implementation minutiae. Prefer natural language terms over symbolic shorthand unless widely understood (e.g., use DIVIDED BY instead of /, MODULO instead of %). Maintain original control structures and flow as much as possible. Avoid empty lines or separators between code blocks.

Example style:  
```
CLASS Solution
    FUNCTION calc_average(list_of_numbers)
        SET total_sum TO 0
        FOR each number IN list_of_numbers
            INCREMENT total_sum BY number
        SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
        RETURN average_value
    END FUNCTION
END CLASS
```