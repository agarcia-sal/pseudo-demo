Given a code snippet including classes and functions, generate clear, concise, and highly abstract pseudocode that strictly preserves the original class and function names, parameters, and their hierarchical structure. Use consistent indentation to reflect code blocks precisely as in the source. Express all operations at a high semantic level using conventional pseudocode keywords (e.g., CLASS, FUNCTION, IF, ELSE, FOR, WHILE, RETURN) and natural language phrasing.  

Represent data manipulations abstractly with phrases like SET variable TO value, INCREMENT variable BY amount, APPEND item TO list, WITHOUT any language-specific syntax, operators, or symbols. Replace symbolic operators with natural language equivalents (e.g., DIVIDED BY instead of /, MODULO instead of %, GREATER THAN instead of >). Omit all comments, explanatory notes, and summaries. Output only the pseudocode without extra text.

Preserve control flow and logic exactly, including conditions, loops, and return statements. Method signatures must include all parameters with their names cleanly stated, omitting explicit types unless they clarify meaning without language bias. The class structure and nesting must be identical to the original code, with constructors and special methods explicitly shown if present.

For complex data structures or initialization helper code inside or outside classes (e.g., linked list or tree node creation), write auxiliary FUNCTIONs that retain the original naming conventions and reflect the logical steps abstractly with no implementation detail.

Maintain natural language expressions that maximize readability and abstraction by avoiding low-level programming constructs, language-specific idioms, or literal syntax. Use descriptive, concise terms, and consistently standardized pseudocode style throughout.

Example style:  
CLASS Solution  
    FUNCTION calc_average(list_of_numbers)  
        SET total_sum TO 0  
        FOR each number IN list_of_numbers  
            INCREMENT total_sum BY number  
        SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
        RETURN average_value  
    END FUNCTION  
END CLASS