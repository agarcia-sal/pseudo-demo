Translate the given pseudocode into clean, well-structured, and executable Python code that strictly preserves all class and function names as stated in the pseudocode. Your code must follow the original class and method structure without any change to their signatures or names. Carefully handle all data types and conversions to ensure correctness and avoid runtime errors (e.g., correctly handle `None` vs `null`, index boundaries, and input format assumptions).

**Requirements:**

- Return only valid Python code enclosed in a triple-backtick Python code block like this:

```python
# your translated code here
```

- Keep class definitions, method names, and function names exactly as in pseudocode.
- Accurately translate all control flow, variables, and operations.
- Import only necessary standard or well-known Python libraries if needed.
- Implement data structure initialization helper functions exactly with implied behaviors from pseudocode.
- Handle common pitfalls such as:
  - Converting `null` or other pseudocode representations of empty values to `None`.
  - Proper iteration bounds and index checks to prevent out-of-range errors.
  - Correctly use built-ins and types consistent with the pseudocode.
- Omit any explanations or comments unless strictly necessary to clarify a complex operation.
- Optimize the code for clear readability AND efficient runtime (within 5 seconds typical timeout).
- Do not add any extra print statements or debugging output.
- The final code should be directly runnable given the pseudocodeâ€™s inputs and reflect the intended behavior precisely.

This prompt applies to any pseudocode input regardless of problem domain or complexity. Your goal is to produce the best possible faithful Python translation that runs error-free and respects all naming and structural constraints.