Given source code containing classes, functions, variables, and control structures, translate it into strictly hierarchical, maximally abstract pseudocode adhering to the following instructions:

- Preserve all original class names, function names, method names, and parameter names exactly, maintaining the full nesting and structural hierarchy within classes and functions without alteration.
- Use only uppercase English keywords for structural markers: CLASS, END CLASS, FUNCTION, END FUNCTION, IF, ELSE IF, ELSE, END IF, FOR, END FOR, WHILE, END WHILE, RETURN, BREAK, CONTINUE.
- Do not include any comments, annotations, metadata, example code, or extraneous text before, within, or after the pseudocode output.
- Render all control flow and data operations explicitly and fully in clear, fluent natural language phrasing without any programming syntax or symbols such as brackets, braces, parentheses, quotes, punctuation marks, or special characters.
- Express all operators with explicit uppercase word forms replacing symbols: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.
- Represent all variable assignments and updates using standard phrasing: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE element FROM list, ASSIGN reference TO object.
- Describe all element access, slicing, or indexing by natural language: element at position index of collection, substring from position start TO position end of string, or equivalent descriptive forms.
- Spell out every conditional expression and logical predicate fully without abbreviations or shorthand.
- Express all loops in natural, explicit iteration form preserving original loop variables: FOR each element IN collection, FOR variable FROM start TO end, WHILE condition holds.
- Preserve exact original special method names including constructors and language-specific built-in method names with their original parameter lists.
- Represent all helper or nested functions as separate FUNCTION blocks named exactly as in source, describing their actions in abstract natural language without any implementation or language idiosyncrasies.
- Prohibit any literal notation for numbers or strings; replace with spelled-out cardinal numbers or descriptive linguistic equivalents (for instance, use spelled-out numbers such as zero, one, two, or natural language phrases as needed).
- Maintain moderate complexity in phrasing to balance clarity, abstraction, and readability using natural flowing English.
- Output only the pseudocode following these conventions, strictly preserving complete source context and structure, with no added commentary or explanation.

Example of expected style:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION