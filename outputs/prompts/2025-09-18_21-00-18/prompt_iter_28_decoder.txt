Translate the provided pseudocode into fully working, well-structured, and idiomatic Python code. Your translation must:

- Preserve all original class names, function names, and function signatures exactly as given.
- Maintain class and object hierarchies strictly as described in the pseudocode.
- Convert inputs representing linked lists, trees, or other data structures using appropriate standard Python conventions; implement helper functions if needed to recreate such structures faithfully.
- Handle all edge and boundary cases robustly to prevent runtime errors.
- Include all necessary imports explicitly.
- Write clear, concise code optimized for correctness and efficiency, suitable for a 5-second runtime constraint.
- Use Pythonic idioms and best practices for readability and maintainability.
- Allow usage of any standard Python libraries or modules to enhance code clarity and performance.
- Restrict comments to only those necessary to clarify complex or nontrivial parts of the code.
- Omit any superfluous explanations, example runs, or unrelated comments.
- Enclose your entire output in a single Python code block exactly like this:

```python
# Your translated code here
```

Follow these instructions carefully to produce code that matches the problem specification, passes hidden test cases, and is ready for immediate testing.