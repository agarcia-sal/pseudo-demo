Translate the provided pseudocode into complete, correct, and optimized Python code that executes within a 5-second runtime. Your translation must adhere strictly to the following guidelines:

- Preserve all class names, method names, function signatures, parameters, and their exact class/object structure as given in the pseudocode.
- Implement all logic fully and correctly, handling edge cases and typical Python input conventions. For example, translate pseudocode `null` into Python `None`, and convert input lists representing trees or linked lists into appropriate Python data structures using helper functions if needed.
- Use standard Python types and idiomatic styles; apply type hints only if clearly beneficial but never alter the original signatures.
- Import any relevant standard or widely accepted third-party Python libraries to maximize correctness, clarity, and performance.
- Ensure no runtime errors remain; all branches and conditions must be handled, no incomplete code fragments.
- Enclose your entire generated code snippet in a single, uninterrupted Python code block exactly like this:

```python
# your translated code here
```

- Avoid extra explanations or verbose comments; include only concise comments that clarify non-trivial or subtle portions of the implementation.
- The output code should be ready to run and test immediately with no further modification.

Your solution should focus on reliability, faithful translation, and performance, fully respecting the original pseudocode structure and logic while leveraging Pythonic constructs and libraries as needed.