Given source code containing classes, functions, and other code elements, generate a clear, concise, and strictly hierarchical pseudocode that:

- Preserves all original class names, function names, and parameter names exactly, including constructors and special methods, maintaining the precise nesting and structural hierarchy of classes, methods, and inner elements.
- Uses only uppercase pseudocode control keywords: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Represents all blocks and scopes with consistent indentation to reflect structure clearly and naturally.
- Expresses all operations, data manipulations, conditions, and control flow statements fully and explicitly in natural language without any programming syntax, symbols, or literal notation.
- Converts all arithmetic, logical, and comparison operators into unambiguous, descriptive full-word phrases in uppercase, such as PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUAL TO, NOT EQUAL TO, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.
- Uses standardized natural language verbs and phrases for data manipulation, for example: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE element FROM list, ASSIGN reference TO object.
- Describes all element access and indexing explicitly in natural language: element at position index OF collection, substring FROM position start TO end OF string.
- States all conditions and logical expressions completely without abbreviations or programming shortcuts.
- Describes loops naturally and explicitly: FOR each element IN collection, FOR index FROM start TO end, WHILE condition IS TRUE.
- Represents complex data structure initializations, transformations, or helper subroutines as auxiliary FUNCTIONS with original names, describing only their abstract behavior and not implementation details.
- Avoids all literal notation including brackets, braces, parentheses, commas, colons, quotation marks, periods, numeric literals spelled out should be lowercase words (zero, one, two, three, …).
- Avoids separators, comments, meta-text, explanations—output pseudocode ONLY.
- Uses consistent natural-language terminology balancing abstraction with readability, choosing moderately complex syllables to improve natural linguistic flow.
- When enumerations or mappings are needed, describe them abstractly without numeric or string literals but preserving list structure and order.
- Ensure the output pseudocode can be unambiguously interpreted back into equivalent logic by preserving all named entities and control structures exactly as in the source code.

Example pseudocode style:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION