Given source code with classes, functions, and other elements, translate it into highly abstract, strictly hierarchical pseudocode that:  

- Preserves every original class name, function name, parameter name, and method name exactly, maintaining full structural hierarchy and nesting precisely as in the source.  
- Uses consistent, clear indentation to represent blocks and scopes exactly as in the source code.  
- Employs only uppercase pseudocode keywords: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE, TRY, CATCH, FINALLY, RAISE, WITH, YIELD, END FUNCTION, END CLASS, END IF, END FOR, END WHILE, END TRY, END CATCH, END WITH.  
- Represents all control flow and conditional expressions fully in clear, natural language without programming syntax, symbols, or punctuationâ€”using complete descriptive phrases.  
- Converts all operators into explicit full-word forms capitalized (e.g., PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, GREATER THAN, GREATER THAN OR EQUAL TO, LESS THAN, LESS THAN OR EQUAL TO, AND, OR, NOT, XOR).  
- Expresses all data manipulation with a fixed, formalized verb set: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE item FROM list, ASSIGN reference TO object, RETURN value, YIELD value, RAISE exception.  
- Translates all element access and indexing into natural language (e.g., element at position index of collection, character at position index of string, key in mapping).  
- Describes loop iterations explicitly and clearly: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds, FOR each key and value IN mapping.  
- Avoids numeric literals spelled ambiguously by always writing numbers as words or descriptive phrases consistent with English number conventions (e.g., zero, one, ten, one hundred, one thousand).  
- Omits all literal notation including quotes, commas, colons, brackets, braces, periods, or any programming punctuation from both code and data.  
- Represents complex data initializations, transformations, or auxiliary routines as separate auxiliary FUNCTIONS preserving original names, describing only essential abstract behavior without implementation details.  
- Does not include comments, explanations, meta-text, or any text other than the pure pseudocode output.  
- Maintains the exact sequence, nesting, and parameter signatures from the source code, including all constructors and special methods.  
- Uses uniform, descriptive naming for internal variables if introduced by the pseudocode process (only when strictly necessary), ensuring clarity and minimal ambiguity.  
- Uses natural, moderately precise vocabulary with slightly elevated syllabic complexity to enhance readability and abstraction while avoiding verbosity.  
- Outputs pseudocode only, matching this format and style exactly.  

Example of target pseudocode style:  
FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION