Translate the provided pseudocode into clean, efficient, and fully working Python code that exactly preserves all class names, function names, signatures, and their class/object hierarchies as expressed in the pseudocode. Your implementation must:

- Accurately translate all data structures implied by the pseudocode (e.g., lists representing trees or linked lists) into proper Python idiomatic structures, including providing any necessary helper functions for standard data representations (e.g., tree builders or linked list constructors).
- Use Python conventions properly (e.g., `None` instead of `null`, zero-based indexing, built-in exceptions handled).
- Fully handle edge cases, boundary conditions, and any potential runtime errors—do not leave incomplete or partial code.
- Use efficient algorithms and data structures to ensure results execute within a 5-second time limit.
- Import and use any standard Python libraries or modules needed to write clear, idiomatic, and performant code.
- Avoid redundant or overly verbose comments; include only minimal comments where needed to explain complex or subtle logic parts.
- Return outputs or results exactly as per the pseudocode’s specification, respecting return types and formats.
- Preserve input/output styles and types explicitly described or implied in the pseudocode.
- Enclose your entire final code output in a **single** Python code block using triple backticks with `python`, like this:

```python
# Your translated and optimized solution code here
```

Do **not** include any extraneous explanations, notes, or outputs outside this code block.  
Maintain maximum fidelity and readability, ensuring your code is ready for direct testing and deployment.