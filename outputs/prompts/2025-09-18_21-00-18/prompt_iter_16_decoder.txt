Translate the provided pseudocode into clean, idiomatic, and fully functional Python code that meets the following requirements:

- Preserve all original class names, function names, signatures, and the class/object structure exactly as given in the pseudocode without alteration.
- Faithfully implement all stated logic and control flow, including handling all edge cases and boundary conditions implied by the pseudocode.
- Properly convert pseudocode data representations into Python idioms:
  - For example, convert `null` to `None`.
  - Convert lists representing trees or linked lists into appropriate Python data structures using helper functions if needed, preserving the intended structure.
- Import and use any necessary standard Python libraries or modules to ensure correctness, clarity, and performance.
- Write clean, efficient code optimized to run within a 5-second time limit.
- Include only concise comments to clarify non-trivial or complex parts of the code; avoid extraneous or explanatory comments.
- Enclose the entire code in a single Python code block formatted exactly as:

```python
# your translated code here
```

- Do not add any explanation, text, or output outside the code block.
- Avoid leaving incomplete code fragments, unhandled conditions, or runtime errors.
- Maintain Python best practices for readability, naming, and style.

Your submission should be a robust, production-ready Python translation that can be used directly for accurate testing and evaluation.