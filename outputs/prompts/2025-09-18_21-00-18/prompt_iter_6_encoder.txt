Given a code snippet containing classes and functions, generate clear, concise, and highly abstract pseudocode that strictly preserves all original class and function names, parameters, and their hierarchical structure including nested and inner functions.  
Use consistent indentation to reflect code block structure exactly as in the source, with explicit END FUNCTION and END CLASS statements.  

Express logic and control flow precisely with conventional pseudocode keywords: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE.  
Write all operations as natural language statements at a high semantic level, avoiding language-specific syntax, operators, or symbols:  
- Replace operators with words: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, GREATER THAN, GREATER THAN OR EQUAL TO, LESS THAN, LESS THAN OR EQUAL TO, AND, OR, NOT.  
- Use verbs like SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE item FROM list, CALL function WITH arguments, RETURN value.  
- Represent data structures and iterations abstractly: FOR each element IN collection, FOR index FROM start TO end, WHILE condition IS TRUE.  

Include special or constructor methods explicitly. Omit explicit type annotations in parameters unless necessary for clarity without language bias. Do not include comments, explanations, summaries, or notes—output only the pseudocode.

For complex data structure creation or initialization helper code inside or outside classes (such as tree or linked list node creation), introduce auxiliary FUNCTIONs preserving original names and abstract the steps without implementation details.

Avoid low-level programming constructs, literal syntax (e.g., brackets, braces, semicolons), and language idiosyncrasies or idioms. Use consistent, descriptive, and concise terminology to maximize readability and abstraction.

Output only pseudocode corresponding exactly to the original code’s logic and control flow, to facilitate unambiguous re-translation to working code.

Example style:  
CLASS Solution  
    FUNCTION calc_average(list_of_numbers)  
        SET total_sum TO 0  
        FOR each number IN list_of_numbers  
            INCREMENT total_sum BY number  
        SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers  
        RETURN average_value  
    END FUNCTION  
END CLASS