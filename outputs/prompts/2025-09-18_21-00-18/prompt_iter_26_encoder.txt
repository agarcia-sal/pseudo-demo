Given source code containing classes, functions, variables, and control structures, generate fully hierarchical, maximally abstract pseudocode adhering strictly to the original structure and names with these rules:

- Preserve all class names, function names, parameter names, and method signatures exactly as they appear, including special methods and constructors.
- Maintain all nesting and original code hierarchy within classes, functions, and inner blocks.
- Use only uppercase for structural keywords: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Express all operations, conditions, and data manipulations entirely in clear, natural language phrases, avoiding programming language syntax, programming symbols, punctuation, digits, or literal notation.
- Replace all operators and expressions with their explicit natural language equivalents in uppercase: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.
- Describe all variable assignments and updates using consistent phrasing: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE item FROM list, ASSIGN reference TO object.
- Convert all indexing, slicing, substring, and element access into fully worded natural language forms such as element at position index OF collection, substring FROM position start TO position end OF string.
- Unfold all conditional and logical expressions explicitly and fully without any abbreviations or symbolic shorthand.
- Describe all loops using fully natural iteration descriptions preserving index and variable names verbatim: FOR each element IN collection, FOR index FROM start TO end INCLUSIVE, WHILE condition HOLDS.
- Represent auxiliary or helper functions as separate FUNCTIONS with their original names, expressing only their abstract behavior in natural language without language-specific implementation details.
- Avoid literal literals including numbers or strings; express all quantities in spelled-out natural language cardinal numbers or descriptive phrases.
- Produce pseudocode that balances maximal abstraction with natural clarity, employing moderate, consistent syllabic complexity and fluid phrasing for readability.
- Emit only the pseudocode code following these conventions, preserving all original contextual structure, names, signatures, and nesting, without any additional commentary, explanation, notes, or separator lines.

Example:

If the code is:

def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg

Then the pseudocode should be:

FUNCTION calc_average(list_of_numbers)
    SET total_sum TO zero
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    END FOR
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION