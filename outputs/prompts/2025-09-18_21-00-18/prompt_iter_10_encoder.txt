Given source code containing classes, functions, and other code elements, generate a strictly hierarchical and highly abstract pseudocode that:

- Preserves all original class names, function names, parameter names, and the exact nesting of classes and objects.
- Uses indentation exactly reflecting code blocks as in the original source.
- Captures all logic and control flow precisely, including conditions, loops, returns, and nested constructs.
- Uses only these uppercase pseudocode keywords as control markers: CLASS, FUNCTION, IF, ELSE, ELSE IF, FOR, WHILE, RETURN, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Expresses all operations using clear, consistent natural language phrasing without any programming language syntax or symbols.
- Translates all arithmetic and logical operations into full-word expressions (e.g., PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT).
- Uses precise, uniform verbs for data manipulation such as: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE first element FROM list, REMOVE last element FROM list.
- Explicitly include original constructors and special methods by name with the same parameters and structure.
- Represent complex data structure initializations or helper routines as auxiliary FUNCTIONS with their original names, describing only essential abstract actions without concrete syntax or low-level details.
- Represent iteration over collections or numeric ranges explicitly in natural language: FOR each element IN collection, FOR index FROM start TO end.
- Spell out all conditional expressions and logical tests fully without shortcuts or operators.
- Omit all comments, textual explanations, notes, separators, or any additional text before or after the pseudocode output.
- Do not include variable type annotations, language-specific idioms, or or literal syntax such as brackets, braces, or language symbols.
- Use concise, consistently descriptive terminology maximizing clarity and abstraction.
- Include all function parameters exactly as named in the original code, without adding types or language-specific decorations.
- When referring to indexing or elements in collections, use natural language: element at position index of collection.

Here is an example of the style the pseudocode must follow:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION