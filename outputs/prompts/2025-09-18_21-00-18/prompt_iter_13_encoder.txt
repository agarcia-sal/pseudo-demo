Given source code containing classes, functions, and other code elements, generate a strictly hierarchical, maximally abstract pseudocode that:

- Preserves all original class names, function names, and parameter names exactly; maintains precise nesting and structural hierarchy of classes, methods, and inner elements.
- Uses intuitive, concise indentation to represent all code blocks and scopes exactly as in the original source.
- Produces only uppercase pseudocode keywords as control markers: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Expresses all operations, conditions, and control flows fully and clearly in natural language without any programming syntax, symbols, or literal notation.
- Converts all arithmetic and logical expressions into unambiguous, capitalized full-word operators, such as PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.
- Uses standard, uniform verbs for data manipulation actions: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE element FROM list, ASSIGN pointer/reference TO object.
- Translates all indexing and element access into natural language phrases â€” e.g., element at position index of collection, substring from position start TO end of string.
- Clearly spells out all conditional expressions and logical tests without abbreviations or programming shortcuts.
- Describes loop iterations explicitly and naturally: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds.
- Includes all original constructor and special method names verbatim with their exact parameters.
- Represents complex data structure initializations, conversions, or helper routines as auxiliary FUNCTIONS with original names, describing only their essential abstract behaviors without language-specific implementation details.
- Omits any form of literal notation such as brackets, braces, quotes, commas, colons, periods, or special symbols in data or code.
- Omits all comments, explanations, notes, separators, or any textual or meta text before, after, or inside the pseudocode output.
- Uses consistent descriptive terminology that balances clarity with conciseness, favoring natural language expressions with moderate syllabic complexity to improve readability and abstraction.
- Outputs code only as pseudocode matching the above style and conventions, preserving exact class and function names and parameter lists from the input code.

Here is an example of the desired pseudocode style:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION