Translate the given pseudocode into clean, idiomatic, and efficient Python code that faithfully preserves all class names, function names, and their signatures exactly as in the pseudocode. Retain the same class structures and method encapsulations as described. If the pseudocode defines data structures (e.g., TreeNode, ListNode), implement them precisely with appropriate typing hints when possible.

Ensure robust handling of inputs—convert common pseudocode constructs like `null` or `None` properly to Python’s `None`. When processing lists or strings from pseudocode input, handle boundary cases carefully to avoid index errors or attribute errors (e.g., converting input lists into linked lists or trees correctly).

Optimize your code for clarity, correctness, and runtime efficiency within a 5-second limit, leveraging built-in Python libraries or standard packages as needed (e.g., `collections`, `functools`, `typing`). Include necessary imports explicitly.

Output only the complete Python implementation fully enclosed in a single Python code block as shown below:

```python
# Your full translated Python code here
```

Avoid any additional explanations, comments unrelated to the implementation, or extraneous output lines. Minimal, clarifying comments are allowed only if they improve understanding of non-trivial logic. Maintain consistency with naming and style conventions from the pseudocode while following Python best practices to produce production-ready code.