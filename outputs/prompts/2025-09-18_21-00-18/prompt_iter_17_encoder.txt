Given source code containing classes, functions, and other code elements, generate highly abstract pseudocode that:

- Preserves all original class names, function names, and parameter names exactly, maintaining precise nesting and structural hierarchy as in the input.
- Uses intuitive, clear indentation to represent scope and structure exactly.
- Represents control structures and delimiters ONLY with the following uppercase keywords: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS, END IF, END FOR, END WHILE.
- Replaces all operators and expressions with clear, unambiguous natural language equivalents, for example: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT, IS IN, IS NOT IN.
- Describes all indexing, slicing, and element access entirely in explicit natural language phrases such as “element at position index of collection” or “substring from position start TO end of string”.
- Uses consistent standardized verbs for actions: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO list, REMOVE element FROM list, ASSIGN pointer TO object, CALL function WITH parameters.
- Expresses conditions and logical expressions fully in expanded natural language without abbreviations, symbols, or code syntax.
- Expresses loops explicitly and naturally: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds.
- Represents literals only by their full English cardinal word equivalents where reasonable (e.g., zero, one, two, ten, one hundred), or spelled-out constants; DO NOT include any quotes, brackets, or punctuation.
- Represents complex helper constructs, data initializations, and conversions as auxiliary FUNCTIONS with original names describing their abstract intent only, omitting implementation details.
- Omits all comments, inline notes, punctuation marks, special characters, string delimiters, and any meta text inside or outside of the pseudocode output.
- Outputs strictly pseudocode only, matching these conventions exactly — do not add explanations, summaries, clarifications, or formatting outside pseudocode.
- Retain all constructor and special method names verbatim with their exact parameters.
- Use consistent naming and terminology to enhance readability and abstraction while balancing conciseness with clarity.
- Do not provide any separators or extra blank lines; the pseudocode must be minimal and focused.

Example:

If given the following code:

def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg

The output pseudocode should be:

FUNCTION calc_average(list_of_numbers)
    SET total_sum TO zero
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    END FOR
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION