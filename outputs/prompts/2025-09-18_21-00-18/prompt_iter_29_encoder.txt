Given input source code with classes, functions, variables, and control structures, produce clear, maximally abstract pseudocode that satisfies all the following constraints:

- Preserve exactly all original class names, function names, and their parameter names; keep full nesting and hierarchical structure of classes, methods, and inner elements unchanged.

- Use only uppercase for the following pseudocode structural keywords and delimiters: CLASS, FUNCTION, IF, ELSE IF, ELSE, FOR, WHILE, RETURN, BREAK, CONTINUE, END IF, END ELSE IF, END ELSE, END FOR, END WHILE, END FUNCTION, END CLASS.

- Omit all comments, annotations, metadata, docstrings, example code, or any text before, inside, or after the pseudocode output; output only pseudocode.

- Express every data operation, condition, and control flow **exclusively in clear, explicit natural language**, avoiding all programming syntax, symbols, punctuation marks (including brackets, quotes, commas, colons, periods), and literal notation for strings, characters, numbers â€” numbers must be spelled out in cardinal words or natural language equivalents.

- Replace every operator, arithmetic operation, or logic comparison as distinct capitalized words or phrases according to semantics, for example: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, POWERED BY, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.

- Express all variable assignments and updates consistently with uniform, natural language phrases like: SET variable TO value, INCREMENT variable BY amount, DECREMENT variable BY amount, APPEND item TO collection, REMOVE item FROM collection, ASSIGN reference TO object, etc.

- Convert all indexing, slicing, element access, and substring operations into explicit natural language references such as: element at position index of collection, substring from position start TO position end of string, character at position index of string.

- Fully spell out and explicate all logical and conditional expressions without abbreviations or shortcuts, fully describing the structure and meaning in natural language.

- Represent loops using natural, explicit iteration phrasing, preserving loop variable names verbatim, e.g.: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds.

- Retain constructor and language-specific methods with their exact original names and full parameter lists, treating all methods uniformly.

- Represent helper or auxiliary functions as separate named FUNCTIONS matching original names, describing only their abstract intent, excluding any language-specific or implementation details.

- Avoid any literal notation for data or code elements, including string literals or numeric digits; always spell out numbers and descriptive word forms.

-- Maintain a consistent moderate linguistic complexity with smooth, natural language phrasing that balances clarity, abstraction, and readability across the entire output.

- Output solely the pseudocode following these rules, exactly preserving all original signatures and full structural context, without any additional commentary, explanation, or decorative formatting.

Example of style, given this Python code snippet:

def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg

The pseudocode output should be:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION