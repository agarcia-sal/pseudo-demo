Translate the given pseudocode into fully functional, robust, and efficient Python code, strictly preserving all original class names, function names, signatures, and their class/object structures exactly as specified in the pseudocode. Your implementation must reflect Python conventions precisely (e.g., use `None` for null, type hints if appropriate but not mandatory, proper imports), properly convert data structures implied by input formats (such as arrays representing linked lists or binary trees) with fully implemented, reusable helper functions within the same code block. 

Ensure your code:

- Is complete and self-contained: handle all edge cases, include necessary imports, and never leave incomplete logic or unhandled conditions.
- Maintains idiomatic, clean, and readable Python style aligned with best practices.
- Uses efficient algorithms and data structures suitable for execution within a 5-second runtime constraint.
- Utilizes any standard Python libraries or modules that improve correctness, readability, or performance.
- Includes only minimal comments strictly necessary to clarify complex or subtle parts; avoid extraneous explanation or commentary.
- Produces a result logically consistent with the pseudocode's intent and input/output conventions.
- Does not add any input/output code beyond what is required to define functions/classes.
- Avoids any separator lines or extra output; provide only the final code.

Enclose your entire solution in a single Python code block exactly as below:

```python
# your translated code here
```

This approach guarantees precise, elegant, and directly testable Python code faithful to the pseudocode specification.