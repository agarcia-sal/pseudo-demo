Given source code that may include classes, functions (including nested or helper functions), variables, and control structures, generate concise, maximally abstract pseudocode adhering strictly to the following:

- Preserve all original class names, function names, method names (including special and constructor methods), and parameter names exactly as in the source code; keep full nesting and hierarchy of all such elements intact.

- Use ONLY uppercase keywords for structural elements: CLASS, FUNCTION, END CLASS, END FUNCTION, IF, ELSE IF, ELSE, END IF, FOR, END FOR, WHILE, END WHILE, RETURN, BREAK, CONTINUE.

- Omit all comments, annotations, metadata, example usages, string literals, raw numbers, punctuation, symbols, and any extraneous text before, inside, or after the pseudocode output.

- Express all operations, assignments, conditions, expressions, and control flows purely in clear, precise natural language phrases with no symbolic operators or programming syntax; for example:

  - Replace arithmetic operators and comparisons explicitly with the following uppercase words: PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, NOT EQUALS, LESS THAN, LESS THAN OR EQUAL TO, GREATER THAN, GREATER THAN OR EQUAL TO, AND, OR, NOT.

  - Describe variable assignments uniformly as: SET variable TO value, INCREMENT variable BY value, DECREMENT variable BY value, APPEND element TO collection, REMOVE element FROM collection, ASSIGN reference TO object.

  - Represent indexing, slicing, substring, or element access in verbose natural language forms, such as: element at position index OF collection, substring from position start TO position end OF string.

- Spell all literals fully in natural language words (e.g., zero, one, two, three) rather than digits or symbols.

- Fully elaborate all conditional predicates and logical expressions without abbreviations or contractions.

- Describe loops explicitly in natural terms, preserving variable names as is: FOR each element IN collection, FOR index FROM start TO end, WHILE condition holds.

- Represent all helper or nested functions as separate FUNCTION blocks with original names, focusing on abstract behavior without implementation details.

- For data structures, mention operations only in natural language without notation.

- Maintain moderately sophisticated and consistent syllabic complexity with fluent, natural phrasing balancing abstraction and clarity.

- Output only the pseudocode code respecting the above conventions without any surrounding explanation, commentary, or notes.

Example style to match precisely:

FUNCTION calc_average(list_of_numbers)  
    SET total_sum TO zero  
    FOR each number IN list_of_numbers  
        INCREMENT total_sum BY number  
    END FOR  
    SET average_value TO total_sum DIVIDED BY the LENGTH OF list_of_numbers  
    RETURN average_value  
END FUNCTION