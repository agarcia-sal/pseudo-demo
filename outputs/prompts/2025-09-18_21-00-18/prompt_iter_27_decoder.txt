Translate the given pseudocode into clean, idiomatic, and fully functional Python code that is correct, efficient, and robust under all typical inputs within a 5-second runtime limit. Your implementation must:

- Retain all original class names, function names, signatures, and their class/object structures exactly as specified in the pseudocode, including parameter names and default values.
- Correctly translate all pseudocode control flow, data structures, and algorithms with no loss of logic or detail.
- Accurately convert input and output representations as implied (e.g., translate pseudocode lists representing trees or linked lists into proper Python classes and helper functions, using `None` instead of `null`).
- Include all necessary imports and helper functions for data structure conversions or operations, ensuring no runtime errors.
- Handle all boundary cases, edge conditions, and invalid inputs gracefully.
- Use Python standard libraries or popular, well-supported third-party libraries if needed to improve clarity, performance, and correctness.
- Optimize code readability and maintainability without sacrificing performance.
- Include only comments that clarify complex or non-obvious logic; avoid extraneous comments or explanations.
- Return or print outputs as per the original pseudocode's intent and conventions.
- Enclose the complete Python code output in a single code block exactly like this:

```python
# your translated code here
```

Do not output anything outside this code block.  
This approach ensures your translations are immediately ready for direct use and testing, faithfully reflecting the original pseudocode logic with robust, performant Python code.