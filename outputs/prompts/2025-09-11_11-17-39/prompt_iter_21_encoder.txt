Generate concise, clear pseudocode from the given problem description or source code that strictly preserves all original class names, function names, parameters, and signatures, along with the exact class and object-oriented structure. Maintain the same identifiers and nesting without modifications.

Write pseudocode that is easy to read and understand, using mostly natural language combined with standard symbolic notation and common programming constructs: assignments (←), conditionals, loops, function calls, returns. Express logic compactly and at a high abstraction level, preferring one-line statements where clarity is maintained. Use concise phrasing and abbreviations but keep the pseudocode straightforward and immediately interpretable.

Number each pseudocode line sequentially starting from 1 using this exact format (including the assignment arrow ←):

1. x ← 0  
2. while x < n: x++

Do not include blank lines, separators, comments, explanatory notes, or summaries. Do not rename or reorder variables, functions, or classes. Do not add formatting beyond sequential numbered lines as shown.

Use indentation to show scope and structure, with one tab or consistent spacing for each nested block.

Example pseudocode style to follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Return only the numbered pseudocode lines as specified without any additional text or formatting.