Generate concise, high-level pseudocode from the given problem description or source code that strictly preserves all original class names, function names, parameters, and signatures, maintaining the exact class and object-oriented structure without any renaming or structural changes.

Write pseudocode that is easy to read and understand by combining natural language with standard symbolic notation and common programming constructs (assignments ←, conditionals, loops, function calls, returns). Use compact, mostly one-line statements when clarity allows. Use concise phrasing and standard abbreviations without sacrificing immediate comprehensibility.

Number every pseudocode line sequentially starting at 1. Follow this exact numeric and formatting style, including the assignment arrow ←, with no blank lines or separators:

1. x ← 0  
2. while x < n: x++

Do not output anything aside from these numbered pseudocode lines. Do not add comments, notes, explanations, summaries, or extra formatting. Keep pseudocode minimal in line count yet logically complete and straightforward.

Example format your output should follow:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A