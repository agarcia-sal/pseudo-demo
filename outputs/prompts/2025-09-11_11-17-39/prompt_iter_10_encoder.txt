Generate clear, concise, and compact high-level pseudocode from the given problem description or code, preserving all original class names, function names, parameters, and signatures exactly as in the source, keeping the original object-oriented class and method structure intact.

Use mostly natural language interspersed with standard symbolic notation and programming constructs: assignments (←), conditionals, loops, function/method calls, returns. Favor simple, mostly one-line statements without losing clarity. Use common abbreviations but keep pseudocode immediately readable and logically complete.

Number every line starting from 1 in this exact format, including the assignment arrow ←:

1. x ← 0  
2. while x < n: x++

Do not insert blank lines, separators, comments, explanations, or formatting beyond numbered pseudocode lines. Do not rename any variables, functions, or classes. Output minimal lines sufficient to fully represent the algorithm’s logic.

If describing a class, indent methods by one tab per standard structure; use consistent indentation for nested blocks.

Example pseudocode style:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Return only the numbered pseudocode lines adhering strictly to these rules; omit everything else.