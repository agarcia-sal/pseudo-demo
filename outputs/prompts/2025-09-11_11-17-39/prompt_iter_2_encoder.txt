Generate concise, clear, and compact pseudocode directly from the given problem description, preserving all original class names and function signatures exactly as in the source code. Maintain the same class and method structure, including object-oriented elements. Use high-level, natural language mixed with symbolic notation and abbreviations, prioritizing one-liner statements where possible. The pseudocode should be easy to read and understand instantly, without any purpose statements, summaries, comments, explanations, or overview notes—only pseudocode lines. Number each line sequentially, and format exactly as shown below:

1. x ← 0  
2. while x < n: x++  

Use standard programming constructs concisely (loops, conditionals, assignments, function calls, returns) and avoid extra verbosity or unnecessary details. Focus on preserving logic and flow with minimal lines while keeping readability high. Do not include separator lines or extra formatting. Ensure all variable and function names match the original input verbatim.

Example style your output should resemble:

in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i + 1 to size of A exclusive  
  set min_i to j if A[min_i] > A[j]  
 swap A[i], A[min_i]  
print all elements of A

Return only the pseudocode lines numbered as specified; do not add any extra text before or after.