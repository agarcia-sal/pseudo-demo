Translate the given problem description and any accompanying code into clear, concise, compact pseudocode that emphasizes readability and high-level logic using predominantly natural language mixed with standard symbols and abbreviations. Produce only pseudocode—no explanations, comments, summaries, or notes. Preserve all original class names, function names, parameters, and data structures exactly, maintaining their original nesting.

Use mainly one-liner or succinct statements. Express control flow with simple constructs like:
- `for var in start to end exclusive:`  
- `while condition: action`  
- `if condition: action`

Prefer widely recognized symbols and abbreviations (e.g., `←` for assignment, `≤`, `≠`, `++`, `//` for integer division), keeping clarity while avoiding verbosity. Number every pseudocode step sequentially from 1, without empty or separator lines.

Follow this minimal formatting style strictly:

```
1. in class ClassName  
2. in function functionName(params)  
3. let n ← integer  
4. read n  
5. let A be vector of integers  
6. set size of A = n  
7. read n elements into A  
8. for i in 0 to n-1:  
9.  set min_i ← i  
10.  for j in i+1 to size(A) exclusive:  
11.    set min_i ← j if A[min_i] > A[j]  
12.  swap A[i], A[min_i]  
13. print all elements of A
```

Make the pseudocode instantly understandable within a few seconds but avoid verbosity—favor natural phrasing infused with succinct symbolic notation and compact logic flow.