Translate the given problem description and any provided code into concise, high-level pseudocode that is immediately clear and easy to read. Use mostly natural language with minimal, well-known symbolic notation and standard abbreviations for operations (e.g., `←` for assignment, `++`, `≤`, `≠`, `//` for integer division), strictly avoiding verbosity or over-explanation. Keep the original class names, function names (with exact parameters), and data structures exactly as in the source, preserving their nesting.

Output only pseudocode lines, numbered sequentially from 1, without comments, summaries, or empty lines. Favor succinct one-liner statements or short blocks expressing control flow with these simple constructs:

- `for var in start to end exclusive:`  
- `while condition: action`  
- `if condition: action`

Use natural phrasing for clarity but maintain compactness and high-level logic flow. Keep lines short but expressive enough for instant understanding, e.g.:

```
1. in class ClassName  
2. in function functionName(params)  
3. let n ← integer  
4. read n  
5. let A be vector of integers  
6. set size of A = n  
7. read n elements into A  
8. for i in 0 to n-1:  
9. set min_i ← i  
10. for j in i+1 to size(A) exclusive:  
11.  set min_i ← j if A[min_i] > A[j]  
12. swap A[i], A[min_i]  
13. print all elements of A
```

Use no extra formatting, no separators; only numbered pseudocode lines with consistent indentation of control blocks (use 1 tab or 4 spaces per indent). Ensure output is purely pseudocode — no notes, explanations, or returns outside explicit pseudocode syntax.