Translate the given problem code and description into clear, concise pseudocode that is easy to read and understand. Preserve all original class and function names with exact parameters and maintain original data structures and nesting. Use mostly natural language enriched with minimal, well-known symbolic notation and standard abbreviations (e.g., `←` for assignment, `++`, `≤`, `≠`, `//` for integer division). Focus on high-level logic while keeping lines compact and expressive, favoring succinct one-liners or simple control blocks:

- `for var in start to end exclusive:`  
- `while condition: action`  
- `if condition: action`  
- `let` for declarations/assignments  
- use `set` for updates or swaps  
- array/vector operations as natural-language phrases  

Number pseudocode lines sequentially with consistent indentation (1 tab or 4 spaces) for blocks. Output pure pseudocode lines only—no comments, notes, explanations, summaries, returns outside explicit pseudocode syntax, or extra formatting/separators.

Example style:

```
1. in class ClassName  
2. in function functionName(params)  
3. let n ← integer  
4. read n  
5. let A be vector of integers  
6. set size of A = n  
7. read n elements into A  
8. for i in 0 to n-1:  
9. set min_i ← i  
10. for j in i+1 to size(A) exclusive:  
11.  set min_i ← j if A[min_i] > A[j]  
12. swap A[i], A[min_i]  
13. print all elements of A
```

No extra output beyond numbered pseudocode lines strictly following this compact, high-level, easy-to-read format.