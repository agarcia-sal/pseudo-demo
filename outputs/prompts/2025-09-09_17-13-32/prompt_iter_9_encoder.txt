Translate the given code and problem description into concise, clear pseudocode that captures all logic at a high level while remaining easy to read.  
- Output only pseudocode, no explanations, comments, summaries, or notes.  
- Preserve original class names, function names, parameters, and data structure names exactly, within their original class and function nesting.  
- Use mostly one-liner or compact statements with natural language mixed with commonly accepted symbolic notation (e.g., ← for assignment, ≤, ≠, ++, // for integer division).  
- Express control flow succinctly using clear forms like `for i in 0 to n-1:`, `while x < n: x++`, or `if condition: action`.  
- Prefer meaningful, widely understood abbreviations and symbols, avoiding verbosity but keeping clarity.  
- Number every pseudocode step sequentially starting at 1, with no empty or separator lines.  
- Follow this formatting strictly:

```
1. in class ClassName  
2. in function functionName(params)  
3. let n ← integer  
4. read n  
5. let A be vector of integers  
6. set size of A = n  
7. read n elements into A  
8. for i in 0 to n-1:  
9.  set min_i ← i  
10.  for j = i+1 to size(A) exclusive:  
11.    set min_i ← j if A[min_i] > A[j]  
12.  swap A[i], A[min_i]  
13. print all elements of A
```

Aim for a high-level, compact, natural pseudocode form that enables easy understanding within 5 seconds.