Translate the given problem description and original code into concise, clear pseudocode using natural, high-level language that retains the original function and class names, as well as data structures.  

- Produce only the pseudocode steps; do not include any purpose, summary, explanations, notes, or comments.  
- Keep the pseudocode compact yet easy to understand, preferring natural language combined with symbolic abbreviations.  
- Maintain the original class and function names exactly as in the source code.  
- Use one-liners where possible and prefer symbolic constructs (like ← for assignment, ≤, ≠, etc.).  
- Express control flows in concise forms (e.g., `while x < n: x++`, `for i in 0 to n-1:`).  
- Avoid separator lines or any extra formatting beyond numbered steps.  
- Follow this example style precisely:  

```
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.  set min_i to i  
9.  for j = i+1 to size of A exclusive  
10.    set min_i to j if A[min_i] > A[j]  
11.  swap A[i], A[min_i]  
12. print all elements of A
```

Return the best possible pseudocode within 5 seconds without adding anything else.