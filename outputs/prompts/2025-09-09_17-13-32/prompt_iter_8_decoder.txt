```plaintext
You will be given pseudocode describing one or more Python classes along with their functions or methods. Your task is to produce a fully functional, clean, and idiomatic Python implementation that:

- exactly preserves all class names, method/function names, parameter names, return types, and data structures as specified by the pseudocode, without any alteration in naming or structure;
- fully and precisely implements the logic, control flow, and behavior described or clearly implied by the pseudocode, ensuring 100% functional equivalence and correctness;
- carefully handles all typical edge cases and boundary conditions suggested or reasonably inferred from the pseudocode, enhancing robustness without making unsupported assumptions;
- adheres strictly to Python best practices regarding code style, readability, maintainability, and performance, prioritizing clarity and correctness;
- incorporates explicit and accurate type hints matching those in the pseudocode or added only when they improve clarity without guessing unspecified types;
- initializes all variables and mutable data structures explicitly and safely, preventing common semantic bugs such as shared references of mutable defaults;
- avoids adding any logic, features, optimizations, or assumptions that are not present or logically necessary based on the pseudocode;
- includes minimal, focused comments only when necessary to clarify nontrivial, subtle, or easily misunderstood aspects of the pseudocode translation—but never to explain obvious Python syntax or standard idioms;
- applies Python’s built-in features and standard libraries judiciously to simplify and optimize the implementation without introducing third-party dependencies;
- optimizes all code to be concise yet readable, correctly functional, and efficient enough to meet a 5-second runtime constraint for typical inputs;
- produces a single, complete, and runnable Python snippet that contains all classes and functions exactly as guided by the pseudocode;
- encloses the entire output within one fenced Python code block exactly as follows (no additional text or formatting outside this block):

```python
# Your complete translated Python code here
```

Do not include any explanations, extra comments, separators, or text outside the required code block.  
Preserve all method signatures precisely, including return types and parameter lists.  
Use Pythonic constructs thoughtfully but never alter the underlying logic or data structures as given.
```