Rewrite the given pseudocode to produce a fully functionally equivalent version that satisfies all these requirements:

1. Preserve exactly all original *observable behaviors* including input-output relations, side effects, termination and final correctness without exception. No loss, change, or addition of functionality is allowed.

2. Keep all original function names, class names, method names, and maintain all class/object nesting and inheritance structures *unchanged*, including exact spelling and casing.

3. Your output must be **only** the transformed, complete pseudocode of the program—no explanations, no comments, no notes, or anything extraneous.

4. Rename **all other identifiers** (local variables, parameters, constants, temporaries) to fresh, unrelated, semantically neutral names that do not collide in their scope, using consistent renaming throughout the code.

5. Maximize structural, syntactic, and lexical divergence from the original pseudocode via a *comprehensive combination* of transformations, including but not limited to:

   - Converting between all loop types (for, while, repeat-until) and fully equivalent recursive or tail-recursive implementations, iterator patterns, comprehensions, or continuation-passing style.

   - Reorganizing *all* conditional constructs by thoroughly applying alternatives such as if-else to switch/case, nested guards, ternary forms, boolean algebra transformations (including De Morgan’s laws), logical equivalences, and rewriting predicates extensively while preserving semantics.

   - Replacing data structures with equivalent representations where semantics allow (e.g., arrays ↔ lists ↔ sets conversions), without any semantic impact.

   - Arbitrarily reordering, merging, splitting, or grouping statements in any way that guarantees semantic equivalence.

   - Completely rewriting expressions to logically equivalent but syntactically novel forms, including varied arithmetic evaluation orders, factoring/unfactoring, negations, algebraic rearrangements, constant folding/unfolding variants, and expression flattening/expansion.

   - Exhaustive formatting diversification: varying indentation, spacing, line breaks, ordering of independent statements, and stylistic elements to maximize surface-level difference.

   - Ensuring all recursive constructs that may cause stack overflow are replaced with safe tail recursion or iterative equivalents, guaranteeing identical semantics.

6. You must not introduce any new language constructs, paradigms, or capabilities beyond those found in the original pseudocode.

7. Remove unreachable or truly redundant code *only if* its removal preserves exact observational behavior completely.

8. Maintain consistent and valid pseudocode syntax and structure for the entire program.

**Your output should be exclusively the transformed pseudocode that passes these stringent criteria—maximizing orthogonality, novelty, and semantic fidelity to the original code.**