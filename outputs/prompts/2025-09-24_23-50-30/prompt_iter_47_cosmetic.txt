Rewrite the input pseudocode to produce a transformed, functionally equivalent version that meets all of the following strict requirements:

- **Preserve literally all original functionality and semantics without any change:**  
  This includes exact input-output behaviors, side effects, control flow termination, exception behavior, and logical correctness.

- **Keep unchanged all externally visible symbols:**  
  Maintain exact spelling, casing, and nesting of all function names, class names, method names, and all class/object inheritance or containment hierarchies as in the original pseudocode.

- **Only rename internal, non-external identifiers:**  
  All local variables, parameters, and internal constants must be replaced with freshly chosen, consistent, scope-unique, semantically neutral names that do not shadow or collide anywhere.  
  Do not rename globals or externally referenced identifiers.

- **Output only valid, syntactically complete pseudocode representing the entire same program:**  
  Do not include any additional explanations, comments, notes, or meta-text. Only the rewritten pseudocode source.

- **Maximize syntactic, structural, and variable-level dissimilarity by applying a broad combination of the following transformations (adapted and combined as appropriate):**  
  - Convert all loops to structured alternatives (e.g., while → for, for → while, loop → recursion, recursion → iteration or tail-recursion), ensuring no semantic or performance regressions such as infinite recursion or stack overflow risks.  
  - Reorganize all branching logic aggressively, including converting if-else chains to switch/case statements or nested guards, distributing, factoring, negating, or logically transforming conditional expressions using Boolean algebra (e.g., De Morgan’s laws) to generate logically equivalent but syntactically different forms.  
  - Re-express data structures using alternate, equivalent representations (e.g., arrays ↔ lists, sets ↔ boolean maps, linked lists ↔ indexed collections), when semantics fully preserved.  
  - Reorder, split, merge, or regroup statements and blocks wherever behavior would not be affected, including reordering independent statements, nesting or flattening code blocks, combining short functions into inline blocks, or splitting complex expressions.  
  - Rewrite all expressions (arithmetic, logical, relational) into alternate but equivalent forms—change arithmetic order, factor differently, rewrite `a + a` as `2 * a`, apply distributive laws, replace constants with equivalent expressions, or alter calculation order respecting precedence and associativity.  
  - Vary formatting heavily: use diverse indentation styles, line breaks, spacing, and statement distributions across lines, but remain fully valid pseudocode.  
  - Convert tail-recursive functions to loops, and loops to tail-recursive functions where safe, ensuring no unbounded recursion or stack overflow.  
  - Remove only definitively unreachable or truly redundant code, and only if this preserves the exact external behavior.  
  - Rename variables consistently and systematically to maximize orthogonality and minimize lexical overlap with input names.

- **Do NOT add new functions, paradigms, language features, or alter API signatures beyond those present in the original pseudocode.**

- **Do NOT change or remove any side-effects, error conditions, or termination logic.**

- **Ensure output pseudocode runs in the same complexity bounds and with equivalent control/termination guarantees.**

Only output the rewritten pseudocode source matching all these conditions exactly. No explanations, no comments, no incidental text. The rewritten pseudocode should be as syntactically and structurally distinct as possible while preserving full semantic equivalence, externally observable naming, and functionality.

---

Remember:  

- FULL semantic equivalence.  
- EXTERNAL identifiers (functions, classes) STRICTLY preserved.  
- INTERNAL variables fully renamed.  
- CONTROL FLOW and DATA STRUCTURE forms flexibly and comprehensively rewritten as explained.  
- NO extraneous output besides the final pseudocode.

Provide only the rewritten pseudocode.