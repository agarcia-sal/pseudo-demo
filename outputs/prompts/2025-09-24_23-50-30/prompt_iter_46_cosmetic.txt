Rewrite the input pseudocode into a functionally equivalent pseudocode version adhering to these strict requirements:

1. **Output only the transformed pseudocode**, without any explanations, comments, or additional text.

2. **Preserve exactly all original semantics and behavior**: the transformed pseudocode must have identical input-output behavior, side-effects, termination conditions, correctness, and external observable effects.

3. **Keep all function names, class names, and their nesting, inheritance, and object structures intact**—no changes to naming, casing, or hierarchy of these elements.

4. **Replace all other identifiers (local variables, parameters, constants, temporaries, and internal labels) with new invented, semantically neutral names**, unique and consistent within their scope, and guaranteed not to collide.

5. Achieve **maximal syntactic, structural, and stylistic divergence**, by **combining multiple diverse transformations**, including but not limited to:

   - Transform iterative loops (for, while) into recursive (tail or general) functions or equivalent control strategies (e.g., comprehensions, iterator pipelines, unfold/fold patterns), and vice versa.
   
   - Reorganize and rewrite all conditional logic extensively: convert if-else chains to switch/case or pattern matching; rewrite boolean expressions using laws of logic (e.g., De Morgan’s, double negations); reorder guard clauses; replace ternaries with expanded conditionals and vice versa.
   
   - Change data representation and structures within semantic equivalence where safe (e.g., arrays ↔ linked lists ↔ sets; numeric ranges ↔ accumulator loops; numeric constants replaced by expressions yielding same values).
   
   - Refactor blocks of statements by reordering, splitting, merging, and regrouping, as long as behavior is unaffected.
   
   - Rewrite expressions and operations into equivalent but syntactically distinct forms: reorder arithmetic or logical operations, factor or distribute expressions differently, unfold or refactor compound expressions, replace literals with equivalent expressions.
   
   - Aggressively vary formatting, including indentation styles, line breaks, whitespace, line ordering where behavior-preserving.
   
   - Convert recursive procedures prone to deep recursion into iterative or tail-recursive form that prevents stack overflow without altering behavior, or convert iterative loops into safe recursion as appropriate.
   
   - Inline simple literals or constants, or extracts expressions into intermediate variables, but never add or remove functionality.
   
6. Do **not add or remove functions, classes, or alter any input-output contracts**.

7. **Remove only unreachable or truly redundant code, and only if this does not affect any externally observable behavior**.

8. Guarantee the output pseudocode is **syntactically valid, complete, and self-contained** for the same program; do not add any language features or paradigms not present in the original.

Your rewritten pseudocode should be as orthogonal and novel as possible while **permanently preserving every aspect of the original’s semantics and correctness**, including side-effects and termination guarantees.

**Remember:**  
- Function and class names, including casing and nesting, must remain exactly as in the original.  
- Only local/internal identifiers may be renamed.  
- Output only the transformed pseudocode.