Rewrite the given pseudocode to generate a fully equivalent version that strictly satisfies all of the following conditions:

1. **Functional equivalence**: The output must preserve every aspect of the original pseudocode’s behavior — input-output relationships, side effects, termination, and correctness exactly as before.

2. **Name preservation**: Keep **all original function names, class names, and the precise class/object nesting and inheritance structures intact and unchanged** (including their spelling and casing exactly).

3. **Identifier renaming**: Rename **all other identifiers** (local variables, parameters, constants, temporaries) to fresh, unrelated, semantically neutral names — ensuring these new names never overlap or shadow each other and remain consistent throughout the pseudocode.

4. **Maximize structural and syntactic divergence** through **aggressive, combined application of transformations**, including but not limited to:

- Converting between loops (for, while) and recursion (tail or normal), comprehensions, iterator chains, or other equivalent control flows, and vice versa.

- Totally restructuring conditional logic: rewrite nested if-else chains into switch/case statements, nested guards, ternaries, boolean algebra transformations (e.g., De Morgan’s laws, distribution), equivalent logical expressions, or alternative but logically equivalent conditions.

- Alternating data structure representations where semantics allow (e.g., lists ↔ arrays, sets ↔ hashed collections, linked forms ↔ indexed structures) while preserving all behavior.

- Reordering, grouping, splitting, or merging blocks/statements arbitrarily where semantics remain invariant.

- Essaying expression rewrites to equivalent but syntactically distinct forms — reorder arithmetic operations preserving correctness, factor or expand expressions, replace constants with equivalent expressions, use alternative boolean negations.

- Meticulous variation of formatting styles: indentation patterns, line breaks, whitespace, blank lines, statement orderings, etc.

- Replacing deep recursion with iterative or tail-recursive equivalents that prevent stack overflow, but never altering semantics.

5. **Do not add or remove any functional behavior**, aside from **removing only truly unreachable or redundant code if and only if its removal does not change external behaviors**.

6. **Output Requirements**:  

- Output must contain **only valid, complete pseudocode** for the rewritten program.

- Do **not** include any explanations, comments, text introductions, or notes — output solely the transformed pseudocode.

- The format and style language should remain pseudocode but matching the above criteria to ensure maximal novelty and orthogonality to the original.

This transformation must produce the **maximally syntactically and structurally divergent** yet semantically identical pseudocode that respects the original naming, structure, and functional contract, suitable for immediate use or translation without loss of correctness.