Rewrite the given pseudocode to produce a functionally equivalent and semantically identical version that meets all the following criteria:

- Preserve **exactly all original behaviors, side-effects, input-output contracts, termination conditions, and correctness** in every detail.

- Maintain **all original function names, class names, class/object nesting structures, and inheritance hierarchies unchanged** (including exact spelling and casing).

- Produce output containing **only valid, complete pseudocode** for the same program — no explanations, comments, or extra text permitted.

- Replace **all other identifiers (local variables, parameters, constants, temporaries)** with freshly invented, unrelated, semantically neutral names that do **not collide** anywhere in their scope, and remain consistent throughout.

- Maximize syntactic and structural divergence from the original by applying **diverse, combined transformations**, including but not limited to:

  - Converting loops (for, while) to recursive or tail-recursive calls, iterator pipelines, comprehensions, or equivalent control flows, and vice versa.

  - Reorganizing conditional logic extensively — converting if-else chains to switch/case, nested guards, ternaries, De Morgan or Boolean algebra rewrites, restructuring boolean expressions, or logically equivalent condition replacements.

  - Using alternative, equivalent data structure representations where semantics allow (e.g., lists to arrays or sets, linked forms to indexed), preserving all behaviors.

  - Reordering, splitting, merging, or regrouping blocks and statements arbitrarily wherever behavior is unaffected.

  - Rewriting expressions to logically equivalent but syntactically distinct forms—altering arithmetic order, factoring, boolean negations, constant folding variations, etc.

  - Aggressively varying formatting—indentation styles, line breaks, spacing, statement ordering—to maximize surface-level difference.

  - Ensuring recursive functions with potential deep recursion are replaced by iterative or tail-recursive variants that avoid stack overflow, without changing semantics.

- Do **not** add or remove any functionality, or introduce any new language or paradigm elements beyond those in the original pseudocode.

- Eliminate only unreachable or truly redundant code **if and only if** this preserves full external behavior.

Your output must contain **only the transformed pseudocode** adhering to these rigorous constraints, achieving maximal orthogonality and novelty while perfectly preserving the original’s semantics and correctness guarantees.