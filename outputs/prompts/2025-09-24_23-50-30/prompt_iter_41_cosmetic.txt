Rewrite the input pseudocode into a new version that adheres to the following strict requirements:

1. **Functionality Preservation**  
   Preserve _exactly_ all original behaviors, including input/output interfaces, effects, termination conditions, and correctness guarantees without any deviation or omission.

2. **Name Preservation**  
   Retain **all original function names, class names, nested structures, and inheritance hierarchies** verbatim—no changes in spelling, casing, or structure are allowed. The interface and architecture must remain identical.

3. **Identifier Renaming**  
   Rename **all** other identifiers — including local variables, parameters, constants, and temporaries — to fresh, unrelated, consistent, semantically neutral names. These new names must not conflict with each other or shadow any preserved names or scope entities.

4. **Code-Only Output**  
   Output **only valid and complete pseudocode** of the rewritten program. No explanations, annotations, comments, or non-code text may be included anywhere.

5. **Maximal Structural and Syntactic Divergence**  
   Apply a **wide and combined variety of transformations** to rewrite the pseudocode such that it is as syntactically and structurally different as possible from the original, while preserving all semantics. These transformations include but are not limited to:

   - Converting iterative loops (for, while) into recursive, tail-recursive, or comprehension-based constructions, and vice versa.

   - Restructuring conditional logic: replace if-else chains with switch/case statements, nested conditionals, guard clauses, ternary expressions, De Morgan’s laws, boolean algebra rearrangements, or equivalent logical rewrites.

   - Changing the order, grouping, splitting, or merging of statements and code blocks anywhere that does not affect program behavior.

   - Rewriting expressions using mathematically or logically equivalent but syntactically distinct forms (e.g., rearranging arithmetic operations, boolean negations, factoring, expanding, constant folding/unfolding).

   - Replacing data structure implementations with alternative but semantically equivalent forms (e.g., arrays ↔ lists ↔ sets, linked ↔ indexed structures).

   - Modifying formatting drastically—including indentation style, line breaks, spacing, and ordering of declarations and statements—to maximize surface-level difference.

   - Transforming recursive functions with potentially deep recursion into iterative or tail-recursive forms that avoid stack overflow risks, and vice versa.

   - Eliminating only those unreachable or provably redundant code segments that do not affect observable behavior.

6. **Restrictions & Constraints**  
   - Do not add new functionality, remove existing functionality, or change the program’s language paradigm beyond those transformations already present in the original pseudocode.

   - Do not alter or introduce any language constructs or paradigms that do not appear or have equivalent forms in the input pseudocode.

By following these directives, produce a rewritten pseudocode version that preserves exact semantics and interfaces, maximizes novelty and orthogonality in structure and syntax, and outputs only the transformed pseudocode without any extraneous text.