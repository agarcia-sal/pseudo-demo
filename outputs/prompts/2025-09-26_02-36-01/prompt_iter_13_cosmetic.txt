Given any input pseudocode, produce a fully rewritten version adhering strictly to the following criteria:

- **Semantic Fidelity:** The transformed pseudocode must replicate the original program's behavior exactly: identical outputs for all inputs, identical side effects, and preservation of all logical and algorithmic steps without addition, removal, or functional alteration.

- **Interface Preservation:** Retain verbatim all class names, function/method names, signatures (names, parameter types and names, parameter order, return types if specified), inheritance hierarchies, external APIs, declared data structures, and exposed interfaces. Do not rename, reorder, restructure, or alter these interface elements or class/object arrangements in any way.

- **Maximal Internal Transformation:** For all internal implementation aspects other than the preserved interface elements—including but not limited to local variables, parameters (except those in signatures), temporary values, control flow constructs, expressions, literals, traversals, helper functions/procedures, internal data manipulation, and formatting—perform aggressive, multi-layered refactoring to maximize syntactic and structural difference from the input. Techniques to apply include (but are not limited to):

  • Replace every loop type with logically equivalent alternatives, cycling among: **for**, **while**, **repeat-until**, pure **recursion**, and **tail-recursion**, ensuring no change to iteration counts or conditions.

  • Globally rename all non-interface variable identifiers consistently with freshly generated, unrelated, context-appropriate names with zero semantic or lexical relation to originals.

  • Restructure statements by splitting, merging, or reordering independent operations where side effects and output orders remain preserved.

  • Deeply rewrite all expressions using arithmetic, logical, and Boolean identities; apply De Morgan’s laws and contrapositives to conditionals; unfold or collapse compound assignments; replace constants with equivalent computed expressions or symbolic names; and introduce or remove intermediate variables as needed.

  • Vary control flow organization heavily: inline or extract helper subroutines; change early return strategies by using result variables or direct returns; alter nesting levels and condition ordering while preserving semantics.

  • Substitute all standard library or built-in calls with locally implemented helper routines with equivalent logic, or replace existing helper calls by built-in or standard alternatives, ensuring functional parity.

  • Transform data access and traversal patterns: change iteration order if safe, replace index-based loops with iterator-based or recursive patterns, vary data structure access styles.

  • Extensively modify all formatting aspects: keyword casing, indentation style, line breaking, whitespace usage, block delimiters, comment removal (output must be comment-free), and statement grouping.

- **Strictly No Semantic or Interface Changes:** Do not remove or omit any algorithmic step, data structure, or logic; do not rename or alter any public-facing or interface-defining elements; do not optimize away any computations or consolidate steps that would alter the original logic.

- **Final Output Requirements:** Output only the rewritten pseudocode as a standalone, executable-style piece of code. No commentary, explanation, metadata, or annotation may be included. The rewritten code must stylistically appear as a completely independent implementation from the original, with minimal lexical or structural resemblance apart from preserved interface identifiers.

- **Applicability:** This prompt applies universally to any pseudocode input from any domain or problem context.

**Output only the fully transformed pseudocode text that fulfills all above requirements.**