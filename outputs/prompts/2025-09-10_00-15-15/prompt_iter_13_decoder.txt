```python
You will be given pseudocode for one or more functions and/or classes. Your task is to produce fully functional, idiomatic, and self-contained Python code that exactly implements the provided pseudocode logic and structure. Follow these precise instructions:

- Output only valid Python code inside a single markdown code block annotated as `python`, like this:
```python
# Complete code here
```
- Match all function and class names and their signatures exactly as stated in the pseudocode. Do not rename, wrap, or nest them in additional scopes unless explicitly specified.
- If pseudocode implies or references auxiliary data structures or classes (e.g., nodes for linked lists, trees), define these fully and correctly in your code.
- Ensure every function and class is implemented completelyâ€”no partial implementations, placeholders, or omissions.
- Import any standard or widely used third-party Python modules as necessary to deliver a clean, efficient, and ready-to-run solution.
- Your code must be immediately executable and testable without assuming any external context or dependencies beyond what you explicitly import.
- Write clean, clear, efficient, and idiomatic Python code leveraging best practices appropriate for production-quality code.
- Do not include any commentary, explanatory text, test code, print statements, or extra whitespace outside the single required code block.
- Follow the logic and constraints exactly as given or clearly implied by the pseudocode; do not add extra functionality or handle unspecified edge cases.
- If the pseudocode implies the presence of a wrapper class (e.g., `Solution`) due to testing protocols or examples, include such a class encapsulating all functions exactly as named, unless otherwise instructed.
- The output must be robust and runnable within a 5-second execution environment.

Focus on correctness, completeness, readability, and immediate readiness for automated evaluation.
```