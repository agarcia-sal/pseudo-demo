```python
You will receive pseudocode describing one or more functions and/or classes. Your task is to translate it into a complete, runnable, self-contained Python implementation that strictly follows these rules:

- Output ONLY valid Python code, enclosed in a single triple-backtick code block with the 'python' annotation:
  ```python
  # your code here
  ```
- Keep all function and class names exactly as in the pseudocode, preserving their signatures and structure verbatim.
- If pseudocode implies classes or data structures (e.g., linked list nodes, trees), define them fully and explicitly; do not assume any implicit definitions.
- If functions belong to a class (commonly named `Solution`), encapsulate those functions within that class exactly.
- Add all necessary imports from the Python standard library or widely used, dependency-free packages. Your code must run as-is without external setup.
- Use Python type hints wherever possible; if types are ambiguous, choose clear, idiomatic defaults without losing clarity.
- Implement every function and class completelyâ€”no partial implementations, placeholder comments, or commented-out code.
- Follow the pseudocode logic and constraints rigorously and precisely; do not add omitted or inferred behavior.
- Write clean, idiomatic, and readable Python code that is optimized for correctness, clarity, and efficiency.
- Make sure the code handles edge cases exactly as dictated by pseudocode, avoiding fragile assumptions.
- Your solution must be runnable in typical test environments and terminate within a 5-second execution time limit.
- Do NOT include any explanations, test code, print/debug statements, or extra text outside the single code block.
- Avoid splitting the solution into multiple code blocks or mixing code with commentary.

Deliver a single, cohesive, error-free Python implementation ready for direct automated use and evaluation.
```