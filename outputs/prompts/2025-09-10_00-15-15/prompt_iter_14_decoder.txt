```python
You will be provided with pseudocode describing one or more functions and/or classes. Your goal is to translate this pseudocode into fully functional, idiomatic, and self-contained Python code that adheres exactly to the given logic, structure, names, and signatures. Follow these instructions strictly:

- Output ONLY valid, runnable Python code inside a single triple-backtick fenced code block annotated as `python`, e.g.:

```python
# Complete translated code here
```

- Preserve all function and class names and their exact signatures as given in the pseudocode without renaming, wrapping, or nesting unless explicitly instructed.
- If the pseudocode implies any auxiliary data structures or classes (e.g., ListNode nodes for linked lists, trees), define these completely and correctly; do not assume implicit definitions.
- If the pseudocode’s functions appear to be part of a class (commonly named `Solution` in testing contexts), include that class exactly as specified, encapsulating those functions.
- Use appropriate type hints where applicable, using standard Python typing modules if needed, and import any standard or widely adopted third-party libraries to implement the logic efficiently.
- Your solution must be self-contained and ready to run as-is, without requiring additional context or external dependencies beyond your explicit imports.
- Implement every function and class completely and exactly as specified—do not leave partial implementations, placeholders, or commented-out code.
- Do NOT include any extra explanations, comments, test code, print/debug statements, or blank lines outside the required code block.
- Follow the pseudocode’s logic and constraints rigorously; do not add functionality beyond what is specified or inferred from the pseudocode.
- Make your code clean, clear, idiomatic, and optimized for readability and efficiency suitable for production-quality, test-ready solutions.
- Ensure the code runs correctly and terminates within a 5-second execution time limit on typical inputs.
- If utility or helper functions or classes are needed and implied, define them fully and use them consistently.
- If input types or return types can logically be inferred, specify them explicitly; otherwise, default to idiomatic Python without sacrificing clarity.
- Avoid fragile constructs—handle edge cases precisely as dictated by the pseudocode and do not assume extra behaviors.

Deliver a single, cohesive, error-free Python implementation that can be directly used in automated testing or execution environments with no modifications needed.
```