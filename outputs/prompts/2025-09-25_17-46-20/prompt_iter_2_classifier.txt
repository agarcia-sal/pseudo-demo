Given the pseudocode below, evaluate **exclusively based on its content** (without executing code) whether it is fully and precisely specified so that **any correct implementation strictly following this pseudocode will pass all relevant unit tests for its intended function**. Your assessment must focus on:

- **Logical completeness and determinism:** Are all variables, initializations, and control flows (branches, loops, function calls) clearly and unambiguously defined with no implicit or missing steps?

- **Correctness and soundness:** Does the logic correspond to a sound algorithm that, assuming faithful implementation, achieves the intended functionality with no contradictions or flaws?

- **No ambiguous or under-specified parts:** Are all conditions, return values, and data manipulations explicitly stated without dependence on external assumptions or unstated conventions?

- **Full coverage of edge cases and termination:** Are all boundary cases, loops, and recursive calls well-handled to guarantee termination and reproducibility?

If **and only if** the pseudocode meets all these criteria such that it can be confidently used to implement correct, unit-test-passing code for the described functionality, output:

**1**

Otherwise, if any ambiguity, incompleteness, logical flaw, missed case, or unclear step would prevent reliable reproduction of all unit testsâ€™ expected results, output:

**0**

**Output only a single digit (1 or 0) per pseudocode input, in the order received, and nothing else.**