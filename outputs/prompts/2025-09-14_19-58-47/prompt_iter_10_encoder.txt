Generate clear, concise, and high-level pseudocode from the given problem description that preserves all original class and function names, signatures, parameters, and nested structures exactly as specified. The pseudocode should be easy to read and understand at a glance, blending natural language with precise symbolic operators and widely recognized abbreviations, while remaining compact and without redundancy.

- Write pseudocode statements mostly as single lines, using one-liners for simple assignments, loops, and conditionals wherever correctness and clarity are maintained.
- Number each executable step starting from 1 independently within every function or method, following this format:  
  1. x ← 0  
  2. while x < n: x++  
- Use verbs and nouns paired with arrows “←” for assignments (e.g., `SET total TO 0`, `INCREMENT count BY 1`).
- Prefer minimal standard keywords: `FUNCTION`, `CLASS`, `DEFINE` (for nested functions), `for`, `while`, `if`, `else`, `return`.
- Avoid extra punctuation beyond what is necessary; omit comments, explanations, summaries, or separators.
- Always maintain exact class and function names, parameter names, and nesting exactly as given in the problem description.
- Prefer common symbolic operators directly adjoining words as needed (e.g., `=`, `<`, `>`, `+`, `-`, `*`, `/`, `//`, `%`), combined naturally with words or phrases like `LENGTH(...)`, `RANGE(...)`, `RETURN`, `IN`.
- Use compact, natural phrasing without losing essential meaning or correctness, leveraging widely understood terms and abbreviated forms for clarity.
- Use consistent indentation to show block structure within classes, functions, and control flow.
- Output pseudocode only; do not add any notes, commentary, or explanation.

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode should be:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```