Generate clear, concise, and high-level pseudocode from the given problem description, preserving all original class and function names exactly, including their parameters and nesting. The pseudocode should be easy to read and understand, using natural language terms augmented by symbolic operators and conventional abbreviations.

Guidelines:  
- Use one line per simple statement or control structure for clarity and correctness, with minimal verbosity.  
- Number each executable step sequentially, starting from 1, separately for each function or method, like:  
  1. x ← 0  
  2. while x < n: x++  
- Use clear verbs or nouns paired with “←” for assignments; use concise, intuitive wording for actions.  
- Restrict flow control keywords to: for, while, if, else, return, and define (for nested functions).  
- Avoid punctuation beyond what is necessary for clarity; do not include comments, explanations, summaries, or separators.  
- Maintain exact class and function names, structures, and parameters as given in the original problem description, preserving nesting.  
- Prefer symbolic operators (=, <, >, +, -, *, /, //, %, AND, OR) combined naturally with words (e.g., LENGTH(...), RETURN, IN) for transparency and brevity.  
- Make statements as compact as possible without losing meaning.  
- Use consistent indentation to show block structure and nesting inside classes or functions.  
- Use uppercase for keywords (FUNCTION, CLASS, RETURN, FOR, WHILE, IF, ELSE, DEFINE) and natural language style for identifiers and operations.

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```