Generate compact, high-level pseudocode from the given problem description that is easy to read and understand, blending natural language with symbolic operators and standard abbreviations. Preserve all original class and function names, signatures, and nesting exactly as given.

Requirements:
- Number all executable pseudocode statements sequentially starting at 1 within each function or method, using the format:  
  1. x ← 0  
  2. while x < n: x++  
- Use one line per simple statement or control structure whenever clarity and correctness permit.  
- Utilize minimal conventional flow-control keywords only: for, while, if, else, return, define (for nested functions).  
- Express assignments clearly, using concise verbs or nouns with the assignment arrow “←”.  
- Prefer symbolic operators (=, <, >, +, -, *, /, //, %, AND, OR, NOT) combined naturally with descriptive words (e.g., LENGTH(...), IN, RETURN) for clarity.  
- Keep pseudocode terse but sufficiently explicit to capture essential logic without redundancy.  
- Maintain consistent indentation to reflect code blocks and nesting inside classes, functions, or objects.  
- Do not include comments, explanations, summaries, or separator lines.  
- Maintain exact class and function/parameter names and structure as given in the input.

Example:  
Given this Python code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```  
Output:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```
Use this precise style for all pseudocode generation.