Translate the given pseudocode into complete, executable, and idiomatic Python code enclosed within a single Python code block as follows:

```python
# your code here
```

Your translation must adhere strictly to the original pseudocode's class names, method names, signatures, and structural composition, without renaming or restructuring any class, method, or function.

When implementing:

- Preserve all class-object relationships and inheritance as implied.
- Respect all input/output types and structures indicated or implied by the pseudocode. For example, if the pseudocode uses linked lists, construct and manipulate corresponding Python linked list structures—do not accept or return plain Python lists unless explicitly stated.
- Accurately translate all control flows, loops, conditions, arithmetic, and logical operations exactly as described.
- Apply Python type hints fully where pseudocode annotates types, using built-in or standard typing modules.
- Optimize your code for correctness, clarity, and maximal runtime efficiency within a 5-second time limit.
- Leverage appropriate Python standard libraries or well-maintained third-party packages *only if* they simplify or significantly improve the correctness or performance, while maintaining readability and idiomatic style.
- Refrain from any additional commentary, debugging, or extraneous output—return precisely one Python code block containing the entire translated code that is immediately ready to run.
- Where helper data structures are implied but undefined in the pseudocode, define them completely and idiomatically in Python.
- Handle inputs and outputs in a manner consistent with typical usage of the methods or classes illustrated, including any necessary conversions or initializations guided solely by the pseudocode context.

This rigorous fidelity to pseudocode combined with practical, idiomatic, and efficient Python usage will maximize the accuracy and usability of your translation.