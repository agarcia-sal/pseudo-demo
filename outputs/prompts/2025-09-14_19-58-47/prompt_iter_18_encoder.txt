Generate concise, clear, and compact pseudocode from the given problem description, strictly preserving all original class names, function names, signatures, parameters, and their nesting within classes or objects exactly as stated. The pseudocode should be easy to read and understand at a glance, using natural language combined with symbolic operators and standard abbreviations, expressed mostly in one line per statement wherever clarity allows.

Requirements:
- Sequentially number each executable pseudocode step starting from 1 within every function/method, using the format:  
  1. x ← 0  
  2. while x < n: x++  
- Use direct, descriptive verbs (like SET, INITIALIZE, INCREMENT, DECREMENT) for assignments paired with “←”.  
- Prefer symbolic operators (=, <, >, +, -, *, /, //, %, AND, OR, NOT) combined naturally with words (e.g., LENGTH(...), RETURN, IN) for readability and brevity.  
- Use only essential flow control keywords: for, while, if, else, return, and define (for nested functions).  
- Use one-liners for simple control structures and statements when correctness and clarity are maintained.  
- Maintain consistent indentation to reflect logical blocks and nesting inside classes or functions.  
- Do NOT add comments, explanations, summaries, separator lines, or extraneous text.  
- Output only the pseudocode matching the problem’s class and function structure without deviation or added summarization.

Example:  
If the problem code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```