Translate the given pseudocode into fully functional, efficient, and idiomatic Python code that strictly preserves all class names, method names, method signatures, and the overall class/object structure exactly as shown in the pseudocode. Your implementation must:

- Expect and handle inputs exactly as implied by the pseudocode, including converting primitive collections (e.g., lists) into complex data structures (e.g., linked lists or trees) when indicated or required by the problem domain.
- Return outputs exactly as prescribed by the pseudocode, matching types and formats precisely.
- Use Python 3.8+ typing annotations consistent with any provided pseudocode type hints.
- Employ appropriate standard library modules and well-established third-party libraries (only if necessary), optimizing both for clarity and runtime efficiency within a strict 5-second execution constraint.
- Implement all helper or nested functions exactly as scoped in the pseudocode, respecting their visibility.
- Write code that is self-contained, syntactically correct, and ready to execute without further modification or external scaffolding.
- Avoid any comments, extraneous print statements, or explanations. Yield only the single complete Python code snippet.

Output your complete code enclosed within a single Python code block like:

```python
# complete translated code here
```