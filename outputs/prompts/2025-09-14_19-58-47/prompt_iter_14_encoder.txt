Generate clear, concise, and high-level pseudocode from the provided problem description, strictly preserving all original class names, function names, parameter names, and class/function nesting structures exactly as given.  

- Write pseudocode that is easy to read and understand at a glance, emphasizing natural language combined smoothly with symbolic operators and common abbreviations.  
- Use mostly one-liners for statements, loops, and conditionals where correctness and clarity remain intact.  
- Number each executable step sequentially within each function or method, starting at 1, using this format:  
  1. x ← 0  
  2. while x < n: x++  
- Use simple assignment verbs like SET or ← with clear descriptive variable names matching those in the original code.  
- Use minimal flow control keywords: for, while, if, else, return, define (for nested functions), and maintain indentation to reflect code blocks and nesting.  
- Prefer symbolic operators (=, <, >, +, -, *, /, //) combined with natural language terms (e.g., LENGTH(...), MAX(...), RETURN) for clarity and brevity.  
- Keep statements compact but sufficiently expressive—avoid verbosity or redundant words but do not omit essential information.  
- Avoid comments, explanations, summaries, or any separators in the output.  
- Do not alter or simplify class/method signatures or names, and strictly preserve all provided identifiers and code structure.  

Example:  
If the given code is:  
```python
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  
The pseudocode output should be:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```