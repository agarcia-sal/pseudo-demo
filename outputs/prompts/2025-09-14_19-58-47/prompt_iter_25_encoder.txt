Generate concise, clear, and high-level pseudocode from the given problem description preserving **all original class and function names exactly**, including full signatures and nesting. Format the output strictly as pseudocode with the following rules:  

- Number all **executable** steps sequentially starting from 1 within each function or method, e.g.,  
  1. x ← 0  
  2. while x < n: x++  
- Use **one line per statement or control structure** when it remains correct and readable.  
- Write pseudocode compactly but in **natural language style**, blending **precise verbs and nouns** with standard symbolic operators (=, <, >, +, -, *, /, //) and **common programming terms** (FOR, WHILE, IF, ELSE, RETURN, DEFINE).  
- Prefer symbolic and conventional flow control keywords only: `for`, `while`, `if`, `else`, `return`, `define` (for nested functions). Avoid extra keywords or verbose constructs.  
- Use `←` for assignments, phrasing them as "`SET variable TO value`" or "`ASSIGN variable ← value`" to maintain clarity and naturalness.  
- Maintain **exact capitalization and spelling of class names, function names, variable names, and parameters** as in the original description.  
- Use consistent indentation to convey code blocks and nesting inside classes, functions, or inner definitions.  
- Avoid comments, summaries, explanations, notes, or separator lines. The output should be **only the pseudocode**.  
- Express common operations with clear natural phrases and standard abbreviations: e.g., `LENGTH(list)`, `MAX(a, b)`, `SUBSTRING s FROM...`, and operators like `DIVIDED BY`, `MODULO`.  
- When defining nested functions, use `DEFINE functionName(parameters)` with numbered steps inside.  
- Ensure the pseudocode is **high-level and abstract enough** to be easily understood yet precise enough to implement directly.  
- Avoid listing multiple trivial statements on one line if it reduces readability. Keep lines terse but clear.  

**Example**  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode exactly as:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. FOR each num IN nums: total ← total + num
3. SET avg TO total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```

This approach balances natural language clarity and symbolic conciseness, preserves original identifiers and nesting, and provides a clean, readable, and implementable pseudocode output suitable for varied problems.