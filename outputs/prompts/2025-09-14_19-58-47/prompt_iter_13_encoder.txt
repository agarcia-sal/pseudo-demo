Generate clear, concise, and high-level pseudocode from the given problem description that is easy to read and understand at a glance. Keep all original class and function names exactly as given, preserving their signatures, nesting, and parameter names within classes or objects. Use natural language combined with symbolic operators and standardized abbreviations to convey logic efficiently.

- Start numbering executable steps sequentially at 1 within each function or method, formatted as:  
  1. x ← 0  
  2. while x < n: x++

- Prefer single-line statements for simple assignments and control structures whenever clarity and correctness are maintained.

- Use the following minimal keywords exactly as spelled, in uppercase or lowercase consistently:  
  FUNCTION, CLASS, DEFINE (for nested functions), FOR, WHILE, IF, ELSE, RETURN, SET, IN

- Express assignments using verbs or nouns paired with “←” or “TO” (e.g., SET sum TO 0, index ← 0).

- Use symbolic operators (=, <, >, +, -, *, /, //, %, AND, OR, NOT) combined naturally with words where needed (e.g., LENGTH(...), MAX(...)).

- Write loops and conditionals succinctly on one line when the body is a single statement (e.g., IF x > 0: RETURN x).

- Use consistent indentation to reflect code blocks, nesting, and structure.

- Do NOT include comments, explanations, summaries, extra punctuation, or separator lines.

- Avoid paraphrasing or renaming classes, functions, or variables—keep names intact exactly as in the input.

Example:  
Input code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. FOR num IN nums: total += num
3. SET avg TO total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```
  
Provide only the pseudocode output following these instructions.