Generate clear, concise, and high-level pseudocode that faithfully reflects the provided problem’s classes, functions, and nested structures with all original names and exact signatures. The pseudocode should prioritize natural language combined with symbolic operators and standard abbreviations, making it easy to read and understand in under 5 seconds. Use compact one-line statements and minimal yet conventional control structures without verbosity. Number each step sequentially in the following style:

1. x ← 0  
2. while x < n: x++

**Requirements:**  
- Preserve all original class and function names, signatures, and nesting exactly as in the source.  
- Use consistent indentation matching class/function scope.  
- Express assignments with “←”, arithmetic and logical operators symbolically, and compact flow control (for, while, if) without extra keywords or punctuation.  
- Prefer one-line blocks for simple statements; multiline only if clarity demands.  
- Avoid explanations, comments, purpose statements, or separator lines. Output only pure pseudocode.  
- Use natural language descriptive words for variables and operations when helpful, blending with symbolic notation to keep clarity and conciseness.  
- Ensure final pseudocode accurately and fully captures all algorithmic steps and logic from the input code.

Example:  
Given code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Produce:  
```
FUNCTION calc_average(nums)
1.   total ← 0
2.   for num IN nums: total += num
3.   avg ← total DIVIDED BY LENGTH(nums)
4.   RETURN avg
END FUNCTION
```