Generate clear, concise, and high-level pseudocode from the given problem description, strictly preserving all original class and function names, including exact signatures and nesting within classes or objects. The pseudocode must be compact yet natural, blending symbolic operators and common abbreviations with minimal but descriptive natural language to maximize both readability and brevity.

- Use sequential numbering starting at 1 within each function or method, formatted as:  
  `1. x ← 0`  
  `2. while x < n: x++`  
- Prefer single-line statements and control flows whenever clarity and correctness permit.  
- Express assignments with simple verbs or nouns paired with “←” or concise phrases (e.g., SET, INCREMENT, DECREMENT).  
- Limit flow control keywords to: for, while, if, else, return, define (for nested functions), and break/continue if necessary.  
- Use symbolic operators (=, <, >, +, -, *, /, //, %, AND, OR, NOT) naturally, combined with concise words (e.g., LENGTH, MAX, MIN, RETURN, IN).  
- Keep statements compact without losing crucial details or structural clarity. Avoid redundancy or verbose phrasing.  
- Maintain consistent indentation to indicate block structure and nesting.  
- Do not add explanations, comments, purpose statements, summaries, or decorative separators. Only output the pseudocode.  
- Always retain the exact class and function names and parameter names from the input problem description, preserving their structure and nesting.

Example conversion:  
Given code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```

Produce pseudocode only—nothing else.