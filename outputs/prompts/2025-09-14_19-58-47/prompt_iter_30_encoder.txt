Generate concise, clear pseudocode from the given problem description that is easy to read and understand, using mostly natural language combined naturally with symbolic operators and standard abbreviations. Preserve all original class and function names exactly, including parameter names, signatures, nesting, and class/object structures.

- Use numbered steps starting at 1 within each function or method, formatted as:  
  `1. x ← 0`  
  `2. while x < n: x++`  
- Prefer single-line statements for simple assignments and control structures whenever correctness and clarity are maintained.  
- Use verbs or meaningful nouns with “←” for assignments (e.g., `SET count TO 0`, `INCREMENT sum BY value`).  
- Use minimal standard flow keywords: `FOR`, `WHILE`, `IF`, `ELSE`, `RETURN`, `DEFINE` (for nested functions), `CLASS`, `FUNCTION`.  
- Avoid commentary, summaries, explanations, empty lines, or separator lines anywhere in the output.  
- Use symbolic operators (`=`, `<`, `>`, `+`, `-`, `*`, `/`, `//`, `%`), and standard functional terms like `LENGTH(...)`, `RANGE(...)`, `MAX(...)`, `MIN(...)` when needed.  
- Keep statements compact and high-level without losing essential intent or clarity.  
- Use consistent indentation to indicate blocks and nesting inside classes and functions.  
- Ensure output strictly reflects the input structure: same class, method names, parameters, and nesting; no renaming or omission.  

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. FOR each num IN nums: INCREMENT total BY num
3. SET avg TO total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```