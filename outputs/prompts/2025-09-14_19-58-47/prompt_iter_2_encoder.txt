Generate clear, concise, and high-level pseudocode from the given problem description. The pseudocode must preserve all original class and function names, maintaining their exact signatures and nesting as in the problem. Express logic using natural language blended with symbolic operators and abbreviations. Prefer one-line statements and compact control structures. Number each step sequentially as shown:

1. x ← 0  
2. while x < n: x++

Avoid any summaries, explanations, comments, or purpose statements. Do not add extra formatting or separator lines. The output should be pure pseudocode only, easily readable and understandable within 5 seconds. Use:

- Clear variable assignments with "←"
- Conventional flow controls (for, while, if) with minimal verbosity
- One-liners for simple blocks where clarity is not lost  
- Precise expressions preserving algorithmic intent  

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then produce:  
```
FUNCTION calc_average(nums)
1.   total ← 0
2.   for num IN nums: total += num
3.   avg ← total DIVIDED BY LENGTH(nums)
4.   RETURN avg
END FUNCTION
```