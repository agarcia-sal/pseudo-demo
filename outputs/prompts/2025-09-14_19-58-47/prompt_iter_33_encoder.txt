Generate concise, high-level pseudocode from the given problem description, preserving all original class and function names exactly, including signatures and nesting within classes or objects. The pseudocode should be easy to read and understand at a glance, using a natural language style that blends clear descriptive terms with symbolic operators and standard abbreviations. 

- Use one line for simple statements and control structures whenever clarity and correctness are maintained.  
- Number each executable step sequentially starting from 1 in every function or method, using the format:  
  1. x ← 0  
  2. while x < n: x++  
- Express variable assignments with clear verbs or nouns paired with “←”.  
- Use minimal but conventional flow control keywords: for, while, if, else, return, and define (for nested functions).  
- Avoid extraneous punctuation, comments, explanations, summaries, or separator lines.  
- Maintain exact class and function names, structures, and parameter names as given in the problem statement.  
- Prefer symbolic operators (like =, <, >, +, -, *, /, //) combined naturally with words (e.g., LENGTH(...), RETURN, IN) for clarity.  
- Keep pseudocode statements compact without losing essential meaning.  
- Use consistent indentation to reflect code blocks and nesting inside classes or functions.  

Example:  
If the code is:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:  
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```