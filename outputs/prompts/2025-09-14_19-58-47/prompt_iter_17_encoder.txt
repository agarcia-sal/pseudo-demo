Generate clear, concise, and high-level pseudocode from the given problem description, strictly preserving all original class and function names, signatures, and their nesting within classes or objects exactly as presented.

- Write pseudocode in an easy-to-read, natural language style enriched with symbolic operators and standard abbreviations, keeping statements compact yet meaningful.
- Use mostly one line per executable step or control structure if clarity and correctness are preserved, e.g.:  
  `1. x ← 0`  
  `2. while x < n: x++`
- Number each executable pseudocode statement sequentially starting from 1 **within each function or method**.
- Express variable assignments with clear verbs or nouns paired with “←” or “TO”, favoring concise but descriptive phrasing.
- Use minimal, conventional flow keywords only: `for`, `while`, `if`, `else`, `return`, `define` (for nested functions), `class`, and `function`.
- Avoid comments, explanations, separator lines, summaries, or any extra text—output only the pseudocode.
- Maintain exact class names, function names, parameter names, class and function nesting, and structure as in the original problem.
- Prefer symbolic operators (`=`, `<`, `>`, `+`, `-`, `*`, `/`, `//`, `%`) combined naturally with words for clarity (e.g., `LENGTH(...)`, `RETURN`, `IN`).
- Reflect code blocks and nesting clearly with consistent indentation.
- Use natural and succinct phrasing to improve readability, e.g., “SET total TO 0,” “FOR each item IN collection,” “INCREMENT count BY 1,” “RETURN result.”
- For collections, prefer readable constructs like `FOR each element IN collection`, `RANGE n`, or `ENUMERATE list`.
- Avoid reusing example pseudocode from previous problems; generate directly from the problem input.

Example:  
For this Python code:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output pseudocode should be:
```
FUNCTION calc_average(nums)
1. total ← 0
2. for num IN nums: total += num
3. avg ← total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```