Generate compact, clear, high-level pseudocode directly from the given problem description, strictly preserving all original class names, function names, parameter names, and their exact nesting within classes or objects. The pseudocode must be immediately understandable, using mostly natural language wording combined with standard symbolic operators and common abbreviations to keep it concise yet expressive.

- Number every executable statement or control step sequentially within each function or method starting at 1, formatted like this:  
  1. x ← 0  
  2. while x < n: x++  
- Prefer one-line statements for simple assignments, loops, conditionals, or returns when clarity is maintained.  
- Use minimal sets of flow control keywords: FUNCTION, CLASS, END FUNCTION, END CLASS, for, while, if, else, return, define (for nested functions).  
- Use “←” for assignments, coupling descriptive terms with verbs and nouns (e.g., SET sum TO 0, INCREMENT count BY 1).  
- Use symbolic operators (=, <, >, ≤, ≥, +, -, *, /, //, %, ==, !=) complemented by natural language terms (LENGTH(), RETURN, IN, MAX(), MIN()) to enhance readability without verbosity.  
- Maintain consistent indentation reflecting scope and nesting inside classes/methods/functions.  
- Avoid comments, explanations, summaries, notes, or any extraneous formatting such as separator lines.  
- Preserve the original order and signature of all classes and functions exactly as in the input.  
- Do not invent or rename any identifiers beyond what is explicitly provided.  
- Keep pseudocode compact by choosing precise natural phrases, limiting conjunctions and unnecessary words while ensuring correctness and clarity.

Example:  
Given:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Output:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. for num IN nums: total += num
3. SET avg TO total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```