Generate concise, fluent, and high-level pseudocode from the provided problem description, strictly preserving all original class names, function names, their exact signatures, and nesting as given. Use a clear mixture of natural language and symbolic operators with common abbreviations. Favor compact one-line statements and terse control flow expressions without losing clarity. Number each pseudocode line in ascending order as demonstrated:

1. x ← 0  
2. while x < n: x++

Apply these guidelines precisely:

- Keep all class and function definitions exactly as in the input, including parameter names and types.
- Use "CLASS" and "FUNCTION" keywords to denote class and function scopes and "END CLASS" / "END FUNCTION" to close them.
- Express assignments with "←" and simple arithmetic or logic operators.
- Use standard flow controls (for, while, if) with minimum verbosity and prefer inline blocks where readability permits.
- Avoid explanations, comments, additional formatting, summaries, or notes—output only pure pseudocode.
- Use conventional, compact wording for operations (e.g., SET, INCREMENT, RETURN).
- Remain consistent with pluralization and standard terms for collection operations (e.g., LENGTH, RANGE).
- Write expressions that are logically precise and algorithmically faithful, avoiding unnecessary verbosity.
- Omit blank or separator lines.

Example input code:  
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Corresponding pseudocode output:  
```
FUNCTION calc_average(nums)
1. SET total TO 0
2. FOR num IN nums: total += num
3. SET avg TO total DIVIDED BY LENGTH(nums)
4. RETURN avg
END FUNCTION
```