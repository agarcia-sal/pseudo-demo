Given a problem’s code (including all functions, classes, and objects), generate high-level, precise pseudocode that directly implements the solution with the following requirements:

- Preserve **all original function and class names, and their structural relationships** (e.g., methods within classes).
- Use **clear, natural language mixed with conventional programming symbols** to keep expressions concise yet readable.
- Prefer **structured, indented control flow statements** (IF, FOR, WHILE, etc.) written naturally (e.g., "FOR each item IN collection", "IF condition THEN").
- Use meaningful variable names as in the original code; allow compact but unambiguous forms.
- Avoid comments, explanations, notes, summaries, or purpose statements.
- Avoid separating lines or delimiters; output only the pseudocode.
- Express computations and control flow in **an elegant, expressive way balancing abstraction and clarity**. Use multi-line forms unless a single expression is naturally clear.
- Include all relevant code elements so the pseudocode is self-contained and faithful to the solution’s logic.
- Write using **mixed-case keywords** (e.g., SET, RETURN, IF, ELSE, FOR, WHILE) for readability.
- Output only the pseudocode exactly as specified.

Example of style to follow (when given an imperative function):

```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR each num IN nums
        SET total TO total PLUS num
    SET average TO total DIVIDED BY LENGTH OF nums
    RETURN average
END FUNCTION
```

Your goal is maximal natural language integration while maintaining structural clarity, programmatic precision, and adherence to original naming and code architecture.