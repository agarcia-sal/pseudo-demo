Translate the given pseudocode into fully functional, efficient, and idiomatic Python code that preserves all original function and class names, as well as class and object structures exactly as specified. Your translation must meet the following criteria:

- Enclose all code within a single Python code block using triple backticks and the language identifier `python`:
  ```python
  # translated code here
  ```
- Maintain the exact function and class names from the pseudocode without modification.
- Preserve all class definitions and object hierarchies exactly as in the pseudocode.
- Optimize the code for clarity, correctness, and runtime efficiency within a 5-second execution limit.
- Use standard Python idioms, typing annotations where relevant, and standard library modules as needed—third-party packages are allowed only if explicitly justified and commonly available.
- Avoid adding any extraneous separator lines, comments unrelated to the original pseudocode, or any explanation outside the code block.
- Ensure your implementation handles edge cases robustly and is suitable for integration directly into automated testing frameworks.

Your goal is to translate the pseudocode into clean, executable Python code that runs correctly and efficiently under all reasonable inputs consistent with the pseudocode’s intent.