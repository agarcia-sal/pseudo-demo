Generate concise and clear pseudocode from the given problem description following these rules:

- Output only pseudocode steps, no explanations, comments, summaries, or notes.  
- Use natural language mixed with symbols and abbreviations to keep it compact and high-level, easily readable and understandable.  
- Prefer concise one-liners and simple symbolic assignments or operations where appropriate.  
- Use meaningful variable names but keep them short.  
- Follow numbered step format, e.g.:  
  1. x ← 0  
  2. while x < n: x++  
- Use standard control structures (if, while, for, function) in a natural syntax:  
  for i from 1 to n do ...  
  if condition then ... else ...  
- Include function declarations explicitly when relevant, e.g.:  
  in function mc(x, y)  
- Avoid low-level implementation details; keep logic at an algorithmic level.  
- The pseudocode should cover input reading, processing, and output steps to fully describe the solution.  
- No decorative separators or formatting lines.  
- Aim for clarity that supports quick and correct interpretation within a tight time (5 seconds).  

Example style to emulate:

in function main  
let n be integer  
read n  
let A be array of integer size n  
for i from 0 to n-1 do  
 read A[i]  
for i from 0 to n-1 do  
 min_i ← i  
 for j from i+1 to n-1 do  
  if A[min_i] > A[j] then min_i ← j  
 swap A[i], A[min_i]  
print all elements of A