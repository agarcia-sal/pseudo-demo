Generate clear, concise, easy-to-read pseudocode from the given problem description that is naturally understandable yet compact and high-level. Use mostly one-line statements with natural language keywords combined with standard symbolic operators and common abbreviations. Avoid comments, explanations, summaries, or any extra notes. Output only the numbered pseudocode lines starting at 1, formatted as shown:

1. x ← 0  
2. while x < n: x++

Requirements:  
- Use natural language verbs like read, print, let, set, for, if, else, while, break, return  
- Use symbols for assignments (←), comparisons (=, ≠), arithmetic (+, –, *, /, mod), and indexing  
- Use concise variable names and common abbreviations (e.g., cnt, idx, rv)  
- Prefer compact, mostly one-line statements with simple indentation for nested blocks  
- Use clear control flow showing structure without verbose syntax or excessive detail  
- Avoid any separator lines, decorative formatting, or extraneous spacing  
- Express the core logic directly and efficiently so it is easy to understand at a glance  
- Include function definitions as needed in the form: in function fname  
- Use plural nouns and collective terms naturally (e.g., elements in A, items in list)  
- Ensure linear, sequentially numbered steps without gaps  

Example style to follow:  
in function main  
let n be integer  
read n  
let A be vector of integers  
set size of A = n  
read n elements into A  
for all elements in A  
 set min_i to i  
 for j = i+1 to size of A exclusive  
  if A[min_i] > A[j]: set min_i to j  
 swap A[i], A[min_i]  
print all elements of A

Return only the pseudocode strictly adhering to these guidelines and style, optimized for readability and brevity within a 5-second generation time.