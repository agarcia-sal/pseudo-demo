Generate clear, concise pseudocode directly from the problem description using mostly natural language with symbolic operators and common abbreviations. Write in a compact, high-level style prioritizing readability and brevity. Use mostly one-line statements for assignments, conditions, loops, and expressions. Number each line sequentially from 1 without extra formatting or separators. Represent control flow simply and clearly, using minimal verbosity without comments, summaries, or notes. Use indentation only to show nested blocks and maintain clarity.

Prefer:

- natural keywords (read, print, let, set, if, else, for, while, break, return, function) combined with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div)  
- short variable names and standard abbreviations (cnt, idx, rv, tmp, len)  
- compact, descriptive high-level operations (sort A, split s by space, join list with "")  
- concise control flow forms (e.g., if cond: action else: action)  
- minimal punctuation and straightforward expressions  
- indicating vector or list size explicitly when needed (let A be vector, size n)  
- consistent style for function headers (function name(params)) or for main (in function main)

Do not output comments, explanations, or blank lines. Output only the numbered pseudocode lines as shown:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A