Translate the provided pseudocode into a concise, idiomatic, and highly efficient Python script. Produce a single, executable code block enclosed strictly within triple backticks and the `python` specifier (```python ... ```), containing **only** code—no explanations, comments, blank lines, or extra output.

Your translation must:

- Faithfully preserve the exact logic and output behavior expressed by the pseudocode.
- Use `input()` for data reading unless the pseudocode or context clearly demands performance-optimized I/O (e.g., massive input), in which case use `sys.stdin.readline()` with appropriate stripping.
- Prioritize minimal runtime and memory usage by leveraging Python’s built-in functions, comprehensions, generator expressions, fast data structures from `collections`, efficient algorithms, and relevant standard libraries (`sys`, `math`, `heapq`, `bisect`, `itertools`, etc.).
- Avoid unnecessary variables, duplicated calculations, or verbose constructs; prefer direct, clear, and performant code.
- Include necessary imports only at the very top of the code block and only if they are actually used.
- Use meaningful variable names derived from the pseudocode when given; otherwise, use clear, conventional Python names.
- Ensure all formatting and output strictly matches the pseudocode’s instructions—no debug prints, prompts, or formatting aside from what the pseudocode specifies.
- Deliver immediately runnable code without requiring any external context, environment, or adjustments.
- Exploit third-party libraries **only** if clearly justified by input scale or algorithm complexity and if guaranteed available.
- Handle edge cases and adhere precisely to control flows as indicated, including loops, conditionals, and data transformations.

Begin your response directly with the correctly formatted Python code block.