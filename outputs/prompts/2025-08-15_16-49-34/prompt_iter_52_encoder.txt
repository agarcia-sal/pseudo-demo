Generate clear, concise pseudocode from the given problem description that is easy to read and understand. Use natural language with a compact, high-level style. Prefer mostly one-line statements combining natural language keywords and symbolic operators with common abbreviations. Express control flow simply and directly, without verbose explanations, comments, notes, or summaries. Number each line sequentially from 1 with no extra formatting or separators.

Guidelines:  
- Use natural-language keywords like let, set, read, print, if, else, for, while, break, return, function combined with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div).  
- Use brief variable names and standard abbreviations: cnt, idx, rv, tmp, len, etc.  
- Prefer one-line statements for assignments, conditions, loops, and expressions.  
- Indent nested lines with consistent spacing only to indicate structure and improve readability.  
- Use concise forms for control flow, e.g., if cond: action else: action, for i in 0 to n–1: action  
- Write high-level operations compactly by naming routines and common actions (sort A, split s by space, join list with "")  
- Avoid separator lines, headers, or extraneous formatting. Output only the numbered pseudocode lines.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A