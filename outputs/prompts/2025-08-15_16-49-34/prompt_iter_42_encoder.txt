Generate concise, easy-to-read pseudocode from the given problem description using a high-level, natural-language style that favors clarity and compactness. Output only numbered pseudocode lines starting at 1, without comments, explanations, or extra formatting. Use mostly one-line statements combining natural language keywords (read, print, let, set, if, else, for, while, break, return, function) with symbolic operators (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod). Prefer short variable names and standard abbreviations (cnt, idx, rv, tmp, len). Express assignments, conditions, loops, and returns in a direct, succinct form. Use indentation only to show nested blocks clearly; keep control flow simple and compact (e.g., if cond: action else: action). Use high-level verbs for standard operations (sort A, split s by space, join list with "") without verbose steps. Avoid separator lines or extra formatting. Prioritize readability and brevity in concise forms, fitting logically within short, clear lines. Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to n–1:  
8.   set min_i ← i  
9.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A