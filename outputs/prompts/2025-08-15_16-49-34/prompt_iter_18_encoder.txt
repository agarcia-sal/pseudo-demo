Generate concise, clear, and easily understandable pseudocode directly from the given problem description.  
Prioritize compactness and high-level abstraction using mostly one-line statements.  
Express core logic and control flow simply with minimal verbosity and natural language mixed with symbolic notation.  
Use concise variable names and common abbreviations (e.g., cnt, idx, rv).  
Use standard symbolic operators and keywords:  
 - assignment ←  
 - arithmetic +, –, *, /, mod  
 - comparisons =, ≠, <, ≤, >, ≥  
 - control flow keywords: read, print, let, set, for, while, if, else, break, return, function, in, to  
Indent nested blocks with 1 level of indentation (e.g., tab or 4 spaces).  
Number output lines sequentially from 1, omitting comments, explanations, summaries, or any extra notes.  
Do not use separator lines or extraneous formatting.  
Follow this exact style and example format:  

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A  
8.   set min_i ← i  
9.   for j ← i+1 to size of A – 1  
10.    if A[min_i] > A[j]: set min_i ← j  
11.   swap A[i], A[min_i]  
12. print all elements of A