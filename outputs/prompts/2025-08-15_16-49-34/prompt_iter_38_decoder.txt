Translate the given pseudocode into Python code that is not only correct but optimized for clarity, efficiency, and immediate execution within a 5-second runtime limit. Follow these detailed instructions to produce high-quality code:

- Provide your entire solution inside a single Python code block, starting with ```python and ending with ```.
- Use unadorned `input()` or, when high-performance input is essential for large datasets, use `sys.stdin.readline()` without prompts or extra output.
- Exclude any superfluous comments, debug prints, blank lines, or separator lines; include only code that is essential to implementing the pseudocode precisely.
- Preserve the logical structure and intent of the pseudocode, but leverage Python idioms, comprehensions, built-ins, and standard libraries (including importing modules like `sys`, `collections`, `itertools`, `math`, etc.) to maximize performance and readability.
- Ensure the code is immediately runnable without modifications.
- When appropriate, implement faster input reading methods or algorithmic improvements hinted at by the pseudocode context.
- Avoid unnecessary variable reassignment or overly verbose expressions; strive for concise but clear code.
- Output results exactly as specified by the pseudocodeâ€™s final statements, without additional formatting or messaging.

Here is the pseudocode to translate: