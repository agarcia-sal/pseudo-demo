Generate clear, concise pseudocode directly from the problem description in compact, high-level style. Use mostly natural language combined with symbolic operators and standard abbreviations to ensure readability and brevity. Follow these guidelines:

- Prefer one-line statements for assignments, conditions, loops, and expressions.  
- Use common natural language keywords: let, set, read, print, if, else, for, while, break, return, function.  
- Use simple symbols for operations and comparisons: ←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod.  
- Apply brief, meaningful variable names and abbreviations like cnt, idx, rv, tmp, len.  
- Indent only to indicate nested blocks; keep each line minimal in verbosity but clearly express control flow.  
- Express control structures compactly, e.g. if cond: action else: action  
- Use high-level routines or named actions for common tasks, e.g., sort A, split s by space, join list with ""  
- Number each output line sequentially starting from 1, without extra formatting or separators.  
- Output only pseudocode lines, no comments, explanations, or extra notes.  
- Avoid separator lines or any extraneous formatting.  
- Prioritize clarity, brevity, and a natural-flow readable style within a 5-second generation limit.

Example output format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A