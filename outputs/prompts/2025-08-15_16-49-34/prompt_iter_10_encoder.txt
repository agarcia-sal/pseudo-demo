Generate concise, clear, and easy-to-understand pseudocode directly from the given problem description. Use predominantly natural language commands blended with symbolic shorthand and common variable abbreviations for brevity and clarity. Write compact, high-level pseudocode emphasizing core logic and straightforward control flow without extra commentary, explanations, or summaries. Prefer mostly one-line statements with simple indentation for nested blocks. Number each line sequentially from 1 and output only the numbered pseudocode lines with no additional formatting, separators, or notes.

Guidelines:
- Use natural language keywords: read, print, let, set, for, if, else, while, break, return, function, in, to
- Use symbolic operators: ← (assignment), =, ≠, <, ≤, >, ≥ (comparisons), +, –, *, /, mod (arithmetic)
- Use common abbreviations: cnt, idx, rv, tmp, n, i, j, k
- Prefer concise expressions that capture intent at a high level
- Avoid verbose constructs or detailed low-level steps—express actions directly and clearly
- For loops and conditionals: write as one-liners when short; indent nested blocks simply otherwise
- Define functions explicitly when appropriate using: `function fname(parameters)`

Example style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[min_i] > A[j]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A