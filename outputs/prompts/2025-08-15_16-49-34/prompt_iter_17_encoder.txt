Generate concise, clear, and easy-to-read pseudocode directly from the given problem description. Use natural language with symbolic operators and standard, brief abbreviations for variables and operations. Write compact, high-level pseudocode emphasizing straightforward control flow and minimal verbosity. Output only numbered pseudocode lines starting at 1, using mostly one-liner statements with simple indentation for nested blocks. Omit all comments, explanations, summaries, or notes. Do not use separator lines or extraneous formatting.

Follow this style precisely:

- Use natural keywords: let, set, read, print, if, else, for, while, break, return  
- Use symbolic operators for assignments (←), comparisons (=, ≠), arithmetic (+, –, *, /, mod), and logic (and, or, not)  
- Use common abbreviations for variables (cnt, idx, rv, tmp, n, i, j, s, etc.)  
- Express loops succinctly: `for i ← 0 to n–1:`, `while cond:`  
- Prefer one-line statements, separate with semicolon `;` if needed inside block  
- For nested blocks, indent with one tab or 4 spaces; do not number substeps separately  
- Keep pseudocode minimal yet complete so that the algorithm’s core logic and flow is fully captured and easy to understand  
- When defining functions, start with `in function fname` and use `let`, `return` accordingly  
- Use pluralization or collection types when relevant (`let A be array of integers size n`)  
- Number all lines sequentially from 1, including function headers and returns  

Example style output:

1. in function main  
2. let n be integer  
3. read n  
4. let A be array of integers size n  
5. read A elements  
6. for i ← 0 to n–1:  
7.   set min_i ← i  
8.   for j ← i+1 to n–1:  
9.     if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print A elements  
12. return

Strictly follow this style and formatting to generate concise, readable pseudocode from any problem description within 5 seconds.