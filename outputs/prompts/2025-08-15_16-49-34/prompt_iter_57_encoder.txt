Generate clear, concise pseudocode from the given problem description that balances natural language readability with compact, high-level style. Use mostly one-line statements combining straightforward natural language keywords (read, print, let, set, if, else, for, while, break, return, function) with symbolic operators (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod). Prefer short variable names and standard abbreviations (cnt, idx, rv, tmp, len). Express control flow simply with minimal verbosity or nesting; allow straight one-line conditionals and loops with indentation only to show hierarchy clearly. Always number lines sequentially starting from 1, without extra formatting or separators.

Conventions to apply:

- Use natural language phrases like "let x be integer", "read n", "print result"  
- Prefer compact control flow like:  
  `if cond: action else: action` on one line  
  `for i in 0 to n–1:` and indent next lines for body  
- Assign variables with symbolic arrow: `x ← expression`  
- Use high-level operations named directly (e.g., "sort A", "split s by space", "join list with ''")  
- Keep statements one-liners when possible, e.g., loops, conditions, assignments  
- Avoid comments, explanations, notes, or summaries  
- Output only pseudocode lines numbered consecutively starting at 1  
- Do not use separator lines or excess formatting  
- Optimize for brevity, high readability, and clarity, within a 5-second generation target

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A