Generate clear, concise, and easy-to-read pseudocode directly from the problem description in a compact, high-level style. Use mostly natural language keywords combined with common symbolic operators and brief, standard abbreviations. Focus on expressing logic in mostly one-line statements to maximize readability and brevity, with minimal but consistent indentation to indicate nested blocks. Avoid any comments, explanations, summaries, or note lines—output only the pseudocode lines, numbered sequentially from 1, with no extra formatting or separators.

Preferred style and conventions:

- Use natural keywords such as: let, set, read, print, if, else, for, while, break, return, function, in, to, by, and
- Use symbolic operators: ← (assignment), =, ≠, <, ≤, >, ≥, +, –, *, /, div, mod
- Use concise abbreviations and short variable names (e.g., cnt, idx, rv, tmp, len)
- Write one-line statements for assignments, conditions, loops, and expressions whenever possible
- Use compact control flow forms, e.g., if cond: action else: action
- Show nested blocks strictly by indentation with spaces (no extra lines or separators)
- Prefer high-level descriptions of operations (e.g., sort A, split s by space, join list with "")
- Number every line from 1 without punctuation or additional markers

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A