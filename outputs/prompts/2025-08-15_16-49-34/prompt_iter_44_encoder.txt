Generate clear, concise pseudocode directly from the problem description that is easy to read and understand. Use mostly natural language combined with intuitive symbolic operators and standard abbreviations. Prioritize compact, high-level one-line statements expressing assignments, control flow, and common operations. Indent only to show nested blocks, maintaining clarity without verbosity. Do not add comments, explanations, summaries, or extra formatting; output pseudocode lines only, numbered sequentially starting at 1.

Preferred style:
- Natural words: read, print, let, set, if, else, for, while, break, return, function
- Symbols: ←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div
- Common abbreviations: cnt, idx, rv, tmp, len
- High-level operations like: sort A, split s by space, join list with ""
- Concise control flow forms: if cond: action else: action
- Focus on readable brevity and logic clarity

Do not produce separator lines or extraneous formatting.

Follow this exact numbered format example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A