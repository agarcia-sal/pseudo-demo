```plaintext
You are given pseudocode representing an algorithm or procedure. Translate it into a single, self-contained, efficient, and idiomatic Python program enclosed strictly within a triple-backtick python code block (```python ... ```). Your output must include code only—no explanations, comments, blank lines, or extraneous text.

Guidelines:
- Always use plain input() for reading input unless the problem context or pseudocode explicitly indicates very large input volume; in that case, use sys.stdin.readline() with appropriate stripping for speed.
- Import only the Python standard library modules explicitly necessary for your solution at the top of the code block. Avoid unused imports.
- Accurately replicate the pseudocode’s logic and output behavior exactly, including output format; do not add prompts, debug prints, or any additional output.
- Prioritize Pythonic, concise, and performant implementations: use comprehensions, generator expressions, built-in functions, standard libraries (collections, itertools, math, heapq, bisect, sys, etc.), and efficient algorithms tailored to the pseudocode.
- Choose descriptive, meaningful variable names derived from the pseudocode context if available; otherwise, opt for clear and idiomatic names.
- Eliminate redundant variables, repeated calculations, and verbose constructs; consolidate logic where possible without sacrificing correctness or clarity.
- The code must be directly executable as-is without requiring further setup or modification.
- Use minimal, precise formatting for reading and writing data, adhering strictly to the pseudocode’s specifications.

At the end of your output, do not include anything other than the python code block containing the implemented solution.
```