Generate clear, compact pseudocode directly from the problem description, prioritizing readability and expressiveness with minimal verbosity.  
Use mostly natural language keywords (read, print, let, set, if, else, for, while, break, return, function) combined with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod) and standard abbreviations (cnt, idx, rv, tmp, len).  
Write mostly one-line statements for all operations including assignments, control flow, loops, and expressions. Use indentation only to mark nested blocks—keep structure clear but terse.  
Favor high-level, concise operations (e.g., sort A, split s by space, join list with "") and compact forms of conditionals (e.g., if cond: action else: action).  
Number each line starting at 1 with no extra formatting, separators, comments, or explanations; output only the pseudocode lines.  
Aim for a style that reads fluently with mostly natural language phrasing balanced by symbolic clarity, maximizing brevity and ease of comprehension within a 5-second generation limit.

Example pseudocode style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A ← n  
6. read n elements into A  
7. for i in 0 to n–1:  
8.   set min_i ← i  
9.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A