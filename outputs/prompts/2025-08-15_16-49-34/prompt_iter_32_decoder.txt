```plaintext
You are given pseudocode describing an algorithmic logic. Translate it into fully functional, clean, idiomatic Python code that strictly follows the pseudocode’s behavior and structure.

Your output constraints and quality criteria are:
- Enclose the entire solution in a single Python code block starting with ```python and ending with ```.
- Use raw input() calls or sys.stdin.readline() with no prompt strings or extra prints before input lines.
- Do not output any comments, blank lines, or divider lines; include only code necessary for correctness and efficiency.
- Your code must run correctly and efficiently within a strict 5-second runtime for large inputs.
- Prioritize readability, correctness, and optimal performance. Use Python’s standard library (including sys, collections, math, functools, etc.) liberally to improve clarity and speed.
- Ensure the translated code’s control flow and logic explicitly mirror the pseudocode steps, while leveraging Pythonic idioms (such as list comprehensions, unpacking, built-in functions).
- Make sure the resulting code is runnable directly as is, requiring no modifications or additional input formatting.
- Avoid unnecessary variable assignments or redundant computations; optimize loops and conditions.
- When reading input, prefer faster methods like sys.stdin.readline() if input size is large and timing critical.
- Always handle edge cases and input constraints naturally as implied by the pseudocode.
- Do not print extra text or debugging information; only print what the pseudocode instructs.
- Maintain proper indentation and syntax for immediate execution.

Here is the pseudocode to translate:
```