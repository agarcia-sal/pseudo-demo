Generate concise, clear, and easy-to-read pseudocode from the given problem description. Use mostly one-line statements that blend natural language with intuitive symbolic shortcuts and common abbreviations for variables and operations. Write at a high, compact level while capturing all core logic and control flow clearly. Omit comments, explanations, summaries, or any extra notes—output only pseudocode steps numbered sequentially from 1.

Follow these style rules:

- Prefer natural language commands: read, print, let, set, if, else, for, while, break, return  
- Use symbols for assignment and operations: ←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod  
- Use brief variable names and common abbreviations (cnt, idx, rv, tmp, etc.)  
- Use mostly one-line statements with simple indentation for nested blocks  
- Express conditions and loops succinctly, merging statements with colons and semicolons where logical  
- Avoid any punctuation or formatting beyond numbering and indentation needed for clarity  
- Provide compact but unambiguous control flows and data handling at a medium to high abstraction level  
- Do not use separator lines, boxed sections, or extra formatting outside numbered pseudocode lines  

Example style to emulate exactly:

1. x ← 0  
2. while x < n: x++  

Output only the numbered pseudocode lines expressing the solution clearly and efficiently, prioritizing readability and brevity to fit within a 5-second generation constraint.