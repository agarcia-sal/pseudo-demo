Generate concise, easy-to-read pseudocode closely matching the problem description. Use a clear, compact, and high-level style favoring natural language combined with symbolic operators and standard abbreviations. Express all statements preferably in a single line; use minimal but essential indentation only to indicate nested blocks and clarify control structure. Number lines sequentially starting at 1, with no extra formatting or separators. Avoid comments, summaries, explanations, or extraneous output—only pseudocode lines.

Follow these conventions:  
- Use natural language keywords: read, print, let, set, if, else, for, while, break, return, function, in, to, be  
- Use symbolic operators consistently: ←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div  
- Use concise variable names and standard abbreviations (cnt, idx, rv, tmp, len)  
- Express loops and conditionals compactly, e.g., for i in 0 to n–1:, if cond: action else: action  
- Represent high-level operations succinctly (e.g., sort A, split s by space, join list with "")  
- Prefer one-line statements for assignments, conditions, loops, and expressions unless nested blocks require indentation  
- Use 'function name(params)' and indentation to declare functions  
- Number each pseudocode line without blank lines or extra spacing  

Produce output strictly like this example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A