Translate the given pseudocode into clean, idiomatic, and highly optimized Python code. Your output must be a single, standalone Python code block enclosed strictly within triple backticks and the `python` specifier (```python ... ```), containing code only—no comments, explanations, blank lines, or extraneous output.

Requirements:

- Use `input()` for reading input unless the pseudocode or context strongly suggests large input data volumes; then prefer `sys.stdin.readline()` with appropriate stripping for performance.
- Exactly replicate the pseudocode’s logic and output, but improve clarity, efficiency, and Pythonic style by leveraging built-ins, comprehensions, generator expressions, unpacking, standard libraries (`sys`, `collections`, `itertools`, `math`, `heapq`, `bisect`, etc.), and common third-party modules if justified.
- Avoid redundant variables, repeated computations, and verbose constructs; prefer concise, direct, and performant implementations.
- Your code must be ready to execute immediately without additional setup, assumptions, or modifications.
- All output formatting must strictly follow the pseudocode’s instructions—no additional prompts, debug prints, or separators.
- If relevant, implement efficient algorithms and input/output schemes tailored to the pseudocode’s problem scale and nature.
- Use meaningful variable names derived from the pseudocode if present; otherwise, use clear, idiomatic names.
- Manage imports at the top of the code block only if necessary for the solution.
- Do not include explanations, imports not actually used, or unused code snippets.

Here is the pseudocode to translate: