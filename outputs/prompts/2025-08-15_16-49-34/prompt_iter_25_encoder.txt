Generate concise, clear, and readable pseudocode directly from the problem description. Write compact, high-level pseudocode that balances natural language clarity with symbolic shorthand for operations and control flow. Use mostly one-line statements with simple indentation to indicate nested blocks. Avoid comments, explanations, summaries, or any notes. Output only numbered pseudocode lines starting at 1, following this style:

- Use natural language keywords: let, set, read, print, for, while, if, else, return, break  
- Use symbolic operators for assignment (←), arithmetic (+, –, *, /, mod), comparisons (=, ≠, <, ≤, >, ≥)  
- Prefer common abbreviations for variables (e.g., cnt for count, idx for index, rv for result)  
- Express conditions, iterations, and assignments concisely and clearly without extra verbosity  
- Use one-line blocks when possible; indent nested blocks by one tab or 2 spaces  
- Write function definitions as: in function fname  
- Declare variables succinctly with types if helpful (e.g., let n be integer) but keep it minimal  
- Represent data structures simply (e.g., vector, list, array) without verbose detail  
- Avoid separator lines, excessive formatting, or extraneous markdown  
- Prioritize clarity and brevity to enable fast generation (within 5 seconds)

Example format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers, size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1:  
9.    if A[min_i] > A[j]: min_i ← j  
10.  swap A[i], A[min_i]  
11. print all elements of A