Translate the given pseudocode into a single, self-contained, and optimally performant Python script enclosed within a single, standalone Python code block marked with ```python ... ```. Your output must:

- Use plain `input()` for reading inputs unless the pseudocode or typical problem scale explicitly suggests very large input volumes, in which case use fast input methods such as `sys.stdin.readline()` with appropriate `.rstrip()` trimming.
- Completely avoid any extraneous text, prompts, comments, debugging code, blank lines, or separatorsâ€”output only the precise Python code implementing the pseudocode.
- Faithfully preserve the exact logic and semantics of the pseudocode but transform constructs into the most concise, Pythonic, and efficient equivalents, using comprehensions, generator expressions, built-in functions, standard libraries (`sys`, `collections`, `heapq`, `itertools`, `math`, `re` etc.), and algorithmic optimizations when appropriate.
- Guarantee that the code can be executed immediately as-is without modification or additional context and finishes well within 5 seconds on typical problem scale.
- Eliminate all unnecessary or redundant computations, variables, and steps; minimize memory usage and runtime complexity where possible.
- Output only the final results exactly as specified by the pseudocode with no extra formatting, message strings, or trailing spaces.
- You may leverage any widely accepted Python standard or third-party libraries (e.g., `numpy`, `sympy`) if that clearly improves correctness, performance, or clarity.
- The final code block must begin with ```python and end with ```.

Here is the pseudocode to translate: