Generate concise, clear, and easy-to-read pseudocode from the given problem description in a compact, high-level style emphasizing natural language with symbolic notation. Produce mostly one-line statements using standard keywords and symbols, blending natural language and brief variable names for simplicity. Express all control flow (conditions, loops, functions) clearly but minimally, without comments, summaries, or extra explanations. Indent only to show nested structure for readability. Number each line starting at 1, without extra formatting or separators.

Guidelines:  
- Use natural keywords: read, print, let, set, if, else, for, while, break, return, function, in, to, step  
- Use symbolic operators: ←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div  
- Use brief, standard abbreviations: cnt, idx, rv, tmp, len, etc.  
- Prefer compact, precise one-line forms for assignments, conditions, loops, and expressions—e.g.,  
  if cond: action else: action  
- Use high-level expressions for typical operations (e.g., split s by space, join list with "", sort A)  
- Use natural phrasing for collections and ranges: for i in 0 to n–1, for all elements in A  
- Avoid extraneous formatting or blank lines—only numbered pseudocode lines  
- Output only the pseudocode lines numbered sequentially from 1, maximizing clarity and brevity within a 5-second generation limit

Follow this example style exactly:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for i in 0 to n–1:  
8.   set min_i to i  
9.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A