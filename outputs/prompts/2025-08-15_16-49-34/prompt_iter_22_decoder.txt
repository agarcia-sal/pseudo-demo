```plaintext
You are tasked with translating the given pseudocode into clear, concise, and idiomatic Python code that precisely preserves the algorithm’s logic and behavior. Your translation must adhere to the following requirements to ensure correctness, optimal performance, and usability:

- Always use simple input reading with `input()` or `sys.stdin.readline().rstrip('\n')` if it improves efficiency; do not include any prompt strings or extraneous input instructions.
- Output only the final Python code enclosed within a single code block starting with ```python and ending with ```.
- Avoid unnecessary comments, blank lines, separator lines, or debugging prints—only code essential to replicate the pseudocode logic.
- Use Pythonic idioms, built-in functions, and standard library modules where they make the code clearer or more efficient.
- Ensure the produced code is runnable as-is, requiring no external modifications or scaffolding.
- Optimize for both clarity and computational performance, mindful of a strict overall time limit of 5 seconds.
- Accurately map each pseudocode instruction to well-structured Python constructs—loops, conditionals, functions, and data structures—reflecting the exact flow and intent.
- When feasible, replace manual loops or searches with efficient built-ins or data structures to enhance speed.
- Write clean, readable code without sacrificing efficiency; prioritize direct translation that minimizes overhead and redundancy.
- Do not introduce unnecessary abstractions or complexity that obscure the original algorithm.

Here is the pseudocode to translate:
```