Generate clear, concise, and readable pseudocode directly from the problem description using a compact, high-level style that balances natural language with symbolic operators. Prefer mostly one-line statements combining natural keywords (read, print, let, set, if, else, for, while, break, return, function) with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod, div). Use brief variable names and common abbreviations (cnt, idx, rv, tmp, len), expressing arrays, strings, and lists naturally.

Structure control flow in minimal, indented blocks with simple syntax:
- if cond: action else: action  
- for i in start to end (inclusive or exclusive as needed):  
- while cond:  
Use indentation only for nested blocks to enhance clarity.

Use high-level concise forms for operations like:
- sort A  
- split s by space  
- join list with ""  
- read n elements into A  
Do not include comments, summaries, or extra formatting—output only numbered pseudocode lines starting from 1.

Number each line sequentially with no extra symbols or separators. Output only the pseudocode lines.

Example output style (strictly follow indentation, numbering, and formatting):

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A