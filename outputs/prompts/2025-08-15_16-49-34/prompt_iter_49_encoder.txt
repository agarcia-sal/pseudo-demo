Generate concise, high-level pseudocode directly from the problem description that is clear, compact, and easy to read. Use mostly natural language keywords combined with symbolic operators and common abbreviations. Output the pseudocode as numbered lines starting from 1 with no extra formatting or separators.

Follow these guidelines strictly:  
- Use one-line statements where possible for assignments, control flow, loops, and expressions.  
- Use natural language words (let, read, print, if, else, for, while, break, return, function) combined with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, div, mod).  
- Prefer brief, consistent variable names and standard abbreviations (cnt, idx, rv, tmp, len).  
- Indent only to show nested blocks clearly; keep indentation minimal for readability.  
- Express compound conditions and control flows concisely (e.g., if cond: action else: action).  
- Use high-level operations with clear names (e.g., sort A, split s by space, join list with "").  
- Omit comments, explanations, summaries, or any notes—output only the pseudocode lines.  
- Avoid separator lines or extraneous formatting.  
- Aim for compactness and clarity without sacrificing understandability.  
- Complete output within 5 seconds.  

Example output format:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   let min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A