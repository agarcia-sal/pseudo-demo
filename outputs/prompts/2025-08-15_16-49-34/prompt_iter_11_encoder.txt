Generate concise, natural-language pseudocode that is clear, easy to read, and directly captures the core logic of the given problem. Use mostly one-line statements, simple control flow, and standard symbolic notations and abbreviations for variables and operations to keep it compact and high-level. Avoid any explanations, comments, summaries, or notes—output only the numbered pseudocode lines starting at 1.

Follow these guidelines exactly:

- Use natural keywords: read, print, let, set, for, while, if, else, break, return  
- Use symbolic operators for assignment and conditions: ← for assignment; =, ≠, <, ≤, >, ≥ for comparisons; +, –, *, /, mod for arithmetic  
- Use common short variable names and abbreviations (idx, cnt, rv, tmp) for clarity and brevity  
- Prefer one-liners with simple indentation (tabs or 1–2 spaces) for nested blocks  
- Write high-level compact logic, combining conditions or steps where it improves readability  
- Avoid unnecessary verbosity or low-level detail  
- Do not use separator lines or extra formatting beyond simple sequential numbering  
- Always number lines starting from 1 sequentially  
- Use natural language phrasing like “let x be integer”, “read n”, “for i ← 1 to n”, “if condition: action”  
- Output only the pseudocode text (no surrounding text, headings, or markup)

Example style to follow:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers of size n  
5. read n elements into A  
6. for i ← 0 to n–1:  
7.   let min_i ← i  
8.   for j ← i+1 to n–1:  
9.    if A[j] < A[min_i]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print A

Produce pseudocode that is self-explanatory by its clear, concise, natural style and format, maximizing readability and brevity within a 5-second generation constraint.