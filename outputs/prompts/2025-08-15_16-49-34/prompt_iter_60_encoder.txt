Generate clear, concise, and easy-to-read pseudocode directly from the given problem description using a compact, high-level style. Express mostly one-line statements combining natural language keywords with symbolic operators and common abbreviations. Use natural language control flow constructs (if, else, for, while, function, return, read, print, let, set) alongside symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod) to keep statements brief yet clear. Prefer:

- compact variable names and standard abbreviations (cnt, idx, tmp, rv, len)  
- one-line statements for assignments, conditions, loops, and expressions  
- clear, minimal indentation only for nested blocks to convey structure  
- high-level operations phrased simply (sort A, split s by space, join list with "")  
- concise inline forms for conditions and loops where sensible (e.g., if cond: action else: action)  
- omit all comments, explanations, summaries, or extra formatting  
- number each line sequentially from 1 with a single space after the dot, no extra formatting or separators  
- output only pseudocode lines following this exact style  
- ensure pseudocode is as compact as possible without sacrificing readability  
- avoid using multi-line blocks unnecessarily; prefer concise one-liners when reasonable  
- use natural language mixed with symbols, prioritizing flow readability and brevity over verbose syntax  
- do not output any separator lines or extraneous text

Example of expected style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers  
5. set size of A = n  
6. read n elements into A  
7. for all elements in A:  
8.   set min_i ← i  
9.   for j in i+1 to size of A exclusive: if A[min_i] > A[j]: min_i ← j  
10.   swap A[i], A[min_i]  
11. print all elements of A