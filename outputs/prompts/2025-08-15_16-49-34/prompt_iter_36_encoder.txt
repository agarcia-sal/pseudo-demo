Generate concise, clear, and easy-to-read pseudocode directly from the problem description, using a high-level style that balances natural language and symbolic notation. Output only the pseudocode without any comments, summaries, explanations, or extra formatting. Follow these rules precisely:

- Number each line sequentially from 1 with a period and a single space after (e.g., "1. ").
- Use mostly one-line statements combining natural language keywords (read, print, let, set, if, else, for, while, break, return, function) with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod).
- Use concise, suggestive variable names and common abbreviations (cnt, idx, rv, tmp, len).
- Express assignments, conditions, loops, and expressions in a single line wherever possible.
- Use indentation only to indicate nested control structures (if, else, for, while, function), maintaining clarity and readability.
- Control flow statements may combine condition and action compactly (e.g., if x < y: x ← y else: x ← z).
- Prefer abstract, high-level expressions for common operations (sort A, split s by space, join list with "") rather than detailing low-level steps.
- Represent loops with ranges clearly and compactly (for i in 0 to n–1 or for each x in list).
- Avoid unnecessary verbosity or repetition; keep pseudocode as succinct as possible while preserving correctness and readability.
- Do not include separator lines, blank lines, bullet points, or any additional formatting—only the numbered pseudocode lines.
- The pseudocode must be generated within a 5-second limit, prioritizing clarity and brevity.

Example output style:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A