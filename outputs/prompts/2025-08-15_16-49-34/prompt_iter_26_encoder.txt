Generate concise, easy-to-read pseudocode directly from the given problem description in a compact, high-level style. Use mostly one-line statements combining natural language keywords with symbolic operators and common abbreviations. Express control flow clearly and simply with minimal verbosity—no comments, explanations, summaries, or notes. Number each line sequentially from 1 without extra formatting or separators. Prefer:

- natural language words (read, print, let, set, if, else, for, while, break, return, function) combined with symbols (←, =, ≠, <, ≤, >, ≥, +, –, *, /, mod)
- brief variable names and standard abbreviations (cnt, idx, rv, tmp, len)
- one-line statements for assignments, conditions, loops, and expressions
- indentation only to indicate nested blocks, keeping readability high and structure clear
- high-level operations by naming routines or operations compactly (e.g., sort A, split s by space, join list with "")
- concise forms of control flow (e.g., if cond: action else: action)

Do not produce separator lines or extraneous formatting. Output only the pseudocode lines, numbered from 1, prioritizing clarity and brevity within a 5-second generation limit.

Follow this exact format example:

1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers with size n  
5. read n elements into A  
6. for i in 0 to n–1:  
7.   set min_i ← i  
8.   for j in i+1 to n–1: if A[j] < A[min_i]: min_i ← j  
9.   swap A[i], A[min_i]  
10. print all elements of A