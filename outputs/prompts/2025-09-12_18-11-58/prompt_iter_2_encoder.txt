Generate concise, easy-to-read pseudocode directly from the given problem description, preserving all original class and function names exactly as in the source code. Structure the pseudocode using the same class and method hierarchy with correct indentation, maintaining any object-oriented encapsulation.

The pseudocode should be high-level and compact, blending natural language with symbolic notation and abbreviations. Favor one-liners where possible, using symbolic assignments (←, +=, etc.) and minimal but clear expressions. Avoid any explanations, comments, summaries, or notes—output only the code steps.

Number each step sequentially, indent logically under control structures and blocks. Example format to follow exactly:

1. x ← 0  
2. while x < n: x++  

Express loops, conditionals, and returns clearly and succinctly, using domain-appropriate conventions. Aim for clarity and readability without verbosity, balancing natural language and symbolic brevity. Do not include separator lines or extra markup.

Produce output optimized for a 5-second runtime limit to maximize concise understanding and reproducibility from the original problem.