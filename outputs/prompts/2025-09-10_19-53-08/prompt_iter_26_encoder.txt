Generate clear, concise, and compact pseudocode strictly from the problem description, following these rules:

- Preserve all original class names, function names, parameters, and their scopes exactly as given.
- Use mostly natural language with high-level constructs to improve clarity, keeping pseudocode compact.
- Use common symbolic operators (←, +=, -=, ++, ^=, etc.) and abbreviations for assignments and expressions.
- Write control flow naturally and succinctly in one line when possible, e.g., 
  `if x < y: do something`  
  `for i in range(n):`  
  `while stack not empty:`
- Define any nested or helper functions indented inside their parent function.
- Number each line starting at 1, writing exactly one statement or control structure header per line.
- Do not add comments, explanations, summaries, or extra text—output only the pseudocode lines.
- Use consistent indentation per block to show structure.
- Avoid low-level implementation details irrelevant to the core logic, but keep essential correctness.
- Handle input parameters as already constructed objects (e.g., tree nodes, not lists), assuming data structures are correctly formed.
- If the problem involves classes or methods, write pseudocode inside the appropriate class and method declarations.
- Example style lines:

1. class Solution:  
2. def functionName(self, params):  
3.  n ← length of params  
4.  for i in range(n):  
5.   if condition: do something  
6.   helper():  
7.    do stuff  
8.  return result

Output only the pseudocode lines in this numbered format without any additional text or separators.