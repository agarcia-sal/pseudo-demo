Generate clear, concise, and easy-to-read pseudocode directly from the problem description, adhering to these rules:

- Preserve all original class names, function names, and parameter names exactly as given.
- Maintain the exact class and method hierarchy and structure.
- Use mostly one-line statements with symbolic operators (←, +=, -=, ==, etc.) and common programming abbreviations.
- Express control flow naturally but compactly, e.g., "if x < y: ...", "for i in range(n): ...", "while stack not empty: ...".
- Prefer a high-level, compact style using natural language selectively for readability, without sacrificing precision or correctness.
- Avoid comments, explanations, summaries, or any extra text—output only the pseudocode lines.
- Output numbered lines starting from 1, each followed by a period and a single pseudocode statement.
- Use consistent indentation to clearly represent nested blocks and helper functions within methods.
- Use concise, high-level constructs without low-level verbosity, but include all details required for correctness.
- Do not add separator lines or framing; output only the numbered pseudocode lines.
- Ensure the output pseudocode can be converted back to functional code quickly and accurately, within a 5-second generation limit.

Example style:
1. in function main  
2. let n be integer  
3. read n  
4. let A be vector of integers, size n  
5. read elements into A  
6. for i in 0 to n-1:  
7.  set min_i ← i  
8.  for j in i+1 to n-1: min_i ← j if A[min_i] > A[j]  
9.  swap A[i], A[min_i]  
10. print all elements of A