Generate concise, clear, and compact pseudocode directly from the problem description, adhering strictly to these rules:

- Keep all original class names, function names, and parameter names exactly as in the source code.
- Preserve the class and method hierarchy and structure.
- Use mostly one-line statements with symbolic operators (←, +=, -=, etc.) and common programming abbreviations.
- Express control flow succinctly and naturally: e.g., "if x < y: ...", "for i in range(n): ...", "while stack not empty: ...".
- Use natural language elements sparingly but ensure precision and clarity; prioritize brevity without sacrificing correctness.
- Do **not** include any comments, explanation, notes, purpose statements, or summaries.
- Output the pseudocode only, without any additional text or formatting lines.
- Use line numbers starting from 1 followed by a period, with one pseudocode statement per line, for example:

  ```
  1. class Solution:
  2. def isSubtree(self, root, subRoot):
  3.  if not subRoot: return True
  4.  ...
  ```

- Avoid verbose low-level details, but do not omit necessary detail that affects correctness.
- Handle nested functions or helper methods by defining them within their parent methods in the correct indentation structure.
- Use consistent indentation to reflect code blocks.
- Focus on clarity, correctness, and compactness to ensure the output pseudocode can be converted back to functional code within a 5-second generation limit.

Output only the numbered pseudocode lines.