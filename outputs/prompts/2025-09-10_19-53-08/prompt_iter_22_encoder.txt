Generate concise, clear, and compact pseudocode from the given problem description following these rules:

- Preserve all original class names, function names, parameters, and their exact nesting and scopes.
- Produce pseudocode that is high-level, easy to read and understand, using natural language elements combined with symbolic operators (←, +=, -=, ++, ^=, etc.).
- Prefer single-line statements and succinct control flow expressions, e.g.,  
 `if x < y:`  
 `for i in range(n):`  
 `while stack not empty:`  
- Use indentation precisely to denote blocks and nested helper functions inside parent functions.
- Avoid verbose syntax and unnecessary low-level details, but keep all essential logic for direct implementation.
- Do NOT include comments, explanations, or any text other than pseudocode lines.
- Number every output line starting at 1 with a period; write exactly one statement or control header per line.
- For inputs or complex types (e.g., trees, lists), maintain variable names and treat inputs as given (do not assume conversion or initialization beyond problem description).
- Use consistent, minimal spacing for clarity without excess.
- THE OUTPUT MUST BE ONLY PSEUDOCODE LINES IN THE ABOVE FORMAT WITH NO EXTRA TEXT.

Example output style:

1. class Solution:
2. def compute(self, arr):
3.  n ← length of arr
4.  for i in range(n):
5.   min_i ← i
6.   for j in range(i+1, n):
7.    if arr[j] < arr[min_i]: min_i ← j
8.   swap arr[i], arr[min_i]
9.  return arr