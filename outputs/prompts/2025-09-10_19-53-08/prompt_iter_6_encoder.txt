Generate concise, clear, and easy-to-read pseudocode directly from the problem description, strictly following these rules:

- Preserve all original class names, function names, and parameter names exactly as given.
- Maintain the original class and method hierarchy and structure within the pseudocode.
- Produce compact, high-level pseudocode favoring one-liners with symbolic operators (←, +=, -=, ^=, etc.) and common abbreviations.
- Use natural language judiciously to improve readability and understandability, balancing brevity with clarity.
- Represent control flow succinctly and naturally, for example:
  - if x < y: ...
  - for i in range(n): ...
  - while stack not empty: ...
- Define nested or helper functions inside their parent methods using consistent indentation.
- Do **not** include comments, explanations, purpose statements, summaries, or notes.
- Output only the numbered pseudocode lines starting at 1 with one statement per line, no extra formatting or separator lines.
- Avoid excessive low-level details but include all necessary steps essential for correctness.
- Use consistent indentation to reflect code blocks and nesting clearly and naturally.
- Follow this numbering and style format exactly (example):

  ```
  1. class Solution:
  2. def isSubtree(self, root, subRoot):
  3.  if not subRoot: return True
  4.  def isSameTree(s, t):
  5.   if not s and not t: return True
  6.   if not s or not t: return False
  7.   return s.val == t.val and isSameTree(s.left, t.left) and isSameTree(s.right, t.right)
  8.  return isSameTree(root, subRoot) or self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)
  ```

- Focus on generating pseudocode that can be reliably transformed back into functional code quickly (within ~5 seconds).
- Do not output any text other than the numbered pseudocode lines.