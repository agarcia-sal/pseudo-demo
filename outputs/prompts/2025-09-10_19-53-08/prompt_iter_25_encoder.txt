Generate concise, high-level pseudocode from the problem description with these directives:

- Keep all original class names, function names, and parameters exactly as in the source, preserving their scope and hierarchy.
- Use a compact, readable style mixing natural language and symbolic operators (←, +=, -=, ^=, ++, etc.) to express logic clearly and succinctly.
- Write one statement or control structure header per line, numbered sequentially starting at 1.
- Represent control flow naturally with minimal syntax:  
 • if condition:  
 • else:  
 • for var in range(...):  
 • while condition:  
- Declare nested functions inside their parent methods properly indented.
- Avoid comments, explanations, summaries, or any extraneous text—output only the pseudocode lines.
- Use consistent indentation for nested blocks and functions.
- Favor one-line statements when possible to keep pseudocode compact and easy to follow.
- Exclude unnecessary low-level details but ensure all essential algorithmic logic present so implementation is viable within 5 seconds.
- Do not use separators or extra formatting beyond line numbers and indentation.

Example output style:

1. class Solution:
2. def sortArray(self, nums):
3.  n ← length of nums
4.  for i in range(n):
5.   min_i ← i
6.   for j in range(i+1, n):
7.    if nums[j] < nums[min_i]: min_i ← j
8.   swap nums[i], nums[min_i]
9.  return nums