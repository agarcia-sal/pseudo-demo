Generate high-level, compact pseudocode directly from the problem description with these strict rules:

- Preserve all original class names, method/function names, parameter names, and their nesting exactly as in the source code.
- Produce pseudocode that is concise, easy to read, and understandable by mixing simple natural language and symbolic notation.
- Prefer one-liner statements and expressions using symbolic operators (←, +=, -=, ++, ==, etc.) where appropriate.
- Represent control flow naturally and briefly: e.g.,  
 `if x < y:`  
 `for i in 0..n-1:`  
 `while stack not empty:`  
- Include nested and helper functions inside their parents with proper indentation.
- Do not add any comments, explanations, summaries, or notes; output only the pseudocode lines.
- Use consistent indentation for block structure clarity.
- Number each line starting from 1, one statement or control header per line.
- Avoid unnecessary low-level implementation details not affecting correctness but do not omit essential logic.
- Make pseudocode implementable in under 5 seconds using high-level, clear steps.
- Use natural language phrases moderately to improve clarity while keeping compactness.
- Do not output separators or blank lines between lines.

Example output style:

1. class Solution:  
2. def compute(self, arr):  
3.  n ← length of arr  
4.  for i in 0..n-1:  
5.   min_i ← i  
6.   for j in i+1..n-1:  
7.    if arr[j] < arr[min_i]: min_i ← j  
8.   swap arr[i], arr[min_i]  
9.  return arr