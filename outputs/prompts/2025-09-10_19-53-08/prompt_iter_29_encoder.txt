Generate compact, clear, and easy-to-understand pseudocode from the given problem description with these rules:

- Keep the original class names, function names, parameters, and object hierarchy exactly as in the source.
- Use a high-level style blending natural language and concise symbolic notation (←, +=, -=, ++, etc.).
- Prefer one-line statements and natural control flows like:  
  if x < y: do something  
  for i in range(n): do something  
  while stack not empty: do something  
- Define any nested or helper functions inside their parent functions with proper indentation.
- Show block structure using consistent indentation without explicit block delimiters.
- Number each output line starting at 1, writing exactly one pseudocode statement or control structure header per line.
- Avoid comments, explanations, summaries, or any extra text—only output pseudocode lines.
- Omit low-level details irrelevant to correctness but include all essential logic to make the pseudocode directly implementable within 5 seconds.
- Use natural language freely to improve readability and keep the pseudocode compact and high-level.

Example output style:

1. class Solution:  
2. def compute(self, arr):  
3.  n ← length of arr  
4.  for i in range(n):  
5.   min_i ← i  
6.   for j in range(i+1, n):  
7.    if arr[j] < arr[min_i]: min_i ← j  
8.   swap arr[i], arr[min_i]  
9.  return arr