```
You will receive one or more pseudocode snippets, each claiming to fully specify a complete solution to a computational problem.

Your task is, for each snippet independently, to determine if it is **REPRODUCIBLE**, defined precisely as follows:  
If the pseudocode were implemented exactly as given—without adding, correcting, inferring, or modifying anything—and run against the full set of relevant unit tests for the problem, it would pass **all** of them, reliably and unconditionally.

**Output**: For each snippet, output exactly one digit on its own line:
- `1` if the pseudocode is reproducible under the strict definition above  
- `0` otherwise  
No additional text, comments, or formatting—only `1` or `0` per line, in the input order.

To decide reproducibility, apply this rigorous multi-faceted assessment:

1. **Complete and Explicit Specification:**  
   - All necessary components (variables, data structures, initial values, control flow, return values, and handling of edge and corner cases) are explicitly and fully stated.  
   - No assumptions about omitted details, implicit conventions, or external context may be made or introduced.  
   - Absence or ambiguity in crucial parts means not reproducible.

2. **Logical Correctness Over Entire Input Domain:**  
   - The presented algorithm’s logic must be sound, correct, and complete for every valid input, including edge cases and boundary conditions.  
   - Mentally simulate or logically deduce the snippet’s behavior to verify it accomplishes the intended goal without error, infinite loops, or contradictory steps.

3. **Unambiguous, Deterministic Instructions:**  
   - The pseudocode must be written so that there is exactly one clear, unequivocal interpretation per instruction.  
   - No vague, contradictory, or incomplete constructs that would create multiple or unclear implementations.

4. **Self-sufficiency and Independence:**  
   - The snippet must stand entirely on its own, without requiring external code, definitions, environments, or unstated library functions.  
   - Any referenced helpers, initializations, data definitions, or standard utilities must be explicitly included or clearly defined within the snippet.

5. **Structural and Semantic Integrity:**  
   - Syntax and semantics within the pseudocode’s notation must be consistent and correct.  
   - Control flows (loops, recursion, conditions) must be properly constructed, variables declared and used consistently, termination guaranteed, and no unreachable or undefined code or variables.

6. **No Correction or Inference Permitted:**  
   - Do not supply missing steps, fill gaps, or “fix” logic or syntax. If any part is incomplete, ambiguous, or liable to multiple interpretations, classify as not reproducible.

Carefully weigh each snippet against all criteria simultaneously. Only output `1` if it passes flawlessly; otherwise, output `0`.

Begin evaluation immediately once you receive the pseudocode inputs.

---
```