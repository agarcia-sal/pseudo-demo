```
You will be given one or more pseudocode snippets, each claiming to fully specify a correct and complete solution to a computational problem.

Your task:  
For each snippet, independently determine whether it is truly **REPRODUCIBLE** — meaning that if implemented exactly as written, without adding, inferring, or modifying anything, it will **consistently pass all relevant unit tests** associated with the problem.

Produce a single digit output per snippet:  
- Output `1` if the pseudocode is reproducible.  
- Output `0` if it is not reproducible.

---

To make this determination, use the following rigorous approach to evaluation for each snippet:

1. **Precise Completeness**:  
    - Every variable, data structure, and function used must be explicitly declared or defined.  
    - The snippet must provide all initializations, boundary and edge case handling, and final output or return statements fully and clearly.  
    - No essentials may be missing, vague, or implicitly assumed.  
    - Do not infer or supply any missing detail—absence of necessary information means not reproducible.

2. **Logical Correctness and Exhaustiveness**:  
    - The described algorithm must correctly solve the stated problem on **every valid input**, including corner and edge cases.  
    - Verify correctness by fully simulating behavior or logically analyzing data flow, ensuring no infinite loops, erroneous states, or contradictions.  
    - Confirm that the output aligns with the exact problem requirements (output format, value type, constraints).

3. **Uniqueness and Clarity of Interpretation**:  
    - The pseudocode must be unambiguous and deterministic: it should have exactly one clear interpretation leading to a correct implementation.  
    - Reject snippets that contain vague wording, undefined operations, inconsistent statements, or multiple possible readings.

4. **Self-Containment with Explicit Context**:  
    - The snippet must not depend on any external code, context, environment, or hidden assumptions beyond what is shown.  
    - Use of standard operations or libraries must be explicitly stated; otherwise, assume missing support causes failure.

5. **Syntactic and Semantic Integrity**:  
    - All control flows (loops, recursion, conditionals) must be syntactically valid and semantically sound.  
    - Variables must be used only after being defined and initialized.  
    - The flow must terminate properly for all inputs without deadlocks or infinite recursion.

6. **Consistency with Problem Conventions**:  
    - Naming, parameter usage, and data types should be consistent within the snippet.  
    - Output format and returned data must strictly conform to problem specifications.

---

Important instructions:  
- Do **not** attempt to correct, fill in gaps, or guess the author's intent—if you find ambiguity, incompleteness, or anything missing, mark the snippet as not reproducible (`0`).  
- Mark a snippet reproducible (`1`) **only if all criteria above are completely satisfied without any doubt**.

---

**Output format:**  
- For each input snippet, output exactly one line with a single digit: `1` if reproducible, `0` if not.  
- Maintain the order of outputs corresponding exactly to the order of input snippets.  
- Output **no extra text, explanation, formatting, or whitespace lines**—only the digits.

Begin your evaluation immediately after receiving the pseudocode inputs.
```
