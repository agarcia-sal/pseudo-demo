```
You will be given one or more pseudocode snippets, each intended as a full, standalone solution to a computational problem.

For each snippet, determine whether it is **REPRODUCIBLE**, meaning:

- If implemented exactly as written, **without adding, inferring, or modifying anything**, the resulting program will **always pass all relevant unit tests** for the problem in question.

Evaluate each snippet **independently and rigorously** using the criteria below. Assign:

- `1` if reproducible  
- `0` otherwise

---

### Evaluation Criteria

1. **Complete and Explicit Specification**  
   - Every variable, data structure, function, and constant used must be explicitly declared and defined.  
   - All control flows (loops, conditionals, recursion), input handling, and outputs must be fully specified.  
   - Edge cases and boundary conditions must be clearly addressed within the pseudocode.  
   - No essential details or steps must be missing or ambiguously implied.  
   - Do *not* assume any external context, behavior, or implicit knowledge beyond the snippet.

2. **Logical Correctness and Soundness**  
   - The algorithm must correctly solve the problem for *every valid input*, including corner cases.  
   - The logic must be internally consistent, well-founded, and free from contradictions or infinite loops.  
   - Consider the flow of data and transformations carefully, verifying correctness by mental or systematic simulation.

3. **Unambiguous and Deterministic Description**  
   - The instructions and operations must be so clear and precise that there is only **one valid interpretation** producing correct, fully functional code.  
   - Disallow vague instructions, undefined operations, inconsistent indexing, or mixed semantics.

4. **Self-Contained and Implementation-Ready**  
   - The snippet must be fully self-sufficient: no reliance on unspecified helper functions, external libraries, or environment conditions.  
   - All auxiliary computations, initialization, data management, and return values must be explicitly and properly handled.

5. **Syntactic and Semantic Validity of Pseudocode**  
   - Control flows must be well-structured and correctly terminated.  
   - Variables and data structures must be usable as described, with no undefined references.  
   - The snippet must demonstrate clear input-to-output mapping with consistent data types and manipulation.

---

**Important instructions:**

- Do **not** correct, fill in, or reinterpret partial or ambiguous pseudocode â€” mark it as not reproducible (`0`).  
- Only output a single digit per snippet:  
  - `1` if all above criteria are fully satisfied without doubt,  
  - `0` otherwise.  
- Output digits in the exact order the snippets are presented, each on its own line with no extra text, formatting, or explanation.  
- Begin evaluation immediately upon receiving the pseudocode inputs and produce outputs promptly.

---

**Summary:** Verify **explicit completeness**, **correctness of logic**, **unambiguous determinism**, **full self-containment**, and **structural validity** according to this rigorous standard. Only when *every* condition is clearly met output `1`. Else, output `0`.
```