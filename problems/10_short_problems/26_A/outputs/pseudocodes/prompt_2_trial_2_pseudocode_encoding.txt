**Pseudocode:**

1. Begin by receiving an integer input, `t`, which represents the upper limit of numbers to check.
   
2. Initialize a counter `result` to 0, which will track how many numbers are classified as 'semi-prime.'

3. Start a loop that will iterate from 1 to `t`, inclusive. For each current number `i` in this range:
   - Initialize another counter `count` to 0, which will count how many distinct prime factors `i` has.
   - Set a variable `current_number` to `i`, which will be used to analyze the factors of `i`.

4. Begin a nested loop that will check for potential factors `j`, starting from 2 up to (but not including) `i`:
   - Within this loop, check if `current_number` is divisible by `j`:
     - If it is divisible, increment the `count` by 1 to indicate a new distinct prime factor has been found.
     - Then, repeatedly divide `current_number` by `j` until it can no longer be divided evenly by `j` (this step eliminates the factor from consideration).

5. After exiting the inner loop, check if `count` is exactly 2:
   - If it is, increment `result` by 1, as this means `i` is a semi-prime (a product of two prime factors).

6. After processing all numbers from 1 to `t`, output the value of `result`, which represents the total count of semi-prime numbers found within the specified range.
