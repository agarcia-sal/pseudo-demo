**Purpose:**  
The goal of this algorithm is to count how many numbers between 1 and a given number \( t \) are semiprime numbers. A semiprime is a natural number that is the product of exactly two prime numbers.

**Pseudocode:**

1. **Start**
   
2. **Get the maximum number:**
   - Read an integer value named `maxNumber`.

3. **Initialize counters:**
   - Set `semiprimeCount` to 0.

4. **Loop through each number from 1 to maxNumber:**
   - For each integer `currentNumber` from 1 to `maxNumber` do the following:

     a. **Initialize prime factor count:**
        - Set `primeFactorCount` to 0.
        
     b. **Set temporary number:**
        - Set `temporaryNumber` to `currentNumber`.

     c. **Check for prime factors:**
        - For each integer `potentialFactor` from 2 to `currentNumber - 1` do the following:
        
          i. **If potentialFactor divides temporaryNumber:**
             - Increment `primeFactorCount` by 1.
             
          ii. **Reduce temporaryNumber by dividing it by potentialFactor:**
              - While `temporaryNumber` is divisible by `potentialFactor`, divide `temporaryNumber` by `potentialFactor`.

     d. **Check if the number is a semiprime:**
        - If `primeFactorCount` is equal to 2, then:
          - Increment `semiprimeCount` by 1.

5. **Output the result:**
   - Print the value of `semiprimeCount`.

6. **End**

This pseudocode abstracts the core logic and flow of the original code while ensuring that the high-level operations and structures are clear and understandable. It successfully captures the essence of counting semiprime numbers without getting into specific programming syntax.
