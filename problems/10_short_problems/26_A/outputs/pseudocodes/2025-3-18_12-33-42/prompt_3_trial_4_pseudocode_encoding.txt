Here is the pseudocode representing the logic and flow of the provided code snippet while focusing on clarity and understanding:

```
START

// Read the input value, which represents the upper limit
SET upperLimit TO input as integer

// Initialize a counter for the number of numbers that have exactly two prime factors
SET resultCount TO 0

// Loop through each number from 1 to upperLimit
FOR currentNumber FROM 1 TO upperLimit DO

    // Initialize a counter to track the number of distinct prime factors for the current number
    SET primeFactorCount TO 0
    
    // Initialize a variable to keep the current number for factorization
    SET tempNumber TO currentNumber
    
    // Check for factors starting from 2 up to (currentNumber - 1)
    FOR potentialFactor FROM 2 TO (currentNumber - 1) DO
        
        // If potentialFactor is a divisor of tempNumber
        IF tempNumber MOD potentialFactor EQUALS 0 THEN
            // Increment the count of distinct prime factors
            INCREMENT primeFactorCount
            
            // While tempNumber is divisible by potentialFactor
            WHILE tempNumber MOD potentialFactor EQUALS 0 DO
                // Divide tempNumber by potentialFactor
                SET tempNumber TO tempNumber / potentialFactor
            END WHILE
        END IF
        
    END FOR
    
    // If the current number has exactly two distinct prime factors
    IF primeFactorCount EQUALS 2 THEN
        // Increment the result count
        INCREMENT resultCount
    END IF
    
END FOR

// Output the final count of numbers with exactly two distinct prime factors
PRINT resultCount

END
```

### Explanation of the Pseudocode Structure:

1. **Input Handling:** The pseudocode begins by reading an integer input that specifies the range of numbers to be evaluated.
2. **Initialization:** It sets up a counter for holding the count of numbers with exactly two prime factors.
3. **Outer Loop:** A loop iterates through each number from 1 to the input limit.
4. **Inner Logic:** For each number, it initializes another counter and checks for factors starting from 2.
5. **Factor Counting:** If a factor is found, it is counted, and the number is divided by this factor until it can no longer be divided by it.
6. **Condition Check:** After testing all potential factors, it checks if there were exactly two distinct prime factors.
7. **Output:** Finally, it outputs the count of such numbers.

This structure makes the intentions behind the logic clear and provides a step-by-step view of how the original code operates without being bogged down by specific programming syntax.
