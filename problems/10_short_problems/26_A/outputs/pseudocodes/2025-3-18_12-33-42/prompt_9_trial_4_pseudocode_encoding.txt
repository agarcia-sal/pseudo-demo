**Purpose:** The goal of this algorithm is to count how many numbers between 1 and a given number \( t \) are semiprime. A semiprime is defined as a natural number that is the product of exactly two prime numbers.

---

**Pseudocode:**

1. **Start**: Obtain a number \( t \) from the user. This number represents the upper limit for counting semiprimes.

2. **Initialize**: 
   - Set a variable `semiprime_count` to track the number of semiprime numbers found. 

3. **Loop through each number** from 1 to \( t \):
   - For each number \( current_number \):
     - Set a variable `prime_factor_count` to 0 for counting unique prime factors of the current number.
     - Set a variable `temp_number` equal to the current number.

     4. **Loop through potential factors** starting from 2 up to one less than the current number:
        - For each potential factor \( factor \):
          - **Check if it is a divisor** of `temp_number`:
            - If it is, increment `prime_factor_count` by 1.
            - Continuously divide `temp_number` by \( factor \) as long as `temp_number` is divisible by \( factor \).

     5. **Check for semiprimality**: 
        - If `prime_factor_count` is equal to 2 (indicating that there are exactly two prime factors), increment `semiprime_count` by 1.

6. **End of first loop**: After checking all numbers up to \( t \), proceed to the next step.

7. **Output**: Print the value of `semiprime_count`, which represents the total number of semiprime numbers found.

---

**End of Pseudocode** 

This pseudocode presents a logical flow that is accessible and captures the core intent behind the code: identifying and counting semiprime numbers within a specified range.
