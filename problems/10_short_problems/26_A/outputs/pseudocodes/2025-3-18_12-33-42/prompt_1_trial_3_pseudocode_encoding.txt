**Pseudocode: Count Semi-Prime Numbers**

1. **Input:** Read the integer value `t` which represents the upper limit for checking numbers.
2. **Initialize:** Set a variable `resultCount` to 0 which will keep track of the number of semi-prime numbers.

3. **Loop:** For each integer `currentNumber` from 1 to `t` (inclusive):
    1. **Initialize:** Set a variable `factorCount` to 0 which keeps track of the number of unique prime factors of `currentNumber`.
    2. **Assign:** Set a temporary variable `tempNumber` to `currentNumber` for factorization purposes.
    
    3. **Inner Loop:** For each integer `potentialFactor` starting from 2 up to `currentNumber - 1`:
        1. **Check Divisibility:** If `tempNumber` is divisible by `potentialFactor`:
            1. **Increment Count:** Increase `factorCount` by 1 because we found a prime factor.
            2. **Factor Out:** While `tempNumber` is still divisible by `potentialFactor`, divide `tempNumber` by `potentialFactor` continuously to remove all occurrences of this factor.
    
    4. **Check Semi-Prime Condition:** If `factorCount` is exactly 2 (indicating that `currentNumber` has exactly two prime factors):
        1. **Update Result:** Increase `resultCount` by 1.

4. **Output:** Print `resultCount`, which represents the total count of semi-prime numbers up to `t`. 

**End of Pseudocode**
