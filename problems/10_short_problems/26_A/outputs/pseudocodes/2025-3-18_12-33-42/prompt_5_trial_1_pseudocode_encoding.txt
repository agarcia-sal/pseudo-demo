### Purpose Summary:
The main goal of the code is to count how many numbers between 1 and a given number (inclusive) are classified as "semiprime" numbers, where a semiprime is defined as a number that has exactly two distinct prime factors.

### Pseudocode:

```
1. Start
2. Read the integer value 't' which represents the upper limit of the range.
3. Initialize a variable 'semiprimeCount' to zero. This will keep track of the number of semiprime numbers found.

4. For each number 'currentNumber' from 1 to 't' (inclusive): 
    a. Initialize 'distinctPrimeCount' to zero. This will count how many distinct prime factors 'currentNumber' has.
    b. Set 'tempNumber' to 'currentNumber'. 

    c. For each potentialFactor from 2 to one less than 'currentNumber':
        i. Check if 'tempNumber' is divisible by 'potentialFactor':
            - If it is divisible:
                A. Increment 'distinctPrimeCount' by 1. (We've found a new prime factor.)
                B. While 'tempNumber' is divisible by 'potentialFactor':
                    - Divide 'tempNumber' by 'potentialFactor'. (Remove all occurrences of this factor from 'tempNumber'.)

    d. If 'distinctPrimeCount' equals 2:
        - Increment 'semiprimeCount' by 1. (We found a semiprime number.)

5. After checking all numbers from 1 to 't', print 'semiprimeCount'.  (This is the total count of semiprimes found.)
6. End
```

### Comments for Clarity:
- The outer loop iterates through all numbers from 1 to 't', which is the range we want to explore for semiprime numbers.
- The inner loop checks for prime factors of the current number and counts how many distinct prime factors it has.
- We check if the count of distinct prime factors is exactly two to determine if the number is semiprime.

### Example Structure:
This pseudocode follows a logical flow that separates input handling, processing, and output generation, making it easy for readers to grasp the overall functionality and sequence of operations. Each key action is broken down, making the complexity manageable.
