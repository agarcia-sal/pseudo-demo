**Pseudocode:**

1. Read an integer value from the user and store it as `totalCount`.
2. Initialize a counter called `primeCount` to zero. This will keep track of the number of prime numbers found.

3. For each integer `currentNumber` starting from 1 up to and including `totalCount`, do the following:
   - Initialize a counter called `divisorCount` to zero. This will count the number of distinct divisors of `currentNumber`.
   - Set a temporary variable `temporaryNumber` equal to `currentNumber`.

   4. For each integer `potentialDivisor` starting from 2 up to but not including `currentNumber`, check if `temporaryNumber` can be divided evenly by `potentialDivisor`:
      - If `temporaryNumber` is evenly divisible by `potentialDivisor`:
        - Increment `divisorCount` by one, indicating that a new divisor has been found.
        - While `temporaryNumber` can continue to be divided by `potentialDivisor` without leaving a remainder, divide `temporaryNumber` by `potentialDivisor`. This reduces `temporaryNumber` significantly, potentially to 1, eliminating all occurrences of that prime divisor.
   
   5. After checking all potential divisors for `currentNumber`, determine if exactly two distinct divisors were found:
      - If `divisorCount` equals 2, increment `primeCount` by one. This indicates that `currentNumber` is a prime number.

6. After completing the loop for all numbers up to `totalCount`, output the final value of `primeCount`, which represents the total number of prime numbers found in that range.
