**Pseudocode:**

1. **Define a function to count prime numbers:**
   Function CountPrimes
      Input: Integer t (the upper limit for checking prime numbers)
      Output: Integer res (the count of prime numbers)

2. **Initialize the result counter:**
   Set res to 0

3. **Iterate from 1 to t (inclusive):**
   For each integer i from 1 to t do
      Set cnt to 0       // Counter for factors of i
      Set num to i       // Temporary variable for factorization

4. **Find factors of i:**
   For each integer j from 2 to (i-1) do
         // Check if j is a factor of num
         If num mod j equals 0 then
            Increment cnt by 1 // Increment the factor count
            While num mod j equals 0 do
               Divide num by j    // Factor out j from num

5. **Check if i is prime:**
   If cnt equals 2 then
      Increment res by 1      // A prime number has exactly two distinct factors: 1 and itself

6. **Output the result:**
   Print res 

**Assumptions:**
- t is a positive integer input from the user.
- The loop counts only numbers greater than 1 as potential primes since 1 is not a prime number. 
- The pseudocode uses "mod" to denote the modulus operation. 

This structured pseudocode captures the essence of the original code while ensuring clarity and proper logical flow.
