Here is the high-level pseudocode based on the provided code:

```
FUNCTION countSemiPrimes(limit)
    INITIALIZE semiPrimeCount AS 0
    FOR each number FROM 1 TO limit DO
        INITIALIZE divisorCount AS 0
        SET currentNumber AS number
        FOR each divisor FROM 2 TO (number - 1) DO
            IF currentNumber is divisible by divisor THEN
                INCREMENT divisorCount BY 1
                WHILE currentNumber is divisible by divisor DO
                    Divide currentNumber by divisor
                END WHILE
            END IF
        END FOR
        IF divisorCount is equal to 2 THEN
            INCREMENT semiPrimeCount by 1
        END IF
    END FOR
    RETURN semiPrimeCount
END FUNCTION

// Main execution
SET t AS integer input from the user
SET result AS countSemiPrimes(t)
PRINT result
```

### Explanation of the Pseudocode:

1. **Function Definition:** The main logic is encapsulated in a function `countSemiPrimes` that takes an integer `limit` as input.

2. **Initialization:** We initialize a counter for semi-primes (`semiPrimeCount`) to zero. 

3. **Outer Loop:** A loop iterates through each integer from 1 up to the specified limit (`t`).

4. **Divisor Count:** For each number, we reset a counter (`divisorCount`) that counts how many distinct prime factors the number has. The variable `currentNumber` holds the value of the current number.

5. **Inner Loop:** An inner loop checks each number (as potential divisors) starting from 2 up to the number minus 1. It checks if `currentNumber` is divisible by the current divisor.

6. **Divisor Processing:** If a divisor divides the number, we increase the `divisorCount`. A nested loop divides `currentNumber` by the divisor until it is no longer divisible by that divisor.

7. **Semi-Prime Check:** After processing all divisors, we check if `divisorCount` equals 2 (indicating the number is a semi-prime). If true, we increment our semi-prime counter.

8. **Final Result:** After checking all numbers up to the limit, the function returns the count of semi-primes.

9. **Input and Output:** The main execution handles user input for `t`, calls the function to get the result, and prints it.

This pseudocode effectively outlines the logic and flow of the original code in a clear and understandable manner.
