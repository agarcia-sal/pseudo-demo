**Pseudocode: Count Special Numbers**

1. **Input:**
   - Read an integer `t` that indicates the upper limit.

2. **Initialize:**
   - Set `resultCount` to 0 to store the count of special numbers.

3. **Process Each Number:**
   - For each integer `currentNumber` from 1 to `t`, do the following:
     - Initialize `factorCount` to 0 to count the distinct prime factors of `currentNumber`.
     - Set `tempNumber` to `currentNumber`.

4. **Find Prime Factors:**
   - For each integer `potentialFactor` from 2 to `currentNumber - 1`, do the following:
     - Check if `tempNumber` is divisible by `potentialFactor`:
       - If it is divisible:
         - Increment `factorCount` by 1 (indicating a new prime factor found).
         - Continue dividing `tempNumber` by `potentialFactor` until it is no longer divisible by `potentialFactor`.

5. **Check for Special Condition:**
   - After checking all potential factors:
     - If `factorCount` is equal to 2 (indicating there are exactly two distinct prime factors), increment `resultCount` by 1.

6. **Output:**
   - Print the value of `resultCount`, which represents the total count of special numbers found within the range.

**End of Pseudocode**
