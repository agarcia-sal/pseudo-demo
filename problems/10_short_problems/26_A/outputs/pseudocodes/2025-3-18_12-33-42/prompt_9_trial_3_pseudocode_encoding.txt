**Purpose:** The goal of the algorithm is to count how many numbers from 1 to a given number `t` are semiprime, which is defined as a number that has exactly two distinct prime factors.

**Pseudocode:**

1. **Receive Input:**
   - Read an integer value for `t`, which represents the upper limit of the range to analyze (from 1 to `t`).

2. **Initialize Result:**
   - Set a variable `semiprime_count` to 0, which will hold the total count of semiprime numbers.

3. **Iterate Through Numbers:**
   - For each integer `current_number` starting from 1 up to `t`, do the following:
     1. Set a variable `factor_count` to 0, which will count how many distinct prime factors the `current_number` has.
     2. Create a variable `temp_number` and assign it the value of `current_number`.

     3. **Check for Prime Factors:**
        - For each integer `potential_factor` starting from 2 up to `current_number - 1`, perform the following:
          1. If `temp_number` is divisible by `potential_factor`:
             - Increment `factor_count` by 1 (indicating a new distinct prime factor has been found).
             - While `temp_number` is still divisible by `potential_factor`:
               - Divide `temp_number` by `potential_factor` (to remove this factor fully).

     4. **Determine Semiprime:**
        - If `factor_count` equals 2 (indicating exactly two distinct prime factors):
          - Increment `semiprime_count` by 1.

4. **Output Result:**
   - After evaluating all numbers from 1 to `t`, display the value of `semiprime_count` as the final count of semiprime numbers.

**End of Pseudocode**
