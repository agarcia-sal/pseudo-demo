``` 
FUNCTION countDistinctPrimeFactors(inputTime)
    // Input: Integer inputTime representing the upper limit to count numbers
    INITIALIZE totalCount to 0
    
    FOR currentNumber FROM 1 TO inputTime DO
        INITIALIZE primeFactorCount to 0
        SET currentValue to currentNumber
        
        // Check for factors starting from 2
        FOR factor FROM 2 TO (currentNumber - 1) DO
            // If factor is a divisor of currentValue
            IF (currentValue MOD factor EQUALS 0) THEN
                // Increase the count of distinct prime factors
                INCREMENT primeFactorCount by 1
                
                // Divide currentValue by factor until it no longer divides evenly
                WHILE (currentValue MOD factor EQUALS 0) DO
                    SET currentValue to currentValue / factor
                END WHILE
            END IF
        END FOR
        
        // Check if the number has exactly two distinct prime factors
        IF (primeFactorCount EQUALS 2) THEN
            INCREMENT totalCount by 1
        END IF
    END FOR
    
    // Output: Return the count of numbers with exactly two distinct prime factors
    RETURN totalCount
END FUNCTION

// Main execution
SET t to user input as integer
PRINT countDistinctPrimeFactors(t)
``` 

### Explanation of the Pseudocode:
1. **Overall Goal:** The code counts numbers from 1 to a specified number (inputTime) that have exactly two distinct prime factors.
  
2. **Input and Output:** The function takes an integer input time and returns the total count of numbers with exactly two distinct prime factors.

3. **Variables:**
   - `totalCount` keeps track of how many numbers meet the criteria.
   - `primeFactorCount` counts the distinct prime factors for each number being evaluated.
   - `currentValue` holds the current number being processed to allow factorization.

4. **Control Structures:**
   - The outer loop iterates through each number up to the specified input.
   - The inner loop checks for factors from 2 up to one less than the current number.
   - A nested loop (while loop) continues to divide the number by the factor until it is no longer divisible by that factor.

5. **Decision Making:** If a number is found to have exactly two distinct prime factors (as tracked by the primeFactorCount), the total count is incremented.

6. **Natural Language:** The pseudocode is simplified to ensure it's understandable without prior programming knowledge, clearly illustrating each step of the logic.
