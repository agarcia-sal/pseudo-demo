Hereâ€™s the pseudocode that reflects the logic of the provided code, translated into clear and understandable terms:

```
BEGIN

    // Read a whole number from input that indicates the upper limit for checking numbers
    SET upperLimit TO INPUT AS INTEGER

    // Initialize a variable to count the number of semi-prime numbers found
    SET semiPrimeCount TO 0

    // Loop through all numbers from 1 to upperLimit, inclusive
    FOR each number currentNumber FROM 1 TO upperLimit DO
        
        // Initialize a counter for the number of prime factors found
        SET primeFactorCount TO 0
        
        // Create a variable to work with the current number
        SET workingNumber TO currentNumber

        // Check potential divisors starting from 2 up to just below currentNumber
        FOR each divisor FROM 2 TO currentNumber - 1 DO

            // If the workingNumber is divisible by the current divisor
            IF workingNumber MOD divisor EQUALS 0 THEN
                
                // Increment the prime factor count
                INCREMENT primeFactorCount
                
                // Continue dividing workingNumber by the divisor while it is divisible
                WHILE workingNumber MOD divisor EQUALS 0 DO
                    SET workingNumber TO workingNumber DIVIDED BY divisor
                END WHILE
            END IF
        END FOR

        // If exactly two distinct prime factors were found, increment the semi-prime count
        IF primeFactorCount EQUALS 2 THEN
            INCREMENT semiPrimeCount
        END IF
    END FOR

    // Output the total count of semi-prime numbers found
    OUTPUT semiPrimeCount

END
```

### Summary of the Pseudocode:
1. The program reads an upper limit value.
2. It initializes a count for semi-prime numbers.
3. It iterates through each number to check for the number of distinct prime factors.
4. If exactly two distinct prime factors are found for a number, it counts that number as a semi-prime.
5. Finally, it prints out the total count of semi-primes found up to the specified limit.

This pseudocode captures the essence of the underlying algorithm without getting bogged down in programming language specifics.
