**Pseudocode:**

1. Read an integer value `t` from user input, which represents the upper limit of numbers to check.

2. Initialize a variable `resultCount` to 0, which will hold the count of numbers that have exactly two distinct prime factors.

3. For each integer `currentNumber` from 1 to `t`:
   a. Initialize a variable `distinctPrimeCount` to 0 to track the count of distinct prime factors of `currentNumber`.
   b. Set a variable `tempNumber` to `currentNumber`, which will be modified in the process.

4. For each integer `potentialFactor` starting from 2 up to `currentNumber - 1`:
   a. If `tempNumber` is divisible by `potentialFactor` (i.e., `tempNumber` modulo `potentialFactor` equals 0):
      i. Increment `distinctPrimeCount` by 1, indicating that we found a new distinct prime factor.
      ii. While `tempNumber` is divisible by `potentialFactor`, continue dividing `tempNumber` by `potentialFactor` until it no longer is. This eliminates all occurrences of `potentialFactor` from `tempNumber`.

5. After checking all possible factors:
   a. If `distinctPrimeCount` equals 2 (indicating the number has exactly two distinct prime factors), increment `resultCount` by 1.

6. Once all numbers from 1 to `t` have been checked, output the value of `resultCount`, which represents the total count of numbers within the range that have exactly two distinct prime factors.
