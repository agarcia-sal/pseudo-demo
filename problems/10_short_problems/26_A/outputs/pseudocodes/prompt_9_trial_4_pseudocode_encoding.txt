**Purpose:** The goal of this algorithm is to count how many numbers from 1 to a given integer (inclusive) have exactly two distinct prime factors.

**Pseudocode:**

1. **Start Program**
   
2. **Get Input:**
   - Read an integer value called `totalNumbers` from the user.

3. **Initialize Result:**
   - Create a variable `countOfNumbersWithTwoPrimeFactors` and set it to 0.

4. **Loop Through Each Number:**
   - For each number `currentNumber` starting from 1 to `totalNumbers` (inclusive):
   
     1. **Initialize Prime Factor Count:**
        - Create a variable `distinctPrimeFactorCount` and set it to 0.
        - Create a variable `number` and set it to `currentNumber`.
        
     2. **Check for Prime Factors:**
        - For each potential factor `possibleFactor` starting from 2 up to `currentNumber - 1`:
          
          1. **If `number` is divisible by `possibleFactor`:**
             - Increment `distinctPrimeFactorCount` by 1.
             
             2. **While `number` is divisible by `possibleFactor`:**
                - Divide `number` by `possibleFactor`. (This reduces the number to eliminate that factor.)

     3. **Evaluate Count of Distinct Prime Factors:**
        - If `distinctPrimeFactorCount` equals 2, then:
          - Increment `countOfNumbersWithTwoPrimeFactors` by 1.

5. **Output Result:**
   - Print the value of `countOfNumbersWithTwoPrimeFactors`.

6. **End Program**
