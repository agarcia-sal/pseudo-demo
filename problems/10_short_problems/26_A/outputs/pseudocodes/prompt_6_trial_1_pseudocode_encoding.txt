Here's the pseudocode that accurately represents the logic of the provided code:

```
START

// Read an integer input t
SET inputValue TO read an integer from user input

// Initialize a variable to store the count of numbers with exactly two distinct prime factors
SET resultCount TO 0

// Loop through all integers from 1 to t (inclusive)
FOR each integer currentNumber FROM 1 TO inputValue DO
    // Initialize a counter for distinct prime factors
    SET distinctPrimeCount TO 0
    SET remainingValue TO currentNumber

    // Check for potential prime factors from 2 up to currentNumber-1
    FOR each integer potentialPrimeFactor FROM 2 TO currentNumber - 1 DO
        // If potentialPrimeFactor is a divisor of remainingValue
        IF remainingValue MOD potentialPrimeFactor EQUALS 0 THEN
            // We found a valid prime factor, increment the counter
            INCREMENT distinctPrimeCount BY 1

            // Divide remainingValue by potentialPrimeFactor until it no longer divides evenly
            WHILE remainingValue MOD potentialPrimeFactor EQUALS 0 DO
                SET remainingValue TO remainingValue DIVIDED BY potentialPrimeFactor
            END WHILE
        END IF
    END FOR

    // Check if we found exactly two distinct prime factors
    IF distinctPrimeCount EQUALS 2 THEN
        // If yes, increment the result counter
        INCREMENT resultCount BY 1
    END IF
END FOR

// Output the total count of numbers with exactly two distinct prime factors
PRINT resultCount

END
```

### Explanation of the Pseudocode:

1. **Input Handling**: The pseudocode begins by reading an integer input from the user, which signifies the upper limit for checking the numbers.

2. **Result Initialization**: A counter variable is initialized to keep track of how many numbers have exactly two distinct prime factors.

3. **Outer Loop**: It iterates through every integer from 1 to the user-provided input.

4. **Inner Loop for Prime Factorization**: For each integer, it attempts to find its prime factors by checking divisibility with integers starting from 2 up to the current number minus one.

5. **Divisibility Check**: If a number is divisible by a potential prime factor, it increments the distinct prime factor count and divides the original number by this factor until it can no longer be divided evenly.

6. **Count Check**: After factoring, if exactly two distinct prime factors are found, it updates the result count.

7. **Output**: Finally, the total count of such numbers is printed.

This structured approach ensures that the pseudocode is clear and easy to understand, aligning closely with the original code's logic without getting into the specifics of programming syntax.
