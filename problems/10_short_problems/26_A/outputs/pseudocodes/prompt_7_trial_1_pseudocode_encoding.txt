Here is the high-level pseudocode that translates the provided code, adhering to the instructions given:

```
FUNCTION countSemiPrimeNumbers(t)
    // Initialize the result variable to hold the total count of semi-prime numbers
    INITIALIZE semiPrimeCount TO 0

    // Iterate through each number from 1 to t (inclusive)
    FOR each number i FROM 1 TO t DO
        // Initialize a counter for the number of prime factors found
        INITIALIZE primeFactorCount TO 0
        INITIALIZE currentNumber TO i

        // Check for potential prime factors starting from 2 up to i-1
        FOR each potentialFactor j FROM 2 TO i-1 DO
            // If j is a divisor of currentNumber
            IF currentNumber MOD j EQUALS 0 THEN
                // Increment the prime factor count
                INCREMENT primeFactorCount BY 1

                // Divide currentNumber by j until it no longer divides evenly
                WHILE currentNumber MOD j EQUALS 0 DO
                    SET currentNumber TO currentNumber DIVIDED BY j
                END WHILE
            END IF
        END FOR

        // Check if the number has exactly two distinct prime factors
        IF primeFactorCount EQUALS 2 THEN
            // Increment the semi-prime count
            INCREMENT semiPrimeCount BY 1
        END IF
    END FOR

    // Output the total count of semi-prime numbers found
    PRINT semiPrimeCount
END FUNCTION

// Read an integer input for t
INITIALIZE inputNumber AS INTEGER
SET inputNumber TO READ integer input

// Call the function to count semi-prime numbers up to the input number
CALL countSemiPrimeNumbers(inputNumber)
```

### Explanation of the Pseudocode:
- **Purpose:** The main purpose of this function is to count the number of semi-prime numbers up to a given integer `t`. A semi-prime number, in this context, is defined as a number that has exactly two distinct prime factors.
  
- **Flow of Execution:** The code processes each integer from 1 to `t`, counts the distinct prime factors for each integer, and then checks if there are exactly two; if so, it counts that integer as a semi-prime.

- **Variables:** Meaningful variable names such as `semiPrimeCount`, `primeFactorCount`, and `currentNumber` are used to enhance readability.

- **Control Structures:** The pseudocode clearly lays out loops and conditions, allowing readers to follow the logic without needing to understand specific programming language syntax.

This pseudocode aims to provide a clear understanding of the algorithm and its structure while being accessible to readers with varying levels of programming expertise.
