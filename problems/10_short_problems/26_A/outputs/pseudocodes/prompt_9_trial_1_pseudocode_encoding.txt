**Purpose:** The goal of this algorithm is to count how many numbers between 1 and a specified limit are considered "semiprime." A semiprime is defined as a product of exactly two prime numbers.

**Pseudocode:**

1. **Receive Input:**
   - Set a variable `limit` to the value received from the user as an integer.

2. **Initialize Result Counter:**
   - Set a variable `semiprimeCount` to 0, which will hold the total number of semiprimes found.

3. **Iterate Over Each Number:**
   - For each number `currentNumber` starting from 1 up to `limit` (inclusive):
     - Set a variable `factorCount` to 0, which will count the unique prime factors of `currentNumber`.
     - Set a variable `tempNumber` to `currentNumber` for factorization purposes.

4. **Check for Prime Factors:**
   - For each potential factor `potentialFactor` starting from 2 up to `currentNumber - 1`:
     - If `tempNumber` is divisible by `potentialFactor`:
       - Increase `factorCount` by 1.
       - While `tempNumber` is still divisible by `potentialFactor`:
         - Divide `tempNumber` by `potentialFactor` to completely factor it out.

5. **Check for Semiprime Condition:**
   - After checking all factors, if `factorCount` equals 2, it means `currentNumber` has exactly two prime factors:
     - Increase `semiprimeCount` by 1.

6. **Output the Result:**
   - After checking all numbers, print the value of `semiprimeCount`, which represents the total count of semiprimes found.

**Summary of Flow:**
- Input a limit for the range.
- Loop through each number from 1 to that limit.
- Determine and count the unique prime factors for each number.
- If exactly two unique prime factors are found, count that number as a semiprime.
- Finally, display the total count of semiprimes found in that range.
