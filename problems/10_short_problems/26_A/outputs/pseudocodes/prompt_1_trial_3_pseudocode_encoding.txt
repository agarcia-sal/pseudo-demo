**Pseudocode:**

1. **Input the number of test cases**
   - Set `numberOfTestCases` to read an integer value from user input.

2. **Initialize the result variable**
   - Set `countOfSpecialNumbers` to 0.

3. **Loop through each number from 1 to numberOfTestCases**
   - For each `currentNumber` in the range from 1 to `numberOfTestCases` inclusive:
     - Set `divisorCount` to 0.
     - Set `tempNumber` to `currentNumber`.

     4. **Determine the factors of currentNumber**
        - For each `potentialDivisor` starting from 2 up to `currentNumber` but not including it:
            - If `tempNumber` is evenly divisible by `potentialDivisor`:
                - Increment `divisorCount` by 1.
                - While `tempNumber` is still evenly divisible by `potentialDivisor`:
                    - Divide `tempNumber` by `potentialDivisor`.

     5. **Check if currentNumber has exactly two unique prime factors**
        - If `divisorCount` is equal to 2:
            - Increment `countOfSpecialNumbers` by 1.

6. **Output the result**
   - Print the value of `countOfSpecialNumbers`. 

This pseudocode clearly outlines the process of counting how many numbers from 1 to a given limit have exactly two unique prime factors.
