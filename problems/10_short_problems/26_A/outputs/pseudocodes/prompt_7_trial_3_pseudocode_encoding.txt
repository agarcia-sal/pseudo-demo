```plaintext
FUNCTION countSemiPrimeNumbers(limit)
    INITIALIZE result to 0  // This will hold the count of semi-prime numbers

    FOR each number from 1 to limit DO
        INITIALIZE divisorCount to 0  // To count the number of distinct prime factors
        SET currentNumber to the current number in the loop

        // Check for prime factors by iterating from 2 to the current number - 1
        FOR each potentialFactor from 2 to currentNumber - 1 DO
            IF currentNumber is divisible by potentialFactor THEN
                INCREMENT divisorCount by 1  // Found a prime factor
                // Reduce current number by dividing it by potentialFactor until it no longer divides evenly
                WHILE currentNumber is divisible by potentialFactor DO
                    DIVIDE currentNumber by potentialFactor
                END WHILE
            END IF
        END FOR

        // A semi-prime number has exactly two distinct prime factors
        IF divisorCount equals 2 THEN
            INCREMENT result by 1  // Found a semi-prime number
        END IF
    END FOR

    RETURN result  // Return the total count of semi-prime numbers
END FUNCTION

// Main execution
READ limit from user input
CALL countSemiPrimeNumbers(limit) and print the result
```

### Explanation:
1. **Purpose**: The pseudocode defines a function that counts the number of semi-prime numbers up to a specified limit. A semi-prime is defined as a product of exactly two distinct prime factors.

2. **Variables**: Meaningful variable names replace less descriptive ones, enhancing readability.

3. **Control Structures**: Loop and conditional constructs are represented clearly to illustrate the flow of logic.

4. **Input/Output**: The pseudocode specifies reading a limit from user input and outputs the count of semi-primes within that range.

5. **High-Level Abstraction**: The low-level operations (like integer division) are abstracted away while still maintaining the logic of counting distinct prime factors.

This structured approach ensures clarity and effectively communicates the logic of the original code.
