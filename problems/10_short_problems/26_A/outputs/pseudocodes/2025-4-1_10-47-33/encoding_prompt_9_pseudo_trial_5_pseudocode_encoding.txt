**Purpose:** The goal of this algorithm is to count how many numbers from 1 to a given number are semiprime, where a semiprime is defined as a natural number that is the product of exactly two prime numbers.

**Pseudocode:**

1. **Start by Receiving Input:**
   - Get a number representing the upper limit (t) from the user.

2. **Initialize a Counter for Semiprimes:**
   - Set a variable `semiprimeCount` to 0 to keep track of the number of semiprime numbers.

3. **Loop Through Each Number from 1 to t:**
   - For each number (`currentNumber`) starting from 1 to t:
     - Initialize a counter (`primeFactorCount`) to 0, which keeps track of how many distinct prime factors the current number has.
     - Set `dividedNumber` to the value of `currentNumber` (this variable will be divided by its prime factors).

4. **Identify Prime Factors for the Current Number:**
   - For each potential factor (`possibleFactor`) starting from 2 up to one less than the `currentNumber`:
     - If `dividedNumber` is divisible by `possibleFactor`:
       - Increase `primeFactorCount` by 1.
       - While `dividedNumber` is still divisible by `possibleFactor`, divide `dividedNumber` by `possibleFactor`.
       
5. **Check for Semiprime Condition:**
   - If `primeFactorCount` equals 2, increment the `semiprimeCount` by 1.

6. **Output the Result:**
   - After checking all numbers up to t, print the value of `semiprimeCount`, which represents the total count of semiprime numbers.

**Summary:**
This pseudocode outlines a process for determining how many semiprime numbers exist within a specified range, using factorization and a counting strategy to evaluate each integer systematically.
