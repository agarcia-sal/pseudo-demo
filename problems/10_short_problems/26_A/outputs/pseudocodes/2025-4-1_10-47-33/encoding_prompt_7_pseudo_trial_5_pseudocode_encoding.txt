```
FUNCTION countSemiPrimes(inputNumber)
    INITIALIZE resultCounter to 0
    FOR each number currentNumber from 1 to inputNumber DO
        INITIALIZE divisorCount to 0
        SET tempNumber to currentNumber
        
        FOR each potentialDivisor from 2 to currentNumber - 1 DO
            IF tempNumber is divisible by potentialDivisor THEN
                INCREMENT divisorCount by 1
                
                WHILE tempNumber is divisible by potentialDivisor DO
                    DIVIDE tempNumber by potentialDivisor
                END WHILE
            END IF
        END FOR
        
        IF divisorCount is equal to 2 THEN
            INCREMENT resultCounter by 1
        END IF
    END FOR
    
    RETURN resultCounter
END FUNCTION

// Example usage
SET t to the user input as an integer
PRINT countSemiPrimes(t)
```

### Explanation of the Pseudocode:
1. **Function Defining**: It defines a function named `countSemiPrimes` that receives a single parameter (`inputNumber`).
2. **Initialization**: A counter (`resultCounter`) is initialized to keep track of the number of semi-prime numbers found.
3. **Outer Loop**: The function iterates over each whole number from 1 to the specified `inputNumber`.
4. **Variable Initialization**: For each `currentNumber`, a counter (`divisorCount`) is initialized to zero, and a mutable version of the current number (`tempNumber`) is created for factorization.
5. **Inner Loop**: The inner loop checks for potential divisors starting from 2 up to just before `currentNumber`.
6. **Divisor Check**: It checks if `tempNumber` can be divided evenly by `potentialDivisor`:
    - If it can, it increments the `divisorCount` and enters a loop to continuously divide `tempNumber` by `potentialDivisor` until it cannot be divided any longer.
7. **Count Check**: After checking all potential divisors for `currentNumber`, if `divisorCount` equals 2, it indicates that `currentNumber` is a semi-prime and increments the `resultCounter`.
8. **Return Statement**: Finally, it returns the `resultCounter`, which holds the number of semi-prime numbers found up to `inputNumber`.
9. **Example section**: An example usage of the function is provided, which reads an integer input, calls the function, and prints the result.
