```plaintext
// Read the total number of test cases
READ totalTestCases

// Initialize the result counter for prime numbers
SET primeCount TO 0

// Loop through each number from 1 to totalTestCases
FOR each currentNumber FROM 1 TO totalTestCases DO
    
    // Initialize a counter for the number of distinct prime factors
    SET distinctPrimeFactors TO 0
    
    // Copy the current number to a variable for factorization
    SET factorableNumber TO currentNumber
    
    // Check for factors starting from 2 up to the current number
    FOR each potentialFactor FROM 2 TO currentNumber - 1 DO
        
        // Check if potentialFactor is a divisor of factorableNumber
        IF (factorableNumber MOD potentialFactor EQUALS 0) THEN
            
            // Increment the distinct prime factors counter
            INCREMENT distinctPrimeFactors
            
            // Divide factorableNumber by potentialFactor until it no longer divides evenly
            WHILE (factorableNumber MOD potentialFactor EQUALS 0) DO
                SET factorableNumber TO factorableNumber DIVIDED BY potentialFactor
            
            // End of inner while loop
        END IF
        
    // End of inner for loop
    
    // Check if the number has exactly two distinct prime factors
    IF (distinctPrimeFactors EQUALS 2) THEN
        // Increment the primeCount for each valid currentNumber
        INCREMENT primeCount
    END IF
    
// End of outer for loop

// Display the total count of numbers with exactly two distinct prime factors
PRINT primeCount
```
