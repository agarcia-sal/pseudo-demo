**Pseudocode: Count the Number of Semi-Prime Numbers**

1. **Start**
2. **Input:** Read an integer value `t` (representing the upper limit)
3. Initialize `result` to 0 (to keep track of the count of semi-prime numbers)
4. **For** each integer `i` from 1 to `t` (inclusive):
    1. Initialize `countDivisors` to 0 (to count distinct prime factors of `i`)
    2. Set `currentNumber` to `i` (to manipulate during factorization)
    3. **For** each integer `j` from 2 to (i-1):
        1. **If** `currentNumber` is divisible by `j`:
            1. Increment `countDivisors` by 1 (found a new prime factor)
            2. **While** `currentNumber` is divisible by `j`:
                1. Divide `currentNumber` by `j` (continuing to factor out `j`)
    4. **If** `countDivisors` is equal to 2:
        1. Increment `result` by 1 (i is a semi-prime number)
5. **Output:** Print `result` (the total count of semi-prime numbers found)

6. **End**
