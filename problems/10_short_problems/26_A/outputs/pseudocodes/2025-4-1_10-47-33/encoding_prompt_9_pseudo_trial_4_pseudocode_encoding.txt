**Purpose:** The goal of this algorithm is to count how many numbers up to a given limit are products of exactly two distinct prime numbers.

**Pseudocode:**

1. **Start Program**
  
2. **Receive Input**
   - Prompt the user to enter a positive integer `limit`.
   - Store the input value as an integer.

3. **Initialize Count**
   - Set variable `countOfProducts` to 0, which will hold the total number of valid products found.

4. **Iterate Through Numbers**
   - For each number `currentNumber` starting from 1 through `limit` (inclusive):
     - Initialize a variable `distinctPrimeFactors` to 0 to keep track of distinct prime factors for the current number.
     - Set `temporaryNumber` to the value of `currentNumber`.

     5. **Check for Prime Factors**
        - For each potential divisor `potentialPrime` starting from 2 to `currentNumber - 1`:
          - If `temporaryNumber` is divisible by `potentialPrime`:
            - Increment `distinctPrimeFactors` by 1.
            - While `temporaryNumber` is divisible by `potentialPrime`:
              - Divide `temporaryNumber` by `potentialPrime` to remove that factor.

     6. **Check the Condition**
        - If `distinctPrimeFactors` is equal to 2:
          - Increment `countOfProducts` by 1.

7. **Output Result**
   - Print the value of `countOfProducts` which represents how many products of exactly two distinct prime numbers were found up to `limit`.

8. **End Program** 

By following this pseudocode, the overall logic and flow of counting numbers that are products of two distinct prime factors are clear and easy to understand without programming jargon.
