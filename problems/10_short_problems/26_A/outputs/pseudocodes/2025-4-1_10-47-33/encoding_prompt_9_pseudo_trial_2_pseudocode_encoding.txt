**Purpose:** The goal of this algorithm is to count and output the number of prime numbers up to a specified integer.

**Pseudocode:**

1. **Get User Input:**
   - Ask the user to enter a positive integer `t`.
   - Store this value in the variable `maximumNumber`.

2. **Initialize Count of Prime Numbers:**
   - Set `primeCount` to 0, which will hold the total number of prime numbers found.

3. **Loop Through Each Number:**
   - For each integer `currentNumber` from 1 to `maximumNumber`:
     - Initialize a variable `factorCount` to 0.
     - Set `remainingNumber` equal to `currentNumber`.

4. **Check for Factors:**
   - For each integer `potentialFactor` from 2 to one less than `currentNumber`:
     - If `remainingNumber` is divisible by `potentialFactor`:
       - Increase `factorCount` by 1.
       - While `remainingNumber` is still divisible by `potentialFactor`:
         - Divide `remainingNumber` by `potentialFactor` (this removes the factor).

5. **Identify Prime Number:**
   - If `factorCount` equals 2:
     - Increase `primeCount` by 1 (indicating that `currentNumber` is a prime number).

6. **Output the Result:**
   - After checking all numbers, display `primeCount`, which indicates the total number of prime numbers up to `maximumNumber`.

**Summary of Logic Flow:**
- Inputs a maximum number.
- Initializes a count variable for primes.
- Iterates through each number, checks for prime status by counting divisors.
- Counts primes and prints the final count.
