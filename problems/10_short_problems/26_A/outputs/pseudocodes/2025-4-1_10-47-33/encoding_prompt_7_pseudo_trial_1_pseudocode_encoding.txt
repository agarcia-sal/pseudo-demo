```
FUNCTION countSemiPrimes(limit)
    INITIALIZE semiPrimeCount to 0  // Counter for semi-primes
    
    FOR each number from 1 to limit DO
        INITIALIZE divisorCount to 0  // Counter for divisors of the current number
        SET currentNumber to the current number
        
        // Check for divisors from 2 up to the current number
        FOR each divisor from 2 to currentNumber - 1 DO
            IF currentNumber is divisible by divisor THEN
                INCREMENT divisorCount by 1  // Found a divisor
                // Divide out all occurrences of this divisor from current number
                WHILE currentNumber is divisible by divisor DO
                    currentNumber = currentNumber / divisor  // Reduce current number
                END WHILE
            END IF
        END FOR
        
        // A semi-prime has exactly two unique prime factors
        IF divisorCount is equal to 2 THEN
            INCREMENT semiPrimeCount by 1  // Increase semi-prime count
        END IF
    END FOR
    
    RETURN semiPrimeCount  // Output the count of semi-primes
END FUNCTION

// Main program execution
SET t to the integer input from the user
CALL countSemiPrimes(t)  // Count semi-primes up to the input number
``` 

### Context Explanation:
- This pseudocode aims to count how many semi-prime numbers exist between 1 and a given limit. 
- A semi-prime is defined as a natural number that is the product of exactly two prime numbers (not necessarily distinct).
- The outer loop iterates through each number up to the limit, while the inner loop counts the unique prime divisors for each number, ensuring it specifically looks for exactly two distinct prime factors. If found, it increments the count of semi-primes.
