**Purpose:**  
The goal of this program is to count how many numbers between 1 and a given integer (inclusive) are semiprime numbers. A semiprime number is defined as a natural number that is the product of exactly two prime numbers.

**Pseudocode:**

```
1. Read an integer value called 'limit' from user input.
2. Initialize a variable 'semiprimeCount' to 0 to keep track of the number of semiprime numbers found.

3. For each integer 'currentNumber' starting from 1 up to 'limit' (inclusive):
   a. Initialize a variable 'primeFactorCount' to 0 to count the prime factors of 'currentNumber'.
   b. Set 'tempNumber' to 'currentNumber' to use for factorization.

   c. For each integer 'potentialFactor' starting from 2 up to 'currentNumber' (exclusive):
      i. If 'tempNumber' is divisible by 'potentialFactor':
         - Increment 'primeFactorCount' by 1.
         
         - While 'tempNumber' is divisible by 'potentialFactor':
           - Divide 'tempNumber' by 'potentialFactor' (this reduces 'tempNumber' to remove that prime factor).

   d. If 'primeFactorCount' is exactly 2:
      - Increment 'semiprimeCount' by 1 (this indicates that 'currentNumber' is a semiprime).

4. Output the value of 'semiprimeCount' (the total number of semiprime numbers found).
```

**Comments for Clarity:**  
- The main loop iterates through each number to check if it is a semiprime. 
- For each number, it checks potential factors (starting from 2) to see if they divide the number evenly. If they do, it counts these factors.
- A semiprime is recognized when exactly two distinct prime factors are identified during the factorization process. 

**Note:** 
- The inner loop only checks for factors until the number itself (exclusive) to optimize the factorization process. 
- This structure ensures readers can understand how semiprime counting is carried out without needing to grasp programming syntax.
