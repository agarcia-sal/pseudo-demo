```
BEGIN

    // Read the number of test cases or range limit
    SET testCaseCount TO INTEGER(INPUT)

    // Initialize a variable to hold the result
    SET resultCount TO 0

    // Loop through each number from 1 to the test case count (inclusive)
    FOR each number FROM 1 TO testCaseCount DO
        
        // Initialize a counter for the number of distinct prime factors
        SET distinctPrimeFactorCount TO 0
        
        // Create a variable to hold the current number to be checked
        SET currentNumber TO number

        // Loop through possible factors starting from 2 up to one less than the number
        FOR each potentialFactor FROM 2 TO (number - 1) DO
            
            // Check if the potential factor divides the current number evenly
            IF (currentNumber MOD potentialFactor EQUALS 0) THEN
                
                // Increase the count of distinct prime factors
                INCREMENT distinctPrimeFactorCount
                
                // Divide the current number by the factor as long as it's divisible
                WHILE (currentNumber MOD potentialFactor EQUALS 0) DO
                    SET currentNumber TO currentNumber DIVIDED BY potentialFactor
                END WHILE
                
            END IF
            
        END FOR
        
        // Check if the current number has exactly two distinct prime factors
        IF (distinctPrimeFactorCount EQUALS 2) THEN
            // Increment the result count for numbers with precisely two distinct prime factors
            INCREMENT resultCount
        END IF
        
    END FOR

    // Output the total count of numbers with exactly two distinct prime factors
    PRINT(resultCount)

END
``` 

### Explanation:
- The pseudocode begins with an input request to get the number of test cases.
- It initializes a counter for results which will count numbers that have exactly two distinct prime factors.
- A loop iterates through each integer from 1 to the input number.
- Within that loop, another loop checks potential factors starting from 2.
- It checks if a number has two distinct prime factors and increments a counter accordingly.
- Finally, it outputs the result of the count of numbers that met the criteria. 

This structured approach allows someone unfamiliar with the specific syntax of the original code to follow the logic and understand the algorithm's intent.
