**Pseudocode:**

1. Read an integer input value `t` which represents the upper limit for checking numbers.

2. Initialize a variable `resultCount` to 0. This will keep track of how many numbers from 1 to `t` have exactly two distinct prime factors.

3. For each number `currentNumber` from 1 to `t`:
   - Initialize a variable `distinctPrimeFactorsCount` to 0. This will count distinct prime factors for the `currentNumber`.
   - Set `tempNumber` to `currentNumber` which will be manipulated to find the prime factors.

   - For each integer `potentialFactor` starting from 2 up to but not including `currentNumber`:
     - Check if `tempNumber` is divisible by `potentialFactor` (i.e., check if `potentialFactor` is a factor of `tempNumber`):
       - If it is divisible:
         - Increment `distinctPrimeFactorsCount` by 1.
         - While `tempNumber` is still divisible by `potentialFactor`, repeatedly divide `tempNumber` by `potentialFactor` to eliminate all occurrences of this factor.

   - After checking all `potentialFactor`s:
     - If `distinctPrimeFactorsCount` equals 2, it means `currentNumber` has exactly two distinct prime factors:
       - Increment `resultCount` by 1.

4. After checking all numbers from 1 to `t`, output the value of `resultCount`, which represents how many numbers have exactly two distinct prime factors.
