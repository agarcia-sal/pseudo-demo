**Pseudocode:**

1. **Input:** Read an integer value `t`, which represents the upper limit for checking numbers.

2. **Initialize:** Set a variable `result` to 0. This will hold the count of specific numbers.

3. **Loop through numbers:** For each integer `current_number` starting from 1 up to `t` (inclusive):
   - Initialize a variable `factor_count` to 0. This will count the number of distinct prime factors for `current_number`.
   - Set a variable `temp_number` equal to `current_number`.

   4. **Check for factors:** For each integer `potential_factor` starting from 2 up to one less than `current_number`:
      - If `temp_number` is divisible by `potential_factor` (meaning `potential_factor` is a factor of `temp_number`):
         - Increment `factor_count` by 1, indicating that we found a new distinct prime factor.
         - While `temp_number` is still divisible by `potential_factor`, divide `temp_number` by `potential_factor`. This removes all occurrences of that factor from `temp_number`.

   5. **Count primes:** After checking all potential factors for `current_number`:
      - If `factor_count` equals 2, it means `current_number` has exactly two distinct prime factors. Therefore, increment `result` by 1.

6. **Output:** After processing all numbers, print the value of `result`, which represents the total count of numbers from 1 to `t` that have exactly two distinct prime factors.
