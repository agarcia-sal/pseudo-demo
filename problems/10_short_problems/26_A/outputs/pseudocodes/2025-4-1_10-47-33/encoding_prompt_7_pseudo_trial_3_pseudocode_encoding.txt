Here is the pseudocode that accurately captures the logic and operations of the provided Python code:

```
FUNCTION countSemiprimes(limit)
    INITIALIZE variable semiprimeCount to 0
    FOR each number i from 1 to limit DO
        INITIALIZE variable divisorCount to 0
        SET variable currentNumber to i
        FOR each potentialDivisor from 2 to (i - 1) DO
            IF currentNumber is divisible by potentialDivisor THEN
                INCREMENT divisorCount by 1
                WHILE currentNumber is divisible by potentialDivisor DO
                    DIVIDE currentNumber by potentialDivisor
                END WHILE
            END IF
        END FOR
        IF divisorCount is equal to 2 THEN
            INCREMENT semiprimeCount by 1
        END IF
    END FOR
    RETURN semiprimeCount
END FUNCTION

SET inputLimit to an integer value read from the user
SET output to countSemiprimes(inputLimit)
PRINT output
```

### Explanation of Key Elements:
- **Purpose:** The function `countSemiprimes(limit)` counts how many semiprime numbers (products of exactly two prime numbers, counted with multiplicity) exist between 1 and the given limit.
- **Input**: Reads an integer input from the user, which serves as the upper limit for checking semiprime numbers.
- **Output**: Returns and prints the total number of semiprime numbers found in the specified range.
- **Control Structures**: Uses loops to iterate through potential divisors and conditional statements to determine if a given integer is semiprime.
- **Complexity Notes**: The inner loop checks for prime divisors and counts only those divisors that multiply to the number without exceeding it, ensuring a focus on semiprimes specifically.
