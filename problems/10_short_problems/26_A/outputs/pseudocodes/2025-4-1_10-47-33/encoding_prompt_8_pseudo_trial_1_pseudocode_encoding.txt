**Purpose**: The goal of the code is to count how many numbers from 1 to a given number (`t`) are exactly the product of two distinct prime factors.

**Pseudocode**:

1. **Start the Program**:
   - Read an integer value from the user, called `totalCount`.

2. **Initialize a Result Variable**:
   - Set `countOfNumbersWithTwoDistinctPrimeFactors` to 0. This variable will hold the final count of numbers that meet the criteria.

3. **Loop Through Each Number**:
   - For each integer `currentNumber` from 1 to `totalCount` (inclusive):
     - Set `distinctPrimeFactorsCount` to 0. This will track how many distinct prime factors the `currentNumber` has.
     - Store original value of `currentNumber` in a variable called `workingNumber`.

     1. **Check for Prime Factors**:
        - For each integer `potentialFactor` starting from 2 up to (but not including) `currentNumber`:
          - If `workingNumber` is divisible by `potentialFactor` (i.e., `workingNumber modulo potentialFactor is zero`):
            - Increment `distinctPrimeFactorsCount` by 1.
            - While `workingNumber` is still divisible by `potentialFactor`:
              - Divide `workingNumber` by `potentialFactor`. This removes all occurrences of this prime factor from `workingNumber`.

     2. **Check for Two Distinct Factors**:
        - If `distinctPrimeFactorsCount` equals 2 (indicating that `currentNumber` has exactly two distinct prime factors):
          - Increment `countOfNumbersWithTwoDistinctPrimeFactors` by 1.

4. **Output the Result**:
   - Print the value of `countOfNumbersWithTwoDistinctPrimeFactors`. This is the final count of numbers that are the product of exactly two distinct prime factors.

**Comments**:
- The outer loop iterates through each number from 1 to the input value.
- The inner loop checks for prime factors and counts distinct ones while eliminating multiples from consideration.
- The program ultimately counts and returns how many numbers meet the specified condition.

This pseudocode clearly outlines the structure and logic of the original code in a straightforward manner, using general terms that facilitate understanding.
