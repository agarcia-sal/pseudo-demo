**Pseudocode for Counting Numbers with Exactly Two Distinct Prime Factors**

1. **Input**: Read an integer `t` from the user, representing the upper limit for checking numbers from 1 to `t`.

2. **Initialize Result**: Set a variable `totalCount` to 0. This will count the numbers from 1 to `t` that have exactly two distinct prime factors.

3. **Loop Through Each Number**: For each integer `currentNumber` from 1 to `t`:
   - Initialize a variable `distinctPrimeCount` to 0. This will track the number of distinct prime factors of `currentNumber`.
   - Initialize a variable `currentValue` to `currentNumber`.

4. **Find Prime Factors**: For each integer `potentialPrime` from 2 to `currentNumber-1`:
   - Check if `currentValue` is divisible by `potentialPrime`:
     - If yes, increment `distinctPrimeCount` by 1 to indicate a new distinct prime factor has been found.
     - While `currentValue` is divisible by `potentialPrime`, divide `currentValue` by `potentialPrime`. This operation breaks down `currentNumber` into its prime factors.

5. **Check for Exactly Two Distinct Prime Factors**: After checking for all potential primes:
   - If `distinctPrimeCount` equals 2, increment `totalCount` by 1.

6. **Output the Result**: After finishing the loop through all numbers, print the value of `totalCount`, which represents how many numbers in the range have exactly two distinct prime factors.

**End of Pseudocode**
