### Pseudocode for Counting Semi-Prime Numbers

**Input:** An integer `t`, which represents the upper limit for checking semi-prime numbers.

**Output:** An integer `res`, which counts the number of semi-prime numbers up to `t`.

#### Initialize

1. Set the variable `totalSemiPrimes` to 0.

#### Process Each Number from 1 to t

2. **For each integer `currentNumber` from 1 to `t` inclusive:**
   - Set `divisorCount` to 0.
   - Set `tempNumber` to `currentNumber`.

   #### Find Prime Factors

   3. **For each integer `potentialDivisor` from 2 to `currentNumber - 1`:**
      - **If `tempNumber` is divisible by `potentialDivisor`:**
        - Increment `divisorCount` by 1.
        
        - **While `tempNumber` is divisible by `potentialDivisor`:**
          - Divide `tempNumber` by `potentialDivisor`.

   #### Check for Semi-Prime Condition

   4. **If `divisorCount` is equal to 2:**
      - Increment `totalSemiPrimes` by 1.

#### Output the Result

5. Print the value of `totalSemiPrimes`. 

### Summary
This pseudocode effectively outlines the procedure to count semi-prime numbers up to a given integer `t`. A semi-prime is defined as a number that has exactly two distinct prime factors. The algorithm iterates through each number, identifies its prime factors, counts them, and checks if the count equals 2.
