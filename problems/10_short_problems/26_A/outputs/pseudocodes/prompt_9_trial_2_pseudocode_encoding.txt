**Purpose:** The goal of this algorithm is to count how many numbers from 1 to a given number (t) are considered "semiprime," which means they are products of exactly two prime numbers.

**Pseudocode:**

1. **Start the program.**
   
2. **Receive input:**
   - Get an integer value called `total_numbers` from the user which represents the upper limit of the range to check for semiprimes.

3. **Initialize a counter:**
   - Set `semiprime_count` to 0, this will track the number of semiprimes found.

4. **Iterate through numbers:**
   - For each number `current_number` starting from 1 up to `total_numbers` (inclusive):
     - Set a prime factor count `prime_factor_count` to 0.
     - Create a variable `temp_number` and assign it the value of `current_number`.

5. **Check for prime factors:**
   - For each possible divisor `potential_prime` starting from 2 up to (but not including) `current_number`:
     - If `temp_number` is divisible by `potential_prime`:
       - Increment `prime_factor_count` by 1.
       - While `temp_number` is divisible by `potential_prime`:
         - Divide `temp_number` by `potential_prime` (removing all occurrences of that prime factor).

6. **Determine semiprime status:**
   - After checking all possible divisors for `current_number`:
     - If `prime_factor_count` is equal to 2:
       - Increment `semiprime_count` by 1.

7. **Output the result:**
   - Print the value of `semiprime_count`, which is the total number of semiprime numbers found.

8. **End the program.**

**Summary of Output:**
The output is the total count of semiprime numbers between 1 and the input number, calculated by the logic above.
