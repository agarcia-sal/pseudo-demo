**Pseudocode:**

1. Start by accepting an integer input to determine the total number of natural numbers to evaluate. Assign this value to a variable named `totalNumbers`.

2. Initialize a variable named `countOfSpecialNumbers` to zero. This variable will be used to keep track of how many numbers meet a specific condition.

3. Begin a loop that will iterate from 1 to `totalNumbers`, inclusive. For each number in this range:
   - Assign the current number in the loop to a variable called `currentNumber`.
   - Initialize a counter variable named `divisorCount` to zero. This will count how many distinct divisors the current number has (excluding 1 and itself).

4. Start another loop that will iterate from 2 to one less than the `currentNumber`. In this inner loop:
   - Check if `currentNumber` is divisible by the current divisor. 
   - If it is divisible:
     - Increase the `divisorCount` by one, indicating a new distinct divisor has been found.
     - Then, continue dividing `currentNumber` by this divisor until it is no longer divisible by that divisor. This effectively reduces `currentNumber` to remove all occurrences of that divisor.

5. After checking all potential divisors for the `currentNumber`, examine the value of `divisorCount`.
   - If `divisorCount` equals 2, it indicates that the `currentNumber` has exactly two distinct prime factors. Therefore, increment `countOfSpecialNumbers` by one.

6. Once all numbers have been evaluated and the loops are completed, output the value of `countOfSpecialNumbers`. This final count represents how many numbers within the specified range possessed exactly two distinct prime factors. 

7. End the procedure.
