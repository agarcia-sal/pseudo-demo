Hereâ€™s the pseudocode derived from the given code snippet, structured for clarity and purpose:

```
FUNCTION CountSemiPrimes(t: INTEGER) RETURNS INTEGER

    // Initialize a variable to store the count of semi-prime numbers
    semiPrimeCount = 0
    
    // Loop through each number from 1 to t (inclusive)
    FOR each number i FROM 1 TO t DO
        
        // Initialize a counter for the number of distinct prime factors
        distinctPrimeCount = 0
        
        // Set a variable to check the current number being analyzed
        currentNumber = i
        
        // Loop through possible factors from 2 to one less than the current number
        FOR each potentialFactor j FROM 2 TO (i - 1) DO
            
            // Check if j is a factor of currentNumber
            IF currentNumber MOD j = 0 THEN
                
                // Increment the count of distinct prime factors
                distinctPrimeCount = distinctPrimeCount + 1
                
                // Divide currentNumber by j until it is no longer divisible by j
                WHILE currentNumber MOD j = 0 DO
                    currentNumber = currentNumber / j
                
                // End of while loop
            END IF
            
            // End of for loop
        END FOR
        
        // If the number has exactly two distinct prime factors, count it as a semi-prime
        IF distinctPrimeCount = 2 THEN
            semiPrimeCount = semiPrimeCount + 1
        END IF
        
    // End of for loop

    // Return the total count of semi-prime numbers found
    RETURN semiPrimeCount
    
END FUNCTION

// The function will be called with input value t to get the result
t = INTEGER(INPUT())
result = CountSemiPrimes(t)
PRINT result
```

### Explanation of Pseudocode:

1. **Function Definition**: The pseudocode begins with defining a function that takes an integer `t` as input and returns the total count of semi-prime numbers up to `t`.

2. **Initialization**: A counter variable (`semiPrimeCount`) is initialized to keep track of the number of semi-primes.

3. **Outer Loop**: The first loop iterates through each integer from 1 to `t`. This corresponds to examining each number to determine if it is a semi-prime.

4. **Inner Loop for Factors**: The inner loop checks potential factors starting from 2 up to one less than the current number. If a factor is found, it checks to count the number of distinct prime factors.

5. **While Loop**: Within the inner loop, a while loop is used to divide the current number by a factor repeatedly until it is no longer divisible. This effectively reduces the number and helps in counting distinct factors.

6. **Semi-Prime Check**: After exiting the inner loop, if exactly two distinct prime factors are found (`distinctPrimeCount` equals 2), the semi-prime count is incremented.

7. **Return Statement**: Finally, the total count of semi-primes is returned after all numbers up to `t` are evaluated.

This structure captures the algorithm's intent and flow, making it accessible to someone unfamiliar with the original code.
