**Pseudocode:**

1. **Input**: Read an integer value called `totalCount` from the user. This represents the upper limit for checking integers from 1 to `totalCount`.

2. **Initialize**: Set a variable `primeCount` to 0. This will keep track of how many prime numbers are found within the range.

3. **Loop Over Numbers**: For each integer `currentNumber` starting from 1 to `totalCount` (inclusive):
    - Set a variable `divisorCount` to 0. This will count how many divisors (greater than 1 and less than the current number) divide the `currentNumber`.
    - Set a variable `workingNumber` equal to `currentNumber`. This will be used to find the prime factors.

4. **Check for Divisors**: For each integer `potentialDivisor` starting from 2 up to, but not including, `currentNumber`:
    - If `workingNumber` is divisible by `potentialDivisor` (meaning there is no remainder when dividing):
        - Increment `divisorCount` by 1 (indicating we found a divisor).
        - While `workingNumber` is still divisible by `potentialDivisor`, divide `workingNumber` by `potentialDivisor` to reduce it.

5. **Determine Prime Status**: After checking all potential divisors:
    - If `divisorCount` equals 2, it indicates that `currentNumber` is a prime number:
        - Increment `primeCount` by 1.

6. **Output**: After all numbers have been checked, display the value of `primeCount`, which represents the total number of prime numbers found between 1 and `totalCount`.
