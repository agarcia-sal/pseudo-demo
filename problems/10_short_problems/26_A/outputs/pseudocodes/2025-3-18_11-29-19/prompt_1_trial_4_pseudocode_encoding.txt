**Pseudocode for Counting Numbers with Exactly Two Distinct Prime Factors:**

1. **Input**: Read an integer `t` which represents the upper limit (inclusive) for counting numbers.

2. **Initialize**: Set a variable named `result` to 0, which will hold the count of numbers having exactly two distinct prime factors.

3. **Loop through Numbers**: For each integer `current_number` from 1 to `t` (inclusive):
    - Initialize a variable called `distinct_prime_count` to 0 (this keeps track of distinct prime factors of the current number).
    - Set `temp_number` equal to `current_number` (this will be used to factor out primes).

4. **Find Prime Factors**: For each integer `potential_prime` starting from 2 up to (but not including) `current_number`:
    - Check if `temp_number` is divisible by `potential_prime`:
        - If it is, increment the `distinct_prime_count` by 1 (found a new prime factor).
        - Keep dividing `temp_number` by `potential_prime` until it is no longer divisible by `potential_prime` (this removes all instances of that prime factor from `temp_number`).

5. **Check Distinct Prime Factor Count**: After exiting the loop:
    - If `distinct_prime_count` equals 2:
        - Increment the `result` by 1 (the current number has exactly two distinct prime factors).

6. **Output**: After processing all numbers, print the value of `result`, which represents the total count of numbers with exactly two distinct prime factors from 1 to `t`.
