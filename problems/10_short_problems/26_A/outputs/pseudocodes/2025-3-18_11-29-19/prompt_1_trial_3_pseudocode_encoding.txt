**Pseudocode:**

1. **Input the number of test cases:**
   - Read an integer value `t` from the user.

2. **Initialize a variable to hold the count of prime numbers:**
   - Set `resultCount` to 0.

3. **Process each number from 1 to t:**
   - For each integer `currentNumber` from 1 to `t`:
     - Initialize a variable `divisorCount` to 0.
     - Set a variable `remainingNumber` to `currentNumber`.
     
     - **Check for prime factors:**
       - For each integer `potentialDivisor` from 2 to `currentNumber - 1`:
         - If `remainingNumber` is divisible by `potentialDivisor`:
           - Increment `divisorCount` by 1.
           - **Factor out potentialDivisor completely:**
             - While `remainingNumber` is divisible by `potentialDivisor`:
               - Divide `remainingNumber` by `potentialDivisor`.
               
     - **Check if the current number is prime:**
       - If `divisorCount` is equal to 2:
         - Increment `resultCount` by 1.

4. **Output the total count of prime numbers:**
   - Print the value of `resultCount`. 

**Summary:**
This pseudocode counts how many numbers between 1 and `t` are prime, by checking the number of distinct prime factors of each number and updating the count accordingly. It checks for prime factors from 2 up to the number itself, and counts the number of unique prime factors. A number is concluded as prime if there are exactly two distinct prime factors.
