**Pseudocode Description:**

1. **Begin the process:**
   - Accept an integer input, representing the total number (let's call it `totalNumbers`) to check for prime numbers.

2. **Initialize a counter for prime numbers:**
   - Set a variable `primeCount` to zero, which will keep track of how many prime numbers are found.

3. **Loop through each number from 1 to `totalNumbers`:**
   - For each value `currentNumber` starting from 1 up to `totalNumbers`:
     - Initialize a counter `divisorCount` to zero, which will count how many divisors (greater than 1) `currentNumber` has.
     - Set a temporary variable `tempNumber` to `currentNumber`.

4. **Check for divisors of `currentNumber`:**
   - For each possible divisor `potentialDivisor` starting from 2 up to one less than `currentNumber`:
     - If `tempNumber` is divisible by `potentialDivisor` (meaning there is no remainder):
       - Increment the `divisorCount` by one (indicating that a new divisor is found).
       - Continue dividing `tempNumber` by `potentialDivisor` until `tempNumber` is no longer divisible by `potentialDivisor`.

5. **Determine if `currentNumber` is prime:**
   - After checking all potential divisors for `currentNumber`, check if `divisorCount` equals 2 (indicating it has exactly two distinct divisors: 1 and itself).
   - If it is a prime number, increment `primeCount` by one.

6. **Output the total count of prime numbers:**
   - Once all numbers have been checked, display the value of `primeCount`, which corresponds to the total number of prime numbers found between 1 and `totalNumbers`.

**End of Pseudocode Description.**
