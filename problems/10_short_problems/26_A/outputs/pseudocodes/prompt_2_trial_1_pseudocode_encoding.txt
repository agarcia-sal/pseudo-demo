**Pseudocode:**

1. Start by reading an integer input representing a number of test cases, referred to as `testCaseCount`.

2. Initialize a variable `primeCount` to zero. This variable will keep track of how many prime numbers are found.

3. For each integer `currentNumber` from 1 to `testCaseCount`:
   - Initialize a variable `divisorCount` to zero. This variable will count the distinct prime factors of `currentNumber`.
   - Set a variable `reducedNumber` equal to `currentNumber`.
   
   - For each integer `potentialDivisor` starting from 2 up to but not including `currentNumber`:
     - Check if `reducedNumber` is divisible by `potentialDivisor`.
       - If it is, increment the `divisorCount` by 1, indicating that a new prime factor has been found.
       - While `reducedNumber` is still divisible by `potentialDivisor`, divide `reducedNumber` by `potentialDivisor`. This process continues until `reducedNumber` can no longer be divided by `potentialDivisor`.
       
   - After examining all potential divisors, check if the `divisorCount` is exactly 2.
     - If it is, increment `primeCount` by 1, implying that `currentNumber` is a prime number.

4. After processing all numbers up to `testCaseCount`, output the value of `primeCount`, which represents the total number of prime numbers identified.

End of pseudocode.
