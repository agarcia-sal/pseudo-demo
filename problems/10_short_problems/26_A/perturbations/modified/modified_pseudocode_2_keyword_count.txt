**Purpose**: The code determines how many numbers within a specified range are "prime" numbers, defined as numbers that have exactly two distinct positive divisors: 1 and themselves.

---

**Pseudocode**:

1. **Start Program**
   
2. **Get Input**: 
   - Set `totalNumbers` to the integer value entered by the user.

3. **Initialize Result Counter**: 
   - Set `primeCount` to 0 (this will store the count of prime numbers).

4. **Loop Through Each Number**:
   - For each `currentNumber` from 1 to `totalNumbers` (inclusive):
     1. **Set Divisor Count**: 
        - Initialize `divisorCount` to 0 (this will count how many divisors `currentNumber` has).
        2. **Set Working Number**: 
           - Set `workingNumber` to `currentNumber`.

     3. **Check for Divisibility**:
        - For each `potentialDivisor` from 2 to one less than `currentNumber`:
          - If `workingNumber` is divisible by `potentialDivisor`:
            1. **Increase Divisor Count**:
               - Increment `divisorCount` by 1.
            2. **Divide Until Not Divisible**:
               - While `workingNumber` is divisible by `potentialDivisor`:
                 - Divide `workingNumber` by `potentialDivisor` (remove that prime factor).
     
     4. **Check If Number is Prime**:
        - If `divisorCount` equals 2 (it has exactly two distinct positive divisors):
          - Increment `primeCount` by 1.

5. **Output Result**:
   - Print the value of `primeCount`, which represents the total number of prime numbers found from 1 to `totalNumbers`.

---

**Comments for Clarity**:
- The outer loop iterates through each number within the specified range.
- The inner loop identifies potential divisors and checks the number of distinct prime factors.
- A number is counted as prime only if it has exactly two distinct divisors.

**Example of Input and Output**: 
- If the user inputs `10`, the output will be `4`, because the prime numbers within that range are 2, 3, 5, and 7.
