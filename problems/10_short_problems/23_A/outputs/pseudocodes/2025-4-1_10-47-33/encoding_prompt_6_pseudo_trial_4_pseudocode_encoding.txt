Here's the pseudocode that represents the logic of the provided code in a clear and understandable manner:

```
BEGIN

  // Read a line of input and remove the trailing newline character
  INPUT stringLine

  // Determine the length of the input line
  SET lengthOfLine TO LENGTH(stringLine)

  // Initialize a variable to store the result
  SET longestRepetitionLength TO 0

  // Loop over all possible lengths for repeated substrings
  FOR currentLength FROM 0 TO lengthOfLine - 1 DO

    // Loop through the string to check for repeated substrings
    FOR startIndex FROM 0 TO lengthOfLine - 1 DO

      // Extract the substring of the current length starting from startIndex
      SET substring TO EXTRACT substring from stringLine startIndex with currentLength

      // Check if the substring appears again in the string after its starting index
      IF substring IS FOUND in stringLine starting from startIndex + 1 THEN
        // If found, update the longest repetition length
        SET longestRepetitionLength TO currentLength
        BREAK OUT of the inner loop
      END IF

    END FOR

  END FOR

  // Output the length of the longest repeated substring
  OUTPUT longestRepetitionLength

END
```

### Explanation:
1. **Input Handling**: The pseudocode begins by reading the input string and determining its length.
2. **Initialization**: A variable to keep track of the longest length of repeated substrings is initialized to zero.
3. **Outer Loop**: The first loop iterates over possible lengths for substrings.
4. **Inner Loop**: The second loop checks each possible starting index for the substrings within the original string.
5. **Substring Extraction and Checking**: It checks if the substring of the current length starting from the specific index exists elsewhere in the string.
6. **Updating Result**: If a repeated substring is found, the result variable is updated, and the inner loop is exited to move on to the next length.
7. **Output**: Finally, the length of the longest repeated substring is printed. 

This pseudocode format simplifies the understanding of the algorithm while maintaining the core logic of the original code.
