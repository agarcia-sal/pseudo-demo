**Pseudocode: Find the Length of the Longest Repeated Substring**

1. **Start** by reading a single line of input and removing the newline character at the end. Let's call this input `inputString`.

2. **Determine** the length of `inputString` and store it in a variable called `lengthOfInputString`.

3. **Initialize** a variable called `longestRepeatedSubstringLength` to 0. This will keep track of the length of the longest repeated substring found.

4. **Loop through** each possible length of substrings starting from 0 up to `lengthOfInputString - 1`:
   - Let `currentLength` be the variable representing this loop's current length.

   5. **For each substring** starting position in `inputString` from 0 to `lengthOfInputString - 1`:
      - Let `startPosition` be the variable representing this starting position.

      6. **Extract the substring** from `inputString` that starts at `startPosition` and has a length of `currentLength`. 

      7. **Check if this substring** can be found within `inputString` starting from the position immediately after `startPosition` by searching for the substring. This checks for a repeated occurrence.

      8. If the substring is found:
         - **Update** `longestRepeatedSubstringLength` to be equal to `currentLength`.
         - **Break** out of the inner loop as we've found a repeated substring of this length.

9. **Continue** with the outer loop until all lengths have been checked.

10. **Output** the value of `longestRepeatedSubstringLength` as the final result, which indicates the length of the longest substring that appears more than once in `inputString`.

**End** of pseudocode.
