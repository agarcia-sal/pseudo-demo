Here is the translation of the provided code into clear and concise pseudocode following the guided steps:

---

**Pseudocode:**

1. **Read Input:**
   - Set variable `line` to the input string received (omit the last character).

2. **Determine Length:**
   - Set variable `n` to the length of `line`.
   - Set variable `rv` to 0 (this will hold the result).

3. **Loop Through Lengths:**
   - For each integer `l` from 0 to `n - 1` (inclusive):
     - For each integer `i` from 0 to `n - 1` (inclusive):
       - Check if the substring from `line` that starts at index `i` and has length `l` appears again in `line` starting after index `i` (i.e., starting at `i + 1`).
       - If it does:
         - Set `rv` to `l`.
         - Exit the inner loop (no need to check further for this `l`).

4. **Output Result:**
   - Print the value of `rv`.

**Assumptions:**
- The input is a non-empty string.
- The string length (`n`) is non-negative.

---

This pseudocode encapsulates the logic of the original code while maintaining clarity and readability. Each step is deliberately expressed to reflect the intended operations without jargon.
