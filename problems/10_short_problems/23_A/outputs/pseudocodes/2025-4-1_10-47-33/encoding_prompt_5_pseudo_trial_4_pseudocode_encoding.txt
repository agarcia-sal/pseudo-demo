**Purpose:** The goal of this program is to determine the length of the longest substring (a sequence of characters) within a given string that appears more than once.

### Pseudocode:

1. **Initialize Variables:**
   - Read a line of input and remove the trailing newline character.
   - Store the length of the line in a variable called `lengthOfInput`.
   - Set a variable `longestRepeatedSubstringLength` to zero. This will keep track of the length of the longest repeated substring found.

2. **Iterate Through Possible Substring Lengths:**
   - For `currentLength` from 0 to `lengthOfInput - 1`, do the following:
     - For `startIndex` from 0 to `lengthOfInput - 1`, do the following:
       - Extract a substring from the input, starting at `startIndex` and having a length of `currentLength + 1` (since `currentLength` starts from 0).
       - Check if this substring can be found again in the input, starting from the position right after `startIndex`.
         - If the substring is found, update `longestRepeatedSubstringLength` to `currentLength + 1` (to account for the length of the substring).
         - Break out of the inner loop since we found a repeating substring of this length.

3. **Output the Result:**
   - Print `longestRepeatedSubstringLength`, which now holds the length of the longest repeating substring.

### Example Pseudocode:

```
FUNCTION findLongestRepeatedSubstringLength:
    // Read input and remove newline character
    INPUT = Read a line from standard input
    lengthOfInput = Length of INPUT
    longestRepeatedSubstringLength = 0

    // Check for substrings of increasing length
    FOR currentLength FROM 0 TO lengthOfInput - 1 DO:
        // Iterate through the starting index of the substring
        FOR startIndex FROM 0 TO lengthOfInput - 1 DO:
            // Create a substring of length (currentLength + 1)
            substring = INPUT[startIndex : startIndex + currentLength + 1]
            // Check if this substring appears again in the input
            IF INPUT.find(substring, startIndex + 1) IS NOT -1 THEN:
                // Update the longest repeating substring length
                longestRepeatedSubstringLength = currentLength + 1
                BREAK  // Exit the loop since we found a repeat

    // Output the length of the longest repeating substring
    PRINT longestRepeatedSubstringLength
```

### Comments:
- The **outer loop** iterates through substring lengths from 0 to the total length of the input string minus one.
- The **inner loop** checks each starting position for the substring and finds if it appears later in the string.
- When a repeating substring is found, the inner loop is exited early (optimized for performance).

This pseudocode provides a clear and high-level overview of the logic present in the original code, making it accessible for those unfamiliar with programming concepts.
