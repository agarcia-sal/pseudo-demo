Sure! Hereâ€™s how the provided code can be translated into clear and concise pseudocode:

```pseudocode
BEGIN

    // Read a line of input from the user and remove the last character (newline)
    INPUT line FROM stdin
    line = REMOVE_LAST_CHARACTER(line)
    
    // Determine the length of the input line
    n = LENGTH(line)
    rv = 0  // Initialize the result variable

    // Loop through all possible lengths of substrings from 0 to n-1
    FOR l FROM 0 TO n-1 DO
        // Loop through the starting index of the substring
        FOR i FROM 0 TO n-1 DO
            // Check if the substring from index i to i+l exists later in the string
            IF FIND(line, SUBSTRING(line, i, i+l), i + 1) != -1 THEN
                rv = l  // Update result variable with current length l
                BREAK  // Exit the inner loop
            ENDIF
        ENDFOR
    ENDFOR

    // Print the result variable indicating the length of the substring found
    OUTPUT rv

END
```

### Breakdown of Components:
1. **Input Handling:** Reads a line from standard input and removes the newline character.
2. **Loop Structures:** Two nested loops to iterate over all possible starting indices and lengths for substrings.
3. **String Handling:** Utilizes substring searching with conditions to check for occurrences of substrings.
4. **Output:** Displays the length of the found substring.

### Assumptions:
- The input line is a string.
- The `FIND` function locates the occurrence of one string within another, returning an index or -1 if not found.
- The `LENGTH` function returns the number of characters in the string.
- The `REMOVE_LAST_CHARACTER` function removes the last character of the string. 

By following these steps, the pseudocode maintains clarity and presents the original logic without using coding jargon.
