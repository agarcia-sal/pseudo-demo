**Purpose:** This algorithm determines the length of the longest substring that appears more than once in a given line of text.

**Pseudocode:**

1. **Start Program**

2. **Receive Input:**
   - Read a line of text from the user and remove the trailing newline character.
   - Store the length of the line in a variable named `lineLength`.

3. **Initialize Counter:**
   - Set a variable named `longestRepeatedSubstringLength` to 0. This will keep track of the longest length of a repeated substring found.

4. **Iterate Over Possible Substring Lengths:**
   - For each possible length `currentLength` from 0 to `lineLength - 1`:
     - **Inner Loop:** For each starting position `startIndex` from 0 to `lineLength - 1`:
       - Extract the substring from `line` starting at `startIndex` with length `currentLength`.
       - Check if this substring appears later in the line starting after `startIndex`.
         - If found:
           - Update `longestRepeatedSubstringLength` with `currentLength`.
           - Break out of the inner loop as a repeated substring of this length has been found.

5. **Output the Result:**
   - Print the value of `longestRepeatedSubstringLength`.

6. **End Program**

### Summary of Logic:
- The program searches for repeated substrings of varying lengths by adjusting the size of the substring it checks.
- For every possible substring, the program checks if it exists elsewhere in the line. If it does, it updates the maximum length found.
- Finally, it returns the length of the longest substring found that is repeated.
