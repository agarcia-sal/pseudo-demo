Here's the high-level pseudocode that mirrors the logic of the provided Python code:

```
FUNCTION findLongestRepeatedSubstring(inputString)
    INITIALIZE lengthOfString AS the length of inputString
    INITIALIZE longestRepeatedSubstringLength AS 0

    FOR substringLength FROM 0 TO lengthOfString - 1 DO
        FOR startIndex FROM 0 TO lengthOfString - 1 DO
            SET currentSubstring AS the substring of inputString from startIndex to startIndex + substringLength
            IF currentSubstring appears again in inputString after startIndex THEN
                SET longestRepeatedSubstringLength AS substringLength
                BREAK FROM inner loop
            END IF
        END FOR
    END FOR

    RETURN longestRepeatedSubstringLength
END FUNCTION

// Driver code
INITIALIZE inputString AS read input from standard input without the last newline character
OUTPUT findLongestRepeatedSubstring(inputString)
```

### Context and Explanation
1. **Purpose:** The function aims to find the length of the longest substring that appears more than once within a given input string.
2. **Input/Output:** The function takes a string as input and outputs the length of the longest repeated substring.
3. **Main Logic:** The nested loops iterate over potential substring lengths and starting positions to check for repetitions of substrings.
4. **Control Structures:** The `FOR` loops are clearly indicated, and the use of `IF` statements for string searching and conditional checks is highlighted, enhancing readability. 
5. **Termination and Breaking:** The inner loop breaks upon finding a repeat, avoiding unnecessary checks and keeping the logic concise.

This clear structure should make it accessible for readers unfamiliar with the original language or implementation.
