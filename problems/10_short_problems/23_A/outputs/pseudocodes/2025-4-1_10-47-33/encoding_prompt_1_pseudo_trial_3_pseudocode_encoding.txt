**Pseudocode:**

```
BEGIN

  // Read a line of input from the user and remove the last character
  inputLine = READ_LINE_FROM_USER()
  inputLength = LENGTH_OF(inputLine)
  resultValue = 0
  
  // Iterate through each possible length of substrings
  FOR substringLength FROM 0 TO inputLength - 1 DO
    
    // Check each starting position for the substring of given length
    FOR startIndex FROM 0 TO inputLength - 1 DO
      
      // Extract the substring from the current starting position
      substring = EXTRACT_SUBSTRING(inputLine, startIndex, substringLength)
      
      // Check if the substring can be found later in the string
      IF FIND(substring IN inputLine STARTING FROM startIndex + 1) IS NOT -1 THEN
        
        // Update the resultValue to the current substring length
        resultValue = substringLength
        BREAK FROM INNER LOOP // Exit the inner loop once a match is found

      END IF
      
    END FOR
    
  END FOR
  
  // Output the maximum length of the found substring
  PRINT(resultValue)

END
```

**Explanation of the Pseudocode:**

1. The program starts by reading a line of input and determining its length.
2. A variable is initialized to store the maximum length of a repeated substring.
3. The program uses two nested loops:
   - The outer loop iterates over possible lengths of substrings (from 0 to the length of the input line).
   - The inner loop checks each starting position in the input line for a substring of the current length.
4. For each substring, it checks if there is another occurrence later in the input.
5. If a repeat is found, it updates the result and exits the inner loop to check the next length.
6. Finally, the maximum length of the substring found is printed.
