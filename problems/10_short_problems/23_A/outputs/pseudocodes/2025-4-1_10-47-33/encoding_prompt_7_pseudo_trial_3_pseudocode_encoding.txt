Here's the high-level pseudocode that reflects the logic and operations of the provided Python code:

```
FUNCTION findLongestRepeatedSubstring(inputString)
    // Remove the trailing newline character from the input string
    SET trimmedString TO removeTrailingNewline(inputString)
    
    // Get the length of the trimmed string
    SET stringLength TO length(trimmedString)
    
    // Initialize the result variable for longest repeated substring length
    SET longestRepeatedLength TO 0

    // Loop through possible substring lengths starting from 0 to stringLength - 1
    FOR lengthIndex FROM 0 TO stringLength - 1 DO
        // Loop over each starting index for the substring
        FOR startIndex FROM 0 TO stringLength DO
            // Extract the current substring based on lengthIndex and startIndex
            SET currentSubstring TO substring(trimmedString, startIndex, lengthIndex)

            // Check if the current substring exists later in the string
            IF find(trimmedString, currentSubstring) IS NOT -1 THEN
                // If found, update longestRepeatedLength with the current length
                SET longestRepeatedLength TO lengthIndex
                // Exit the inner loop as we found a repeated substring
                BREAK
            END IF
        END FOR
    END FOR

    // Return the length of the longest repeated substring found
    RETURN longestRepeatedLength
END FUNCTION

// Helper function to remove trailing newline character from the input
FUNCTION removeTrailingNewline(string)
    RETURN string WITHOUT trailing newline CHARACTER
END FUNCTION

// Helper function to get the length of a string
FUNCTION length(string)
    RETURN number of characters in string
END FUNCTION

// Helper function to extract a substring
FUNCTION substring(string, startIndex, length)
    RETURN substring of 'string' starting from 'startIndex' with 'length'
END FUNCTION

// Helper function to find the index of a substring in a string
FUNCTION find(sourceString, subString)
    // Return the index of subString in sourceString, or -1 if not found
END FUNCTION

// Usage example (Input handling not shown in pseudocode context)
```

### Explanation of Key Parts:
1. **Function Definitions**: The main function `findLongestRepeatedSubstring` encompasses all logic. Additionally, helper functions clarify distinct operations such as removing newlines, measuring lengths, extracting substrings, and finding indices.
2. **Variables**: Descriptive names such as `trimmedString`, `stringLength`, and `longestRepeatedLength` provide readability.
3. **Loops and Conditions**: Clear demarcation of loops and conditions allowing readers to follow the algorithm's intention without confusion.
4. **Return Statements**: Each function culminates in a return statement that indicates its output.

This structured pseudocode effectively summarizes the operation of the original code while adhering to high-level abstraction and clarity.
