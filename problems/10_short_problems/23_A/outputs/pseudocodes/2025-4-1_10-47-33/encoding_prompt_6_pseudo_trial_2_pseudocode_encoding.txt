Here's a clear and understandable pseudocode representation of the provided code:

```
FUNCTION find_longest_repeated_substring
    // Read a line of input (excluding newline character)
    INPUT line
    SET length_of_line = LENGTH(line)         // Determine the length of the input line
    SET longest_repeated_length = 0            // Initialize variable to track the longest repeated substring length

    // Iterate over possible lengths for substrings
    FOR current_length FROM 0 TO length_of_line - 1 DO
        // Check for each starting position within the line
        FOR start_index FROM 0 TO length_of_line - 1 DO
            // Extract the substring of current_length starting at start_index
            SET substring = EXTRACT substring FROM line STARTING AT start_index WITH LENGTH current_length
            
            // Check if the substring appears again in the line starting from the next character
            IF substring FOUND IN line STARTING AT (start_index + 1) THEN
                SET longest_repeated_length = current_length  // Update longest repeated length
                BREAK   // Exit the inner loop if a repeat is found

    // Output the length of the longest repeated substring
    PRINT longest_repeated_length
END FUNCTION
```

### Explanation:

- **Function Definition**: The pseudocode starts with a function that encapsulates the main logic.
- **Input Handling**: It mentions reading the input and measuring its length.
- **Initialization**: Variables for tracking the length of the longest repeated substring are clearly named.
- **Nested Loops**: The outer loop for substring lengths and the inner loop for starting indices indicate the structure of how substrings are generated and checked.
- **Condition Check**: The condition that checks if a substring is found later in the line is stated clearly.
- **Result**: Finally, the output operation is mentioned, making it clear what the function returns or prints.

This structure improves clarity by summarizing operations without delving into specific syntax while maintaining the logic flow similar to the original code.
