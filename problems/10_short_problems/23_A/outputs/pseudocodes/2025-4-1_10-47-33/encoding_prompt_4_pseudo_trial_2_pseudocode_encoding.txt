```plaintext
// Read a line of input from standard input and remove the trailing newline
inputLine = readInputLine()

// Determine the length of the input line
lineLength = lengthOf(inputLine)

// Initialize a variable to keep track of the longest repeated substring length
longestRepeatedLength = 0

// Iterate over all possible substring lengths from 0 to lineLength
for substringLength from 0 to lineLength - 1 do
    // Check each starting position in the line for the substring of current length
    for startingPosition from 0 to lineLength - 1 do
        // Check if the substring from the current starting position of the given length is found later in the string
        if substringExists(inputLine, startingPosition, substringLength) then
            // Update the longest repeated length found
            longestRepeatedLength = substringLength
            break out of inner loop // Exit the inner loop as we found a repeated substring
        end if
    end for
end for

// Output the length of the longest repeated substring
print(longestRepeatedLength)

// Function to read input line (simulation of stdin function)
function readInputLine() 
    // Implementation to read a line input and return it without the newline
end function

// Function to check if there exists a substring of a given length starting from a specific position
function substringExists(line, startPosition, length)
    // Extract the substring based on given start position and length
    substring = line[startPosition:startPosition + length]
    // Use a search method to check if the substring appears later in the line
    return line.find(substring, startPosition + 1) != -1
end function
```
