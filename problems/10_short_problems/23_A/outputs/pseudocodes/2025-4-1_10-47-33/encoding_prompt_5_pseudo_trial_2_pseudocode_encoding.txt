**Purpose Summary:**  
The purpose of this code is to find the length of the longest repeating substring in a given string. 

**Pseudocode:**

```
FUNCTION findLengthOfLongestRepeatingSubstring
    // Accept input from user
    STRING inputString = readInputString()  // Read a line of input from the user
    INTEGER stringLength = lengthOf(inputString)  // Calculate the length of the input string
    INTEGER longestRepeatingLength = 0  // Initialize a variable to store the length of the longest repeating substring

    // Iterate over all possible lengths of substrings
    FOR substringLength FROM 0 TO stringLength - 1 DO
        // Check for each starting position in the string
        FOR startIndex FROM 0 TO stringLength - 1 DO
            // Extract the substring from current index of specified length
            STRING currentSubstring = extractSubstring(inputString, startIndex, substringLength)

            // Check if this current substring exists later in the inputString
            IF existsInString(inputString, currentSubstring, startIndex + 1) THEN
                // If it does exist, update longestRepeatingLength
                longestRepeatingLength = substringLength
                BREAK  // Stop checking this length since we've already found a match

    // Output the length of the longest repeating substring found
    print(longestRepeatingLength
END FUNCTION

FUNCTION readInputString
    RETURN read a line of input from the user

FUNCTION lengthOf(STRING str)
    RETURN the number of characters in str

FUNCTION extractSubstring(STRING str, INTEGER startIndex, INTEGER length)
    RETURN substring of str starting from startIndex of specified length

FUNCTION existsInString(STRING str, STRING subStr, INTEGER startIndex)
    // Check if subStr appears in str starting from startIndex
    RETURN true if subStr can be found in str starting from startIndex, otherwise return false
```

### Explanation of Key Operations:
- **Input and Length Calculation:** 
  - The program starts by reading a string input from the user and calculating its length.
  
- **Loop Through Substring Lengths:** 
  - It iterates through possible lengths of substrings, starting from 0 up to the length of the string minus 1.

- **Nested Loop for Checking Substrings:**
  - Inside the outer loop, thereâ€™s an inner loop that examines each start position in the string for the current substring length.

- **Substring Extraction and Existence Check:**
  - For each position, a substring is extracted and checked to see if it appears again later in the string (beyond the current start position).

- **Update Longest Length Found:**
  - If a repeating substring is found, the length is updated and the loop breaks. 

- **Output Result:** 
  - Finally, the program prints the longest length of a repeating substring found.

This pseudocode format aims to present the logic clearly while breaking down complex operations and using straightforward language.
