Below is the high-level pseudocode that represents the logic and operations of the provided Python code:

```
FUNCTION findLongestRepeatedSubstring(inputString)
    INITIALIZE lengthOfInput AS the length of inputString
    INITIALIZE longestRepeatLength AS 0

    FOR substringLength FROM 0 TO lengthOfInput DO
        FOR startIndex FROM 0 TO lengthOfInput DO
            DEFINE currentSubstring AS the substring of inputString from startIndex to startIndex + substringLength

            IF currentSubstring can be found in inputString starting from position (startIndex + 1) THEN
                SET longestRepeatLength TO substringLength
                BREAK OUT OF inner loop
            END IF
        END FOR
    END FOR

    RETURN longestRepeatLength
END FUNCTION

// To execute the function:
INITIALIZE line AS user input without the last character
OUTPUT findLongestRepeatedSubstring(line)
```

### Explanation:

1. **Input and Output Context:**
   - The input (`inputString`) is a string read from standard input (with the last character removed).
   - The output is the length of the longest repeated substring found in the string.

2. **Methodology:**
   - The outer loop iterates through possible substring lengths from `0` to `lengthOfInput`.
   - The inner loop checks every possible starting index of the substring.
   - A condition checks if the current substring exists later in the input string.
   - If a repeated substring is found, it updates the longest repeat length.

3. **Control Structures:**
   - The pseudocode clearly outlines the loops for substring lengths and starting indices, making it easy to follow the logic. 

4. **Variable Naming:**
   - Variables are named descriptively (e.g., `longestRepeatLength`, `currentSubstring`) to clarify their roles in the algorithm.

By using this structured format, the pseudocode captures the essence of the original Python code while being accessible to readers with different levels of programming knowledge.
