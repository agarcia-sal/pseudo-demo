Here's the pseudocode that captures the intent and logic of the provided code snippet:

```
BEGIN

    // Read a line of input from standard input and remove the last character (newline)
    INPUT stringInput

    // Determine the length of the input string
    SET stringLength = LENGTH of stringInput

    // Initialize variable to hold the result
    SET longestRepeatedSubstringLength = 0

    // Loop through lengths of potential substrings from 0 to stringLength - 1
    FOR lengthFromZero TO stringLength - 1 DO
        
        // Loop through each starting index for the substrings
        FOR startIndex FROM 0 TO stringLength - 1 DO
            
            // Extract the substring from startIndex of the current length
            SET currentSubstring = SUBSTRING of stringInput FROM startIndex WITH LENGTH lengthFromZero
            
            // Check if the current substring can be found in the remainder of the string
            IF (FIND currentSubstring IN stringInput FROM (startIndex + 1)) THEN
            
                // If found, update the result to the current length
                SET longestRepeatedSubstringLength = lengthFromZero
            
                // Exit the loop since we found a repeated substring of this length
                BREAK

            ENDIF

        ENDFOR

    ENDFOR

    // Output the length of the longest repeated substring found
    OUTPUT longestRepeatedSubstringLength

END
```

### Explanation:

1. **Input Handling:** The input line is read from standard input, and the newline character at the end of the input is removed.
2. **Length Calculation:** The length of the input string is calculated for use in loops.
3. **Result Initialization:** A variable to store the length of the longest repeated substring is initialized to zero.
4. **First Loop (Length of Substring):** The first loop iterates over possible lengths for substrings.
5. **Second Loop (Starting Index):** The second loop iterates through each character as a potential starting index for the substring extraction.
6. **Substring Finding:** The existence of the substring in the remainder of the string (after the starting index) is checked.
7. **Result Update and Break:** If a repeated substring is found, the value is recorded, and the inner loop is broken to continue checking larger substring lengths.
8. **Output:** Finally, the length of the longest found repeated substring is printed.

This pseudocode provides a clear outline of the logic involved without delving into programming-specific syntax.
