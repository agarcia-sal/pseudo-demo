**Purpose:** The goal of this algorithm is to find the length of the longest substring in a given string that appears more than once.

**Pseudocode:**

1. **Start Program**
   
2. **Receive Input:**
   - Read a line of text from the user (input string).
   - Remove the last character (if it is a newline).
   - Store the length of the string in a variable named `lengthOfString`.
   - Initialize a variable `longestRepeatedSubstringLength` to zero.

3. **Loop Through Substring Lengths:**
   - For each possible length `currentLength` from 0 to `lengthOfString - 1`:
     - Loop through each starting index `startIndex` from 0 to `lengthOfString - 1`:
       - Extract the substring from `startIndex` to `startIndex + currentLength`.
       - Check if this substring occurs again in the string starting from the index after `startIndex`.
       - If the substring is found:
         - Update `longestRepeatedSubstringLength` to `currentLength`.
         - Break out of the current loop as we only need the longest and first occurrence.

4. **Output Result:**
   - Print the value of `longestRepeatedSubstringLength`.

5. **End Program**

**Summary of Logic:**
- The algorithm checks all possible substrings of increasing length, starting from zero.
- It uses nested loops to compare each substring against the rest of the string to identify repeats.
- The process continues until the longest repeated substring is found and its length is returned as the result.
