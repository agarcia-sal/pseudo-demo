### Purpose:
The goal of this program is to find the length of the longest substring within a given string that occurs more than once.

### Pseudocode:

1. **Start Program**
   
2. **Accept Input:**
   - Read a line of text from the user which is referred to as the input string, and remove any trailing newline or whitespace characters.
   - Determine the length of this input string and store it in a variable.

3. **Initialize Variables:**
   - Set a variable to keep track of the maximum length of the repeating substring found, initially set to zero.

4. **Loop Through Possible Substring Lengths:**
   - For each possible substring length starting from 0 up to the length of the input string:
     - **Inner Loop to Check Substrings:**
       - For each starting position of the substring within the input string:
         - Extract a substring of the current length starting at this position.
         - Search for this substring within the rest of the input string (starting just after the current position):
           - If the substring is found again in the input string:
             - Update the maximum length variable to the current length.
             - Stop searching further (break out of the inner loop).

5. **Output Result:**
   - Print the maximum length of the repeating substring that is found.

### Detailed Steps:

- **Input Operation:**
  - Read input: `line = Read text input`
  - Remove trailing characters: `line = line without newline`
  - Get length of input: `n = Length of line`

- **Calculations:**
  - Initialize `maximum_length` = 0
  - For each length `l` from 0 to `n-1`:
    - For each starting position `i` from 0 to `n-l`:
      - Get substring: `substring = line from index i of length l`
      - Check if this substring can be found later in the string:
        - If `substring` can be found in `line` starting from index `i+1`:
          - Set `maximum_length = l`
          - Exit inner loop (move to next length `l`)

- **Output:**
  - Print `maximum_length`

### Comments:
- The program uses nested loops to systematically check all substrings of increasing length.
- It employs a string searching method to determine if a substring appears more than once in the string.
- The output indicates the longest length of any substring that repeats. 

### Example Structure:
```plaintext
BEGIN Program
  READ line FROM user input
  REMOVE trailing characters FROM line
  SET n = LENGTH of line
  SET maximum_length = 0

  FOR l FROM 0 TO n - 1 DO
    FOR i FROM 0 TO n - l DO
      SET substring = line FROM index i OF LENGTH l
      IF substring is FOUND in line FROM index (i + 1) THEN
        SET maximum_length TO l
        BREAK INNER LOOP

  PRINT maximum_length
END Program
```

### Final Note:
Make sure to test the pseudocode with various inputs to validate that it behaves as expected.
