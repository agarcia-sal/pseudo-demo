**Purpose:**  
The goal of this algorithm is to find the length of the longest substring that appears at least twice in a given string.

**Pseudocode:**

1. **Get the Input:**
   - Read a line of text from the user, removing any trailing newline character.
   - Store the length of this input string in a variable called `stringLength`.
   - Initialize a variable `longestRepeatedSubstringLength` to 0 to keep track of the maximum length of the repeated substring found.

2. **Iterate Over Possible Substring Lengths:**
   - For each possible substring length `currentLength` from 0 to `stringLength - 1`:
     - For each starting position `startPosition` from 0 to `stringLength - 1`:
       - Extract the substring from the current `startPosition` with length `currentLength`.
       - Check if this substring appears again in the remainder of the string after `startPosition`:
         - Search for the extracted substring starting one position after `startPosition`.
         - If a match is found:
           - Update `longestRepeatedSubstringLength` to be equal to `currentLength`.
           - Exit the inner loop, as we found a repeated substring of the current length.
  
3. **Output the Length:**
   - Print the value of `longestRepeatedSubstringLength`, which represents the length of the longest repeated substring.

**Summary of Steps:**

1. Read input string.
2. Initialize variables for string length and result.
3. Use nested loops to check the presence of substrings:
   - Outer loop: For each possible substring length.
   - Inner loop: For each starting position in the string.
4. Update the result if a repeated substring is found.
5. Output the final result indicating the length of the longest repeated substring.
