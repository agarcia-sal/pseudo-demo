**Purpose:** The goal of this algorithm is to find the length of the longest substring in a given string that appears more than once.

**Pseudocode:**

1. **Read Input:** 
   - Obtain a string of characters from user input, excluding the last character (usually a newline).
   - Store the length of the string in a variable called `stringLength`.
   - Initialize a variable called `longestRepeatingSubstringLength` to zero, which will hold the length of the longest repeating substring.

2. **Iterate Through Substring Lengths:**
   - For each possible substring length `currentLength` from 0 to `stringLength - 1`:
     - For each starting position `startIndex` from 0 to `stringLength - 1`:
       
       1. **Extract Substring:**
          - Get the substring of length `currentLength` starting at `startIndex`.

       2. **Search for Repeats:**
          - Look for an occurrence of this substring in the remaining part of the original string, starting just after `startIndex`.
          - If the substring is found in the remaining part of the string:
            - Update `longestRepeatingSubstringLength` to the value of `currentLength`.
            - Exit the inner loop (no need to check other starting indices for this length).

3. **Output Result:**
   - Print the value of `longestRepeatingSubstringLength`, which represents the length of the longest repeated substring found.

**Summary of Steps:**
- Read and prepare input.
- Loop through all possible substring lengths and positions.
- Check if a substring appears again in the string.
- Keep track of the maximum length found.
- Display the maximum length.

This streamlined approach provides a clear and logical breakdown of the algorithm without the complexities of programming syntax.
