Here's the pseudocode that represents the logic of the provided Python code snippet:

```
BEGIN

    // Read a line of input from standard input and remove the last character
    INPUT stringLine FROM standard input
    REMOVE_LAST_CHARACTER_FROM stringLine
    SET lengthOfString TO LENGTH_OF stringLine
    SET longestRepeatedSubstringLength TO 0

    // Iterate over possible lengths of substrings
    FOR each substringLength FROM 0 TO lengthOfString - 1 DO
        
        // Check for each starting position of the string
        FOR each startingIndex FROM 0 TO lengthOfString - 1 DO
            
            // Create a substring of the current length starting from startingIndex
            SET currentSubstring TO substring of stringLine FROM startingIndex OF LENGTH substringLength
            
            // Check if the current substring appears again in the string
            IF currentSubstring IS FOUND IN stringLine starting from (startingIndex + 1) THEN
                
                // Update the longest repeated substring length
                SET longestRepeatedSubstringLength TO substringLength
                BREAK OUT OF inner loop
                
            END IF
            
        END FOR inner loop
        
    END FOR outer loop
    
    // Output the longest length of the repeated substring found
    PRINT longestRepeatedSubstringLength

END
```

### Explanation of Key Components:

- **Inputs and Outputs**: The pseudocode specifies that it reads a line from standard input and prints the length of the longest repeated substring.
- **Variables**: It uses descriptive names like `stringLine`, `lengthOfString`, and `longestRepeatedSubstringLength` for clarity.
- **Control Structures**: Loops are articulated as “FOR each” with clear starting and ending points, enhancing readability.
- **Logic Flow**: The intent of finding the longest repeated substring is evident through the structured iteration and checking mechanisms.
