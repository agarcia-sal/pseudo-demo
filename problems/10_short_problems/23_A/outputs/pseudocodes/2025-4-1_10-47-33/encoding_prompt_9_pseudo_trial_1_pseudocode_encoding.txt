**Purpose**: The goal of this algorithm is to find the length of the longest substring that appears more than once in a given string.

**Pseudocode**:

```
START

DEFINE input_string as the line received from standard input without the last character
SET length_of_string to the length of input_string
SET longest_repeated_length to 0

FOR substring_length from 0 to length_of_string - 1 DO
    FOR index from 0 to length_of_string - 1 DO
        DEFINE current_substring as the substring of input_string starting at index with length substring_length

        // Check if current_substring appears again in the input_string
        IF current_substring appears again in input_string starting from index + 1 THEN
            SET longest_repeated_length to substring_length

            // Exit the inner loop as we found a repeated substring of this length
            BREAK
        END IF
    END FOR
END FOR

OUTPUT longest_repeated_length

END
```

### Explanation of Pseudocode:

1. **Input Handling**: The pseudocode begins by defining `input_string`, which stores the input string stripped of the last character, and calculates its length.

2. **Initialization**: A variable `longest_repeated_length` is initialized to zero, which will ultimately hold the length of the longest substring found.

3. **Outer Loop**: The outer loop iterates over possible substring lengths from 0 to the length of the string minus one. This controls how long the substrings checked will be.

4. **Inner Loop**: For each length, the inner loop goes through each possible starting index to extract a substring of the defined length.

5. **Substring Check**: For every substring, it checks if that substring can be found again in the input_string starting from the next index.

6. **Break Condition**: If a repeating substring is found, it updates `longest_repeated_length` and breaks out of the inner loop to move to the next length.

7. **Final Output**: After completing all iterations, the length of the longest repeating substring is printed as the final output.

### Coherence Check:
The pseudocode maintains clarity of the algorithm and closely follows the logic presented in the original code snippet. Variables are clearly defined, loops and checks are presented accurately, and the overall flow corresponds to the original intentions.
