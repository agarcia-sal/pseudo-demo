Here's a structured pseudocode translation of the provided code, capturing its intent and flow while emphasizing clarity:

```
BEGIN

    // Read a line of input from the standard input
    INPUT: lineOfText
    
    // Remove the trailing newline character
    lineLength = LENGTH(lineOfText)
    
    // Initialize a variable to store the maximum length of the substring found
    maxLength = 0

    // Loop over possible lengths of substrings from 0 to n-1
    FOR length FROM 0 TO lineLength - 1 DO
        
        // Loop over each starting position in the string
        FOR startPosition FROM 0 TO lineLength - 1 DO
            
            // Extract the substring from startPosition of the current length
            currentSubstring = SUBSTRING(lineOfText, startPosition, length)
            
            // Check if this substring appears later in the lineOfText
            IF currentSubstring EXISTS IN lineOfText starting AFTER startPosition THEN
                
                // If found, update maxLength with the current length
                maxLength = length
                
                // Exit the inner loop, as one match is enough
                BREAK
            ENDIF
            
        ENDFOR

    ENDFOR

    // Output the maximum length of the found substring
    OUTPUT maxLength
    
END
```

### Explanation:
- **Inputs & Outputs**: The pseudocode clearly indicates that input is read from the standard input as `lineOfText`, and the output is the maximum length of the substring found in `maxLength`.
- **Core Logic**: It successively checks every substring of increasing lengths to see if it appears later in the string, halting early when a match is found.
- **Control Structures**: Clearly defined loops are used to represent the iteration over possible substring lengths and starting positions.
- **Meaningful Names**: I used descriptive names for variables and operations (like `lineOfText`, `maxLength`, and `currentSubstring`) to enhance readability.

