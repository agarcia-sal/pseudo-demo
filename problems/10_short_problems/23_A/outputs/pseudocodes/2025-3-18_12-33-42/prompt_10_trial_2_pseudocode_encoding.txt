Here is the pseudocode that represents the original code logically and concisely, following the guided steps provided:

```
START

// Read a line of input and remove the trailing newline character
READ line FROM standard input
SET n TO length of line
SET reverse_value TO 0

// Loop through possible lengths for substrings
FOR length FROM 0 TO n - 1 DO
    // Loop to check each starting position for the substring
    FOR start_index FROM 0 TO n - 1 DO
        // Extract the substring from the current start index and of the current length
        SET substring TO line[start_index:(start_index + length)]
        
        // Check if the substring appears later in the line
        IF line finds substring starting from (start_index + 1) THEN
            // Update the reverse_value if a match is found
            SET reverse_value TO length
            BREAK   // Exit the inner loop if a match is found
        ENDIF
    ENDFOR
ENDFOR

// Output the reverse_value
OUTPUT reverse_value

END
```

**Assumptions Made:**
- The variable `line` contains a string without a trailing newline.
- The `find` function returns an index of the first occurrence of the substring, or -1 if not found.
- Lengths and indices are bounded within the range of the string `line`.
