Here's the pseudocode that captures the logic and intent of the provided code snippet:

```plaintext
START

// Read an input string from standard input, removing the last character
inputString = READ input line
lengthOfString = LENGTH of inputString
repeatedSubstringLength = 0

// Iterate over possible lengths for substrings
FOR each length from 0 to lengthOfString - 1 DO
    // Iterate through the starting index of the substring
    FOR each index from 0 to lengthOfString - 1 DO
        // Check if the substring starting at current index and of current length is found later in the string
        substring = EXTRACT substring from inputString starting at index with length length
        if substring is found in inputString starting from index + 1 THEN
            // Update the length of the longest repeated substring found
            repeatedSubstringLength = length
            BREAK out of inner loop
        END IF
    END FOR
END FOR

// Output the length of the longest repeated substring found
PRINT repeatedSubstringLength

END
```

### Explanation of Pseudocode:
1. **Input Handling:** We start by reading the input string and determining its length.
2. **Nested Loop Structure:** We set up two loops: the outer loop iterates over possible substring lengths, and the inner one checks the presence of those substrings starting from different indices.
3. **Condition Checking:** Within the inner loop, we check if the extracted substring appears again in the remaining part of the input string.
4. **Updating Results:** If a repeating substring is found, we store its length and break out of the inner loop to continue with longer lengths.
5. **Output:** Finally, we print the length of the longest repeating substring discovered. 

This structured pseudocode is designed to be clear and easy to understand, focusing on algorithmic flow rather than specific syntax.
