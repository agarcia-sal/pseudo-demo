```plaintext
BEGIN

  // Read a line of input and remove the last character (typically new line)
  Read input line from standard input
  Remove last character from input line
  Set length_of_line to length of input line
  Initialize longest_repeated_length to 0

  // Loop through different lengths of substrings
  FOR length_from_zero TO length_of_line - 1 DO
    // Check for all starting positions of substrings of the current length
    FOR start_position FROM 0 TO length_of_line - 1 DO
      // Create a substring from the current start position with the current length
      Extract substring from input line starting at start_position of length length_from_zero

      // Check if the substring appears again later in the input line
      IF substring is found in input line starting from position start_position + 1 THEN
        // Update the longest repeated length found
        Set longest_repeated_length to length_from_zero
        BREAK OUT OF inner loop // Exit inner loop since a repetition is found
      END IF 
    END FOR
  END FOR

  // Output the longest length of repeated substring found
  Print longest_repeated_length

END
``` 

### Explanation:
- The pseudocode begins by explaining the initial step of reading input and preparing it for processing by removing the last character.
- It establishes a nesting of loops to explore all possible substring lengths and positions.
- The internal logic checks for repetitions of those substrings and updates a tracking variable when a repetition is found.
- Finally, it outputs the result, which indicates the length of the longest repeated substring. 
- Comments are included to clarify the purpose of each step and loop within the algorithm.
