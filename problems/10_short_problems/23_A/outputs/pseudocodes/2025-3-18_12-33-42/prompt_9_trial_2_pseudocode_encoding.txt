**Purpose:** The goal of this algorithm is to find the length of the longest substring in a given string, which appears more than once.

**Pseudocode:**

1. **Start**
  
2. **Receive Input:**
   - Read a line of text from the input (strip any trailing newline character).
   - Store the length of the line in a variable called `textLength`.
   - Initialize a variable `longestRepeatedLength` and set it to 0.

3. **Loop through Substring Lengths:**
   - For each possible length `currentLength` starting from 0 up to `textLength` (exclusive):
     - For each starting index `currentIndex` from 0 to `textLength` (exclusive):
       - Extract a substring from `currentIndex` of length `currentLength`.
       - Check if this substring occurs again in the line starting from the position after `currentIndex`.
         - If the substring is found:
           - Set `longestRepeatedLength` to `currentLength`.
           - Break the inner loop as we only need to find the first match.

4. **Output Result:**
   - Print the value of `longestRepeatedLength`.

5. **End**
