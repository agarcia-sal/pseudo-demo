Here is a clear and understandable pseudocode representation of the provided code that conveys the algorithm's logic effectively:

```
# Read a single line of input
InputString = ReadLine()       # Read from standard input, remove the last character (newline)
StringLength = Length(InputString)  # Get the length of the input string
ResultValue = 0                # Initialize a variable to hold the result

# Loop over possible lengths of substrings (from 0 to length of the input string)
for SubstringLength from 0 to StringLength - 1 do
    # Loop over the starting index of the substring
    for StartingIndex from 0 to StringLength - 1 do
        # Extract a substring from the input string starting at StartingIndex with SubstringLength
        Substring = ExtractSubstring(InputString, StartingIndex, SubstringLength)

        # Check if this substring appears again in the string after its starting index
        if FindSubstring(InputString, Substring, StartingIndex + 1) is not -1 then
            ResultValue = SubstringLength  # Update the result with the current substring length
            break from inner loop          # Exit the inner loop if a match is found

# Output the maximum length of the substring found that has duplicates
Print(ResultValue)  
```

### Explanation of Pseudocode Elements:

1. **Input Handling**: It reads an input string and calculates its length.
2. **Result Initialization**: Initializes `ResultValue` to zero, which will store the final result.
3. **Loops**:
   - The first loop iterates through all possible substring lengths.
   - The second nested loop iterates through all possible starting positions of the substring within the input string.
4. **Substring Extraction**: Gets a specific substring based on the current starting index and length.
5. **Finding Duplicates**: Uses a function to check if the substring occurs later in the string and updates the result accordingly.
6. **Result Output**: Finally prints out the length of the longest repeating substring found. 

This pseudocode abstracts the specific programming syntax while retaining the essential logic and flow of the original code.
