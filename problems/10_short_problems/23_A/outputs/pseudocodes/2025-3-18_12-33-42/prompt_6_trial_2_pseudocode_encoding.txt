Here's the pseudocode representing the underlying logic of the provided code:

```plaintext
FUNCTION main
    // Read input string, removing the last character (usually a newline)
    inputString = readInput()
    lengthOfInput = measureLengthOf(inputString)
    longestRepeatedSubstringLength = 0

    // Loop through possible lengths of substrings
    FOR substringLength FROM 0 TO lengthOfInput - 1 DO
        // Check each starting position for the substring
        FOR startingIndex FROM 0 TO lengthOfInput - 1 DO
            // Extract the substring starting from the current index with the current length
            currentSubstring = extractSubstring(inputString, startingIndex, substringLength)

            // Check if the current substring appears again in the rest of the string
            IF substringExistsInRestOfString(inputString, currentSubstring, startingIndex) THEN
                longestRepeatedSubstringLength = substringLength
                BREAK OUT OF inner loop // Exit the inner loop if a repeat is found

        END FOR // End of inner loop

    END FOR // End of outer loop

    // Output the length of the longest repeated substring found
    print(longestRepeatedSubstringLength
END FUNCTION

// Helper Functions
FUNCTION readInput
    // Read input from standard input and return as a string
END FUNCTION

FUNCTION measureLengthOf(inputString)
    // Return the length of the input string
END FUNCTION

FUNCTION extractSubstring(inputString, startingIndex, substringLength)
    // Return the substring of the input string starting at startingIndex with the specified length
END FUNCTION

FUNCTION substringExistsInRestOfString(inputString, currentSubstring, startingIndex)
    // Check if currentSubstring occurs in inputString after the startingIndex
    // Return TRUE if it exists, FALSE otherwise
END FUNCTION
```

### Explanation of the Pseudocode:
- The main function starts by reading an input string and initializing a variable to keep track of the longest repeated substring's length.
- It uses two nested loops: the outer loop iterates through possible lengths of substrings, while the inner loop checks each possible starting position for a substring of that length.
- The `substringExistsInRestOfString` function checks if the current substring appears again in the input string after the current index.
- If a repeat is found, it updates the longest repeated substring length and breaks out of the inner loop.
- Finally, the length of the longest repeated substring is printed. 

This pseudocode is structured to be easily understood, conveying the logic clearly without delving into programming language specifics.
