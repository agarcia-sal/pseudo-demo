**Purpose Summary**: The code aims to determine the length of the longest substring within a given string that appears more than once.

---

**Pseudocode**:

1. **Start the program**.
  
2. **Read Input**:
   - Get a string from user input (removing the last character, typically a newline).
   - Store the length of this string in a variable named `lengthOfInput`.

3. **Initialize Variable**:
   - Set `longestRepeatedSubstringLength` to 0 to keep track of the length of the longest substring found.

4. **Loop Through Substring Lengths**:
   - For each integer `lengthFromZero` starting from 0 up to (but not including) `lengthOfInput`:
     - **Loop for Each Starting Character Index**:
       - For each index `currentIndex` from 0 up to (but not including) `lengthOfInput`:
         - **Extract a Substring**:
           - Create a substring called `subString` that starts from `currentIndex` and has a length of `lengthFromZero`.
         - **Check for Duplicate**:
           - If the substring exists again in the string starting from the index just after `currentIndex`:
             - Set `longestRepeatedSubstringLength` to `lengthFromZero`.
             - **Break out of the inner loop** (stop checking further indices as we've found a duplicate for this length).

5. **Output Result**:
   - Print the `longestRepeatedSubstringLength`.

6. **End the program**.

---

**Key Steps Simplified**:
- Input handling is done by reading the string and calculating its length.
- The program checks every possible substring of increasing lengths to see if it appears more than once.
- The output is simply the maximum length of substrings that are found to be repeated. 

This structure maintains clarity and intent while being easy to follow, even for those not familiar with programming syntax.
