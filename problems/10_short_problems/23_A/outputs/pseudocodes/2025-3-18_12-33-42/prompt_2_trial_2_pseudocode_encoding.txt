**Pseudocode:**

1. **Input:** 
   - Read a line of text from the standard input, removing any trailing newline character. Store this line in a variable named `inputString`.
   - Determine the length of `inputString` and store it in a variable named `stringLength`.
   - Initialize a variable `longestRepeatedSubstringLength` to zero, which will hold the length of the longest repeated substring found.

2. **Process:** 
   - Loop over each possible substring length `currentLength` from 0 up to `stringLength - 1`.
     - For each `currentLength`, loop over each starting position `startIndex` from 0 to `stringLength - currentLength`.
       - Extract a substring from `inputString`, starting at `startIndex` and having a length of `currentLength`.
       - Check if this substring appears again in `inputString`, starting from the position immediately after `startIndex`.
         - If this substring is found in the rest of `inputString`, update `longestRepeatedSubstringLength` to the value of `currentLength` and exit the inner loop as we have found a repeated substring of this length.

3. **Output:**
   - After completing the loops, print the value of `longestRepeatedSubstringLength`, which represents the length of the longest repeated substring found in `inputString`.
