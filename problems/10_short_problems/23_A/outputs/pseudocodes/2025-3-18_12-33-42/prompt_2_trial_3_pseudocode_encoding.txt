**Pseudocode:**

1. **Start Program**
  
2. **Read Input:**
   - Obtain a line of text from the user and remove the last character (often a newline).

3. **Determine Length:**
   - Calculate the length of the input line and store it in a variable named `lengthOfLine`.

4. **Initialize Variable:**
   - Set a variable `longestSubstringLength` to zero. This variable will store the length of the longest repeated substring found.

5. **Iterate Over Possible Substring Lengths:**
   - For each possible length `currentSubstringLength` from 0 to `lengthOfLine - 1`:
   
     a. **Check for Repeated Substrings:**
        - For each starting index `startIndex` from 0 to `lengthOfLine - 1`:
          
          i.  Extract a substring from the input line that begins at `startIndex` and has a length of `currentSubstringLength`. 

          ii. Check if this substring appears again in the line, starting from the position right after `startIndex` (the index is `startIndex + 1`).
          
          iii. If this substring is found again:
              - Update `longestSubstringLength` to the value of `currentSubstringLength`.
              - Break out of the inner loop to stop checking for more occurrences of the current substring length.

6. **Output Result:**
   - Print the value of `longestSubstringLength`, which represents the length of the longest repeated substring found in the input line.

7. **End Program** 

This pseudocode provides an overview of the intended logic without getting into the specifics of programming syntax, presenting a clear flow of data and operations.
