Here's the high-level pseudocode that translates the provided Python code:

```
FUNCTION findLongestRepeatedSubstring(inputString)
    INITIALIZE lengthOfString AS the length of inputString
    INITIALIZE longestRepeatedLength AS 0

    FOR length FROM 0 TO lengthOfString - 1 DO
        FOR index FROM 0 TO lengthOfString - 1 DO
            SET substring AS the substring of inputString from index to index + length
            
            IF substring can be found in inputString starting from index + 1 THEN
                SET longestRepeatedLength AS length
                BREAK OUT OF inner FOR loop
            END IF
        END FOR
    END FOR

    RETURN longestRepeatedLength
END FUNCTION

// Main Program
READ inputString FROM standard input
CALL findLongestRepeatedSubstring(inputString)
PRINT result
```

### Context and Explanation:
1. **Purpose**: The pseudocode's objective is to determine the length of the longest repeated substring within a given string input by checking if any substring of a given length can be found elsewhere in the string.

2. **Variables**:
   - `inputString`: The string we are analyzing.
   - `lengthOfString`: The total number of characters in `inputString`.
   - `longestRepeatedLength`: The variable used to store the longest length of a substring found more than once.

3. **Control Structures**:
   - Two nested loops are utilized: the outer loop iterates over possible substring lengths, and the inner loop iterates through the start indices of these substrings.

4. **Search Logic**:
   - For each possible substring identified by the current `index` and `length`, the code checks if this substring appears again later in the string (starting from just after its own position using `index + 1`).

5. **Output**: The expected output of this pseudocode is the length of the longest repeating substring found in the input string. 

This pseudocode streamlines the original implementation and maintains clarity while laying out the logic effectively.
