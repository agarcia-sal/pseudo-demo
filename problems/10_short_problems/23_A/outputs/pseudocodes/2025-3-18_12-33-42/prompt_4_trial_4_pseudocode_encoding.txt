```plaintext
BEGIN

// Read a line of input from standard input and remove the trailing newline character
input_line = READ_INPUT()  // Example: "banana"
length_of_input = LENGTH(input_line)
result_value = 0

// Loop through possible lengths of substrings from 0 to n-1
FOR substring_length FROM 0 TO (length_of_input - 1) DO
    
    // Loop through each starting index of the input string
    FOR start_index FROM 0 TO (length_of_input - 1) DO
        
        // Extract the substring from the input line
        current_substring = EXTRACT_SUBSTRING(input_line, start_index, substring_length)
        
        // Check if the substring appears again in the input string after the current starting index
        IF FIND_SUBSTRING(input_line, current_substring, start_index + 1) IS NOT -1 THEN
            result_value = substring_length  // Update result_value with current substring length
            BREAK  // Exit the inner loop as we found a match
        ENDIF
        
    ENDFOR  // End of inner loop for starting index
    
END FOR  // End of outer loop for substring length

// Output the result value, which is the maximum length of the repeating substring
PRINT(result_value)

END
```
### Comments:
- `READ_INPUT()`: Placeholder for reading input from standard input.
- `LENGTH()`: Represents calculating the length of the input string.
- `EXTRACT_SUBSTRING(input, start, length)`: Descriptive function to get a substring starting from a given index with a specified length.
- `FIND_SUBSTRING(input, substring, start_index)`: Represents checking if a substring appears in the input string starting from a certain index. 
- The pseudocode is structured to clearly convey the overall logic and flow of the original code.
