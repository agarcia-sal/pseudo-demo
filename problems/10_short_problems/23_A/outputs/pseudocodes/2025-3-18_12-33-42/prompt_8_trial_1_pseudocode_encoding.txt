**Purpose Summary**:  
The goal of this program is to determine the length of the longest substring within a given string that appears more than once.

**Pseudocode**:

1. **Read Input**:  
   Obtain a line of text from standard input, which will be referred to as `inputString`.

2. **Initialize Variables**:  
   Set `lengthOfString` to the total number of characters in `inputString`.  
   Set `longestRepeatedSubstringLength` to 0, which will store the length of the longest substring that occurs more than once.

3. **Outer Loop for Substring Length**:  
   For each integer `substringLength` from 0 to `lengthOfString - 1`:
   
   4. **Inner Loop for Starting Index of Substring**:  
      For each integer `startIndex` from 0 to `lengthOfString - 1`:
      
      5. **Extract Substring**:  
         Identify the substring `currentSubstring` starting from `startIndex` with a length of `substringLength + 1`.

      6. **Find Substring in String**:  
         Check if the `currentSubstring` can be found in `inputString` starting from the index `startIndex + 1`.  
         If it does exist:
            - Set `longestRepeatedSubstringLength` to `substringLength + 1`.
            - Break out of the inner loop since the current substring has been found.

8. **Output Result**:  
   Print the value of `longestRepeatedSubstringLength`, which represents the length of the longest repeated substring.

**Annotations**: 
- The `inputString` is the string provided by the user.
- The `substringLength` is incremented in the outer loop to explore different substring lengths.
- Each substring is checked starting from every position to ensure it is not overlapping with its own occurrence.

This approach effectively checks for repeated sequences of characters in the given string by systematically examining all potential substrings. It primarily relies on string searching and indexing techniques to assess the repetitions.
