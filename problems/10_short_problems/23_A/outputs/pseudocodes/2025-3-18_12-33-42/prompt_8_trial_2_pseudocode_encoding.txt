### Summary of Purpose
The code's main objective is to find the length of the longest substring that can be found more than once in a given input line of text.

### Pseudocode

1. **Start Program**
   
2. **Read Input:**
   - Read a line of text from standard input, removing the last character (usually a newline).
   - Store the length of the line in a variable called `lengthOfLine`.
  
3. **Initialize Variables:**
   - Set a variable `longestRepeatedSubstringLength` to 0 to track the length of the longest repeated substring.

4. **Outer Loop:**
   - For each possible length `currentLength` from 0 to `lengthOfLine - 1`, do the following:

   5. **Inner Loop:**
      - For each starting position `startIndex` from 0 to `lengthOfLine - 1`, check the following:

      6. **Substring Extraction:**
         - Extract the substring starting at `startIndex` and of length `currentLength`.
         
      7. **Check for Repeats:**
         - Search for the same substring starting from the position right after `startIndex` (which is `startIndex + 1`) in the original line.
         
      8. **Update Longest Length:**
         - If the substring is found again:
            - Update `longestRepeatedSubstringLength` to the value of `currentLength`.
            - Exit the inner loop (since we found a repeat for this length).

9. **Output Result:**
   - Print the value of `longestRepeatedSubstringLength` indicating the length of the longest substring found multiple times.

### Comments for Clarity
- The outer loop iterates through all possible lengths of substrings.
- The inner loop examines each starting point for the substrings of the current length.
- Searching for the substring again ensures we check for repeats, leading to the desired result.

### Example Flow
- For an input "banana", the program would check lengths starting from 0 to 5 and find that "an" of length 2 is repeated, thus returning 2 as the output.

This pseudocode provides a clear and accessible breakdown of the given code while maintaining the logic and intent.
