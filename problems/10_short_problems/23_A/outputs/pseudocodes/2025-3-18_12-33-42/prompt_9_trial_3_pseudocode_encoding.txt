**Purpose:** The goal of this algorithm is to find the length of the longest substring in a given input string that appears more than once.

**Pseudocode:**

1. **Accept Input:**
   - Read a line of text from standard input, removing any trailing newline character.

2. **Initialize Variables:**
   - Set the total length of the input string as `totalLength`.
   - Create a variable `longestRepeatedLength` and initialize it to 0 to store the length of the longest repeated substring.

3. **Iterate Over Possible Substring Lengths:**
   - For each potential substring length `currentLength` from 0 to `totalLength - 1`:
     - For each starting position `startIndex` from 0 to `totalLength - 1`:
       - Extract the substring from `startIndex` of length `currentLength`.
       - Check if this substring appears again in the input string starting from one position after `startIndex`.
       - If this substring is found again:
         - Update `longestRepeatedLength` to `currentLength`.
         - Break the inner loop to stop searching for other substrings of this length.

4. **Output Result:**
   - Print the value of `longestRepeatedLength`, which represents the length of the longest substring that appears more than once.

**Summary of Logic Flow:**
- The algorithm first scans through all possible lengths for substrings.
- For each length, it checks every possible starting point in the input string for repeating substrings.
- If a repeated substring of the current length is found, it updates the result and proceeds to check shorter lengths.
- The final output is the length of the longest found repeated substring.
