### Purpose
The primary goal of this code is to find the length of the longest substring within a given string that appears at least twice.

### Pseudocode

1. **Start Program**
   
2. **Read Input**
   - Get a line of text from user input, removing the trailing newline character.
   - Store this text in a variable called `inputString`.

3. **Initialize Variables**
   - Calculate the length of `inputString` and store it in a variable called `lengthOfInput`.
   - Create a variable called `longestRepeatedLength` and set it to 0.

4. **Loop Through Possible Substring Lengths**
   - For each length `currentLength` from 0 to `lengthOfInput - 1`:
     - **Inner Loop for Substring Checking**
       - For each index `startIndex` from 0 to `lengthOfInput - 1`:
         - Extract a substring called `currentSubstring` that starts at `startIndex` and has a length of `currentLength`.
         - Check if `currentSubstring` appears again in `inputString`, starting from the position after `startIndex`.
           - If it does:
             - Update `longestRepeatedLength` to `currentLength`.
             - Exit the inner loop since we found a repeat for this length.
       
5. **Output Result**
   - Print the value of `longestRepeatedLength`, which represents the length of the longest repeated substring found.

### Comments for Clarity
- The outer loop iterates through every possible length of substrings.
- The inner loop checks if any substring of the current length exists after its starting position.
- The program updates and captures the maximum length of matched substrings found throughout all iterations.

### Example Structure
- Pseudocode breaks down the logic into readable steps, with clear variable names indicating their purpose for those unfamiliar with programming syntax.
