**Summary of Purpose:**  
The code aims to find the length of the longest substring that appears more than once in a given string. 

**Pseudocode:**

```
# Read a line of input and remove the trailing newline character
inp = ReadLineFromInput().TrimNewline()

# Determine the length of the input string
inp_len = DetermineLengthOf(inp)

# Initialize a variable to store the length of the longest repeating substring
lon = 0

# Iterate through possible lengths of substrings starting from 0 up to the length of the input
For sub from 0 to inp_len - 1 do:
    # Check every starting index in the string for the given substring length
    For star from 0 to inp_len - 1 do:
        # Extract the current substring from the input string
        cur = ExtractSubstring(inp, star, sub)

        # If the substring is found again starting from the next index
        If FindIndexOf(inp, cur, star + 1) is not -1 then:
            # Update the longest repeating length if a longer substring is found
            lon = sub
            Break  # Exit the inner loop and check the next substring length

# Output the length of the longest repeating substring
Output(lon)
```

**Comments for Clarity:**
- **ReadLineFromInput()**: A function to read a line from standard input.
- **TrimNewline()**: Removes the newline character from the end of the string.
- **DetermineLengthOf()**: Returns the length of the input string.
- **ExtractSubstring(inp, star, sub)**: Returns the substring starting from `star` with the given `sub`.
- **FindIndexOf(inp, substring, start)**: Searches for the substring starting from a specified index in the input string and returns the index if found, otherwise -1.
- **Output(value)**: Displays the final value. 

This pseudocode presents a clear set of instructions reflecting the original code's logic while ensuring it remains accessible to readers unfamiliar with programming syntax.
