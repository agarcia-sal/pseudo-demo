**Purpose**: The goal of this program is to find and print the smallest non-negative integer that meets specific conditions based on its triangular numbers in relation to a given input number.

**Pseudocode**:

1. **Receive Input**: 
   - Get a number from the user and store it as an absolute integer called `inputNumber`.

2. **Initialize Counter**: 
   - Create a variable called `counter` and set it to 0. This will be used to track the current integer being processed.

3. **Start an Infinite Loop**: 
   - Repeat the following actions indefinitely until a condition is met to exit the loop:
   
   1. **Calculate Triangular Number**: 
      - Compute the triangular number for `counter` using the formula: 
        - `triangularNumber` = `counter` * (`counter` + 1) / 2.
        
   2. **Calculate Difference**:
      - Compute the difference `difference` as:
        - `difference` = `triangularNumber` - `inputNumber`.

   3. **Check for Exact Match**:
      - If `triangularNumber` is equal to `inputNumber`, then:
        - Print `counter`.
        - Break out of the loop.

   4. **Check for Exceeding Input**:
      - If `triangularNumber` is greater than `inputNumber`, then:
        - If `difference` is even, then:
          - Print `counter`.
          - Break out of the loop.

   5. **Increment Counter**:
      - Increase `counter` by 1 for the next iteration.

**End of Pseudocode**.

### Explanation:
- The program computes triangular numbers (which are sums of the first `n` integers) sequentially and checks if they match or exceed the input number in specific ways.
- If a triangular number exactly matches the input, it is printed. Alternatively, if a triangular number exceeds the input but the difference is even, it meets the required condition for output.
- The loop continues until one of these conditions is satisfied, ensuring the smallest integer that meets either condition is found and displayed.
