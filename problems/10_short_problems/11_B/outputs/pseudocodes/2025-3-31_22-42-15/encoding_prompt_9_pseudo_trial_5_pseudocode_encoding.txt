**Purpose:** The goal of this algorithm is to find the smallest non-negative integer `i` such that the sum of the first `i` integers equals a given non-negative integer `n`, or if that sum exceeds `n`, whether the surplus can be evenly split into two parts.

---

**Pseudocode:**

1. **Receive Input:**
   - Get a non-negative integer value from the user and store it in a variable called `targetSum`.

2. **Initialize Variables:**
   - Set a variable `currentIndex` to 0, which will keep track of the current integer being processed.

3. **Infinite Loop:**
   - Continue the following steps indefinitely until a solution is found:
     1. **Calculate the Sum:**
        - Compute the sum of the first `currentIndex` integers. This is done by using the formula:
          - `currentSum = (currentIndex * (currentIndex + 1)) / 2`
     
     2. **Calculate the Difference:**
        - Determine the surplus by subtracting `targetSum` from `currentSum`:
          - `surplus = currentSum - targetSum`

     3. **Check for Exact Match:**
        - If `currentSum` equals `targetSum`:
          - Print `currentIndex` (the current integer) as the solution and exit the loop.

     4. **Check for Surplus Condition:**
        - If `currentSum` exceeds `targetSum`:
          - Check if the surplus can be evenly divided by 2:
            - If the surplus is divisible by 2 (surplus modulo 2 equals 0):
              - Print `currentIndex` as the solution and exit the loop.
      
     5. **Increment Index:**
        - Increase `currentIndex` by 1 to check the next integer.

---

**Output:**
- The program outputs the smallest integer `i` that either satisfies the exact sum condition or meets the condition of split surplus into two equal parts.
