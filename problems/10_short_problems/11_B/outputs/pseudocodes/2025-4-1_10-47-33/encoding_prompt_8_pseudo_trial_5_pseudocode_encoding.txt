**Purpose:** The goal of this code is to find a non-negative integer that satisfies specific mathematical conditions related to triangular numbers, derived from user input. 

---

**Pseudocode:**

1. **Start the Program**
   - Capture user input and convert it to a non-negative integer.
   - Store the absolute value of input as `inputValue`.

2. **Initialize a Counter**
   - Set a counter named `currentIndex` to 0.

3. **Create an Infinite Loop for Calculation**
   - Repeat the following steps indefinitely:

      a. **Calculate the Triangular Number**
         - Compute the triangular number `triangularSum` for the current index:
           - `triangularSum` equals the sum of all integers from 1 to `currentIndex`, calculated as `(currentIndex * (currentIndex + 1)) / 2`.

      b. **Determine the Difference**
         - Calculate the difference `difference` between the `triangularSum` and `inputValue`:
           - `difference` equals `triangularSum - inputValue`.

      c. **Check for Exact Match**
         - If `triangularSum` is equal to `inputValue`:
            - Output the value of `currentIndex` (this is the result).
            - Exit the loop.

      d. **Check for Condition When Triangular Sum Exceeds Input Value**
         - If `triangularSum` is greater than `inputValue`:
            - If the `difference` is even (i.e., `difference` mod 2 equals 0):
               - Output the value of `currentIndex` (this is also a valid result).
               - Exit the loop.

      e. **Increment the Counter**
         - Increase the value of `currentIndex` by 1.

4. **End the Program**

---

**Comments for Clarity:**
- The triangular number is the sum of the first `n` integers. 
- The program uses a counter approach to generate these numbers and checks conditions related to the given user input.
- The loop continues until it finds either an exact match or identifies a valid triangular number condition based on parity (evenness) of the difference.

By structuring the pseudocode this way, it remains accessible to readers who might not be familiar with programming concepts while still conveying the logic of the original code effectively.
