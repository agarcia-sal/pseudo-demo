**Purpose:**  
The goal of this algorithm is to find a non-negative integer that fits specific mathematical conditions involving a triangular number and an integer input.

**Pseudocode:**

1. **Get User Input:**
   - Prompt the user to enter a number.
   - Convert the user input to a positive integer, storing it as `targetValue`.

2. **Initialize Variables:**
   - Set `index` to 0 (this will be used to track the current triangular number being evaluated).

3. **Infinite Loop:**
   - While true, repeat the following steps:

     a. **Calculate Triangular Number:**
        - Compute the triangular number for `index` using the formula:  
          `triangularNumber = (index * (index + 1)) / 2`
        
     b. **Calculate Difference:**
        - Compute the difference between the triangular number and the target value:  
          `difference = triangularNumber - targetValue`

     c. **Check for Exact Match:**
        - If `triangularNumber` equals `targetValue`:
            - Print the value of `index`.
            - Exit the loop.
         
     d. **Check for Greater Value:**
        - If `triangularNumber` is greater than `targetValue`:
          - If `difference` is even:
              - Print the value of `index`.
              - Exit the loop.

     e. **Increment Index:**
        - Increase `index` by 1.

**Output:**
- The output will be the value of `index` when one of the conditions for matching the triangular number is satisfied, either through an exact match or through an even difference from the target value.
