**Purpose:**  
This algorithm finds the smallest non-negative integer \( i \) such that the sum of the first \( i \) integers equals a given non-negative integer \( n \), or can be expressed as the difference of the sum and \( n \) being an even number.

**Pseudocode:**  

1. **Get Input:**
   - Prompt the user to enter a number.
   - Convert the input to an absolute integer and store it as the variable `targetValue`.

2. **Initialize Variables:**
   - Set a variable `index` to 0.

3. **Loop Indefinitely:**
   - Repeat the following steps until a condition is met:
     - Calculate the sum of the first `index` integers and store it in `currentSum` using the formula: 
       \[
       currentSum = \frac{index \times (index + 1)}{2}
       \]
     - Calculate the difference between `currentSum` and `targetValue` and store it in `difference`.
     
     - **Check Conditions:**
       - **If** `currentSum` is equal to `targetValue`:
         - Print the value of `index`.
         - Exit the loop.
       - **Else If** `currentSum` is greater than `targetValue`:
         - **If** `difference` is even:
           - Print the value of `index`.
           - Exit the loop.
     
     - Increment `index` by 1.

**Output:**  
The program outputs the smallest non-negative integer \( i \) that meets the specified conditions.
