Here's the pseudocode that translates the provided code into a clearer, more understandable format:

```plaintext
// Input: Read an integer value n from the user
READ n

// Initialize a list of boolean values to True, representing an array of size n
CREATE a boolean list called isActive of size n, all set to True

// Initialize the variables
SET currentIndex to 0
SET increment to 1

// Loop until increment exceeds 500,000
WHILE increment is less than or equal to 500,000 DO
    // If the current index in isActive is True, set it to False
    IF isActive[currentIndex] is True THEN
        SET isActive[currentIndex] to False
    END IF
    
    // Increment the currentIndex by the value of increment
    // and wrap it around using modulo n to stay within bounds
    SET currentIndex to (currentIndex + increment) MODULO n
    
    // Increment the increment value for the next iteration
    INCREMENT increment by 1
END WHILE

// Create a new list that contains only the True values from isActive
SET activeCount to the count of items in isActive that are True

// If no active items are found, print 'YES', otherwise print 'NO'
IF activeCount is equal to 0 THEN
    PRINT 'YES'
ELSE
    PRINT 'NO'
END IF
```

### Explanation:
- The pseudocode starts by reading an integer input `n` and then initializes a boolean list indicating the active status of positions in that range.
- A loop runs to update the list by setting certain entries to `False` based on the index calculations, effectively simulating a specific pattern.
- After the loop, the algorithm checks how many `True` values remain and prints `YES` if none are found and `NO` otherwise. This reflects the overall logic of determining the output based on the modified state of the list.
