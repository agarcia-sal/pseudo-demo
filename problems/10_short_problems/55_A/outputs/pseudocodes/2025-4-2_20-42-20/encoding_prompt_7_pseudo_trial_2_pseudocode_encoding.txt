Here's a high-level pseudocode representation of the provided code:

```
FUNCTION checkNumbersUpTo(n)
    // Initialize a list to keep track of numbers
    INITIALIZE booleanList as a list of TRUE with length n
    
    // Initialize indices for tracking
    INITIALIZE currentIndex as 0
    INITIALIZE iterationCounter as 1
    
    // Start iterating up to a maximum of 500000
    WHILE iterationCounter <= 500000 DO
        // If the current index is marked as TRUE, mark it as FALSE
        IF booleanList[currentIndex] is TRUE THEN
            SET booleanList[currentIndex] to FALSE
        END IF
        
        // Move to the next index
        INCREMENT iterationCounter by 1
        SET currentIndex to (currentIndex + iterationCounter) MOD n
    END WHILE
    
    // Filter the list to find all still TRUE values
    INITIALIZE remainingTrueValues as a list of elements from booleanList where value is TRUE
    
    // Check if there are any TRUE values left
    IF length of remainingTrueValues is 0 THEN
        PRINT 'YES'
    ELSE
        PRINT 'NO'
    END IF
END FUNCTION

// Read an integer input for n
SET n to the integer value of user input
CALL checkNumbersUpTo(n)
```

### Explanation of High-Level Pseudocode
1. **Function Definition:** The function `checkNumbersUpTo` takes an integer `n` as input, which reflects our original code's input requirement.

2. **Initialization:** The pseudocode initializes a list to track boolean values, similar to the original code.

3. **Control Flow:** It reflects the main iteration done in a `while` loop which runs a maximum of `500,000` times, encapsulating the logic of marking index entries.

4. **Condition Check and Update:** For every iteration, if the value at the current index is `TRUE`, it is set to `FALSE`, and the current index is updated based on the iteration count, using modulo `n` to wrap around.

5. **Results Evaluation:** The section that filters the boolean list to find remaining `TRUE` values is clearly explained, leading to a simple conditional check for the length of this filtered list, subsequently leading to an output of 'YES' or 'NO'.

This pseudocode maintains a high level of abstraction while clearly communicating the overall algorithm structure and intent of the original code.
