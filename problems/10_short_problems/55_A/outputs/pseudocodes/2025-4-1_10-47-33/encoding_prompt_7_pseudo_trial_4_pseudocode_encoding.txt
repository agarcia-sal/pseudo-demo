Here is the high-level pseudocode based on the provided Python code:

```
FUNCTION checkCondition(n)
    INITIALIZE a list 'isActive' of size n with all values set to True
    SET index to 0
    SET increment to 1
    
    WHILE increment is less than or equal to 500000 DO
        IF isActive[index] is True THEN
            SET isActive[index] to False
        END IF
        
        INCREMENT increment by 1
        UPDATE index to (index + increment) MOD n
    END WHILE

    INITIALIZE a list 'activeElements' with all elements from isActive that are True
    IF the length of activeElements is zero THEN
        PRINT 'YES'
    ELSE
        PRINT 'NO'
    END IF
END FUNCTION
```

### Explanation of the Pseudocode:
- **Function Definition:** The pseudocode starts by defining a function called `checkCondition`, which takes an integer `n` as input.
- **Initialization:** A list `isActive` is created with `n` elements all initialized to `True`, representing active states. Two variables, `index` and `increment`, are also initialized.
- **Main Loop:** The function enters a loop that runs until `increment` exceeds 500,000. Inside the loop, it checks the status of the element at the current `index`.
- **Condition Check and Update:** If `isActive[index]` is `True`, it sets that element to `False`, indicating it is now inactive. The `increment` is then increased, and the `index` is updated using a modular operation to wrap around the list.
- **Result Compilation:** After the loop, it creates a list called `activeElements` containing only the elements from `isActive` that are still `True`.
- **Final Decision:** Based on the length of `activeElements`, it prints 'YES' if there are no active elements left, otherwise it prints 'NO'.

This pseudocode effectively interprets and abstracts the logic of the original program while providing clear explanations for each part of the process.
