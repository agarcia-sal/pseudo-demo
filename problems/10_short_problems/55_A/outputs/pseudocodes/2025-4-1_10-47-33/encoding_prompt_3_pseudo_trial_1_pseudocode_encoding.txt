Here's the structured pseudocode based on the provided code snippet. This pseudocode captures the intent and logic while avoiding specific programming syntax.

```
BEGIN

    // Step 1: Read an integer input representing the size of the list
    SET listSize TO integer input

    // Step 2: Initialize a list of boolean values, all set to True
    CREATE boolean list 'isActive' of length listSize, initialized with True

    // Step 3: Initialize control variables
    SET indexIncrement TO 1
    SET currentIndex TO 0

    // Step 4: Iterate through a range up to 500000
    WHILE currentIndex <= 500000 DO

        // Step 5: Check the boolean value at the current index
        IF isActive[currentIndex] IS True THEN
            // Mark the current index as inactive
            SET isActive[currentIndex] TO False
        ENDIF

        // Step 6: Update the index values
        INCREMENT indexIncrement by 1
        UPDATE currentIndex TO (currentIndex + indexIncrement) MOD listSize
    ENDWHILE

    // Step 7: Extract all True values from the isActive list
    CREATE list 'activeElements' CONTAINING elements from isActive WHERE element IS True

    // Step 8: Check if the activeElements list is empty
    IF LENGTH(activeElements) IS EQUAL TO 0 THEN
        // If there are no active elements, print YES
        PRINT 'YES'
    ELSE
        // If there are active elements, print NO
        PRINT 'NO'
    ENDIF

END
```

### Explanation of the Pseudocode:
- The pseudocode begins by stating the purpose of reading an integer, followed by initializing a boolean list.
- It sets up a loop that continues until a certain condition is met (up to 500,000).
- The control structures, including the loop and conditional checks, are articulated clearly, illustrating the logic without specific language syntax.
- The end section explains the creation of a new list based on the boolean values and includes the logic for determining the output.
- Overall, the pseudocode is designed to maintain clarity and accessibility for anyone reviewing the logic, regardless of their familiarity with programming languages.
