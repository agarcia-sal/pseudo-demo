**Objective**: The purpose of the provided code is to convert a specific string of characters representing a sequence of dots and other characters into a numerical representation based on predefined rules.

**Pseudocode**:

```
1. Start the program
2. Read a line of input from the user and remove any surrounding whitespace
   - Store the input in a variable called 'inputString'
3. Initialize a variable 'index' to 0 to track our position in 'inputString'
4. Initialize an empty string 'result' to build the output

5. While the 'index' is less than the length of 'inputString':
   a. If the character at 'inputString[index]' is a dot ('.'):
      - Append '0' to 'result'
      - Increment 'index' by 1 (move to the next character)
   b. Else if the character following 'inputString[index]' (that is, 'inputString[index + 1]') is a dot ('.'):
      - Append '1' to 'result'
      - Increment 'index' by 2 (skip the next character as it is part of this pattern)
   c. Else:
      - Append '2' to 'result' (indicating a different pattern)
      - Increment 'index' by 2 (skip the next character as well)

6. After processing the input string, print the 'result'
7. End the program
```

### Explanation:
- **Input Handling**: The program starts by reading a line from the user's input and cleans it up.
- **Looping through Characters**: It checks each character (and possibly the next one) to determine how to build the output string.
- **Conditional Logic**: It uses simple conditions to decide if it should append '0', '1', or '2' to the result based on the patterns found in the input.
- **Incrementing Index**: Depending on the recognized pattern, the 'index' moves forward either by 1 or 2 characters to avoid re-evaluating already processed characters.
- **Final Output**: Once all characters have been processed, the resulting numerical string is printed.
