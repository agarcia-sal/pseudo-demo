**Pseudocode Representation:**

1. **Input**: 
   - Read a line of input from the user and store it in a variable named `inputString`. 
   - Remove any leading and trailing whitespace from `inputString`.

2. **Initialize Variables**: 
   - Set a variable `index` to 0 to keep track of our position in the input string.
   - Create an empty string `outputString` to store the result.

3. **Process the Input**:
   - While `index` is less than the length of `inputString`:
     - If the character at the current `index` in `inputString` is a dot ('.'):
       - Append '0' to `outputString`.
       - Move `index` forward by 1 (to check the next character).
     - Otherwise, if the next character (character at `index + 1`) is a dot ('.'):
       - Append '1' to `outputString`.
       - Move `index` forward by 2 (to skip both current and next character).
     - Otherwise (neither condition is met):
       - Append '2' to `outputString`.
       - Move `index` forward by 2 to skip both current and next character.

4. **Output**:
   - Print the content of `outputString`.

**Summary of Logic**:
- The code reads a string and interprets its characters based on specific patterns involving dots. 
- A single dot translates to '0', while a dot followed by another character translates to '1', and a character followed by a non-dot translates to '2'. 
- The process continues until the entire input string has been evaluated, resulting in a corresponding output string that reflects these interpretations.
