### Purpose Summary
The goal of this code is to convert a specific string of characters into a corresponding numerical string based on certain rules. The characters used are '.' and '-' where the sequence of these characters dictates which numbers are generated.

### Pseudocode

**Start Program**
1. Accept the input string from the user and remove any surrounding spaces.
   - **Input:** Read input string `s`.
   - **Output:** Clean the input string by removing spaces around it.

2. Initialize a variable to keep track of the position in the string.
   - Set `position` to 0.

3. Initialize an empty string to store the resulting numbers.
   - Set `result` to an empty string.

4. **While Loop:** Continue processing as long as the `position` is less than the length of the string.
   - **Condition:** If `position` is less than the length of `s`, repeat the following steps.

   4.1. **If Condition 1:** Check if the character at the current `position` is '.'.
       - If true:
         - Append '0' to `result`.
         - Move to the next character by increasing `position` by 1.

   4.2. **Else If Condition 2:** Check if the next character (at `position + 1`) is '.'.
       - If true:
         - Append '1' to `result`.
         - Move forward by two characters by increasing `position` by 2.

   4.3. **Else:** 
       - This indicates that the current character is not '.' and the next one is also not '.' (assumed to be '-').
         - Append '2' to `result`.
         - Move forward two characters by increasing `position` by 2.
  
5. Print the final result string.
   - **Output:** Display the `result`.

**End Program**

### Comments for Clarity
- The characters '.' and '-' are respectively used to generate the numbers '0', '1', and '2'.
- When encountering one '.', the resultant digit is '0'.
- When encountering a sequence of two '.' (i.e., '.-'), the resultant digit is '1'.
- When encountering two '-' together (i.e., '--'), the resultant digit is '2'.

### Example Input and Output
- **Input:** ".-..--" (imagine this as input from the user)
- **Output:** "012" (this corresponds to the transformations based on the defined rules) 

This pseudocode structure provides a clear, concise, step-by-step representation of the original Python code logic while ensuring accessibility for readers who may not be familiar with programming syntax.
