```pseudocode
BEGIN

    // Read input from user
    SET inputString = ReadLine().Trim() 

    // Initialize index and the answer string
    SET currentIndex = 0
    SET resultString = ''

    // Process the input string until the end
    WHILE currentIndex is less than the length of inputString DO
        // Check for conditions based on characters in the input string
        IF character at inputString[currentIndex] is '.' THEN
            // Add '0' to the result for a single dot
            Append '0' to resultString
            Increment currentIndex by 1
        
        ELSE IF character at inputString[currentIndex + 1] is '.' THEN
            // Add '1' to the result for two consecutive dots
            Append '1' to resultString
            Increment currentIndex by 2
        
        ELSE
            // Handle other cases (e.g., when next character isn't a dot)
            Append '2' to resultString
            Increment currentIndex by 2
        END IF
    END WHILE

    // Output the resulting string
    Print resultString

END
``` 

### Explanation:
1. **Input Handling:** The pseudocode starts by reading a string input and trimming any extra spaces.
2. **Initialization:** Variables to track the current position in the string and to store the output are set up.
3. **Main Logic:** A loop processes the string based on specific conditions involving dots and updates the output string appropriately.
4. **Output:** Finally, the resultant string is printed as the output. 

This structured format clearly showcases the flow and logic while avoiding programming syntax, making it understandable for non-programmers.
