### Purpose
The primary goal of this program is to convert a string of specific characters (dots and additional characters) into a numerical representation based on a defined set of rules.

### Pseudocode

1. **Start Program**  
   Initialize program execution.

2. **Read Input**
   - Obtain a line of input and remove any extra spaces around it.
   - Store this input in a variable named `inputString`.

3. **Initialize Variables**
   - Set a variable `index` to 0, which will track our position within `inputString`.
   - Create an empty string `result` to accumulate the output numbers.

4. **Process Input Characters**
   - While `index` is less than the length of `inputString`, do the following:
     - **If the character at `inputString[index]` equals a dot:**  
       - Append '0' to `result`.
       - Increment `index` by 1.
     - **Else If the next character at `inputString[index + 1]` equals a dot:**  
       - Append '1' to `result`.
       - Increment `index` by 2.
     - **Otherwise:**  
       - Append '2' to `result`.
       - Increment `index` by 2.

5. **Output the Result**
   - Print the final accumulated string `result`.

### Comments for Clarity
- The program uses a `while` loop to examine each character of `inputString` until all characters are processed.
- The decision structure inside the loop determines how to update `result` based on the characters encountered.
- The program assumes that the input will always have a proper format that allows safe access to `inputString[index + 1]`.

### Example Structures
This pseudocode effectively follows a structured format:
- It begins with an overview of the program's purpose, moves through input handling, processes data with clear logical steps, and concludes with output. 
- Each step logically leads to the next, making it easy for readers to understand the flow of the program without needing programming knowledge.
