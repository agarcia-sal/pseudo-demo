```  
BEGIN  
    // Read input from standard input  
    INPUT string inputSequence from standard input  
    INITIALIZE index to 0  
    INITIALIZE outputString to an empty string  

    // Loop through the input string until the end  
    WHILE index is less than the length of inputSequence DO  
        IF the character at inputSequence[index] is '.' THEN  
            // Append '0' to output for a single '.'  
            APPEND '0' to outputString  
            INCREMENT index by 1  
        ELSE  
            // Check the next character in the sequence  
            IF the character at inputSequence[index + 1] is '.' THEN  
                // Append '1' for the pattern '..'  
                APPEND '1' to outputString  
                INCREMENT index by 2  
            ELSE  
                // Append '2' for the pattern '.-' or similar  
                APPEND '2' to outputString  
                INCREMENT index by 2  
            END IF  
        END IF  
    END WHILE  

    // Print the final output string  
    OUTPUT outputString  
END  
```  

### Explanation of Pseudocode:
- **Input Handling:** The pseudocode begins by reading a string from standard input.
- **Initialization:** It sets up an index to traverse the string and an output string to accumulate results.
- **Loop Structure:** The main logic uses a loop to traverse the input string until all characters are processed.
- **Conditional Checks:** It evaluates the current character and conditionally processes the next character to determine the appropriate value to append to the output string.
- **Output Generation:** Finally, it prints the constructed output string. 

This structure encapsulates the flow of logic clearly and is easy to follow, even for those unfamiliar with the original code's syntax.
