```
FUNCTION convertEncodedStringToDecimal(s)
    // Read input string and remove any extra whitespace
    strippedInputString = TRIM(s)

    // Initialize index and output result variable
    index = 0
    resultString = ''

    // Loop through the input string while there are remaining characters
    WHILE index < LENGTH(strippedInputString) DO
        // Check for the encoding pattern represented by a single dot
        IF strippedInputString[index] EQUALS '.' THEN
            // Append '0' for a single dot
            resultString += '0'
            // Move to the next character
            index += 1
        
        // Check for the encoding pattern represented by two dots
        ELSE IF strippedInputString[index + 1] EQUALS '.' THEN
            // Append '1' for two dots
            resultString += '1'
            // Skip the next character as it's part of the encoding
            index += 2
        
        // If neither pattern matches, it represents two dots and a dash
        ELSE
            // Append '2' for two dots and a dash
            resultString += '2'
            // Skip the next character as it's part of the encoding
            index += 2
        END IF
    END WHILE

    // Output the final converted result
    PRINT(resultString)
END FUNCTION
``` 

### Summary of Pseudocode Logic
1. **Input Handling**: The function reads an encoded input string consisting of dots (.) and translates it into a numeric string.
2. **Processing Logic**:
   - A single dot (.) translates to '0'.
   - Two consecutive dots (..) translate to '1'.
   - If the pattern does not match those two cases (interpreted as a dot followed by something else), it translates to '2'.
3. **Loop Execution**: It processes the input string until all characters are handled, moving the index accordingly.
4. **Output**: Finally, it prints the resultant decoded string. 

This pseudocode provides a clear and structured overview of the algorithm while abstracting away low-level details and using meaningful identifiers for clarity.
