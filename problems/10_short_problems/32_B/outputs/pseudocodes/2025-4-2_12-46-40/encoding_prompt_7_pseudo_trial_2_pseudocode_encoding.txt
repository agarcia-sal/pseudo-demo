```pseudocode
FUNCTION translateSymbolString(inputString)
    INITIALIZE index as 0
    INITIALIZE resultString as an empty string

    WHILE index is less than the length of inputString DO
        IF the character at inputString[index] is '.' THEN
            APPEND '0' to resultString
            INCREMENT index by 1
        ELSE IF the character at inputString[index + 1] is '.' THEN
            APPEND '1' to resultString
            INCREMENT index by 2
        ELSE
            APPEND '2' to resultString
            INCREMENT index by 2
        END IF
    END WHILE

    RETURN resultString
END FUNCTION

// Read input from the standard input stream
INITIALIZE input from standard input

// Call the translate function and print the result
result = translateSymbolString(input)
PRINT result
```

### Explanation
- **Purpose:** The code aims to translate a string of characters (specifically symbols '.') into a new format based on specific rules.
- **Variables:** The pseudocode uses `inputString` for the input data, `index` to iterate through the string, and `resultString` to build the output.
- **Control Structures:** It uses a while loop to process each segment of input, coupled with conditional statements to decide how to decode the symbols.
- **Input and Output:** It reads a single line of input and produces a transformed string, which is printed as output.
- **Clarity:** The pseudocode employs straightforward language to convey the operations and control flows while avoiding low-level implementation details.
