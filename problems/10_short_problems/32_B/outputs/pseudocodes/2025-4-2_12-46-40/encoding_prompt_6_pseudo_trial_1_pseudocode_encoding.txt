### Pseudocode

```
FUNCTION ConvertDotNotationToNumber 

    // Read input from the user
    READ inputString

    // Initialize index and output variable
    SET index TO 0
    SET outputString TO an empty string

    // Loop through the entire input string
    WHILE index is less than the length of inputString
        // Check if the current character is a single dot
        IF inputString[index] is equal to '.'
            // Append '0' to the output for a single dot
            APPEND '0' to outputString
            // Move to the next character
            INCREMENT index by 1
            
        ELSE 
            // Check the next character
            IF inputString[index + 1] is equal to '.'
                // Append '1' to the output for a pair of dots
                APPEND '1' to outputString
                // Move the index forward by 2 characters
                INCREMENT index by 2
                
            ELSE 
                // Append '2' for a pair where the first is dot and the second is not
                APPEND '2' to outputString
                // Move the index forward by 2 characters
                INCREMENT index by 2
            END IF
        END IF
    END WHILE

    // Output the final result
    PRINT outputString
END FUNCTION
```

### Explanation of the Pseudocode

1. **Function Definition**: The pseudocode begins with the definition of a function called `ConvertDotNotationToNumber`, which encapsulates the overall algorithm.

2. **Input Handling**: It reads a string from user input and initializes necessary variables such as an `index` to keep track of the current position in the string and an `outputString` to store the result.

3. **Loop Structure**: A while loop iterates through the string until the end is reached. 

4. **Conditional Logic**: Inside the loop, various conditions check the characters:
   - If the current character is a dot (`.`), it appends `'0'` to the output and moves the index by one.
   - If the next character is also a dot, it appends `'1'` and moves two indices forward.
   - If neither condition is met, it implies a dot followed by a non-dot, appending `'2'` and moving two indices forward.

5. **Output**: Finally, the completed output string is printed as the result. 

This structure ensures clarity by breaking down each component, making the algorithm easy to follow without any programming language-specific syntax.
