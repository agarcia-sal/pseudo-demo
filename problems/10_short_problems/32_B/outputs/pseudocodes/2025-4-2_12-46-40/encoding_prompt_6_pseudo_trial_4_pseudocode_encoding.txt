```plaintext
BEGIN

    // Read input from standard input and remove any extra spaces or newline characters
    SET inputString TO READ input FROM standard input

    // Initialize index and output string
    SET index TO 0
    SET outputString TO an empty string

    // Process the input string while there are still characters remaining
    WHILE index is less than the length of inputString DO
        
        // Check if the current character is a single dot
        IF character at inputString[index] is a dot THEN
            APPEND '0' to outputString
            INCREMENT index by 1  // Move to the next character
        
        // Check if the next character is also a dot
        ELSE IF character at inputString[index + 1] is a dot THEN
            APPEND '1' to outputString
            INCREMENT index by 2  // Move past the pair of dots
        
        // If neither case is met, we have a dot followed by something else
        ELSE 
            APPEND '2' to outputString
            INCREMENT index by 2  // Move past the pair of characters

    END WHILE

    // Output the final result
    PRINT outputString
  
END
``` 

### Explanation:
1. **Input Handling**: The pseudocode begins with reading input and cleaning it up.
2. **Initialization**: It sets up necessary variables for processing.
3. **Processing Loop**: The main loop checks each character or pair of characters to determine if to append '0', '1', or '2' to the output.
4. **Output**: Finally, it prints the constructed output string. 

This structure maintains clarity while accurately reflecting the logic from the original code.
