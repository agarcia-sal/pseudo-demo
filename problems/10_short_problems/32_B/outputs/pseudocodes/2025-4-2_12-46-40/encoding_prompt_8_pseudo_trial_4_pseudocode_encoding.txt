**Purpose:** The goal of this program is to translate a string of characters representing a specific encoding into a numerical string. The characters include dots and dashes, where each sequence corresponds to a specific digit.

**Pseudocode:**

1. **Read Input:**
   - Get a line of input (a string) and remove any extra spaces or newline characters.
   
2. **Initialize Variables:**
   - Set an index variable `currentPosition` to 0 to track our position in the input string.
   - Create an empty string `result` to store the translated numerical output.
   
3. **Process the Input:**
   - While `currentPosition` is less than the length of the input string:
     - If the character at `currentPosition` is a dot (`.`):
       - Add `0` to the `result`.
       - Move `currentPosition` one step forward.
     - Otherwise, check the next character:
       - If the character after `currentPosition` is also a dot (`.`):
         - Add `1` to the `result`.
         - Move `currentPosition` forward by two steps.
       - If neither condition is met:
         - Add `2` to the `result`.
         - Move `currentPosition` forward by two steps.
    
4. **Output the Result:**
   - Print the `result` string which contains the translated numbers.

**Comments:**
- The program reads an encoded string where a single dot stands for `0`.
- A pair of dots represents `1`, and a sequence that starts with a dash (or equivalently when the next character is neither a dot) represents `2`.
- The input is looped through, updating the index based on the characters detected.

This logical abstraction captures the intent and flow of the original program while being simple enough for those unfamiliar with programming syntax.
