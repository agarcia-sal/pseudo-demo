**Purpose:** The code reads a sequence of characters representing a specific format and converts them into a corresponding numeric string based on defined rules. 

**Pseudocode:**

```plaintext
FUNCTION convertSymbolsToNumbers
    // Step 1: Read input from the user
    INPUT sequenceOfCharacters
    
    // Step 2: Initialize an index and an empty result string
    SET currentIndex TO 0
    SET resultString TO an empty string
    
    // Step 3: Process the input sequence until the end
    WHILE currentIndex is less than the length of sequenceOfCharacters
        // Step 4: Check the current character
        IF character at currentIndex is a dot '.'
            // If it's a dot, convert to '0'
            APPEND '0' to resultString
            INCREMENT currentIndex by 1
        ELSE IF character at next index (currentIndex + 1) is a dot '.'
            // If the next character is a dot, convert to '1'
            APPEND '1' to resultString
            INCREMENT currentIndex by 2
        ELSE
            // If neither is a dot, convert to '2'
            APPEND '2' to resultString
            INCREMENT currentIndex by 2
        END IF
    END WHILE
    
    // Step 5: Output the result
    PRINT resultString
END FUNCTION
```

### Explanation of Steps:

1. **Input:** The function begins by accepting a string of characters which contains dots and possibly other characters.

2. **Initialization:** It sets up an index to track its position in the string and initializes an empty string to build the result.

3. **Processing Loop:** It enters a loop that continues as long as the index is within the bounds of the input string.

4. **Character Evaluation:**
    - If the current character is a dot, it adds '0' to the result and moves to the next character.
    - If the current character is not a dot but the following character is, it adds '1' to the result and skips the next character.
    - If neither condition is met, it adds '2' and skips the next character.

5. **Output:** Finally, the resulting string constructed throughout the process is printed.

### Notes:
- This pseudocode abstracts programming concepts into logical steps that illustrate intentions without delving into programming syntax.
- The comments provide context for each step, making it easier for readers to understand the flow and the purpose of statements.
- It maintains clarity while ensuring that essential operations are conveyed effectively.
