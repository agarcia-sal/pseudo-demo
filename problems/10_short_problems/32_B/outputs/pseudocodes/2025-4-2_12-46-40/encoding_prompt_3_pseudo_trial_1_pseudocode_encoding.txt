Here's the pseudocode that captures the logic of the provided code snippet:

```
BEGIN

    // Read input from standard input and remove any surrounding whitespace
    INPUT string inputString

    // Initialize an index for tracking the current position in the input string
    INITIALIZE index as 0
    
    // Initialize an empty string to store the output result
    INITIALIZE result as an empty string
    
    // While the index is less than the length of the input string
    WHILE index is less than length of inputString DO
        
        // Check if the current character is a dot (.)
        IF character at position index in inputString is '.' THEN
            APPEND '0' to result
            INCREMENT index by 1
            
        // Check if the next character is also a dot (.)
        ELSE IF next character at position index + 1 in inputString is '.' THEN
            APPEND '1' to result
            INCREMENT index by 2
            
        // If the current character is not a dot and the next character is not a dot
        ELSE
            APPEND '2' to result
            INCREMENT index by 2
            
        ENDIF

    ENDWHILE

    // Output the final result
    OUTPUT result

END
```

### Explanation of the Pseudocode:

1. **Input Handling:** The pseudocode begins by reading an input string, similar to how the code reads input from standard input.
  
2. **Variable Initialization:** Two main variables are initialized: `index` for tracking the position in the input string and `result` for building the output.

3. **Loop Structure:** A while loop iterates through the string as long as there are characters left to process.

4. **Conditional Logic:** Inside the loop, the pseudocode checks:
   - If the current character is a dot (.), it adds '0' to the result and advances the index by 1.
   - If the next character is also a dot, it adds '1' and moves the index by 2.
   - If neither condition is met, it adds '2' and again moves the index by 2.

5. **Output:** After processing all characters, the result is output.

This structured pseudocode effectively communicates the intent and logic of the original code without getting bogged down in specific programming syntax.
