**Pseudocode for Translating the Provided Code**

```
BEGIN

    // Read a single line of input
    INPUT string inputString

    // Initialize variables
    SET currentIndex to 0
    SET resultString to an empty string

    // Loop until the end of the input string
    WHILE currentIndex is less than the length of inputString DO
        
        // Check for a '.' character
        IF character at inputString[currentIndex] is '.' THEN
            // Append '0' to the result string
            APPEND '0' to resultString
            // Move to the next character
            INCREMENT currentIndex by 1
            
        // Check for two consecutive character patterns
        ELSE IF character at inputString[currentIndex + 1] is '.' THEN
            // Append '1' to the result string
            APPEND '1' to resultString
            // Skip the next character
            INCREMENT currentIndex by 2
            
        ELSE
            // Append '2' to the result string
            APPEND '2' to resultString
            // Skip the next character
            INCREMENT currentIndex by 2

    END WHILE

    // Output the final result string
    PRINT resultString

END
```

### Explanation of Pseudocode:
1. **Input Handling**: The input is captured as a string.
2. **Index and Result Initialization**: An index tracks the current position in the string, and a result string collects converted values.
3. **Loop Logic**: A while loop runs as long as there are characters left in the input:
   - If a dot (`.`) is found, '0' is added.
   - If a dot is found at the next position, '1' is added, skipping the next character.
   - If neither condition holds, '2' is added, also skipping the next character.
4. **Final Output**: The constructed result string is printed. 

This way, the pseudocode reflects the original code's structure and logic in a clear and accessible manner.
