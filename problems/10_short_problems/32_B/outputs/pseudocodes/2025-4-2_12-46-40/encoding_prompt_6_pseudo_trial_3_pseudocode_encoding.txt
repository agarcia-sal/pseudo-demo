Here's the pseudocode representing the logic of the provided code:

```
BEGIN MAIN

    // Read input string from standard input and remove unnecessary whitespace
    INPUT string s

    // Initialize an index to track current position in the string
    SET index to 0
    // Initialize an empty string to build the output
    SET output to an empty string

    // Continue processing the input string until the whole string is examined
    WHILE index is less than the length of string s DO
        // Check for the current character
        IF the character at index in string s is '.' THEN
            // If current character is '.', add '0' to output and move to next character
            APPEND '0' to output
            INCREMENT index by 1
        ELSE
            // Check the next character in the string
            IF the character at index + 1 in string s is '.' THEN
                // If the next character is also '.', add '1' to output and move ahead by two characters
                APPEND '1' to output
                INCREMENT index by 2
            ELSE
                // If neither of the two characters is '.', add '2' to output and move ahead by two characters
                APPEND '2' to output
                INCREMENT index by 2
            END IF
        END IF

    END WHILE

    // Output the final constructed string
    PRINT output

END MAIN
```

### Explanation of the Pseudocode:
- The pseudocode starts by defining a main block of operations.
- It uses descriptive variable names such as `index` for tracking positions in the input string and `output` for constructing the result.
- The control structures like `WHILE`, `IF`, and `ELSE` are clearly articulated to show their purpose within the broader logic of processing the string.
- The steps followed in processing each part of the input string are intuitively laid out, making it comprehensible for readers who are not familiar with the original programming syntax.
