**Purpose:** 
The goal of this algorithm is to convert a specific input string, which consists of characters representing signals, into a numerical output string based on defined rules.

**Pseudocode:**

1. **Initialize Input:**
   - Read a line of input from the user and remove any extra spaces (e.g., newline characters).
   - Store this input string in a variable called `inputString`.

2. **Setup Variables:**
   - Set a variable called `index` to 0, which will be used to track the current position in the input string.
   - Create an empty string called `outputString` to store the final result.

3. **Process Input String:**
   - While `index` is less than the length of `inputString`:
      - If the character at `index` is equal to '.':
         - Add '0' to `outputString`.
         - Increment `index` by 1.
      - Else if the character at `index + 1` is equal to '.':
         - Add '1' to `outputString`.
         - Increment `index` by 2.
      - Else:
         - Add '2' to `outputString`.
         - Increment `index` by 2.
         
4. **Output Result:**
   - Print the value of `outputString`, which contains the converted numerical representation of the input string.

**Summary of Steps:**
- Read the input.
- Iterate through the input string.
- Use conditions to determine how to update the output string.
- Output the final numerical string after processing all characters.
