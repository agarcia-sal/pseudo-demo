### Purpose
The goal of this code is to transform an input string that represents an email address with specific words like 'dot' and 'at' into a standard email format. It replaces text shortcuts with their symbols, ensures correct symbol usage, and makes sure the email is correctly formatted.

### Pseudocode

1. **Begin Program**
   
2. **Read Input**
   - Retrieve a line of input and remove any leading or trailing whitespace.
   
3. **Replace Specific Words**
   - Replace every occurrence of the word "dot" with a period (.)
   - Replace every occurrence of the word "at" with the symbol (@)

4. **Check for Leading Character**
   - If the first character of the string is a period (.)
     - Add 'dot' to the beginning, followed by the string from the second character onward.

5. **Initialize Variables**
   - Set a counter variable to track the last occurrence of the '@' symbol.
   - Create an empty list to store processed characters.

6. **Check for Leading Character '@'**
   - If the first character of the string is an '@'
     - Add 'at' to the beginning of the string, followed by the string from the second character onward.

7. **Process Each Character in the String**
   - For each character in the modified string:
     - If the character is '@':
       - If it is not the first occurrence of '@' (tracked by the counter):
         - Add 'at' to the list.
         - Update the counter to indicate another '@' has been processed.
       - Otherwise:
         - Add the '@' symbol to the list.
         - Update the counter to indicate this is the first '@' being processed.
     - If the character is not '@':
       - Add the character to the list.

8. **Join the List into a String**
   - Combine all elements in the list into a single string.

9. **Check for Trailing Character**
   - If the last character of the combined string is a period (.):
     - Replace the last character with 'dot'.

10. **Output Result**
    - Print the final processed email string.

11. **End Program**

### Comments for Clarity
- The initial replacements of 'dot' and 'at' make it easier to format the string properly.
- The handling of leading characters ensures that valid formats are respected.
- The iteration through the string allows us to maintain proper formatting even with multiple instances of '@'.
- The final checks ensure that the email ends correctly, which is crucial for standard email formats.
