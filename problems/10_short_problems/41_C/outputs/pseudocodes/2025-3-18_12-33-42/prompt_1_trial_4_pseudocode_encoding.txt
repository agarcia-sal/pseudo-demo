**Pseudocode:**

1. **Read Input:**
   - Read a line of input and remove any leading or trailing whitespace.
   - Store the input in a variable called `inputString`.

2. **Replace Keywords:**
   - Replace all occurrences of the word "dot" in `inputString` with the character '.'.
   - Replace all occurrences of the word "at" in `inputString` with the character '@'.

3. **Check Initial Character for Dot:**
   - If the first character of `inputString` is a '.', then:
     - Prepend the word "dot" to `inputString` (remove the current first character and add "dot" instead).

4. **Initialize Variables:**
   - Initialize a counter `countAtSign` to 0.
   - Initialize an empty list `resultList` to store processed characters.
   - Initialize a variable `length` to 0 (this variable will not be used further, so it can be omitted).

5. **Check First Character for At:**
   - If the first character of `inputString` is '@', then:
     - Prepend the word "at" to `inputString` (remove the current first character and add "at" instead).

6. **Process Each Character:**
   - For each character `currentChar` in `inputString`:
     - If `currentChar` is '@':
       - If `countAtSign` is greater than 0:
         - Append the word "at" to `resultList`.
         - Set `countAtSign` to 1 (this indicates that we have encountered an '@').
       - Else (if this is the first '@'):
         - Append the character '@' to `resultList`.
         - Set `countAtSign` to 1.
     - Else:
       - Append `currentChar` to `resultList`.

7. **Combine and Finalize Output:**
   - Join all elements in `resultList` into a single string, called `finalString`.
   - If the last character of `finalString` is a '.':
     - Remove the last character and append the word "dot".

8. **Display Result:**
   - Print `finalString`, which contains the processed email-like string.
