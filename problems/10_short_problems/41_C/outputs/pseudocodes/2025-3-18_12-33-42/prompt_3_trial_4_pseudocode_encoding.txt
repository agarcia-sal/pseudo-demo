```plaintext
BEGIN

  // Read input string from standard input and remove any surrounding whitespace
  INPUT originalString
  
  // Replace the occurrences of 'dot' with '.' and 'at' with '@'
  REPLACE 'dot' WITH '.' IN originalString
  REPLACE 'at' WITH '@' IN originalString
  
  // If the string starts with a '.', prefix it with 'dot'
  IF originalString starts with '.' THEN
    CONCATENATE 'dot' WITH originalString starting from the second character
  ENDIF

  SET counter TO 0
  CREATE an empty list called modifiedCharacters
  SET length TO 0
  
  // If the string starts with '@', prefix it with 'at'
  IF originalString starts with '@' THEN
    CONCATENATE 'at' WITH originalString starting from the second character
  ENDIF
  
  // Loop through each character in the modified string
  FOR EACH character IN originalString DO
    // Check if the current character is '@'
    IF character is '@' THEN
      // If it's not the first '@' encountered
      IF counter > 0 THEN
        APPEND 'at' to modifiedCharacters
        SET counter TO 1
      ELSE
        APPEND '@' to modifiedCharacters
        SET counter TO 1
      ENDIF
    ELSE
      APPEND character to modifiedCharacters
    ENDIF
  ENDFOR

  // Join all characters in modifiedCharacters into a final string
  SET finalString TO JOIN modifiedCharacters INTO a single string
  
  // If the final string ends with '.', replace it with 'dot'
  IF finalString ends with '.' THEN
    REPLACE the last character with 'dot' in finalString
  ENDIF
  
  // Output the final formatted string
  PRINT finalString

END
``` 

### Explanation
- The pseudocode captures the core intent and flow of the original code, simplifying the syntax.
- Descriptive variable names enhance understanding of each step's purpose.
- Control structures for conditions and loops are clearly articulated.
- Input (original string) and output (final formatted string) are explicitly identified, making the pseudocode accessible to someone unfamiliar with the original syntax.
