```pseudocode
BEGIN ProcessInput

    // Read the input and remove surrounding whitespace
    INPUT userInput FROM standardInput
    userInput = REMOVE_WHITESPACE(userInput)

    // Replace occurrences of 'dot' with '.' and 'at' with '@'
    userInput = REPLACE(userInput, 'dot', '.')
    userInput = REPLACE(userInput, 'at', '@')

    // If the string starts with a '.', prepend 'dot' to the string
    IF userInput STARTS_WITH '.' THEN
        userInput = 'dot' + userInput[1:]

    // Initialize variables to track symbols and processed characters
    symbolCounter = 0
    processedCharacters = EMPTY_LIST
    lengthOfString = 0

    // If the string starts with '@', prepend 'at' to the string
    IF userInput STARTS_WITH '@' THEN
        userInput = 'at' + userInput[1:]

    // Process each character in the userInput string
    FOR EACH character IN userInput DO
    
        // Check for the presence of the '@' character
        IF character IS '@' THEN
            IF symbolCounter > 0 THEN
                // Previous '@' encountered, add 'at' to the list
                ADD 'at' TO processedCharacters
                symbolCounter = 1
            ELSE
                // First '@' encountered, append '@' to the list
                ADD '@' TO processedCharacters
                symbolCounter = 1
            ENDIF
        ELSE
            // Append any other character to the processed characters
            ADD character TO processedCharacters
        ENDIF
    ENDFOR

    // Convert the processed characters list back into a string
    processedString = JOIN(processedCharacters)

    // If the final string ends with '.', replace it with 'dot'
    IF processedString ENDS_WITH '.' THEN
        processedString = REMOVE_LAST_CHARACTER(processedString) + 'dot'
    ENDIF

    // Output the final processed string
    OUTPUT processedString

END ProcessInput
``` 

### Explanation:
- The pseudocode captures the logic of the original code by breaking down the input processing step-by-step.
- The specific manipulations applied to the input string, such as replacing characters and conditionally modifying string prefixes and suffixes, are clearly articulated.
- Control structures like conditionals and loops are expressed in plain language, ensuring clarity.
- Input and output are clearly defined at the beginning and end of the process, respectively.
