Here is the pseudocode that represents the logic of the provided code:

```
FUNCTION main
    // Read a line of input
    SET inputString TO readInputLine() 
    // Replace the word 'dot' with the character '.'
    REPLACE 'dot' in inputString WITH '.'
    // Replace the word 'at' with the character '@'
    REPLACE 'at' in inputString WITH '@'

    // Verify if the first character is a period (.)
    IF firstCharacterOf(inputString) IS '.'
        // If so, prepend 'dot' before the rest of the string
        SET inputString TO 'dot' + substringOf(inputString, 1 to end)

    SET countOfAtSymbol TO 0
    SET resultList TO empty list
    SET lengthOfString TO 0  // This variable appears to be unused in the logic

    // Check if the first character is an '@' symbol
    IF firstCharacterOf(inputString) IS '@'
        // If so, prepend 'at' before the rest of the string
        SET inputString TO 'at' + substringOf(inputString, 1 to end)

    // Iterate through each character in the inputString
    FOR each character IN inputString
        IF character IS '@'
            // If an '@' has already been encountered
            IF countOfAtSymbol IS greater than 0
                // Append 'at' to the result list
                APPEND 'at' to resultList
                SET countOfAtSymbol TO 1  // Keep track of '@' cases
            ELSE
                // Append '@' to the result list
                APPEND '@' to resultList
                SET countOfAtSymbol TO 1  // Keep track of the first '@' encountered
        ELSE
            // Append the current character to the result list
            APPEND character to resultList

    // Join all elements in the resultList to form the final string
    SET combinedString TO join(resultList)

    // Check if the last character is a period (.)
    IF lastCharacterOf(combinedString) IS '.'
        // If so, remove the last character and append 'dot'
        SET combinedString TO substringOf(combinedString, 0 to secondLastCharacter) + 'dot'

    // Output the final modified string
    OUTPUT combinedString
END FUNCTION
```

### Explanation:
- The pseudocode maintains the structure and logic of the original code while using more human-readable expressions.
- Operations such as string replacement and conditions are articulated clearly.
- Comments are included to clarify each step of the process.
- Variable and function names are chosen to reflect their purpose accurately, thus making it easier to follow the flow of the program.
