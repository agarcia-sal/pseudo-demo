### Pseudocode

```
BEGIN

    // Read a line of input and remove any leading/trailing whitespace
    Input string = Read input from the user
    Trim whitespace from the input string
    
    // Replace specific words with symbols
    Replace all occurrences of "dot" with "."
    Replace all occurrences of "at" with "@"
    
    // Check if the first character is a period and adjust if necessary
    IF the first character of the string is "." THEN
        Prepend "dot" to the string, excluding the first character
    ENDIF
    
    Initialize counter for "at" occurrences = 0
    Initialize empty list to store characters = ListOfCharacters
    Initialize a variable for length (not used further)
    
    // Check if the first character is "@" and adjust if necessary
    IF the first character of the string is "@" THEN
        Prepend "at" to the string, excluding the first character
    ENDIF
    
    // Iterate over each character in the string
    FOR each character in the string DO
        IF the character is "@" THEN
            IF counter is greater than 0 THEN
                Append "at" to ListOfCharacters
                Set counter to 1 
            ELSE
                Append "@" to ListOfCharacters
                Set counter to 1
            ENDIF
        ELSE
            Append the character to ListOfCharacters
        ENDIF
    ENDFOR
    
    // Join the characters in the list to form the output string
    FinalOutputString = Join all characters in ListOfCharacters into a single string
    
    // Check if the last character is a period and adjust if necessary
    IF the last character of FinalOutputString is "." THEN
        Remove the last character and append "dot"
    ENDIF
    
    // Print the final output
    Print FinalOutputString

END
```

### Summary of Pseudocode Logic

1. The program reads a string from input and performs word replacements using specified rules.
2. It adjusts the string based on specific characters at the start and end of the string.
3. The algorithm processes each character to handle special cases and ensures that "@" is properly represented.
4. Finally, it outputs a modified string after all transformations.
