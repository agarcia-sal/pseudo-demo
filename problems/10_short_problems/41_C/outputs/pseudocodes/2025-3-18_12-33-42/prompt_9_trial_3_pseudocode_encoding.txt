### Purpose
This algorithm processes a string representing an email-like format where certain keywords ("dot" and "at") need to be converted into their respective symbols ('.' and '@'). It also ensures that certain formatting rules are adhered to, such as preventing leading symbols and handling consecutive symbols properly.

### Pseudocode

1. **Start Process**
   
2. **Receive Input**
   - Read a line of input, remove any unnecessary surrounding spaces, and store it in the variable `rawInput`.

3. **Replace Keywords**
   - Replace all occurrences of the word "dot" in `rawInput` with the symbol '.'.
   - Replace all occurrences of the word "at" in `rawInput` with the symbol '@'.

4. **Check for Leading Dot**
   - If the first character of `rawInput` is a dot ('.'):
     - Prepend "dot" to `rawInput` (i.e., change the first character to "dot").

5. **Initialize Variables**
   - Set a counter called `symbolTracker` to 0.
   - Create an empty list called `formattedCharacters`.
   - Initialize a variable `length` to 0 (not used further in this logic).

6. **Check for Leading At**
   - If the first character of `rawInput` is an at symbol ('@'):
     - Prepend "at" to `rawInput` (i.e., change the first character to "at").

7. **Process Each Character in Input**
   - For each character `currentCharacter` in `rawInput`:
     - If `currentCharacter` is '@':
       - If `symbolTracker` is greater than 0:
         - Append the string "at" to the `formattedCharacters` list.
         - Set `symbolTracker` to 1.
       - Otherwise:
         - Append the at symbol '@' to the `formattedCharacters` list.
         - Set `symbolTracker` to 1.
     - Else:
       - Append `currentCharacter` to the `formattedCharacters` list.

8. **Join Formatted Characters**
   - Combine all characters in `formattedCharacters` into a single string, and store it in the variable `finalOutput`.

9. **Check for Trailing Dot**
   - If the last character of `finalOutput` is a dot ('.'):
     - Replace the last character with "dot".

10. **Output Result**
    - Print the `finalOutput`.

### End of Process

### Summary of Operations
- The algorithm carefully replaces keywords with symbols while ensuring that the resulting format conforms to specific rules about leading and trailing characters. It uses lists to collect processed characters and only replaces certain symbols when conditions are met, which ensures clarity and accuracy in the final formatted output.
