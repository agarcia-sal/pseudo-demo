### Purpose:
The goal of this algorithm is to transform a given string by replacing specific words with their corresponding symbols, ensuring the proper formatting of the resulting string.

### Pseudocode:
1. **Receive Input:**
   - Read a line of input and store it in a variable called `input_string`.

2. **Initial Replacements:**
   - Replace all occurrences of the word "dot" in `input_string` with the character "." (dot).
   - Replace all occurrences of the word "at" in `input_string` with the character "@" (at symbol).

3. **Check First Character:**
   - If the first character of `input_string` is a dot ("."):
     - Insert "dot" at the beginning of `input_string`, keeping the rest of the string unchanged.

4. **Initialize Variables:**
   - Set a counter `counter` to 0, which will be used to track consecutive "at" symbols.
   - Create an empty list called `output_characters` to store the processed characters.
   - Initialize a variable `length` to 0 (no specific usage in the original code).

5. **Handle Leading "At" Symbol:**
   - If the first character of `input_string` is an "@" symbol:
     - Insert "at" at the beginning of `input_string`, keeping the rest of the string unchanged.

6. **Process Each Character:**
   - For every character `current_character` in `input_string`:
     - If `current_character` is "@":
       - If `counter` is greater than 0:
         - Append "at" to `output_characters`.
         - Set `counter` to 1 (indicating an "@" has been processed).
       - Otherwise:
         - Append "@" to `output_characters`.
         - Set `counter` to 1.
     - Otherwise, append `current_character` to `output_characters`.

7. **Reconstruct Output String:**
   - Join all elements in `output_characters` to form a single output string called `final_output`.

8. **Final Character Check:**
   - If the last character of `final_output` is a dot ("."):
     - Replace the last dot with the word "dot".

9. **Display Result:**
   - Print the `final_output`.

### Summary:
The pseudocode effectively outlines the steps taken to transform the input string by replacing specific terms, handling special cases for leading symbols and character organization, and ensuring the output is formatted correctly.
