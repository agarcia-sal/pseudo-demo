**Pseudocode: Email Replacement Algorithm**

1. **Read Input:**
   - Read a line from standard input and remove any leading or trailing whitespace.
   - Store the input as 'inputString'.

2. **Replace Keywords:**
   - Replace all occurrences of 'dot' in 'inputString' with '.' (period).
   - Replace all occurrences of 'at' in 'inputString' with '@' (at symbol).

3. **Handle Leading Dot:**
   - If the first character of 'inputString' is a '.', update 'inputString' to prepend 'dot' before the rest of the string.

4. **Initialize Counters and Containers:**
   - Set a counter 'atCounter' to 0 to track occurrences of '@'.
   - Create an empty list 'resultCharacters' to hold the reconstructed characters.

5. **Handle Leading At Symbol:**
   - If the first character of 'inputString' is '@', update 'inputString' to prepend 'at' before the rest of the string.

6. **Iterate Over Each Character:**
   - For each character 'currentCharacter' in 'inputString':
     - If 'currentCharacter' is '@':
       - If 'atCounter' is greater than 0, append 'at' to 'resultCharacters' and set 'atCounter' to 1 (indicating this is a repeat).
       - Else, append '@' to 'resultCharacters' and set 'atCounter' to 1.
     - Otherwise, append 'currentCharacter' to 'resultCharacters'.

7. **Join Characters:**
   - Combine all characters in 'resultCharacters' into a single string 'finalString'.

8. **Handle Trailing Dot:**
   - If the last character of 'finalString' is '.', remove the last character and append 'dot' to the end of 'finalString'.

9. **Output Result:**
   - Print the value of 'finalString'.

**Input Format:**
- A single line of text potentially containing the strings 'dot' and 'at'.

**Output Format:**
- A modified string where 'dot' and 'at' have been replaced appropriately, with specific handling for leading and trailing characters.
