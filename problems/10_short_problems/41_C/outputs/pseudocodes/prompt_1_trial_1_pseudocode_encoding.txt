**Pseudocode: Email Formatter**

```
BEGIN

    // Read input line and remove any extra whitespace
    INPUT emailInput FROM standard input
    emailInput <- TRIM(emailInput)

    // Replace specific words with designated symbols
    emailInput <- REPLACE 'dot' WITH '.' IN emailInput
    emailInput <- REPLACE 'at' WITH '@' IN emailInput

    // Ensure the email starts with 'dot' if it starts with a period
    IF first character of emailInput is '.'
        emailInput <- 'dot' + REST of emailInput starting from index 1
    ENDIF

    // Initialize variables for processing
    countOfAtSymbols <- 0
    modifiedEmail <- EMPTY list
    index <- 0

    // Ensure the email starts with 'at' if it starts with '@'
    IF first character of emailInput is '@'
        emailInput <- 'at' + REST of emailInput starting from index 1
    ENDIF

    // Loop through each character in the emailInput
    FOR EACH character in emailInput DO
        IF character is '@' THEN
            // If we have already encountered an '@', add 'at'
            IF countOfAtSymbols > 0 THEN
                ADD 'at' TO modifiedEmail
                countOfAtSymbols <- 1
            ELSE
                ADD '@' TO modifiedEmail
                countOfAtSymbols <- 1
            ENDIF
        ELSE
            // For any other character, simply add it to the list
            ADD character TO modifiedEmail
        ENDIF
    ENDFOR

    // Join the modified characters into a single string
    modifiedEmail <- JOIN characters in modifiedEmail into a single string

    // Ensure the email does not end with a period
    IF last character of modifiedEmail is '.'
        modifiedEmail <- REMOVE last character and ADD 'dot' to modifiedEmail
    ENDIF

    // Output the final formatted email
    PRINT modifiedEmail

END
```

This pseudocode encapsulates the logic of the original code, describing its processes of reading input, replacing certain substrings, handling specific formatting rules, and finally outputting the formatted email address.
