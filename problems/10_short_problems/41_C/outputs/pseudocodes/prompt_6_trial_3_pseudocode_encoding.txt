Here's the pseudocode that represents the logic of the given code in a clear and understandable manner:

```plaintext
// Read a line of input and trim any surrounding whitespace
input_string = Read input from standard input
input_string = Replace all occurrences of 'dot' with '.'
input_string = Replace all occurrences of 'at' with '@'

// If the first character is a '.', replace it with 'dot' followed by the rest of the string
If the first character of input_string is '.' then
    input_string = 'dot' + substring of input_string starting from index 1

// Initialize a counter and an empty list to hold characters
counter = 0
character_list = Empty list
length_of_string = 0

// If the first character is '@', replace it with 'at' followed by the rest of the string
If the first character of input_string is '@' then
    input_string = 'at' + substring of input_string starting from index 1

// Iterate through each character in the modified input_string
For each character in input_string do
    If the character is '@' then
        // If we've encountered '@' before, add 'at' to the list
        If counter is greater than 0 then
            Add 'at' to character_list
            counter = 1 // Reset counter to indicate '@' has been processed
        Else
            Add '@' to character_list
            counter = 1 // Set counter to indicate we just processed '@'
    Else
        // If the character is not '@', add it to the list
        Add the character to character_list
End For

// Join all characters in character_list into a single string
output_string = Join all characters in character_list into a single string

// If the last character of the output_string is '.', replace it with 'dot'
If the last character of output_string is '.' then
    output_string = Remove last character from output_string and append 'dot'

// Print the final output_string
Print output_string
```

### Explanation:
- The pseudocode starts by describing how to read input and perform string replacements.
- It includes conditions for modifying the first character if it is a specific symbol.
- The main loop processes each character, specifically handling the '@' symbol carefully to manage how it is recorded.
- Finally, it joins the characters back into a single output string and checks for the last character to adjust it as needed.
- The pseudocode is structured to reflect the logic clearly without delving into technical syntax.
