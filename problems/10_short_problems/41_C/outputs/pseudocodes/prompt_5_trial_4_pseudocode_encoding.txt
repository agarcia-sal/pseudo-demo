**Purpose:** The main goal of this program is to format a given string to convert specific placeholder words into their symbolic counterparts and ensure proper representation by certain rules.

---

**Pseudocode:**

```
1. Define function format_email_string()
2.  Input: Read a line of text from the user and remove any extra spaces
3.  Step 1: Replace all occurrences of the word "dot" with a period (.)
4.  Step 2: Replace all occurrences of the word "at" with the symbol (@)
5.  
6.  Step 3: Check if the first character of the string is a period
7.    If it is:
8.      Prepend the string "dot" to the remaining part of the string (after the first character)
9.  
10. Step 4: Initialize a counter for "at" symbols as zero
11.  Create an empty list to hold characters
12.  
13. Step 5: Check if the first character of the formatted string is an "at" symbol
14.   If it is:
15.     Prepend the string "at" to the remaining part of the string (after the first character)
16.  
17. Step 6: Loop through each character in the string
18.    For each character:
19.       If the character is an "at" symbol:
20.         If the counter is greater than 0:
21.           Add the string "at" to the list
22.           Reset the counter to 1
23.         Else:
24.           Add the "at" symbol to the list
25.           Set the counter to 1
26.       Else:
27.         Add the character to the list
28.  
29. Step 7: Join all characters in the list into a single string
30.  
31. Step 8: Check if the last character of the final string is a period
32.   If it is:
33.     Replace the period with "dot"
34.  
35. Step 9: Output the final formatted string to the user
```

---

**Explanation of Key Steps:**

- **Input Handling:** The program starts by receiving a line of input, which is worked on to replace certain keywords ("dot" and "at") with their respective symbols.
- **Character Management:** It carefully checks the start and end of the string to ensure that the formatting adheres to specific expectations (like ensuring "dot" appears correctly if the string starts with a period).
- **Loop Logic:** A loop processes each character, ensuring that multiple occurrences of "at" are handled correctly by maintaining a counter to avoid consecutive duplicates in the final output.
- **Output:** The final formatted string is then printed to the user, showcasing the changes made based on the defined rules.

This pseudocode is structured to be easily followed and could be understood by individuals with minimal programming knowledge.
