**Purpose Statement**: The objective of this code is to format an email-like string by replacing specific keywords, ensuring that the formatting of the string adheres to common email conventions.

---

**Pseudocode**

1. **Read Input**: 
   - Get a line of text from user input and remove any surrounding whitespace.
   - Store this line in a variable called `emailString`.

2. **Replace Keywords**: 
   - Replace all occurrences of "dot" in `emailString` with "." (a period).
   - Replace all occurrences of "at" in `emailString` with "@" (the at symbol).

3. **Handle Leading Period**: 
   - If `emailString` starts with a period (.), then change the first character to "dot" followed by the remaining characters of `emailString`.

4. **Check for Leading At Symbol**:
   - If `emailString` starts with an "@" (the at symbol), then change the first character to "at" followed by the remaining characters of `emailString`.

5. **Prepare for Conversion**:
   - Initialize a counter `counter` to zero.
   - Create an empty list called `formattedCharacters` to store the processed characters.
   
6. **Process Each Character**:
   - For each character `character` in `emailString`:
     - If `character` is "@" (the at symbol):
       - If `counter` is greater than 0:
         - Append "at" to `formattedCharacters`.
         - Set `counter` to 1.
       - Else:
         - Append "@" to `formattedCharacters`.
         - Set `counter` to 1.
     - Else:
       - Append `character` to `formattedCharacters`.

7. **Join Characters into a String**: 
   - Combine all elements in `formattedCharacters` into a single string called `finalString`.

8. **Handle Trailing Period**:
   - If the last character of `finalString` is a period:
     - Remove the last character and append "dot" at the end of `finalString`.

9. **Output the Result**:
   - Print `finalString`, which represents the formatted email-like string.

---

**Comments/Annotations**:
- Use of 'dot' and 'at' as keywords simulates real-world email components (e.g., "example.com" becomes "exampledotcom").
- The process ensures only one representation of "@" is used consecutively, replacing subsequent occurrences with "at".

---

This pseudocode provides a simplified and clear representation of the original code's logic, making it accessible for all readers regardless of their familiarity with programming syntax.
