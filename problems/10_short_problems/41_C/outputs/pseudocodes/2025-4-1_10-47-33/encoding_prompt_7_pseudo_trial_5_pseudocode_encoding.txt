```pseudocode
FUNCTION transformInput()
    // Read a line of input and remove any surrounding whitespace
    INPUT line FROM standard input
    SET line TO remove whitespace FROM line
    
    // Replace occurrences of "dot" with "." and "at" with "@"
    SET line TO replace "dot" WITH "." IN line
    SET line TO replace "at" WITH "@" IN line

    // If the first character is ".", prepend "dot" to the string
    IF first character OF line EQUALS "." THEN
        SET line TO "dot" + substring of line FROM index 1 TO end

    // Initialize variables for processing
    SET countAtSign TO 0
    INITIALIZE empty list called transformedList
    SET length TO 0

    // If the first character is "@", prepend "at" to the string
    IF first character OF line EQUALS "@" THEN
        SET line TO "at" + substring of line FROM index 1 TO end

    // Iterate through each character in the transformed line
    FOR each character in line DO
        IF character IS "@" THEN
            IF countAtSign GREATER THAN 0 THEN
                // Replace with "at" to prevent consecutive "at"
                APPEND "at" TO transformedList
                SET countAtSign TO 1
            ELSE
                // First occurrence of "@"
                APPEND "@" TO transformedList
                SET countAtSign TO 1
            END IF
        ELSE
            // Append the current character as is
            APPEND character TO transformedList
        END IF
    END FOR

    // Join the transformed list into a single string
    SET finalString TO join transformedList INTO string

    // If the last character is ".", replace it with "dot"
    IF last character OF finalString EQUALS "." THEN
        SET finalString TO substring of finalString FROM index 0 TO second last character + "dot"

    // Output the final transformed string
    PRINT finalString
END FUNCTION
```

### Explanation of Complexity:
- **Input Handling:** The function begins by reading a line of text, which is a common preliminary step in many applications.
- **Character Replacement:** The replacements of "dot" with "." and "at" with "@" are crucial operations that address the primary transformation of the input.
- **Conditional Checks:** There are checks for the characters at the start and formation rules for handling the "@" character to ensure the correct formatting is applied without duplication.
- **String Construction:** The use of a list `transformedList` to accumulate characters is an efficient way to reconstruct the final string.
- **Final Adjustment:** The final check for a trailing "." ensures that the output meets the specified formatting standards before printing.
