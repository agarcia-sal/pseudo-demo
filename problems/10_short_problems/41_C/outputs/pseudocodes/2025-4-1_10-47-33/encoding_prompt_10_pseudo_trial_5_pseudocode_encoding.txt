Here is a clear and concise pseudocode translation of the provided Python code, following the guided steps:

---

**Pseudocode:**

1. **Read Input:**
   - Set variable `input_string` to read a line from the standard input and remove leading and trailing whitespace.

2. **Replace Substrings:**
   - Replace all occurrences of the substring "dot" in `input_string` with "." (a period).
   - Replace all occurrences of the substring "at" in `input_string` with "@" (at symbol).

3. **Check for Leading Dot:**
   - If the first character of `input_string` is ".":
     - Prepend "dot" to `input_string`, excluding the first character.

4. **Initialize Variables:**
   - Set variable `count_at` to 0.
   - Create an empty list `result_list`.
   - Set variable `length` to 0 (this variable is defined but not used).

5. **Check for Leading At Symbol:**
   - If the first character of `input_string` is "@":
     - Prepend "at" to `input_string`, excluding the first character.

6. **Process Characters:**
   - For each character `char` in `input_string`:
     - If `char` is "@" (at symbol):
       - If `count_at` is greater than 0:
         - Append the substring "at" to `result_list`.
       - Otherwise:
         - Append "@" to `result_list`.
       - Set `count_at` to 1.
     - Otherwise:
       - Append `char` to `result_list`.

7. **Join Results:**
   - Set variable `final_string` to join all elements in `result_list` into a single string.

8. **Check for Trailing Dot:**
   - If the last character of `final_string` is ".":
     - Remove the last character and append "dot" to `final_string`.

9. **Output Result:**
   - Print `final_string`.

---

**Assumptions:**
- Input is a string that consists of valid characters that can be transformed according to the replacements defined in the pseudocode.
- The operations are case-sensitive and assume the input will contain the specific keywords ("dot" and "at") as stated. 

This pseudocode is designed to be clear and structured, reflecting the logical flow of the original Python code without delving into coding-specific syntax.
