Here is the pseudocode translation of the provided code, designed to convey its logic clearly and understandably:

```
BEGIN

    // Read input from the user
    READ inputString
    
    // Replace occurrences of 'dot' with '.' and 'at' with '@'
    REPLACE 'dot' in inputString WITH '.'
    REPLACE 'at' in inputString WITH '@'
    
    // Check if the first character is a dot
    IF inputString begins with '.' THEN
        // Prepend 'dot' to the string
        inputString = 'dot' + substring of inputString from index 1
    ENDIF

    // Initialize the counter for '@' occurrences
    occurrenceCounter = 0
    // Initialize an empty list to collect characters
    characterList = []
    
    // Check if the first character is '@'
    IF inputString begins with '@' THEN
        // Prepend 'at' to the string
        inputString = 'at' + substring of inputString from index 1
    ENDIF
    
    // Loop through each character in the modified input string
    FOR each character IN inputString DO
        
        // Check if the character is '@'
        IF character is '@' THEN
            // If '@' has already occurred before
            IF occurrenceCounter > 0 THEN
                // Append 'at' to the list
                ADD 'at' to characterList
                occurrenceCounter = 1 // Update counter
            ELSE
                // Append '@' to the list
                ADD '@' to characterList
                occurrenceCounter = 1 // Update counter
            ENDIF
        ELSE
            // Append the character to the list
            ADD character to characterList
        ENDIF
        
    ENDFOR

    // Join the list of characters into a single string
    resultString = JOIN characterList
    
    // Check if the last character is a dot
    IF resultString ends with '.' THEN
        // Replace the last '.' with 'dot'
        resultString = substring of resultString from start to second last character + 'dot'
    ENDIF
    
    // Print the final modified string
    PRINT resultString

END
```

### Key Points Explained:

1. **Input Handling**: The pseudocode begins by reading a string from the user and making specified replacements.
  
2. **Character Checks**: It checks the first character and modifies the string appropriately if it starts with a specific character (either `.` or `@`).

3. **Loop and Modification**: It loops through the string to manage occurrences of the `@` character while collecting other characters into a list.

4. **Final Adjustment**: The code checks the last character of the result before outputting the final string, ensuring it adheres to the conditions set forth in the original code.

5. **Output**: The final modified string is printed out as the result. 

This structure retains the logic of the original code while avoiding specific syntax, making it accessible to a broad audience.
