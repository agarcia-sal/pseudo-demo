### Purpose
The aim of this algorithm is to transform a given email-like string by replacing specific words with symbols and adjusting the string format to conform to certain rules pertaining to how emails should be represented.

### Pseudocode

1. **Receive Input:**
   - Read a line of input from the user and remove any surrounding whitespace.

2. **Replace Word Aliases:**
   - Replace all instances of the word "dot" with the symbol ".".
   - Replace all instances of the word "at" with the symbol "@".

3. **Adjust Beginning of String:**
   - If the first character of the modified string is ".", prepend "dot" to the string.

4. **Initialize Counters:**
   - Set a counter to track the occurrence of "@".
   - Create an empty list to store characters of the modified string.
   - Initialize a variable to indicate the length of the list (though it's not directly needed).

5. **Handle Special Cases for Starting Character:**
   - If the first character is "@", change it to "at" by replacing the first character with "at".

6. **Iterate through Each Character:**
   - For each character in the string:
     - If the character is "@":
       - If the counter is greater than 0, append "at" to the list and set the counter to 1.
       - Otherwise, append "@" to the list and set the counter to 1.
     - If the character is not "@", simply append the character to the list.

7. **Combine List into String:**
   - Convert the list of characters back into a single string.

8. **Adjust End of String:**
   - If the last character of the resulting string is ".", replace it with "dot".

9. **Output Modified String:**
   - Print the final modified string.

### Example Flow
- Input: "Hello at your.domain dot"
- Output: "Hello at your.domain"

This breakdown simplifies the logic, emphasizing the transformations applied to the string while maintaining clarity and coherence in the overall flow.
