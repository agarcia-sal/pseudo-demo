Here is the pseudocode based on the provided code, following the guided steps:

```
BEGIN

    // Step 1: Read input
    READ input_line FROM standard input
    STRIP whitespace FROM input_line
    REPLACE 'dot' WITH '.' IN input_line
    REPLACE 'at' WITH '@' IN input_line

    // Step 2: Handle leading dot
    IF input_line STARTS WITH '.' THEN
        SET input_line TO 'dot' + remainder of input_line AFTER first character
    END IF

    SET counter TO 0
    INITIALIZE empty list c[]
    SET length TO 0

    // Step 3: Handle leading at sign
    IF input_line STARTS WITH '@' THEN
        SET input_line TO 'at' + remainder of input_line AFTER first character
    END IF

    // Step 4: Process each character of the input_line
    FOR EACH character IN input_line DO
        IF character IS '@' THEN
            IF counter > 0 THEN
                APPEND 'at' TO list c
                SET counter TO 1
            ELSE
                APPEND '@' TO list c
                SET counter TO 1
            END IF
        ELSE
            APPEND character TO list c
        END IF
    END FOR

    // Step 5: Join list c into final string
    SET final_output TO JOIN characters IN list c INTO a single string

    // Step 6: Handle trailing dot
    IF final_output ENDS WITH '.' THEN
        SET final_output TO substring of final_output UP TO second last character + 'dot'
    END IF

    // Step 7: Output the final result
    PRINT final_output

END
```

### Assumptions
1. The input is read from standard input and is a string.
2. The function `READ` and `PRINT` handle input and output respectively.
3. The operations on the string (such as `REPLACE`, `JOIN`, and substring operations) work as expected.

### Notes
1. The pseudocode uses clear and concrete statements that reflect the operations performed in the actual code while avoiding programming jargon.
2. Meaningful variable names have been used to enhance clarity (e.g., `input_line`, `final_output`).
