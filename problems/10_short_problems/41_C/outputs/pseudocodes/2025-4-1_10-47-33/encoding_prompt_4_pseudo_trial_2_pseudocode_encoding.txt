Pseudocode:

```
BEGIN

    // Read input from the user
    INPUT userInput

    // Replace occurrences of 'dot' with '.' and 'at' with '@'
    REPLACE userInput 'dot' WITH '.' 
    REPLACE userInput 'at' WITH '@'

    // If the first character is '.', prepend 'dot'
    IF userInput[0] IS '.' THEN
        userInput = 'dot' + userInput[1:]

    // Initialize count for '@' symbols and a list to hold characters
    SET atCount TO 0
    SET characterList TO []
    
    // If the first character is '@', prepend 'at'
    IF userInput[0] IS '@' THEN
        userInput = 'at' + userInput[1:]

    // Iterate over each character in the modified input
    FOR EACH character IN userInput DO
        
        // Check if the character is '@'
        IF character IS '@' THEN
            IF atCount > 0 THEN
                // Append 'at' if it's not the first '@'
                APPEND 'at' TO characterList
                SET atCount TO 1
            ELSE
                // Append first '@' as is
                APPEND '@' TO characterList
                SET atCount TO 1
            END IF
        ELSE
            // Append non '@' characters to the list
            APPEND character TO characterList
        END IF
    END FOR

    // Join the character list into a single string
    SET finalOutput TO JOIN characterList INTO A STRING
    
    // If the last character is '.', replace it with 'dot'
    IF finalOutput[-1] IS '.' THEN
        finalOutput = finalOutput[0...-1] + 'dot'
    END IF

    // Output the final modified string
    PRINT finalOutput

END
```

### Comments:
- The pseudocode highlights the main operations and flows of the original code.
- It clearly separates logic and control structures for better readability.
- User input handling and output are explicitly stated, maintaining clarity about what the program does.
