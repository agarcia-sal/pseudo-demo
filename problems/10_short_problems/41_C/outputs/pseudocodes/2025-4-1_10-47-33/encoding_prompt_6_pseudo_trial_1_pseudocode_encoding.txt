```
BEGIN

    // Read input from standard input and remove any surrounding whitespace
    INPUT raw_input

    // Replace occurrences of 'dot' with '.' in the input
    REPLACE 'dot' WITH '.' IN raw_input

    // Replace occurrences of 'at' with '@' in the input
    REPLACE 'at' WITH '@' IN raw_input

    // Check if the first character is a '.', if so, prepend 'dot' to the string
    IF First character of raw_input IS '.' THEN
        SET raw_input TO 'dot' + Substring of raw_input from index 1

    // Initialize a variable to count occurrences of '@' in the processed string
    SET at_counter TO 0
    // Initialize a list to hold characters for the final output
    INITIALIZE output_list AS EMPTY_LIST
    // Initialize a variable to track the length of the string (not used later)
    SET length TO 0

    // Check if the first character is '@', if so, prepend 'at' to the string
    IF First character of raw_input IS '@' THEN
        SET raw_input TO 'at' + Substring of raw_input from index 1

    // Iterate through each character in the processed string
    FOR EACH character IN raw_input DO

        // Check if the character is '@'
        IF character IS '@' THEN
            // If we've already added one '@', add 'at' to the list,
            // Otherwise add '@' and set the counter
            IF at_counter IS GREATER THAN 0 THEN
                APPEND 'at' TO output_list
                SET at_counter TO 1
            ELSE
                APPEND '@' TO output_list
                SET at_counter TO 1
            END IF
        ELSE
            // If the character is not '@', simply add it to the output list
            APPEND character TO output_list
        END IF

    END FOR

    // Combine the list of characters into a single string
    SET final_output TO JOIN output_list INTO A STRING

    // If the last character of the final output is '.', replace it with 'dot'
    IF Last character of final_output IS '.' THEN
        SET final_output TO Substring of final_output untill the second last character + 'dot'
    END IF

    // Print the resulting processed string
    PRINT final_output

END
``` 

This pseudocode effectively summarizes the logic of the original code while maintaining clarity and structure. Each step is explained in a logical sequence, making it easy to follow the flow of operations.
