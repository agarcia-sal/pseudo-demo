Here is the pseudocode that captures the logic of the provided code snippet:

```
START

FUNCTION main
    // Read input from the user and remove surrounding whitespace
    INPUT userInput FROM standard input
    
    // Replace all occurrences of 'dot' with '.' in the input
    REPLACE 'dot' WITH '.' IN userInput

    // Replace all occurrences of 'at' with '@' in the input
    REPLACE 'at' WITH '@' IN userInput

    // If the first character is a '.', prepend 'dot' to the input
    IF FIRST CHARACTER OF userInput IS '.'
        SET userInput TO 'dot' + SUBSTRING OF userInput FROM position 1
    
    // Initialize a counter for 'at' occurrences
    SET counter TO 0
    SET modifiedList TO EMPTY LIST
    SET length TO 0

    // If the first character is an '@', prepend 'at' to the input
    IF FIRST CHARACTER OF userInput IS '@'
        SET userInput TO 'at' + SUBSTRING OF userInput FROM position 1

    // Iterate over each character in modified userInput
    FOR EACH character IN userInput
        IF character IS '@'
            // If this is not the first occurrence of '@'
            IF counter IS GREATER THAN 0
                ADD 'at' TO modifiedList
                SET counter TO 1
            ELSE
                ADD '@' TO modifiedList
                SET counter TO 1
        ELSE
            // If the character is not '@', just add it to the list
            ADD character TO modifiedList

    // Join all parts in modifiedList back into a single string
    SET finalOutput TO JOIN modifiedList INTO A SINGLE STRING

    // If the last character of finalOutput is a '.', replace it with 'dot'
    IF LAST CHARACTER OF finalOutput IS '.'
        SET finalOutput TO SUBSTRING OF finalOutput UNTIL LAST POSITION + 'dot'

    // Output the final result
    PRINT finalOutput

END FUNCTION
```

### Explanation of the Pseudocode
- The **main function** starts by reading input and normalizing it by replacing specific words with characters.
- It checks and modifies the first character of the input if necessary.
- The code involves iterating through characters, maintaining a count of occurrences of '@', and ensuring that duplicate '@' symbols are handled correctly.
- It constructs the final output string and manipulates the last character if it's a '.'.
- Finally, it prints the transformed string. 

This pseudocode effectively conveys the steps and logic without getting bogged down in specific programming syntax.
