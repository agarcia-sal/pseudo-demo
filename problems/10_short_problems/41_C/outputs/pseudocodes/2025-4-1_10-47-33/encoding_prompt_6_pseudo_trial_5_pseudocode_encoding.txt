```
BEGIN

    // Read a line of input and remove leading/trailing spaces
    INPUT line_of_text

    // Replace occurrences of 'dot' with '.' and 'at' with '@'
    REPLACE all occurrences of 'dot' in line_of_text with '.'
    REPLACE all occurrences of 'at' in line_of_text with '@'

    // If the first character is a '.', prepend 'dot' to the string
    IF the first character of line_of_text is equal to '.' THEN
        line_of_text = 'dot' + substring of line_of_text from index 1 to end

    // Initialize a counter and a list to hold the modified characters
    SET character_counter = 0
    CREATE an empty list called modified_characters
    SET length_of_text = 0 // (this variable is initialized but not used further)

    // If the first character is '@', prepend 'at' to the string
    IF the first character of line_of_text is equal to '@' THEN
        line_of_text = 'at' + substring of line_of_text from index 1 to end

    // Iterate through each character in line_of_text
    FOR each character in line_of_text DO
        IF character is '@' THEN
            // Check how many '@' have been processed
            IF character_counter > 0 THEN
                ADD 'at' to modified_characters
                SET character_counter to 1
            ELSE
                ADD '@' to modified_characters
                SET character_counter to 1
            END IF
        ELSE
            // Add the current character to the list of modified characters
            ADD character to modified_characters
        END IF
    END FOR

    // Join all characters in modified_characters to create a string
    SET final_output = join all elements in modified_characters into a single string

    // If the last character is a '.', replace it with 'dot'
    IF the last character of final_output is equal to '.' THEN
        REMOVE the last character from final_output and ADD 'dot' instead

    // Output the final modified string
    PRINT final_output

END
``` 

### Summary:
The pseudocode reads an input string, processes occurrences of 'dot' and 'at', modifies the string based on specific rules related to these terms' placement, and outputs a reformatted version of the input. It ensures that '@' characters are uniquely represented and that the output ends with 'dot' if the string ends with a period.
