**Pseudocode:**

```plaintext
BEGIN

    // Read input string from standard input
    INPUT string inputString

    // Replace occurrences of 'dot' with '.' and 'at' with '@'
    REPLACE 'dot' WITH '.' IN inputString
    REPLACE 'at' WITH '@' IN inputString

    // If the first character is '.', prepend 'dot'
    IF inputString[0] == '.' THEN
        inputString = 'dot' + inputString[1:]

    // Initialize count and list to store characters
    INITIALIZE count AS 0
    INITIALIZE outputList AS EMPTY LIST
    INITIALIZE length AS 0  // Note: length is unused

    // If the first character is '@', prepend 'at'
    IF inputString[0] == '@' THEN
        inputString = 'at' + inputString[1:]

    // Iterate through each character in the input string
    FOR each character IN inputString DO
        IF character == '@' THEN
            // If the count is greater than 0, append 'at' to the output list
            IF count > 0 THEN
                APPEND 'at' TO outputList
                count = 1 
            ELSE
                // Else, append '@' to the output list
                APPEND '@' TO outputList
                count = 1
        ELSE
            // Append the current character to the output list
            APPEND character TO outputList

    // Join the output list into a single string
    INITIALIZE finalString AS JOIN outputList INTO STRING

    // If the last character is '.', replace it with 'dot'
    IF finalString[-1] == '.' THEN
        finalString = REMOVE LAST CHARACTER FROM finalString
        finalString = finalString + 'dot'

    // Print the modified string
    OUTPUT finalString

END
``` 

This pseudocode captures the main logic of the original code in a clear and structured manner, emphasizing readability and algorithm flow without worrying about specific programming syntax.
