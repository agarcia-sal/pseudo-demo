**Purpose:** The goal of this algorithm is to read a string that may contain the words "dot" and "at", convert them into their respective symbols ('.' and '@'), ensure proper formatting, and then output the modified string.

**Pseudocode:**

1. **Start Program**
    
2. **Read Input:**
   - Get a line of text from the user and remove any extra spaces from the beginning and end.

3. **Replace Words with Symbols:**
   - Replace every occurrence of the word "dot" with '.' in the input text.
   - Replace every occurrence of the word "at" with '@' in the input text.

4. **Check for Leading Symbols:**
   - If the first character of the modified text is '.', prepend "dot" to the text (this ensures proper formatting).

5. **Initialize Variables:**
   - Create a counter called `symbolCounter` and set it to 0.
   - Create a list called `resultList` to hold the characters of the final output.
   - Set a variable `length` to 0 (currently unused in this logic).

6. **Check for Leading '@' Symbol:**
   - If the first character of the modified text is '@', prepend "at" to the text.

7. **Processing Each Character:**
   - For each character in the modified text:
     - If the character is '@':
       - If `symbolCounter` is greater than 0 (indicating we already added an '@' before):
         - Append "at" to `resultList`.
         - Set `symbolCounter` to 1 (indicating the last added symbol is now 'at').
       - Otherwise:
         - Append '@' to `resultList`.
         - Set `symbolCounter` to 1 (indicating the last added symbol is now '@').
     - Else:
       - Append the character to `resultList`.

8. **Join Resulting Characters:**
   - Combine all elements in `resultList` into a single string called `finalString`.

9. **Check for Trailing Symbols:**
   - If the last character of `finalString` is '.':
     - Remove the last character and append the word "dot" instead.

10. **Output Result:**
    - Display `finalString` to the user.

11. **End Program** 

This pseudocode maintains the original logic and flow while transforming the linguistic structure into a clear and accessible format for those familiar with programming concepts.
