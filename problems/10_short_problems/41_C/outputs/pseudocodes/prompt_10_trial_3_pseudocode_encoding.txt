**Pseudocode:**

1. **Read Input:**
   - Set variable `inputLine` to the value read from standard input and remove any leading or trailing whitespace.

2. **Replace Substrings:**
   - Replace all occurrences of the substring "dot" in `inputLine` with ".".
   - Replace all occurrences of the substring "at" in `inputLine` with "@".

3. **Check for Leading Dot:**
   - If the first character of `inputLine` is ".", then:
     - Set `inputLine` to "dot" concatenated with the substring of `inputLine` from index 1 to the end.

4. **Initialize Counting Variables:**
   - Set variable `counter` to 0.
   - Initialize an empty list `charactersList`.
   - Set variable `length` to 0.

5. **Check for Leading At:**
   - If the first character of `inputLine` is "@", then:
     - Set `inputLine` to "at" concatenated with the substring of `inputLine` from index 1 to the end.

6. **Iterate Through Each Character:**
   - For each character `currentChar` in `inputLine`:
     - If `currentChar` is "@", then:
       - If `counter` is greater than 0, then:
         - Append "at" to `charactersList`.
         - Set `counter` to 1.
       - Otherwise:
         - Append "@" to `charactersList`.
         - Set `counter` to 1.
     - Otherwise:
       - Append `currentChar` to `charactersList`.

7. **Join Characters:**
   - Set `joinedCharacters` to the result of joining all elements in `charactersList` into a single string.

8. **Check for Trailing Dot:**
   - If the last character of `joinedCharacters` is ".", then:
     - Set `joinedCharacters` to the substring of `joinedCharacters` from the beginning to the second-to-last character, concatenated with "dot".

9. **Display Result:**
   - Print the value of `joinedCharacters`.

**Assumptions:**
- The input is a string that may contain the substrings "dot" and "at".
- The string manipulations (e.g., replacements and substrings) function as expected with valid string inputs.
- The algorithm assumes that the single character predicates (like `==`) will function correctly for the input string.
