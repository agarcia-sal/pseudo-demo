**Purpose:** The main goal of this program is to format an email address by replacing specific text patterns with their symbolic equivalents and ensuring that the final address meets certain criteria regarding its structure.

**Pseudocode:**

1. **Read Input:**
   - Get a line of input from the user and remove any leading and trailing spaces.
   - Store the input in a variable called `emailInput`.

2. **Replace Specific Patterns:**
   - Replace all occurrences of the word "dot" with the character "." in `emailInput`.
   - Replace all occurrences of the word "at" with the character "@" in `emailInput`.

3. **Handling Leading Characters:**
   - If the first character of `emailInput` is ".", then:
     - Prepend "dot" to the string, starting from the second character (i.e., keep the rest of the string unchanged).

4. **Initialize Variables:**
   - Set a counter `specialCharacterCount` to 0.
   - Create an empty list `formattedEmail` to store characters of the formatted email.
   - Initialize a variable `length` to 0 (though it is not used later).

5. **Handling Specific Character Structures:**
   - If the first character of `emailInput` is "@", then:
     - Prepend "at" to the string, starting from the second character.
   
6. **Process Each Character:**
   - For each character in `emailInput`, do the following:
     - If the character is "@":
       - If `specialCharacterCount` is greater than 0, it indicates an "at" has already been added:
         - Append "at" to `formattedEmail`.
         - Set `specialCharacterCount` back to 1.
       - Else:
         - Append "@" to `formattedEmail`.
         - Set `specialCharacterCount` to 1.
     - Else:
       - Append the current character to `formattedEmail`.

7. **Construct Final Output:**
   - Join all the characters in `formattedEmail` to form a single string called `finalEmail`.
   - If the last character of `finalEmail` is ".", then:
     - Remove the last character and replace it with "dot" (to ensure that an email cannot end with a period).
     
8. **Print Result:**
   - Display the `finalEmail` to the user.

**Comments for Clarity:**
- The program emphasizes proper formatting for email addresses by handling specific text modifications and ensuring the output conforms to conventional email structure.
- It ensures that only one "@" is retained and format issues involving leading dots or trailing dots are resolved.
