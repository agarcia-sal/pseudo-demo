**Purpose**: The goal of the provided code is to format an email-like string by replacing certain keywords with symbols and ensuring that the string adheres to specific formatting rules.

---

**Pseudocode**:

1. **Read Input**: Get input from the user, which is expected to be a string.
   - Input: `originalString` = read input and remove any leading or trailing spaces.

2. **Replace Keywords**: 
   - Replace every occurrence of "dot" in `originalString` with the symbol ".".
   - Replace every occurrence of "at" in `originalString` with the symbol "@".

3. **Check First Character**: 
   - If the first character of `originalString` is ".", prepend "dot" to the string (to indicate it starts with "dot").

4. **Initialize Variables**: 
   - Create a counter variable `counter` set to 0 to track occurrences of "@".
   - Create an empty list `resultList` to store characters for constructing the final output.
   
5. **Format Characters**: 
   - For each character `currentCharacter` in `originalString`:
     - If `currentCharacter` is "@": 
       - If `counter` is greater than 0, append "at" to `resultList` and set `counter` to 1.
       - Otherwise, append "@" to `resultList` and set `counter` to 1.
     - If `currentCharacter` is not "@", append it directly to `resultList`.

6. **Construct the Final String**: 
   - Combine all elements in `resultList` to create a single string called `finalString`.

7. **Check Last Character**:
   - If the last character of `finalString` is ".", remove that character and append "dot" to the end of the string.

8. **Print the Result**: Output the `finalString`.

---

**Comments**:
- The program ensures that "dot" and "at" are both processed into their corresponding symbols, while also managing cases where there are multiple "@" symbols in succession.
- It maintains certain formatting rules, such as ensuring the string starts with "dot" if it begins with ".", and adjusting the ending if it ends with ".".

**Example Structure**:
- **Function Name**: `FormatEmailString`
- **Parameters**: `originalString`
- **Returns**: `finalString` (the formatted string)
- This structured approach allows for easy modification and clarity in logic flow.
