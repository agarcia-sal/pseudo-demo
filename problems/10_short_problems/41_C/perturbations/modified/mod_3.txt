
**Pseudocode:**

1. **Receive Input:**
   - Create a variable `inputString` and read a line of input from the user.
   - Remove any extra spaces around the input.

2. **Replace Keywords:**
   - Replace all occurrences of the word "dot" in `inputString` with the symbol ".".
   - Replace all occurrences of the word "at" in `inputString` with the symbol "@".

3. **Check Starting Character:**
   - If the first character of `inputString` is a ".":
     - Prepend "dot" to `inputString`, excluding the first character.

4. **Initialize Variables:**
   - Set `countAt` to 0 (to keep track of "@" occurrences).
   - Create an empty list called `resultList` (to construct the final output).
   - Initialize a variable `length` to 0 (not used in this pseudocode, hence can be omitted).

5. **Check and Correct Starting Character:**
   - If the first character of `inputString` is "@":
     - Prepend "at" to `inputString`, excluding the first character.

6. **Process Each Character:**
   - For each character `character` in `inputString`:
     - If `character` is "@":
       - If `countAt` is greater than 0:
         - Append the word "at" to `resultList`.
         - Set `countAt` to 1.
       - Otherwise:
         - Append the symbol "@" to `resultList`.
         - Set `countAt` to 1.
     - If `character` is not "@":
       - Append `character` to `resultList`.

7. **Combine the List:**
   - Create a string `finalOutput` by joining all elements in `resultList`.

8. **Fix Ending Character:**
   - If the last character of `finalOutput` is a ".":
     - Replace the final "." with the word "dot".

9. **Output the Result:**
   - Print `finalOutput`.

**End of Pseudocode**  

This pseudocode abstracts the original code's logic into clear steps with descriptive variable names, making the process more understandable while maintaining the same intended functionality.
