**Purpose of the Code**:  
The primary goal of this code is to format an email-like string by replacing specific words with symbols, ensuring the resulting string adheres to certain rules regarding placement of characters.

---

**Pseudocode**:

1. **Start Program**

2. **Read Input**: 
   - Get a string of characters from the user and remove any leading/trailing whitespace.

3. **Replace Words with Symbols**:
   - Replace every occurrence of the word "dot" with "." (dot symbol).
   - Replace every occurrence of the word "at" with "@" (at symbol).

4. **Check Start of String**:
   - If the first character of the string is ".", then:
     - Prepend "dot" to the string, removing the first character (thus transforming ".example" into "dotexample").

5. **Initialize Variables**:
   - Create a counter variable to track occurrences of "@" (set to zero).
   - Create an empty list to store the processed characters.
   - Set the length variable to zero.

6. **Check Start of String Again**:
   - If the first character of the modified string is "@", then:
     - Prepend "at" to the string, removing the first character (thus transforming "@example" into "atexample").

7. **Process Each Character**:
   - For each character in the modified string:
     - If the character is "@", then:
       - If the counter is greater than zero (meaning another "@" has already been processed):
         - Append "at" to the list.
         - Set the counter to one.
       - Otherwise:
         - Append "@" to the list.
         - Set the counter to one.
     - If the character is not "@", then:
       - Append the character to the list.

8. **Join Processed Characters**:
   - Combine all elements in the list into a single string.

9. **Check End of String**:
   - If the last character of the resulting string is ".", then:
     - Replace the "." at the end of the string with "dot".

10. **Output the Result**:
    - Print the final formatted string.

11. **End Program**

---

**Comments for Clarity**:
- **Input Handling**: The program takes a user input that mimics an email format using words rather than symbols.
- **Formatting Rules**: The program ensures that "dot" and "at" are correctly translated into symbols and handles special cases for the start and end of the string.
- **Outcome**: The end output is a properly formatted email-like string, enhancing readability and proper structure.
