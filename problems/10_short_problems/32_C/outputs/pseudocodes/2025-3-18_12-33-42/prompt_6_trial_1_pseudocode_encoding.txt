Here is the pseudocode that captures the logic and structure of the provided code:

```
FUNCTION calculate_remainder(total, divisor)
    // Calculate how many times 'divisor' fits into 'total' and the remainder
    quotient, remainder = total DIVIDED BY divisor WITH REAMINDER
    
    // If there is a remainder, multiply it by one more than the quotient
    IF remainder IS GREATER THAN 0 THEN
        RETURN remainder TIMES (quotient + 1)
    ELSE
        RETURN total  // If no remainder, return the original total
END FUNCTION

// Read input values for n, m, and s
READ n, m, s FROM USER INPUT

// Calculate the results based on the function we defined
result_for_n = calculate_remainder(n, s)
result_for_m = calculate_remainder(m, s)

// Multiply the results and print the final output
final_result = result_for_n TIMES result_for_m
PRINT final_result
```

### Explanation:

1. **Function Definition**: The `calculate_remainder` function is defined to handle the main logic of dividing the total by the divisor and calculating the appropriate return value based on the presence of a remainder.

2. **User Input**: It captures the inputs `n`, `m`, and `s` in a descriptive manner.

3. **Processing Results**: It computes results using the defined function for both `n` and `m`.

4. **Output**: Finally, it multiplies the two results and prints the output, clearly indicating the flow of data from input to output.

The pseudocode avoids specific programming language syntax and focuses on conveying the logic in a straightforward manner, suitable for understanding by someone unfamiliar with the original code.
