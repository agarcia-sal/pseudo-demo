Here is the translated high-level pseudocode based on the provided Python code:

```
FUNCTION main()
    // Read input from the user
    DECLARE firstTimeInput AS STRING
    DECLARE secondTimeInput AS STRING
    firstTimeInput = GET user input for first time
    secondTimeInput = GET user input for second time
    
    // Split the input strings into lists of strings
    DECLARE firstTimeParts AS LIST OF STRING
    DECLARE secondTimeParts AS LIST OF STRING
    firstTimeParts = SPLIT firstTimeInput into parts
    secondTimeParts = SPLIT secondTimeInput into parts
    
    // Initialize a counter for differences
    DECLARE differenceCount AS INTEGER
    differenceCount = 0 
    
    // Compare the parts of both time inputs
    FOR index FROM 0 TO 2 DO
        DECLARE firstPart AS INTEGER
        DECLARE secondPart AS INTEGER
        firstPart = CONVERT firstTimeParts[index] to INTEGER
        secondPart = CONVERT secondTimeParts[index] to INTEGER
        
        // Increment the difference count if parts do not match
        IF firstPart NOT EQUAL TO secondPart THEN
            differenceCount = differenceCount + 1 
        END IF
    END FOR
    
    // Check if there are less than 3 differences
    IF differenceCount < 3 THEN
        PRINT "YES"
    ELSE
        PRINT "NO"
    END IF
END FUNCTION

// Main execution starts here
IF this script is run as the main program THEN
    CALL main()
END IF
```

### Explanation of Key Concepts:
1. **Input Handling:** The program collects two time inputs as strings.
2. **Splitting the Input:** It splits these inputs into components (e.g., hours, minutes, seconds).
3. **Counting Differences:** The logic compares corresponding components from both inputs and counts how many differ.
4. **Conditional Output:** Based on the number of differences, it determines whether to print "YES" or "NO".

### Complexity Context:
The program is primarily concerned with comparing two time representations in string format and determining how many components differ. This is a straightforward comparison task executed in constant time, making it efficient.
