{
  "prompt": "Given the pseudocode below, **without executing or simulating it**, determine if it is fully specified and rigorously defined to guarantee that **any implementation strictly adhering to this pseudocode will pass all unit tests validating the described functionality.**\n\nTo decide whether to output **1** (reproducible) or **0** (not reproducible), verify the pseudocode satisfies **all** of these criteria **comprehensively**:\n\n1. **Explicit Completeness and Clarity:**  \n   - All functions, classes, methods, and procedures have explicit, unambiguous names with clearly stated input parameters and outputs (including types if given).  \n   - All variables, data structures, and constants are explicitly declared or clearly introduced with initial values or states where required.  \n   - All control flows (loops, conditionals, recursion, iteration) are fully and explicitly described; all loop bounds, conditions, and updates are stated precisely, with no room for vague or implicit behavior.  \n   - Every operation (assignment, arithmetic, logical, data manipulation) is fully detailed; no reliance on language-specific defaults, side effects, or unspecified behavior.  \n   - The interface (entry point function/method signatures) matches the expected testing framework\u2019s requirements exactly and without implicit assumptions.\n\n2. **Logical and Algorithmic Correctness:**  \n   - The pseudocode represents a logically consistent algorithm that fully addresses the problem as described or strongly implied.  \n   - No contradictions, missing essential steps, or ambiguous instructions exist.  \n   - Any critical algorithmic invariants, preconditions, or assumptions necessary for correctness are explicitly stated or are clearly and unambiguously implied by the pseudocode.\n\n3. **Complete Edge Case and Boundary Condition Coverage:**  \n   - All relevant edge cases\u2014including empty, minimal, maximal, and exceptional inputs\u2014are explicitly handled or their correct handling is clearly and unambiguously implied.  \n   - Loops and recursion include explicit well-defined termination conditions ensuring no infinite loops or non-terminating calls.\n\n4. **Determinism and Implementation Independence:**  \n   - The pseudocode does not depend on any unstated external state, environment, platform-specific features, or non-deterministic behavior.  \n   - Given the same inputs, any compliant implementation must produce identical outputs across all valid test scenarios.\n\n5. **Self-Containment and Testability:**  \n   - The pseudocode is self-contained and fully implementable as-is without requiring additional scaffolding or external assumptions.  \n   - The declared functions or methods directly correspond to expected callable units for automated unit testing frameworks.\n\n**Output instructions:**  \n- Output exactly one digit: **1** if **and only if** the pseudocode meets *all* the above criteria ensuring guaranteed reproducibility and success on all unit tests.  \n- Output **0** if **any** ambiguity, omission, incompleteness, logical flaw, missing or implicit assumption, or incomplete edge-case handling exists that could result in failed or inconsistent implementations.\n\n**Important:** Produce output strictly as a single digit (either `1` or `0`) only. No explanations, formatting, or extra text. The sequence of outputs must correspond exactly to the order in which pseudocode inputs are fed.\n\n---\n\n**Additional clarifications to improve precision and reduce errors:**  \n- Treat any form of under-specification (such as ambiguous variable initializations, undefined function return values, or unclear loop bounds) as cause for outputting `0`.  \n- Consider absence of fully matching function/method signatures against the testing interface as `0`.  \n- Recursive or iterative constructs must have explicitly stated and verifiable termination conditions.  \n- Defer any judgment about the algorithm\u2019s correctness only if it is explicitly or unambiguously derivable from the pseudocode logic; do not guess or infer beyond provided specifications.  \n- Confirm that every variable and state change is traceable and unambiguous throughout the pseudocode.\n\nThis holistic, stringent approach will maximize accurate discrimination between reproducible and non-reproducible pseudocode.",
  "response": "Given the pseudocode below, **without executing or simulating it**, determine if it is fully specified and rigorously defined to guarantee that **any implementation strictly adhering to this pseudocode will pass all unit tests validating the described functionality.**\n\nTo decide whether to output **1** (reproducible) or **0** (not reproducible), verify the pseudocode satisfies **all** of these criteria **comprehensively**:\n\n1. **Explicit Completeness and Clarity:**  \n   - All functions, classes, methods, and procedures have explicit, unambiguous names with clearly stated input parameters and outputs (including types if given).  \n   - All variables, data structures, and constants are explicitly declared or clearly introduced with initial values or states where required.  \n   - All control flows (loops, conditionals, recursion, iteration) are fully and explicitly described; all loop bounds, conditions, and updates are stated precisely, with no room for vague or implicit behavior.  \n   - Every operation (assignment, arithmetic, logical, data manipulation) is fully detailed; no reliance on language-specific defaults, side effects, or unspecified behavior.  \n   - The interface (entry point function/method signatures) matches the expected testing framework\u2019s requirements exactly and without implicit assumptions.\n\n2. **Logical and Algorithmic Correctness:**  \n   - The pseudocode represents a logically consistent algorithm that fully addresses the problem as described or strongly implied.  \n   - No contradictions, missing essential steps, or ambiguous instructions exist.  \n   - Any critical algorithmic invariants, preconditions, or assumptions necessary for correctness are explicitly stated or are clearly and unambiguously implied by the pseudocode.\n\n3. **Complete Edge Case and Boundary Condition Coverage:**  \n   - All relevant edge cases\u2014including empty, minimal, maximal, and exceptional inputs\u2014are explicitly handled or their correct handling is clearly and unambiguously implied.  \n   - Loops and recursion include explicit well-defined termination conditions ensuring no infinite loops or non-terminating calls.\n\n4. **Determinism and Implementation Independence:**  \n   - The pseudocode does not depend on any unstated external state, environment, platform-specific features, or non-deterministic behavior.  \n   - Given the same inputs, any compliant implementation must produce identical outputs across all valid test scenarios.\n\n5. **Self-Containment and Testability:**  \n   - The pseudocode is self-contained and fully implementable as-is without requiring additional scaffolding or external assumptions.  \n   - The declared functions or methods directly correspond to expected callable units for automated unit testing frameworks.\n\n**Output instructions:**  \n- Output exactly one digit: **1** if **and only if** the pseudocode meets *all* the above criteria ensuring guaranteed reproducibility and success on all unit tests.  \n- Output **0** if **any** ambiguity, omission, incompleteness, logical flaw, missing or implicit assumption, or incomplete edge-case handling exists that could result in failed or inconsistent implementations.\n\n**Important:** Produce output strictly as a single digit (either `1` or `0`) only. No explanations, formatting, or extra text. The sequence of outputs must correspond exactly to the order in which pseudocode inputs are fed.\n\n---\n\n**Additional clarifications to improve precision and reduce errors:**  \n- Treat any form of under-specification (such as ambiguous variable initializations, undefined function return values, or unclear loop bounds) as cause for outputting `0`.  \n- Consider absence of fully matching function/method signatures against the testing interface as `0`.  \n- Recursive or iterative constructs must have explicitly stated and verifiable termination conditions.  \n- Defer any judgment about the algorithm\u2019s correctness only if it is explicitly or unambiguously derivable from the pseudocode logic; do not guess or infer beyond provided specifications.  \n- Confirm that every variable and state change is traceable and unambiguous throughout the pseudocode.\n\nThis holistic, stringent approach will maximize accurate discrimination between reproducible and non-reproducible pseudocode.",
  "score": 0.6366666666666667,
  "feedback": "We have a 4 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nWe have cosmetic, which are pseudocodes that are variations of the positive pseudocodes and also pass all test cases.\nWe have near-misses, which are pseudocodes that correspond to code that almost passes all test cases but do not. They pass at least 80% of test cases\nHere is the score for this prompt on positive-labeled pseudocodes: 0.6666666666666666\nHere is the score for this prompt on negative-labeled pseudocodes: 0.7133333333333334\nHere is the score for this prompt on cosmetic-labeled pseudocodes: 0.7466666666666667\nHere is the score for this prompt on near_miss-labeled pseudocodes: 0.42\n\nThe following are pseudocodes that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION isMatch(s, p)  \n        SET dp TO a two dimensional list of False with the number of rows equal to the length of s PLUS one and the number of columns equal to the length of p PLUS one  \n        SET element at position zero zero of dp TO True  \n        FOR j FROM one TO the length of p  \n            IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                SET element at position zero j of dp TO the value of element at position zero j MINUS one of dp  \n            END IF  \n        END FOR  \n        FOR i FROM one TO the length of s  \n            FOR j FROM one TO the length of p  \n                IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j of dp OR the value of element at position i j MINUS one of dp  \n                ELSE IF element at position j MINUS one of p EQUALS the character representing question mark OR element at position i MINUS one of s EQUALS element at position j MINUS one of p  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j MINUS one of dp  \n                END IF  \n            END FOR  \n        END FOR  \n        RETURN element at position the length of s the length of p of dp  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION uniquePaths(m n)  \n        SET dp TO a two dimensional list with m rows and n columns where each element is set to one  \n        FOR i FROM two TO m  \n            FOR j FROM two TO n  \n                SET element at position i of dp TO the list at position i of dp  \n                SET element at position j of element at position i of dp TO the sum of the element at position i MINUS one of dp at position j AND the element at position i of dp at position j MINUS one  \n            END FOR  \n        END FOR  \n        RETURN the element at position m MINUS one of dp at position n MINUS one  \n    END FUNCTION  \nEND CLASS\n\nThe following are cosmetic or modified pseudocodes of other reproducible versions of pseudocode that are reproducible but were labeled as not:\noriginal version of the pseudocode for this problem that is reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two RAISED TO THE POWER OF thirty ONE MINUS one  \n        SET INT_MIN TO the NEGATIVE of two RAISED TO THE POWER OF thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND element at position index of s EQUALS the space character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (element at position index of s EQUALS the plus character OR element at position index of s EQUALS the minus character)  \n            IF element at position index of s EQUALS the minus character  \n                SET sign TO the NEGATIVE of one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND element at position index of s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF element at position index of s  \n            IF result GREATER THAN INT_MAX MINUS digit DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nmodified version of the pseudocode for this problem that is also reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET maxIntValue AS (2 ^ 31) - 1  \n        SET minIntValue AS 0 - (2 ^ 31)  \n        SET accumulatedNumber TO 0  \n        SET position TO 0  \n        SET lengthOfString TO LENGTH OF s  \n        SET polarity TO 1  \n\n        WHILE position < lengthOfString AND s[position] = ' '  \n            position \u2190 position + 1  \n        END WHILE  \n\n        IF position < lengthOfString THEN  \n            SWITCH s[position]  \n                CASE '-'  \n                    polarity \u2190 0 - 1  \n                    position \u2190 position + 1  \n                    BREAK  \n                CASE '+'  \n                    polarity \u2190 1  \n                    position \u2190 position + 1  \n                    BREAK  \n            END SWITCH  \n        END IF  \n\n        REPEAT UNTIL NOT (position < lengthOfString AND s[position] >= '0' AND s[position] <= '9')  \n            SET currentChar TO s[position]  \n            SET numericValue TO INTEGER VALUE OF currentChar  \n            SET boundaryCheck TO maxIntValue - (numericValue DIV 10)  \n\n            IF accumulatedNumber > boundaryCheck THEN  \n                IF polarity = 1 THEN  \n                    RETURN maxIntValue  \n                ELSE  \n                    RETURN minIntValue  \n                END IF  \n            END IF  \n\n            accumulatedNumber \u2190 (accumulatedNumber * 10) + numericValue  \n            position \u2190 position + 1  \n        END REPEAT  \n\n        RETURN polarity * accumulatedNumber  \n    END FUNCTION  \nEND CLASS\noriginal version of the pseudocode for this problem that is reproducible:\nCLASS Solution  \n    FUNCTION removeDuplicates(nums)  \n        IF the LENGTH OF nums EQUALS zero THEN  \n            RETURN zero  \n        END IF  \n        \n        SET write_index TO zero  \n        \n        FOR i FROM zero TO the MINIMUM of two AND the LENGTH OF nums MINUS one  \n            SET element at position write_index of nums TO element at position i of nums  \n            INCREMENT write_index BY one  \n        END FOR  \n        \n        FOR i FROM two TO the LENGTH OF nums MINUS one  \n            IF element at position i of nums NOT EQUALS element at position write_index MINUS two of nums THEN  \n                SET element at position write_index of nums TO element at position i of nums  \n                INCREMENT write_index BY one  \n            END IF  \n        END FOR  \n        \n        RETURN write_index  \n    END FUNCTION  \nEND CLASS\nmodified version of the pseudocode for this problem that is also reproducible:\nCLASS Solution  \n    FUNCTION removeDuplicates(nums)  \n        IF NOT (LENGTH OF nums > 0) THEN  \n            RETURN 0  \n        END IF  \n        \n        SET ptr AS 0  \n        \n        SET idx AS 0  \n        WHILE idx <= (2 MINUS 1) AND idx <= (LENGTH OF nums MINUS 1)  \n            ASSIGN nums[ptr] AS nums[idx]  \n            SET ptr AS ptr + 1  \n            SET idx AS idx + 1  \n        END WHILE  \n        \n        SET cursor AS 2  \n        WHILE cursor <= (LENGTH OF nums MINUS 1)  \n            IF nums[cursor] = nums[(ptr MINUS 2)] THEN  \n                # do nothing, skip increment  \n            ELSE  \n                ASSIGN nums[ptr] AS nums[cursor]  \n                SET ptr AS ptr PLUS 1  \n            END IF  \n            SET cursor AS cursor + 1  \n        END WHILE  \n        \n        RETURN ptr  \n    END FUNCTION  \nEND CLASS\n\nThe following are pseudocodes that are not reproducible but were labeled as reproducible:\nCLASS Solution\n    FUNCTION isMatch(string_s, string_p)\n        SET dp TO a two dimensional list of BOOLEAN false VALUES with the number of rows EQUAL TO the LENGTH OF string_s PLUS one AND the number of columns EQUAL TO the LENGTH OF string_p PLUS one\n\n        SET the element at row zero AND column zero OF dp TO true\n\n        FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n            IF the element at position index_j MINUS one OF string_p EQUALS character star\n                SET the element at row zero AND column index_j OF dp TO the element at row zero AND column index_j MINUS one OF dp\n            END IF\n        END FOR\n        \n        FOR index_i FROM one TO the LENGTH OF string_s INCLUSIVE\n            FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n                IF the element at position index_j MINUS one OF string_p EQUALS character star\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j OF dp OR the element at row index_i AND column index_j MINUS one OF dp\n                ELSE IF the element at position index_j MINUS one OF string_p EQUALS character question MARK OR the element at position index_i MINUS one OF string_s EQUALS the element at position index_j MINUS one OF string_p\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j MINUS one OF dp\n                END IF\n            END FOR\n        END FOR\n\n        RETURN the element at row the LENGTH OF string_s AND column the LENGTH OF string_p OF dp\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_0.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"ho\", p = \"ho***\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_1.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcdef\", p = \"abc*ef\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_2.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcabczzzde\", p = \"*abc???de*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_3.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abbabbbbbbabaababbabbbabaaabbaaaaabbbabbbabaaabbabbaaabbbabaabbbabbabbabbbbba\", p = \"*a*****b*bb*b****b*bb*bb*a*aa*b*b*a*a*b*aba*b*ba*a*aab*bbb*a*aaab*ba*a*bb*bb*bb*ba*ba*b*ab*b*b\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_4.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"aabbccddeeff\", p = \"a*b*c*d*e*f*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION isMatch(s, p)  \n        SET dp TO a two dimensional list of False with the number of rows equal to the length of s PLUS one and the number of columns equal to the length of p PLUS one  \n        SET element at position zero zero of dp TO True  \n        FOR j FROM one TO the length of p  \n            IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                SET element at position zero j of dp TO the value of element at position zero j MINUS one of dp  \n            END IF  \n        END FOR  \n        FOR i FROM one TO the length of s  \n            FOR j FROM one TO the length of p  \n                IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j of dp OR the value of element at position i j MINUS one of dp  \n                ELSE IF element at position j MINUS one of p EQUALS the character representing question mark OR element at position i MINUS one of s EQUALS element at position j MINUS one of p  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j MINUS one of dp  \n                END IF  \n            END FOR  \n        END FOR  \n        RETURN element at position the length of s the length of p of dp  \n    END FUNCTION  \nEND CLASS\nCLASS Solution\n    FUNCTION canJump(list_of_numbers)\n        SET farthest_reachable_index TO zero\n        FOR index FROM zero TO the LENGTH OF list_of_numbers MINUS one INCLUSIVE\n            IF index GREATER THAN farthest_reachable_index\n                RETURN False\n            END IF\n            SET possible_reach TO index PLUS element at position index OF list_of_numbers\n            SET farthest_reachable_index TO the GREATER OF farthest_reachable_index AND possible_reach\n        END FOR\n        RETURN farthest_reachable_index GREATER THAN OR EQUAL TO the LENGTH OF list_of_numbers MINUS one\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_0.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,1,1,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_1.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [3,2,1,0,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_2.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_3.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [1,2,3,4,5,6,7,8,9,10]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_4.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION canJump(nums)  \n        SET farthest TO zero  \n        FOR i FROM zero TO the LENGTH OF nums MINUS one  \n            IF i GREATER THAN farthest  \n                RETURN false  \n            END IF  \n            SET possible_reach TO i PLUS element at position i of nums  \n            IF possible_reach GREATER THAN farthest  \n                SET farthest TO possible_reach  \n            END IF  \n        END FOR  \n        IF farthest GREATER THAN OR EQUAL TO the LENGTH OF nums MINUS one  \n            RETURN true  \n        ELSE  \n            RETURN false  \n        END IF  \n    END FUNCTION  \nEND CLASS\n\nThe following are near-miss pseudocodes - they are almost reproducible but were labeled as reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two POWERED BY thirty ONE MINUS one  \n        SET INT_MIN TO negative two POWERED BY thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND character at position index OF s EQUALS a single whitespace character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (character at position index OF s EQUALS the plus sign OR character at position index OF s EQUALS the minus sign)  \n            IF character at position index OF s EQUALS the minus sign  \n                SET sign TO negative one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND character at position index OF s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF character at position index OF s  \n            IF result GREATER THAN (INT_MAX MINUS digit) DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.96875, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_0.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"42\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_1.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \" -042\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_2.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"1337c0d3\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_3.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"0-1\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_4.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"words and 987\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two RAISED TO THE POWER OF thirty ONE MINUS one  \n        SET INT_MIN TO the NEGATIVE of two RAISED TO THE POWER OF thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND element at position index of s EQUALS the space character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (element at position index of s EQUALS the plus character OR element at position index of s EQUALS the minus character)  \n            IF element at position index of s EQUALS the minus character  \n                SET sign TO the NEGATIVE of one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND element at position index of s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF element at position index of s  \n            IF result GREATER THAN INT_MAX MINUS digit DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nCLASS Solution\n    FUNCTION multiply(num1 string, num2 string) RETURNS string\n        IF num1 IS \"0\" OR num2 IS \"0\"\n            RETURN \"0\"\n        END IF\n\n        DECLARE digits AS MAP from INT to INT\n        DECLARE lengthSum AS INT = LENGTH(num1) + LENGTH(num2)\n        FOR index IN RANGE(lengthSum)\n            digits[index] = 0\n        END FOR\n\n        DECLARE reversed1 AS string = \"\"\n        DECLARE reversed2 AS string = \"\"\n        FOR p FROM LENGTH(num1) - 1 DOWNTO 0\n            reversed1 = reversed1 + num1[p]\n        END FOR\n        FOR q FROM LENGTH(num2) - 1 DOWNTO 0\n            reversed2 = reversed2 + num2[q]\n        END FOR\n\n        DECLARE function recursiveMul(i INT, j INT) RETURNS VOID\n            IF i = LENGTH(reversed1)\n                RETURN\n            END IF\n            IF j = LENGTH(reversed2)\n                recursiveMul(i + 1, 0)\n                RETURN\n            END IF\n\n            DECLARE valA AS INT = ASCII_CODE(reversed1[i]) - ASCII_CODE(\"0\")\n            DECLARE valB AS INT = ASCII_CODE(reversed2[j]) - ASCII_CODE(\"0\")\n            DECLARE product AS INT = valA * valB\n            DECLARE baseIndex AS INT = i + j\n            DECLARE nextIndex AS INT = baseIndex + 1\n            DECLARE totalSum AS INT = product + digits[baseIndex]\n\n            digits[baseIndex] = totalSum MOD 10\n            digits[nextIndex] = digits[nextIndex] + (totalSum DIV 10)\n\n            recursiveMul(i, j + 1)\n        END FUNCTION\n\n        CALL recursiveMul(0, 0)\n\n        DECLARE output AS string = \"\"\n        FOR key FROM lengthSum - 1 DOWNTO 0\n            output = output + TO_STRING(digits[key])\n        END FOR\n\n        WHILE LENGTH(output) > 1 AND output[0] = \"0\"\n            output = SUBSTRING(output, 1)\n        END WHILE\n\n        RETURN output\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9666666666666667, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_0.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"2\", num2 = \"3\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_1.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"123\", num2 = \"456\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_2.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"1\", num2 = \"12345678901234567890\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_3.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"12345678901234567890\", num2 = \"9876543210\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_4.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"0\", num2 = \"987654321\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION multiply(num1 string num2 string) RETURNS string  \n        IF num1 EQUALS string zero OR num2 EQUALS string zero  \n            RETURN string zero  \n        END IF  \n\n        SET result TO a list of zeros with the LENGTH OF num1 PLUS the LENGTH OF num2  \n\n        SET num1 TO the reversal of num1  \n        SET num2 TO the reversal of num2  \n\n        FOR i FROM zero TO the LENGTH OF num1 MINUS one  \n            FOR j FROM zero TO the LENGTH OF num2 MINUS one  \n                SET mul TO the character code of the element at position i of num1 MINUS the character code of string zero MULTIPLIED BY the character code of the element at position j of num2 MINUS the character code of string zero  \n                SET p1 TO i PLUS j  \n                SET p2 TO i PLUS j PLUS one  \n                SET sum TO mul PLUS the element at position p1 of result  \n\n                SET the element at position p1 of result TO sum MODULO ten  \n                INCREMENT the element at position p2 of result BY the integer division of sum BY ten  \n            END FOR  \n        END FOR  \n\n        SET result_str TO the concatenation of the string representations of the elements of result in reverse order  \n        RETURN result_str with all leading string zeros removed  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION grayCode(n)  \n        IF n IS 0 THEN  \n            RETURN [0]  \n        END IF  \n        \n        ASSIGN resultList TO grayCode(n - 1)  \n        LET bitFlag BE 2 ^ (n - 1) * 1  \n        \n        DEFINE FUNCTION reverseList(inputList)  \n            IF inputList IS EMPTY THEN  \n                RETURN []  \n            ELSE  \n                RETURN reverseList(inputList[1:]) + [inputList[0]]  \n            END IF  \n        END FUNCTION  \n        \n        LET reversedResult BE reverseList(resultList)  \n        LET extendedList BE []  \n        \n        FOR each element IN reversedResult DO  \n            extendedList = extendedList + [(element BITWISE_OR bitFlag)]  \n        END FOR  \n        \n        RETURN resultList + extendedList  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.8333333333333334, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_0.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 2))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_1.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 1))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_2.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 12))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_3.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 6))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_4.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 11))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION grayCode(n)  \n        IF n EQUALS zero  \n            RETURN a list containing zero  \n        END IF  \n        SET prev_gray TO the result of calling grayCode with the value of n MINUS one  \n        SET mask TO one MULTIPLIED BY two RAISED TO the power of n MINUS one  \n        SET current_gray TO concatenation of prev_gray WITH a list constructed by taking each number IN the reversed prev_gray AND applying bitwise OR with mask  \n        RETURN current_gray  \n    END FUNCTION  \nEND CLASS\nCLASS Solution\n    FUNCTION minCut(s)\n        LET length_s BE LENGTH OF s\n        IF length_s <= 1 THEN\n            RETURN 0\n        END IF\n\n        LET palindrome_matrix BE LIST OF LISTS OF FALSE WITH size length_s by length_s\n        FUNCTION mark_palindrome(sub_len, start_idx)\n            IF sub_len > length_s THEN\n                RETURN\n            END IF\n\n            IF sub_len == 1 THEN\n                SET palindrome_matrix[start_idx][start_idx] TO TRUE\n                CALL mark_palindrome(sub_len + 1, 0)\n                RETURN\n            END IF\n\n            IF start_idx > length_s - sub_len THEN\n                CALL mark_palindrome(sub_len + 1, 0)\n                RETURN\n            END IF\n\n            LET finish_idx BE start_idx + sub_len - 1\n            IF sub_len == 2 THEN\n                SET palindrome_matrix[start_idx][finish_idx] TO (s[start_idx] == s[finish_idx])\n            ELSE\n                SET palindrome_matrix[start_idx][finish_idx] TO (s[start_idx] == s[finish_idx]) AND palindrome_matrix[start_idx + 1][finish_idx - 1]\n            END IF\n\n            CALL mark_palindrome(sub_len, start_idx + 1)\n        END FUNCTION\n\n        CALL mark_palindrome(1, 0)\n\n        LET minimal_cuts BE LIST OF 0 OF LENGTH length_s\n\n        FUNCTION determine_cuts(pos)\n            IF pos == length_s THEN\n                RETURN\n            END IF\n\n            IF palindrome_matrix[0][pos] THEN\n                SET minimal_cuts[pos] TO 0\n            ELSE\n                SET minimal_cuts[pos] TO INFINITY\n                FUNCTION min_cut_inner(k)\n                    IF k > pos THEN\n                        RETURN\n                    END IF\n\n                    IF palindrome_matrix[k][pos] AND minimal_cuts[k - 1] + 1 < minimal_cuts[pos] THEN\n                        SET minimal_cuts[pos] TO minimal_cuts[k - 1] + 1\n                    END IF\n                    CALL min_cut_inner(k + 1)\n                END FUNCTION\n                CALL min_cut_inner(1)\n            END IF\n            CALL determine_cuts(pos + 1)\n        END FUNCTION\n\n        CALL determine_cuts(0)\n\n        RETURN minimal_cuts[length_s - 1]\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9787234042553191, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_0.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"aab\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_1.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"a\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_2.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"ab\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_3.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"abacdfgdcaba\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_4.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"noon\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION minCut(s)  \n        SET n TO the LENGTH OF s  \n        IF n LESS THAN OR EQUAL TO one  \n            RETURN zero  \n        END IF  \n        \n        SET is_palindrome TO a two dimensional collection of size n by n filled with FALSE  \n        \n        FOR i FROM zero TO n MINUS one  \n            SET element at position i at position i of is_palindrome TO TRUE  \n        END FOR  \n        \n        FOR length FROM two TO n  \n            FOR start FROM zero TO n MINUS length  \n                SET end TO start PLUS length MINUS one  \n                IF length EQUALS two  \n                    SET element at position start at position end of is_palindrome TO the condition that element at position start of s EQUALS element at position end of s  \n                ELSE  \n                    SET element at position start at position end of is_palindrome TO the condition that element at position start of s EQUALS element at position end of s AND the element at position start PLUS one at position end MINUS one of is_palindrome  \n                END IF  \n            END FOR  \n        END FOR  \n        \n        SET min_cuts TO a collection of size n filled with zero  \n        \n        FOR i FROM zero TO n MINUS one  \n            IF element at position zero at position i of is_palindrome  \n                SET element at position i of min_cuts TO zero  \n            ELSE  \n                SET element at position i of min_cuts TO positive infinity  \n                FOR j FROM one TO i  \n                    IF element at position j at position i of is_palindrome AND element at position j MINUS one of min_cuts PLUS one LESS THAN element at position i of min_cuts  \n                        SET element at position i of min_cuts TO element at position j MINUS one of min_cuts PLUS one  \n                    END IF  \n                END FOR  \n            END IF  \n        END FOR  \n        \n        RETURN element at position n MINUS one of min_cuts  \n    END FUNCTION  \nEND CLASS\n\nAvg Score for all pseudocodes: 0.6366666666666667"
}