{
  "prompt": "Given a pseudocode implementation of an algorithm or function, your task is to determine whether this pseudocode is *reproducible*. Here, **reproducible** means the pseudocode is sufficiently precise, logically complete, fully specified, deterministic, and unambiguous such that a correct implementation based solely on it would *pass all unit tests* for any valid inputs relevant to the described problem \u2014 without errors, undefined behavior, or missing steps.\n\n**Key considerations for reproducibility include:**\n- All variables and data structures are properly declared and initialized.\n- Control flow constructs (loops, conditionals, switches) are well-formed and cover all necessary cases.\n- Operations (arithmetic, comparisons, assignments) use clearly defined operands and types.\n- Boundary conditions and corner cases (e.g., empty inputs, overflow, underflow) are handled explicitly.\n- No ambiguity in logic or interpretation so that there is a single, unambiguous way to implement.\n- Consistent use of terminology and references to elements (e.g., indexing within bounds, proper function calls).\n\n**Instructions:**\n\n1. Analyze the given pseudocode thoroughly for any *logical gaps, ambiguities, or missing components* that would cause an implementation to fail any tests or raise runtime errors under valid inputs.\n2. If the pseudocode can be confidently judged as passing *all* unit tests due to its completeness, deterministic behavior, and clarity\u2014output exactly:\n\n```\n1\n```\n\n3. Otherwise, if there is any indication of missing information, logical flaws, ambiguous constructs, or any aspect that would prevent it from passing all unit tests reliably\u2014output exactly:\n\n```\n0\n```\n\n4. Output **only** this single digit (`1` or `0`) per pseudocode, **in the order the pseudocodes are provided**. No additional text, explanation, or formatting should be output.\n\n---\n\n**Summary:**\n\n- Outputs correspond one-to-one with inputs.\n- Output `1` if pseudocode is logically complete, unambiguous, and fully specified to guarantee passing all unit tests.\n- Output `0` otherwise.\n- No extra commentary, whitespace, or formatting in output.\n- Assume inputs are well-structured pseudocode representing a single algorithm/function.\n\n---\n\nYour evaluation should prioritize strict completeness and determinism, flagging any pseudocode that could cause unit test failures or runtime errors as non-reproducible (`0`), and only affirm reproducibility (`1`) when such problems are confidently absent.",
  "response": "Given a pseudocode implementation of an algorithm or function, your task is to determine whether this pseudocode is *reproducible*. Here, **reproducible** means the pseudocode is sufficiently precise, logically complete, fully specified, deterministic, and unambiguous such that a correct implementation based solely on it would *pass all unit tests* for any valid inputs relevant to the described problem \u2014 without errors, undefined behavior, or missing steps.\n\n**Key considerations for reproducibility include:**\n- All variables and data structures are properly declared and initialized.\n- Control flow constructs (loops, conditionals, switches) are well-formed and cover all necessary cases.\n- Operations (arithmetic, comparisons, assignments) use clearly defined operands and types.\n- Boundary conditions and corner cases (e.g., empty inputs, overflow, underflow) are handled explicitly.\n- No ambiguity in logic or interpretation so that there is a single, unambiguous way to implement.\n- Consistent use of terminology and references to elements (e.g., indexing within bounds, proper function calls).\n\n**Instructions:**\n\n1. Analyze the given pseudocode thoroughly for any *logical gaps, ambiguities, or missing components* that would cause an implementation to fail any tests or raise runtime errors under valid inputs.\n2. If the pseudocode can be confidently judged as passing *all* unit tests due to its completeness, deterministic behavior, and clarity\u2014output exactly:\n\n```\n1\n```\n\n3. Otherwise, if there is any indication of missing information, logical flaws, ambiguous constructs, or any aspect that would prevent it from passing all unit tests reliably\u2014output exactly:\n\n```\n0\n```\n\n4. Output **only** this single digit (`1` or `0`) per pseudocode, **in the order the pseudocodes are provided**. No additional text, explanation, or formatting should be output.\n\n---\n\n**Summary:**\n\n- Outputs correspond one-to-one with inputs.\n- Output `1` if pseudocode is logically complete, unambiguous, and fully specified to guarantee passing all unit tests.\n- Output `0` otherwise.\n- No extra commentary, whitespace, or formatting in output.\n- Assume inputs are well-structured pseudocode representing a single algorithm/function.\n\n---\n\nYour evaluation should prioritize strict completeness and determinism, flagging any pseudocode that could cause unit test failures or runtime errors as non-reproducible (`0`), and only affirm reproducibility (`1`) when such problems are confidently absent.",
  "score": 0.6,
  "feedback": "We have a 2 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nHere is the score for this prompt on positive-labeled pseudocodes: 0.6733333333333333\nHere is the score for this prompt on negative-labeled pseudocodes: 0.5266666666666666\n\nAvg Score for all pseudocodes: 0.6"
}