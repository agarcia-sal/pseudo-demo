{
  "prompt": "Given a pseudocode input describing a complete function or class method intended to solve a well-defined programming problem, your task is to determine with absolute certainty whether the pseudocode is fully reproducible. *Fully reproducible* means that any *direct* implementation derived solely and unambiguously from the pseudocode will pass **all** valid unit tests associated with the problem, without exception.\n\nYou must output exactly one digit per pseudocode input:\n- Output **1** if and only if the pseudocode guarantees reproducibility by meeting **all** the conditions below.\n- Output **0** otherwise.\n\nTo decide, rigorously verify that:\n\n1. **Complete Problem Context:**  \n   The problem, input domains, output specifications, and any intermediate state or data structures are fully and explicitly defined or can be unambiguously inferred without external assumptions.\n\n2. **Explicit, Complete Interface:**  \n   The pseudocode includes a clear, self-contained function or method signature specifying the exact input parameters (names and types), return type, and function/class scope that enables direct code translation.\n\n3. **Exhaustive and Precise Logic Specification:**  \n   Control structures (loops, conditionals, recursion) and data manipulations are spelled out completely and explicitly, including all boundary conditions, initializations, increments/decrements, loop termination criteria, and recursive base/inductive cases without omission or guesswork.\n\n4. **Full Edge Case and Special Case Coverage:**  \n   Handling of every relevant edge case and special input scenario defined by the problem is explicit or implicitly guaranteed by the logic; no inputs cause undefined, ambiguous, or incomplete behavior.\n\n5. **Unambiguous Operations:**  \n   Each operation (e.g., arithmetic, data access, string manipulation) is described without ambiguity, shorthand, vague terms, or symbolic notation requiring interpretation or assumptions beyond the pseudocode.\n\n6. **Logical Consistency and Coherence:**  \n   There are no logical contradictions, missing steps, or unclear transitions. All necessary steps for correctness are included\u2014no implicit or externally required scaffolding, no reliance on unspecified defaults or side effects.\n\n7. **Structural and Syntactic Completeness:**  \n   The pseudocode is structurally sound and well-organized so that it can be directly translated into syntactically valid, executable code in a standard programming language without adding or guessing any part.\n\n8. **Respect for Problem Constraints and Domain Rules:**  \n   The pseudocode fully enforces any problem-specific constraints, conditions, and domain-specific rules critical to correctness.\n\n9. **Self-Containment:**  \n   Pseudocode is not a partial snippet or fragment; it does not rely on unstated helper functions, external libraries, or omitted steps\u2014it is self-sufficient for implementation.\n\n10. **Tolerant to Stylistic Variations:**  \n    Variations in naming, formatting, or minor stylistic differences that do not impact logical completeness or correctness are allowed and should not cause rejection.\n\n**Important:**  \nIf any uncertainty arises about whether the pseudocode covers all tests and cases entirely, or if any ambiguity, incompleteness, or vagueness exists that could cause some implementations derived from it to fail unit tests, output **0**. This includes missing definitions, unclear control flows, overlooked edge cases, or absent interface specifications.\n\nAfter thorough and exhaustive evaluation, output exactly one digit per input pseudocode \u2014 **only** the digit 1 or 0 \u2014 in the order pseudocodes are given. Provide no explanations, comments, or additional text.\n\n---\n*End of prompt.*",
  "response": "Given a pseudocode input describing a complete function or class method intended to solve a well-defined programming problem, your task is to determine with absolute certainty whether the pseudocode is fully reproducible. *Fully reproducible* means that any *direct* implementation derived solely and unambiguously from the pseudocode will pass **all** valid unit tests associated with the problem, without exception.\n\nYou must output exactly one digit per pseudocode input:\n- Output **1** if and only if the pseudocode guarantees reproducibility by meeting **all** the conditions below.\n- Output **0** otherwise.\n\nTo decide, rigorously verify that:\n\n1. **Complete Problem Context:**  \n   The problem, input domains, output specifications, and any intermediate state or data structures are fully and explicitly defined or can be unambiguously inferred without external assumptions.\n\n2. **Explicit, Complete Interface:**  \n   The pseudocode includes a clear, self-contained function or method signature specifying the exact input parameters (names and types), return type, and function/class scope that enables direct code translation.\n\n3. **Exhaustive and Precise Logic Specification:**  \n   Control structures (loops, conditionals, recursion) and data manipulations are spelled out completely and explicitly, including all boundary conditions, initializations, increments/decrements, loop termination criteria, and recursive base/inductive cases without omission or guesswork.\n\n4. **Full Edge Case and Special Case Coverage:**  \n   Handling of every relevant edge case and special input scenario defined by the problem is explicit or implicitly guaranteed by the logic; no inputs cause undefined, ambiguous, or incomplete behavior.\n\n5. **Unambiguous Operations:**  \n   Each operation (e.g., arithmetic, data access, string manipulation) is described without ambiguity, shorthand, vague terms, or symbolic notation requiring interpretation or assumptions beyond the pseudocode.\n\n6. **Logical Consistency and Coherence:**  \n   There are no logical contradictions, missing steps, or unclear transitions. All necessary steps for correctness are included\u2014no implicit or externally required scaffolding, no reliance on unspecified defaults or side effects.\n\n7. **Structural and Syntactic Completeness:**  \n   The pseudocode is structurally sound and well-organized so that it can be directly translated into syntactically valid, executable code in a standard programming language without adding or guessing any part.\n\n8. **Respect for Problem Constraints and Domain Rules:**  \n   The pseudocode fully enforces any problem-specific constraints, conditions, and domain-specific rules critical to correctness.\n\n9. **Self-Containment:**  \n   Pseudocode is not a partial snippet or fragment; it does not rely on unstated helper functions, external libraries, or omitted steps\u2014it is self-sufficient for implementation.\n\n10. **Tolerant to Stylistic Variations:**  \n    Variations in naming, formatting, or minor stylistic differences that do not impact logical completeness or correctness are allowed and should not cause rejection.\n\n**Important:**  \nIf any uncertainty arises about whether the pseudocode covers all tests and cases entirely, or if any ambiguity, incompleteness, or vagueness exists that could cause some implementations derived from it to fail unit tests, output **0**. This includes missing definitions, unclear control flows, overlooked edge cases, or absent interface specifications.\n\nAfter thorough and exhaustive evaluation, output exactly one digit per input pseudocode \u2014 **only** the digit 1 or 0 \u2014 in the order pseudocodes are given. Provide no explanations, comments, or additional text.\n\n---\n*End of prompt.*",
  "score": 0.64,
  "feedback": "We have a 4 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nWe have cosmetic, which are pseudocodes that are variations of the positive pseudocodes and also pass all test cases.\nWe have near-misses, which are pseudocodes that correspond to code that almost passes all test cases but do not. They pass at least 80% of test cases\nHere is the score for this prompt on positive-labeled pseudocodes: 0.8333333333333334\nHere is the score for this prompt on negative-labeled pseudocodes: 0.58\nHere is the score for this prompt on cosmetic-labeled pseudocodes: 0.8733333333333333\nHere is the score for this prompt on near_miss-labeled pseudocodes: 0.2733333333333333\n\nThe following are pseudocodes that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION removeDuplicates(nums)  \n        IF the LENGTH OF nums EQUALS zero THEN  \n            RETURN zero  \n        END IF  \n        \n        SET write_index TO zero  \n        \n        FOR i FROM zero TO the MINIMUM of two AND the LENGTH OF nums MINUS one  \n            SET element at position write_index of nums TO element at position i of nums  \n            INCREMENT write_index BY one  \n        END FOR  \n        \n        FOR i FROM two TO the LENGTH OF nums MINUS one  \n            IF element at position i of nums NOT EQUALS element at position write_index MINUS two of nums THEN  \n                SET element at position write_index of nums TO element at position i of nums  \n                INCREMENT write_index BY one  \n            END IF  \n        END FOR  \n        \n        RETURN write_index  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION canWin(currentState)  \n        SET memo TO an empty dictionary  \n        \n        FUNCTION can_win_helper(state)  \n            IF state EXISTS IN memo THEN  \n                RETURN the value associated with state in memo  \n            END IF  \n            \n            FOR index FROM zero TO the LENGTH OF state MINUS one MINUS one  \n                IF the element at position index of state EQUALS the plus character AND the element at position index PLUS one of state EQUALS the plus character THEN  \n                    SET new_state TO the substring from position zero TO position index MINUS one CONCATENATED WITH two minus characters CONCATENATED WITH the substring from position index PLUS two TO the END OF state  \n                    IF the result of calling can_win_helper WITH new_state IS EQUAL TO false THEN  \n                        SET the value associated with state in memo TO true  \n                        RETURN true  \n                    END IF  \n                END IF  \n            END FOR  \n            \n            SET the value associated with state in memo TO false  \n            RETURN false  \n        END FUNCTION  \n        \n        RETURN the result of calling can_win_helper WITH currentState  \n    END FUNCTION  \nEND CLASS\n\nThe following are cosmetic or modified pseudocodes of other reproducible versions of pseudocode that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET maxIntValue AS (2 ^ 31) - 1  \n        SET minIntValue AS 0 - (2 ^ 31)  \n        SET accumulatedNumber TO 0  \n        SET position TO 0  \n        SET lengthOfString TO LENGTH OF s  \n        SET polarity TO 1  \n\n        WHILE position < lengthOfString AND s[position] = ' '  \n            position \u2190 position + 1  \n        END WHILE  \n\n        IF position < lengthOfString THEN  \n            SWITCH s[position]  \n                CASE '-'  \n                    polarity \u2190 0 - 1  \n                    position \u2190 position + 1  \n                    BREAK  \n                CASE '+'  \n                    polarity \u2190 1  \n                    position \u2190 position + 1  \n                    BREAK  \n            END SWITCH  \n        END IF  \n\n        REPEAT UNTIL NOT (position < lengthOfString AND s[position] >= '0' AND s[position] <= '9')  \n            SET currentChar TO s[position]  \n            SET numericValue TO INTEGER VALUE OF currentChar  \n            SET boundaryCheck TO maxIntValue - (numericValue DIV 10)  \n\n            IF accumulatedNumber > boundaryCheck THEN  \n                IF polarity = 1 THEN  \n                    RETURN maxIntValue  \n                ELSE  \n                    RETURN minIntValue  \n                END IF  \n            END IF  \n\n            accumulatedNumber \u2190 (accumulatedNumber * 10) + numericValue  \n            position \u2190 position + 1  \n        END REPEAT  \n\n        RETURN polarity * accumulatedNumber  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION isRectangleCover(rectangles)  \n        LET minX BE positive infinity  \n        LET minY BE positive infinity  \n        LET maxX BE negative infinity  \n        LET maxY BE negative infinity  \n        \n        INITIALIZE corners AS empty set  \n        DEFINE totalArea AS 0  \n        \n        DEFINE idx AS 0  \n        WHILE idx LESS THAN LENGTH OF rectangles DO  \n            LET rect BE rectangles[idx]  \n            LET leftX BE rect[0]  \n            LET bottomY BE rect[1]  \n            LET rightX BE rect[2]  \n            LET topY BE rect[3]  \n            \n            IF NOT (leftX >= minX) THEN  \n                minX \u2190 leftX  \n            END IF  \n            IF NOT (bottomY >= minY) THEN  \n                minY \u2190 bottomY  \n            END IF  \n            IF NOT (rightX <= maxX) THEN  \n                maxX \u2190 rightX  \n            END IF  \n            IF NOT (topY <= maxY) THEN  \n                maxY \u2190 topY  \n            END IF  \n            \n            LET rectArea BE (rightX - leftX)  \n            LET height BE (topY - bottomY)  \n            LET thisArea BE rectArea * height  \n            totalArea \u2190 totalArea + thisArea  \n            \n            LET cornerPoints BE list of pairs: (leftX, bottomY), (leftX, topY), (rightX, bottomY), (rightX, topY)  \n            \n            LET ctr AS 0  \n            WHILE ctr LESS THAN LENGTH OF cornerPoints DO  \n                LET corner BE cornerPoints[ctr]  \n                IF corners CONTAINS corner THEN  \n                    REMOVE corner FROM corners  \n                ELSE  \n                    INSERT corner INTO corners  \n                END IF  \n                ctr \u2190 ctr + 1  \n            END WHILE  \n            idx \u2190 idx + 1  \n        END WHILE  \n        \n        LET fullWidth BE maxX - minX  \n        LET fullHeight BE maxY - minY  \n        LET expectedArea BE fullWidth * fullHeight  \n        \n        IF totalArea IS NOT expectedArea THEN  \n            RETURN False  \n        END IF  \n        \n        LET requiredCorners BE set of pairs: (minX, minY), (minX, maxY), (maxX, minY), (maxX, maxY)  \n        IF corners IS NOT EQUAL TO requiredCorners THEN  \n            RETURN False  \n        END IF  \n        \n        RETURN True  \n    END FUNCTION  \nEND CLASS\n\nThe following are pseudocodes that are not reproducible but were labeled as reproducible:\n```\nSET INT_MAX = 2^31 - 1, INT_MIN = -2^31\nINIT res = 0, i = 0, n = len(s), sign = 1\nWHILE i < n AND s[i] = ' ' : i += 1\nIF i < n AND s[i] IN ['+', '-'] : sign = -1 IF s[i] = '-' ELSE 1; i += 1\nWHILE i < n AND s[i].isdigit():\n    d = int(s[i])\n    IF res > (INT_MAX - d)//10: RETURN INT_MAX IF sign = 1 ELSE INT_MIN\n    res = res*10 + d\n    i += 1\nRETURN sign * res\n```\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpivghamlv/solution_0.py\", line 56, in <module>\\n    print(Solution().myAtoi(s = \"42\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpivghamlv/solution_1.py\", line 56, in <module>\\n    print(Solution().myAtoi(s = \" -042\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpivghamlv/solution_2.py\", line 56, in <module>\\n    print(Solution().myAtoi(s = \"1337c0d3\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpivghamlv/solution_3.py\", line 56, in <module>\\n    print(Solution().myAtoi(s = \"0-1\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpivghamlv/solution_4.py\", line 56, in <module>\\n    print(Solution().myAtoi(s = \"words and 987\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n']\nCLASS Solution\n    FUNCTION isMatch(string_s, string_p)\n        SET dp TO a two dimensional list of BOOLEAN false VALUES with the number of rows EQUAL TO the LENGTH OF string_s PLUS one AND the number of columns EQUAL TO the LENGTH OF string_p PLUS one\n\n        SET the element at row zero AND column zero OF dp TO true\n\n        FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n            IF the element at position index_j MINUS one OF string_p EQUALS character star\n                SET the element at row zero AND column index_j OF dp TO the element at row zero AND column index_j MINUS one OF dp\n            END IF\n        END FOR\n        \n        FOR index_i FROM one TO the LENGTH OF string_s INCLUSIVE\n            FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n                IF the element at position index_j MINUS one OF string_p EQUALS character star\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j OF dp OR the element at row index_i AND column index_j MINUS one OF dp\n                ELSE IF the element at position index_j MINUS one OF string_p EQUALS character question MARK OR the element at position index_i MINUS one OF string_s EQUALS the element at position index_j MINUS one OF string_p\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j MINUS one OF dp\n                END IF\n            END FOR\n        END FOR\n\n        RETURN the element at row the LENGTH OF string_s AND column the LENGTH OF string_p OF dp\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_0.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"ho\", p = \"ho***\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_1.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcdef\", p = \"abc*ef\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_2.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcabczzzde\", p = \"*abc???de*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_3.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abbabbbbbbabaababbabbbabaaabbaaaaabbbabbbabaaabbabbaaabbbabaabbbabbabbabbbbba\", p = \"*a*****b*bb*b****b*bb*bb*a*aa*b*b*a*a*b*aba*b*ba*a*aab*bbb*a*aaab*ba*a*bb*bb*bb*ba*ba*b*ab*b*b\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_4.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"aabbccddeeff\", p = \"a*b*c*d*e*f*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n']\n\nThe following are near-miss pseudocodes - they are almost reproducible but were labeled as reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two POWERED BY thirty ONE MINUS one  \n        SET INT_MIN TO negative two POWERED BY thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND character at position index OF s EQUALS a single whitespace character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (character at position index OF s EQUALS the plus sign OR character at position index OF s EQUALS the minus sign)  \n            IF character at position index OF s EQUALS the minus sign  \n                SET sign TO negative one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND character at position index OF s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF character at position index OF s  \n            IF result GREATER THAN (INT_MAX MINUS digit) DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.96875, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_0.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"42\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_1.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \" -042\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_2.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"1337c0d3\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_3.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"0-1\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_4.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"words and 987\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n']\nCLASS Solution\n    FUNCTION multiply(num1 string, num2 string) RETURNS string\n        IF num1 IS \"0\" OR num2 IS \"0\"\n            RETURN \"0\"\n        END IF\n\n        DECLARE digits AS MAP from INT to INT\n        DECLARE lengthSum AS INT = LENGTH(num1) + LENGTH(num2)\n        FOR index IN RANGE(lengthSum)\n            digits[index] = 0\n        END FOR\n\n        DECLARE reversed1 AS string = \"\"\n        DECLARE reversed2 AS string = \"\"\n        FOR p FROM LENGTH(num1) - 1 DOWNTO 0\n            reversed1 = reversed1 + num1[p]\n        END FOR\n        FOR q FROM LENGTH(num2) - 1 DOWNTO 0\n            reversed2 = reversed2 + num2[q]\n        END FOR\n\n        DECLARE function recursiveMul(i INT, j INT) RETURNS VOID\n            IF i = LENGTH(reversed1)\n                RETURN\n            END IF\n            IF j = LENGTH(reversed2)\n                recursiveMul(i + 1, 0)\n                RETURN\n            END IF\n\n            DECLARE valA AS INT = ASCII_CODE(reversed1[i]) - ASCII_CODE(\"0\")\n            DECLARE valB AS INT = ASCII_CODE(reversed2[j]) - ASCII_CODE(\"0\")\n            DECLARE product AS INT = valA * valB\n            DECLARE baseIndex AS INT = i + j\n            DECLARE nextIndex AS INT = baseIndex + 1\n            DECLARE totalSum AS INT = product + digits[baseIndex]\n\n            digits[baseIndex] = totalSum MOD 10\n            digits[nextIndex] = digits[nextIndex] + (totalSum DIV 10)\n\n            recursiveMul(i, j + 1)\n        END FUNCTION\n\n        CALL recursiveMul(0, 0)\n\n        DECLARE output AS string = \"\"\n        FOR key FROM lengthSum - 1 DOWNTO 0\n            output = output + TO_STRING(digits[key])\n        END FOR\n\n        WHILE LENGTH(output) > 1 AND output[0] = \"0\"\n            output = SUBSTRING(output, 1)\n        END WHILE\n\n        RETURN output\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9666666666666667, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_0.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"2\", num2 = \"3\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_1.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"123\", num2 = \"456\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_2.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"1\", num2 = \"12345678901234567890\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_3.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"12345678901234567890\", num2 = \"9876543210\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_4.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"0\", num2 = \"987654321\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n']\nCLASS Solution\n    FUNCTION isMatch(s, p)\n        SET x TO LENGTH(s)\n        SET y TO LENGTH(p)\n        SET dp TO []\n        SET u TO 0\n        WHILE u <= x\n            SET tempList TO []\n            SET v TO 0\n            WHILE v <= y\n                APPEND False TO tempList\n                SET v TO v + 1\n            END WHILE\n            APPEND tempList TO dp\n            SET u TO u + 1\n        END WHILE\n\n        SET dp[0][0] TO True\n\n        PROCEDURE fillFirstRow(w)\n            IF w > y THEN\n                RETURN\n            END IF\n            IF p[w - 1] = '*'\n                SET dp[0][w] TO dp[0][w - 1]\n            END IF\n            fillFirstRow(w + 1)\n        END PROCEDURE\n\n        CALL fillFirstRow(1)\n\n        PROCEDURE processRow(i, j)\n            IF i > x THEN\n                RETURN\n            END IF\n            IF j > y THEN\n                CALL processRow(i + 1, 1)\n                RETURN\n            END IF\n\n            SWITCH TRUE\n                CASE (p[j - 1] = '*')\n                    SET dp[i][j] TO dp[i - 1][j] OR dp[i][j - 1]\n                BREAK\n\n                CASE (p[j - 1] = '?' OR s[i - 1] = p[j - 1])\n                    SET dp[i][j] TO dp[i - 1][j - 1]\n                BREAK\n\n                DEFAULT\n                    // dp[i][j] remains False implicitly\n                BREAK\n            END SWITCH\n\n            processRow(i, j + 1)\n        END PROCEDURE\n\n        CALL processRow(1, 1)\n\n        RETURN dp[x][y]\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.96, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_0.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"ho\", p = \"ho***\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_1.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abcdef\", p = \"abc*ef\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_2.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abcabczzzde\", p = \"*abc???de*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_3.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abbabbbbbbabaababbabbbabaaabbaaaaabbbabbbabaaabbabbaaabbbabaabbbabbabbabbbbba\", p = \"*a*****b*bb*b****b*bb*bb*a*aa*b*b*a*a*b*aba*b*ba*a*aab*bbb*a*aaab*ba*a*bb*bb*bb*ba*ba*b*ab*b*b\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_4.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"aabbccddeeff\", p = \"a*b*c*d*e*f*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n']\nCLASS Solution\n    FUNCTION removeDuplicates(nums)\n        DECLARE counter \u2190 0\n        IF counter EQUALS LENGTH(nums) THEN\n            RETURN counter\n        ELSE\n            DECLARE definer \u2190 0\n            DECLARE temp_list \u2190 new Queue()\n            \n            WHILE definer < MIN(2, LENGTH(nums))\n                ENQUEUE(nums[definer], temp_list)\n                definer \u2190 definer + 1\n            END WHILE\n            \n            WHILE NOT IS_EMPTY(temp_list)\n                nums[counter] \u2190 DEQUEUE(temp_list)\n                counter \u2190 counter + 1\n            END WHILE\n            \n            FUNCTION recurse(pos)\n                IF pos EQUALS LENGTH(nums) THEN\n                    RETURN\n                END IF\n                IF nums[pos] \u2260 nums[counter - 2] THEN\n                    nums[counter] \u2190 nums[pos]\n                    counter \u2190 counter + 1\n                END IF\n                recurse(pos + 1)\n            END FUNCTION\n            \n            recurse(2)\n            \n            RETURN counter\n        END IF\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9743589743589743, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpe5kmgicq/solution_0.py\", line 53, in <module>\\n    print(Solution().removeDuplicates(nums = [1,1,2,2,2,3,3,3,3]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'removeDuplicates\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpe5kmgicq/solution_1.py\", line 53, in <module>\\n    print(Solution().removeDuplicates(nums = [-1,-1,-1,0,0,1,1,2,2,3]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'removeDuplicates\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpe5kmgicq/solution_2.py\", line 53, in <module>\\n    print(Solution().removeDuplicates(nums = [1,2,2,3,3,3,4]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'removeDuplicates\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpe5kmgicq/solution_3.py\", line 53, in <module>\\n    print(Solution().removeDuplicates(nums = [1,1,2,2,2,3,3,3,3,3,4,5,5,5,5]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'removeDuplicates\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpe5kmgicq/solution_4.py\", line 53, in <module>\\n    print(Solution().removeDuplicates(nums = [1,2,2,3,3,3,4,5]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'removeDuplicates\\'\\n']\n\nAvg Score for all pseudocodes: 0.64"
}