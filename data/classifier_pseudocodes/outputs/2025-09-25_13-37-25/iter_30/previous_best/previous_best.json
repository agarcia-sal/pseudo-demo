{
  "prompt": "Given a pseudocode description of a complete function or class method intended to solve a well-defined programming problem, your task is to determine with absolute certainty whether this pseudocode is fully reproducible\u2014meaning that *any* direct, faithful implementation derived solely and unambiguously from it will pass **all** valid unit tests relevant to the problem, without fail.\n\nYou must respond strictly with a single digit \u2014 **1** if and only if the pseudocode meets **all** of the criteria below, or **0** otherwise. Provide no explanations, comments, or additional text. The outputs must be in the same order as the pseudocodes are given.\n\nTo confidently decide, verify all of the following conditions rigorously:\n\n1. **Complete and Explicit Problem Definition:**  \n   The pseudocode clearly specifies or unambiguously implies the problem\u2019s input domain(s), output expectations (type and format), and all required invariants or constraints without relying on external context or assumptions.\n\n2. **Fully Specified Interface and Signature:**  \n   The function or method signature is explicit and self-contained, fully stating input parameter names and types, return type, and encapsulation context (class or module scope). The interface matches the problem requirements exactly.\n\n3. **Deterministic and Exhaustive Logic Specification:**  \n   All algorithmic steps, including control flow constructs (loops, recursion, conditionals), data initializations, updates, and termination conditions, are described completely and unambiguously. Boundary conditions, loop invariants, and recursive base/inductive cases are explicitly handled without gaps.\n\n4. **Explicit Edge Case and Exceptional Handling:**  \n   All relevant edge cases, special input scenarios, and error conditions are addressed explicitly or logically guaranteed by the described algorithm. No inputs can cause undefined, partial, or ambiguous behavior.\n\n5. **Unambiguous Instructions and Operations:**  \n   Each operation (arithmetic, indexing, string manipulation, data structure modification) is specified with precise semantics. Avoid shorthand notations, ambiguous variable references, or symbolic shorthand that require interpretation beyond plain reading.\n\n6. **Logical Coherence and Internal Consistency:**  \n   There are no conflicting statements, missing steps, or logical omissions. The flow of data and control must be consistent and sequentially coherent; necessary intermediate computations or data structure states must be accounted for.\n\n7. **Structural Completeness and Implementability:**  \n   The pseudocode is sufficiently structured and complete so that it can be translated directly into syntactically correct, executable source code in a conventional programming language without any guessing, assumptions, or added scaffolding.\n\n8. **Explicit Enforcement of Constraints and Domain Rules:**  \n   Any problem-specific rules, limitations, or invariants critical for correctness (e.g., input bounds, resource limits, ordering constraints) are expressly enforced or guaranteed by the logic.\n\n9. **Self-Containment \u2014 No External Dependencies:**  \n   The pseudocode must be a self-sufficient specification: it cannot depend on unstated helper routines, unavailable libraries, external resources, or omitted steps. Every part crucial to correctness must be included or fully described.\n\n10. **Tolerance to Notational and Stylistic Variations:**  \n    Variations in variable/function naming, formatting, or permissible language-agnostic style differences that do *not* affect logical completeness or correctness are acceptable and must not cause rejection.\n\n11. **Presence and Correct Use of Function or Class Context:**  \n    The pseudocode includes all necessary declarations to ensure correct binding, accessibility, and namespace resolution (e.g., class definitions, method visibility) so the code can be instantiated and invoked as intended by automated tests.\n\n12. **No Ambiguity Regarding Mutability and Side Effects:**  \n    Any modification of input data structures or use of mutable state must be clearly defined and consistent with problem specifications; side effects must be well-detailed to guarantee faithful reproduction in real code.\n\n**Critical:** If you identify *any* uncertainty, incompleteness, ambiguity, logical gap, missing interface detail, or partial coverage that could lead to some faithful implementations derived from the pseudocode failing one or more unit tests, output **0**. Do *not* guess or assume missing information. The default conservative answer is zero unless fully confident.\n\n---\n\nOutput exactly one digit (1 or 0) for each pseudocode input, in the order provided, and nothing else.",
  "response": "Given a pseudocode description of a complete function or class method intended to solve a well-defined programming problem, your task is to determine with absolute certainty whether this pseudocode is fully reproducible\u2014meaning that *any* direct, faithful implementation derived solely and unambiguously from it will pass **all** valid unit tests relevant to the problem, without fail.\n\nYou must respond strictly with a single digit \u2014 **1** if and only if the pseudocode meets **all** of the criteria below, or **0** otherwise. Provide no explanations, comments, or additional text. The outputs must be in the same order as the pseudocodes are given.\n\nTo confidently decide, verify all of the following conditions rigorously:\n\n1. **Complete and Explicit Problem Definition:**  \n   The pseudocode clearly specifies or unambiguously implies the problem\u2019s input domain(s), output expectations (type and format), and all required invariants or constraints without relying on external context or assumptions.\n\n2. **Fully Specified Interface and Signature:**  \n   The function or method signature is explicit and self-contained, fully stating input parameter names and types, return type, and encapsulation context (class or module scope). The interface matches the problem requirements exactly.\n\n3. **Deterministic and Exhaustive Logic Specification:**  \n   All algorithmic steps, including control flow constructs (loops, recursion, conditionals), data initializations, updates, and termination conditions, are described completely and unambiguously. Boundary conditions, loop invariants, and recursive base/inductive cases are explicitly handled without gaps.\n\n4. **Explicit Edge Case and Exceptional Handling:**  \n   All relevant edge cases, special input scenarios, and error conditions are addressed explicitly or logically guaranteed by the described algorithm. No inputs can cause undefined, partial, or ambiguous behavior.\n\n5. **Unambiguous Instructions and Operations:**  \n   Each operation (arithmetic, indexing, string manipulation, data structure modification) is specified with precise semantics. Avoid shorthand notations, ambiguous variable references, or symbolic shorthand that require interpretation beyond plain reading.\n\n6. **Logical Coherence and Internal Consistency:**  \n   There are no conflicting statements, missing steps, or logical omissions. The flow of data and control must be consistent and sequentially coherent; necessary intermediate computations or data structure states must be accounted for.\n\n7. **Structural Completeness and Implementability:**  \n   The pseudocode is sufficiently structured and complete so that it can be translated directly into syntactically correct, executable source code in a conventional programming language without any guessing, assumptions, or added scaffolding.\n\n8. **Explicit Enforcement of Constraints and Domain Rules:**  \n   Any problem-specific rules, limitations, or invariants critical for correctness (e.g., input bounds, resource limits, ordering constraints) are expressly enforced or guaranteed by the logic.\n\n9. **Self-Containment \u2014 No External Dependencies:**  \n   The pseudocode must be a self-sufficient specification: it cannot depend on unstated helper routines, unavailable libraries, external resources, or omitted steps. Every part crucial to correctness must be included or fully described.\n\n10. **Tolerance to Notational and Stylistic Variations:**  \n    Variations in variable/function naming, formatting, or permissible language-agnostic style differences that do *not* affect logical completeness or correctness are acceptable and must not cause rejection.\n\n11. **Presence and Correct Use of Function or Class Context:**  \n    The pseudocode includes all necessary declarations to ensure correct binding, accessibility, and namespace resolution (e.g., class definitions, method visibility) so the code can be instantiated and invoked as intended by automated tests.\n\n12. **No Ambiguity Regarding Mutability and Side Effects:**  \n    Any modification of input data structures or use of mutable state must be clearly defined and consistent with problem specifications; side effects must be well-detailed to guarantee faithful reproduction in real code.\n\n**Critical:** If you identify *any* uncertainty, incompleteness, ambiguity, logical gap, missing interface detail, or partial coverage that could lead to some faithful implementations derived from the pseudocode failing one or more unit tests, output **0**. Do *not* guess or assume missing information. The default conservative answer is zero unless fully confident.\n\n---\n\nOutput exactly one digit (1 or 0) for each pseudocode input, in the order provided, and nothing else.",
  "score": 0.64,
  "feedback": "We have a 4 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nWe have cosmetic, which are pseudocodes that are variations of the positive pseudocodes and also pass all test cases.\nWe have near-misses, which are pseudocodes that correspond to code that almost passes all test cases but do not. They pass at least 80% of test cases\nHere is the score for this prompt on positive-labeled pseudocodes: 0.6333333333333333\nHere is the score for this prompt on negative-labeled pseudocodes: 0.76\nHere is the score for this prompt on cosmetic-labeled pseudocodes: 0.6866666666666666\nHere is the score for this prompt on near_miss-labeled pseudocodes: 0.48\n\nThe following are pseudocodes that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION longestPalindrome(s)  \n        SET n TO the LENGTH OF s  \n        SET f TO a TWO DIMENSIONAL LIST of BOOLEAN TRUES with n ROWS and n COLUMNS  \n        SET k TO zero  \n        SET mx TO one  \n        FOR i FROM n MINUS two DOWN TO zero  \n            FOR j FROM i PLUS one TO n MINUS one  \n                SET element at position i and position j of f TO FALSE  \n                IF element at position i of s EQUALS element at position j of s  \n                    SET element at position i and position j of f TO element at position i PLUS one and position j MINUS one of f  \n                    IF element at position i and position j of f EQUALS TRUE AND mx LESS THAN j MINUS i PLUS one  \n                        SET k TO i  \n                        SET mx TO j MINUS i PLUS one  \n                    END IF  \n                END IF  \n            END FOR  \n        END FOR  \n        RETURN substring from position k TO position k PLUS mx MINUS one of s  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION multiply(num1 string num2 string) RETURNS string  \n        IF num1 EQUALS string zero OR num2 EQUALS string zero  \n            RETURN string zero  \n        END IF  \n\n        SET result TO a list of zeros with the LENGTH OF num1 PLUS the LENGTH OF num2  \n\n        SET num1 TO the reversal of num1  \n        SET num2 TO the reversal of num2  \n\n        FOR i FROM zero TO the LENGTH OF num1 MINUS one  \n            FOR j FROM zero TO the LENGTH OF num2 MINUS one  \n                SET mul TO the character code of the element at position i of num1 MINUS the character code of string zero MULTIPLIED BY the character code of the element at position j of num2 MINUS the character code of string zero  \n                SET p1 TO i PLUS j  \n                SET p2 TO i PLUS j PLUS one  \n                SET sum TO mul PLUS the element at position p1 of result  \n\n                SET the element at position p1 of result TO sum MODULO ten  \n                INCREMENT the element at position p2 of result BY the integer division of sum BY ten  \n            END FOR  \n        END FOR  \n\n        SET result_str TO the concatenation of the string representations of the elements of result in reverse order  \n        RETURN result_str with all leading string zeros removed  \n    END FUNCTION  \nEND CLASS\n\nThe following are cosmetic or modified pseudocodes of other reproducible versions of pseudocode that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET maxIntValue AS (2 ^ 31) - 1  \n        SET minIntValue AS 0 - (2 ^ 31)  \n        SET accumulatedNumber TO 0  \n        SET position TO 0  \n        SET lengthOfString TO LENGTH OF s  \n        SET polarity TO 1  \n\n        WHILE position < lengthOfString AND s[position] = ' '  \n            position \u2190 position + 1  \n        END WHILE  \n\n        IF position < lengthOfString THEN  \n            SWITCH s[position]  \n                CASE '-'  \n                    polarity \u2190 0 - 1  \n                    position \u2190 position + 1  \n                    BREAK  \n                CASE '+'  \n                    polarity \u2190 1  \n                    position \u2190 position + 1  \n                    BREAK  \n            END SWITCH  \n        END IF  \n\n        REPEAT UNTIL NOT (position < lengthOfString AND s[position] >= '0' AND s[position] <= '9')  \n            SET currentChar TO s[position]  \n            SET numericValue TO INTEGER VALUE OF currentChar  \n            SET boundaryCheck TO maxIntValue - (numericValue DIV 10)  \n\n            IF accumulatedNumber > boundaryCheck THEN  \n                IF polarity = 1 THEN  \n                    RETURN maxIntValue  \n                ELSE  \n                    RETURN minIntValue  \n                END IF  \n            END IF  \n\n            accumulatedNumber \u2190 (accumulatedNumber * 10) + numericValue  \n            position \u2190 position + 1  \n        END REPEAT  \n\n        RETURN polarity * accumulatedNumber  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION removeDuplicates(nums)  \n        IF NOT (LENGTH OF nums > 0) THEN  \n            RETURN 0  \n        END IF  \n        \n        SET ptr AS 0  \n        \n        SET idx AS 0  \n        WHILE idx <= (2 MINUS 1) AND idx <= (LENGTH OF nums MINUS 1)  \n            ASSIGN nums[ptr] AS nums[idx]  \n            SET ptr AS ptr + 1  \n            SET idx AS idx + 1  \n        END WHILE  \n        \n        SET cursor AS 2  \n        WHILE cursor <= (LENGTH OF nums MINUS 1)  \n            IF nums[cursor] = nums[(ptr MINUS 2)] THEN  \n                # do nothing, skip increment  \n            ELSE  \n                ASSIGN nums[ptr] AS nums[cursor]  \n                SET ptr AS ptr PLUS 1  \n            END IF  \n            SET cursor AS cursor + 1  \n        END WHILE  \n        \n        RETURN ptr  \n    END FUNCTION  \nEND CLASS\n\nThe following are pseudocodes that are not reproducible but were labeled as reproducible:\nCLASS Solution\n    FUNCTION canJump(list_of_numbers)\n        SET farthest_reachable_index TO zero\n        FOR index FROM zero TO the LENGTH OF list_of_numbers MINUS one INCLUSIVE\n            IF index GREATER THAN farthest_reachable_index\n                RETURN False\n            END IF\n            SET possible_reach TO index PLUS element at position index OF list_of_numbers\n            SET farthest_reachable_index TO the GREATER OF farthest_reachable_index AND possible_reach\n        END FOR\n        RETURN farthest_reachable_index GREATER THAN OR EQUAL TO the LENGTH OF list_of_numbers MINUS one\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_0.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,1,1,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_1.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [3,2,1,0,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_2.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_3.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [1,2,3,4,5,6,7,8,9,10]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_4.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n']\nCLASS Solution\n    FUNCTION majorityElement(list_of_numbers)\n        SET n1 TO zero\n        SET n2 TO zero\n        SET m1 TO zero\n        SET m2 TO one\n        FOR each m IN list_of_numbers\n            IF m EQUALS m1\n                INCREMENT n1 BY one\n            ELSE IF m EQUALS m2\n                INCREMENT n2 BY one\n            ELSE IF n1 EQUALS zero\n                SET m1 TO m\n                SET n1 TO one\n            ELSE IF n2 EQUALS zero\n                SET m2 TO m\n                SET n2 TO one\n            ELSE\n                DECREMENT n1 BY one\n                DECREMENT n2 BY one\n            END IF\n        END FOR\n        RETURN list_of_elements m FROM list_containing m1 AND m2 WHERE the COUNT OF m IN list_of_numbers GREATER THAN the LENGTH OF list_of_numbers DIVIDED BY three\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpqeacy0d6/solution_0.py\", line 37, in <module>\\n    print(Solution().majorityElement(nums = [2,2,1,3]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'majorityElement\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpqeacy0d6/solution_1.py\", line 37, in <module>\\n    print(Solution().majorityElement(nums = [10,10,10,20,20,20,30,30,30,30,30]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'majorityElement\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpqeacy0d6/solution_2.py\", line 37, in <module>\\n    print(Solution().majorityElement(nums = [1,2,3,1,2,3,1,2,3,4]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'majorityElement\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpqeacy0d6/solution_3.py\", line 37, in <module>\\n    print(Solution().majorityElement(nums = [5,5,5,1,1,1,2,2,2,3,3,3]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'majorityElement\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpqeacy0d6/solution_4.py\", line 37, in <module>\\n    print(Solution().majorityElement(nums = [3,2,3]))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'majorityElement\\'\\n']\n\nThe following are near-miss pseudocodes - they are almost reproducible but were labeled as reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two POWERED BY thirty ONE MINUS one  \n        SET INT_MIN TO negative two POWERED BY thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND character at position index OF s EQUALS a single whitespace character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (character at position index OF s EQUALS the plus sign OR character at position index OF s EQUALS the minus sign)  \n            IF character at position index OF s EQUALS the minus sign  \n                SET sign TO negative one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND character at position index OF s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF character at position index OF s  \n            IF result GREATER THAN (INT_MAX MINUS digit) DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.96875, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_0.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"42\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_1.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \" -042\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_2.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"1337c0d3\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_3.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"0-1\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_4.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"words and 987\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n']\nCLASS Solution\n    FUNCTION multiply(num1 string, num2 string) RETURNS string\n        IF num1 IS \"0\" OR num2 IS \"0\"\n            RETURN \"0\"\n        END IF\n\n        DECLARE digits AS MAP from INT to INT\n        DECLARE lengthSum AS INT = LENGTH(num1) + LENGTH(num2)\n        FOR index IN RANGE(lengthSum)\n            digits[index] = 0\n        END FOR\n\n        DECLARE reversed1 AS string = \"\"\n        DECLARE reversed2 AS string = \"\"\n        FOR p FROM LENGTH(num1) - 1 DOWNTO 0\n            reversed1 = reversed1 + num1[p]\n        END FOR\n        FOR q FROM LENGTH(num2) - 1 DOWNTO 0\n            reversed2 = reversed2 + num2[q]\n        END FOR\n\n        DECLARE function recursiveMul(i INT, j INT) RETURNS VOID\n            IF i = LENGTH(reversed1)\n                RETURN\n            END IF\n            IF j = LENGTH(reversed2)\n                recursiveMul(i + 1, 0)\n                RETURN\n            END IF\n\n            DECLARE valA AS INT = ASCII_CODE(reversed1[i]) - ASCII_CODE(\"0\")\n            DECLARE valB AS INT = ASCII_CODE(reversed2[j]) - ASCII_CODE(\"0\")\n            DECLARE product AS INT = valA * valB\n            DECLARE baseIndex AS INT = i + j\n            DECLARE nextIndex AS INT = baseIndex + 1\n            DECLARE totalSum AS INT = product + digits[baseIndex]\n\n            digits[baseIndex] = totalSum MOD 10\n            digits[nextIndex] = digits[nextIndex] + (totalSum DIV 10)\n\n            recursiveMul(i, j + 1)\n        END FUNCTION\n\n        CALL recursiveMul(0, 0)\n\n        DECLARE output AS string = \"\"\n        FOR key FROM lengthSum - 1 DOWNTO 0\n            output = output + TO_STRING(digits[key])\n        END FOR\n\n        WHILE LENGTH(output) > 1 AND output[0] = \"0\"\n            output = SUBSTRING(output, 1)\n        END WHILE\n\n        RETURN output\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9666666666666667, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_0.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"2\", num2 = \"3\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_1.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"123\", num2 = \"456\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_2.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"1\", num2 = \"12345678901234567890\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_3.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"12345678901234567890\", num2 = \"9876543210\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_4.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"0\", num2 = \"987654321\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n']\nCLASS Solution  \n    FUNCTION grayCode(n)  \n        IF n IS 0 THEN  \n            RETURN [0]  \n        END IF  \n        \n        ASSIGN resultList TO grayCode(n - 1)  \n        LET bitFlag BE 2 ^ (n - 1) * 1  \n        \n        DEFINE FUNCTION reverseList(inputList)  \n            IF inputList IS EMPTY THEN  \n                RETURN []  \n            ELSE  \n                RETURN reverseList(inputList[1:]) + [inputList[0]]  \n            END IF  \n        END FUNCTION  \n        \n        LET reversedResult BE reverseList(resultList)  \n        LET extendedList BE []  \n        \n        FOR each element IN reversedResult DO  \n            extendedList = extendedList + [(element BITWISE_OR bitFlag)]  \n        END FOR  \n        \n        RETURN resultList + extendedList  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.8333333333333334, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_0.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 2))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_1.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 1))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_2.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 12))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_3.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 6))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_4.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 11))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n']\nCLASS Solution\n    FUNCTION minCut(s)\n        LET length_s BE LENGTH OF s\n        IF length_s <= 1 THEN\n            RETURN 0\n        END IF\n\n        LET palindrome_matrix BE LIST OF LISTS OF FALSE WITH size length_s by length_s\n        FUNCTION mark_palindrome(sub_len, start_idx)\n            IF sub_len > length_s THEN\n                RETURN\n            END IF\n\n            IF sub_len == 1 THEN\n                SET palindrome_matrix[start_idx][start_idx] TO TRUE\n                CALL mark_palindrome(sub_len + 1, 0)\n                RETURN\n            END IF\n\n            IF start_idx > length_s - sub_len THEN\n                CALL mark_palindrome(sub_len + 1, 0)\n                RETURN\n            END IF\n\n            LET finish_idx BE start_idx + sub_len - 1\n            IF sub_len == 2 THEN\n                SET palindrome_matrix[start_idx][finish_idx] TO (s[start_idx] == s[finish_idx])\n            ELSE\n                SET palindrome_matrix[start_idx][finish_idx] TO (s[start_idx] == s[finish_idx]) AND palindrome_matrix[start_idx + 1][finish_idx - 1]\n            END IF\n\n            CALL mark_palindrome(sub_len, start_idx + 1)\n        END FUNCTION\n\n        CALL mark_palindrome(1, 0)\n\n        LET minimal_cuts BE LIST OF 0 OF LENGTH length_s\n\n        FUNCTION determine_cuts(pos)\n            IF pos == length_s THEN\n                RETURN\n            END IF\n\n            IF palindrome_matrix[0][pos] THEN\n                SET minimal_cuts[pos] TO 0\n            ELSE\n                SET minimal_cuts[pos] TO INFINITY\n                FUNCTION min_cut_inner(k)\n                    IF k > pos THEN\n                        RETURN\n                    END IF\n\n                    IF palindrome_matrix[k][pos] AND minimal_cuts[k - 1] + 1 < minimal_cuts[pos] THEN\n                        SET minimal_cuts[pos] TO minimal_cuts[k - 1] + 1\n                    END IF\n                    CALL min_cut_inner(k + 1)\n                END FUNCTION\n                CALL min_cut_inner(1)\n            END IF\n            CALL determine_cuts(pos + 1)\n        END FUNCTION\n\n        CALL determine_cuts(0)\n\n        RETURN minimal_cuts[length_s - 1]\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9787234042553191, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_0.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"aab\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_1.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"a\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_2.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"ab\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_3.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"abacdfgdcaba\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9ji38qdd/solution_4.py\", line 62, in <module>\\n    print(Solution().minCut(s = \"noon\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'minCut\\'\\n']\n\nAvg Score for all pseudocodes: 0.64"
}