{
  "prompt": "Given a pseudocode snippet representing an algorithm or solution, determine **definitively and without exceptions** whether it is fully **reproducible**\u2014meaning it can be **faithfully translated into a working implementation that passes all valid unit tests for its described behavior**. Your determination must be based solely on the following criteria, applied exhaustively and precisely:\n\n1. **Complete Structural Definition**:  \n   - All functions, methods, or classes must be declared with clear names and parameters matching usage in the code.  \n   - Variable identifiers must be explicitly introduced or unambiguously inferable within correct scopes.  \n   - The pseudocode must include the exact entry point expected (e.g., a class with the named function corresponding to the main interface).  \n\n2. **Explicit and Correct Logic Specification**:  \n   - All necessary computational steps must be unambiguously stated, including initialization, updates, branching conditions, loops, recursions, and return statements.  \n   - The pseudocode must handle all relevant cases: common, edge, and error conditions, without gaps or implicit assumptions.  \n   - Control flow must be sound: no undefined, unreachable, or contradictory paths; loops and recursion must have clear termination conditions.  \n\n3. **Data Handling Consistency and Completeness**:  \n   - All data structures must be sufficiently defined with sizes, types, and indexing conventions clearly indicated or unequivocally inferred.  \n   - Accessing elements (arrays, lists, strings) must have valid indices consistent with zero- or one-based schemes explicitly or clearly implied.  \n   - Manipulation of data must avoid undefined states: no reliance on unset variables, implicit global states, or ambiguous modifications.  \n\n4. **Conformance to Conventional Programming Constructs for Implementation**:  \n   - The pseudocode must employ standard control and data constructs convertible straightforwardly into executable code without guesswork.  \n   - All operators, method calls, and expressions must be clearly defined or standard, with no ambiguous or invented notation.  \n\n5. **Interface Correctness and Completeness**:  \n   - The pseudocode must present the primary function/method expected by tests with exact naming and parameters matching those required, ensuring it is invocable as intended.  \n   - If auxiliary helper functions exist, they must be fully defined and accessible within the structure.  \n\nApply the above rigorously and **only then** output:  \n- `1` if the pseudocode can be unambiguously and faithfully implemented so that the resulting program passes **all** valid unit tests for the described functionality.  \n- `0` if not\u2014due to missing pieces, ambiguity, naming mismatches, incomplete logic, undefined behavior, incorrect control flow, interface errors, or any factor preventing guaranteed full correctness under all test conditions.  \n\n**Output exactly one digit (1 or 0), nothing else, no whitespace, no explanation.**\n\n```\n<PSEUDOCODE HERE>\n```",
  "response": "Given a pseudocode snippet representing an algorithm or solution, determine **definitively and without exceptions** whether it is fully **reproducible**\u2014meaning it can be **faithfully translated into a working implementation that passes all valid unit tests for its described behavior**. Your determination must be based solely on the following criteria, applied exhaustively and precisely:\n\n1. **Complete Structural Definition**:  \n   - All functions, methods, or classes must be declared with clear names and parameters matching usage in the code.  \n   - Variable identifiers must be explicitly introduced or unambiguously inferable within correct scopes.  \n   - The pseudocode must include the exact entry point expected (e.g., a class with the named function corresponding to the main interface).  \n\n2. **Explicit and Correct Logic Specification**:  \n   - All necessary computational steps must be unambiguously stated, including initialization, updates, branching conditions, loops, recursions, and return statements.  \n   - The pseudocode must handle all relevant cases: common, edge, and error conditions, without gaps or implicit assumptions.  \n   - Control flow must be sound: no undefined, unreachable, or contradictory paths; loops and recursion must have clear termination conditions.  \n\n3. **Data Handling Consistency and Completeness**:  \n   - All data structures must be sufficiently defined with sizes, types, and indexing conventions clearly indicated or unequivocally inferred.  \n   - Accessing elements (arrays, lists, strings) must have valid indices consistent with zero- or one-based schemes explicitly or clearly implied.  \n   - Manipulation of data must avoid undefined states: no reliance on unset variables, implicit global states, or ambiguous modifications.  \n\n4. **Conformance to Conventional Programming Constructs for Implementation**:  \n   - The pseudocode must employ standard control and data constructs convertible straightforwardly into executable code without guesswork.  \n   - All operators, method calls, and expressions must be clearly defined or standard, with no ambiguous or invented notation.  \n\n5. **Interface Correctness and Completeness**:  \n   - The pseudocode must present the primary function/method expected by tests with exact naming and parameters matching those required, ensuring it is invocable as intended.  \n   - If auxiliary helper functions exist, they must be fully defined and accessible within the structure.  \n\nApply the above rigorously and **only then** output:  \n- `1` if the pseudocode can be unambiguously and faithfully implemented so that the resulting program passes **all** valid unit tests for the described functionality.  \n- `0` if not\u2014due to missing pieces, ambiguity, naming mismatches, incomplete logic, undefined behavior, incorrect control flow, interface errors, or any factor preventing guaranteed full correctness under all test conditions.  \n\n**Output exactly one digit (1 or 0), nothing else, no whitespace, no explanation.**\n\n```\n<PSEUDOCODE HERE>\n```",
  "score": 0.6833333333333333,
  "feedback": "We have a 2 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nThe following are pseudocodes that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION uniquePaths(m n)  \n        SET dp TO a two dimensional list with m rows and n columns where each element is set to one  \n        FOR i FROM two TO m  \n            FOR j FROM two TO n  \n                SET element at position i of dp TO the list at position i of dp  \n                SET element at position j of element at position i of dp TO the sum of the element at position i MINUS one of dp at position j AND the element at position i of dp at position j MINUS one  \n            END FOR  \n        END FOR  \n        RETURN the element at position m MINUS one of dp at position n MINUS one  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION grayCode(n)  \n        IF n EQUALS zero  \n            RETURN a list containing zero  \n        END IF  \n        SET prev_gray TO the result of calling grayCode with the value of n MINUS one  \n        SET mask TO one MULTIPLIED BY two RAISED TO the power of n MINUS one  \n        SET current_gray TO concatenation of prev_gray WITH a list constructed by taking each number IN the reversed prev_gray AND applying bitwise OR with mask  \n        RETURN current_gray  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION reverseWords(s)  \n        SET words TO list of words obtained by splitting s by spaces where multiple spaces are handled automatically  \n        REVERSE the order of elements in words  \n        RETURN single string obtained by joining elements of words with single spaces between them  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION canWin(currentState)  \n        SET memo TO an empty dictionary  \n        \n        FUNCTION can_win_helper(state)  \n            IF state EXISTS IN memo THEN  \n                RETURN the value associated with state in memo  \n            END IF  \n            \n            FOR index FROM zero TO the LENGTH OF state MINUS one MINUS one  \n                IF the element at position index of state EQUALS the plus character AND the element at position index PLUS one of state EQUALS the plus character THEN  \n                    SET new_state TO the substring from position zero TO position index MINUS one CONCATENATED WITH two minus characters CONCATENATED WITH the substring from position index PLUS two TO the END OF state  \n                    IF the result of calling can_win_helper WITH new_state IS EQUAL TO false THEN  \n                        SET the value associated with state in memo TO true  \n                        RETURN true  \n                    END IF  \n                END IF  \n            END FOR  \n            \n            SET the value associated with state in memo TO false  \n            RETURN false  \n        END FUNCTION  \n        \n        RETURN the result of calling can_win_helper WITH currentState  \n    END FUNCTION  \nEND CLASS\n\nThe following are pseudocodes that are not reproducible but were labeled as reproducible:\nCLASS Solution\n    FUNCTION isMatch(string_s, string_p)\n        SET dp TO a two dimensional list of BOOLEAN false VALUES with the number of rows EQUAL TO the LENGTH OF string_s PLUS one AND the number of columns EQUAL TO the LENGTH OF string_p PLUS one\n\n        SET the element at row zero AND column zero OF dp TO true\n\n        FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n            IF the element at position index_j MINUS one OF string_p EQUALS character star\n                SET the element at row zero AND column index_j OF dp TO the element at row zero AND column index_j MINUS one OF dp\n            END IF\n        END FOR\n        \n        FOR index_i FROM one TO the LENGTH OF string_s INCLUSIVE\n            FOR index_j FROM one TO the LENGTH OF string_p INCLUSIVE\n                IF the element at position index_j MINUS one OF string_p EQUALS character star\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j OF dp OR the element at row index_i AND column index_j MINUS one OF dp\n                ELSE IF the element at position index_j MINUS one OF string_p EQUALS character question MARK OR the element at position index_i MINUS one OF string_s EQUALS the element at position index_j MINUS one OF string_p\n                    SET the element at row index_i AND column index_j OF dp TO the element at row index_i MINUS one AND column index_j MINUS one OF dp\n                END IF\n            END FOR\n        END FOR\n\n        RETURN the element at row the LENGTH OF string_s AND column the LENGTH OF string_p OF dp\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_0.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"ho\", p = \"ho***\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_1.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcdef\", p = \"abc*ef\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_2.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abcabczzzde\", p = \"*abc???de*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_3.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"abbabbbbbbabaababbabbbabaaabbaaaaabbbabbbabaaabbabbaaabbbabaabbbabbabbabbbbba\", p = \"*a*****b*bb*b****b*bb*bb*a*aa*b*b*a*a*b*aba*b*ba*a*aab*bbb*a*aaab*ba*a*bb*bb*bb*ba*ba*b*ab*b*b\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp9fs83dtq/solution_4.py\", line 45, in <module>\\n    print(Solution().isMatch(s = \"aabbccddeeff\", p = \"a*b*c*d*e*f*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION isMatch(s, p)  \n        SET dp TO a two dimensional list of False with the number of rows equal to the length of s PLUS one and the number of columns equal to the length of p PLUS one  \n        SET element at position zero zero of dp TO True  \n        FOR j FROM one TO the length of p  \n            IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                SET element at position zero j of dp TO the value of element at position zero j MINUS one of dp  \n            END IF  \n        END FOR  \n        FOR i FROM one TO the length of s  \n            FOR j FROM one TO the length of p  \n                IF element at position j MINUS one of p EQUALS the character representing asterisk  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j of dp OR the value of element at position i j MINUS one of dp  \n                ELSE IF element at position j MINUS one of p EQUALS the character representing question mark OR element at position i MINUS one of s EQUALS element at position j MINUS one of p  \n                    SET element at position i j of dp TO the value of element at position i MINUS one j MINUS one of dp  \n                END IF  \n            END FOR  \n        END FOR  \n        RETURN element at position the length of s the length of p of dp  \n    END FUNCTION  \nEND CLASS\nCLASS Solution\n    FUNCTION canJump(list_of_numbers)\n        SET farthest_reachable_index TO zero\n        FOR index FROM zero TO the LENGTH OF list_of_numbers MINUS one INCLUSIVE\n            IF index GREATER THAN farthest_reachable_index\n                RETURN False\n            END IF\n            SET possible_reach TO index PLUS element at position index OF list_of_numbers\n            SET farthest_reachable_index TO the GREATER OF farthest_reachable_index AND possible_reach\n        END FOR\n        RETURN farthest_reachable_index GREATER THAN OR EQUAL TO the LENGTH OF list_of_numbers MINUS one\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_0.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,1,1,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_1.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [3,2,1,0,4]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_2.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_3.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [1,2,3,4,5,6,7,8,9,10]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpp37hyifd/solution_4.py\", line 29, in <module>\\n    print(Solution().canJump(nums = [5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]))\\n          ^^^^^^^^\\nNameError: name \\'Solution\\' is not defined\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION canJump(nums)  \n        SET farthest TO zero  \n        FOR i FROM zero TO the LENGTH OF nums MINUS one  \n            IF i GREATER THAN farthest  \n                RETURN false  \n            END IF  \n            SET possible_reach TO i PLUS element at position i of nums  \n            IF possible_reach GREATER THAN farthest  \n                SET farthest TO possible_reach  \n            END IF  \n        END FOR  \n        IF farthest GREATER THAN OR EQUAL TO the LENGTH OF nums MINUS one  \n            RETURN true  \n        ELSE  \n            RETURN false  \n        END IF  \n    END FUNCTION  \nEND CLASS\n```\ndefine combine(n, k):\n  result = []\n  define backtrack(start, path):\n    if len(path) = k:\n      result.append(copy of path)\n      return\n    for i in range(start to n):\n      path.append(i)\n      backtrack(i+1, path)\n      path.pop()\n  backtrack(1, [])\n  return result\n```\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8x1u0yfm/solution_0.py\", line 34, in <module>\\n    print(Solution().combine(n = 3, k = 2))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'combine\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8x1u0yfm/solution_1.py\", line 34, in <module>\\n    print(Solution().combine(n = 6, k = 4))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'combine\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8x1u0yfm/solution_2.py\", line 34, in <module>\\n    print(Solution().combine(n = 1, k = 1))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'combine\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8x1u0yfm/solution_3.py\", line 34, in <module>\\n    print(Solution().combine(n = 4, k = 2))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'combine\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8x1u0yfm/solution_4.py\", line 34, in <module>\\n    print(Solution().combine(n = 6, k = 0))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'combine\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION combine WITH PARAMETERS n k  \n        FUNCTION backtrack WITH PARAMETERS start path  \n            IF the LENGTH OF path EQUALS k  \n                APPEND a COPY OF path TO result  \n                RETURN  \n            END IF  \n            FOR i FROM start TO n PLUS one  \n                APPEND i TO path  \n                CALL backtrack WITH ARGUMENTS i PLUS one path  \n                REMOVE the LAST ELEMENT FROM path  \n            END FOR  \n        END FUNCTION  \n        SET result TO an EMPTY LIST  \n        CALL backtrack WITH ARGUMENTS one AN EMPTY LIST  \n        RETURN result  \n    END FUNCTION  \nEND CLASS\nCLASS Solution\n    FUNCTION evalRPN(tokens_of_strings)\n        SET stack TO an empty list\n        FOR each token IN tokens_of_strings\n            IF token IS IN the collection plus minus multiplied by divided by\n                SET b TO the element removed FROM the end of stack\n                SET a TO the element removed FROM the end of stack\n                IF token EQUALS plus\n                    APPEND a PLUS b TO stack\n                ELSE IF token EQUALS minus\n                    APPEND a MINUS b TO stack\n                ELSE IF token EQUALS multiplied by\n                    APPEND a MULTIPLIED BY b TO stack\n                ELSE IF token EQUALS divided by\n                    APPEND the integer conversion OF a DIVIDED BY b TO stack\n                END IF\n            ELSE\n                APPEND the integer conversion OF token TO stack\n            END IF\n        END FOR\n        RETURN the element at position zero of stack\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_0.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_1.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_2.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_3.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"9\",\"3\",\"/\",\"6\",\"2\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_4.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"100\",\"50\",\"/\",\"2\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n']\nHere is a version of the pseudocode that IS reproducible:\nCLASS Solution  \n    FUNCTION evalRPN(tokens)  \n        SET stack TO an empty list  \n        FOR each token IN tokens  \n            IF token EQUALS one of the symbols plus MINUS MULTIPLY DIVIDE  \n                SET b TO the last element removed from stack  \n                SET a TO the last element removed from stack  \n                IF token EQUALS plus  \n                    APPEND a PLUS b TO stack  \n                ELSE IF token EQUALS minus  \n                    APPEND a MINUS b TO stack  \n                ELSE IF token EQUALS multiply  \n                    APPEND a MULTIPLIED BY b TO stack  \n                ELSE IF token EQUALS divide  \n                    APPEND the integer value of a DIVIDED BY b TO stack  \n                END IF  \n            ELSE  \n                APPEND the integer value of token TO stack  \n            END IF  \n        END FOR  \n        RETURN the element at position zero of stack  \n    END FUNCTION  \nEND CLASS\n\nAvg Score for all pseudocodes: 0.6833333333333333",
  "iter": 7
}