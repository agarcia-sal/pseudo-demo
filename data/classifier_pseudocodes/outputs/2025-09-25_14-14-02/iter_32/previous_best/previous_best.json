{
  "prompt": "Given any input pseudocode which may include classes, functions, variables, control flow constructs (loops, conditionals, recursion), and data manipulation steps, determine **with complete and unequivocal certainty** whether the pseudocode is **fully reproducible**. Here, *fully reproducible* means that the pseudocode can be directly converted into a working implementation that passes **all unit tests without any modification, supplementation, or correction**.\n\n---\n\n### Instructions for Evaluation:\n\nYou must output exactly one digit per input pseudocode:\n- Output `1` if and only if the pseudocode satisfies **all** criteria below and can be guaranteed to pass **every** unit test exactly as given.\n- Output `0` if any criterion is not met, or if there remains **any reasonable doubt** about reproducibility or correctness.\n\nNo explanations, no whitespace, no extra characters\u2014only a single digit `1` or `0` per input pseudocode, in exact input order.\n\n---\n\n### Comprehensive Criteria for Full Reproducibility:\n\n1. **Complete, Explicit, and Self-Contained Definitions:**\n   - All functions, methods, classes, and procedures used anywhere are fully and explicitly defined in the pseudocode.\n   - No references to undefined functions, libraries, or external modules beyond common, well-known primitives explicitly permitted.\n   - Function/method signatures must state all parameters (with types or clearly defined roles) _and_ return types if applicable.\n   - All nested functions or helpers must be defined within accessible scope.\n\n2. **Syntactic and Semantic Clarity and Precision:**\n   - The pseudocode syntax is sufficiently explicit and precise to be mechanically translated into executable code without ambiguity.\n   - Loops and conditionals clearly indicate exact iteration bounds, termination conditions, and case coverage.\n   - Recursive functions explicitly include clearly defined and reachable base cases ensuring termination.\n   - All control flows (including breaks, continues, exceptions if any) are fully spelled out without ambiguity or multiple possible interpretations.\n\n3. **Consistent and Unambiguous Naming and Scope Resolution:**\n   - Every variable, function, class, or object is declared before use.\n   - Names are consistent and not ambiguous or conflicting.\n   - Variable scopes (global, local, closures) are directly inferable from the pseudocode without assumptions.\n   - No identifiers are introduced implicitly or without definitions.\n\n4. **Explicit Initialization and Type Clarity:**\n   - Every variable is initialized or assigned a valid value before any usage.\n   - Data types or roles of variables, function arguments, arrays, and data structures are explicitly stated or can be unambiguously deduced.\n   - Data structures specify their type, dimensions, content if initialized, and all modifications clearly.\n\n5. **Complete and Explicit Edge Case and Exception Handling:**\n   - The pseudocode explicitly accounts for all typical and edge input cases known to be covered by unit tests (including empty inputs, maximal/minimal values, unusual values, boundary conditions).\n   - No branches, cases, or inputs are omitted or left implicit.\n   - Fail-safe guards against invalid accesses, divisions by zero, null dereferences, or other runtime errors are present where required.\n\n6. **Logical Consistency and Exhaustiveness:**\n   - The pseudocode is free from contradictions, logical gaps, or unintentionally missing steps.\n   - Intermediate computational steps are fully specified when essential for correctness.\n   - No shortcuts, partial implementations, or reliance on external explanations.\n\n7. **Robustness Against Runtime Errors and Structural Faults:**\n   - No usage of undefined or uninitialized variables, functions, or data structures.\n   - Return statements correctly appear in all function exit paths where a return is expected.\n   - No illegal operations such as out-of-bound indexing without conditional protection.\n   - All loop constructs and conditional branches are properly opened and closed, with no malformed flows.\n   - All function and method calls match their declared signatures consistently.\n\n8. **Guaranteed Passing of 100% Unit Tests:**\n   - The pseudocode represents a fully correct algorithm according to the problem\u2019s specification.\n   - It must be robust against all inputs and edge cases that typical unit tests would exercise.\n   - Partial or near misses (e.g. passing 80% or 99%) are not sufficient \u2014 all tests must pass.\n\n9. **Self-Contained Implementation Without External Dependency:**\n   - No required logic, data, or calls missing from the pseudocode that would need to be \"filled in\" externally.\n   - Only well-known, standard language primitives and constructs are allowed as implicit assumptions.\n   - No calls to non-standard or unspecified external systems, libraries, or environment-specific features.\n\n10. **Permissible Variations:**\n    - Formatting style, indentation, variable naming conventions, and minor syntactic differences are acceptable as long as they do not introduce ambiguity or incompleteness.\n    - Logical equivalence overrides superficial differences.\n\n---\n\n### Stepwise Evaluation Procedure:\n\n- Parse the entire pseudocode accurately, including all nested scopes.\n- Confirm presence and precise definitions of all required components.\n- Verify that all used variables, functions, and classes are declared, initialized, and consistent.\n- Validate all control structures are fully specified with clear boundaries and termination.\n- Confirm explicit coverage of expected edge cases and error guards.\n- Detect any contradictions, missing logic, or implicit assumptions that would preclude successful execution.\n- Assume no unknown implicit behaviors; any unavoidable doubt leads to a `0`.\n- Accept stylistic freedoms that do not obscure or omit required logic.\n- Remember: perfect reproducibility is mandatory for a `1`.\n\n---\n\n### Output Format:\n\nFor each pseudocode input processed, output a single digit, either:\n\n- `1` (fully reproducible and guaranteed to pass all unit tests as-is), or\n- `0` (otherwise, including any ambiguity or partial correctness).\n\nNo additional text, no line breaks, no commentary\u2014only the digit per input, in order.\n\n---\n\n**Example:**\n\nInput pseudocode:  \n```\nCLASS Solution  \n    FUNCTION sumToN(n) RETURNS integer  \n        SET total TO 0  \n        FOR i FROM 1 TO n  \n            INCREMENT total BY i  \n        END FOR  \n        RETURN total  \n    END FUNCTION  \nEND CLASS\n```\n\nOutput:  \n`1`\n\n---\n\n**Strictness reminder:**  \nIf any missing component, ambiguous part, potential runtime error, or partial correctness is found, output `0`. Only flawless, fully explicit, and logically sound pseudocode compliant with all above criteria merits `1`.\n\n---\n\n**Your task:** Using these instructions and criteria, determine reproducibility of each provided pseudocode input **with maximal precision**.\n\n---\n\n**End of prompt.**",
  "response": "Given any input pseudocode which may include classes, functions, variables, control flow constructs (loops, conditionals, recursion), and data manipulation steps, determine **with complete and unequivocal certainty** whether the pseudocode is **fully reproducible**. Here, *fully reproducible* means that the pseudocode can be directly converted into a working implementation that passes **all unit tests without any modification, supplementation, or correction**.\n\n---\n\n### Instructions for Evaluation:\n\nYou must output exactly one digit per input pseudocode:\n- Output `1` if and only if the pseudocode satisfies **all** criteria below and can be guaranteed to pass **every** unit test exactly as given.\n- Output `0` if any criterion is not met, or if there remains **any reasonable doubt** about reproducibility or correctness.\n\nNo explanations, no whitespace, no extra characters\u2014only a single digit `1` or `0` per input pseudocode, in exact input order.\n\n---\n\n### Comprehensive Criteria for Full Reproducibility:\n\n1. **Complete, Explicit, and Self-Contained Definitions:**\n   - All functions, methods, classes, and procedures used anywhere are fully and explicitly defined in the pseudocode.\n   - No references to undefined functions, libraries, or external modules beyond common, well-known primitives explicitly permitted.\n   - Function/method signatures must state all parameters (with types or clearly defined roles) _and_ return types if applicable.\n   - All nested functions or helpers must be defined within accessible scope.\n\n2. **Syntactic and Semantic Clarity and Precision:**\n   - The pseudocode syntax is sufficiently explicit and precise to be mechanically translated into executable code without ambiguity.\n   - Loops and conditionals clearly indicate exact iteration bounds, termination conditions, and case coverage.\n   - Recursive functions explicitly include clearly defined and reachable base cases ensuring termination.\n   - All control flows (including breaks, continues, exceptions if any) are fully spelled out without ambiguity or multiple possible interpretations.\n\n3. **Consistent and Unambiguous Naming and Scope Resolution:**\n   - Every variable, function, class, or object is declared before use.\n   - Names are consistent and not ambiguous or conflicting.\n   - Variable scopes (global, local, closures) are directly inferable from the pseudocode without assumptions.\n   - No identifiers are introduced implicitly or without definitions.\n\n4. **Explicit Initialization and Type Clarity:**\n   - Every variable is initialized or assigned a valid value before any usage.\n   - Data types or roles of variables, function arguments, arrays, and data structures are explicitly stated or can be unambiguously deduced.\n   - Data structures specify their type, dimensions, content if initialized, and all modifications clearly.\n\n5. **Complete and Explicit Edge Case and Exception Handling:**\n   - The pseudocode explicitly accounts for all typical and edge input cases known to be covered by unit tests (including empty inputs, maximal/minimal values, unusual values, boundary conditions).\n   - No branches, cases, or inputs are omitted or left implicit.\n   - Fail-safe guards against invalid accesses, divisions by zero, null dereferences, or other runtime errors are present where required.\n\n6. **Logical Consistency and Exhaustiveness:**\n   - The pseudocode is free from contradictions, logical gaps, or unintentionally missing steps.\n   - Intermediate computational steps are fully specified when essential for correctness.\n   - No shortcuts, partial implementations, or reliance on external explanations.\n\n7. **Robustness Against Runtime Errors and Structural Faults:**\n   - No usage of undefined or uninitialized variables, functions, or data structures.\n   - Return statements correctly appear in all function exit paths where a return is expected.\n   - No illegal operations such as out-of-bound indexing without conditional protection.\n   - All loop constructs and conditional branches are properly opened and closed, with no malformed flows.\n   - All function and method calls match their declared signatures consistently.\n\n8. **Guaranteed Passing of 100% Unit Tests:**\n   - The pseudocode represents a fully correct algorithm according to the problem\u2019s specification.\n   - It must be robust against all inputs and edge cases that typical unit tests would exercise.\n   - Partial or near misses (e.g. passing 80% or 99%) are not sufficient \u2014 all tests must pass.\n\n9. **Self-Contained Implementation Without External Dependency:**\n   - No required logic, data, or calls missing from the pseudocode that would need to be \"filled in\" externally.\n   - Only well-known, standard language primitives and constructs are allowed as implicit assumptions.\n   - No calls to non-standard or unspecified external systems, libraries, or environment-specific features.\n\n10. **Permissible Variations:**\n    - Formatting style, indentation, variable naming conventions, and minor syntactic differences are acceptable as long as they do not introduce ambiguity or incompleteness.\n    - Logical equivalence overrides superficial differences.\n\n---\n\n### Stepwise Evaluation Procedure:\n\n- Parse the entire pseudocode accurately, including all nested scopes.\n- Confirm presence and precise definitions of all required components.\n- Verify that all used variables, functions, and classes are declared, initialized, and consistent.\n- Validate all control structures are fully specified with clear boundaries and termination.\n- Confirm explicit coverage of expected edge cases and error guards.\n- Detect any contradictions, missing logic, or implicit assumptions that would preclude successful execution.\n- Assume no unknown implicit behaviors; any unavoidable doubt leads to a `0`.\n- Accept stylistic freedoms that do not obscure or omit required logic.\n- Remember: perfect reproducibility is mandatory for a `1`.\n\n---\n\n### Output Format:\n\nFor each pseudocode input processed, output a single digit, either:\n\n- `1` (fully reproducible and guaranteed to pass all unit tests as-is), or\n- `0` (otherwise, including any ambiguity or partial correctness).\n\nNo additional text, no line breaks, no commentary\u2014only the digit per input, in order.\n\n---\n\n**Example:**\n\nInput pseudocode:  \n```\nCLASS Solution  \n    FUNCTION sumToN(n) RETURNS integer  \n        SET total TO 0  \n        FOR i FROM 1 TO n  \n            INCREMENT total BY i  \n        END FOR  \n        RETURN total  \n    END FUNCTION  \nEND CLASS\n```\n\nOutput:  \n`1`\n\n---\n\n**Strictness reminder:**  \nIf any missing component, ambiguous part, potential runtime error, or partial correctness is found, output `0`. Only flawless, fully explicit, and logically sound pseudocode compliant with all above criteria merits `1`.\n\n---\n\n**Your task:** Using these instructions and criteria, determine reproducibility of each provided pseudocode input **with maximal precision**.\n\n---\n\n**End of prompt.**",
  "score": 0.6383333333333333,
  "feedback": "We have a 4 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe also have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nWe have cosmetic, which are pseudocodes that are variations of the positive pseudocodes and also pass all test cases.\nWe have near-misses, which are pseudocodes that correspond to code that almost passes all test cases but do not. They pass at least 80% of test cases\nHere is the score for this prompt on positive-labeled pseudocodes: 0.6666666666666666\nHere is the score for this prompt on negative-labeled pseudocodes: 0.7933333333333333\nHere is the score for this prompt on cosmetic-labeled pseudocodes: 0.6866666666666666\nHere is the score for this prompt on near_miss-labeled pseudocodes: 0.4066666666666667\n\nThe following are pseudocodes that are reproducible but were labeled as not:\nCLASS Solution  \n    FUNCTION multiply(num1 string num2 string) RETURNS string  \n        IF num1 EQUALS string zero OR num2 EQUALS string zero  \n            RETURN string zero  \n        END IF  \n\n        SET result TO a list of zeros with the LENGTH OF num1 PLUS the LENGTH OF num2  \n\n        SET num1 TO the reversal of num1  \n        SET num2 TO the reversal of num2  \n\n        FOR i FROM zero TO the LENGTH OF num1 MINUS one  \n            FOR j FROM zero TO the LENGTH OF num2 MINUS one  \n                SET mul TO the character code of the element at position i of num1 MINUS the character code of string zero MULTIPLIED BY the character code of the element at position j of num2 MINUS the character code of string zero  \n                SET p1 TO i PLUS j  \n                SET p2 TO i PLUS j PLUS one  \n                SET sum TO mul PLUS the element at position p1 of result  \n\n                SET the element at position p1 of result TO sum MODULO ten  \n                INCREMENT the element at position p2 of result BY the integer division of sum BY ten  \n            END FOR  \n        END FOR  \n\n        SET result_str TO the concatenation of the string representations of the elements of result in reverse order  \n        RETURN result_str with all leading string zeros removed  \n    END FUNCTION  \nEND CLASS\nCLASS Solution  \n    FUNCTION uniquePaths(m n)  \n        SET dp TO a two dimensional list with m rows and n columns where each element is set to one  \n        FOR i FROM two TO m  \n            FOR j FROM two TO n  \n                SET element at position i of dp TO the list at position i of dp  \n                SET element at position j of element at position i of dp TO the sum of the element at position i MINUS one of dp at position j AND the element at position i of dp at position j MINUS one  \n            END FOR  \n        END FOR  \n        RETURN the element at position m MINUS one of dp at position n MINUS one  \n    END FUNCTION  \nEND CLASS\n\nThe following are cosmetic or modified pseudocodes of other reproducible versions of pseudocode that are reproducible but were labeled as not:\nCLASS Solution\n    FUNCTION longestPalindrome(s)\n        SET length AS THE COUNT OF s\n        SET truth_matrix AS AN ARRAY (length) OF ARRAYS (length) FILLED WITH TRUE\n        SET start_index AS 0\n        SET max_length AS 1\n        \n        SET outer_index AS length MINUS 2\n        WHILE outer_index IS GREATER THAN OR EQUAL TO 0 DO\n            SET inner_index AS outer_index PLUS 1\n            WHILE inner_index IS LESS THAN length DO\n                SET truth_matrix[outer_index][inner_index] AS FALSE\n                \n                IF NOT (s[outer_index] NOT EQUAL TO s[inner_index]) THEN\n                    SET truth_matrix[outer_index][inner_index] AS truth_matrix[outer_index PLUS 1][inner_index MINUS 1]\n                    \n                    IF truth_matrix[outer_index][inner_index] IS TRUE THEN\n                        IF (max_length LESS THAN (inner_index MINUS outer_index PLUS 1)) THEN\n                            SET start_index AS outer_index\n                            SET max_length AS (inner_index MINUS outer_index PLUS 1)\n                        END IF\n                    END IF\n                END IF\n                INCREMENT inner_index BY 1\n            END WHILE\n            DECREMENT outer_index BY 1\n        END WHILE\n        \n        RETURN s SUBSTRING FROM start_index TO (start_index PLUS max_length MINUS 1)\n    END FUNCTION\nEND CLASS\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET maxIntValue AS (2 ^ 31) - 1  \n        SET minIntValue AS 0 - (2 ^ 31)  \n        SET accumulatedNumber TO 0  \n        SET position TO 0  \n        SET lengthOfString TO LENGTH OF s  \n        SET polarity TO 1  \n\n        WHILE position < lengthOfString AND s[position] = ' '  \n            position \u2190 position + 1  \n        END WHILE  \n\n        IF position < lengthOfString THEN  \n            SWITCH s[position]  \n                CASE '-'  \n                    polarity \u2190 0 - 1  \n                    position \u2190 position + 1  \n                    BREAK  \n                CASE '+'  \n                    polarity \u2190 1  \n                    position \u2190 position + 1  \n                    BREAK  \n            END SWITCH  \n        END IF  \n\n        REPEAT UNTIL NOT (position < lengthOfString AND s[position] >= '0' AND s[position] <= '9')  \n            SET currentChar TO s[position]  \n            SET numericValue TO INTEGER VALUE OF currentChar  \n            SET boundaryCheck TO maxIntValue - (numericValue DIV 10)  \n\n            IF accumulatedNumber > boundaryCheck THEN  \n                IF polarity = 1 THEN  \n                    RETURN maxIntValue  \n                ELSE  \n                    RETURN minIntValue  \n                END IF  \n            END IF  \n\n            accumulatedNumber \u2190 (accumulatedNumber * 10) + numericValue  \n            position \u2190 position + 1  \n        END REPEAT  \n\n        RETURN polarity * accumulatedNumber  \n    END FUNCTION  \nEND CLASS\n\nThe following are pseudocodes that are not reproducible but were labeled as reproducible:\nCLASS Solution\n    FUNCTION evalRPN(tokens_of_strings)\n        SET stack TO an empty list\n        FOR each token IN tokens_of_strings\n            IF token IS IN the collection plus minus multiplied by divided by\n                SET b TO the element removed FROM the end of stack\n                SET a TO the element removed FROM the end of stack\n                IF token EQUALS plus\n                    APPEND a PLUS b TO stack\n                ELSE IF token EQUALS minus\n                    APPEND a MINUS b TO stack\n                ELSE IF token EQUALS multiplied by\n                    APPEND a MULTIPLIED BY b TO stack\n                ELSE IF token EQUALS divided by\n                    APPEND the integer conversion OF a DIVIDED BY b TO stack\n                END IF\n            ELSE\n                APPEND the integer conversion OF token TO stack\n            END IF\n        END FOR\n        RETURN the element at position zero of stack\n    END FUNCTION\nEND CLASS\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_0.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_1.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_2.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_3.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"9\",\"3\",\"/\",\"6\",\"2\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp64jro_wr/solution_4.py\", line 72, in <module>\\n    print(Solution().evalRPN(tokens = [\"100\",\"50\",\"/\",\"2\",\"*\"]))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'evalRPN\\'\\n']\n```\nfunction fractionToDecimal(n, d):\n    sign \u2190 \"-\" if (n < 0) xor (d < 0) else \"\"\n    n, d \u2190 abs(n), abs(d)\n    q, r \u2190 divmod(n, d)\n    int_part \u2190 str(q)\n    if r = 0: return sign + int_part\n    seen \u2190 map remainder \u2192 index\n    frac \u2190 []\n    while r \u2260 0:\n        if r in seen:\n            i \u2190 seen[r]\n            return sign + int_part + \".\" + join(frac[:i]) + \"(\" + join(frac[i:]) + \")\"\n        seen[r] \u2190 length(frac)\n        r \u2190 r * 10\n        q, r \u2190 divmod(r, d)\n        append str(q) to frac\n    return sign + int_part + \".\" + join(frac)\n```\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpne6c9xwj/solution_0.py\", line 44, in <module>\\n    print(Solution().fractionToDecimal(numerator = 1, denominator = 2))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'fractionToDecimal\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpne6c9xwj/solution_1.py\", line 44, in <module>\\n    print(Solution().fractionToDecimal(numerator = 2, denominator = 1))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'fractionToDecimal\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpne6c9xwj/solution_2.py\", line 44, in <module>\\n    print(Solution().fractionToDecimal(numerator = 4, denominator = 333))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'fractionToDecimal\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpne6c9xwj/solution_3.py\", line 44, in <module>\\n    print(Solution().fractionToDecimal(numerator = -1, denominator = 3))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'fractionToDecimal\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpne6c9xwj/solution_4.py\", line 44, in <module>\\n    print(Solution().fractionToDecimal(numerator = 1, denominator = 7))\\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'fractionToDecimal\\'\\n']\n\nThe following are near-miss pseudocodes - they are almost reproducible but were labeled as reproducible:\nCLASS Solution  \n    FUNCTION myAtoi(s)  \n        SET INT_MAX TO two POWERED BY thirty ONE MINUS one  \n        SET INT_MIN TO negative two POWERED BY thirty ONE  \n        SET result TO zero  \n        SET index TO zero  \n        SET n TO the LENGTH OF s  \n        SET sign TO one  \n        WHILE index LESS THAN n AND character at position index OF s EQUALS a single whitespace character  \n            INCREMENT index BY one  \n        END WHILE  \n        IF index LESS THAN n AND (character at position index OF s EQUALS the plus sign OR character at position index OF s EQUALS the minus sign)  \n            IF character at position index OF s EQUALS the minus sign  \n                SET sign TO negative one  \n            ELSE  \n                SET sign TO one  \n            END IF  \n            INCREMENT index BY one  \n        END IF  \n        WHILE index LESS THAN n AND character at position index OF s IS A DIGIT  \n            SET digit TO the INTEGER VALUE OF character at position index OF s  \n            IF result GREATER THAN (INT_MAX MINUS digit) DIVIDED BY ten  \n                IF sign EQUALS one  \n                    RETURN INT_MAX  \n                ELSE  \n                    RETURN INT_MIN  \n                END IF  \n            END IF  \n            SET result TO result MULTIPLIED BY ten PLUS digit  \n            INCREMENT index BY one  \n        END WHILE  \n        RETURN sign MULTIPLIED BY result  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.96875, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_0.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"42\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_1.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \" -042\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_2.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"1337c0d3\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_3.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"0-1\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmps6pxau_y/solution_4.py\", line 54, in <module>\\n    print(Solution().myAtoi(s = \"words and 987\"))\\n          ^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'myAtoi\\'\\n']\nCLASS Solution\n    FUNCTION multiply(num1 string, num2 string) RETURNS string\n        IF num1 IS \"0\" OR num2 IS \"0\"\n            RETURN \"0\"\n        END IF\n\n        DECLARE digits AS MAP from INT to INT\n        DECLARE lengthSum AS INT = LENGTH(num1) + LENGTH(num2)\n        FOR index IN RANGE(lengthSum)\n            digits[index] = 0\n        END FOR\n\n        DECLARE reversed1 AS string = \"\"\n        DECLARE reversed2 AS string = \"\"\n        FOR p FROM LENGTH(num1) - 1 DOWNTO 0\n            reversed1 = reversed1 + num1[p]\n        END FOR\n        FOR q FROM LENGTH(num2) - 1 DOWNTO 0\n            reversed2 = reversed2 + num2[q]\n        END FOR\n\n        DECLARE function recursiveMul(i INT, j INT) RETURNS VOID\n            IF i = LENGTH(reversed1)\n                RETURN\n            END IF\n            IF j = LENGTH(reversed2)\n                recursiveMul(i + 1, 0)\n                RETURN\n            END IF\n\n            DECLARE valA AS INT = ASCII_CODE(reversed1[i]) - ASCII_CODE(\"0\")\n            DECLARE valB AS INT = ASCII_CODE(reversed2[j]) - ASCII_CODE(\"0\")\n            DECLARE product AS INT = valA * valB\n            DECLARE baseIndex AS INT = i + j\n            DECLARE nextIndex AS INT = baseIndex + 1\n            DECLARE totalSum AS INT = product + digits[baseIndex]\n\n            digits[baseIndex] = totalSum MOD 10\n            digits[nextIndex] = digits[nextIndex] + (totalSum DIV 10)\n\n            recursiveMul(i, j + 1)\n        END FUNCTION\n\n        CALL recursiveMul(0, 0)\n\n        DECLARE output AS string = \"\"\n        FOR key FROM lengthSum - 1 DOWNTO 0\n            output = output + TO_STRING(digits[key])\n        END FOR\n\n        WHILE LENGTH(output) > 1 AND output[0] = \"0\"\n            output = SUBSTRING(output, 1)\n        END WHILE\n\n        RETURN output\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.9666666666666667, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_0.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"2\", num2 = \"3\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_1.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"123\", num2 = \"456\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_2.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"1\", num2 = \"12345678901234567890\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_3.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"12345678901234567890\", num2 = \"9876543210\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp3bd59_62/solution_4.py\", line 36, in <module>\\n    print(Solution().multiply(num1 = \"0\", num2 = \"987654321\"))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'multiply\\'\\n']\nCLASS Solution\n    FUNCTION isMatch(s, p)\n        SET x TO LENGTH(s)\n        SET y TO LENGTH(p)\n        SET dp TO []\n        SET u TO 0\n        WHILE u <= x\n            SET tempList TO []\n            SET v TO 0\n            WHILE v <= y\n                APPEND False TO tempList\n                SET v TO v + 1\n            END WHILE\n            APPEND tempList TO dp\n            SET u TO u + 1\n        END WHILE\n\n        SET dp[0][0] TO True\n\n        PROCEDURE fillFirstRow(w)\n            IF w > y THEN\n                RETURN\n            END IF\n            IF p[w - 1] = '*'\n                SET dp[0][w] TO dp[0][w - 1]\n            END IF\n            fillFirstRow(w + 1)\n        END PROCEDURE\n\n        CALL fillFirstRow(1)\n\n        PROCEDURE processRow(i, j)\n            IF i > x THEN\n                RETURN\n            END IF\n            IF j > y THEN\n                CALL processRow(i + 1, 1)\n                RETURN\n            END IF\n\n            SWITCH TRUE\n                CASE (p[j - 1] = '*')\n                    SET dp[i][j] TO dp[i - 1][j] OR dp[i][j - 1]\n                BREAK\n\n                CASE (p[j - 1] = '?' OR s[i - 1] = p[j - 1])\n                    SET dp[i][j] TO dp[i - 1][j - 1]\n                BREAK\n\n                DEFAULT\n                    // dp[i][j] remains False implicitly\n                BREAK\n            END SWITCH\n\n            processRow(i, j + 1)\n        END PROCEDURE\n\n        CALL processRow(1, 1)\n\n        RETURN dp[x][y]\n    END FUNCTION\nEND CLASS\nPassing rate for this pseudocode: 0.96, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_0.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"ho\", p = \"ho***\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_1.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abcdef\", p = \"abc*ef\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_2.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abcabczzzde\", p = \"*abc???de*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_3.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"abbabbbbbbabaababbabbbabaaabbaaaaabbbabbbabaaabbabbaaabbbabaabbbabbabbabbbbba\", p = \"*a*****b*bb*b****b*bb*bb*a*aa*b*b*a*a*b*aba*b*ba*a*aab*bbb*a*aaab*ba*a*bb*bb*bb*ba*ba*b*ab*b*b\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmp8y2asww1/solution_4.py\", line 51, in <module>\\n    print(Solution().isMatch(s = \"aabbccddeeff\", p = \"a*b*c*d*e*f*\"))\\n          ^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'isMatch\\'\\n']\nCLASS Solution  \n    FUNCTION grayCode(n)  \n        IF n IS 0 THEN  \n            RETURN [0]  \n        END IF  \n        \n        ASSIGN resultList TO grayCode(n - 1)  \n        LET bitFlag BE 2 ^ (n - 1) * 1  \n        \n        DEFINE FUNCTION reverseList(inputList)  \n            IF inputList IS EMPTY THEN  \n                RETURN []  \n            ELSE  \n                RETURN reverseList(inputList[1:]) + [inputList[0]]  \n            END IF  \n        END FUNCTION  \n        \n        LET reversedResult BE reverseList(resultList)  \n        LET extendedList BE []  \n        \n        FOR each element IN reversedResult DO  \n            extendedList = extendedList + [(element BITWISE_OR bitFlag)]  \n        END FOR  \n        \n        RETURN resultList + extendedList  \n    END FUNCTION  \nEND CLASS\nPassing rate for this pseudocode: 0.8333333333333334, but was given a label of 1\nHere are the errors for this pseudocode:\n['Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_0.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 2))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_1.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 1))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_2.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 12))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_3.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 6))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n', 'Traceback (most recent call last):\\n  File \"/var/folders/tm/227pgc2d0tzgphcb1s4kjrj80000gn/T/tmpyy3hqzsy/solution_4.py\", line 44, in <module>\\n    print(Solution().grayCode(n = 11))\\n          ^^^^^^^^^^^^^^^^^^^\\nAttributeError: \\'Solution\\' object has no attribute \\'grayCode\\'\\n']\n\nAvg Score for all pseudocodes: 0.6383333333333333"
}