{
  "prompt": "Given the evaluation results and the observed common failure modes\u2014particularly the repeated \"AttributeError\" indicating that the class or function name may be missing or incorrect, and ambiguous or incomplete logic leading to false positives or negatives\u2014a stronger prompt must tightly constrain what is needed for reproducibility while explicitly prompting careful assessment of completeness, clarity, correctness, and presence of key elements such as class and function definitions, method signatures, return statements, and unambiguous control flow.\n\nAdditionally, leveraging explicit criteria and instructing the model to assess pseudocode on multiple axes before outputting a single binary outcome should help improve decision quality.\n\n---\n\n### Enhanced Prompt\n\n```\nYou will be given a piece of pseudocode representing a solution to an unspecified programming problem.\n\nYour task is to determine, with high confidence, whether this pseudocode is fully reproducible. By reproducible, we mean the pseudocode is complete, logically correct, unambiguous, and sufficiently detailed so that a competent programmer can implement it and it will pass **all** unit tests for the problem it intends to solve.\n\nSpecifically evaluate the pseudocode against these criteria:\n\n1. **Structural completeness:**  \n   - The pseudocode must explicitly define all necessary classes, functions, or methods expected by the problem.  \n   - Method/function names and parameters must be consistent and clearly stated.  \n   - There must be a clear and correct return statement for the final output where applicable.\n\n2. **Logical correctness and completeness:**  \n   - The control flow (loops, conditionals, recursion) must be well-defined and terminate correctly.  \n   - All variables and data structures referenced are initialized and used consistently.  \n   - The logic must correspond fully to solving the problem without ambiguity or missing pieces.  \n   - Edge cases and boundary conditions should be implicitly or explicitly handled.\n\n3. **Unambiguity and clarity:**  \n   - The pseudocode does not contain contradictory statements or vague instructions.  \n   - Variable roles and operations are clear enough to be translated into working code without guesswork.\n\n4. **No syntax or semantic anomalies that prevent implementation:**  \n   - While exact syntax is not required, the pseudocode should be close enough to logical programming concepts to implement.  \n   - No missing function or method definitions that cause runtime errors if implemented as-is (for example, class methods called but not defined).\n\nBased solely on these criteria, output a single digit for the given pseudocode:\n\n- Output `1` if the pseudocode is reproducible (will pass all unit tests).  \n- Output `0` if the pseudocode is not reproducible (incomplete, ambiguous, logically incorrect, or missing key parts that would prohibit passing all tests).\n\n**Important:**  \n- Output only the digit `1` or `0`.  \n- Do not include any explanations, comments, or other text.  \n- Output results in the exact order that pseudocode inputs are provided when multiple inputs are given sequentially.\n\nHere is the pseudocode input:  \n```{INPUT}```  \n```\n\n---\n\n### Rationale for improvement:\n\n- The prompt explicitly defines what \u201creproducible\u201d means in four detailed, concrete bullet-point criteria. This guides the model to consider subtleties beyond surface syntax or obvious completeness.  \n- Emphasizing checking for presence and correctness of class and function/method definitions, names, parameters, and return statements addresses common failure modes from the examples (e.g., method missing errors).  \n- Guiding the model to analyze logical completeness and edge case handling encourages a deeper semantic check beyond superficial reading.  \n- Explicitly instructing the output format to be just `1` or `0` with no additional text prevents noise.  \n- Informing the model that inputs may be given in sequence and outputs must be aligned encourages consistent, order-preserving output behavior.\n\nThis prompt is longer and more explicit and should help the model avoid false positives and false negatives caused by ambiguous or incomplete pseudocode, improving overall test-time performance and accuracy.",
  "response": "Given the evaluation results and the observed common failure modes\u2014particularly the repeated \"AttributeError\" indicating that the class or function name may be missing or incorrect, and ambiguous or incomplete logic leading to false positives or negatives\u2014a stronger prompt must tightly constrain what is needed for reproducibility while explicitly prompting careful assessment of completeness, clarity, correctness, and presence of key elements such as class and function definitions, method signatures, return statements, and unambiguous control flow.\n\nAdditionally, leveraging explicit criteria and instructing the model to assess pseudocode on multiple axes before outputting a single binary outcome should help improve decision quality.\n\n---\n\n### Enhanced Prompt\n\n```\nYou will be given a piece of pseudocode representing a solution to an unspecified programming problem.\n\nYour task is to determine, with high confidence, whether this pseudocode is fully reproducible. By reproducible, we mean the pseudocode is complete, logically correct, unambiguous, and sufficiently detailed so that a competent programmer can implement it and it will pass **all** unit tests for the problem it intends to solve.\n\nSpecifically evaluate the pseudocode against these criteria:\n\n1. **Structural completeness:**  \n   - The pseudocode must explicitly define all necessary classes, functions, or methods expected by the problem.  \n   - Method/function names and parameters must be consistent and clearly stated.  \n   - There must be a clear and correct return statement for the final output where applicable.\n\n2. **Logical correctness and completeness:**  \n   - The control flow (loops, conditionals, recursion) must be well-defined and terminate correctly.  \n   - All variables and data structures referenced are initialized and used consistently.  \n   - The logic must correspond fully to solving the problem without ambiguity or missing pieces.  \n   - Edge cases and boundary conditions should be implicitly or explicitly handled.\n\n3. **Unambiguity and clarity:**  \n   - The pseudocode does not contain contradictory statements or vague instructions.  \n   - Variable roles and operations are clear enough to be translated into working code without guesswork.\n\n4. **No syntax or semantic anomalies that prevent implementation:**  \n   - While exact syntax is not required, the pseudocode should be close enough to logical programming concepts to implement.  \n   - No missing function or method definitions that cause runtime errors if implemented as-is (for example, class methods called but not defined).\n\nBased solely on these criteria, output a single digit for the given pseudocode:\n\n- Output `1` if the pseudocode is reproducible (will pass all unit tests).  \n- Output `0` if the pseudocode is not reproducible (incomplete, ambiguous, logically incorrect, or missing key parts that would prohibit passing all tests).\n\n**Important:**  \n- Output only the digit `1` or `0`.  \n- Do not include any explanations, comments, or other text.  \n- Output results in the exact order that pseudocode inputs are provided when multiple inputs are given sequentially.\n\nHere is the pseudocode input:  \n```{INPUT}```  \n```\n\n---\n\n### Rationale for improvement:\n\n- The prompt explicitly defines what \u201creproducible\u201d means in four detailed, concrete bullet-point criteria. This guides the model to consider subtleties beyond surface syntax or obvious completeness.  \n- Emphasizing checking for presence and correctness of class and function/method definitions, names, parameters, and return statements addresses common failure modes from the examples (e.g., method missing errors).  \n- Guiding the model to analyze logical completeness and edge case handling encourages a deeper semantic check beyond superficial reading.  \n- Explicitly instructing the output format to be just `1` or `0` with no additional text prevents noise.  \n- Informing the model that inputs may be given in sequence and outputs must be aligned encourages consistent, order-preserving output behavior.\n\nThis prompt is longer and more explicit and should help the model avoid false positives and false negatives caused by ambiguous or incomplete pseudocode, improving overall test-time performance and accuracy.",
  "score": 0.63,
  "feedback": "We have a 4 way split for the pseudocodes: true positives, which are pseudocodes that correspond to code that passes all test cases.\nWe have true negatives, which are pseudocodes that correspond to code that do not pass all test cases.\nWe have cosmetic, which are pseudocodes that are variations of the positive pseudocodes and also pass all test cases.\nWe have near-misses, which are pseudocodes that correspond to code that almost passes all test cases but do not. They pass at least 80% of test cases\nHere is the score for this prompt on positive-labeled pseudocodes: 0.9466666666666667\nHere is the score for this prompt on negative-labeled pseudocodes: 0.48\nHere is the score for this prompt on cosmetic-labeled pseudocodes: 0.9266666666666666\nHere is the score for this prompt on near_miss-labeled pseudocodes: 0.16666666666666666\n\n\nAvg Score for all pseudocodes: 0.63"
}