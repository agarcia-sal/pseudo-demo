CLASS UnionFind  
    FUNCTION __init__(self, n)  
        SET self.parent TO list of integers from zero TO n MINUS one  
        SET self.rank TO list of value one repeated n times  
    END FUNCTION  
  
    FUNCTION find(self, u)  
        IF element at position u of self.parent NOT EQUALS u THEN  
            SET element at position u of self.parent TO the result of calling find with argument element at position u of self.parent  
        END IF  
        RETURN element at position u of self.parent  
    END FUNCTION  
  
    FUNCTION union(self, u, v)  
        SET rootU TO the result of calling find with argument u  
        SET rootV TO the result of calling find with argument v  
        IF rootU NOT EQUALS rootV THEN  
            IF element at position rootU of self.rank GREATER THAN element at position rootV of self.rank THEN  
                SET element at position rootV of self.parent TO rootU  
            ELSE IF element at position rootU of self.rank LESS THAN element at position rootV of self.rank THEN  
                SET element at position rootU of self.parent TO rootV  
            ELSE  
                SET element at position rootV of self.parent TO rootU  
                INCREMENT element at position rootU of self.rank BY one  
            END IF  
        END IF  
    END FUNCTION  
END CLASS  
  
CLASS Solution  
    FUNCTION minimumCost(self, n, edges, query)  
        ASSIGN reference TO object of class UnionFind with parameter n and SET TO uf  
        SET component_and TO list with n elements each SET TO the value of two raised to the power of thirty two MINUS one  
        
        FOR each element consisting of three parts u v w IN edges  
            CALL the method union of uf with arguments u and v  
            SET element at position result of calling find of uf with argument u of component_and TO element at position result of calling find of uf with argument u of component_and BITWISE AND w  
        END FOR  
        
        SET component_cost TO empty dictionary  
        FOR i FROM zero TO n MINUS one  
            SET root TO the result of calling find of uf with argument i  
            IF root NOT IN component_cost THEN  
                SET element with key root in component_cost TO element at position root of component_and  
            END IF  
        END FOR  
        
        SET result TO empty list  
        FOR each element consisting of two parts s t IN query  
            IF s EQUALS t THEN  
                APPEND zero TO result  
            ELSE IF the result of calling find of uf with argument s EQUALS the result of calling find of uf with argument t THEN  
                APPEND element with key the result of calling find of uf with argument s in component_cost TO result  
            ELSE  
                APPEND negative one TO result  
            END IF  
        END FOR  
        
        RETURN result  
    END FUNCTION  
END CLASS