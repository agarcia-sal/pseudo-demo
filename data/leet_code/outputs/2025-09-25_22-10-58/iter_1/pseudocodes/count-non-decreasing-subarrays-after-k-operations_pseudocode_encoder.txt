CLASS Solution  
    FUNCTION countNonDecreasingSubarrays(nums k)  
        SET n TO the LENGTH OF nums  
        
        FUNCTION canMakeNonDecreasing(start length)  
            SET cost TO zero  
            SET current_max TO element at position start of nums  
            FOR i FROM one TO length MINUS one  
                IF element at position start PLUS i of nums LESS THAN current_max  
                    INCREMENT cost BY current_max MINUS element at position start PLUS i of nums  
                END IF  
                SET current_max TO the GREATER OF current_max AND element at position start PLUS i of nums  
                IF cost GREATER THAN k  
                    RETURN False  
                END IF  
            END FOR  
            RETURN True  
        END FUNCTION  
        
        SET total_subarrays TO n MULTIPLIED BY the SUM of n PLUS one DIVIDED BY two  
        SET invalid_subarrays TO zero  
        
        FOR start FROM zero TO n MINUS one  
            SET left TO one  
            SET right TO n MINUS start  
            WHILE left LESS THAN OR EQUAL TO right  
                SET mid TO the INTEGER DIVISION of the SUM of left PLUS right BY two  
                IF canMakeNonDecreasing(start mid) EQUALS True  
                    SET left TO mid PLUS one  
                ELSE  
                    SET right TO mid MINUS one  
                END IF  
            END WHILE  
            INCREMENT invalid_subarrays BY n MINUS start MINUS right  
        END FOR  
        
        RETURN total_subarrays MINUS invalid_subarrays  
    END FUNCTION  
END CLASS