FUNCTION is_prime(n)  
    IF n LESS THAN OR EQUAL TO one  
        RETURN false  
    END IF  
    IF n LESS THAN OR EQUAL TO three  
        RETURN true  
    END IF  
    IF n MODULO two EQUALS zero OR n MODULO three EQUALS zero  
        RETURN false  
    END IF  
    SET i TO five  
    WHILE i MULTIPLIED BY i LESS THAN OR EQUAL TO n  
        IF n MODULO i EQUALS zero OR n MODULO i PLUS two EQUALS zero  
            RETURN false  
        END IF  
        INCREMENT i BY six  
    END WHILE  
    RETURN true  
END FUNCTION  

CLASS Solution  
    FUNCTION mostFrequentPrime(mat)  
        SET m TO the LENGTH OF mat  
        SET n TO the LENGTH OF element at position zero of mat  
        SET directions TO the LIST OF pairs consisting of minus one AND zero AND minus one AND one AND zero AND one AND one AND one AND one AND zero AND one AND minus one AND zero AND minus one AND minus one AND minus one  
        ASSIGN prime_count TO a new empty mapping from elements to integers  
        
        FUNCTION traverse(x, y, dx, dy, current_number)  
            SET nx TO x PLUS dx  
            SET ny TO y PLUS dy  
            IF nx GREATER THAN OR EQUAL TO zero AND nx LESS THAN m AND ny GREATER THAN OR EQUAL TO zero AND ny LESS THAN n  
                SET new_number TO current_number MULTIPLIED BY ten PLUS element at position nx of mat at position ny  
                IF new_number GREATER THAN ten AND is_prime(new_number) EQUALS true  
                    INCREMENT the count of new_number in prime_count BY one  
                END IF  
                CALL traverse with nx, ny, dx, dy, new_number  
            END IF  
        END FUNCTION  
        
        FOR i FROM zero TO m MINUS one  
            FOR j FROM zero TO n MINUS one  
                FOR each pair dx, dy IN directions  
                    CALL traverse with i, j, dx, dy, element at position i of mat at position j  
                END FOR  
            END FOR  
        END FOR  
        
        IF the size OF prime_count EQUALS zero  
            RETURN minus one  
        END IF  
        
        SET most_frequent_prime TO the element in prime_count with the maximum value of the pair consisting of the count in prime_count AND the element itself  
        RETURN most_frequent_prime  
    END FUNCTION  
END CLASS