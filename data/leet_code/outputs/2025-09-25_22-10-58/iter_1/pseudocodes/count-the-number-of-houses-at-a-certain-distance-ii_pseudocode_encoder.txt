CLASS Solution  
    FUNCTION countOfPairs(n, x, y)  
        IF x GREATER THAN y  
            SET temporary_x TO x  
            SET x TO y  
            SET y TO temporary_x  
        END IF  
        
        FUNCTION bfs(start)  
            SET visited TO list of boolean False repeated n PLUS one times  
            SET distance TO list of zeros repeated n PLUS one times  
            SET queue TO deque initialized with start  
            SET element at position start of visited TO True  
            
            WHILE the LENGTH OF queue GREATER THAN zero  
                REMOVE and RETURN element from the START of queue and ASSIGN to current  
                FOR each neighbor IN list consisting of current MINUS one AND current PLUS one  
                    IF neighbor GREATER THAN OR EQUAL TO one AND neighbor LESS THAN OR EQUAL TO n AND element at position neighbor of visited EQUALS False  
                        SET element at position neighbor of visited TO True  
                        SET element at position neighbor of distance TO element at position current of distance PLUS one  
                        ADD neighbor TO the END of queue  
                    END IF  
                END FOR  
                IF current EQUALS x AND element at position y of visited EQUALS False  
                    SET element at position y of visited TO True  
                    SET element at position y of distance TO element at position current of distance PLUS one  
                    ADD y TO the END of queue  
                ELSE IF current EQUALS y AND element at position x of visited EQUALS False  
                    SET element at position x of visited TO True  
                    SET element at position x of distance TO element at position current of distance PLUS one  
                    ADD x TO the END of queue  
                END IF  
            END WHILE  
            
            RETURN the sublist of distance from position one TO the end  
        END FUNCTION  
        
        SET result TO list of zeros repeated n times  
        FOR i FROM one TO n  
            SET distances TO result of calling bfs with parameter i  
            FOR each d IN distances  
                IF d GREATER THAN zero  
                    INCREMENT element at position d MINUS one of result BY one  
                END IF  
            END FOR  
        END FOR  
        
        RETURN result  
    END FUNCTION  
END CLASS