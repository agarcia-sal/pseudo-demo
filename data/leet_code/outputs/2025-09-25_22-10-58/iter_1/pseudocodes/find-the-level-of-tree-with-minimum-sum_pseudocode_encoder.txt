CLASS TreeNode  
    FUNCTION __init__(self COMMA val EQUALS zero COMMA left EQUALS None COMMA right EQUALS None)  
        SET self.val TO val  
        SET self.left TO left  
        SET self.right TO right  
    END FUNCTION  
END CLASS  

FUNCTION tree_node(values)  
    IF values EQUALS empty THEN  
        RETURN None  
    END IF  
    SET root TO new TreeNode with value equal to element at position one of values  
    SET i TO one  
    SET queue TO new deque  
    APPEND root TO queue  
    WHILE queue is not empty  
        SET node TO element removed from the left side of queue  
        IF i LESS THAN the length of values AND element at position i of values is not None THEN  
            SET node.left TO new TreeNode with value equal to element at position i of values  
            APPEND node.left TO queue  
        END IF  
        INCREMENT i BY one  
        IF i LESS THAN the length of values AND element at position i of values is not None THEN  
            SET node.right TO new TreeNode with value equal to element at position i of values  
            APPEND node.right TO queue  
        END IF  
        INCREMENT i BY one  
    END WHILE  
    RETURN root  
END FUNCTION  

FUNCTION is_same_tree(p COMMA q)  
    IF p EQUALS None AND q EQUALS None THEN  
        RETURN True  
    ELSE IF p EQUALS None OR q EQUALS None THEN  
        RETURN False  
    ELSE IF p.val NOT EQUALS q.val THEN  
        RETURN False  
    ELSE  
        RETURN is_same_tree with p.left and q.left AND is_same_tree with p.right and q.right  
    END IF  
END FUNCTION  

CLASS Solution  
    FUNCTION minimumLevel(self COMMA root)  
        IF root EQUALS None THEN  
            RETURN zero  
        END IF  
        SET queue TO new deque initialized with root  
        SET min_level TO one  
        SET min_sum TO positive infinity  
        SET level TO one  
        WHILE queue is not empty  
            SET level_sum TO zero  
            FOR each element _ FROM one TO the length of queue  
                SET node TO element removed from the left side of queue  
                INCREMENT level_sum BY node.val  
                IF node.left NOT EQUALS None THEN  
                    APPEND node.left TO queue  
                END IF  
                IF node.right NOT EQUALS None THEN  
                    APPEND node.right TO queue  
                END IF  
            END FOR  
            IF level_sum LESS THAN min_sum THEN  
                SET min_sum TO level_sum  
                SET min_level TO level  
            END IF  
            INCREMENT level BY one  
        END WHILE  
        RETURN min_level  
    END FUNCTION  
END CLASS