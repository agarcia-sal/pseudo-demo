CLASS Solution  
    FUNCTION timeTaken(edges)  
        SET n TO the LENGTH OF edges PLUS one  
        CALL construct_adjacency_list WITH edges AND STORE RESULT IN adj  
        
        FUNCTION bfs(start)  
            INITIALIZE queue WITH a double-ended queue containing a tuple of start and zero  
            SET visited TO a list of False values of LENGTH n  
            SET the element at position start of visited TO True  
            SET max_time TO zero  
            
            WHILE queue IS NOT empty  
                REMOVE the first element FROM queue AND ASSIGN TO current AND time  
                IF time GREATER THAN max_time THEN  
                    SET max_time TO time  
                END IF  
                
                FOR each neighbor IN the list at key current OF adj  
                    IF the element at position neighbor of visited EQUALS False THEN  
                        SET the element at position neighbor of visited TO True  
                        IF the remainder of neighbor DIVIDED BY two EQUALS zero THEN  
                            APPEND a tuple of neighbor AND time PLUS two TO queue  
                        ELSE  
                            APPEND a tuple of neighbor AND time PLUS one TO queue  
                        END IF  
                    END IF  
                END FOR  
            END WHILE  
            
            RETURN max_time  
        END FUNCTION  
        
        SET times TO a list of zero values of LENGTH n  
        FOR index i FROM zero TO n MINUS one  
            SET the element at position i of times TO the result of calling bfs WITH i  
        END FOR  
        
        RETURN times  
    END FUNCTION  
END CLASS