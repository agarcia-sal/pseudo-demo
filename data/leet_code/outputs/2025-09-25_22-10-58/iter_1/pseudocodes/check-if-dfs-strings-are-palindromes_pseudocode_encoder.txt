CLASS Hashing  
    FUNCTION __init__(self, s, base, mod)  
        SET self.mod TO mod  
        SET self.h TO list of zeros with length equal to the LENGTH OF s PLUS one  
        SET self.p TO list of ones with length equal to the LENGTH OF s PLUS one  
        FOR i FROM one TO the LENGTH OF s  
            SET element at position i of self.h TO the REMAINDER after DIVIDING the SUM of the PRODUCT of element at position i MINUS one of self.h MULTIPLIED BY base AND the UNICODE code point of element at position i MINUS one of s BY mod  
            SET element at position i of self.p TO the REMAINDER after DIVIDING the PRODUCT of element at position i MINUS one of self.p AND base BY mod  
        END FOR  
    END FUNCTION  

    FUNCTION query(self, l, r)  
        RETURN the REMAINDER after DIVIDING the DIFFERENCE of element at position r of self.h AND the PRODUCT of element at position l MINUS one of self.h AND element at position r MINUS l PLUS one of self.p BY self.mod  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION findAnswer(self, parent, s)  
        FUNCTION dfs(i)  
            SET l TO the LENGTH OF dfsStr PLUS one  
            FOR each j IN element at position i of g  
                CALL dfs WITH argument j  
            END FOR  
            APPEND element at position i of s TO dfsStr  
            SET r TO the LENGTH OF dfsStr  
            SET element at position i of pos TO the PAIR l AND r  
        END FUNCTION  

        SET n TO the LENGTH OF s  
        SET g TO a list of empty lists with length equal to n  
        FOR i FROM one TO n MINUS one  
            APPEND i TO element at position element at position i of parent of g  
        END FOR  
        SET dfsStr TO empty list  
        SET pos TO empty dictionary  
        CALL dfs WITH argument zero  

        SET base TO one THIRTY THREE THOUSAND THREE HUNDRED THIRTY ONE  
        SET mod TO nine HUNDRED NINETY EIGHT MILLION TWO HUNDRED FORTY FOUR THOUSAND THREE HUNDRED FIFTY THREE  
        SET h1 TO new instance of Hashing WITH arguments dfsStr base mod  
        SET h2 TO new instance of Hashing WITH arguments the REVERSE OF dfsStr base mod  
        SET ans TO empty list  
        FOR i FROM zero TO n MINUS one  
            SET l TO element at position i of pos AT first element of the PAIR  
            SET r TO element at position i of pos AT second element of the PAIR  
            SET k TO r MINUS l PLUS one  
            IF the REMAINDER of k DIVIDED BY two EQUALS zero  
                SET v1 TO CALL TO h1.query WITH arguments l AND l PLUS k DIVIDED BY two MINUS one  
                SET v2 TO CALL TO h2.query WITH arguments n MINUS r PLUS one AND n MINUS r PLUS one PLUS k DIVIDED BY two MINUS one  
            ELSE  
                SET v1 TO CALL TO h1.query WITH arguments l AND l PLUS k DIVIDED BY two MINUS one  
                SET v2 TO CALL TO h2.query WITH arguments n MINUS r PLUS one AND n MINUS r PLUS one PLUS k DIVIDED BY two MINUS one  
            END IF  
            APPEND the result of the COMPARISON v1 EQUALS v2 TO ans  
        END FOR  
        RETURN ans  
    END FUNCTION  
END CLASS