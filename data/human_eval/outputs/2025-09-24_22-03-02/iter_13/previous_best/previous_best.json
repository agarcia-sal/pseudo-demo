{
  "prompt": "Convert the given source code into clear, concise, and high-level pseudocode that preserves all original function and class names along with their exact hierarchical and nesting relationships. Use only full uppercase keywords such as FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, and similar\u2014with no symbols, abbreviations, or shorthand\u2014to express all logic and operations. Express expressions and arithmetic in natural language terms (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO) but keep identifiers and literals verbatim as in the original code. Represent control structures and block scope exclusively through consistent indentation; do not add any additional formatting, delimiters, empty lines, or comments. Keep the pseudocode at a high level, abstracting only to the extent that every pseudocode line directly corresponds to an unambiguous construct or statement in the original code without loss of meaning or alteration of intent. Do not include any explanation, notes, comments, or metadata\u2014output strictly the pseudocode text and nothing else. Ensure the pseudocode can be seamlessly and deterministically translated back into executable code.",
  "response": "Convert the given source code into clear, concise, and high-level pseudocode that preserves all original function and class names along with their exact hierarchical and nesting relationships. Use only full uppercase keywords such as FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, and similar\u2014with no symbols, abbreviations, or shorthand\u2014to express all logic and operations. Express expressions and arithmetic in natural language terms (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO) but keep identifiers and literals verbatim as in the original code. Represent control structures and block scope exclusively through consistent indentation; do not add any additional formatting, delimiters, empty lines, or comments. Keep the pseudocode at a high level, abstracting only to the extent that every pseudocode line directly corresponds to an unambiguous construct or statement in the original code without loss of meaning or alteration of intent. Do not include any explanation, notes, comments, or metadata\u2014output strictly the pseudocode text and nothing else. Ensure the pseudocode can be seamlessly and deterministically translated back into executable code.",
  "score": 2.40982341148447,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 1:\nFUNCTION encode_cyclic(s)\n    SET groups TO EMPTY LIST\n    FOR i IN RANGE OF LENGTH OF s PLUS 2 DIVIDE BY 3\n        SET start_index TO 3 MULTIPLY BY i\n        SET end_index TO MINIMUM OF start_index PLUS 3 AND LENGTH OF s\n        APPEND SUBSTRING OF s FROM start_index TO end_index TO groups\n    SET new_groups TO EMPTY LIST\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3\n            APPEND CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND FIRST CHARACTER OF group TO new_groups\n        ELSE\n            APPEND group TO new_groups\n    RETURN CONCATENATION OF ALL ELEMENTS OF new_groups\n\nFUNCTION decode_cyclic(s)\n    RETURN CALL encode_cyclic WITH ARGUMENT CALL encode_cyclic WITH ARGUMENT s\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpoa5ytkv6/solution_0.py\", line 22, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpoa5ytkv6/solution_0.py\", line 20, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n\n\nPseudocode for Problem 2:\nFUNCTION tri WITH PARAMETER n\n    IF n EQUALS 0\n        RETURN LIST WITH ELEMENT 1\n    SET my_tri TO LIST WITH ELEMENTS 1 AND 3\n    FOR i FROM 2 TO n PLUS 1\n        IF i MODULO 2 EQUALS 0\n            APPEND i DIVIDE BY 2 PLUS 1 TO my_tri\n        ELSE\n            APPEND my_tri AT i MINUS 1 PLUS my_tri AT i MINUS 2 PLUS i PLUS 3 DIVIDE BY 2 TO my_tri\n    RETURN my_tri\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpv9j5ogua/solution_0.py\", line 14, in <module>\\n    check(tri)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpv9j5ogua/solution_0.py\", line 13, in check\\n    assert candidate(3) == [1, 3, 2.0, 8.0]\\nAssertionError\\n']\n\nOriginal Code for Problem 3:\n    return x + y\n\n\nPseudocode for Problem 3:\nFUNCTION add(x INTEGER, y INTEGER)\n    RETURN x PLUS y\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp2v14weya/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp2v14weya/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\nPseudocode for Problem 4:\nFUNCTION rounded_avg(n, m)\n    IF m LESS THAN n\n        RETURN -1\n    SET summation TO 0\n    FOR i IN RANGE FROM n TO m PLUS 1\n        SET summation TO summation PLUS i\n    SET average TO summation DIVIDE BY (m MINUS n PLUS 1)\n    SET rounded_average TO ROUND average\n    SET binary_string TO CONVERT rounded_average TO BINARY STRING\n    RETURN binary_string\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjfr8u8s8/solution_0.py\", line 14, in <module>\\n    check(rounded_avg)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjfr8u8s8/solution_0.py\", line 13, in check\\n    assert candidate(1, 5) == \"0b11\"\\nAssertionError\\n']\n\nOriginal Code for Problem 5:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 5:\nFUNCTION poly WITH PARAMETERS xs AND x\n    RETURN SUM OF EACH coeff MULTIPLY BY math.pow OF x TO THE POWER OF i FOR EACH i AND coeff IN ENUMERATE OF xs\n\nFUNCTION find_zero WITH PARAMETER xs\n    SET begin TO NEGATIVE 1.0\n    SET end TO 1.0\n    WHILE poly OF xs AND begin MULTIPLY BY poly OF xs AND end IS GREATER THAN 0\n        SET begin TO begin MULTIPLY BY 2.0\n        SET end TO end MULTIPLY BY 2.0\n    WHILE end MINUS begin IS GREATER THAN 0.0000000001\n        SET center TO begin PLUS end DIVIDED BY 2.0\n        IF poly OF xs AND center MULTIPLY BY poly OF xs AND begin IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n    RETURN begin\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp3v3nvuyc/solution_0.py\", line 23, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp3v3nvuyc/solution_0.py\", line 21, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 6:\nFUNCTION encode_shift WITH PARAMETER s\n    RETURN JOIN ALL ELEMENTS OF LIST WHERE EACH ELEMENT IS CHARACTER WITH ASCII CODE EQUAL TO MODULO OF (ASCII CODE OF ch PLUS 5 MINUS ASCII CODE OF \"a\") BY 26 PLUS ASCII CODE OF \"a\" FOR EACH ch IN s\n\nFUNCTION decode_shift WITH PARAMETER s\n    RETURN JOIN ALL ELEMENTS OF LIST WHERE EACH ELEMENT IS CHARACTER WITH ASCII CODE EQUAL TO MODULO OF (ASCII CODE OF ch MINUS 5 MINUS ASCII CODE OF \"a\") BY 26 PLUS ASCII CODE OF \"a\" FOR EACH ch IN s\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmps6e4aj_a/solution_0.py\", line 10, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmps6e4aj_a/solution_0.py\", line 8, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 7:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 7:\nFUNCTION change_base(x INTEGER, base INTEGER)\n    SET ret TO empty string\n    WHILE x GREATER THAN 0\n        SET ret TO string representation of (x MODULO base) CONCATENATE ret\n        SET x TO x DIVIDED BY base USING INTEGER DIVISION\n    RETURN ret\n\nError(s) from the decoded code for Problem 7:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxf_lknis/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 8:\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\n\nPseudocode for Problem 8:\nFUNCTION prime_fib(n)\n    FUNCTION is_prime(p)\n        IF p LESS THAN 2\n            RETURN False\n        FOR k IN RANGE FROM 2 TO MINIMUM OF (INTEGER PART OF SQUARE ROOT OF p PLUS 1) AND p MINUS 1\n            IF p MODULO k EQUALS 0\n                RETURN False\n        RETURN True\n    SET f TO LIST CONTAINING 0 AND 1\n    WHILE True\n        APPEND TO f THE SUM OF LAST ELEMENT OF f AND SECOND TO LAST ELEMENT OF f\n        IF CALL is_prime WITH ARGUMENT LAST ELEMENT OF f\n            SET n TO n MINUS 1\n        IF n EQUALS 0\n            RETURN LAST ELEMENT OF f\nScore of (4*(Average word length) + passing rate) for ALL the problems: 2.40982341148447"
}