Convert the provided source code into clear, concise, and high-level pseudocode that precisely preserves all original function and class names, including their exact parameter lists, hierarchies, and nesting structures. Use only full uppercase keywords such as FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, PREPEND, CONCATENATE, CALL, BREAK, CONTINUE, and similar—avoid any symbols, abbreviations, shorthand, or punctuation except where strictly necessary for clarity (e.g., parentheses in parameter lists).

Express all arithmetic and logical operations in natural language terms (PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, AND, OR, NOT, LESS THAN, EQUALS, etc.) while preserving all identifiers, literals, and string contents exactly as in the original code. Preserve list and dictionary indexing and slicing semantics with explicit natural language phrases (e.g., “ELEMENT AT INDEX”, “SUBLIST FROM INDEX TO INDEX”).

Represent all control flow and block scoping exclusively through consistent indentation; do not introduce any extra formatting, delimiters, blank lines, comments, or metadata. Maintain one-to-one correspondence between pseudocode statements and original code statements without merging or splitting logical units, but abstract away low-level syntax details to maximize readability and natural language clarity.

Explicitly declare all variables upon first assignment with a SET statement including their full name and assigned value in natural language. For function parameters and return values, preserve their names and structure verbatim, and indicate types only when explicitly defined in the source code.

When expressing loops and iterations, specify iteration ranges or collections precisely and naturally (e.g., “FOR each element IN list” or “FOR index FROM x TO y INCLUSIVE.”) Use natural language constructs for complex expressions, avoiding operator symbols.

Do not include any placeholders for missing variables or imports—assume all used identifiers are defined or imported in the same scope in original code and reproduce faithfully so the pseudocode can be deterministically translated back without ambiguity or loss of meaning.

Do not include include explanations, annotations, commentary, examples, or notes—output strictly the pseudocode text and nothing else. Ensure your output is purely pseudocode that meets all these criteria and can unambiguly regenerate the original source code structure and logic.