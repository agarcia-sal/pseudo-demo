Convert the given source code into concise, abstract, and high-level pseudocode that accurately and fully preserves all original function and class names, parameters, and hierarchical nesting with ownership. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) for control flow and operations. Express all arithmetic, logical, and comparison operators entirely in natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT), avoiding symbols or abbreviations. Preserve exact original identifiers, literals, values, and types or annotations if present. Represent data structures and expressions abstractly but literally, strictly avoiding language-specific or shorthand syntax such as comprehensions; expand them into explicit loops or statements. Represent method and function calls explicitly as CALL function WITH ARGUMENTS..., specifying target objects clearly when applicable. Use consistent indentation exclusively to indicate block structures; do not add extra blank lines, comments, or separators. Prefer descriptive, explicit forms for collections and sequences (e.g., LIST WITH ELEMENTS EMPTY, RANGE FROM X TO Y). Abstract each pseudocode statement to correspond to exactly one atomic original statement or logically indivisible operation, ensuring zero semantic loss or ambiguity and allowing unambiguous reconstruction of the original code. Always use explicit numeric literals as numerals. Use explicit indexing in loops; do not rely on implicit iteration or indexing shortcuts. Include RETURNS clauses on all functions when original code returns values. Do not output any explanation, commentary, or metadataâ€”output only the pseudocode text.