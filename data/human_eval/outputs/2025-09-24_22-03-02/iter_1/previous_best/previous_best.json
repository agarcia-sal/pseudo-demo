{
  "prompt": "Convert the given problem description into concise, high-level pseudocode that is easy to read and understand. Use natural language with symbolic representations and abbreviations. Write compact pseudocode focusing on the core logic using mostly one-liners. Avoid providing any purpose, summary, overview, notes, comments, or explanations. Output only the pseudocode.",
  "response": "Convert the given problem description into concise, high-level pseudocode that is easy to read and understand. Use natural language with symbolic representations and abbreviations. Write compact pseudocode focusing on the core logic using mostly one-liners. Avoid providing any purpose, summary, overview, notes, comments, or explanations. Output only the pseudocode.",
  "score": 1.9251089852003873,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n\n\nPseudocode for Problem 1:\n```\nif \" \" in txt:\n    return txt.split()\nelif \",\" in txt:\n    return txt.replace(\",\", \" \").split()\nelse:\n    return count of chars c in txt where c is lowercase and ord(c) mod 2 = 0\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzagfol48/solution_0.py\", line 11, in <module>\\n    check(split_words)\\nNameError: name \\'split_words\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n\n\nPseudocode for Problem 2:\n```\nsort numbers -> sorted_nums\nset min_diff = abs(sorted_nums[1] - sorted_nums[0]), pair = (sorted_nums[0], sorted_nums[1])\nfor i in 1 to len(sorted_nums)-1:\n    diff = abs(sorted_nums[i] - sorted_nums[i-1])\n    if diff < min_diff:\n        min_diff = diff\n        pair = (sorted_nums[i-1], sorted_nums[i])\nreturn pair\n```\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp0v30_qzt/solution_0.py\", line 14, in <module>\\n    check(find_closest_elements)\\nNameError: name \\'find_closest_elements\\' is not defined\\n']\n\nOriginal Code for Problem 3:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nPseudocode for Problem 3:\n```\nFor i in 0 to len(l)-3:\n  For j in i+1 to len(l)-2:\n    For k in j+1 to len(l)-1:\n      If l[i] + l[j] + l[k] = 0: Return True\nReturn False\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpcdhrogeu/solution_0.py\", line 11, in <module>\\n    check(triples_sum_to_zero)\\nNameError: name \\'triples_sum_to_zero\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 4:\n```\nencode_cyclic(s):\n  split s into groups of 3 chars: G = [s[3*i : 3*i+3] for i in 0..len(s)//3]\n  rotate each group by 1 if length 3: G = [g[1:] + g[0] if len(g)==3 else g for g in G]\n  return concatenation of G\n\ndecode_cyclic(s):\n  return encode_cyclic(encode_cyclic(s))\n```\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpccdtw9ih/solution_0.py\", line 12, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpccdtw9ih/solution_0.py\", line 10, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 5:\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n\n\nPseudocode for Problem 5:\n```\nisPrime(n) = n > 1 and no i in [2..\u221an] divides n\nmaxPrime = max(x for x in lst if isPrime(x), default=0)\nreturn sum(digits of maxPrime)\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpk5tz02_u/solution_0.py\", line 20, in <module>\\n    check(skjkasdkd)\\nNameError: name \\'skjkasdkd\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\n\nPseudocode for Problem 6:\n```\nfreq = count_occurrences(numbers)\nreturn [n for n in numbers if freq[n] <= 1]\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxq2zte42/solution_0.py\", line 9, in <module>\\n    check(remove_duplicates)\\nNameError: name \\'remove_duplicates\\' is not defined\\n']\n\nOriginal Code for Problem 7:\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\nPseudocode for Problem 7:\n```\nfrq \u2190 array of zeros size max(lst)+1\nfor i in lst: frq[i] += 1\nans \u2190 -1\nfor i in 1 to length(frq)-1: if frq[i] \u2265 i then ans \u2190 i\nreturn ans\n```\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp9h41x5jg/solution_0.py\", line 13, in <module>\\n    check(search)\\nNameError: name \\'search\\' is not defined\\n']\n\nOriginal Code for Problem 8:\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n\n\nPseudocode for Problem 8:\n```\ndic \u2190 {1:\"One\",2:\"Two\",3:\"Three\",4:\"Four\",5:\"Five\",6:\"Six\",7:\"Seven\",8:\"Eight\",9:\"Nine\"}\nfiltered \u2190 filter x in arr where 1 \u2264 x \u2264 9\nsorted_arr \u2190 sort filtered ascending\nreversed_arr \u2190 reverse sorted_arr\nreturn map x in reversed_arr to dic[x]\n```\n\nError(s) from the decoded code for Problem 8:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpwhzm7mmx/solution_0.py\", line 10, in <module>\\n    check(by_length)\\nNameError: name \\'by_length\\' is not defined\\n']\nScore of (4*(Average word length) + passing rate) for ALL the problems: 1.9251089852003873"
}