Convert the given source code into clear, concise, and abstract high-level pseudocode that faithfully preserves all original function and class names, parameters, and their full hierarchical nesting and ownership. Maintain exact identifier names, literals, and types if present. Use uppercase keywords only (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to represent control flow and operations. Express all operators exclusively in full natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT), never symbols or abbreviations.

Avoid language-specific syntax, idioms, or shortcuts such as comprehensions or inline expressions. Instead, represent all control flow explicitly with loops and conditionals and expand all compound operations into atomic steps. Use explicit indexing when accessing sequences or collections, always specifying indices clearly. Represent collections and sequences in descriptive literal forms (e.g., LIST WITH ELEMENTS EMPTY, RANGE FROM zero TO n MINUS ONE). Show function and method calls explicitly as "CALL function WITH ARGUMENTS ..." or "CALL method ON object WITH ARGUMENTS ...", clearly specifying targets and arguments in natural language. Use consistent indentation to denote blocks and scopes and do not include blank lines, comments, separators, or any text other than the pseudocode itself. Each pseudocode line must correspond to exactly one atomic original statement or logically indivisible operation, ensuring perfect semantic fidelity with zero ambiguity or loss.

Always use numeric literals as numerals. The output should be solely the pseudocode text with no explanation or additional content.