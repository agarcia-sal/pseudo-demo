{
  "prompt": "Convert the given source code into unambiguous, high-level pseudocode that preserves all original function and class names, including their exact parameters, hierarchical nesting, and ownership within classes or objects. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL) to represent control flow and operations. Express arithmetic and logical operations entirely in natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, LESS THAN, GREATER THAN) without symbols or abbreviations. Preserve all identifiers, literals, and values exactly as in the original code including types or annotations. Capture expressions and data constructs in a clear literal or descriptive form, avoiding implementation details or syntax-specific constructs. Represent block structure and scope strictly through consistent indentation without adding extraneous blank lines, comments, delimiters, or formatting characters. For sequences or collections, use explicit expressions such as LIST WITH ELEMENTS or RANGE FROM ... TO ... to enhance clarity. Use natural language phrases for method calls or function invocations (e.g., CALL function WITH ARGUMENTS...) and describe comprehensions or inline transformations by expanding to explicit loops or steps. Abstract only when each line corresponds to a single, deterministic original statement or logically indivisible operation, ensuring no loss of semantic detail or program intent. Do not include any explanations, annotations, comments, metadata, or any output beyond the pseudocode text itself. The output pseudocode must be fully sufficient to faithfully reconstruct the original code with no ambiguity or loss of meaning.",
  "response": "Convert the given source code into unambiguous, high-level pseudocode that preserves all original function and class names, including their exact parameters, hierarchical nesting, and ownership within classes or objects. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL) to represent control flow and operations. Express arithmetic and logical operations entirely in natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, LESS THAN, GREATER THAN) without symbols or abbreviations. Preserve all identifiers, literals, and values exactly as in the original code including types or annotations. Capture expressions and data constructs in a clear literal or descriptive form, avoiding implementation details or syntax-specific constructs. Represent block structure and scope strictly through consistent indentation without adding extraneous blank lines, comments, delimiters, or formatting characters. For sequences or collections, use explicit expressions such as LIST WITH ELEMENTS or RANGE FROM ... TO ... to enhance clarity. Use natural language phrases for method calls or function invocations (e.g., CALL function WITH ARGUMENTS...) and describe comprehensions or inline transformations by expanding to explicit loops or steps. Abstract only when each line corresponds to a single, deterministic original statement or logically indivisible operation, ensuring no loss of semantic detail or program intent. Do not include any explanations, annotations, comments, metadata, or any output beyond the pseudocode text itself. The output pseudocode must be fully sufficient to faithfully reconstruct the original code with no ambiguity or loss of meaning.",
  "score": 2.529495453414124,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return x + y\n\n\nPseudocode for Problem 1:\nFUNCTION add(x INTEGER, y INTEGER)\n    RETURN x PLUS y\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpliqgemww/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpliqgemww/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 2:\nFUNCTION encode_cyclic(s: str)\n    SET groups TO EMPTY LIST\n    SET total_groups TO (CALL length OF s PLUS 2) DIVIDE BY 3\n    FOR i IN RANGE FROM 0 TO total_groups MINUS 1\n        SET start_index TO 3 MULTIPLY i\n        SET end_index TO THE MINIMUM OF (3 MULTIPLY i PLUS 3) AND CALL length OF s\n        SET group TO SUBSTRING OF s FROM start_index TO end_index\n        APPEND group TO groups\n    END FOR\n    SET cycled_groups TO EMPTY LIST\n    FOR EACH group IN groups\n        IF CALL length OF group EQUALS 3 THEN\n            SET cycled_group TO CONCATENATE SUBSTRING OF group FROM 1 TO 3 PLUS SUBSTRING OF group FROM 0 TO 1\n            APPEND cycled_group TO cycled_groups\n        ELSE\n            APPEND group TO cycled_groups\n        END IF\n    END FOR\n    SET result TO EMPTY STRING\n    FOR EACH element IN cycled_groups\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpl_bb3gr7/solution_0.py\", line 29, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpl_bb3gr7/solution_0.py\", line 27, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 3:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 3:\nFUNCTION poly(xs: LIST, x: FLOAT)\n    RETURN SUM OF\n        SET result TO 0\n        FOR i FROM 0 TO LENGTH OF xs MINUS 1\n            SET coeff TO ELEMENT AT INDEX i IN xs\n            SET power TO CALL math.pow WITH ARGUMENTS x AND i\n            INCREMENT result BY coeff MULTIPLY power\n        END FOR\n        RETURN result\nEND FUNCTION\n\nFUNCTION find_zero(xs: LIST)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE CALL poly WITH ARGUMENTS xs AND begin MULTIPLY CALL poly WITH ARGUMENTS xs AND end GREATER THAN 0\n        SET begin TO begin MULTIPLY 2.0\n        SET end TO end MULTIPLY 2.0\n    END WHILE\n    WHILE end MINUS begin GREATER THAN 0.0000000001\n        SET center TO begin PLUS end DIVIDE BY 2.0\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpe5hwyr33/solution_0.py\", line 29, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpe5hwyr33/solution_0.py\", line 27, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n\nPseudocode for Problem 4:\nFUNCTION pluck(arr)\n    IF LENGTH OF arr EQUALS 0 THEN\n        RETURN LIST WITH ELEMENTS EMPTY\n    END IF\n    SET evens TO EMPTY LIST\n    FOR EACH element IN arr DO\n        IF element MODULO 2 EQUALS 0 THEN\n            APPEND element TO evens\n        END IF\n    END FOR\n    IF LENGTH OF evens EQUALS 0 THEN\n        RETURN LIST WITH ELEMENTS EMPTY\n    END IF\n    SET smallest_even TO THE MINIMUM ELEMENT IN evens\n    SET smallest_index TO THE INDEX OF smallest_even IN arr\n    RETURN LIST WITH ELEMENTS smallest_even AND smallest_index\nEND FUNCTION\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpgvb9nah9/solution_1.py\", line 13, in <module>\\n    check(pluck)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpgvb9nah9/solution_1.py\", line 12, in check\\n    assert candidate([]) == [], \"Error\"\\nAssertionError: Error\\n']\n\nOriginal Code for Problem 5:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 5:\nFUNCTION encode_shift WITH PARAMETER s OF TYPE str\n    SET encoded_characters TO EMPTY LIST\n    FOR EACH ch IN s\n        SET shifted_value TO ((CALL ord WITH ARGUMENT ch) PLUS 5 MINUS CALL ord WITH ARGUMENT \"a\") MODULO 26 PLUS CALL ord WITH ARGUMENT \"a\"\n        SET encoded_character TO CALL chr WITH ARGUMENT shifted_value\n        APPEND encoded_character TO encoded_characters\n    END FOR\n    SET encoded_string TO CONCATENATION OF ALL ELEMENTS IN encoded_characters WITHOUT SEPARATOR\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_shift WITH PARAMETER s OF TYPE str\n    SET decoded_characters TO EMPTY LIST\n    FOR EACH ch IN s\n        SET shifted_value TO ((CALL ord WITH ARGUMENT ch) MINUS 5 MINUS CALL ord WITH ARGUMENT \"a\") MODULO 26 PLUS CALL ord WITH ARGUMENT \"a\"\n        SET decoded_character TO CALL chr WITH ARGUMENT shifted_value\n        APPEND decoded_character TO decoded_characters\n    END FOR\n    SET decoded_string TO CONCATENATION OF ALL ELEMENTS IN decoded_characters WITHOUT SEPARATOR\n    RETURN decoded_string\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpyjpsxxyp/solution_0.py\", line 22, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpyjpsxxyp/solution_0.py\", line 20, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 6:\nFUNCTION change_base(x INTEGER, base INTEGER)\n    SET ret TO EMPTY STRING\n    WHILE x GREATER THAN 0\n        SET ret TO STRING REPRESENTATION OF (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    RETURN ret\n\nError(s) from the decoded code for Problem 6:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpkzg2uda_/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 7:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n\n\nPseudocode for Problem 7:\nFUNCTION remove_duplicates(numbers: LIST OF INTEGER) RETURNS LIST OF INTEGER\n    IMPORT collections\n    SET c TO CALL collections.Counter WITH ARGUMENT numbers\n    SET result TO EMPTY LIST\n    FOR EACH n IN numbers\n        IF CALL c.__getitem__ WITH ARGUMENT n LESS THAN OR EQUAL TO 1\n            APPEND n TO result\n    RETURN result\n\nOriginal Code for Problem 8:\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n\n\nPseudocode for Problem 8:\nFUNCTION count_up_to(n)\n    SET primes TO LIST WITH ELEMENTS EMPTY\n    FOR i IN RANGE FROM 2 TO n MINUS 1\n        SET is_prime TO TRUE\n        FOR j IN RANGE FROM 2 TO i MINUS 1\n            IF i MODULO j EQUALS 0\n                SET is_prime TO FALSE\n                BREAK\n            END IF\n        END FOR\n        IF is_prime\n            APPEND i TO primes\n        END IF\n    END FOR\n    RETURN primes\nEND FUNCTION\nScore of (4*(Average word length) + passing rate) for ALL the problems: 2.529495453414124"
}