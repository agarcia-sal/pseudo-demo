Convert the given source code into concise, high-level pseudocode that strictly preserves all original function and class names with exact parameters, including their hierarchical nesting and ownership within classes or objects. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, IMPORT, BREAK) to express control flow and operations. Represent all arithmetic, logical, and comparison operators fully in natural language words without symbols or abbreviations (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUALS, LESS THAN, GREATER THAN, LESS THAN OR EQUAL TO, GREATER THAN OR EQUAL TO, AND, OR, NOT). Preserve all identifiers, literals, values, and type annotations from the original code verbatim.

Render all expressions in a clear, literal, or descriptive form abstracted from language-specific syntax but without losing any semantic content or program intent. Represent method calls and function invocations explicitly as natural language phrases (e.g., CALL function_name WITH ARGUMENTS ...). Expand comprehensions, inline expressions, or compound statements into explicit loops or simple steps.

Structure code blocks and scope exclusively through consistent indentation; do not add extra blank lines, comments, delimiters, or formatting characters. For sequences or collections, explicitly use descriptive phrases such as LIST WITH ELEMENTS ..., RANGE FROM ... TO ..., DICTIONARY WITH KEY-VALUE PAIRS ..., or SET WITH ELEMENTS ..., to maximize clarity. Use singular form for loop variables and natural naming consistent with the original identifiers.

Only abstract when each pseudocode line corresponds precisely to exactly one deterministic primitive statement or logically indivisible operation from the original. The output pseudocode must be fully sufficient to reconstruct the original code without ambiguity or loss of meaning.

Produce no explanation, notes, or commentary in the outputâ€”only the requested pseudocode exactly as specified.

Example style:

If the original code is

```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

then the output pseudocode should be exactly:

```
FUNCTION calc_average(nums)
    SET total TO 0
    FOR EACH num IN nums
        INCREMENT total BY num
    SET avg TO total DIVIDED BY LENGTH OF nums
    RETURN avg
END FUNCTION
```