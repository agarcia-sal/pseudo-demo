{
  "prompt": "Convert the given code into high-level, clear pseudocode that retains all original function names, class names, and their hierarchical structures exactly as in the source code. Use only full words\u2014such as FUNCTION, RETURN, FOR, WHILE, IF, ELSE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE\u2014to express all logic and operations; avoid symbols, abbreviations, or terse shorthand expressions. Represent control flow and nesting through consistent indentation to reflect code blocks and scope precisely. Use natural language for expressions and operations that balances conciseness with readability, ensuring the pseudocode can be directly and unambiguously mapped back to executable code without adding extra explanations, comments, notes, or summaries. Output strictly the pseudocode corresponding to the input code, no additional text or formatting.",
  "response": "Convert the given code into high-level, clear pseudocode that retains all original function names, class names, and their hierarchical structures exactly as in the source code. Use only full words\u2014such as FUNCTION, RETURN, FOR, WHILE, IF, ELSE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE\u2014to express all logic and operations; avoid symbols, abbreviations, or terse shorthand expressions. Represent control flow and nesting through consistent indentation to reflect code blocks and scope precisely. Use natural language for expressions and operations that balances conciseness with readability, ensuring the pseudocode can be directly and unambiguously mapped back to executable code without adding extra explanations, comments, notes, or summaries. Output strictly the pseudocode corresponding to the input code, no additional text or formatting.",
  "score": 2.2430136292070837,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return x + y\n\n\nPseudocode for Problem 1:\nFUNCTION add(x as integer, y as integer)\n    RETURN x plus y\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp613pu7hx/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp613pu7hx/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 2:\nFUNCTION encode_shift(input_string)\n    RETURN concatenation of\n        FOR EACH character IN input_string\n            SET shifted_character_code TO ((ASCII code of character PLUS 5 MINUS ASCII code of \"a\") MODULO 26) PLUS ASCII code of \"a\"\n            CONVERT shifted_character_code TO character\n\nFUNCTION decode_shift(input_string)\n    RETURN concatenation of\n        FOR EACH character IN input_string\n            SET shifted_character_code TO ((ASCII code of character MINUS 5 MINUS ASCII code of \"a\") MODULO 26) PLUS ASCII code of \"a\"\n            CONVERT shifted_character_code TO character\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpddxms9cl/solution_0.py\", line 10, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpddxms9cl/solution_0.py\", line 8, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 3:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 3:\nFUNCTION poly(xs AS list, x AS float)\n    RETURN sum of (coeff MULTIPLY math.pow(x, i)) FOR EACH i, coeff IN enumerate(xs)\n\nFUNCTION find_zero(xs AS list)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(xs, begin) MULTIPLY poly(xs, end) GREATER THAN 0\n        SET begin TO begin MULTIPLY 2.0\n        SET end TO end MULTIPLY 2.0\n    WHILE end MINUS begin GREATER THAN 0.0000000001\n        SET center TO (begin PLUS end) DIVIDE 2.0\n        IF poly(xs, center) MULTIPLY poly(xs, begin) GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n    RETURN begin\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp61c6_c1x/solution_0.py\", line 23, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp61c6_c1x/solution_0.py\", line 21, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 4:\nFUNCTION change_base(x AS INTEGER, base AS INTEGER)\n    SET ret TO empty string\n    WHILE x is greater than zero\n        SET ret TO string of (x mod base) CONCATENATE ret\n        SET x TO x divided by base using integer division\n    RETURN ret\n\nError(s) from the decoded code for Problem 4:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpgt6v830a/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 5:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 5:\nFUNCTION encode_cyclic(s)\n    SET groups TO EMPTY LIST\n    FOR i FROM 0 TO INTEGER_DIVISION_OF (LENGTH OF s PLUS 2) BY 3 MINUS 1\n        SET start_index TO 3 MULTIPLIED BY i\n        SET end_index TO MINIMUM OF (3 MULTIPLIED BY i PLUS 3) AND LENGTH OF s\n        APPEND SUBSTRING OF s FROM start_index TO end_index TO groups\n    END FOR\n    SET cycled_groups TO EMPTY LIST\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3 THEN\n            APPEND CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END WITH FIRST CHARACTER OF group TO cycled_groups\n        ELSE\n            APPEND group TO cycled_groups\n        END IF\n    END FOR\n    RETURN CONCATENATION OF ALL ELEMENTS IN cycled_groups\n\nFUNCTION decode_cyclic(s)\n    RETURN encode_cyclic(encode_cyclic(s))\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpqe7w6be6/solution_0.py\", line 21, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpqe7w6be6/solution_0.py\", line 19, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\nPseudocode for Problem 6:\nFUNCTION rounded_avg WITH PARAMETERS n, m\n    IF m IS LESS THAN n THEN\n        RETURN -1\n    END IF\n    SET summation TO 0\n    FOR i FROM n TO m INCLUSIVE DO\n        INCREMENT summation BY i\n    END FOR\n    SET average TO summation DIVIDED BY (m MINUS n PLUS 1)\n    SET rounded_average TO ROUND average TO THE NEAREST INTEGER\n    SET binary_result TO CONVERT rounded_average TO BINARY STRING\n    RETURN binary_result\nEND FUNCTION\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprbn4vye4/solution_0.py\", line 12, in <module>\\n    check(rounded_avg)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprbn4vye4/solution_0.py\", line 11, in check\\n    assert candidate(1, 5) == \"0b11\"\\nAssertionError\\n']\n\nOriginal Code for Problem 7:\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n\n\nPseudocode for Problem 7:\nFUNCTION solution(lst)\n    SET total TO 0\n    FOR index IN RANGE FROM 0 TO LENGTH OF lst MINUS 1\n        SET element TO lst AT position index\n        IF index MODULO 2 EQUALS 0 AND element MODULO 2 EQUALS 1\n            INCREMENT total BY element\n    RETURN total\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp03hy8vox/solution_1.py\", line 11, in <module>\\n    check(solution)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp03hy8vox/solution_1.py\", line 10, in check\\n    assert candidate([3, 3, 3, 3, 3]) == 9\\nAssertionError\\n']\n\nOriginal Code for Problem 8:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nPseudocode for Problem 8:\nFUNCTION fib(n)\n    IF n EQUALS 0\n        RETURN 0\n    IF n EQUALS 1\n        RETURN 1\n    RETURN fib(n MINUS 1) PLUS fib(n MINUS 2)\nScore of (4*(Average word length) + passing rate) for ALL the problems: 2.2430136292070837"
}