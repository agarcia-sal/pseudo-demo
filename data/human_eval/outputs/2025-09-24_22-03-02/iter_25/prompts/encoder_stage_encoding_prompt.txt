Convert the given source code into clear, structured, and high-level pseudocode that precisely preserves all original function and class names with exact parameters, including correct hierarchical class and object nesting and ownership. Use uppercase keywords only (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to indicate control structures and operations. Represent all arithmetic, logical, and comparison operators fully in natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT) without symbols or abbreviations. Preserve all identifiers, literals, and values exactly as in the source, including types and annotations.

Expand all implicit operations—such as comprehensions, slices, or inline expressions—into explicit, step-by-step loops or statements; never use language-specific shortcuts or implicit indexing. Use explicit indexing with clear numeric indices in loops—do not rely on implicit iteration variables. Express sequences and collections explicitly—for example, "LIST WITH ELEMENTS EMPTY" or "RANGE FROM X TO Y." Show function and method calls clearly in the form: CALL function_name WITH ARGUMENTS... and specify the target object when applicable.

Indent consistently using spaces or tabs only for defining code blocks and scopes; omit blank lines, comments, and separators entirely. Each pseudocode line should correspond to exactly one atomic statement or logically indivisible operation from the original source, ensuring full semantic equivalence and unambiguity for reconstructing the original code.

Do not include any explanations, comments, summaries, or metadata. Output only the pseudocode text.