FUNCTION sort_numbers(numbers : str) RETURNS str
    SET value_map TO DICTIONARY WITH KEYS AND VALUES:
        'zero' EQUALS 0,
        'one' EQUALS 1,
        'two' EQUALS 2,
        'three' EQUALS 3,
        'four' EQUALS 4,
        'five' EQUALS 5,
        'six' EQUALS 6,
        'seven' EQUALS 7,
        'eight' EQUALS 8,
        'nine' EQUALS 9

    SET split_numbers TO LIST WITH ELEMENTS EMPTY
    SET temp_split TO CALL numbers.split WITH ARGUMENT ' '
    FOR index FROM 0 TO LENGTH OF temp_split MINUS 1
        IF temp_split[index] NOT EQUAL TO EMPTY STRING
            APPEND temp_split[index] TO split_numbers

    SET sorted_numbers TO LIST WITH ELEMENTS EMPTY
    WHILE LENGTH OF split_numbers GREATER THAN 0
        SET min_index TO 0
        FOR i FROM 1 TO LENGTH OF split_numbers MINUS 1
            IF value_map[split_numbers[i]] LESS THAN value_map[split_numbers[min_index]]
                SET min_index TO i
        APPEND split_numbers[min_index] TO sorted_numbers
        REMOVE ELEMENT AT min_index FROM split_numbers

    SET result TO EMPTY STRING
    FOR i FROM 0 TO LENGTH OF sorted_numbers MINUS 1
        IF i EQUALS 0
            SET result TO sorted_numbers[i]
        ELSE
            SET result TO result CONCATENATE ' ' CONCATENATE sorted_numbers[i]

    RETURN result