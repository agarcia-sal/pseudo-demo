{
  "prompt": "Translate the given pseudocode into Python code, preserving all function and class names, as well as their parameters and return types exactly as specified. Maintain any class and object structures faithfully. Your code must be efficient, clear, and concise, using Pythonic constructs where appropriate. You may import and use any standard Python libraries to enhance correctness and performance. \n\nDo not include any extraneous text, explanations, or comments. Do not alter function or class signatures unless explicitly stated in the pseudocode. Ensure the code runs within 5 seconds for typical inputs.\n\nEnclose all your code inside a single Python code block formatted exactly like this:\n\n```python\n# Your translated code here\n```\n\nOnly provide the Python code inside this block\u2014nothing else.",
  "response": "Translate the given pseudocode into Python code, preserving all function and class names, as well as their parameters and return types exactly as specified. Maintain any class and object structures faithfully. Your code must be efficient, clear, and concise, using Pythonic constructs where appropriate. You may import and use any standard Python libraries to enhance correctness and performance. \n\nDo not include any extraneous text, explanations, or comments. Do not alter function or class signatures unless explicitly stated in the pseudocode. Ensure the code runs within 5 seconds for typical inputs.\n\nEnclose all your code inside a single Python code block formatted exactly like this:\n\n```python\n# Your translated code here\n```\n\nOnly provide the Python code inside this block\u2014nothing else.",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\nFUNCTION add(x AS INTEGER, y AS INTEGER)\n    RETURN x PLUS y\nEND FUNCTION\n\nDecoded code for Problem 1:\ndef add(x: int, y: int) -> int:\n    return x + y\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxo9pd7lc/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxo9pd7lc/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 2:\nFUNCTION poly(xs AS list, x AS float)\n    RETURN SUM OF (coefficient MULTIPLIED BY POWER(x, index)) FOR EACH (index, coefficient) IN ENUMERATE(xs)\nEND FUNCTION\n\nFUNCTION find_zero(xs AS list)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(xs, begin) MULTIPLIED BY poly(xs, end) IS GREATER THAN 0\n        SET begin TO begin MULTIPLIED BY 2.0\n        SET end TO end MULTIPLIED BY 2.0\n    END WHILE\n    WHILE end MINUS begin IS GREATER THAN 0.0000000001\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n        IF poly(xs, center) MULTIPLIED BY poly(xs, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n        END IF\n    END WHILE\n    RETURN begin\n\nDecoded code for Problem 2:\ndef poly(xs: list, x: float) -> float:\n    return sum(coef * (x ** idx) for idx, coef in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxq1gu2k/solution_0.py\", line 20, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxq1gu2k/solution_0.py\", line 18, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 3:\nFUNCTION encode_shift WITH PARAMETER s AS STRING\n    SET result TO EMPTY STRING\n    FOR EACH ch IN s\n        SET shifted_code TO ((ASCII VALUE OF ch PLUS 5 MINUS ASCII VALUE OF \"a\") MODULO 26) PLUS ASCII VALUE OF \"a\"\n        SET result TO result CONCATENATED WITH CHARACTER REPRESENTED BY shifted_code\n    END FOR\n    RETURN result\nEND FUNCTION\n\nFUNCTION decode_shift WITH PARAMETER s AS STRING\n    SET result TO EMPTY STRING\n    FOR EACH ch IN s\n        SET shifted_code TO ((ASCII VALUE OF ch MINUS 5 MINUS ASCII VALUE OF \"a\") MODULO 26) PLUS ASCII VALUE OF \"a\"\n        SET result TO result CONCATENATED WITH CHARACTER REPRESENTED BY shifted_code\n    END FOR\n    RETURN result\nEND FUNCTION\n\nDecoded code for Problem 3:\ndef encode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted_code = ((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")\n        result += chr(shifted_code)\n    return result\n\ndef decode_shift(s: str) -> str:\n    result = \"\"\n    for ch in s:\n        shifted_code = ((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")\n        result += chr(shifted_code)\n    return result\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmptja4w_vz/solution_0.py\", line 18, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmptja4w_vz/solution_0.py\", line 16, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 4:\nFUNCTION encode_cyclic(INPUT s AS STRING) RETURNS STRING\n    SET groups TO EMPTY LIST\n    FOR i FROM 0 TO (LENGTH OF s PLUS 2) DIVIDED BY 3 MINUS 1\n        SET start_index TO 3 MULTIPLIED BY i\n        SET end_index TO MINIMUM OF (start_index PLUS 3) AND LENGTH OF s\n        APPEND SUBSTRING OF s FROM start_index TO end_index TO groups\n    END FOR\n\n    SET cycled_groups TO EMPTY LIST\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3 THEN\n            APPEND CONCATENATION OF SUBSTRING OF group FROM 1 TO END AND FIRST CHARACTER OF group TO cycled_groups\n        ELSE\n            APPEND group TO cycled_groups\n        END IF\n    END FOR\n\n    RETURN CONCATENATION OF ALL STRINGS IN cycled_groups\nEND FUNCTION\n\n\nDecoded code for Problem 4:\ndef encode_cyclic(s: str) -> str:\n    groups = [s[i*3 : min(i*3 + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    cycled_groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]\n    return ''.join(cycled_groups)\n\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpidr87kve/solution_0.py\", line 12, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpidr87kve/solution_0.py\", line 10, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 5:\nFUNCTION change_base(x AS INTEGER, base AS INTEGER) RETURNS STRING\n    SET ret TO empty string\n    WHILE x GREATER THAN 0 DO\n        SET ret TO STRING(x MODULO base) CONCATENATED WITH ret\n        SET x TO x DIVIDED BY base (integer division)\n    END WHILE\n    RETURN ret\nEND FUNCTION\n\nDecoded code for Problem 5:\ndef change_base(x: int, base: int) -> str:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nError(s) from the decoded code for Problem 5:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpqlm_gdi2/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 6:\nFUNCTION valid_date(date)\n    TRY\n        SET date TO date with leading and trailing whitespace removed\n        SPLIT date by '-' INTO month, day, year\n        CONVERT month TO integer\n        CONVERT day TO integer\n        CONVERT year TO integer\n\n        IF month LESS THAN 1 OR month GREATER THAN 12 THEN\n            RETURN False\n        END IF\n\n        IF (month IN [1, 3, 5, 7, 8, 10, 12]) AND (day LESS THAN 1 OR day GREATER THAN 31) THEN\n            RETURN False\n        END IF\n\n        IF (month IN [4, 6, 9, 11]) AND (day LESS THAN 1 OR day GREATER THAN 30) THEN\n            RETURN False\n        END IF\n\n\nDecoded code for Problem 6:\ndef valid_date(date) -> bool:\n    try:\n        date = date.strip()\n        month_str, day_str, year_str = date.split('-')\n        month = int(month_str)\n        day = int(day_str)\n        year = int(year_str)\n\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2 and (day < 1 or day > 29):\n            return False\n    except:\n        return False\n\n    return True\n\nPseudocode for Problem 7:\nFUNCTION get_odd_collatz WITH PARAMETER n\n    IF n MODULO 2 EQUALS 0 THEN\n        SET odd_collatz TO EMPTY LIST\n    ELSE\n        SET odd_collatz TO LIST CONTAINING n\n    END IF\n\n    WHILE n GREATER THAN 1 DO\n        IF n MODULO 2 EQUALS 0 THEN\n            SET n TO n DIVIDED BY 2\n        ELSE\n            SET n TO n TIMES 3 PLUS 1\n        END IF\n\n        IF n MODULO 2 EQUALS 1 THEN\n            APPEND INTEGER VALUE OF n TO odd_collatz\n        END IF\n    END WHILE\n\n    RETURN SORTED VERSION OF odd_collatz\n\nDecoded code for Problem 7:\ndef get_odd_collatz(n) -> list[int]:\n    odd_collatz = [] if n % 2 == 0 else [n]\n    while n > 1:\n        n = n // 2 if n % 2 == 0 else n * 3 + 1\n        if n % 2 == 1:\n            odd_collatz.append(int(n))\n    return sorted(odd_collatz)\n\nPseudocode for Problem 8:\nFUNCTION count_distinct_characters WITH PARAMETER string OF TYPE string RETURNS integer\n    SET lowercase_string TO string converted to lowercase\n    SET distinct_characters TO set of characters in lowercase_string\n    RETURN length of distinct_characters\n\nDecoded code for Problem 8:\ndef count_distinct_characters(string: str) -> int:\n    lowercase_string = string.lower()\n    distinct_characters = set(lowercase_string)\n    return len(distinct_characters)\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}