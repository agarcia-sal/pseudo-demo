Convert the given source code into clear, concise, and high-level pseudocode that strictly preserves all original function and class names along with their exact parameters, including full hierarchical class and object nesting and ownership. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to represent control flow and operations. Express all arithmetic, logical, and comparison operators entirely in natural language words without symbols or abbreviations (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT). Preserve all original identifiers, literals, and values exactly as they appear in the source, including types or annotations if given. Represent data structures and expressions in a straightforward, literal manner, avoiding any language-specific syntax, implementation details, or shortcuts such as comprehensions; instead, expand comprehensions or inline expressions into explicit loops and steps. Show method invocations and function calls using explicit natural language forms like CALL function WITH ARGUMENTS..., specifying target objects clearly when relevant. Use consistent indentation solely to define code blocks and scopes, with no extra blank lines, comments, or separators. For sequences and collections, prefer explicit, descriptive forms such as LIST WITH ELEMENTS EMPTY or RANGE FROM X TO Y. Abstract each pseudocode line so it maps to exactly one atomic original statement or logically indivisible operation, ensuring full semantic fidelity with no loss or ambiguity, and guaranteeing the pseudocode can be used to unambiguously reconstruct the original code. Do not include for or while loops use implicit indexingâ€”always use explicit indices expressed clearly. Always spell out all numeric literals fully as numerals. Do not generate any explanation, comments, metadata, or text beyond the pseudocode itself. The output must be only the pseudocode text.