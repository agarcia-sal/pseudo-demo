{
  "prompt": "Convert the given code into clear, structured pseudocode preserving original function and class names, as well as class/object hierarchies. Express all logic using descriptive keywords (e.g., FUNCTION, RETURN, FOR, IF, SET) in full words rather than symbols or abbreviations. Use proper indentation to reflect code blocks. Represent expressions naturally but keep them concise and readable without oversimplifying. Do not add any explanations, comments, summaries, or notes. Output only the pseudocode corresponding exactly to the original code logic and structure, enabling direct mapping back to runnable code.",
  "response": "Convert the given code into clear, structured pseudocode preserving original function and class names, as well as class/object hierarchies. Express all logic using descriptive keywords (e.g., FUNCTION, RETURN, FOR, IF, SET) in full words rather than symbols or abbreviations. Use proper indentation to reflect code blocks. Represent expressions naturally but keep them concise and readable without oversimplifying. Do not add any explanations, comments, summaries, or notes. Output only the pseudocode corresponding exactly to the original code logic and structure, enabling direct mapping back to runnable code.",
  "score": 2.2261359348495864,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 1:\nFUNCTION encode_cyclic(INPUT string s)\n    SET groups TO EMPTY LIST\n    SET count TO (LENGTH OF s PLUS 2) DIVIDED BY 3\n    FOR i FROM 0 TO count MINUS 1 DO\n        SET start_index TO 3 TIMES i\n        SET end_index TO MINIMUM OF (3 TIMES i PLUS 3) AND LENGTH OF s\n        SET group TO SUBSTRING OF s FROM start_index TO end_index\n        APPEND group TO groups\n    END FOR\n\n    SET cycled_groups TO EMPTY LIST\n    FOR EACH group IN groups DO\n        IF LENGTH OF group EQUALS 3 THEN\n            SET cycled_group TO CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND FIRST CHARACTER OF group\n        ELSE\n            SET cycled_group TO group\n        END IF\n        APPEND cycled_group TO cycled_groups\n    END FOR\n\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp1zj9volz/solution_0.py\", line 26, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp1zj9volz/solution_0.py\", line 24, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 2:\nFUNCTION encode_shift WITH PARAMETER s AS STRING\n    SET encoded_string TO EMPTY STRING\n    FOR EACH character IN s\n        SET shifted_character_code TO ((ASCII_VALUE(character) PLUS 5 MINUS ASCII_VALUE(\"a\")) MODULO 26) PLUS ASCII_VALUE(\"a\")\n        SET shifted_character TO CHARACTER_FROM_CODE(shifted_character_code)\n        APPEND shifted_character TO encoded_string\n    END FOR\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_shift WITH PARAMETER s AS STRING\n    SET decoded_string TO EMPTY STRING\n    FOR EACH character IN s\n        SET shifted_character_code TO ((ASCII_VALUE(character) MINUS 5 MINUS ASCII_VALUE(\"a\")) MODULO 26) PLUS ASCII_VALUE(\"a\")\n        SET shifted_character TO CHARACTER_FROM_CODE(shifted_character_code)\n        APPEND shifted_character TO decoded_string\n    END FOR\n    RETURN decoded_string\nEND FUNCTION\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp55_mq4_3/solution_0.py\", line 20, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp55_mq4_3/solution_0.py\", line 18, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 3:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 3:\nFUNCTION poly(xs AS list, x AS float) RETURNS float\n    RETURN sum of (coeff * (x raised to power i)) for each i, coeff in enumeration of xs\n\n\nFUNCTION find_zero(xs AS list) RETURNS float\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(xs, begin) multiplied by poly(xs, end) greater than 0\n        SET begin TO begin multiplied by 2.0\n        SET end TO end multiplied by 2.0\n    END WHILE\n\n    WHILE end minus begin greater than 0.0000000001\n        SET center TO (begin plus end) divided by 2.0\n        IF poly(xs, center) multiplied by poly(xs, begin) greater than 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n        END IF\n    END WHILE\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpv7im56gw/solution_0.py\", line 23, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpv7im56gw/solution_0.py\", line 21, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 4:\nFUNCTION change_base(x AS INTEGER, base AS INTEGER) RETURNS STRING\n    SET ret TO empty string\n    WHILE x GREATER THAN 0 DO\n        SET ret TO string representation of (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    END WHILE\n    RETURN ret\nEND FUNCTION\n\nError(s) from the decoded code for Problem 4:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpuoeucd48/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 5:\n    return x + y\n\n\nPseudocode for Problem 5:\nFUNCTION add WITH PARAMETERS x AS integer, y AS integer\n    RETURN x plus y\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprs6f8twu/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprs6f8twu/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n\n\nPseudocode for Problem 6:\nFUNCTION smallest_change(arr)\n    SET ans TO 0\n    FOR i FROM 0 TO (LENGTH(arr) DIVIDED BY 2) MINUS 1\n        IF arr[i] IS NOT EQUAL TO arr[LENGTH(arr) MINUS i MINUS 1]\n            SET ans TO ans PLUS 1\n        END IF\n    END FOR\n    RETURN ans\nEND FUNCTION\n\nOriginal Code for Problem 7:\n    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n\n\nPseudocode for Problem 7:\nFUNCTION any_int(x, y, z)\n    IF x IS OF TYPE integer AND y IS OF TYPE integer AND z IS OF TYPE integer THEN\n        IF (x PLUS y EQUALS z) OR (x PLUS z EQUALS y) OR (y PLUS z EQUALS x) THEN\n            RETURN True\n        END IF\n        RETURN False\n    END IF\n    RETURN False\nEND FUNCTION\n\nOriginal Code for Problem 8:\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n\nPseudocode for Problem 8:\nFUNCTION numerical_letter_grade WITH PARAMETER grades\n    SET letter_grade TO empty list\n    FOR EACH gpa IN grades\n        IF gpa IS EQUAL TO 4.0 THEN\n            APPEND \"A+\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 3.7 THEN\n            APPEND \"A\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 3.3 THEN\n            APPEND \"A-\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 3.0 THEN\n            APPEND \"B+\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 2.7 THEN\n            APPEND \"B\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 2.3 THEN\n            APPEND \"B-\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 2.0 THEN\n            APPEND \"C+\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 1.7 THEN\n            APPEND \"C\" TO letter_grade\n        ELSE IF gpa IS GREATER THAN 1.3 THEN\nScore of (4*(Average word length) + passing rate) for ALL the problems: 2.2261359348495864"
}