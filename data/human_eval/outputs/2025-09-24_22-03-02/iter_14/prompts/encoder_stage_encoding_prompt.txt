Convert the given source code into unambiguous, high-level pseudocode that preserves all original function and class names, including their exact parameters, hierarchical nesting, and ownership within classes or objects. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL) to represent control flow and operations. Express arithmetic and logical operations entirely in natural language words (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, LESS THAN, GREATER THAN) without symbols or abbreviations. Preserve all identifiers, literals, and values exactly as in the original code including types or annotations. Capture expressions and data constructs in a clear literal or descriptive form, avoiding implementation details or syntax-specific constructs. Represent block structure and scope strictly through consistent indentation without adding extraneous blank lines, comments, delimiters, or formatting characters. For sequences or collections, use explicit expressions such as LIST WITH ELEMENTS or RANGE FROM ... TO ... to enhance clarity. Use natural language phrases for method calls or function invocations (e.g., CALL function WITH ARGUMENTS...) and describe comprehensions or inline transformations by expanding to explicit loops or steps. Abstract only when each line corresponds to a single, deterministic original statement or logically indivisible operation, ensuring no loss of semantic detail or program intent. Do not include any explanations, annotations, comments, metadata, or any output beyond the pseudocode text itself. The output pseudocode must be fully sufficient to faithfully reconstruct the original code with no ambiguity or loss of meaning.