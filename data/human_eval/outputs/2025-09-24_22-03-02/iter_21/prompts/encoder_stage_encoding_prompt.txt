Convert the given source code into clear, precise, and abstract pseudocode that strictly retains all original function and class names with their exact parameters, preserving the full nesting and ownership structure of classes and objects without alteration. Use only fully capitalized keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to denote control flow and operations. Represent all arithmetic, logical, and comparison operators entirely in natural language without symbols or abbreviations (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT). Preserve all original identifiers, literals, and values exactly as they appear in the source, including types or annotations if present. Do not use any language-specific syntax, shortcuts, or expressions such as comprehensions or inline indexing; fully expand such constructs into explicit loops or statements with clear indices or iteration variables spelled out. Express method and function calls explicitly as CALL function_name WITH ARGUMENTS... or CALL object.method_name WITH ARGUMENTS..., specifying the target object or context clearly. Use indentation consistently and solely to indicate code blocks with no inserted blank lines, comments, or separators. For all collections, sequences, and ranges, use literal, descriptive language (e.g., LIST WITH ELEMENTS EMPTY, RANGE FROM X TO Y INCLUSIVE) and avoid symbolic or shorthand notations. Abstract each pseudocode line so that it corresponds to a single indivisible original operation or statement, ensuring full semantic equivalence enabling unambiguous reconstruction of the original code. Always use explicit numeric literals as given, without spelling out digits as words. Return only the pseudocode text without any additional commentary, explanation, or formatting beyond what is necessary for valid pseudocode.