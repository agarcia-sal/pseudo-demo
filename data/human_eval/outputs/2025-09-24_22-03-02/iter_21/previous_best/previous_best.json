{
  "prompt": "Convert the given source code into clear, concise, and high-level pseudocode that strictly preserves all original function and class names along with their exact parameters, including full hierarchical class and object nesting and ownership. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to represent control flow and operations. Express all arithmetic, logical, and comparison operators entirely in natural language words without symbols or abbreviations (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT). Preserve all original identifiers, literals, and values exactly as they appear in the source, including types or annotations if given. Represent data structures and expressions in a straightforward, literal manner, avoiding any language-specific syntax, implementation details, or shortcuts such as comprehensions; instead, expand comprehensions or inline expressions into explicit loops and steps. Show method invocations and function calls using explicit natural language forms like CALL function WITH ARGUMENTS..., specifying target objects clearly when relevant. Use consistent indentation solely to define code blocks and scopes, with no extra blank lines, comments, or separators. For sequences and collections, prefer explicit, descriptive forms such as LIST WITH ELEMENTS EMPTY or RANGE FROM X TO Y. Abstract each pseudocode line so it maps to exactly one atomic original statement or logically indivisible operation, ensuring full semantic fidelity with no loss or ambiguity, and guaranteeing the pseudocode can be used to unambiguously reconstruct the original code. Do not include for or while loops use implicit indexing\u2014always use explicit indices expressed clearly. Always spell out all numeric literals fully as numerals. Do not generate any explanation, comments, metadata, or text beyond the pseudocode itself. The output must be only the pseudocode text.",
  "response": "Convert the given source code into clear, concise, and high-level pseudocode that strictly preserves all original function and class names along with their exact parameters, including full hierarchical class and object nesting and ownership. Use only full uppercase keywords (e.g., FUNCTION, CLASS, RETURN, IF, ELSE, FOR, WHILE, SET, INCREMENT, DECREMENT, APPEND, CONCATENATE, CALL, BREAK) to represent control flow and operations. Express all arithmetic, logical, and comparison operators entirely in natural language words without symbols or abbreviations (e.g., PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, EQUALS, NOT EQUAL TO, LESS THAN, GREATER THAN, AND, OR, NOT). Preserve all original identifiers, literals, and values exactly as they appear in the source, including types or annotations if given. Represent data structures and expressions in a straightforward, literal manner, avoiding any language-specific syntax, implementation details, or shortcuts such as comprehensions; instead, expand comprehensions or inline expressions into explicit loops and steps. Show method invocations and function calls using explicit natural language forms like CALL function WITH ARGUMENTS..., specifying target objects clearly when relevant. Use consistent indentation solely to define code blocks and scopes, with no extra blank lines, comments, or separators. For sequences and collections, prefer explicit, descriptive forms such as LIST WITH ELEMENTS EMPTY or RANGE FROM X TO Y. Abstract each pseudocode line so it maps to exactly one atomic original statement or logically indivisible operation, ensuring full semantic fidelity with no loss or ambiguity, and guaranteeing the pseudocode can be used to unambiguously reconstruct the original code. Do not include for or while loops use implicit indexing\u2014always use explicit indices expressed clearly. Always spell out all numeric literals fully as numerals. Do not generate any explanation, comments, metadata, or text beyond the pseudocode itself. The output must be only the pseudocode text.",
  "score": 2.7400613883223524,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 1:\nFUNCTION encode_cyclic WITH PARAMETER s AS str\n    SET groups TO LIST WITH ELEMENTS EMPTY\n    SET length_s TO CALL len WITH ARGUMENTS s\n    SET num_groups TO CALL INTEGER DIVISION WITH ARGUMENTS length_s PLUS 2 BY 3\n    FOR i FROM 0 TO num_groups MINUS 1\n        SET start_index TO 3 MULTIPLY i\n        SET end_index TO start_index PLUS 3\n        IF end_index GREATER THAN length_s THEN\n            SET end_index TO length_s\n        ENDIF\n        SET group TO CALL SLICE STRING s FROM start_index TO end_index\n        APPEND group TO groups\n    ENDFOR\n    SET new_groups TO LIST WITH ELEMENTS EMPTY\n    FOR j FROM 0 TO CALL len WITH ARGUMENTS groups MINUS 1\n        SET group TO groups AT INDEX j\n        SET length_group TO CALL len WITH ARGUMENTS group\n        IF length_group EQUALS 3 THEN\n            SET first_char TO group AT INDEX 0\n            SET rest_chars TO CALL SLICE STRING group FROM 1 TO 3\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpiddvj3gg/solution_0.py\", line 33, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpiddvj3gg/solution_0.py\", line 31, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\nPseudocode for Problem 2:\nFUNCTION all_prefixes(string: STRING) RETURNS LIST OF STRING\n    SET result TO LIST WITH ELEMENTS EMPTY\n    SET length TO CALL len WITH ARGUMENT string\n    SET i TO 0\n    WHILE i LESS THAN length\n        SET prefix TO EMPTY STRING\n        SET j TO 0\n        WHILE j LESS THAN OR EQUAL TO i\n            SET prefix TO CONCATENATE prefix AND CALL string AT INDEX j\n            INCREMENT j BY 1\n        APPEND prefix TO result\n        INCREMENT i BY 1\n    RETURN result\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpuifx0s3f/solution_0.py\", line 17, in <module>\\n    check(all_prefixes)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpuifx0s3f/solution_0.py\", line 16, in check\\n    assert candidate(\\'\\') == []\\nAssertionError\\n']\n\nOriginal Code for Problem 3:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 3:\nFUNCTION encode_shift WITH PARAMETER s OF TYPE str\n    SET encoded_chars TO LIST WITH ELEMENTS EMPTY\n    SET LENGTH_TO_PROCESS TO LENGTH OF s\n    SET INDEX TO 0\n    WHILE INDEX LESS THAN LENGTH_TO_PROCESS\n        SET ch TO ELEMENT AT INDEX OF s\n        SET char_code TO CALL ord WITH ARGUMENT ch\n        SET base_code TO CALL ord WITH ARGUMENT \"a\"\n        SET shifted_code TO ((char_code PLUS 5 MINUS base_code) MODULO 26) PLUS base_code\n        SET shifted_char TO CALL chr WITH ARGUMENT shifted_code\n        APPEND shifted_char TO encoded_chars\n        INCREMENT INDEX BY 1\n    END WHILE\n    SET result TO EMPTY STRING\n    SET INDEX TO 0\n    SET LENGTH_TO_JOIN TO LENGTH OF encoded_chars\n    WHILE INDEX LESS THAN LENGTH_TO_JOIN\n        SET result TO CONCATENATE result WITH ELEMENT AT INDEX OF encoded_chars\n        INCREMENT INDEX BY 1\n    END WHILE\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpwix41zdg/solution_0.py\", line 44, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpwix41zdg/solution_0.py\", line 42, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 4:\nFUNCTION change_base(x INTEGER, base INTEGER)\n    SET ret TO EMPTY STRING\n    WHILE x GREATER THAN 0\n        SET digit TO x MODULO base\n        SET digit_string TO CONVERT digit TO STRING\n        SET ret TO CONCATENATE digit_string PLUS ret\n        SET x TO x INTEGER DIVIDE base\n    END WHILE\n    RETURN ret\nEND FUNCTION\n\nError(s) from the decoded code for Problem 4:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7de6dsam/solution_5.py\", line 13\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 5:\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n\n\nPseudocode for Problem 5:\nFUNCTION pluck(arr)\n    IF LENGTH OF arr EQUALS 0 THEN\n        RETURN LIST WITH ELEMENTS EMPTY\n    END IF\n\n    SET evens TO LIST WITH ELEMENTS EMPTY\n    FOR index FROM 0 TO LENGTH OF arr MINUS 1 DO\n        SET value TO arr AT index\n        IF value MODULO 2 EQUALS 0 THEN\n            APPEND value TO evens\n        END IF\n    END FOR\n\n    IF LENGTH OF evens EQUALS 0 THEN\n        RETURN LIST WITH ELEMENTS EMPTY\n    END IF\n\n    SET min_even TO evens AT 0\n    FOR i FROM 1 TO LENGTH OF evens MINUS 1 DO\n        IF evens AT i LESS THAN min_even THEN\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpp1zqgk89/solution_1.py\", line 20, in <module>\\n    check(pluck)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpp1zqgk89/solution_1.py\", line 19, in check\\n    assert candidate([]) == [], \"Error\"\\nAssertionError: Error\\n']\n\nOriginal Code for Problem 6:\n    return [(i * x) for i, x in enumerate(xs)][1:]\n\n\nPseudocode for Problem 6:\nFUNCTION derivative(xs:list)\n    SET result TO LIST WITH ELEMENTS EMPTY\n    FOR index FROM 0 TO LENGTH OF xs MINUS 1\n        SET coefficient TO ELEMENT AT index IN xs\n        SET product TO index MULTIPLY coefficient\n        APPEND product TO result\n    SET sliced_result TO LIST WITH ELEMENTS EMPTY\n    FOR index FROM 1 TO LENGTH OF result MINUS 1\n        SET element TO ELEMENT AT index IN result\n        APPEND element TO sliced_result\n    RETURN sliced_result\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr1xyykko/solution_0.py\", line 15, in <module>\\n    check(derivative)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr1xyykko/solution_0.py\", line 14, in check\\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\\nAssertionError\\n']\n\nOriginal Code for Problem 7:\n    return x + y\n\n\nPseudocode for Problem 7:\nFUNCTION add(x INTEGER, y INTEGER)\n    RETURN x PLUS y\nEND FUNCTION\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp428eje0j/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp428eje0j/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 8:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 8:\nFUNCTION poly WITH PARAMETERS xs AS list, x AS float\n    SET result TO 0\n    FOR index FROM 0 TO LENGTH OF xs MINUS 1\n        SET coeff TO xs AT index\n        SET power TO CALL math.pow WITH ARGUMENTS x AND index\n        SET term TO coeff MULTIPLY power\n        SET result TO result PLUS term\n    END FOR\n    RETURN result\nEND FUNCTION\n\nFUNCTION find_zero WITH PARAMETER xs AS list\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE CALL poly WITH ARGUMENTS xs, begin MULTIPLY CALL poly WITH ARGUMENTS xs, end GREATER THAN 0\n        SET begin TO begin MULTIPLY 2.0\n        SET end TO end MULTIPLY 2.0\n    END WHILE\n    WHILE end MINUS begin GREATER THAN 0.0000000001\n        SET center TO (begin PLUS end) DIVIDE BY 2.0\n\nError(s) from the decoded code for Problem 8:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp8fq27nwl/solution_0.py\", line 30, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp8fq27nwl/solution_0.py\", line 28, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\nScore of (4*(Average word length) + passing rate) for ALL the problems: 2.7400613883223524"
}