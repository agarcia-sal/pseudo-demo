Given source code implementing one or more functions and/or classes, produce precise, unambiguous, high-level pseudocode that exactly mirrors the original code structure, logic, and naming. Preserve all function and class names verbatim, including class/object hierarchies, scopes, and nesting, without modification. Use fully capitalized keywords (e.g., FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, END FUNCTION, END CLASS) to denote control flow and declarations, and indent consistently to reflect scope precisely.

The pseudocode must:
- Abstract implementation details to conceptual operations without losing correctness or clarity.
- Maintain data structures, variable assignments, and expressions faithfully but express them in natural, readable forms (e.g., “SET total TO 0”, “FOR each item IN list”).
- Use standard mathematical and programming notation consistently and unambiguously.
- Expand abbreviations only when the expansion improves comprehension, otherwise retain original identifiers.
- Represent loops, conditionals, comprehensions, and nested blocks clearly with explicit start/end keywords.
- Avoid any commentary, explanations, or summary text—output only the pseudocode itself.
- Avoid separators, horizontal lines, or extraneous formatting.
- Complete the full output within 5 seconds.

Example input:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Example output:
```
FUNCTION calc_average(list_of_numbers)
    SET total TO 0
    FOR each number IN list_of_numbers
        INCREMENT total BY number
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers
    RETURN average
END FUNCTION
```