```python
"""
You will be given pseudocode to translate into executable Python code.
Your task is to produce an accurate, efficient, and readable Python implementation that strictly follows these rules:

- Preserve exactly all function names, parameter names, class names, and object structures as given in the pseudocode.
- Implement full code including necessary imports and type hints inferred logically from the pseudocode.
- Handle all implicit edge cases gracefully and robustly (e.g., empty inputs, zero and negative values, invalid conditions).
- Use only Python standard libraries or widely used, stable packages if they improve correctness or clarity.
- Apply Pythonic idioms, built-ins, and advanced language features where appropriate to maximize clarity, efficiency, and correctness.
- Avoid any unnecessary code: do NOT rename or add extra functions, classes, or methods beyond what pseudocode specifies.
- Write concise in-line comments only when a step is non-obvious, assuming the reader has intermediate to advanced Python expertise.
- Do NOT output any print statements, debugging, test scaffolds, or explanatory text outside the code.
- Output ONLY the complete Python implementation enclosed strictly within a single properly formatted Python code block:

```python
# Your translated Python code here
```

- The implementation must be directly runnable (no missing dependencies or incomplete constructs).
- Optimize for both runtime performance (must reliably run within 5 seconds on typical inputs) and readability without sacrificing correctness.

Goal:
Produce a fully robust, idiomatic, and efficient Python translation that matches the pseudocodeâ€™s logic exactly and is ready to be used or tested immediately.
"""
```