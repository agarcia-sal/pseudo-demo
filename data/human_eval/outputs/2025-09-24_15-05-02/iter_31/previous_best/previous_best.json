{
  "prompt": "```python\n\"\"\"\nTranslate the provided pseudocode into a complete, clean, and efficient Python implementation,\nstrictly preserving all function names, parameter names, class names, and object structures exactly as specified.\n\nRequirements:\n- Enclose your entire solution strictly within a single, properly formatted Python code block:\n```python\n# your code here\n```\n- Include all necessary imports at the very top, using only standard libraries or well-established packages\n  if they improve correctness, clarity, or efficiency.\n- Apply precise and consistent Python type hints inferred logically from the pseudocode.\n- Maintain variable and identifier names exactly as given; do NOT rename or add functions, classes, or methods beyond the pseudocode.\n- Add brief in-line comments only where absolutely necessary to clarify complex logic, assuming an experienced Python reader.\n- Robustly handle all implicit or edge cases (e.g., empty inputs, invalid values) without sacrificing code clarity or overcomplication.\n- Optimize for clarity, correctness, and runtime efficiency to reliably complete within 5 seconds on typical inputs.\n- Use Pythonic idioms, built-ins, standard library modules, and advanced language features where appropriate.\n- Do NOT include print statements, debugging code, test scaffolds, or any explanatory text outside the code block.\n- Output ONLY the single Python code block with your ready-to-run implementation, nothing else.\n\nGoal:\nProduce a faithful, polished, robust, and idiomatic Python translation that maximizes correctness,\nperformance, readability, and strict adherence to the pseudocode's logic and structure.\n\"\"\"\n```",
  "response": "```python\n\"\"\"\nTranslate the provided pseudocode into a complete, clean, and efficient Python implementation,\nstrictly preserving all function names, parameter names, class names, and object structures exactly as specified.\n\nRequirements:\n- Enclose your entire solution strictly within a single, properly formatted Python code block:\n```python\n# your code here\n```\n- Include all necessary imports at the very top, using only standard libraries or well-established packages\n  if they improve correctness, clarity, or efficiency.\n- Apply precise and consistent Python type hints inferred logically from the pseudocode.\n- Maintain variable and identifier names exactly as given; do NOT rename or add functions, classes, or methods beyond the pseudocode.\n- Add brief in-line comments only where absolutely necessary to clarify complex logic, assuming an experienced Python reader.\n- Robustly handle all implicit or edge cases (e.g., empty inputs, invalid values) without sacrificing code clarity or overcomplication.\n- Optimize for clarity, correctness, and runtime efficiency to reliably complete within 5 seconds on typical inputs.\n- Use Pythonic idioms, built-ins, standard library modules, and advanced language features where appropriate.\n- Do NOT include print statements, debugging code, test scaffolds, or any explanatory text outside the code block.\n- Output ONLY the single Python code block with your ready-to-run implementation, nothing else.\n\nGoal:\nProduce a faithful, polished, robust, and idiomatic Python translation that maximizes correctness,\nperformance, readability, and strict adherence to the pseudocode's logic and structure.\n\"\"\"\n```",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    FOR i FROM 0 TO (LENGTH OF input_string + 2) DIVIDED BY 3 MINUS 1\n        SET start_index TO 3 TIMES i\n        SET end_index TO MINIMUM OF (3 TIMES i + 3) AND LENGTH OF input_string\n        APPEND SUBSTRING OF input_string FROM start_index TO end_index TO groups\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND group[0]\n        ELSE\n            LEAVE group UNCHANGED\n    SET encoded_string TO CONCATENATION OF ALL strings IN groups\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_cyclic(encoded_string)\n    RETURN encode_cyclic(encode_cyclic(encoded_string))\nEND FUNCTION\n```\n\nDecoded code for Problem 1:\nfrom typing import List\n\n\ndef encode_cyclic(input_string: str) -> str:\n    groups: List[str] = []\n    n = len(input_string)\n    group_count = (n + 2) // 3  # number of groups of size 3 (may have smaller last group)\n    for i in range(group_count):\n        start_index = 3 * i\n        end_index = min(3 * i + 3, n)\n        groups.append(input_string[start_index:end_index])\n    for i, group in enumerate(groups):\n        if len(group) == 3:\n            groups[i] = group[1:] + group[0]\n    return ''.join(groups)\n\n\ndef decode_cyclic(encoded_string: str) -> str:\n    return encode_cyclic(encode_cyclic(encoded_string))\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7p6gzv09/solution_0.py\", line 24, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7p6gzv09/solution_0.py\", line 22, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 2:\n```\nFUNCTION change_base(x, base)\n    SET ret TO empty string\n    WHILE x GREATER THAN 0\n        SET ret TO STRING OF (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    RETURN ret\nEND FUNCTION\n```\n\nDecoded code for Problem 2:\nfrom typing import Union\n\ndef change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nError(s) from the decoded code for Problem 2:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpcscc5hm7/solution_5.py\", line 15\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 3:\n```\nFUNCTION encode_shift(string_input)\n    SET encoded_characters TO EMPTY LIST\n    FOR each character IN string_input\n        SET shifted_value TO ((ASCII_OF(character) + 5 - ASCII_OF('a')) MODULO 26) + ASCII_OF('a')\n        APPEND CHARACTER_CORRESPONDING_TO(shifted_value) TO encoded_characters\n    RETURN CONCATENATION_OF(encoded_characters)\nEND FUNCTION\n\nFUNCTION decode_shift(string_input)\n    SET decoded_characters TO EMPTY LIST\n    FOR each character IN string_input\n        SET shifted_value TO ((ASCII_OF(character) - 5 - ASCII_OF('a')) MODULO 26) + ASCII_OF('a')\n        APPEND CHARACTER_CORRESPONDING_TO(shifted_value) TO decoded_characters\n    RETURN CONCATENATION_OF(decoded_characters)\nEND FUNCTION\n```\n\nDecoded code for Problem 3:\nfrom typing import List\n\ndef encode_shift(string_input: str) -> str:\n    encoded_characters: List[str] = []\n    for character in string_input:\n        shifted_value = ((ord(character) + 5 - ord('a')) % 26) + ord('a')\n        encoded_characters.append(chr(shifted_value))\n    return ''.join(encoded_characters)\n\ndef decode_shift(string_input: str) -> str:\n    decoded_characters: List[str] = []\n    for character in string_input:\n        shifted_value = ((ord(character) - 5 - ord('a')) % 26) + ord('a')\n        decoded_characters.append(chr(shifted_value))\n    return ''.join(decoded_characters)\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpz75jwz_e/solution_0.py\", line 20, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpz75jwz_e/solution_0.py\", line 18, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 4:\n```\nFUNCTION poly(list_of_coefficients, point_x)\n    RETURN SUM OF (coefficient MULTIPLIED BY (point_x RAISED TO power i)) FOR EACH i, coefficient IN ENUMERATE(list_of_coefficients)\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin TO -1.0\n    SET end TO 1.0\n\n    WHILE poly(list_of_coefficients, begin) MULTIPLIED BY poly(list_of_coefficients, end) IS GREATER THAN 0\n        MULTIPLY begin BY 2.0\n        MULTIPLY end BY 2.0\n    END WHILE\n\n    WHILE (end MINUS begin) IS GREATER THAN 1e-10\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n\n        IF poly(list_of_coefficients, center) MULTIPLIED BY poly(list_of_coefficients, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n\nDecoded code for Problem 4:\nfrom typing import List\n\n\ndef poly(list_of_coefficients: List[float], point_x: float) -> float:\n    return sum(coef * (point_x ** i) for i, coef in enumerate(list_of_coefficients))\n\n\ndef find_zero(list_of_coefficients: List[float]) -> float:\n    begin, end = -1.0, 1.0\n    val_begin = poly(list_of_coefficients, begin)\n    val_end = poly(list_of_coefficients, end)\n    while val_begin * val_end > 0:\n        begin *= 2.0\n        end *= 2.0\n        val_begin = poly(list_of_coefficients, begin)\n        val_end = poly(list_of_coefficients, end)\n\n    while (end - begin) > 1e-10:\n        center = (begin + end) / 2.0\n        val_center = poly(list_of_coefficients, center)\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxhqyskse/solution_0.py\", line 32, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxhqyskse/solution_0.py\", line 30, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 5:\n```\nFUNCTION add(x, y)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nDecoded code for Problem 5:\nfrom typing import Union\n\ndef add(x: Union[int, float], y: Union[int, float]) -> Union[int, float]:\n    return x + y\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp_ibjyq2v/solution_4.py\", line 11, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp_ibjyq2v/solution_4.py\", line 10, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 6:\n```\nFUNCTION maximum(arr, k)\n    IF k EQUALS 0\n        RETURN empty list\n    END IF\n    SORT arr IN ASCENDING ORDER\n    SET ans TO SUBLIST OF arr FROM LENGTH(arr) MINUS k TO END\n    RETURN ans\nEND FUNCTION\n```\n\nDecoded code for Problem 6:\nfrom typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    if k == 0:\n        return []\n    arr_sorted = sorted(arr)\n    return arr_sorted[-k:]\n\nPseudocode for Problem 7:\n```\nFUNCTION numerical_letter_grade(list_of_grades)\n    SET letter_grade TO empty list\n    FOR each gpa IN list_of_grades\n        IF gpa EQUALS 4.0\n            APPEND \"A+\" TO letter_grade\n        ELSE IF gpa GREATER THAN 3.7\n            APPEND \"A\" TO letter_grade\n        ELSE IF gpa GREATER THAN 3.3\n            APPEND \"A-\" TO letter_grade\n        ELSE IF gpa GREATER THAN 3.0\n            APPEND \"B+\" TO letter_grade\n        ELSE IF gpa GREATER THAN 2.7\n            APPEND \"B\" TO letter_grade\n        ELSE IF gpa GREATER THAN 2.3\n            APPEND \"B-\" TO letter_grade\n        ELSE IF gpa GREATER THAN 2.0\n            APPEND \"C+\" TO letter_grade\n        ELSE IF gpa GREATER THAN 1.7\n            APPEND \"C\" TO letter_grade\n\nDecoded code for Problem 7:\nfrom typing import List\n\ndef numerical_letter_grade(list_of_grades: List[float]) -> List[str]:\n    letter_grade: List[str] = []\n    for gpa in list_of_grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n\nPseudocode for Problem 8:\n```\nFUNCTION vowels_count(string s)\n    SET vowels TO \"aeiouAEIOU\"\n    SET number_of_vowels TO COUNT OF characters IN s THAT ARE IN vowels\n    IF LAST CHARACTER OF s IS 'y' OR 'Y'\n        INCREMENT number_of_vowels BY 1\n    END IF\n    RETURN number_of_vowels\nEND FUNCTION\n```\n\nDecoded code for Problem 8:\ndef vowels_count(s: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    number_of_vowels = sum(ch in vowels for ch in s)\n    if s and s[-1] in ('y', 'Y'):\n        number_of_vowels += 1\n    return number_of_vowels\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}