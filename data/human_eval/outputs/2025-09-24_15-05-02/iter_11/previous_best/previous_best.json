{
  "prompt": "Translate the given pseudocode into clean, efficient, and fully functional Python code. Your translation **must**:\n\n- Preserve all function names, parameter names, class names, and class/object structures exactly as stated in the pseudocode.\n- Include all necessary imports explicitly within the same Python code block.\n- Use clear, descriptive variable names consistent with the pseudocode; add concise comments **only** when they improve understanding.\n- Ensure correct and idiomatic Python syntax suitable for immediate execution, handling any implied edge cases.\n- Guarantee the code executes correctly within 5 seconds.\n- Enclose **all** code strictly inside a single Python code block formatted as:\n\n```python\n# your translated code here\n```\n\nDo **not** include any explanations, test cases, print statements, or output anything outside the code block. Avoid adding any separators or extraneous text. Your code should strictly reflect the pseudocode\u2019s logic and structure to maximize correctness and test-time success.",
  "response": "Translate the given pseudocode into clean, efficient, and fully functional Python code. Your translation **must**:\n\n- Preserve all function names, parameter names, class names, and class/object structures exactly as stated in the pseudocode.\n- Include all necessary imports explicitly within the same Python code block.\n- Use clear, descriptive variable names consistent with the pseudocode; add concise comments **only** when they improve understanding.\n- Ensure correct and idiomatic Python syntax suitable for immediate execution, handling any implied edge cases.\n- Guarantee the code executes correctly within 5 seconds.\n- Enclose **all** code strictly inside a single Python code block formatted as:\n\n```python\n# your translated code here\n```\n\nDo **not** include any explanations, test cases, print statements, or output anything outside the code block. Avoid adding any separators or extraneous text. Your code should strictly reflect the pseudocode\u2019s logic and structure to maximize correctness and test-time success.",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\n```\nFUNCTION change_base(x AS INTEGER, base AS INTEGER)\n    SET result_string TO empty string\n    WHILE x GREATER THAN 0\n        SET remainder TO x MODULO base\n        SET result_string TO STRING(remainder) CONCATENATED WITH result_string\n        SET x TO x INTEGER-DIVIDED BY base\n    END WHILE\n    RETURN result_string\nEND FUNCTION\n```\n\nDecoded code for Problem 1:\ndef change_base(x: int, base: int) -> str:\n    result_string = \"\"\n    while x > 0:\n        remainder = x % base\n        result_string = str(remainder) + result_string\n        x = x // base\n    return result_string\n\nError(s) from the decoded code for Problem 1:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpri2gf9do/solution_5.py\", line 12\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 2:\n```\nFUNCTION add(x AS INTEGER, y AS INTEGER)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nDecoded code for Problem 2:\ndef add(x: int, y: int) -> int:\n    return x + y\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxfwxhxq/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxfwxhxq/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 3:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    SET number_of_groups TO (LENGTH OF input_string + 2) DIVIDED BY 3\n    FOR i FROM 0 TO number_of_groups - 1\n        SET start_index TO 3 * i\n        SET end_index TO MINIMUM OF (3 * i + 3) AND LENGTH OF input_string\n        ADD SUBSTRING OF input_string FROM start_index TO end_index TO groups\n    END FOR\n\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND group[0]\n        END IF\n    END FOR\n\n    RETURN CONCATENATION OF ALL groups AS SINGLE STRING\nEND FUNCTION\n\n\n\nDecoded code for Problem 3:\nfrom typing import List\n\ndef encode_cyclic(input_string: str) -> str:\n    groups: List[str] = []\n    number_of_groups: int = (len(input_string) + 2) // 3\n    for i in range(number_of_groups):\n        start_index = 3 * i\n        end_index = min(3 * i + 3, len(input_string))\n        groups.append(input_string[start_index:end_index])\n\n    for idx, group in enumerate(groups):\n        if len(group) == 3:\n            groups[idx] = group[1:] + group[0]\n\n    return ''.join(groups)\n\ndef decode_cyclic(encoded_string: str) -> str:\n    return encode_cyclic(encode_cyclic(encoded_string))\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp3h_j2xs0/solution_0.py\", line 23, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp3h_j2xs0/solution_0.py\", line 21, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 4:\n```\nFUNCTION encode_shift(input_string)\n    SET encoded_characters TO EMPTY LIST\n    FOR each character IN input_string\n        SET shifted_value TO ((ASCII_VALUE(character) + 5 - ASCII_VALUE('a')) MODULO 26) + ASCII_VALUE('a')\n        APPEND CHARACTER_CORRESPONDING_TO(shifted_value) TO encoded_characters\n    RETURN CONCATENATION OF encoded_characters\nEND FUNCTION\n\nFUNCTION decode_shift(encoded_string)\n    SET decoded_characters TO EMPTY LIST\n    FOR each character IN encoded_string\n        SET shifted_value TO ((ASCII_VALUE(character) - 5 - ASCII_VALUE('a')) MODULO 26) + ASCII_VALUE('a')\n        APPEND CHARACTER_CORRESPONDING_TO(shifted_value) TO decoded_characters\n    RETURN CONCATENATION OF decoded_characters\nEND FUNCTION\n```\n\nDecoded code for Problem 4:\ndef encode_shift(input_string):\n    encoded_characters = []\n    for character in input_string:\n        shifted_value = ((ord(character) + 5 - ord('a')) % 26) + ord('a')\n        encoded_characters.append(chr(shifted_value))\n    return \"\".join(encoded_characters)\n\ndef decode_shift(encoded_string):\n    decoded_characters = []\n    for character in encoded_string:\n        shifted_value = ((ord(character) - 5 - ord('a')) % 26) + ord('a')\n        decoded_characters.append(chr(shifted_value))\n    return \"\".join(decoded_characters)\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp9lcddjel/solution_0.py\", line 18, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp9lcddjel/solution_0.py\", line 16, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 5:\n```\nFUNCTION poly(list_of_coefficients, x_value)\n    RETURN SUM OF (coefficient * x_value RAISED TO power) FOR EACH power, coefficient IN ENUMERATE(list_of_coefficients)\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(list_of_coefficients, begin) MULTIPLIED BY poly(list_of_coefficients, end) IS GREATER THAN 0\n        MULTIPLY begin BY 2.0\n        MULTIPLY end BY 2.0\n    END WHILE\n    WHILE end MINUS begin IS GREATER THAN 1e-10\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n        IF poly(list_of_coefficients, center) MULTIPLIED BY poly(list_of_coefficients, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n        END IF\n    END WHILE\n\nDecoded code for Problem 5:\nfrom typing import List\n\ndef poly(list_of_coefficients: List[float], x_value: float) -> float:\n    return sum(coefficient * x_value**power for power, coefficient in enumerate(list_of_coefficients))\n\ndef find_zero(list_of_coefficients: List[float]) -> float:\n    begin = -1.0\n    end = 1.0\n    while poly(list_of_coefficients, begin) * poly(list_of_coefficients, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(list_of_coefficients, center) * poly(list_of_coefficients, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpyidifonw/solution_0.py\", line 23, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpyidifonw/solution_0.py\", line 21, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 6:\n```\nFUNCTION tri(n)\n    IF n EQUALS 0\n        RETURN [1]\n    SET my_tri TO [1, 3]\n    FOR i FROM 2 TO n INCLUSIVE\n        IF i MODULO 2 EQUALS 0\n            APPEND (i DIVIDED BY 2 PLUS 1) TO my_tri\n        ELSE\n            APPEND (my_tri[i - 1] PLUS my_tri[i - 2] PLUS ((i PLUS 3) DIVIDED BY 2)) TO my_tri\n    RETURN my_tri\nEND FUNCTION\n```\n\nDecoded code for Problem 6:\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i // 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + ((i + 3) // 2))\n    return my_tri\n\nPseudocode for Problem 7:\n```\nFUNCTION move_one_ball(arr)\n    IF LENGTH OF arr IS 0\n        RETURN True\n    END IF\n\n    SET sorted_array TO arr SORTED IN NON-DECREASING ORDER\n    SET min_value TO MINIMUM ELEMENT IN arr\n    SET min_index TO INDEX OF min_value IN arr\n    SET my_arr TO CONCATENATION OF arr FROM min_index TO END AND arr FROM START TO min_index - 1\n\n    FOR i FROM 0 TO LENGTH OF arr - 1\n        IF my_arr[i] IS NOT EQUAL TO sorted_array[i]\n            RETURN False\n        END IF\n    END FOR\n\n    RETURN True\nEND FUNCTION\n```\n\nDecoded code for Problem 7:\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    if len(arr) == 0:\n        return True\n\n    sorted_array = sorted(arr)\n    min_value = min(arr)\n    min_index = arr.index(min_value)\n    my_arr = arr[min_index:] + arr[:min_index]\n\n    for i in range(len(arr)):\n        if my_arr[i] != sorted_array[i]:\n            return False\n\n    return True\n\nPseudocode for Problem 8:\n```\nFUNCTION starts_one_ends(n)\n    IF n EQUALS 1\n        RETURN 1\n    ELSE\n        RETURN 18 MULTIPLIED BY (10 RAISED TO THE POWER OF (n MINUS 2))\nEND FUNCTION\n```\n\nDecoded code for Problem 8:\ndef starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}