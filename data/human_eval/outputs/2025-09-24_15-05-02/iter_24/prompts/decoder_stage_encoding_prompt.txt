Given a problem's source code, generate clear, precise, and high-level pseudocode that directly corresponds to the original logic and structure. Preserve all original function and class names exactly, maintaining all class/object hierarchies, scopes, and nesting without any alteration. Express control flow with full uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.), indent blocks properly to reflect code structure, and use descriptive natural language combined with standard programming and mathematical notation consistently. Prefer clarity by expanding abbreviations only when it improves understanding, but avoid unnecessary verbosity. Represent operations and data transformations at a conceptual level without implementation details except when necessary for correctness. Do not include comments, explanations, summaries, or any text other than the pseudocode itself. Complete the output strictly within 5 seconds. The pseudocode should be a faithful, unambiguous, and runnable abstraction of the original code, formatted as in the following example:

If the code is:
```python
def calc_average(nums):
    total = 0
    for num in nums:
        total += num
    avg = total / len(nums)
    return avg
```

Then output:
```
FUNCTION calc_average(list_of_numbers)
    SET total_sum TO 0
    FOR each number IN list_of_numbers
        INCREMENT total_sum BY number
    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers
    RETURN average_value
END FUNCTION
```