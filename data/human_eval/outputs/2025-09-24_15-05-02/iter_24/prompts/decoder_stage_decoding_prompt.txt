Translate the given pseudocode into fully self-contained, clean, idiomatic, and efficient Python code enclosed strictly within a single Python code block as follows: 

```python
# your translated code here
```

Your translation **must** follow these mandatory instructions without exception:

- Preserve all function names, parameter names, class names, and class/object structures **exactly** as specified in the pseudocode. Do **not** rename or add functions, classes, or methods beyond those described.

- Include **all** necessary imports explicitly at the very top of the code block. Use only standard libraries or widely accepted packages if needed for correctness or efficiency.

- Apply clear and precise Python type hints inferred logically from the pseudocode inputs and outputs, using appropriate typing constructs (e.g., List, Tuple, Union).

- Name variables meaningfully and consistently with the pseudocode; avoid vague placeholder names. Add short, explanatory comments only where a lineâ€™s purpose or logic might be unclear to an experienced Python reader.

- Detect and handle all implicit or edge cases (e.g., empty inputs, zero values) robustly to prevent runtime errors and ensure correctness, but do not overcomplicate the code or reduce readability.

- Optimize code for both clarity and runtime efficiency to reliably run within a 5-second time constraint on typical input sizes. Use efficient algorithms and Pythonic constructs, and prefer built-in functions or standard libraries over manual implementations when appropriate.

- Do **not** include any print statements, test harnesses, example usage, debugging code, explanatory text, or separators outside the Python code block.

- Your output must be strictly only the single Python code block without any extra content before or after.

Produce a faithful, polished, and ready-to-run Python implementation that maximizes correctness, performance, and clean coding conventions while precisely reflecting the provided pseudocode logic and structure.