{
  "prompt": "Translate the given pseudocode into fully self-contained, clean, idiomatic, and efficient Python code enclosed strictly within a single Python code block as follows: \n\n```python\n# your translated code here\n```\n\nYour translation **must** follow these mandatory instructions without exception:\n\n- Preserve all function names, parameter names, class names, and class/object structures **exactly** as specified in the pseudocode. Do **not** rename or add functions, classes, or methods beyond those described.\n\n- Include **all** necessary imports explicitly at the very top of the code block. Use only standard libraries or widely accepted packages if needed for correctness or efficiency.\n\n- Apply clear and precise Python type hints inferred logically from the pseudocode inputs and outputs, using appropriate typing constructs (e.g., List, Tuple, Union).\n\n- Name variables meaningfully and consistently with the pseudocode; avoid vague placeholder names. Add short, explanatory comments only where a line\u2019s purpose or logic might be unclear to an experienced Python reader.\n\n- Detect and handle all implicit or edge cases (e.g., empty inputs, zero values) robustly to prevent runtime errors and ensure correctness, but do not overcomplicate the code or reduce readability.\n\n- Optimize code for both clarity and runtime efficiency to reliably run within a 5-second time constraint on typical input sizes. Use efficient algorithms and Pythonic constructs, and prefer built-in functions or standard libraries over manual implementations when appropriate.\n\n- Do **not** include any print statements, test harnesses, example usage, debugging code, explanatory text, or separators outside the Python code block.\n\n- Your output must be strictly only the single Python code block without any extra content before or after.\n\nProduce a faithful, polished, and ready-to-run Python implementation that maximizes correctness, performance, and clean coding conventions while precisely reflecting the provided pseudocode logic and structure.",
  "response": "Translate the given pseudocode into fully self-contained, clean, idiomatic, and efficient Python code enclosed strictly within a single Python code block as follows: \n\n```python\n# your translated code here\n```\n\nYour translation **must** follow these mandatory instructions without exception:\n\n- Preserve all function names, parameter names, class names, and class/object structures **exactly** as specified in the pseudocode. Do **not** rename or add functions, classes, or methods beyond those described.\n\n- Include **all** necessary imports explicitly at the very top of the code block. Use only standard libraries or widely accepted packages if needed for correctness or efficiency.\n\n- Apply clear and precise Python type hints inferred logically from the pseudocode inputs and outputs, using appropriate typing constructs (e.g., List, Tuple, Union).\n\n- Name variables meaningfully and consistently with the pseudocode; avoid vague placeholder names. Add short, explanatory comments only where a line\u2019s purpose or logic might be unclear to an experienced Python reader.\n\n- Detect and handle all implicit or edge cases (e.g., empty inputs, zero values) robustly to prevent runtime errors and ensure correctness, but do not overcomplicate the code or reduce readability.\n\n- Optimize code for both clarity and runtime efficiency to reliably run within a 5-second time constraint on typical input sizes. Use efficient algorithms and Pythonic constructs, and prefer built-in functions or standard libraries over manual implementations when appropriate.\n\n- Do **not** include any print statements, test harnesses, example usage, debugging code, explanatory text, or separators outside the Python code block.\n\n- Your output must be strictly only the single Python code block without any extra content before or after.\n\nProduce a faithful, polished, and ready-to-run Python implementation that maximizes correctness, performance, and clean coding conventions while precisely reflecting the provided pseudocode logic and structure.",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\n```\nFUNCTION change_base(x, base)\n    SET ret TO empty string\n    WHILE x > 0\n        SET ret TO string(x MODULO base) CONCATENATED WITH ret\n        SET x TO x DIVIDED BY base (integer division)\n    RETURN ret\nEND FUNCTION\n```\n\nDecoded code for Problem 1:\nfrom typing import Union\n\ndef change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    if base <= 1:\n        raise ValueError(\"Base must be greater than 1\")\n\n    ret: str = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nError(s) from the decoded code for Problem 1:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp683ucfxw/solution_5.py\", line 18\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 2:\n```\nFUNCTION add(x, y)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nDecoded code for Problem 2:\nfrom typing import Union\n\ndef add(x: Union[int, float], y: Union[int, float]) -> Union[int, float]:\n    return x + y\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp_qvjip7b/solution_4.py\", line 11, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp_qvjip7b/solution_4.py\", line 10, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 3:\n```\nFUNCTION encode_shift(input_string)\n    RETURN concatenation OF\n        FOR each character IN input_string\n            COMPUTE shifted_code AS ((ASCII_VALUE(character) + 5 - ASCII_VALUE('a')) MODULO 26) + ASCII_VALUE('a')\n            CONVERT shifted_code TO CHARACTER\nEND FUNCTION\n\nFUNCTION decode_shift(encoded_string)\n    RETURN concatenation OF\n        FOR each character IN encoded_string\n            COMPUTE shifted_code AS ((ASCII_VALUE(character) - 5 - ASCII_VALUE('a')) MODULO 26) + ASCII_VALUE('a')\n            CONVERT shifted_code TO CHARACTER\nEND FUNCTION\n```\n\nDecoded code for Problem 3:\nfrom typing import Union\n\ndef encode_shift(input_string: str) -> str:\n    # Shift each lowercase letter by 5 positions in the alphabet, wrapping around\n    result_chars = []\n    for character in input_string:\n        if 'a' <= character <= 'z':\n            shifted_code = ((ord(character) + 5 - ord('a')) % 26) + ord('a')\n            result_chars.append(chr(shifted_code))\n        else:\n            # Preserve characters outside a-z as is (implicit in pseudocode context)\n            result_chars.append(character)\n    return ''.join(result_chars)\n\ndef decode_shift(encoded_string: str) -> str:\n    # Reverse the shift by 5 positions, wrapping around\n    result_chars = []\n    for character in encoded_string:\n        if 'a' <= character <= 'z':\n            shifted_code = ((ord(character) - 5 - ord('a')) % 26) + ord('a')\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpnp9_aa8t/solution_0.py\", line 30, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpnp9_aa8t/solution_0.py\", line 28, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 4:\n```\nFUNCTION poly(list_of_coefficients, point_x)\n    RETURN SUM OVER i, coeff IN ENUMERATE(list_of_coefficients) OF coeff MULTIPLIED BY (point_x TO THE POWER i)\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(list_of_coefficients, begin) MULTIPLIED BY poly(list_of_coefficients, end) IS GREATER THAN 0\n        SET begin TO begin MULTIPLIED BY 2.0\n        SET end TO end MULTIPLIED BY 2.0\n    WHILE end MINUS begin IS GREATER THAN 1e-10\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n        IF poly(list_of_coefficients, center) MULTIPLIED BY poly(list_of_coefficients, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n    RETURN begin\nEND FUNCTION\n```\n\nDecoded code for Problem 4:\nfrom typing import List\n\ndef poly(list_of_coefficients: List[float], point_x: float) -> float:\n    return sum(coeff * point_x**i for i, coeff in enumerate(list_of_coefficients))\n\ndef find_zero(list_of_coefficients: List[float]) -> float:\n    begin, end = -1.0, 1.0\n    val_begin = poly(list_of_coefficients, begin)\n    val_end = poly(list_of_coefficients, end)\n\n    # Expand interval until polynomial values at ends have opposite signs\n    while val_begin * val_end > 0:\n        begin *= 2.0\n        end *= 2.0\n        val_begin = poly(list_of_coefficients, begin)\n        val_end = poly(list_of_coefficients, end)\n\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        val_center = poly(list_of_coefficients, center)\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzgm5e7lb/solution_0.py\", line 33, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzgm5e7lb/solution_0.py\", line 31, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 5:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    SET number_of_groups TO (LENGTH OF input_string + 2) DIVIDED BY 3\n    FOR i FROM 0 TO number_of_groups - 1\n        SET start_index TO 3 * i\n        SET end_index TO MINIMUM OF (3 * i + 3) AND LENGTH OF input_string\n        APPEND SUBSTRING OF input_string FROM start_index TO end_index TO groups\n    FOR EACH group IN groups\n        IF LENGTH OF group IS EQUAL TO 3\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND FIRST CHARACTER OF group\n        ELSE\n            LEAVE group UNCHANGED\n    SET encoded_string TO CONCATENATION OF ALL ELEMENTS IN groups\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_cyclic(input_string)\n    RETURN encode_cyclic(encode_cyclic(input_string))\nEND FUNCTION\n\nDecoded code for Problem 5:\nfrom typing import List\n\ndef encode_cyclic(input_string: str) -> str:\n    groups: List[str] = []\n    length: int = len(input_string)\n    number_of_groups: int = (length + 2) // 3  # Number of groups of up to 3 chars\n\n    for i in range(number_of_groups):\n        start_index: int = 3 * i\n        end_index: int = min(start_index + 3, length)\n        group: str = input_string[start_index:end_index]\n        if len(group) == 3:\n            # Rotate first character to the end\n            group = group[1:] + group[0]\n        groups.append(group)\n\n    encoded_string: str = ''.join(groups)\n    return encoded_string\n\n\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7u2ahbfj/solution_0.py\", line 28, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7u2ahbfj/solution_0.py\", line 26, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 6:\n```\nFUNCTION triangle_area(a, b, c)\n    IF a + b <= c OR a + c <= b OR b + c <= a\n        RETURN -1\n    SET s TO (a + b + c) DIVIDED BY 2\n    SET area TO SQUARE ROOT OF (s * (s - a) * (s - b) * (s - c))\n    SET area TO ROUND area TO 2 DECIMAL PLACES\n    RETURN area\nEND FUNCTION\n```\n\nDecoded code for Problem 6:\nfrom math import sqrt\nfrom typing import Union\n\ndef triangle_area(a: float, b: float, c: float) -> Union[float, int]:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s: float = (a + b + c) / 2\n    area: float = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n\nPseudocode for Problem 7:\n```\nFUNCTION sort_array(array_of_integers)\n    SET array_sorted_by_value TO array_of_integers SORTED IN ASCENDING ORDER\n    SET array_sorted BY number_of_ones TO array_sorted_by_value SORTED BY COUNT OF '1' IN BINARY REPRESENTATION OF EACH ELEMENT\n    RETURN array_sorted BY number_of_ones\nEND FUNCTION\n```\n\nDecoded code for Problem 7:\nfrom typing import List\n\ndef sort_array(array_of_integers: List[int]) -> List[int]:\n    array_sorted_by_value = sorted(array_of_integers)\n    array_sorted_by_number_of_ones = sorted(array_sorted_by_value, key=lambda x: bin(x).count('1'))\n    return array_sorted_by_number_of_ones\n\nPseudocode for Problem 8:\n```\nFUNCTION unique(list_of_elements)\n    CONVERT list_of_elements TO SET TO REMOVE DUPLICATES\n    CONVERT SET BACK TO LIST\n    SORT THE LIST IN ASCENDING ORDER\n    RETURN THE SORTED LIST\nEND FUNCTION\n```\n\nDecoded code for Problem 8:\nfrom typing import List, TypeVar\n\nT = TypeVar('T', bound=object)\n\ndef unique(list_of_elements: List[T]) -> List[T]:\n    return sorted(set(list_of_elements))\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}