{
  "prompt": "Translate the following pseudocode into fully functional, clean, and efficient Python code. Your implementation **must**:\n\n- Preserve exactly the same function names, parameters, class names, and object structures as described in the pseudocode.\n- Use clear and descriptive variable names; include concise comments only if they improve code clarity.\n- Enclose **all** the code within a single Python code block marked with triple backticks and the `python` language identifier:\n\n```python\n# Your translated code here\n```\n\nAdditional requirements:\n- The code must run correctly within 5 seconds and handle edge cases implied by the pseudocode.\n- Include all necessary imports directly in the code block.\n- Do **not** output any textual explanation, test code, or anything outside the code block.\n- Avoid adding any extra text or separator lines.\n\nFocus on producing robust, syntactically correct, and idiomatic Python code that directly reflects the pseudocode logic and structure to maximize test-time success.",
  "response": "Translate the following pseudocode into fully functional, clean, and efficient Python code. Your implementation **must**:\n\n- Preserve exactly the same function names, parameters, class names, and object structures as described in the pseudocode.\n- Use clear and descriptive variable names; include concise comments only if they improve code clarity.\n- Enclose **all** the code within a single Python code block marked with triple backticks and the `python` language identifier:\n\n```python\n# Your translated code here\n```\n\nAdditional requirements:\n- The code must run correctly within 5 seconds and handle edge cases implied by the pseudocode.\n- Include all necessary imports directly in the code block.\n- Do **not** output any textual explanation, test code, or anything outside the code block.\n- Avoid adding any extra text or separator lines.\n\nFocus on producing robust, syntactically correct, and idiomatic Python code that directly reflects the pseudocode logic and structure to maximize test-time success.",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\n```\nFUNCTION change_base(x: INTEGER, base: INTEGER) RETURNS STRING\n    SET ret TO empty string\n    WHILE x > 0 DO\n        SET ret TO string representation of (x MOD base) concatenated before ret\n        SET x TO x integer-divided by base\n    END WHILE\n    RETURN ret\nEND FUNCTION\n```\n\nDecoded code for Problem 1:\ndef change_base(x: int, base: int) -> str:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nError(s) from the decoded code for Problem 1:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzlbl28kn/solution_5.py\", line 11\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 2:\nFUNCTION poly(xs: list, x: float)\n    RETURN sum of (coeff * (x raised to power i)) for each i, coeff in enumeration of xs\n\nFUNCTION find_zero(xs: list)\n    SET begin to -1.0\n    SET end to 1.0\n\n    WHILE poly(xs, begin) multiplied by poly(xs, end) is greater than 0\n        SET begin to begin multiplied by 2.0\n        SET end to end multiplied by 2.0\n\n    WHILE end minus begin is greater than 1e-10\n        SET center to (begin plus end) divided by 2.0\n\n        IF poly(xs, center) multiplied by poly(xs, begin) is greater than 0\n            SET begin to center\n        ELSE\n            SET end to center\n\n    RETURN begin\n\nDecoded code for Problem 2:\nfrom typing import List\n\ndef poly(xs: List[float], x: float) -> float:\n    return sum(coeff * x**i for i, coeff in enumerate(xs))\n\ndef find_zero(xs: List[float]) -> float:\n    begin = -1.0\n    end = 1.0\n\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzozbrwea/solution_0.py\", line 26, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzozbrwea/solution_0.py\", line 24, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 3:\n```\nFUNCTION encode_shift(s)\n    INITIALIZE result AS empty string\n    FOR EACH character ch IN s\n        COMPUTE shifted_value AS ((ASCII(ch) + 5 - ASCII('a')) MOD 26) + ASCII('a')\n        APPEND character REPRESENTED BY shifted_value TO result\n    END FOR\n    RETURN result\nEND FUNCTION\n\nFUNCTION decode_shift(s)\n    INITIALIZE result AS empty string\n    FOR EACH character ch IN s\n        COMPUTE shifted_value AS ((ASCII(ch) - 5 - ASCII('a')) MOD 26) + ASCII('a')\n        APPEND character REPRESENTED BY shifted_value TO result\n    END FOR\n    RETURN result\nEND FUNCTION\n```\n\nDecoded code for Problem 3:\ndef encode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted_value = ((ord(ch) + 5 - ord('a')) % 26) + ord('a')\n        result.append(chr(shifted_value))\n    return ''.join(result)\n\ndef decode_shift(s: str) -> str:\n    result = []\n    for ch in s:\n        shifted_value = ((ord(ch) - 5 - ord('a')) % 26) + ord('a')\n        result.append(chr(shifted_value))\n    return ''.join(result)\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpmabkuris/solution_0.py\", line 18, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpmabkuris/solution_0.py\", line 16, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 4:\nFUNCTION encode_cyclic(s: string)\n    SET groups TO empty list\n    SET group_count TO integer division of (length of s + 2) by 3\n    FOR i FROM 0 TO group_count - 1 DO\n        SET start_index TO 3 * i\n        SET end_index TO minimum of (3 * i + 3) and length of s\n        APPEND substring of s from start_index to end_index TO groups\n    END FOR\n\n    FOR each index FROM 0 TO length of groups - 1 DO\n        SET group TO groups[index]\n        IF length of group EQUALS 3 THEN\n            SET groups[index] TO substring of group from position 1 to end concatenated with first character of group\n        END IF\n    END FOR\n\n    RETURN concatenation of all elements in groups\nEND FUNCTION\n\nFUNCTION decode_cyclic(s: string)\n\nDecoded code for Problem 4:\ndef encode_cyclic(s: str) -> str:\n    groups = []\n    group_count = (len(s) + 2) // 3\n    for i in range(group_count):\n        start_index = 3 * i\n        end_index = min(3 * i + 3, len(s))\n        groups.append(s[start_index:end_index])\n\n    for index in range(len(groups)):\n        group = groups[index]\n        if len(group) == 3:\n            groups[index] = group[1:] + group[0]\n\n    return ''.join(groups)\n\ndef decode_cyclic(s: str) -> str:\n    return encode_cyclic(encode_cyclic(s))\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmphiy5nrgb/solution_0.py\", line 22, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmphiy5nrgb/solution_0.py\", line 20, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 5:\nFUNCTION add(x: Integer, y: Integer) RETURNS Integer\n    RETURN x + y\nEND FUNCTION\n\nDecoded code for Problem 5:\ndef add(x: int, y: int) -> int:\n    return x + y\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpwhirfkb9/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpwhirfkb9/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 6:\n```\nFUNCTION prime_fib(n: Integer) RETURNS Integer\n    FUNCTION is_prime(p: Integer) RETURNS Boolean\n        IF p < 2 THEN\n            RETURN False\n        END IF\n        FOR k FROM 2 TO MINIMUM(FLOOR(SQUARE_ROOT(p)) + 1, p - 1) EXCLUSIVE DO\n            IF p MOD k = 0 THEN\n                RETURN False\n            END IF\n        END FOR\n        RETURN True\n    END FUNCTION\n\n    SET f TO LIST [0, 1]\n\n    WHILE TRUE DO\n        APPEND f WITH (LAST_ELEMENT(f) + SECOND_LAST_ELEMENT(f))\n        IF is_prime(LAST_ELEMENT(f)) THEN\n            DECREMENT n BY 1\n\nDecoded code for Problem 6:\nimport math\n\ndef prime_fib(n: int) -> int:\n    def is_prime(p: int) -> bool:\n        if p < 2:\n            return False\n        limit = min(math.isqrt(p) + 1, p)\n        for k in range(2, limit):\n            if p % k == 0:\n                return False\n        return True\n\n    f = [0, 1]\n\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n\nPseudocode for Problem 7:\nFUNCTION rolling_max(numbers: List of Integer) RETURNS List of Integer\n    SET running_max TO None\n    SET result TO empty list\n\n    FOR each n IN numbers DO\n        IF running_max IS None THEN\n            SET running_max TO n\n        ELSE\n            SET running_max TO maximum of running_max and n\n        END IF\n\n        APPEND running_max TO result\n    END FOR\n\n    RETURN result\nEND FUNCTION\n\nDecoded code for Problem 7:\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n\n    return result\n\nPseudocode for Problem 8:\nFUNCTION is_palindrome(text: string) RETURNS boolean\n    FOR i FROM 0 TO length of text - 1 DO\n        IF text[i] is not equal to text[length of text - 1 - i] THEN\n            RETURN False\n    END FOR\n    RETURN True\nEND FUNCTION\n\nDecoded code for Problem 8:\ndef is_palindrome(text: str) -> bool:\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}