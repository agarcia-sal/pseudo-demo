{
  "prompt": "Translate the provided pseudocode into clean, robust, and idiomatic Python code that is ready for immediate execution. Your translation **must** adhere strictly to the following guidelines:\n\n- Preserve all function names, parameter names, class names, and class/object structures **exactly** as given in the pseudocode.\n- Include **all** necessary imports explicitly at the top of the code within the same Python code block.\n- Use descriptive variable names consistent with the pseudocode. Write concise, meaningful comments only when they clarify non-obvious logic.\n- Implement proper type hints wherever applicable, inferring reasonable Python types from the pseudocode.\n- Handle implied edge cases rigorously to ensure correctness and robustness without compromising readability.\n- Optimize for efficient execution within a 5-second time limit, using appropriate standard library modules or well-known packages if needed.\n- Enclose **all** translated code strictly and only inside a single Python code block formatted as:\n\n```python\n# your translated code here\n```\n\n- Do **not** include any text outside the code block, including explanations, test cases, print statements, or separators.\n\n- Do **not** add extra functions or classes beyond those specified in the pseudocode.\n\nYour output should be a faithful, self-contained Python implementation of the pseudocode logic that maximizes correctness, clarity, and runtime reliability.",
  "response": "Translate the provided pseudocode into clean, robust, and idiomatic Python code that is ready for immediate execution. Your translation **must** adhere strictly to the following guidelines:\n\n- Preserve all function names, parameter names, class names, and class/object structures **exactly** as given in the pseudocode.\n- Include **all** necessary imports explicitly at the top of the code within the same Python code block.\n- Use descriptive variable names consistent with the pseudocode. Write concise, meaningful comments only when they clarify non-obvious logic.\n- Implement proper type hints wherever applicable, inferring reasonable Python types from the pseudocode.\n- Handle implied edge cases rigorously to ensure correctness and robustness without compromising readability.\n- Optimize for efficient execution within a 5-second time limit, using appropriate standard library modules or well-known packages if needed.\n- Enclose **all** translated code strictly and only inside a single Python code block formatted as:\n\n```python\n# your translated code here\n```\n\n- Do **not** include any text outside the code block, including explanations, test cases, print statements, or separators.\n\n- Do **not** add extra functions or classes beyond those specified in the pseudocode.\n\nYour output should be a faithful, self-contained Python implementation of the pseudocode logic that maximizes correctness, clarity, and runtime reliability.",
  "score": 0.9058280028429282,
  "feedback": "The following are 20 lines of pseudocode of a random subset of the problems along with their decoded codes.\n\nPseudocode for Problem 1:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    FOR i FROM 0 TO (LENGTH OF input_string + 2) DIVIDED BY 3 MINUS 1\n        APPEND SUBSTRING OF input_string FROM (3 * i) TO MINIMUM OF (3 * i + 3) AND LENGTH OF input_string TO groups\n    END FOR\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3 THEN\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND character AT INDEX 0\n        END IF\n    END FOR\n    SET encoded_string TO CONCATENATION OF ALL groups\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_cyclic(encoded_string)\n    RETURN encode_cyclic(encode_cyclic(encoded_string))\nEND FUNCTION\n```\n\nDecoded code for Problem 1:\nfrom typing import List\n\n\ndef encode_cyclic(input_string: str) -> str:\n    groups: List[str] = []\n    length: int = len(input_string)\n    group_count: int = (length + 2) // 3  # Integer division\n    for i in range(group_count):\n        start_index = 3 * i\n        end_index = min(3 * i + 3, length)\n        group = input_string[start_index:end_index]\n        groups.append(group)\n    for idx, group in enumerate(groups):\n        if len(group) == 3:\n            groups[idx] = group[1:] + group[0]  # Rotate left by one character\n    encoded_string = ''.join(groups)\n    return encoded_string\n\n\ndef decode_cyclic(encoded_string: str) -> str:\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpiofnpcpq/solution_0.py\", line 26, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpiofnpcpq/solution_0.py\", line 24, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nPseudocode for Problem 2:\n```\nFUNCTION encode_shift(string_input)\n    SET encoded_string TO EMPTY STRING\n    FOR each character IN string_input\n        SET shifted_value TO ((ASCII_CODE(character) PLUS 5 MINUS ASCII_CODE('a')) MODULO 26) PLUS ASCII_CODE('a')\n        APPEND CHARACTER_FROM_ASCII_CODE(shifted_value) TO encoded_string\n    RETURN encoded_string\nEND FUNCTION\n\nFUNCTION decode_shift(string_input)\n    SET decoded_string TO EMPTY STRING\n    FOR each character IN string_input\n        SET shifted_value TO ((ASCII_CODE(character) MINUS 5 MINUS ASCII_CODE('a')) MODULO 26) PLUS ASCII_CODE('a')\n        APPEND CHARACTER_FROM_ASCII_CODE(shifted_value) TO decoded_string\n    RETURN decoded_string\nEND FUNCTION\n```\n\nDecoded code for Problem 2:\nfrom typing import List\n\ndef encode_shift(string_input: str) -> str:\n    encoded_string: str = \"\"\n    for character in string_input:\n        # Assuming input consists of lowercase letters a-z\n        shifted_value = ((ord(character) + 5 - ord('a')) % 26) + ord('a')\n        encoded_string += chr(shifted_value)\n    return encoded_string\n\ndef decode_shift(string_input: str) -> str:\n    decoded_string: str = \"\"\n    for character in string_input:\n        # Assuming input consists of lowercase letters a-z\n        shifted_value = ((ord(character) - 5 - ord('a')) % 26) + ord('a')\n        decoded_string += chr(shifted_value)\n    return decoded_string\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpbuparga0/solution_0.py\", line 22, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpbuparga0/solution_0.py\", line 20, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nPseudocode for Problem 3:\n```\nFUNCTION poly(list_of_coefficients, x_value)\n    RETURN SUM OVER EACH index, coefficient IN list_of_coefficients OF (coefficient MULTIPLIED BY (x_value RAISED TO THE POWER OF index))\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(list_of_coefficients, begin) MULTIPLIED BY poly(list_of_coefficients, end) IS GREATER THAN 0\n        MULTIPLY begin BY 2.0\n        MULTIPLY end BY 2.0\n    WHILE end MINUS begin IS GREATER THAN 1e-10\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n        IF poly(list_of_coefficients, center) MULTIPLIED BY poly(list_of_coefficients, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n    RETURN begin\nEND FUNCTION\n```\n\nDecoded code for Problem 3:\nfrom typing import List\n\ndef poly(list_of_coefficients: List[float], x_value: float) -> float:\n    return sum(coefficient * (x_value ** index) for index, coefficient in enumerate(list_of_coefficients))\n\ndef find_zero(list_of_coefficients: List[float]) -> float:\n    begin: float = -1.0\n    end: float = 1.0\n    p_begin: float = poly(list_of_coefficients, begin)\n    p_end: float = poly(list_of_coefficients, end)\n\n    # Expand the interval until the polynomial values at the bounds have opposite signs\n    while p_begin * p_end > 0:\n        begin *= 2.0\n        end *= 2.0\n        p_begin = poly(list_of_coefficients, begin)\n        p_end = poly(list_of_coefficients, end)\n\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp4k5nr_ig/solution_0.py\", line 34, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp4k5nr_ig/solution_0.py\", line 32, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nPseudocode for Problem 4:\n```\nFUNCTION add(x, y)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nDecoded code for Problem 4:\nfrom typing import Union\n\ndef add(x: Union[int, float], y: Union[int, float]) -> Union[int, float]:\n    return x + y\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpt4l215tz/solution_4.py\", line 11, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpt4l215tz/solution_4.py\", line 10, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nPseudocode for Problem 5:\n```\nFUNCTION change_base(x, base)\n    SET ret TO empty string\n    WHILE x GREATER THAN 0\n        SET ret TO STRING OF (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    RETURN ret\nEND FUNCTION\n```\n\nDecoded code for Problem 5:\nfrom typing import Union\n\ndef change_base(x: int, base: int) -> str:\n    ret: str = ''\n    if x == 0:\n        return '0'\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\nError(s) from the decoded code for Problem 5:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpy8xpmxfm/solution_5.py\", line 15\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nPseudocode for Problem 6:\n```\nFUNCTION sum_product(list_of_integers)\n    SET sum_value TO 0\n    SET product_value TO 1\n    FOR each number IN list_of_integers\n        INCREMENT sum_value BY number\n        MULTIPLY product_value BY number\n    RETURN tuple sum_value, product_value\nEND FUNCTION\n```\n\nDecoded code for Problem 6:\nfrom typing import List, Tuple\n\ndef sum_product(list_of_integers: List[int]) -> Tuple[int, int]:\n    sum_value: int = 0\n    product_value: int = 1\n    for number in list_of_integers:\n        sum_value += number\n        product_value *= number\n    return sum_value, product_value\n\nPseudocode for Problem 7:\n```\nFUNCTION tri(n)\n    IF n EQUALS 0\n        RETURN LIST CONTAINING ELEMENT 1\n    END IF\n\n    SET my_tribonacci_list TO LIST [1, 3]\n\n    FOR i FROM 2 TO n INCLUSIVE\n        IF i MODULO 2 EQUALS 0\n            APPEND (1 + i DIVIDED BY 2) TO my_tribonacci_list\n        ELSE\n            APPEND (my_tribonacci_list[i - 1] + my_tribonacci_list[i - 2] + (i + 3) DIVIDED BY 2) TO my_tribonacci_list\n        END IF\n    END FOR\n\n    RETURN my_tribonacci_list\nEND FUNCTION\n```\n\nDecoded code for Problem 7:\nfrom typing import List\n\ndef tri(n: int) -> List[int]:\n    if n == 0:\n        return [1]\n\n    my_tribonacci_list: List[int] = [1, 3]\n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tribonacci_list.append(1 + i // 2)\n        else:\n            my_tribonacci_list.append(\n                my_tribonacci_list[i - 1] + my_tribonacci_list[i - 2] + ((i + 3) // 2)\n            )\n\n    return my_tribonacci_list\n\nPseudocode for Problem 8:\n```\nFUNCTION flip_case(input_string)\n    RETURN input_string WITH EACH CHARACTER'S CASE SWITCHED BETWEEN LOWERCASE AND UPPERCASE\nEND FUNCTION\n```\n\nDecoded code for Problem 8:\ndef flip_case(input_string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in input_string)\nAvg Passing Rate for ALL the problems: 0.9058280028429282"
}