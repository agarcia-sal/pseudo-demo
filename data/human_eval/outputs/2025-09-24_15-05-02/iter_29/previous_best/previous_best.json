{
  "prompt": "Given a problem's source code, produce a clear, concise, and precise high-level pseudocode that exactly mirrors the original logic, function and class names, and their scopes and nesting hierarchy without any renaming or restructuring. Represent control flow and declarations using uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.). Use consistent, fully spelled-out descriptive phrases employing standard programming and mathematical vocabulary, favoring clarity and unambiguity over brevity. Expand abbreviations only when it improves readability without adding superfluous verbosity. Express data operations and transformations conceptually while including minimal necessary detail for correct understanding. Indent blocks properly to reflect code nesting. Do not add any explanations, comments, summaries, or extra text; output only the pseudocode. Complete output strictly within 5 seconds. Format the pseudocode precisely as in the following example:\n\nIf the code is:\n```python\ndef calc_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    avg = total / len(nums)\n    return avg\n```\n\nThen output:\n```\nFUNCTION calc_average(list_of_numbers)\n    SET total_sum TO 0\n    FOR each number IN list_of_numbers\n        INCREMENT total_sum BY number\n    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers\n    RETURN average_value\nEND FUNCTION\n```",
  "response": "Given a problem's source code, produce a clear, concise, and precise high-level pseudocode that exactly mirrors the original logic, function and class names, and their scopes and nesting hierarchy without any renaming or restructuring. Represent control flow and declarations using uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.). Use consistent, fully spelled-out descriptive phrases employing standard programming and mathematical vocabulary, favoring clarity and unambiguity over brevity. Expand abbreviations only when it improves readability without adding superfluous verbosity. Express data operations and transformations conceptually while including minimal necessary detail for correct understanding. Indent blocks properly to reflect code nesting. Do not add any explanations, comments, summaries, or extra text; output only the pseudocode. Complete output strictly within 5 seconds. Format the pseudocode precisely as in the following example:\n\nIf the code is:\n```python\ndef calc_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    avg = total / len(nums)\n    return avg\n```\n\nThen output:\n```\nFUNCTION calc_average(list_of_numbers)\n    SET total_sum TO 0\n    FOR each number IN list_of_numbers\n        INCREMENT total_sum BY number\n    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers\n    RETURN average_value\nEND FUNCTION\n```",
  "score": 2.597024810918689,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\n\nPseudocode for Problem 1:\n```\nFUNCTION sort_array(array_of_integers)\n    RETURN SORTED LIST OF SORTED array_of_integers IN ASCENDING ORDER BY\n        NUMBER OF ONES IN BINARY REPRESENTATION OF EACH INTEGER\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc4zfxr53/solution_0.py\", line 8, in <module>\\n    check(sort_array)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc4zfxr53/solution_0.py\", line 7, in check\\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\\nAssertionError\\n']\n\nOriginal Code for Problem 2:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 2:\n```\nFUNCTION change_base(x AS INTEGER, base AS INTEGER)\n    SET ret TO empty string\n    WHILE x GREATER THAN 0\n        SET ret TO string of (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    END WHILE\n    RETURN ret\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 2:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp0ezmps1h/solution_5.py\", line 13\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 3:\n    return x + y\n\n\nPseudocode for Problem 3:\n```\nFUNCTION add(x, y)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpe94j7_y0/solution_4.py\", line 11, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpe94j7_y0/solution_4.py\", line 10, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 4:\n```\nFUNCTION poly(list_of_coefficients, value_x)\n    RETURN SUM OF coefficient MULTIPLIED BY value_x RAISED TO THE POWER index FOR EACH index, coefficient IN ENUMERATION OF list_of_coefficients\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin_point TO -1.0\n    SET end_point TO 1.0\n    WHILE poly(list_of_coefficients, begin_point) MULTIPLIED BY poly(list_of_coefficients, end_point) IS GREATER THAN 0\n        MULTIPLY begin_point BY 2.0\n        MULTIPLY end_point BY 2.0\n    END WHILE\n    WHILE end_point MINUS begin_point IS GREATER THAN 0.0000000001\n        SET center_point TO (begin_point PLUS end_point) DIVIDED BY 2.0\n        IF poly(list_of_coefficients, center_point) MULTIPLIED BY poly(list_of_coefficients, begin_point) IS GREATER THAN 0\n            SET begin_point TO center_point\n        ELSE\n            SET end_point TO center_point\n        END IF\n    END WHILE\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc_b8tvst/solution_0.py\", line 29, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc_b8tvst/solution_0.py\", line 27, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 5:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 5:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    FOR index FROM 0 TO (LENGTH OF input_string PLUS 2) DIVIDED BY 3 MINUS 1\n        SET start_position TO 3 MULTIPLIED BY index\n        SET end_position TO MINIMUM OF (3 MULTIPLIED BY index PLUS 3) AND LENGTH OF input_string\n        APPEND SUBSTRING OF input_string FROM start_position TO end_position TO groups\n    END FOR\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM POSITION 1 TO END AND FIRST CHARACTER OF group\n        ELSE\n            LEAVE group UNCHANGED\n        END IF\n    END FOR\n    RETURN CONCATENATION OF ALL groups INTO SINGLE STRING\nEND FUNCTION\n\nFUNCTION decode_cyclic(input_string)\n    RETURN encode_cyclic(encode_cyclic(input_string))\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpp4k9y4ys/solution_0.py\", line 25, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpp4k9y4ys/solution_0.py\", line 23, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 6:\n```\nFUNCTION encode_shift(string_input)\n    RETURN concatenation OF characters WHERE EACH character IS\n        character WITH ASCII CODE EQUAL TO\n            ((ASCII CODE OF character PLUS 5 MINUS ASCII CODE OF 'a') MODULO 26) PLUS ASCII CODE OF 'a'\n        FOR EACH character IN string_input\nEND FUNCTION\n\nFUNCTION decode_shift(string_input)\n    RETURN concatenation OF characters WHERE EACH character IS\n        character WITH ASCII CODE EQUAL TO\n            ((ASCII CODE OF character MINUS 5 MINUS ASCII CODE OF 'a') MODULO 26) PLUS ASCII CODE OF 'a'\n        FOR EACH character IN string_input\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp5fnoo32d/solution_0.py\", line 18, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp5fnoo32d/solution_0.py\", line 16, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 7:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n\n\nPseudocode for Problem 7:\n```\nFUNCTION parse_nested_parens(paren_string)\n    FUNCTION parse_paren_group(string_group)\n        SET current_depth TO 0\n        SET maximum_depth TO 0\n        FOR each character IN string_group\n            IF character IS '('\n                INCREMENT current_depth BY 1\n                SET maximum_depth TO MAXIMUM OF current_depth AND maximum_depth\n            ELSE\n                DECREMENT current_depth BY 1\n        RETURN maximum_depth\n    END FUNCTION\n\n    SET group_strings TO SPLIT paren_string BY SPACE\n    SET result_list TO EMPTY LIST\n    FOR each group_string IN group_strings\n        IF group_string IS NOT EMPTY\n            APPEND parse_paren_group(group_string) TO result_list\n    RETURN result_list\n\nOriginal Code for Problem 8:\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n\n\nPseudocode for Problem 8:\n```\nFUNCTION starts_one_ends(n)\n    IF n EQUALS 1\n        RETURN 1\n    END IF\n    RETURN 18 MULTIPLIED BY 10 RAISED TO THE POWER OF (n MINUS 2)\nEND FUNCTION\n```\nScore of (4*(Average syllables per word) + passing rate) for ALL the problems: 2.597024810918689"
}