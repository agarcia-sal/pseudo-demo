```python
"""
Translate the given pseudocode into a fully self-contained, clean, idiomatic, and efficient Python implementation.
Enclose all code strictly within one Python code block, as shown below:

```python
# your translated code here
```

Follow these mandatory instructions precisely and without exception:

1. Preserve all function names, parameter names, class names, and overall class/object structures exactly as given in the pseudocode.
   Do not rename or add any functions, classes, or methods beyond those explicitly described.

2. Include all necessary imports explicitly at the very top of the code block.
   You may use any standard library or widely accepted third-party Python packages if they improve correctness,
   clarity, or runtime performance — but do so judiciously and only as needed.

3. Apply explicit and precise Python type hints for all functions, variables, and return values.
   Infer types logically from the pseudocode, using appropriate constructs from the typing module (e.g., List, Tuple, Union, Optional).

4. Use clear, descriptive variable names consistent with the pseudocode identifiers.
   Avoid vague or placeholder names.
   Add concise comments only where the logic is subtle or may be unclear to an experienced Python programmer.

5. Robustly handle all implicit or edge cases such as empty inputs, zero values, invalid parameters, or unexpected data,
   implementing proper error handling (e.g., raise ValueError) or safe defaults as logically appropriate.
   Strive to guarantee correctness and prevent runtime failures without unnecessarily complicating or degrading code readability.

6. Optimize your code to balance clarity, maintainability, and runtime efficiency.
   Ensure all implementations reliably complete within a 5-second time budget on typical input sizes.
   Prefer Python built-ins, standard library utilities, and well-known algorithms over manual or naive implementations.
   Use idiomatic constructs such as comprehensions, generator expressions, built-in functions (map, filter, zip), and standard modules.

7. Do not include any output unrelated to the function implementations:
   - No print statements or logging.
   - No example usages or test harness code.
   - No interactive input/output or debugging artifacts.
   - No explanatory text or separator lines outside the code block.

8. The entire output must strictly consist only of the single Python code block below — no preceding or trailing text.

Deliver a faithful, polished, production-ready Python translation that exactly mirrors the pseudocode’s intent,
maximizes correctness and efficiency, applies best Pythonic practices, and preserves original naming and structure.
``` 
```