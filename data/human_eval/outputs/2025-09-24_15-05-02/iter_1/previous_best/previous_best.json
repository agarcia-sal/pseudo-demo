{
  "prompt": "Given a problem description, generate concise, easy-to-read pseudocode that uses natural language combined with symbolic notation. The pseudocode should be compact, high-level, and prefer one-liners, abbreviations, and symbolic operations. Do not include any purpose, summary, overview, notes, comments, or explanations\u2014only the pseudocode itself. Ensure clarity and understandability within the pseudocode using readable structure and indentation where appropriate. Your response must complete within 5 seconds.",
  "response": "Given a problem description, generate concise, easy-to-read pseudocode that uses natural language combined with symbolic notation. The pseudocode should be compact, high-level, and prefer one-liners, abbreviations, and symbolic operations. Do not include any purpose, summary, overview, notes, comments, or explanations\u2014only the pseudocode itself. Ensure clarity and understandability within the pseudocode using readable structure and indentation where appropriate. Your response must complete within 5 seconds.",
  "score": 1.7502241096008837,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    while b:\n        a, b = b, a % b\n    return a\n\n\nPseudocode for Problem 1:\n```\nfn gcd(a,b):\n  while b \u2260 0: a,b \u2190 b, a % b\n  return a\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp02moiw88/solution_0.py\", line 8, in <module>\\n    check(greatest_common_divisor)\\nNameError: name \\'greatest_common_divisor\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n\n\nPseudocode for Problem 2:\n```\ncoords = [(i, j) for i \u2208 [0..len(lst)-1], j \u2208 [0..len(lst[i])-1] if lst[i][j] = x]\nreturn sort(sort(coords, by: col \u2193), by: row \u2191)\n```\n\nError(s) from the decoded code for Problem 2:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpkw250pwg/solution_0.py\", line 3\\n    return sorted(coords, key=lambda c: (c[0], -c[1]))\\n    ^\\nSyntaxError: \\'return\\' outside function\\n']\n\nOriginal Code for Problem 3:\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n\nPseudocode for Problem 3:\n```\nfor i in 0..|l|-3:\n  for j in i+1..|l|-2:\n    for k in j+1..|l|-1:\n      if l[i]+l[j]+l[k] = 0: return True\nreturn False\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp0tegb9d0/solution_0.py\", line 12, in <module>\\n    check(triples_sum_to_zero)\\nNameError: name \\'triples_sum_to_zero\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n\n\nPseudocode for Problem 4:\n```\nif m < n: return -1\nsum \u2190 \u03a3 i\u2208[n..m] i\navg \u2190 round(sum \u00f7 (m - n + 1))\nreturn bin(avg)\n```\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpugs81qb0/solution_0.py\", line 10, in <module>\\n    check(rounded_avg)\\nNameError: name \\'rounded_avg\\' is not defined\\n']\n\nOriginal Code for Problem 5:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 5:\n```\nencode_shift(s) = join(chr(((ord(c)+5 - ord('a')) % 26) + ord('a')) for c in s)\n\ndecode_shift(s) = join(chr(((ord(c)-5 - ord('a')) % 26) + ord('a')) for c in s)\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpa5xqni5v/solution_0.py\", line 10, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpa5xqni5v/solution_0.py\", line 8, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n\n\nPseudocode for Problem 6:\n```\ncheck(s): val=0; for c in s: val+=(1 if c=='(' else -1); if val<0: return False; return val==0\nmatch_parens(lst): S1=lst[0]+lst[1]; S2=lst[1]+lst[0]; return 'Yes' if check(S1) or check(S2) else 'No'\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr7u1e7g_/solution_0.py\", line 16, in <module>\\n    check(match_parens)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr7u1e7g_/solution_0.py\", line 15, in check\\n    assert candidate([\\'()(\\', \\')\\']) == \\'Yes\\'\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr7u1e7g_/solution_0.py\", line 13, in match_parens\\n    return \\'Yes\\' if check(S1) or check(S2) else \\'No\\'\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr7u1e7g_/solution_0.py\", line 15, in check\\n    assert candidate([\\'()(\\', \\')\\']) == \\'Yes\\'\\nTypeError: \\'str\\' object is not callable\\n']\n\nOriginal Code for Problem 7:\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n\n\nPseudocode for Problem 7:\n```\nfreq = array of 0s size max(lst)+1\nfor x in lst: freq[x] += 1\nans = -1\nfor i in 1 to len(freq)-1: if freq[i] >= i: ans = i\nreturn ans\n```\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpto_z30fw/solution_0.py\", line 13, in <module>\\n    check(search)\\nNameError: name \\'search\\' is not defined\\n']\n\nOriginal Code for Problem 8:\n    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n\n\nPseudocode for Problem 8:\n```\nreverse_delete(s,c) = \n  s \u2190 ''.join(char \u2208 s | char \u2209 c)\n  (s, s = s[::-1])\n```\n\nError(s) from the decoded code for Problem 8:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7dc4tpca/solution_0.py\", line 7, in <module>\\n    check(reverse_delete)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7dc4tpca/solution_0.py\", line 6, in check\\n    assert candidate(\"abcde\",\"ae\") == (\\'bcd\\',False)\\nAssertionError\\n']\nScore of (4*(Average syllables per word) + passing rate) for ALL the problems: 1.7502241096008837"
}