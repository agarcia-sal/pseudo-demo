Given the source code of a problem, generate its corresponding high-level, clear, and precise pseudocode following these strict requirements:  

- Preserve all original function and class names exactly as in the code. Maintain all class/object hierarchies, scopes, and nesting structures without any alteration.  
- Express all control flow constructs with full uppercase keywords: FUNCTION, CLASS, IF, ELSE, ELIF, FOR, WHILE, RETURN, BREAK, CONTINUE, TRY, EXCEPT, FINALLY, etc.  
- Indent blocks consistently to reflect the exact code hierarchy and nesting. Use 4 spaces per indentation level.  
- Use descriptive yet concise, natural language and standard programming and mathematical notation. Expand abbreviations only if it improves clarity, but avoid verbose or redundant phrasing.  
- Abstract details to convey the conceptual operations and data transformations without low-level implementation specifics, except where necessary for correctness and unambiguity.  
- Represent data structures clearly (e.g., list_of_numbers, map_of_keys_to_values). Specify iteration explicitly and unambiguously (e.g., FOR each element IN collection).  
- Express arithmetic and logical operations using natural language combined with standard operators (PLUS, MINUS, MULTIPLIED BY, DIVIDED BY, MODULO, EQUALS, GREATER THAN, IS EMPTY, etc.) for readability.  
- Preserve string operations, indexing, slicing, and concatenations unambiguously with clear references to indices or substrings.  
- Avoid adding comments, explanations, summaries, or any text besides the pseudocode itself.  
- Do not include any separators, headers, or footers. Output only the pseudocode content.  
- Complete the output within 5 seconds.

Example:  

If the code is:  
```python  
def calc_average(nums):  
    total = 0  
    for num in nums:  
        total += num  
    avg = total / len(nums)  
    return avg  
```  

Then output:  
```
FUNCTION calc_average(list_of_numbers)  
    SET total TO 0  
    FOR each number IN list_of_numbers  
        INCREMENT total BY number  
    SET average TO total DIVIDED BY LENGTH OF list_of_numbers  
    RETURN average  
END FUNCTION  
```