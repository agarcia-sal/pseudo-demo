Given a problem's source code, generate clear, high-level pseudocode that faithfully preserves all function and class names, maintaining original class and object structures, scopes, and nesting. Use descriptive yet concise natural language commands combined with standard mathematical and programming symbols where appropriate. Emphasize readability and correctness over extreme brevityâ€”expand abbreviations only if they improve clarity. Write pseudocode in a consistent, unambiguous style using full words for control flow (e.g., FUNCTION, IF, FOR, WHILE, RETURN), proper indentation to show structure, and avoid overly compact one-liners that obscure meaning. Do not add explanations, comments, summaries, or any text outside the pseudocode itself. Do not alter the logic or change the signature of any function or class. The output must be pseudocode only, ready to be understood as a direct and correct abstraction of the original code, and complete within 5 seconds.