{
  "prompt": "Given a problem's source code, generate clear, high-level pseudocode that faithfully preserves all function and class names, maintaining original class and object structures, scopes, and nesting. Use descriptive yet concise natural language commands combined with standard mathematical and programming symbols where appropriate. Emphasize readability and correctness over extreme brevity\u2014expand abbreviations only if they improve clarity. Write pseudocode in a consistent, unambiguous style using full words for control flow (e.g., FUNCTION, IF, FOR, WHILE, RETURN), proper indentation to show structure, and avoid overly compact one-liners that obscure meaning. Do not add explanations, comments, summaries, or any text outside the pseudocode itself. Do not alter the logic or change the signature of any function or class. The output must be pseudocode only, ready to be understood as a direct and correct abstraction of the original code, and complete within 5 seconds.",
  "response": "Given a problem's source code, generate clear, high-level pseudocode that faithfully preserves all function and class names, maintaining original class and object structures, scopes, and nesting. Use descriptive yet concise natural language commands combined with standard mathematical and programming symbols where appropriate. Emphasize readability and correctness over extreme brevity\u2014expand abbreviations only if they improve clarity. Write pseudocode in a consistent, unambiguous style using full words for control flow (e.g., FUNCTION, IF, FOR, WHILE, RETURN), proper indentation to show structure, and avoid overly compact one-liners that obscure meaning. Do not add explanations, comments, summaries, or any text outside the pseudocode itself. Do not alter the logic or change the signature of any function or class. The output must be pseudocode only, ready to be understood as a direct and correct abstraction of the original code, and complete within 5 seconds.",
  "score": 2.1019058564220883,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return x + y\n\n\nPseudocode for Problem 1:\nFUNCTION add(x: Integer, y: Integer) RETURNS Integer\n    RETURN x + y\nEND FUNCTION\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjzuhjd0o/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjzuhjd0o/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 2:\nFUNCTION change_base(x: INTEGER, base: INTEGER) RETURNS STRING\n    INITIALIZE result AS empty STRING\n    WHILE x > 0 DO\n        SET remainder TO x MOD base\n        PREPEND string representation of remainder TO result\n        SET x TO integer division of x BY base\n    END WHILE\n    RETURN result\nEND FUNCTION\n\nError(s) from the decoded code for Problem 2:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprvx67cmq/solution_5.py\", line 12\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 3:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 3:\n```\nFUNCTION poly(xs: list, x: float)\n    RETURN sum of (coeff * (x raised to the power i)) for each index i and coefficient coeff in xs\n\nFUNCTION find_zero(xs: list)\n    SET begin TO -1.0\n    SET end TO 1.0\n\n    WHILE poly(xs, begin) multiplied by poly(xs, end) is greater than 0\n        SET begin TO begin multiplied by 2.0\n        SET end TO end multiplied by 2.0\n\n    WHILE difference between end and begin is greater than 1e-10\n        SET center TO average of begin and end\n        IF poly(xs, center) multiplied by poly(xs, begin) is greater than 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n\n    RETURN begin\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmperlhyebr/solution_0.py\", line 24, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmperlhyebr/solution_0.py\", line 22, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 4:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 4:\nFUNCTION encode_cyclic(s: STRING) RETURNS STRING\n    SET groups TO empty LIST OF STRING\n    SET number_of_groups TO integer division of (length of s + 2) by 3\n    FOR i FROM 0 TO number_of_groups - 1 DO\n        SET start_index TO 3 * i\n        SET end_index TO minimum of (3 * i + 3) and length of s\n        APPEND substring of s from start_index up to end_index TO groups\n    END FOR\n\n    FOR EACH group IN groups DO\n        IF length of group EQUALS 3 THEN\n            REPLACE group WITH concatenation of substring of group from index 1 to end AND character at index 0\n        END IF\n    END FOR\n\n    RETURN concatenation of all groups as STRING\nEND FUNCTION\n\n\nFUNCTION decode_cyclic(s: STRING) RETURNS STRING\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpds4gm6wm/solution_0.py\", line 22, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpds4gm6wm/solution_0.py\", line 20, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 5:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 5:\nFUNCTION encode_shift(s: string)\n    INITIALIZE result as empty string\n    FOR EACH character ch IN s\n        COMPUTE shifted_value = ((ASCII value of ch + 5 - ASCII value of \"a\") MODULO 26) + ASCII value of \"a\"\n        APPEND character corresponding to shifted_value TO result\n    END FOR\n    RETURN result\nEND FUNCTION\n\nFUNCTION decode_shift(s: string)\n    INITIALIZE result as empty string\n    FOR EACH character ch IN s\n        COMPUTE shifted_value = ((ASCII value of ch - 5 - ASCII value of \"a\") MODULO 26) + ASCII value of \"a\"\n        APPEND character corresponding to shifted_value TO result\n    END FOR\n    RETURN result\nEND FUNCTION\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr8pdjjc3/solution_0.py\", line 18, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpr8pdjjc3/solution_0.py\", line 16, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n\n\nPseudocode for Problem 6:\nFUNCTION modp(n: INTEGER, p: INTEGER) RETURNS INTEGER\n    SET ret TO 1\n    FOR i FROM 0 TO n - 1 DO\n        SET ret TO (2 * ret) MOD p\n    END FOR\n    RETURN ret\nEND FUNCTION\n\nOriginal Code for Problem 7:\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n\nPseudocode for Problem 7:\n```\nFUNCTION sort_third(l: list)\n    SET l TO a copy of l\n    SET elements_at_multiples_of_three TO the elements of l at indices divisible by 3\n    SORT elements_at_multiples_of_three in ascending order\n    REPLACE elements in l at indices divisible by 3 with elements_at_multiples_of_three\n    RETURN l\n```\n\nOriginal Code for Problem 8:\n    while b:\n        a, b = b, a % b\n    return a\n\n\nPseudocode for Problem 8:\nFUNCTION greatest_common_divisor(a: Integer, b: Integer) -> Integer\n    WHILE b \u2260 0 DO\n        SET temp TO b\n        SET b TO a MODULO b\n        SET a TO temp\n    END WHILE\n    RETURN a\nEND FUNCTION\nScore of (4*(Average syllables per word) + passing rate) for ALL the problems: 2.1019058564220883"
}