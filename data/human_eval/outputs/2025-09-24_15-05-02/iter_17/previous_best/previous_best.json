{
  "prompt": "Given a problem's source code, generate clear, precise, and high-level pseudocode that directly corresponds to the original logic and structure. Preserve all original function and class names exactly, maintaining all class/object hierarchies, scopes, and nesting without any alteration. Express control flow with full uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.), indent blocks properly to reflect code structure, and use descriptive natural language combined with standard programming and mathematical notation consistently. Prefer clarity by expanding abbreviations only when it improves understanding, but avoid unnecessary verbosity. Represent operations and data transformations at a conceptual level without implementation details except when necessary for correctness. Do not include comments, explanations, summaries, or any text other than the pseudocode itself. Complete the output strictly within 5 seconds. The pseudocode should be a faithful, unambiguous, and runnable abstraction of the original code, formatted as in the following example:\n\nIf the code is:\n```python\ndef calc_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    avg = total / len(nums)\n    return avg\n```\n\nThen output:\n```\nFUNCTION calc_average(list_of_numbers)\n    SET total_sum TO 0\n    FOR each number IN list_of_numbers\n        INCREMENT total_sum BY number\n    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers\n    RETURN average_value\nEND FUNCTION\n```",
  "response": "Given a problem's source code, generate clear, precise, and high-level pseudocode that directly corresponds to the original logic and structure. Preserve all original function and class names exactly, maintaining all class/object hierarchies, scopes, and nesting without any alteration. Express control flow with full uppercase keywords (FUNCTION, CLASS, IF, ELSE, FOR, WHILE, RETURN, etc.), indent blocks properly to reflect code structure, and use descriptive natural language combined with standard programming and mathematical notation consistently. Prefer clarity by expanding abbreviations only when it improves understanding, but avoid unnecessary verbosity. Represent operations and data transformations at a conceptual level without implementation details except when necessary for correctness. Do not include comments, explanations, summaries, or any text other than the pseudocode itself. Complete the output strictly within 5 seconds. The pseudocode should be a faithful, unambiguous, and runnable abstraction of the original code, formatted as in the following example:\n\nIf the code is:\n```python\ndef calc_average(nums):\n    total = 0\n    for num in nums:\n        total += num\n    avg = total / len(nums)\n    return avg\n```\n\nThen output:\n```\nFUNCTION calc_average(list_of_numbers)\n    SET total_sum TO 0\n    FOR each number IN list_of_numbers\n        INCREMENT total_sum BY number\n    SET average_value TO total_sum DIVIDED BY LENGTH OF list_of_numbers\n    RETURN average_value\nEND FUNCTION\n```",
  "score": 2.511719177477084,
  "feedback": "The following are 20 lines of original code of a random subset of the problems along with their pseudocodes.\n\nOriginal Code for Problem 1:\n    return encode_cyclic(encode_cyclic(s))\n\n\nPseudocode for Problem 1:\n```\nFUNCTION encode_cyclic(input_string)\n    SET groups TO EMPTY LIST\n    FOR i FROM 0 TO (LENGTH OF input_string + 2) DIVIDED BY 3 MINUS 1\n        SET start_index TO 3 TIMES i\n        SET end_index TO MINIMUM OF (3 TIMES i + 3) AND LENGTH OF input_string\n        APPEND SUBSTRING OF input_string FROM start_index TO end_index TO groups\n    END FOR\n    FOR EACH group IN groups\n        IF LENGTH OF group EQUALS 3\n            REPLACE group WITH CONCATENATION OF SUBSTRING OF group FROM INDEX 1 TO END AND group[0]\n        END IF\n    END FOR\n    RETURN JOIN ALL elements IN groups INTO SINGLE STRING\nEND FUNCTION\n\nFUNCTION decode_cyclic(encoded_string)\n    RETURN encode_cyclic(encode_cyclic(encoded_string))\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmptestlk2k/solution_0.py\", line 22, in <module>\\n    check(decode_cyclic)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmptestlk2k/solution_0.py\", line 20, in check\\n    assert candidate(encoded_str) == str\\nNameError: name \\'encoded_str\\' is not defined\\n']\n\nOriginal Code for Problem 2:\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n\n\nPseudocode for Problem 2:\n```\nFUNCTION add(list_of_integers)\n    RETURN SUM OF elements AT indices i WHERE i STARTS FROM 1 TO LENGTH OF list_of_integers BY 2 AND element IS EVEN\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp0kqg_bc_/solution_0.py\", line 8, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp0kqg_bc_/solution_0.py\", line 7, in check\\n    assert candidate([4, 88]) == 88\\nAssertionError\\n']\n\nOriginal Code for Problem 3:\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n\n\nPseudocode for Problem 3:\n```\nFUNCTION sort_array(array_of_integers)\n    RETURN array_of_integers SORTED BY\n        FIRST: the decimal value in ascending order\n        THEN: the count of ones in the binary representation in ascending order\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpd1vprk48/solution_0.py\", line 8, in <module>\\n    check(sort_array)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpd1vprk48/solution_0.py\", line 7, in check\\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\\nAssertionError\\n']\n\nOriginal Code for Problem 4:\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n\nPseudocode for Problem 4:\n```\nFUNCTION change_base(x, base)\n    SET ret TO empty string\n    WHILE x GREATER THAN 0\n        SET ret TO STRING OF (x MODULO base) CONCATENATED WITH ret\n        SET x TO x INTEGER DIVIDED BY base\n    RETURN ret\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 4:\n['  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp5n_a0tgb/solution_5.py\", line 13\\n    check(change_base)\\nIndentationError: expected an indented block\\n']\n\nOriginal Code for Problem 5:\n    return x + y\n\n\nPseudocode for Problem 5:\n```\nFUNCTION add(x, y)\n    RETURN x PLUS y\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7afs2m7h/solution_4.py\", line 9, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp7afs2m7h/solution_4.py\", line 8, in check\\n    x, y = random.randint(0, 1000), random.randint(0, 1000)\\nNameError: name \\'random\\' is not defined\\n']\n\nOriginal Code for Problem 6:\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n\n\nPseudocode for Problem 6:\n```\nFUNCTION poly(list_of_coefficients, x_value)\n    RETURN SUM OF (coefficient MULTIPLIED BY (x_value RAISED TO power)) FOR EACH power, coefficient IN ENUMERATE(list_of_coefficients)\nEND FUNCTION\n\nFUNCTION find_zero(list_of_coefficients)\n    SET begin TO -1.0\n    SET end TO 1.0\n    WHILE poly(list_of_coefficients, begin) MULTIPLIED BY poly(list_of_coefficients, end) IS GREATER THAN 0\n        MULTIPLY begin BY 2.0\n        MULTIPLY end BY 2.0\n    END WHILE\n    WHILE end MINUS begin IS GREATER THAN 1e-10\n        SET center TO (begin PLUS end) DIVIDED BY 2.0\n        IF poly(list_of_coefficients, center) MULTIPLIED BY poly(list_of_coefficients, begin) IS GREATER THAN 0\n            SET begin TO center\n        ELSE\n            SET end TO center\n        END IF\n    END WHILE\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpn2dii8p0/solution_0.py\", line 23, in <module>\\n    check(find_zero)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpn2dii8p0/solution_0.py\", line 21, in check\\n    assert math.fabs(poly(coeffs, solution)) < 1e-4\\nNameError: name \\'coeffs\\' is not defined\\n']\n\nOriginal Code for Problem 7:\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nPseudocode for Problem 7:\n```\nFUNCTION encode_shift(input_string)\n    SET encoded_characters TO EMPTY LIST\n    FOR each character IN input_string\n        SET shifted_code TO ((ASCII_VALUE(character) + 5 - ASCII_VALUE('a')) MOD 26) + ASCII_VALUE('a')\n        APPEND CHARACTER REPRESENTED BY shifted_code TO encoded_characters\n    END FOR\n    RETURN CONCATENATION OF encoded_characters\nEND FUNCTION\n\nFUNCTION decode_shift(encoded_string)\n    SET decoded_characters TO EMPTY LIST\n    FOR each character IN encoded_string\n        SET shifted_code TO ((ASCII_VALUE(character) - 5 - ASCII_VALUE('a')) MOD 26) + ASCII_VALUE('a')\n        APPEND CHARACTER REPRESENTED BY shifted_code TO decoded_characters\n    END FOR\n    RETURN CONCATENATION OF decoded_characters\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxbqlu80/solution_0.py\", line 19, in <module>\\n    check(decode_shift)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpaxbqlu80/solution_0.py\", line 17, in check\\n    assert candidate(copy.deepcopy(encoded_str)) == str\\nNameError: name \\'copy\\' is not defined\\n']\n\nOriginal Code for Problem 8:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n\n\nPseudocode for Problem 8:\n```\nFUNCTION intersperse(numbers, delimeter)\n    IF numbers IS EMPTY\n        RETURN EMPTY LIST\n    END IF\n\n    SET result TO EMPTY LIST\n\n    FOR each element n IN ALL ELEMENTS OF numbers EXCEPT LAST\n        APPEND n TO result\n        APPEND delimeter TO result\n    END FOR\n\n    APPEND LAST ELEMENT OF numbers TO result\n\n    RETURN result\nEND FUNCTION\n```\nScore of (4*(Average syllables per word) + passing rate) for ALL the problems: 2.511719177477084"
}