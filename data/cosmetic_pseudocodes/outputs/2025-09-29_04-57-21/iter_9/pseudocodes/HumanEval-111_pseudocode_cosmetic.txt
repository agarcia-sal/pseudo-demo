```
FUNCTION histogram(test_string)
  DECLARE counts_map AS empty dictionary
  DECLARE tokens AS SPLIT test_string BY ' '
  DECLARE highest_frequency AS -1

  SET index TO 0
  WHILE index LESS THAN LENGTH(tokens)
    DECLARE current_token AS tokens[index]
    IF current_token NOT EQUAL TO ''
      DECLARE occurrences AS 0
      DECLARE inner_index AS 0
      WHILE inner_index LESS THAN LENGTH(tokens)
        IF tokens[inner_index] EQUALS current_token
          INCREMENT occurrences BY 1
        SET inner_index TO inner_index + 1
      END WHILE

      IF highest_frequency LESS THAN occurrences
        SET highest_frequency TO occurrences
    END IF
    SET index TO index + 1
  END WHILE

  IF highest_frequency GREATER THAN 0
    SET idx TO 0
    WHILE idx LESS THAN LENGTH(tokens)
      DECLARE token_at_idx AS tokens[idx]
      IF token_at_idx NOT EQUAL TO ''
        DECLARE occur_count AS 0
        DECLARE search_idx AS 0
        WHILE search_idx LESS THAN LENGTH(tokens)
          IF tokens[search_idx] EQUALS token_at_idx 
            INCREMENT occur_count BY 1
          SET search_idx TO search_idx + 1
        END WHILE

        IF occur_count EQUALS highest_frequency
          SET counts_map[token_at_idx] TO highest_frequency
        END IF
      END IF
      SET idx TO idx + 1
    END WHILE
  END IF

  RETURN counts_map
END FUNCTION
```