```
FUNCTION encode_cyclic(input_string)
	groups_collection ← []
	counter ← 0
	limit ← ((LENGTH input_string + 2) DIV 3)
	WHILE counter < limit
		start_idx ← counter * 3
		end_idx ← start_idx + 3
		IF end_idx > LENGTH input_string THEN
			end_idx ← LENGTH input_string
		END IF
		APPEND SUBSTRING input_string FROM start_idx TO end_idx TO groups_collection
		counter ← counter + 1
	END WHILE

	transformed_groups ← []
	index ← 0
	WHILE index < LENGTH groups_collection
		item ← groups_collection[index]
		IF NOT (LENGTH item != 3)
			cyclic_shift ← (SUBSTRING item FROM 1 TO END) + (SUBSTRING item FROM 0 TO 1)
			APPEND cyclic_shift TO transformed_groups
		ELSE
			APPEND item TO transformed_groups
		END IF
		index ← index + 1
	END WHILE
	
	concatenated_output ← ""
	for element IN transformed_groups
		concatenated_output ← concatenated_output + element
	END FOR
	
	RETURN concatenated_output
END FUNCTION

FUNCTION decode_cyclic(input_string)
	RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```