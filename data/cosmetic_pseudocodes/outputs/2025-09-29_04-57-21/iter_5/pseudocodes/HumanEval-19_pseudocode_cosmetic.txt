```
FUNCTION sort_numbers(identifier_phrase)
    INITIALIZE digit_values AS EMPTY MAP
    ASSIGN digit_values['nine'] = 9
    ASSIGN digit_values['four'] = 4
    ASSIGN digit_values['three'] = 3
    ASSIGN digit_values['zero'] = 0
    ASSIGN digit_values['five'] = 5
    ASSIGN digit_values['two'] = 2
    ASSIGN digit_values['eight'] = 8
    ASSIGN digit_values['seven'] = 7
    ASSIGN digit_values['six'] = 6
    ASSIGN digit_values['one'] = 1

    DECLARE tokens = []
    DECLARE pos = 1

    WHILE pos <= LENGTH(identifier_phrase)
        SET start_pos = pos
        LOOP UNTIL pos > LENGTH(identifier_phrase) OR identifier_phrase[pos] = ' '
            INCREMENT pos BY 1
        END LOOP
        IF start_pos < pos THEN
            APPEND SUBSTRING(identifier_phrase, start_pos, pos - 1) TO tokens
        ENDIF
        INCREMENT pos BY 1
    END WHILE

    DECLARE ordering = FUNCTION(x, y)
        RETURN (digit_values[x] - digit_values[y]) < 0
    END FUNCTION

    DECLARE index_outer = 1
    WHILE index_outer < LENGTH(tokens)
        DECLARE index_inner = index_outer + 1
        WHILE index_inner <= LENGTH(tokens)
            IF NOT ordering(tokens[index_outer], tokens[index_inner]) THEN
                SWAP tokens[index_outer], tokens[index_inner]
            ENDIF
            INCREMENT index_inner BY 1
        END WHILE
        INCREMENT index_outer BY 1
    END WHILE

    DECLARE result = ""
    DECLARE first_flag = TRUE
    FOR EACH element IN tokens
        IF NOT first_flag THEN
            result = result + " "
        ELSE
            first_flag = FALSE
        ENDIF
        result = result + element
    END FOR

    RETURN result
END FUNCTION
```