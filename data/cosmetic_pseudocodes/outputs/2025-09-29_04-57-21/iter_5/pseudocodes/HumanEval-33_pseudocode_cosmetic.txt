```
FUNCTION sort_third(list_input)
    LET auxiliary_list BE AN EMPTY LIST
    FOR EACH element WITH index idx IN list_input DO
        IF idx MOD 3 = 0 THEN
            APPEND element TO auxiliary_list
        END IF
    END FOR

    DEFINE recursive_sort(arr)
        IF LENGTH(arr) <= 1 THEN
            RETURN arr
        END IF
        LET pivot BE arr[0]
        LET less_partition BE recursive_sort(FILTER(arr, x -> x < pivot))
        LET equal_partition BE FILTER(arr, x -> x = pivot)
        LET greater_partition BE recursive_sort(FILTER(arr, x -> x > pivot))
        RETURN CONCATENATE(less_partition, equal_partition, greater_partition)
    END DEFINE

    LET sorted_auxiliary BE recursive_sort(auxiliary_list)

    LET result_list BE COPY_OF(list_input)

    LET replacement_counter BE 0
    FOR pos FROM 0 TO LENGTH(result_list) - 1 DO
        IF (pos MOD 3) = 0 THEN
            result_list[pos] ← sorted_auxiliary[replacement_counter]
            replacement_counter ← replacement_counter + 1
        END IF
    END FOR

    RETURN result_list
END FUNCTION
```