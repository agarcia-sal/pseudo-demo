```
FUNCTION even_odd_palindrome(n)
    FUNCTION is_palindrome(number)
        reversed_str := ""
        index := LENGTH(TO_STRING(number)) - 1

        WHILE index >= 0 DO
            reversed_str := CONCATENATE(reversed_str, TO_STRING(number)[index])
            index := index - 1
        END WHILE

        RETURN TO_STRING(number) = reversed_str
    END FUNCTION

    odd_counter := 0
    even_counter := 0

    PROCEDURE process_number(x)
        IF NOT is_palindrome(x)
            RETURN
        END IF

        IF x MOD 2 != 0 THEN
            odd_counter := odd_counter + 1
            RETURN
        END IF

        even_counter := even_counter + 1
    END PROCEDURE

    FUNCTION iterate(current)
        IF current > n THEN
            RETURN
        END IF

        process_number(current)
        iterate(current + 1)
    END FUNCTION

    iterate(1)

    RETURN (even_counter, odd_counter)
END FUNCTION
```