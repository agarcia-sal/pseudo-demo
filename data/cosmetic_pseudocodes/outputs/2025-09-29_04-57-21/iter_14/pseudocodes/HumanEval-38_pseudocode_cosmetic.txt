```
FUNCTION encode_cyclic(input_string)
    INITIALIZE segments AS empty list
    SET position TO 0
    WHILE position < LENGTH OF input_string
        SET end_bound TO position + 3
        IF end_bound > LENGTH OF input_string
            SET end_bound TO LENGTH OF input_string
        END IF
        APPEND SUBSTRING OF input_string FROM position TO end_bound TO segments
        SET position TO position + 3
    END WHILE

    INITIALIZE transformed_segments AS empty list
    SET segment_ptr TO 0
    WHILE segment_ptr < LENGTH OF segments
        SET current_segment TO segments[segment_ptr]
        IF NOT (LENGTH OF current_segment != 3)
            SET rearranged TO CONCATENATE(SUBSTRING OF current_segment FROM 1 TO END, SUBSTRING OF current_segment FROM 0 TO 1)
            APPEND rearranged TO transformed_segments
        ELSE
            APPEND current_segment TO transformed_segments
        END IF
        SET segment_ptr TO segment_ptr + 1
    END WHILE

    INITIALIZE result_string AS EMPTY STRING
    FOR EACH segment_element IN transformed_segments
        SET result_string TO result_string + segment_element
    END FOR

    RETURN result_string
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```