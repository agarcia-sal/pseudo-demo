```
FUNCTION sort_numbers(string_of_number_words)
    SET numeral_values TO DICTIONARY MAPPING
        'zero' TO 0,
        'one' TO 1,
        'two' TO 2,
        'three' TO 3,
        'four' TO 4,
        'five' TO 5,
        'six' TO 6,
        'seven' TO 7,
        'eight' TO 8,
        'nine' TO 9

    SET extracted_terms TO EMPTY LIST
    FOR pos FROM 0 WHILE pos < LENGTH(string_of_number_words) DO
        SET start_idx TO pos
        WHILE pos < LENGTH(string_of_number_words) AND string_of_number_words[pos] ≠ ' ' DO
            SET pos TO pos + 1
        END WHILE
        IF start_idx ≠ pos THEN
            APPEND SUBSTRING(string_of_number_words, start_idx, pos) TO extracted_terms
        END IF
        SET pos TO pos + 1
    END FOR

    DEFINE compare_words(a, b)
        RETURN numeral_values[a] - numeral_values[b]
    END

    SET sorted_terms TO copied_list(extracted_terms)
    FOR i FROM 0 TO LENGTH(sorted_terms) - 1 DO
        FOR j FROM 0 TO LENGTH(sorted_terms) - i - 2 DO
            IF compare_words(sorted_terms[j], sorted_terms[j + 1]) > 0 THEN
                SET temp_swapper TO sorted_terms[j]
                SET sorted_terms[j] TO sorted_terms[j + 1]
                SET sorted_terms[j + 1] TO temp_swapper
            END IF
        END FOR
    END FOR

    SET output_string TO EMPTY STRING
    SET indexer TO 0
    WHILE indexer < LENGTH(sorted_terms) DO
        SET output_string TO output_string + sorted_terms[indexer]
        IF indexer < LENGTH(sorted_terms) - 1 THEN
            SET output_string TO output_string + " "
        END IF
        SET indexer TO indexer + 1
    END WHILE

    RETURN output_string
END FUNCTION
```