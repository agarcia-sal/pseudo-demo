```
FUNCTION encode_cyclic(input_string)
  LET segment_collection BE an empty sequence
  LET total_segments BE ((LENGTH OF input_string) + 2) DIV 3
  LET counter BE 0
  WHILE counter < total_segments
    LET start_pos BE 3 * counter
    LET end_pos BE start_pos + 3
    IF end_pos > LENGTH OF input_string
      SET end_pos TO LENGTH OF input_string
    ENDIF
    APPEND SUBSTRING(input_string, start_pos, end_pos) TO segment_collection
    INCREMENT counter BY 1
  ENDWHILE

  LET transformed_segments BE empty array
  FOR EACH segment IN segment_collection
    IF LENGTH OF segment IS 3 THEN
      LET rotated_segment BE CONCAT(SUBSTRING(segment, 1, 3), SUBSTRING(segment, 0, 1))
      APPEND rotated_segment TO transformed_segments
    ELSE
      APPEND segment TO transformed_segments
    ENDIF
  ENDFOR

  RETURN CONCAT_ALL_ELEMENTS(transformed_segments)
END FUNCTION

FUNCTION decode_cyclic(input_string)
  LET first_pass BE encode_cyclic(input_string)
  RETURN encode_cyclic(first_pass)
END FUNCTION
```