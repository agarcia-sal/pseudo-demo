```
FUNCTION is_palindrome(input_string)
    DECLARE reversed_buffer AS STRING = EMPTY STRING
    FOR index FROM LENGTH(input_string) - 1 TO 0 STEP -1
        reversed_buffer = CONCATENATE(reversed_buffer, CHARACTER_AT(input_string, index))
    END FOR
    IF reversed_buffer EQUALS input_string THEN
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF
END FUNCTION

FUNCTION make_palindrome(input_string)
    IF LENGTH(input_string) = 0 THEN
        RETURN ""
    END IF

    VAR suffix_start_index = 0
    LOOP
        VAR tail_substring = SUBSTRING(input_string, suffix_start_index, LENGTH(input_string) - suffix_start_index)
        IF is_palindrome(tail_substring) THEN
            BREAK
        END IF
        suffix_start_index = suffix_start_index + 1
    END LOOP

    VAR prefix_to_append = SUBSTRING(input_string, 0, suffix_start_index)
    DECLARE reversed_prefix AS STRING = ""
    FOR position FROM LENGTH(prefix_to_append) - 1 DOWNTO 0
        reversed_prefix = reversed_prefix + CHARACTER_AT(prefix_to_append, position)
    END FOR
    
    RETURN CONCATENATE(input_string, reversed_prefix)
END FUNCTION
```