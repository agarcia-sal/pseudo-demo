```
FUNCTION anti_shuffle(input_string)
    DECLARE word_tokens AS ARRAY = []
    DECLARE processed_words AS ARRAY = []
    DECLARE idx AS INTEGER = 0
    
    word_tokens = SPLIT input_string USING " "
    
    WHILE idx < LENGTH(word_tokens)
        DECLARE current_token AS STRING = word_tokens[idx]
        DECLARE character_array AS ARRAY = []
        DECLARE char_idx AS INTEGER = 0
        
        character_array = []
        FOR char_idx = 0 TO LENGTH(current_token) - 1
            APPEND current_token[char_idx] TO character_array
        END FOR
        
        SORT character_array IN ASCENDING ORDER
        
        DECLARE reconstructed_word AS STRING = ""
        DECLARE build_idx AS INTEGER = 0
        
        reconstructed_word = ""
        WHILE build_idx < LENGTH(character_array)
            reconstructed_word = reconstructed_word + character_array[build_idx]
            build_idx = build_idx + 1
        END WHILE
        
        APPEND reconstructed_word TO processed_words
        idx = idx + 1
    END WHILE
    
    DECLARE final_result AS STRING = ""
    DECLARE word_index AS INTEGER = 0
    
    IF processed_words IS EMPTY THEN
        final_result = ""
    ELSE
        final_result = processed_words[0]
        word_index = 1
        WHILE word_index < LENGTH(processed_words)
            final_result = final_result + " " + processed_words[word_index]
            word_index = word_index + 1
        END WHILE
    END IF
    
    RETURN final_result
END FUNCTION
```