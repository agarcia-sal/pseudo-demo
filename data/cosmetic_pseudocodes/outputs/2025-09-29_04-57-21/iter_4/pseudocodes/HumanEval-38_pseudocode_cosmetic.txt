```
FUNCTION encode_cyclic(input_string)
    INITIALIZE segments AS an empty array
    SET total_groups TO ( (LENGTH(input_string) + 2) DIV 3 )
    SET counter TO 0
    WHILE counter < total_groups
        SET start_pos TO 3 * counter
        SET end_pos TO start_pos + 3
        IF end_pos > LENGTH(input_string)
            SET end_pos TO LENGTH(input_string)
        END IF
        APPEND SUBSTRING(input_string, start_pos, end_pos) TO segments
        INCREMENT counter BY 1
    END WHILE

    INITIALIZE transformed_segments AS empty list

    FOR EACH part IN segments
        IF part.LENGTH == 3 THEN
            SET rotated_part TO part[1 to end] + part[0]
            APPEND rotated_part TO transformed_segments
        ELSE
            APPEND part TO transformed_segments
        END IF
    END FOR

    RETURN CONCATENATE_ALL(transformed_segments)
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```