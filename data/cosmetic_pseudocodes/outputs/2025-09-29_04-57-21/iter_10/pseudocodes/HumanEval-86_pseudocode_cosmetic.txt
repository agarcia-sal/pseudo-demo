```
FUNCTION anti_shuffle(input_string)
    DECLARE words_container AS LIST = []
    DECLARE sorted_collection AS LIST = []
    DECLARE index_tracker AS INTEGER = 0

    temp_input_split = SPLIT input_string BY " "
    WHILE index_tracker < LENGTH(temp_input_split) DO
        APPEND temp_input_split[index_tracker] TO words_container
        index_tracker = index_tracker + 1
    END WHILE

    DECLARE cursor AS INTEGER = 0
    WHILE cursor < LENGTH(words_container) DO
        DECLARE char_list AS LIST = []
        DECLARE pos AS INTEGER = 0
        curr_word = words_container[cursor]

        WHILE pos < LENGTH(curr_word) DO
            APPEND curr_word[pos] TO char_list
            pos = pos + 1
        END WHILE

        SORT char_list ASCENDING BY ASCII
        DECLARE reconstructed_word AS STRING = ""
        DECLARE char_idx AS INTEGER = 0

        WHILE char_idx < LENGTH(char_list) DO
            reconstructed_word = reconstructed_word + char_list[char_idx]
            char_idx = char_idx + 1
        END WHILE

        APPEND reconstructed_word TO sorted_collection
        cursor = cursor + 1
    END WHILE

    DECLARE final_output AS STRING = ""
    DECLARE i AS INTEGER = 0
    WHILE i < LENGTH(sorted_collection) DO
        final_output = final_output + sorted_collection[i]
        IF (i + 1) != LENGTH(sorted_collection) THEN
            final_output = final_output + " "
        END IF
        i = i + 1
    END WHILE

    RETURN final_output
END FUNCTION
```