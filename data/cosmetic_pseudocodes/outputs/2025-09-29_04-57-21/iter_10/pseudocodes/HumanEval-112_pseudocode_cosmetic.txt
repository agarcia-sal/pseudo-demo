```
FUNCTION reverse_delete(string_s, string_c)
    INITIALIZE filtered_chars AS EMPTY LIST
    INITIALIZE position TO 0
    WHILE position LESS THAN LENGTH OF string_s
        LET current_char BE CHARACTER AT string_s[position]
        IF current_char NOT IN string_c THEN
            APPEND current_char TO filtered_chars
        END IF
        INCREMENT position BY 1
    END WHILE
    LET cleaned_string BE JOINED STRING OF filtered_chars
    LET is_palindrome BE TRUE
    LET start_index TO 0
    LET end_index TO LENGTH OF cleaned_string MINUS 1
    WHILE start_index LESS THAN end_index AND is_palindrome
        IF cleaned_string[start_index] NOT EQUAL cleaned_string[end_index] THEN
            SET is_palindrome TO FALSE
        END IF
        INCREMENT start_index BY 1
        DECREMENT end_index BY 1
    END WHILE
    RETURN (cleaned_string, is_palindrome)
END FUNCTION
```