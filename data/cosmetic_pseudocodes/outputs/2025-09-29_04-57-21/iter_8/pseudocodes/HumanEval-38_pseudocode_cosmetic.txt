```
FUNCTION encode_cyclic(input_string)
    INITIALIZE segments AS empty array
    SET counter TO 0
    WHILE counter * 3 < LENGTH(input_string)
        DEFINE start_index AS counter * 3
        DEFINE end_index AS start_index + 3
        IF end_index > LENGTH(input_string)
            SET end_index TO LENGTH(input_string)
        APPEND SUBSTRING(input_string, start_index, end_index) TO segments
        INCREMENT counter BY 1
    INITIALIZE transformed_segments AS empty array
    FOR EACH segment IN segments
        IF LENGTH(segment) IS NOT 3
            APPEND segment TO transformed_segments
            CONTINUE TO NEXT iteration
        SET rearranged TO CONCAT(SUBSTRING(segment, 2, 3), SUBSTRING(segment, 1, 1))
        APPEND rearranged TO transformed_segments
    RETURN JOIN(transformed_segments, "")
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```