```
FUNCTION sort_array(array_of_integers)
    LET intermediary_sorted = array_of_integers
    LET temporary_index = 0
    WHILE temporary_index < LENGTH(intermediary_sorted) - 1
        LET cursor = 0
        WHILE cursor < LENGTH(intermediary_sorted) - temporary_index - 1
            IF intermediary_sorted[cursor] > intermediary_sorted[cursor + 1]
                LET swap_tmp = intermediary_sorted[cursor]
                intermediary_sorted[cursor] = intermediary_sorted[cursor + 1]
                intermediary_sorted[cursor + 1] = swap_tmp
            END IF
            SET cursor = cursor + 1
        END WHILE
        SET temporary_index = temporary_index + 1
    END WHILE

    FUNCTION binary_one_digit_count(num)
        LET binary_form = TO_BINARY_STRING(num)
        LET count_ones = 0
        LET position = 0
        WHILE position < LENGTH(binary_form)
            IF binary_form[position] == '1'
                SET count_ones = count_ones + 1
            END IF
            SET position = position + 1
        END WHILE
        RETURN count_ones
    END FUNCTION

    LET final_array = []
    LET scan_index = 0
    WHILE scan_index < LENGTH(intermediary_sorted)
        LET current_element = intermediary_sorted[scan_index]
        LET insert_position = 0
        WHILE insert_position < LENGTH(final_array)
            IF binary_one_digit_count(current_element) < binary_one_digit_count(final_array[insert_position])
                BREAK
            ELSE IF binary_one_digit_count(current_element) == binary_one_digit_count(final_array[insert_position]) AND current_element < final_array[insert_position]
                BREAK
            END IF
            SET insert_position = insert_position + 1
        END WHILE
        INSERT current_element AT insert_position IN final_array
        SET scan_index = scan_index + 1
    END WHILE

    RETURN final_array
END FUNCTION
```