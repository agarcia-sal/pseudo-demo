```
FUNCTION is_palindrome(input_string)
    LET reversed_version BE EMPTY STRING
    LET idx BE LENGTH(input_string) - 1

    WHILE idx >= 0
        SET reversed_version TO CONCATENATE(reversed_version, input_string[idx])
        DECREMENT idx BY 1
    END WHILE

    RETURN reversed_version EQUALS input_string
END FUNCTION

FUNCTION make_palindrome(input_string)
    IF LENGTH(input_string) = 0 THEN
        RETURN ""
    END IF

    LET suffix_start_index BE 0

    WHILE TRUE
        LET substring_candidate BE SUBSTRING(input_string, suffix_start_index, LENGTH(input_string) - suffix_start_index)
        IF is_palindrome(substring_candidate) THEN
            BREAK
        END IF
        suffix_start_index = suffix_start_index + 1
    END WHILE

    LET prefix_part BE SUBSTRING(input_string, 0, suffix_start_index)
    LET reversed_prefix BE EMPTY STRING
    LET i BE LENGTH(prefix_part) - 1

    WHILE i >= 0
        SET reversed_prefix TO CONCATENATE(reversed_prefix, prefix_part[i])
        DECREMENT i BY 1
    END WHILE

    RETURN CONCATENATE(input_string, reversed_prefix)
END FUNCTION
```