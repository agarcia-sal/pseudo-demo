```
FUNCTION encode_cyclic(input_string)
    INITIALIZE segments AS new empty list
    SET total_segments TO INTEGER_DIVIDE((LENGTH(input_string) + 2), 3)
    SET current_position TO 0
    WHILE current_position < total_segments
        SET start_index TO 3 * current_position
        SET end_index TO start_index + 3
        IF end_index > LENGTH(input_string)
            SET end_index TO LENGTH(input_string)
        END IF
        APPEND SUBSTRING(input_string, start_index, end_index) TO segments
        INCREMENT current_position BY 1
    END WHILE

    INITIALIZE transformed_segments AS empty list
    FOR EACH segment IN segments
        IF LENGTH(segment) == 3 THEN
            SET rotated_segment TO CONCATENATE(SUBSTRING(segment, 1, 3), SUBSTRING(segment, 0, 1))
            APPEND rotated_segment TO transformed_segments
        ELSE
            APPEND segment TO transformed_segments
        END IF
    END FOR

    RETURN CONCATENATE_ELEMENTS(transformed_segments)
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```