```
FUNCTION minSubArraySum(array_elements)
	result_accumulator ← 0
	running_total ← 0
	current_position ← 0

	WHILE current_position < LENGTH(array_elements)
		element ← array_elements[current_position]
		running_total ← running_total + (-1 * element)
		IF NOT (running_total >= 0)
			running_total ← 0
		END IF
		result_accumulator ← IF running_total > result_accumulator THEN running_total ELSE result_accumulator
		current_position ← current_position + 1
	END WHILE

	IF result_accumulator == 0
		candidate_values ← []
		indexer ← 0
		WHILE indexer < LENGTH(array_elements)
			APPEND (-1 * array_elements[indexer]) TO candidate_values
			indexer ← indexer + 1
		END WHILE

		max_candidate ← candidate_values[0]
		iterator ← 1
		WHILE iterator < LENGTH(candidate_values)
			IF max_candidate < candidate_values[iterator]
				max_candidate ← candidate_values[iterator]
			END IF
			iterator ← iterator + 1
		END WHILE

		result_accumulator ← max_candidate
	END IF

	lowest_subarray_sum ← (-1) * result_accumulator
	RETURN lowest_subarray_sum
END FUNCTION
```