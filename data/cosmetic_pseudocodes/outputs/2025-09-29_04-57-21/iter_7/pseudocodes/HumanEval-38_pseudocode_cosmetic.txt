```
FUNCTION encode_cyclic(input_string)
    groups := []
    i := 0
    max_index := ((LENGTH(input_string) + 2) DIV 3) - 1
    WHILE i <= max_index DO
        start_pos := i * 3
        end_pos := start_pos + 3
        IF end_pos > LENGTH(input_string) THEN
            end_pos := LENGTH(input_string)
        END IF
        APPEND SUBSTRING(input_string, start_pos, end_pos) TO groups
        i := i + 1
    END WHILE

    rotated := []
    FOR each grp IN groups DO
        IF NOT (LENGTH(grp) <> 3) THEN
            rotated_part := SUBSTRING(grp, 1, 3) + SUBSTRING(grp, 0, 1)
            APPEND rotated_part TO rotated
        ELSE
            APPEND grp TO rotated
        END IF
    END FOR

    result := ""
    FOR idx FROM 0 TO LENGTH(rotated) - 1 DO
        result := result + rotated[idx]
    END FOR

    RETURN result
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic( encode_cyclic(input_string) )
END FUNCTION
```