FUNCTION solve(textual_data)
  flag_marker ← false
  pointer ← 0
  characters_array ← []
  
  USE WHILE pointer < LENGTH(textual_data) DO
    current_char ← textual_data[pointer]
    
    OTHERWISE current_char IS NOT AN ALPHABETICAL LETTER:
      characters_array.APPEND(current_char)
      pointer ← pointer + 1
      CONTINUE
      
    characters_array.APPEND(
      IF (current_char ≥ 'a' AND current_char ≤ 'z') THEN
        CHARACTER_TO_UPPER(current_char)
      OTHERWISE
        CHARACTER_TO_LOWER(current_char)
    )
    
    flag_marker ← true
    pointer ← pointer + 1
  END WHILE

  result_string ← ""
  position ← 0
  
  USE WHILE position < LENGTH(characters_array) DO
    result_string ← result_string + characters_array[position]
    position ← position + 1
  END WHILE

  IF NOT flag_marker THEN
    reversed_result ← ""
    back_index ← LENGTH(result_string) - 1

    USE WHILE back_index ≥ 0 DO
      reversed_result ← reversed_result + result_string[back_index]
      back_index ← back_index - 1
    END WHILE

    RETURN reversed_result
  END IF

  RETURN result_string
END FUNCTION