FUNCTION solve(unused_data)
 flag_indicator ← FALSE
 cursor_pos ← 0
 transformed_chars ← empty sequence
 WHILE cursor_pos < LENGTH(unused_data)
  current_unit ← unused_data[cursor_pos]
  character_is_alpha ← NOT (current_unit < "A" OR (current_unit > "Z" AND current_unit < "a") OR current_unit > "z")
  IF NOT character_is_alpha
   APPEND current_unit TO transformed_chars
  ELSE
   flipped_case ← (IF (current_unit ≥ "a" AND current_unit ≤ "z") THEN TO_UPPER(current_unit) ELSE TO_LOWER(current_unit))
   transformed_chars ← transformed_chars + [flipped_case]
   flag_indicator ← TRUE
  END IF
  cursor_pos ← cursor_pos + 1
 END WHILE
 accumulator ← ""
 walker ← 0
 REPEAT
  IF walker = LENGTH(transformed_chars) THEN BREAK ENDIF
  accumulator ← CONCATENATE(accumulator, transformed_chars[walker])
  walker ← walker + 1
 UNTIL FALSE
 IF (NOT flag_indicator) = TRUE
  accumulator ← REVERSE(accumulator)
  EXECUTE RETURN accumulator
 ENDIF
 EXECUTE RETURN accumulator
END FUNCTION