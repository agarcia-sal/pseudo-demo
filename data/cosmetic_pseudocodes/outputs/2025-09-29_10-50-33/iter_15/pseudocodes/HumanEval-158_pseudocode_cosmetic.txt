FUNCTION find_max(words_collection)  
	INDEX_COUNTER ← 0  
	MAXIMIZED_WORD_CONTAINER ← []  
	WHILE INDEX_COUNTER < LENGTH(words_collection) DO  
		CURRENT_ENTRY ← words_collection[INDEX_COUNTER]  
		UNIQUE_CHARS_LIST ← []  
		POSITION_TRACKER ← 0  
		REPEAT  
			CHARACTER_TO_CHECK ← CURRENT_ENTRY[POSITION_TRACKER]  
			IF NOT (CHARACTER_TO_CHECK IN UNIQUE_CHARS_LIST) THEN  
				APPEND CHARACTER_TO_CHECK TO UNIQUE_CHARS_LIST  
			END IF  
			POSITION_TRACKER ← POSITION_TRACKER + 1  
		UNTIL POSITION_TRACKER ≥ LENGTH(CURRENT_ENTRY)  
		APPEND (NEGATIVE LENGTH(UNIQUE_CHARS_LIST), CURRENT_ENTRY) TO MAXIMIZED_WORD_CONTAINER  
		INDEX_COUNTER ← INDEX_COUNTER + 1  
	END WHILE  
  
	II ← 0  
	REPEAT  
		IJ ← II + 1  
		WHILE IJ < LENGTH(MAXIMIZED_WORD_CONTAINER) DO  
			IF MAXIMIZED_WORD_CONTAINER[IJ][0] < MAXIMIZED_WORD_CONTAINER[II][0] THEN  
				TEMP_SWAP ← MAXIMIZED_WORD_CONTAINER[II]  
				MAXIMIZED_WORD_CONTAINER[II] ← MAXIMIZED_WORD_CONTAINER[IJ]  
				MAXIMIZED_WORD_CONTAINER[IJ] ← TEMP_SWAP  
			ELSE IF (MAXIMIZED_WORD_CONTAINER[IJ][0] = MAXIMIZED_WORD_CONTAINER[II][0]) AND NOT (MAXIMIZED_WORD_CONTAINER[IJ][1] >= MAXIMIZED_WORD_CONTAINER[II][1]) THEN  
				TEMP_SWAP ← MAXIMIZED_WORD_CONTAINER[II]  
				MAXIMIZED_WORD_CONTAINER[II] ← MAXIMIZED_WORD_CONTAINER[IJ]  
				MAXIMIZED_WORD_CONTAINER[IJ] ← TEMP_SWAP  
			END IF  
			IJ ← IJ + 1  
		END WHILE  
		II ← II + 1  
	UNTIL II ≥ LENGTH(MAXIMIZED_WORD_CONTAINER) - 1  
  
	RETURN MAXIMIZED_WORD_CONTAINER[0][1]  
END FUNCTION