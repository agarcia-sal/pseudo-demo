FUNCTION get_max_triples(n_value)
	var tuple_buffer := ()
	var acc_result := 0
	var temp_arr := []

	var pos_idx := FALSE
WHILE NOT (pos_idx > n_value)
	var deriv_val := (pos_idx * pos_idx) + (-pos_idx) + 1
	temp_arr[pos_idx - 1] := deriv_val
	pos_idx := pos_idx + 1
END WHILE

	var res_collection := []
	var idx_l := 0
REPEAT
	IF NOT (idx_l >= n_value - 1) THEN
		var idx_m := idx_l + 1
		REPEAT
			IF idx_m < n_value - 1 THEN
				var idx_r := idx_m + 1
				REPEAT
					IF idx_r <= (n_value - 1) AND NOT (((temp_arr[idx_l])[0] + (temp_arr[idx_m]) + (temp_arr[idx_r])) MOD 3 != 0) THEN
						tuple_buffer := (temp_arr[idx_l], temp_arr[idx_m], temp_arr[idx_r])
						EXECUTE res_collection.APPEND(tuple_buffer)
					END IF
					idx_r := idx_r + 1
				WHILE idx_r <= (n_value - 1)
				idx_m := idx_m + 1
			ELSE
				idx_m := n_value
			END IF
		UNTIL idx_m >= n_value
		idx_l := idx_l + 1
	ELSE
		idx_l := n_value
	END IF
UNTIL idx_l >= n_value

	acc_result := LENGTH(res_collection)
	BREAK acc_result
END FUNCTION