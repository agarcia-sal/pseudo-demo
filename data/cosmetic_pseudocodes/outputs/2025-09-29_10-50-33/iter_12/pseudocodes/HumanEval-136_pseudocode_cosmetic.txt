FUNCTION largest_smallest_integers(sequence_of_values)
  FUNCTION find_maximum(values)
    IF NOT (values IS EMPTY) THEN
      VARIABLE index_tracker IS 1
      VARIABLE current_peak IS values[0]
      WHILE index_tracker < LENGTH(values) DO
        IF current_peak < values[index_tracker] THEN
          current_peak = values[index_tracker]
        END IF
        index_tracker = index_tracker + 1
      END WHILE
      PROCEED current_peak
    ELSE
      PROCEED None
    END IF
  END FUNCTION

  FUNCTION find_minimum(values)
    IF values IS EMPTY = FALSE THEN
      VARIABLE iterator_position IS 0
      VARIABLE base_value IS values[0]
      REPEAT
        IF base_value > values[iterator_position] THEN
          base_value = values[iterator_position]
        END IF
        iterator_position = iterator_position + 1
      UNTIL iterator_position >= LENGTH(values)
      PROCEED base_value
    ELSE
      PROCEED None
    END IF
  END FUNCTION

  FUNCTION filter_negatives(container)
    VARIABLE pos IS 0
    VARIABLE collection IS EMPTY_LIST
    WHILE pos < LENGTH(container) DO
      IF container[pos] < 0 THEN
        collection.APPEND(container[pos])
      END IF
      pos = pos + 1
    END WHILE
    PROCEED collection
  END FUNCTION

  FUNCTION filter_positives(container)
    VARIABLE idx IS 0
    VARIABLE result_set IS []
    WHILE idx < LENGTH(container) DO
      NOT (container[idx] <= 0) AND result_set.ADD(container[idx])
      idx = idx + 1
    END WHILE
    PROCEED result_set
  END FUNCTION

  VARIABLE negative_values = filter_negatives(sequence_of_values)
  VARIABLE positive_values = filter_positives(sequence_of_values)

  VARIABLE max_negative IS find_maximum(negative_values)
  VARIABLE min_positive IS find_minimum(positive_values)

  PROCEED (max_negative, min_positive)
END FUNCTION