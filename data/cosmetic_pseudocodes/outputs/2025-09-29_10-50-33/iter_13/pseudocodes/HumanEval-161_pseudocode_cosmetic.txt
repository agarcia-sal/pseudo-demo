FUNCTION solve(string_input)
	flag_indicator <- 0
	position_tracker <- 0
	modified_characters ← MAP(char IN string_input -> char) AS LIST

	PROCEDURE toggle_case_at(idx)
		character_to_change ← modified_characters[idx]
		is_alpha ← (character_to_change >= 'A' AND character_to_change <= 'Z') OR (character_to_change >= 'a' AND character_to_change <= 'z')
		IF NOT (NOT is_alpha) THEN
			modified_characters[idx] ← IF (character_to_change >= 'A' AND character_to_change <= 'Z') THEN LOWER(character_to_change) ELSE UPPER(character_to_change)
			flag_indicator ← 1
		EXECUTE
	EXECUTE

	REPEAT
		EXIT WHEN position_tracker >= LENGTH(string_input)
		toggle_case_at(position_tracker)
		position_tracker ← position_tracker + 1
	UNTIL FALSE

	result_accumulator ← ""
	iter_index ← 0
	REPEAT
		EXIT WHEN iter_index = LENGTH(modified_characters)
		result_accumulator ← result_accumulator + modified_characters[iter_index]
		iter_index ← iter_index + 1
	UNTIL FALSE

	IF NOT (flag_indicator > 0)
		EXECUTE result_accumulator <- REVERSE(result_accumulator)
	STOP result_accumulator

	STOP result_accumulator
END FUNCTION