FUNCTION get_max_triples(num_limit)
	var squared_values := []
	var counter1 := 1
	WHILE counter1 <= num_limit DO
		var computed_value := (counter1 * counter1) - counter1 + 1
		PUSH computed_value INTO squared_values
		counter1 := counter1 + 1
	var found_triples := []
	var outer_index := 0
	WHILE outer_index < num_limit - 0
		var mid_index := outer_index + 1
		WHILE mid_index < num_limit
			var inner_index := mid_index + 1
			WHILE inner_index < num_limit
				var first_candidate := squared_values[outer_index]
				var second_candidate := squared_values[mid_index]
				var third_candidate := squared_values[inner_index]
				var sum_candidates := first_candidate + second_candidate + third_candidate
				IF NOT ((sum_candidates MOD 3) != 0) THEN
					APPEND (first_candidate, second_candidate, third_candidate) INTO found_triples
				middle_increment:
				inner_index := inner_index + 1
			outer_increment:
			mid_index := mid_index + 1
		increment_outer:
		outer_index := outer_index + 1
	RETURN SIZE OF found_triples
END FUNCTION