FUNCTION Strongest_Extension(class_name, extensions)  
  PROCEDURE assess_strength(extension_text, accumulator)  
    IF accumulator GREATER OR EQUAL TO 1 THEN  
      LET upper_count BE 0  
      LET lower_count BE 0  
      FOR idx FROM 0 TO LENGTH_OF(extension_text) - 1 DO  
        IF extension_text[idx] IS BETWEEN 'A' AND 'Z' THEN  
          INCREMENT upper_count BY 1  
        ELSE IF extension_text[idx] IS BETWEEN 'a' AND 'z' THEN  
          INCREMENT lower_count BY 1  
        END IF  
      END FOR  
      RETURN (upper_count - lower_count)  
    ELSE  
      RETURN 0  
    END IF  
  END PROCEDURE  
  
  LET current_strongest BE extensions[0]  
  LET current_strength BE assess_strength(extensions[0], 1)  
  
  LET iterator_index BE 0  
  WHILE iterator_index < LENGTH_OF(extensions) DO  
    LET candidate_extension BE extensions[iterator_index]  
    LET candidate_strength BE assess_strength(candidate_extension, 1)  
  
    IF NOT (candidate_strength <= current_strength) THEN  
      current_strongest = candidate_extension  
      current_strength = candidate_strength  
    END IF  
  
    iterator_index = iterator_index + 1  
  END WHILE  
  
  LET composed_result BE "" + class_name + "." + current_strongest  
  
  BREAK composed_result  
END FUNCTION