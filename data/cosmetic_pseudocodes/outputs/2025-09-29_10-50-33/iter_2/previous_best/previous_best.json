{
  "prompt": "Given the original pseudocode, generate a functionally identical version that differs maximally in terminology, control flow constructs, formatting, and syntactic style. Preserve all original function names, class names, and their hierarchical class/object structures exactly as in the source. Avoid reusing variable names or expressions verbatim; instead, rename variables thoughtfully, restructure loops and conditionals, substitute equivalent operations and control keywords, and vary indentation and statement order where feasible\u2014without altering logic or output behavior. Your response must contain only the rewritten pseudocode and no additional explanations or commentary.",
  "response": "Given the original pseudocode, generate a functionally identical version that differs maximally in terminology, control flow constructs, formatting, and syntactic style. Preserve all original function names, class names, and their hierarchical class/object structures exactly as in the source. Avoid reusing variable names or expressions verbatim; instead, rename variables thoughtfully, restructure loops and conditionals, substitute equivalent operations and control keywords, and vary indentation and statement order where feasible\u2014without altering logic or output behavior. Your response must contain only the rewritten pseudocode and no additional explanations or commentary.",
  "score": -0.2393091014241802,
  "feedback": "The following are 20 lines of original pseudocode of a random subset of the problems along with their modified pseudocodes.\n\nPseudocode for Problem 1:\n```\nFUNCTION find_max(words_collection)\n    PERFORM SORTING ON words_collection USING CRITERIA:\n        FIRST CRITERION: DESCEND BY COUNT OF UNIQUE CHARACTERS IN word\n        SECOND CRITERION: ASCEND BY word ALPHABETICALLY\n    OBTAIN sorted_result FROM THE SORT OPERATION\n    YIELD ELEMENT AT INDEX 0 FROM sorted_result\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 1:\n```\nFUNCTION find_max(list_of_words)\n    SORT list_of_words BY\n        NEGATIVE LENGTH OF SET OF CHARACTERS IN each word,\n        THEN BY each word IN LEXICOGRAPHICAL ORDER\n    RETURN FIRST ELEMENT OF THE SORTED LIST\nEND FUNCTION\n```\n\nPseudocode for Problem 2:\n```\nFUNCTION string_to_md5(input_string)\n    LOAD hashlib LIBRARY\n    IF LENGTH(input_string) > 0 THEN\n        SET hash_value TO hashlib.md5(input_string.ascii_encode())\n        RETURN hash_value.hex_digest()\n    OTHERWISE\n        RETURN Null\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 2:\n```\nFUNCTION string_to_md5(text)\n    IMPORT hashlib MODULE\n    IF text IS NOT EMPTY\n        RETURN md5 HASH OF text ENCODED AS ASCII IN HEXADECIMAL STRING FORM\n    ELSE\n        RETURN None\nEND FUNCTION\n```\n\nPseudocode for Problem 3:\n```\nFUNCTION check_if_last_char_is_a_letter(text)\n  DEFINE segments AS ARRAY FROM SPLITTING text USING \" \"\n  DEFINE final_piece AS ELEMENT AT INDEX (SIZE OF segments MINUS 1)\n  IF (SIZE OF final_piece IS 1) THEN\n    LET char_code BE ASCII_VALUE(TO_LOWERCASE(final_piece))\n    WHEN char_code >= 97 AND char_code <= 122 DO\n      RETURN True\n    OTHERWISE\n      RETURN False\n  ELSE\n    RETURN False\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 3:\n```\nFUNCTION check_if_last_char_is_a_letter(text)\n    SET last_element TO SPLIT text BY SPACE AND TAKE LAST ELEMENT\n    IF LENGTH OF last_element EQUALS 1 AND ASCII CODE OF LOWERCASE last_element IS BETWEEN 97 AND 122 INCLUSIVE\n        RETURN True\n    ELSE\n        RETURN False\nEND FUNCTION\n```\n\nPseudocode for Problem 4:\n```\nFUNCTION compare(list_of_game_scores, list_of_guess_scores)\n    DECLARE result_collection AS EMPTY LIST\n    DECLARE index_counter AS INTEGER INITIALIZED TO 0\n\n    WHILE index_counter LESS THAN LENGTH of list_of_game_scores DO\n        SET score_a TO ELEMENT AT index_counter IN list_of_game_scores\n        SET score_b TO ELEMENT AT index_counter IN list_of_guess_scores\n        COMPUTE difference_value AS score_a MINUS score_b\n        IF difference_value IS LESS THAN 0 THEN\n            SET difference_value TO NEGATE difference_value\n        ENDIF\n        APPEND difference_value TO result_collection\n        INCREMENT index_counter BY 1\n    ENDWHILE\n\n    RETURN result_collection\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 4:\n```\nFUNCTION compare(list_of_game_scores, list_of_guess_scores)\n    RETURN list COMPRISING absolute_value_of(x MINUS y) FOR each pair (x, y) IN ZIP of list_of_game_scores AND list_of_guess_scores\nEND FUNCTION\n```\n\nPseudocode for Problem 5:\n```\nFUNCTION words_in_sentence(sentence)\n    INITIALIZE collection AS empty array\n    FOR EACH token IN SPLIT sentence BY ' '\n        INITIALIZE marker = false\n        IF SIZE OF token IS 1 THEN\n            marker = true\n        ELSE\n            SET divisor = 2\n            WHILE divisor < SIZE OF token\n                IF (SIZE OF token) MOD divisor == 0 THEN\n                    marker = true\n                    BREAK\n                END IF\n                INCREMENT divisor BY 1\n            END WHILE\n        END IF\n        IF marker == false OR SIZE OF token == 2 THEN\n            INSERT token AT END OF collection\n        END IF\n\nModified Pseudocode for Problem 5:\n```\nFUNCTION words_in_sentence(sentence)\n    SET new_list TO empty list\n    FOR each word IN sentence SPLIT BY spaces\n        SET flag TO 0\n        IF LENGTH OF word EQUALS 1\n            SET flag TO 1\n        FOR each integer i FROM 2 TO LENGTH OF word MINUS 1\n            IF LENGTH OF word MODULO i EQUALS 0\n                SET flag TO 1\n        IF flag EQUALS 0 OR LENGTH OF word EQUALS 2\n            APPEND word TO new_list\n    RETURN STRING JOIN OF new_list WITH SPACES\nEND FUNCTION\n```\n\nPseudocode for Problem 6:\n```\nFUNCTION is_equal_to_sum_even(number_value)\n    IF (number_value REMAINDER 2) IS 0 THEN\n        IF number_value >= 8 THEN\n            RETURN TRUE\n        ELSE\n            RETURN FALSE\n        END IF\n    ELSE\n        RETURN FALSE\n    END IF\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 6:\n```\nFUNCTION is_equal_to_sum_even(integer_n)\n    RETURN (integer_n MODULO 2 EQUALS 0) AND (integer_n GREATER THAN OR EQUAL TO 8)\nEND FUNCTION\n```\n\nPseudocode for Problem 7:\n```\nFUNCTION specialFilter(list_of_numbers)\n    INITIALIZE total_matches AS 0\n    FOR index FROM 0 TO LENGTH OF list_of_numbers MINUS 1\n        LET candidate BE list_of_numbers AT index\n        IF candidate > 10 THEN\n            DEFINE odd_set AS [1, 3, 5, 7, 9]\n            CONVERT candidate TO text_form\n            LET first_char_num BE NUMBER REPRESENTED BY text_form AT POSITION 0\n            LET last_char_num BE NUMBER REPRESENTED BY text_form AT POSITION (LENGTH OF text_form MINUS 1)\n            IF first_char_num MEMBEROF odd_set AND last_char_num MEMBEROF odd_set THEN\n                total_matches = total_matches + 1\n            END IF\n        END IF\n    END FOR\n    OUTPUT total_matches\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 7:\n```\nFUNCTION specialFilter(list_of_numbers)\n    SET count TO 0\n    FOR each number IN list_of_numbers\n        IF number IS GREATER THAN 10\n            SET odd_digits TO (1, 3, 5, 7, 9)\n            SET number_as_string TO STRING REPRESENTATION OF number\n            IF INTEGER VALUE OF FIRST CHARACTER OF number_as_string IS IN odd_digits AND INTEGER VALUE OF LAST CHARACTER OF number_as_string IS IN odd_digits\n                INCREMENT count BY 1\n            END IF\n        END IF\n    END FOR\n    RETURN count\nEND FUNCTION\n```\n\nPseudocode for Problem 8:\n```\nFUNCTION double_the_difference(numbers_collection)\n    INITIALIZE total_sum TO 0\n    FOR EACH element IN numbers_collection\n        IF element > 0 THEN\n            IF element % 2 <> 0 THEN\n                IF CONVERT_TO_STRING(element) DOES NOT INCLUDE \".\"\n                    SET total_sum TO total_sum + (element * element)\n                END IF\n            END IF\n        END IF\n    NEXT element\n    RETURN total_sum\nEND FUNCTION\n```\n\nModified Pseudocode for Problem 8:\n```\nFUNCTION double_the_difference(list_of_numbers)\n    RETURN SUM OF (number MULTIPLIED BY number) FOR EACH number IN list_of_numbers WHERE number IS GREATER THAN 0 AND number MODULO 2 IS NOT EQUAL TO 0 AND STRING REPRESENTATION OF number DOES NOT CONTAIN \".\"\nEND FUNCTION\n```\nScore of -1*(BLEU Score) for ALL the problems: -0.2393091014241802",
  "iter": 2
}