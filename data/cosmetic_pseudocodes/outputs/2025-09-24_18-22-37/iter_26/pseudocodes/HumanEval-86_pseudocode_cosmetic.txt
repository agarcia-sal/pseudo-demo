```
FUNCTION anti_shuffle(alpha_input)
  
  LET token_collection = alpha_input.at_split(" ")
  LET collection_sorted_tokens = []
  
  LET idx_iter = 0
  WHILE idx_iter < LENGTH(token_collection) DO
    
    LET temp_chars = token_collection.at(idx_iter).to_character_list()
    
    LET temp_sorted_chars = []
    LET inner_idx = 0
    
    WHILE inner_idx < LENGTH(temp_chars) DO
      LET smallest_ascii = 127
      LET smallest_index = -1
      LET search_pos = 0
      
      WHILE search_pos < LENGTH(temp_chars) DO
        IF temp_chars.at(search_pos) <= smallest_ascii THEN
          LET smallest_ascii = temp_chars.at(search_pos)
          LET smallest_index = search_pos
        END IF
        search_pos = search_pos + 1
      END WHILE
      
      IF smallest_index >= 0 THEN
        ADD temp_chars.at(smallest_index) TO temp_sorted_chars
        REMOVE temp_chars.at(smallest_index)
      END IF
      
      inner_idx = inner_idx + 1
    END WHILE

    LET assembled_token = ""
    LET build_j = 0
    WHILE build_j < LENGTH(temp_sorted_chars) DO
      assigned_char = temp_sorted_chars.at(build_j)
      assembled_token = assembled_token & assigned_char
      build_j = build_j + 1
    END WHILE
    
    ADD assembled_token TO collection_sorted_tokens
    
    idx_iter = idx_iter + 1
  END WHILE
  
  LET combined_string = ""
  IF LENGTH(collection_sorted_tokens) = 0 THEN
    RETURN combined_string
  END IF
  
  LET index_walker = 0
  
  WHILE TRUE DO
    
    combined_string = combined_string & collection_sorted_tokens.at(index_walker)
    
    IF index_walker = LENGTH(collection_sorted_tokens) - 1 THEN
      BREAK
    END IF
    
    combined_string = combined_string & " "
    
    index_walker = index_walker + 1
    
  END WHILE
  
  RETURN combined_string
END FUNCTION
```