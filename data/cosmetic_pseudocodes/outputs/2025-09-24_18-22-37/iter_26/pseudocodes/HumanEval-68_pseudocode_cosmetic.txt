FUNCTION pluck(node_collection)
    DECLARE filtered_evens AS LIST
    DECLARE min_even_val AS INTEGER
    DECLARE min_even_pos AS INTEGER
    DECLARE val AS INTEGER
    DECLARE i AS INTEGER

    IF (node_collection.length() != 0) THEN
        filtered_evens ← []
        i ← 0
        WHILE i < node_collection.length() DO
            val ← node_collection.at(i)
            IF (val mod 2 = 0) THEN
                filtered_evens.push_back(val)
            END IF
            i ← i + 1
        END WHILE

        SWITCH (filtered_evens.length())
            CASE 0:
                RETURN []
            DEFAULT:
                min_even_val ← filtered_evens[0]
                i ← 1
                WHILE i < filtered_evens.length() DO
                    IF filtered_evens.at(i) < min_even_val THEN
                        min_even_val ← filtered_evens.at(i)
                    END IF
                    i ← i + 1
                END WHILE
                min_even_pos ← -1
                i ← 0
                WHILE i < node_collection.length() DO
                    val ← node_collection.at(i)
                    IF val = min_even_val THEN
                        min_even_pos ← i
                        RETURN [min_even_val, min_even_pos]
                    END IF
                    i ← i + 1
                END WHILE
        END SWITCH
    ELSE
        RETURN []
    END IF
END FUNCTION