FUNCTION encode(text)
    LET vowelSet BE "AEIOUaeiou"
    LET jumpValue BE 2
    LET altered_map BE EMPTY DICTIONARY
    LET idx BE 0
    WHILE idx < LENGTH(vowelSet)
        LET current_char BE vowelSet.at(idx)
        LET updated_char_code BE ASCII_CODE(current_char) + jumpValue
        LET updated_char BE CHARACTER_FROM_ASCII(updated_char_code)
        altered_map[current_char] = updated_char
        idx = idx + 1
    END WHILE

    LET toggled_text BE EMPTY STRING
    LET pos BE 0
    WHILE pos < LENGTH(text)
        LET ch BE text.at(pos)
        IF ch >= 'a' ∧ ch <= 'z' THEN
            LET toggled_ch BE CHARACTER_FROM_ASCII(ASCII_CODE(ch) - 32)
        ELSE IF ch >= 'A' ∧ ch <= 'Z' THEN
            LET toggled_ch BE CHARACTER_FROM_ASCII(ASCII_CODE(ch) + 32)
        ELSE
            LET toggled_ch BE ch
        END IF
        toggled_text = toggled_text + toggled_ch
        pos = pos + 1
    END WHILE

    LET output_str BE EMPTY STRING
    LET index BE 0
    WHILE index < LENGTH(toggled_text)
        LET current_char BE toggled_text.at(index)
        SWITCH TRUE
            CASE current_char IN altered_map:
                output_str = output_str + altered_map[current_char]
                BREAK
            DEFAULT:
                output_str = output_str + current_char
                BREAK
        END SWITCH
        index = index + 1
    END WHILE

    RETURN output_str
END FUNCTION