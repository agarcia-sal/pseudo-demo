```
FUNCTION sort_array(numbers_list)
    SET ascending_ordered TO EMPTY LIST
    SET idx TO 0

    WHILE idx < LENGTH(numbers_list)
        APPEND numbers_list.at(idx) TO ascending_ordered
        INCREMENT idx BY 1
    END WHILE

    SET ascending_ordered TO SORT ascending_ordered IN ASCENDING ORDER

    SET output_list TO EMPTY LIST
    SET temp_idx TO 0

    WHILE temp_idx < LENGTH(ascending_ordered)
        APPEND ascending_ordered[temp_idx] TO output_list
        temp_idx ← temp_idx + 1
    END WHILE

    DEFINE FUNCTION bit_count_key(value)
        SET binary_representation TO TO_BINARY(value)
        SET bit_sum TO 0
        FOR pos FROM 3 TO LENGTH(binary_representation) DO
            IF binary_representation.at(pos) = '1' THEN
                bit_sum ← bit_sum + 1
            ENDIF
        ENDFOR
        RETURN bit_sum
    END FUNCTION

    SET n TO LENGTH(output_list)
    SET i TO 0

    WHILE i < n
        SET j TO i + 1
        WHILE j < n
            IF (bit_count_key(output_list.at(i)) > bit_count_key(output_list.at(j))) OR
               ((bit_count_key(output_list.at(i)) = bit_count_key(output_list.at(j))) AND (output_list.at(i) > output_list.at(j))) THEN
                SET temp_var TO output_list.at(i)
                SET output_list.at(i) TO output_list.at(j)
                SET output_list.at(j) TO temp_var
            ENDIF
            INCREMENT j BY 1
        ENDWHILE
        INCREMENT i BY 1
    ENDWHILE

    RETURN output_list
END FUNCTION
```