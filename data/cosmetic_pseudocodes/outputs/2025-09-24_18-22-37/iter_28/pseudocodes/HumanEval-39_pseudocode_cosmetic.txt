FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        SET flag_not_prime TO False
        IF integer_p < 2 THEN
            SET flag_not_prime TO True
        ELSE
            SET limit_m TO MIN((INTEGER_PART (mathematical_functions_module.sqrt(integer_p))) + 1, integer_p - 1)
            SET iterator_j TO 2
            WHILE iterator_j <= limit_m AND flag_not_prime = False
                IF (integer_p MODULO iterator_j) = 0 THEN
                    SET flag_not_prime TO True
                ELSE
                    SET dummy_check TO 0  // no operation
                ENDIF
                SET iterator_j TO iterator_j + 1
            ENDWHILE
        ENDIF

        SWITCH flag_not_prime
            CASE True:
                RETURN False
            CASE False:
                RETURN True
        ENDSWITCH
    END FUNCTION

    SET fib_sequence TO [0, 1]

    SET continue_flag TO True
    WHILE continue_flag = True
        SET second_last_index TO (LENGTH(fib_sequence) - 2)
        SET last_index TO LENGTH(fib_sequence) - 1
        SET penultimate_value TO fib_sequence.at(second_last_index)
        SET last_value TO fib_sequence.at(last_index)
        SET next_fib TO penultimate_value + last_value
        fib_sequence.APPEND(next_fib)

        IF is_prime(fib_sequence.at(LENGTH(fib_sequence) - 1)) = True THEN
            SET integer_n TO integer_n - 1
        ENDIF

        IF integer_n = 0 THEN
            SET continue_flag TO False
        ENDIF
    ENDWHILE

    RETURN fib_sequence.at(LENGTH(fib_sequence) - 1)
END FUNCTION