FUNCTION pluck(container_of_nodes)
    DECLARE finished_flag AS BOOLEAN ← FALSE
    DECLARE filtered_evens AS LIST ← empty_list
    DECLARE output_result AS LIST ← empty_list
    DECLARE current_idx AS INTEGER ← 0

    WHILE finished_flag = FALSE
        IF current_idx ≥ (LENGTH OF container_of_nodes)
            SET finished_flag ← TRUE
        ELSE
            current_element ← container_of_nodes.at(current_idx)
            IF (current_element MODULO 2) = 0
                APPEND current_element TO filtered_evens
            END IF
            SET current_idx ← current_idx + 1
        END IF
    END WHILE

    IF LENGTH OF container_of_nodes = 0 THEN
        RETURN empty_list
    END IF

    IF LENGTH OF filtered_evens = 0 THEN
        RETURN empty_list
    END IF

    DECLARE min_even_val AS INTEGER ← filtered_evens.at(0)
    DECLARE iter_var AS INTEGER ← 1

    WHILE iter_var < LENGTH OF filtered_evens
        DECLARE candidate_val AS INTEGER ← filtered_evens.at(iter_var)
        IF candidate_val < min_even_val
            SET min_even_val ← candidate_val
        END IF
        SET iter_var ← iter_var + 1
    END WHILE

    DECLARE search_pos AS INTEGER ← 0
    DECLARE found_flag AS BOOLEAN ← FALSE

    WHILE NOT found_flag ∧ search_pos < LENGTH OF container_of_nodes
        DECLARE possible_match AS INTEGER ← container_of_nodes.at(search_pos)
        SWITCH
            CASE possible_match = min_even_val
                SET found_flag ← TRUE
            CASE DEFAULT
                SET search_pos ← search_pos + 1
        END SWITCH
    END WHILE

    APPEND min_even_val TO output_result
    APPEND search_pos TO output_result

    RETURN output_result
END FUNCTION