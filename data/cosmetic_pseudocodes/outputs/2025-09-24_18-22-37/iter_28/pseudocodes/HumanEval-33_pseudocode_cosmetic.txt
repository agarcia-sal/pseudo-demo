FUNCTION sort_third(container_param)
    DECLARE duplicate_list
    DECLARE divisible_three_values
    DECLARE ordered_subset
    DECLARE current_idx
    DECLARE position_tracker

    duplicate_list ← COPY OF container_param AS LIST

    divisible_three_values ← EMPTY LIST
    current_idx ← 0
    WHILE current_idx < LENGTH(duplicate_list) DO
        IF current_idx modulo 0x3 = 0 THEN
            APPEND duplicate_list.at(current_idx) TO divisible_three_values
        END IF
        INCREMENT current_idx BY 1
    END WHILE

    ordered_subset ← EMPTY LIST
    DECLARE temp_value
    DECLARE smallest_value
    DECLARE flag_done
    flag_done ← FALSE
    WHILE flag_done = FALSE DO
        IF LENGTH(divisible_three_values) = 0 THEN
            flag_done ← TRUE
        ELSE
            smallest_value ← divisible_three_values.at(0)
            position_tracker ← 0
            current_idx ← 1
            WHILE current_idx < LENGTH(divisible_three_values) DO
                IF divisible_three_values.at(current_idx) < smallest_value THEN
                    smallest_value ← divisible_three_values.at(current_idx)
                    position_tracker ← current_idx
                END IF
                INCREMENT current_idx BY 1
            END WHILE
            APPEND smallest_value TO ordered_subset
            REMOVE ELEMENT AT position_tracker FROM divisible_three_values
        END IF
    END WHILE

    position_tracker ← 0
    current_idx ← 0
    WHILE current_idx < LENGTH(duplicate_list) DO
        IF current_idx modulo 3 = 0 THEN
            duplicate_list[current_idx] ← ordered_subset.at(position_tracker)
            position_tracker ← position_tracker + 1
        END IF
        current_idx ← current_idx + 1
    END WHILE

    RETURN duplicate_list
END FUNCTION