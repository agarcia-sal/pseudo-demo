FUNCTION unique_digits(sequence_of_positive_integers)
  INITIALIZE collected_odd_elements AS empty list
  DECLARE idx AS 0
  SET max_length TO length(sequence_of_positive_integers)
  
  WHILE idx < max_length
    SET current_value TO sequence_of_positive_integers.at(idx)
    SET all_odd_flag TO true
    SET digit_str TO string(current_value)
    SET position TO 0
    SET length_of_digits TO length(digit_str)
    
    SWITCH true
      CASE position = length_of_digits:
        // no digits or reached end
        BREAK
      DEFAULT:
        WHILE position < length_of_digits AND all_odd_flag = true
          SET current_digit_char TO digit_str.at(position)
          SET numeric_digit TO integer(current_digit_char) 
          SET is_even_condition TO (numeric_digit modulo 2) NOT EQUAL TO 1
          IF is_even_condition
            SET all_odd_flag TO false
          ENDIF
          INCREMENT position BY 1
        ENDWHILE
    ENDSWITCH
    
    IF all_odd_flag = true
      APPEND current_value TO collected_odd_elements
    ENDIF

    SET idx TO idx + 1
  ENDWHILE

  SET sorted_output TO collected_odd_elements
  DECLARE i AS 0
  SET n TO length(collected_odd_elements)
  
  WHILE i + 1 < n
    SET j AS i + 1
    WHILE j < n
      IF sorted_output.at(i) > sorted_output.at(j)
        SET temp_swap TO sorted_output.at(i)
        SET sorted_output.at(i) TO sorted_output.at(j)
        SET sorted_output.at(j) TO temp_swap
      ENDIF
      SET j TO j + 1
    ENDWHILE
    SET i TO i + 1
  ENDWHILE
  
  RETURN sorted_output
END FUNCTION