FUNCTION sort_even(sequence_of_items)  
     SET collection_of_even_positions TO EMPTY LIST  
     SET index_counter TO 0  
     WHILE index_counter < LENGTH OF sequence_of_items  
          IF index_counter MODULO 2 EQUALS 0 THEN  
               APPEND sequence_of_items AT index_counter TO collection_of_even_positions  
          END IF  
          SET index_counter TO index_counter PLUS 1  
     END WHILE  

     SET collection_of_odd_positions TO EMPTY LIST  
     SET iterator_variable TO 0  
     WHILE iterator_variable < LENGTH OF sequence_of_items  
       IF (iterator_variable MODULO 2) EQUALS 1 THEN  
           APPEND sequence_of_items AT iterator_variable TO collection_of_odd_positions  
       END IF  
       SET iterator_variable TO iterator_variable PLUS 1  
     END WHILE  

     CALL sort ON collection_of_even_positions WITH NON-DECREASING ORDER  

     SET result_sequence TO EMPTY LIST  

     SET zipped_pairs TO EMPTY LIST  
     SET position_marker TO 0  
     WHILE position_marker < MINIMUM OF LENGTH OF collection_of_even_positions AND LENGTH OF collection_of_odd_positions  
           SET even_element TO collection_of_even_positions AT position_marker  
           SET odd_element TO collection_of_odd_positions AT position_marker  
           APPEND (even_element, odd_element) TO zipped_pairs  
           SET position_marker TO position_marker PLUS 1  
     END WHILE  

     SET iterator_index TO 0  
     WHILE iterator_index < LENGTH OF zipped_pairs  
         SET temporary_tuple TO zipped_pairs AT iterator_index  
         EXTEND result_sequence BY temporary_tuple AT 0  
         EXTEND result_sequence BY temporary_tuple AT 1  
         SET iterator_index TO iterator_index PLUS 1  
     END WHILE  

     IF LENGTH OF collection_of_even_positions MINUS LENGTH OF collection_of_odd_positions GREATER THAN 0 THEN  
         APPEND collection_of_even_positions AT (LENGTH OF collection_of_even_positions MINUS 1) TO result_sequence  
     END IF  

     RETURN result_sequence  
END FUNCTION