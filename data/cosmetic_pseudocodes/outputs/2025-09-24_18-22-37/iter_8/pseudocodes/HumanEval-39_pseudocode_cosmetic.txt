FUNCTION prime_fib(integer_n)  
	IMPORT mathematical_functions_module	

	FUNCTION is_prime(integer_p)  
		IF NOT (integer_p GREATER OR EQUAL 2) THEN RETURN False  
		SET integer_magnitude TO MINIMUM( (INTEGER PART OF (mathematical_functions_module.square_root(integer_p))) PLUS 1 , integer_p MINUS 1 )  
		SET integer_divisor TO 2  
		WHILE integer_divisor LESS OR EQUAL integer_magnitude  
			SET modulus_result TO integer_p MODULO integer_divisor  
			IF modulus_result EQUALS 0 THEN RETURN False  
			SET integer_divisor TO integer_divisor PLUS 1  
		END WHILE  
		RETURN True  
	END FUNCTION  

	SET sequence_fib TO LIST CONTAINING 0, 1  

	WHILE 1 EQUALS 1  
		SET idx_last TO LENGTH(sequence_fib) MINUS 1  
		SET idx_second_last TO idx_last MINUS 1  
		SET sum_last_two TO sequence_fib.at(idx_last) PLUS sequence_fib.at(idx_second_last)  
		APPEND sum_last_two TO sequence_fib  

		IF is_prime(sequence_fib.at(LENGTH(sequence_fib) MINUS 1)) THEN  
			SET integer_n TO integer_n MINUS 1  
		END IF  

		IF integer_n EQUALS 0 THEN  
			RETURN sequence_fib.at(LENGTH(sequence_fib) MINUS 1)  
		END IF  
	END WHILE  
END FUNCTION