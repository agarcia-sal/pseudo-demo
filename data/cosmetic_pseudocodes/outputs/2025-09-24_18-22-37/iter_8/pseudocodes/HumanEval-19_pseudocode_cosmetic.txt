FUNCTION sort_numbers(arg_input_text)  
    SET map_values TO DICTIONARY THAT MAPS  
        'zero' TO 0b0,  
        'one' TO 1,  
        'two' TO 2,  
        'three' TO 3,  
        'four' TO 4,  
        'five' TO 5,  
        'six' TO 6,  
        'seven' TO 7,  
        'eight' TO 8,  
        'nine' TO 0b1001  
    DECLARE array_words  
    SPLIT arg_input_text BY ' ' INTO temp_words  
    SET array_words TO EMPTY LIST  
    DECLARE idx_word AS INTEGER  
    SET idx_word TO 0  
    WHILE idx_word < LENGTH(temp_words)  
        SET candidate_word TO temp_words.at(idx_word)  
        IF candidate_word ≠ '' THEN  
            APPEND candidate_word TO array_words  
        END IF  
        INCREMENT idx_word BY 1  
    END WHILE  

    DECLARE index_i AS INTEGER  
    SET index_i TO 0  

    WHILE index_i < LENGTH(array_words) - 1  
        DECLARE index_j AS INTEGER  
        SET index_j TO index_i + 1  
        WHILE index_j < LENGTH(array_words)  
            SET val_i TO map_values.at(array_words.at(index_i))  
            SET val_j TO map_values.at(array_words.at(index_j))  
            IF val_i > val_j THEN  
                SET temp_word TO array_words.at(index_i)  
                SET array_words.at(index_i) TO array_words.at(index_j)  
                SET array_words.at(index_j) TO temp_word  
            END IF  
            INCREMENT index_j BY 1  
        END WHILE  
        INCREMENT index_i BY 1  
    END WHILE  

    DECLARE out_string AS STRING  
    SET out_string TO ''  
    DECLARE idx_out AS INTEGER  
    SET idx_out TO 0  
    WHILE idx_out < LENGTH(array_words)  
        SET out_string TO out_string + array_words.at(idx_out)  
        IF idx_out ≠ LENGTH(array_words) - 1 THEN  
            SET out_string TO out_string + ' '  
        END IF  
        INCREMENT idx_out BY 1  
    END WHILE  

    RETURN out_string  
END FUNCTION