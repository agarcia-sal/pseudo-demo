```
FUNCTION sort_array(array_of_integers)
    PROCEDURE sort_by_binary_ones(input_list, index)
        IF index EQUAL TO LENGTH OF input_list THEN
            RETURN input_list
        ENDIF
        SET current TO input_list[index]
        SET pos TO index
        WHILE pos GREATER THAN 0 AND count_ones_in_binary(input_list[pos - 1]) GREATER THAN count_ones_in_binary(current)
            SET input_list[pos] TO input_list[pos - 1]
            DECREMENT pos BY 1
        ENDWHILE
        SET input_list[pos] TO current
        CALL sort_by_binary_ones(input_list, index + 1)
    END PROCEDURE

    FUNCTION count_ones_in_binary(number)
        SET binary_str TO TO_BINARY_STRING(number)
        SET ones_count TO 0
        FOR char_index FROM 2 TO LENGTH OF binary_str - 1
            IF binary_str[char_index] EQUAL TO '1' THEN
                INCREMENT ones_count BY 1
            ENDIF
        ENDFOR
        RETURN ones_count
    END FUNCTION

    FUNCTION TO_BINARY_STRING(num)
        IF num EQUAL TO 0 THEN
            RETURN "0b0"
        ENDIF
        SET bin_rep TO EMPTY STRING
        SET n TO num
        WHILE n GREATER THAN 0
            SET remainder TO n MOD 2
            bin_rep TO STRING(remainder) CONCATENATED WITH bin_rep
            n TO INTEGER_DIVIDE n BY 2
        ENDWHILE
        RETURN "0b" CONCATENATED WITH bin_rep
    END FUNCTION

    FUNCTION insertion_sort_ascending(lst)
        FOR i FROM 1 TO LENGTH OF lst - 1
            SET key TO lst[i]
            SET j TO i - 1
            WHILE j GREATER OR EQUAL TO 0 AND lst[j] GREATER THAN key
                SET lst[j + 1] TO lst[j]
                DECREMENT j BY 1
            ENDWHILE
            SET lst[j + 1] TO key
        ENDFOR
        RETURN lst
    END FUNCTION

    SET decimal_sorted TO insertion_sort_ascending(array_of_integers)
    CALL sort_by_binary_ones(decimal_sorted, 1)
    RETURN decimal_sorted
END FUNCTION
```