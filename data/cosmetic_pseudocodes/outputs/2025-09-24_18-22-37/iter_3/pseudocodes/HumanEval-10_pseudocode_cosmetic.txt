```
FUNCTION is_palindrome(input_string)
    CALL helper_check(input_string, LENGTH(input_string) - 1, 0)
END FUNCTION

FUNCTION helper_check(s, endIdx, startIdx)
    IF startIdx >= endIdx THEN
        RETURN TRUE
    ELSE IF s[startIdx] != s[endIdx] THEN
        RETURN FALSE
    ELSE
        RETURN helper_check(s, endIdx - 1, startIdx + 1)
    END IF
END FUNCTION

FUNCTION make_palindrome(input_string)
    DEFINE idx = 0
    IF LENGTH(input_string) = 0 THEN
        RETURN ""
    END IF

    DEFINE tail_substring
    DEFINE condition = FALSE

    REPEAT
        tail_substring = SUBSTRING(input_string, idx, LENGTH(input_string) - idx)
        condition = is_palindrome(tail_substring)
        IF condition = FALSE THEN
            idx = idx + 1
        END IF
    UNTIL condition = TRUE

    RETURN CONCATENATE(input_string, REVERSE(SUBSTRING(input_string, 0, idx)))
END FUNCTION
```