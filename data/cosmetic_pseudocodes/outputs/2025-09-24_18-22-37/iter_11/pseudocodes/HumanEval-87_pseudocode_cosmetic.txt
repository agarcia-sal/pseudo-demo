FUNCTION get_row(two_dimensional_list, target_integer)  
    SET result_positions TO EMPTY LIST  
    SET outer_idx TO 0  
    WHILE outer_idx < LENGTH of two_dimensional_list  
        SET inner_idx TO 0  
        WHILE inner_idx < LENGTH of two_dimensional_list[outer_idx]  
            SET current_element TO two_dimensional_list[outer_idx][inner_idx]  
            IF NOT (current_element ≠ target_integer)  
                SET position_tuple TO TUPLE(outer_idx, inner_idx)  
                APPEND position_tuple TO result_positions  
            END IF  
            SET inner_idx TO inner_idx + 1  
        END WHILE  
        SET outer_idx TO outer_idx + 1  
    END WHILE  

    SET temp_list TO result_positions  
    SET temp_len TO LENGTH of temp_list  
    SET sorted_once TO EMPTY LIST  
    SET index_a TO 0  
    WHILE index_a < temp_len  
        SET max_element TO temp_list[0]  
        SET max_pos TO 0  
        SET index_b TO 0  
        WHILE index_b < LENGTH of temp_list  
            SET cmp_element TO temp_list[index_b]  
            SET cond_check TO (cmp_element[1] ≥ max_element[1])  
            IF cond_check  
                SET max_element TO cmp_element  
                SET max_pos TO index_b  
            END IF  
            SET index_b TO index_b + 1  
        END WHILE  
        APPEND max_element TO sorted_once  
        REMOVE element at max_pos FROM temp_list  
        SET temp_len TO temp_len - 1  
        SET index_a TO index_a + 1  
    END WHILE  

    SET sorted_twice TO EMPTY LIST  
    SET left_index TO 0  
    SET right_index TO LENGTH of sorted_once - 1  
    WHILE left_index ≤ right_index  
        SET min_element TO sorted_once[left_index]  
        SET min_pos TO left_index  
        SET scan_index TO left_index  
        WHILE scan_index ≤ right_index  
            IF sorted_once[scan_index][0] ≤ min_element[0]  
                SET min_element TO sorted_once[scan_index]  
                SET min_pos TO scan_index  
            END IF  
            SET scan_index TO scan_index + 1  
        END WHILE  
        SET temp_var TO sorted_once[left_index]  
        SET sorted_once[left_index] TO sorted_once[min_pos]  
        SET sorted_once[min_pos] TO temp_var  
        SET left_index TO left_index + 1  
    END WHILE  

    RETURN sorted_once  
END FUNCTION