FUNCTION sort_numbers(input_string)  
    DECLARE number_value_map AS DICTIONARY  
    number_value_map['seven']    = 7  
    number_value_map['three']    = 3  
    number_value_map['six']      = 6  
    number_value_map['five']     = 5  
    number_value_map['four']     = 4  
    number_value_map['nine']     = 9  
    number_value_map['zero']     = 0  
    number_value_map['eight']    = 8  
    number_value_map['one']      = 1  
    number_value_map['two']      = 2  
  
    DECLARE temp_list AS LIST  
    DECLARE raw_words AS LIST  
    DECLARE idx AS INTEGER  
    DECLARE current_word AS STRING  
  
    raw_words = SPLIT input_string BY ' '  
  
    temp_list = EMPTY LIST  
    idx = 0  
    WHILE idx < LENGTH(raw_words)  
        current_word = raw_words[idx]  
        IF current_word != '' THEN  
            APPEND current_word TO temp_list  
        END IF  
        idx = idx + 1  
    END WHILE  
  
    DECLARE i AS INTEGER  
    DECLARE j AS INTEGER  
    DECLARE key AS STRING  
  
    i = 1  
    WHILE i < LENGTH(temp_list)  
        key = temp_list[i]  
        j = i - 1  
  
        WHILE j >= 0 AND number_value_map[temp_list[j]] > number_value_map[key]  
            temp_list[j + 1] = temp_list[j]  
            j = j - 1  
        END WHILE  
  
        temp_list[j + 1] = key  
        i = i + 1  
    END WHILE  
  
    DECLARE output_string AS STRING  
    output_string = ''  
  
    DECLARE k AS INTEGER = 0  
    WHILE k < LENGTH(temp_list)  
        output_string = output_string + temp_list[k]  
        IF k != LENGTH(temp_list) - 1 THEN  
            output_string = output_string + ' '  
        END IF  
        k = k + 1  
    END WHILE  
  
    RETURN output_string  
END FUNCTION