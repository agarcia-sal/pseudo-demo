FUNCTION prod_signs(array_of_integers)  
    DECLARE idx AS INTEGER = 0  
    DECLARE length_array AS INTEGER = LENGTH(array_of_integers)  

    IF length_array EQUALS 0 THEN  
        RETURN None  
    END IF  

    DECLARE zero_found AS BOOLEAN = FALSE  
    WHILE idx < length_array AND (zero_found = FALSE) DO  
        IF array_of_integers.at(idx) = 0 THEN  
            zero_found = TRUE  
        END IF  
        idx = idx + 1  
    END WHILE  

    DECLARE sign_product AS INTEGER  
    IF zero_found THEN   
        sign_product = 0  
    ELSE  
        DECLARE neg_count AS INTEGER = 0  
        DECLARE inner_idx AS INTEGER = 0  

        WHILE inner_idx < length_array DO  
            DECLARE current_value AS INTEGER = array_of_integers.at(inner_idx)  
            IF current_value < 0 THEN  
                neg_count = neg_count + 1  
            END IF  
            inner_idx = inner_idx + 1  
        END WHILE  

        DECLARE base_val AS INTEGER = -1  
        DECLARE exponent_val AS INTEGER = neg_count  
        DECLARE temp_result AS INTEGER = 1  
        DECLARE exp_counter AS INTEGER = 0  

        WHILE exp_counter < exponent_val DO  
            temp_result = temp_result * base_val  
            exp_counter = exp_counter + 1  
        END WHILE  

        sign_product = temp_result  
    END IF  

    DECLARE total_sum AS INTEGER = 0  
    DECLARE sum_idx AS INTEGER = 0  

    WHILE sum_idx < length_array DO  
        DECLARE elem_abs AS INTEGER = array_of_integers.at(sum_idx)  
        IF elem_abs < 0 THEN  
            elem_abs = 0 - elem_abs  
        END IF  
        total_sum = total_sum + elem_abs  
        sum_idx = sum_idx + 1  
    END WHILE  

    DECLARE final_result AS INTEGER = sign_product * total_sum  
    RETURN final_result  
END FUNCTION