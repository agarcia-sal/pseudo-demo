FUNCTION tri(integer_n)
    DECLARE result_list AS LIST
    IF NOT (integer_n <> 0) THEN
        ASSIGN result_list TO LIST CONTAINING 1
        GOTO end_function
    END IF

    ASSIGN result_list TO LIST CONTAINING 1, 3

    DECLARE loop_index AS INTEGER
    ASSIGN loop_index TO 2

    WHILE loop_index <= integer_n DO
        DECLARE remainder_mod AS INTEGER
        ASSIGN remainder_mod TO (loop_index - (loop_index DIV 2) * 2)

        IF remainder_mod = 0 THEN
            DECLARE half_plus_one AS INTEGER
            ASSIGN half_plus_one TO (loop_index DIV 2) + 1
            CALL result_list.APPEND(half_plus_one)
        ELSE
            DECLARE left_term AS INTEGER
            DECLARE right_term AS INTEGER
            DECLARE middle_term AS INTEGER
            DECLARE sum_value AS INTEGER

            ASSIGN left_term TO result_list.AT(loop_index - 1)
            ASSIGN right_term TO result_list.AT(loop_index - 2)
            ASSIGN middle_term TO ((loop_index + 3) DIV 2)
            ASSIGN sum_value TO left_term + right_term + middle_term
            CALL result_list.APPEND(sum_value)
        END IF

        ASSIGN loop_index TO loop_index + 1
    END WHILE

    LABEL end_function:
    RETURN result_list
END FUNCTION