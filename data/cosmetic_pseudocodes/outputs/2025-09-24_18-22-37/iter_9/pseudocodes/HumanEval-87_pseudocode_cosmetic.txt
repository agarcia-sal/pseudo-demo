```
FUNCTION get_row(matrix, num)
    SET found_positions TO []
    SET outer_counter TO 0
    WHILE NOT (outer_counter GREATER THAN (LENGTH(matrix) MINUS 1))
        SET inner_counter TO 0
        REPEAT
            IF NOT (matrix.at(outer_counter).at(inner_counter) NOT EQUAL TO num)
                SET positions_in_row TO (outer_counter, inner_counter)
                found_positions.APPEND(positions_in_row)
            END IF
            inner_counter INCREMENT BY 1
        UNTIL (inner_counter GREATER THAN (LENGTH(matrix.at(outer_counter)) MINUS 1))
        outer_counter INCREMENT BY 1
    END WHILE
    SET temp_positions TO []
    FOR item IN found_positions
        temp_positions.APPEND(item)
    END FOR
    found_positions = temp_positions
    SET i TO 0
    WHILE NOT (i GREATER THAN (LENGTH(found_positions) MINUS 2))
        SET j TO i PLUS 1
        WHILE NOT (j GREATER THAN (LENGTH(found_positions) MINUS 1))
            IF NOT (found_positions.at(i).at(1) GREATER THAN OR EQUAL TO found_positions.at(j).at(1))
                SET temp_var TO found_positions.at(i)
                found_positions.at(i) = found_positions.at(j)
                found_positions.at(j) = temp_var
            END IF
            j INCREMENT BY 1
        END WHILE
        i INCREMENT BY 1
    END WHILE
    SET p TO 0
    WHILE NOT (p GREATER THAN (LENGTH(found_positions) MINUS 2))
        SET q TO p PLUS 1
        WHILE NOT (q GREATER THAN (LENGTH(found_positions) MINUS 1))
            IF NOT (found_positions.at(p).at(0) NOT LESS THAN found_positions.at(q).at(0))
                SET temp_entry TO found_positions.at(p)
                found_positions.at(p) = found_positions.at(q)
                found_positions.at(q) = temp_entry
            END IF
            q INCREMENT BY 1
        END WHILE
        p INCREMENT BY 1
    END WHILE
    RETURN found_positions
END FUNCTION
```