```
FUNCTION prod_signs(sequence_of_ints)
    IF sequence_of_ints.length = 0 THEN
        RETURN None
    END IF

    VAR zero_found IS FALSE
    VAR neg_count IS 0

    VAR current_val
    VAR idx IS 0

    WHILE idx < sequence_of_ints.length
        current_val = sequence_of_ints.at(idx)
        IF current_val = 0 THEN
            zero_found = TRUE
            BREAK
        END IF
        IF current_val < 0 THEN
            neg_count = neg_count + 1
        END IF
        idx = idx + 1
    END WHILE

    VAR product_sign
    IF zero_found THEN
        product_sign = 0
    ELSE
        VAR exponentiation_base IS -1
        VAR exponentiation_result IS 1
        VAR exponent_itr IS 0
        WHILE exponent_itr < neg_count
            exponentiation_result = exponentiation_result * exponentiation_base
            exponent_itr = exponent_itr + 1
        END WHILE
        product_sign = exponentiation_result
    END IF

    VAR total_magnitude IS 0
    FOR element IN sequence_of_ints
        VAR abs_val IS element
        IF abs_val < 0 THEN
            abs_val = -abs_val
        END IF
        total_magnitude = total_magnitude + abs_val
    END FOR

    RETURN product_sign * total_magnitude
END FUNCTION
```