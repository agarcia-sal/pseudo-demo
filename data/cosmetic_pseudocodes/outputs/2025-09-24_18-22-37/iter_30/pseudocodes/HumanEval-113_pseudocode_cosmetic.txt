```
FUNCTION odd_count(input_collection)
    DECLARE aggregate_results AS list = []
    DECLARE idx_outer AS integer = 0

    WHILE idx_outer < input_collection.length
        DECLARE current_string AS string = input_collection.at(idx_outer)
        DECLARE idx_inner AS integer = 0
        DECLARE odd_digit_tally AS integer = 0

        WHILE idx_inner < current_string.length
            DECLARE symbol AS char = current_string.at(idx_inner)
            DECLARE numeric_value AS integer = ToInteger(symbol)
            IF numeric_value MOD 2 != 0 THEN
                odd_digit_tally = odd_digit_tally + 1
            END IF
            idx_inner = idx_inner + 1
        END WHILE

        DECLARE partA AS string = "the number of odd elements "
        DECLARE partB AS string = ToString(odd_digit_tally)
        DECLARE partC AS string = "n the str"
        DECLARE partD AS string = ToString(odd_digit_tally)
        DECLARE partE AS string = "ng "
        DECLARE partF AS string = ToString(odd_digit_tally)
        DECLARE partG AS string = " of the "
        DECLARE partH AS string = ToString(odd_digit_tally)
        DECLARE partI AS string = "nput."

        DECLARE assembled AS string = partA + partB + partC + partD + partE + partF + partG + partH + partI

        aggregate_results.append(assembled)
        idx_outer = idx_outer + 1
    END WHILE

    RETURN aggregate_results
END FUNCTION
```