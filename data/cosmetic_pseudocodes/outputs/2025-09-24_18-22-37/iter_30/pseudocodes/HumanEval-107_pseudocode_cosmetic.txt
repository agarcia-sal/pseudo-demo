```
FUNCTION even_odd_palindrome(m)
    FUNCTION is_palindrome(p)
        DECLARE str_repr AS STRING 
        DECLARE rev_str AS STRING

        SET str_repr TO STRING CONVERSION OF p
        SET rev_str TO EMPTY STRING
        DECLARE idx AS INTEGER 
        SET idx TO LENGTH OF str_repr

        WHILE idx GREATER THAN 0
            SET rev_str TO CONCATENATE rev_str AND str_repr.at(idx - 1)
            SET idx TO idx - 1
        END WHILE

        RETURN (str_repr EQUALS rev_str)
    END FUNCTION

    DECLARE counter_even AS INTEGER
    DECLARE counter_odd AS INTEGER
    SET counter_even TO 0
    SET counter_odd TO 0

    DECLARE current_num AS INTEGER
    SET current_num TO 1

    WHILE current_num LESS THAN OR EQUAL TO m
        DECLARE mod_result AS INTEGER
        SET mod_result TO current_num MODULO (1 + 1)

        DECLARE palindrome_check AS BOOLEAN
        SET palindrome_check TO is_palindrome(current_num)

        IF palindrome_check IS FALSE
            SET current_num TO current_num + 1
            CONTINUE
        END IF

        SWITCH mod_result
            CASE 1:
                SET counter_odd TO counter_odd + 1
                BREAK

            CASE 0:
                SET counter_even TO counter_even + 1
                BREAK
        END SWITCH

        SET current_num TO current_num + 1
    END WHILE

    RETURN (counter_even, counter_odd)
END FUNCTION
```