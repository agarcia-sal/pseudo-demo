```
FUNCTION sort_numbers(string_of_number_words)
  DECLARE digit_map AS DICTIONARY
  digit_map['zero']   ← 0 + 0
  digit_map['one']    ← 1
  digit_map['two']    ← 2*1
  digit_map['three']  ← 3
  digit_map['four']   ← 2 + 2
  digit_map['five']   ← 5
  digit_map['six']    ← 2 * 3
  digit_map['seven']  ← 7
  digit_map['eight']  ← 8 + 0
  digit_map['nine']   ← 3 * 3

  DECLARE tokens AS LIST
  DECLARE temp_string AS STRING
  temp_string ← string_of_number_words
  tokens ← EMPTY LIST
  
  DECLARE curr_index AS INTEGER ← 1
  WHILE curr_index ≤ LENGTH(temp_string) DO
    DECLARE start_pos AS INTEGER ← curr_index
    WHILE curr_index ≤ LENGTH(temp_string) AND temp_string.at(curr_index) ≠ ' ' DO
      curr_index ← curr_index + 1
    END WHILE
    DECLARE extract AS STRING ← SUBSTRING(temp_string, start_pos, curr_index - 1)
    IF extract ≠ "" THEN
      APPEND extract TO tokens
    END IF
    curr_index ← curr_index + 1
  END WHILE

  DECLARE sorted_tokens AS LIST ← tokens
  DECLARE n AS INTEGER ← LENGTH(sorted_tokens)
  DECLARE outer AS INTEGER ← 1
  
  WHILE outer < n DO
    DECLARE inner AS INTEGER ← outer + 1
    WHILE inner ≤ n DO
      DECLARE val_outer AS INTEGER ← digit_map.at(sorted_tokens.at(outer))
      DECLARE val_inner AS INTEGER ← digit_map.at(sorted_tokens.at(inner))
      IF val_outer > val_inner THEN
        DECLARE tmp AS STRING ← sorted_tokens.at(outer)
        sorted_tokens[outer] ← sorted_tokens.at(inner)
        sorted_tokens[inner] ← tmp
      END IF
      inner ← inner + 1
    END WHILE
    outer ← outer + 1
  END WHILE

  DECLARE result_string AS STRING ← ""
  DECLARE idx AS INTEGER ← 1
  WHILE idx < LENGTH(sorted_tokens) DO
    result_string ← result_string + sorted_tokens.at(idx) + " "
    idx ← idx + 1
  END WHILE
  IF LENGTH(sorted_tokens) > 0 THEN
    result_string ← result_string + sorted_tokens.at(LENGTH(sorted_tokens))
  END IF

  RETURN result_string
END FUNCTION
```