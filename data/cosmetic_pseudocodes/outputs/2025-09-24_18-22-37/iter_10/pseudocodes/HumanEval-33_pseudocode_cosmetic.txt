FUNCTION sort_third(list_input)  
        SET temp_copy TO EMPTY LIST  
        FOR idx FROM 0 TO (LENGTH(list_input) - 1)  
            APPEND list_input.at(idx) TO temp_copy  
        END FOR  
  
        SET divisible_by_three_elements TO EMPTY LIST  
        SET position TO 0  
        WHILE position â‰¤ (LENGTH(temp_copy) - 1)  
            IF (position MODULO 3) EQUALS 0 THEN  
                APPEND temp_copy[position] TO divisible_by_three_elements  
            END IF  
            SET position TO position PLUS 1  
        END WHILE  
  
        SET sorted_subset TO EMPTY LIST  
        SET pointer_1 TO 0  
        SET pointer_2 TO LENGTH(divisible_by_three_elements)  
        IF pointer_2 GREATER THAN 1 THEN  
            SET sorted_subset TO divisible_by_three_elements  
            SET i_var TO 0  
            WHILE i_var LESS THAN (pointer_2 - 1)  
                SET j_var TO 0  
                WHILE j_var LESS THAN (pointer_2 - i_var - 1)  
                    IF sorted_subset[j_var] GREATER THAN sorted_subset[j_var PLUS 1] THEN  
                        SET temp_swap TO sorted_subset[j_var]  
                        SET sorted_subset[j_var] TO sorted_subset[j_var PLUS 1]  
                        SET sorted_subset[j_var PLUS 1] TO temp_swap  
                    END IF  
                    SET j_var TO j_var PLUS 1  
                END WHILE  
                SET i_var TO i_var PLUS 1  
            END WHILE  
        ELSE  
            SET sorted_subset TO divisible_by_three_elements  
        END IF  
  
        SET replace_idx TO 0  
        SET insert_pos TO 0  
        WHILE replace_idx LESS THAN LENGTH(temp_copy)  
            IF (replace_idx MODULO 3) EQUALS 0 THEN  
                SET temp_copy.at(replace_idx) TO sorted_subset.at(insert_pos)  
                SET insert_pos TO insert_pos PLUS 1  
            END IF  
            SET replace_idx TO replace_idx PLUS 1  
        END WHILE  
  
        RETURN temp_copy  
END FUNCTION