FUNCTION count_nums(array_of_integers)  
  FUNCTION digits_sum(flag_value)  
    SET phase_code TO 1  
    IF NOT (flag_value >= 0) THEN  
      SET flag_value TO 0 - flag_value  
      SET phase_code TO 0 - 1  
    END IF  
    
    SET digits_collection TO EMPTY LIST  
    SET numeric_string TO CONVERT flag_value TO STRING  
    SET char_index TO 0  
    WHILE char_index LESS THAN LENGTH(numeric_string)  
      APPEND CONVERT numeric_string.at(char_index) TO INTEGER TO digits_collection  
      SET char_index TO char_index PLUS 1  
    END WHILE  
    
    SET first_digit TO digits_collection.at(0)  
    SET first_digit TO first_digit MULTIPLIED BY phase_code  
    SET digits_collection[0] TO first_digit  
    
    SET accumulator_result TO 0  
    SET scan_idx TO 0  
    DO  
      SET accumulator_result TO accumulator_result PLUS digits_collection.at(scan_idx)  
      SET scan_idx TO scan_idx PLUS 1  
    WHILE scan_idx LESS THAN LENGTH(digits_collection)  
    
    RETURN accumulator_result  
  END FUNCTION  
  
  SET temp_results TO EMPTY LIST  
  SET outer_index TO 0  
  REPEAT  
    IF outer_index GREATER THAN LENGTH(array_of_integers) MINUS 1 THEN  
      BREAK  
    END IF  
    SET current_value TO array_of_integers[outer_index]  
    SET digit_sum_result TO digits_sum(current_value)  
    APPEND digit_sum_result TO temp_results  
    SET outer_index TO outer_index PLUS 1  
  UNTIL FALSE  
  
  SET filtered_collection TO EMPTY LIST  
  SET temp_index TO 0  
  WHILE temp_index < LENGTH(temp_results)  
    SET candidate_value TO temp_results[temp_index]  
    IF candidate_value > 0 THEN  
      APPEND candidate_value TO filtered_collection  
    END IF  
    SET temp_index TO temp_index PLUS 1  
  END WHILE  
  
  SET final_length TO LENGTH(filtered_collection)  
  RETURN final_length  
END FUNCTION