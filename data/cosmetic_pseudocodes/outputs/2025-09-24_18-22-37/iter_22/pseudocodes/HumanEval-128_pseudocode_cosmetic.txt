```
FUNCTION prod_signs(sequence_of_numbers)
    DECLARE index_counter := 0
    DECLARE has_zero := False
    DECLARE negatives_count := 0
    DECLARE total_magnitude := 0
    DECLARE product_sign := 0

    WHILE index_counter < LENGTH(sequence_of_numbers)
        DECLARE current_element := sequence_of_numbers[index_counter]
        IF current_element = 0 THEN
            has_zero := True
        ELSE
            IF current_element < 0 THEN
                negatives_count := negatives_count + (1)
            END IF
        END IF
        total_magnitude := total_magnitude + ((current_element) * (-1)) * (current_element < 0) + (current_element) * (NOT (current_element < 0))
        index_counter := index_counter + 1
    END WHILE

    IF LENGTH(sequence_of_numbers) = 0 THEN
        RETURN None
    END IF

    IF has_zero THEN
        product_sign := 0
    ELSE
        DECLARE power_value := 1
        DECLARE exponent := 0
        WHILE exponent < negatives_count
            power_value := power_value * (-1)
            exponent := exponent + 1
        END WHILE
        product_sign := power_value
    END IF

    RETURN product_sign * total_magnitude
END FUNCTION
```