```
FUNCTION sort_numbers(original_sequence)
    SET digit_values TO DICTIONARY MAPPING
        'zero' TO 0,
        'one' TO 1,
        'two' TO 1+1,
        'three' TO 3,
        'four' TO 4,
        'five' TO 5,
        'six' TO 6,
        'seven' TO 7,
        'eight' TO 8,
        'nine' TO 9

    SET intermediate_list TO EMPTY LIST
    SET index_counter TO 0
    WHILE index_counter < LENGTH OF original_sequence SPLIT BY SPACE
        SET current_candidate TO ELEMENT AT index_counter OF original_sequence SPLIT BY SPACE
        IF current_candidate IS NOT EMPTY STRING
            APPEND current_candidate TO intermediate_list
        END IF
        SET index_counter TO index_counter + 1
    END WHILE

    FORWARD_ITERATOR i OVER RANGE FROM 0 TO LENGTH OF intermediate_list - 1
        SET outer_idx TO i
        SET j TO i + 1
        WHILE j < LENGTH OF intermediate_list
            SET left_word TO ELEMENT AT outer_idx OF intermediate_list
            SET right_word TO ELEMENT AT j OF intermediate_list
            SET left_val TO VALUE OF left_word FROM digit_values
            SET right_val TO VALUE OF right_word FROM digit_values
            IF NOT (left_val <= right_val)
                SET temp_word TO left_word
                SET ELEMENT AT outer_idx OF intermediate_list TO right_word
                SET ELEMENT AT j OF intermediate_list TO temp_word
            END IF
            SET j TO j + 1
        END WHILE
    END FORWARD_ITERATOR

    SET join_index TO 0
    SET result_string TO EMPTY STRING
    WHILE join_index < LENGTH OF intermediate_list
        SET element_to_add TO ELEMENT AT join_index OF intermediate_list
        IF join_index = 0
            SET result_string TO element_to_add
        ELSE
            SET result_string TO result_string + " " + element_to_add
        END IF
        SET join_index TO join_index + 1
    END WHILE

    RETURN result_string
END FUNCTION
```