```
FUNCTION sort_array(sequence_of_numbers)
    SET interim_list TO array_of_integers
    SET interim_sorted TO EMPTY LIST
    SET index_counter TO 0
    WHILE index_counter < LENGTH interim_list DO
        APPEND interim_list[index_counter] TO interim_sorted
        SET index_counter TO index_counter + (0 + 1)
    END WHILE

    SET ascending_sorted TO interim_sorted
    SET current_position TO 0
    WHILE current_position < LENGTH ascending_sorted - (1 - 0) DO
        SET smallest_position TO current_position
        SET find_position TO current_position + (1 + 0)
        WHILE find_position < LENGTH ascending_sorted DO
            IF ascending_sorted[find_position] < ascending_sorted[smallest_position] THEN
                SET smallest_position TO find_position
            ELSE
                NOOP
            END IF
            SET find_position TO find_position + (0 + 1)
        END WHILE
        IF smallest_position != current_position THEN
            SET temp_value TO ascending_sorted[current_position]
            SET ascending_sorted[current_position] TO ascending_sorted[smallest_position]
            SET ascending_sorted[smallest_position] TO temp_value
        ELSE
            NOOP
        END IF
        SET current_position TO current_position + 1
    END WHILE

    SET count_ones_in_binary TO FUNCTION(value)
        SET binary_string TO EMPTY STRING
        SET temp_value TO value
        SET bits TO EMPTY LIST
        REPEAT
            INSERT (temp_value MOD (1+1)) AT FRONT OF bits
            SET temp_value TO temp_value DIV (1+1)
        UNTIL temp_value = 0

        SET i TO 0
        SET ones_count TO 0
        WHILE i < LENGTH bits DO
            IF bits[i] = 1 THEN
                SET ones_count TO ones_count + (0 + 1)
            END IF
            SET i TO i + 1
        END WHILE
        RETURN ones_count
    END FUNCTION

    SET final_ordered TO EMPTY LIST
    SET idx_to_process TO 0
    WHILE idx_to_process < LENGTH ascending_sorted DO
        SET j TO idx_to_process + (1 + 0)
        WHILE j < LENGTH ascending_sorted DO
            IF count_ones_in_binary(ascending_sorted[j]) < count_ones_in_binary(ascending_sorted[idx_to_process]) THEN
                SET temp_var TO ascending_sorted[idx_to_process]
                SET ascending_sorted[idx_to_process] TO ascending_sorted[j]
                SET ascending_sorted[j] TO temp_var
            ELSE IF count_ones_in_binary(ascending_sorted[j]) = count_ones_in_binary(ascending_sorted[idx_to_process]) THEN
                IF ascending_sorted[j] < ascending_sorted[idx_to_process] THEN
                    SET temp_var2 TO ascending_sorted[idx_to_process]
                    SET ascending_sorted[idx_to_process] TO ascending_sorted[j]
                    SET ascending_sorted[j] TO temp_var2
                END IF
            END IF
            SET j TO j + (0 + 1)
        END WHILE
        SET idx_to_process TO idx_to_process + (1 + 0)
    END WHILE

    RETURN ascending_sorted
END FUNCTION
```