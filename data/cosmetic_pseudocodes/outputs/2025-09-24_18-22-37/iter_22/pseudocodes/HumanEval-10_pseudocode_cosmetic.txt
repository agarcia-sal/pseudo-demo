```
FUNCTION is_palindrome(candidate_string)
    SET reversed_version TO EMPTY STRING
    SET index_counter TO LENGTH(candidate_string) MINUS 1

    WHILE index_counter GREATER THAN OR EQUAL TO 0
        SET reversed_version TO reversed_version CONCATENATED WITH CHARACTER AT candidate_string[index_counter]
        DECREMENT index_counter BY 1
    END WHILE

    IF candidate_string EQUALS reversed_version THEN
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF
END FUNCTION

FUNCTION make_palindrome(source_string)
    IF LENGTH(source_string) EQUALS 0 THEN
        RETURN EMPTY STRING
    ELSE
        SET suffix_start_position TO 0
        SET palindrome_suffix_found TO FALSE

        WHILE NOT palindrome_suffix_found
            SET test_substring TO EMPTY STRING
            SET i TO suffix_start_position

            WHILE i LESS THAN LENGTH(source_string)
                SET test_substring TO test_substring CONCATENATED WITH CHARACTER AT source_string[i]
                INCREMENT i BY 1
            END WHILE

            IF is_palindrome(test_substring) THEN
                SET palindrome_suffix_found TO TRUE
            ELSE
                INCREMENT suffix_start_position BY 1
            END IF
        END WHILE

        SET prefix_to_append TO EMPTY STRING
        SET j TO 0

        WHILE j LESS THAN suffix_start_position
            SET prefix_to_append TO CHARACTER AT source_string[j] CONCATENATED WITH prefix_to_append
            INCREMENT j BY 1
        END WHILE

        RETURN source_string CONCATENATED WITH prefix_to_append
    END IF
END FUNCTION
```