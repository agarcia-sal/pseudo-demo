FUNCTION median(original_collection)
  DECLARE sorted_collection
  DECLARE size_value
  DECLARE midpoint
  DECLARE median_value
  DECLARE first_middle_element
  DECLARE second_middle_element

  SET sorted_collection TO EMPTY LIST
  FOR EACH element IN original_collection DO
    APPEND element TO sorted_collection
  END FOR

  // Sort the duplicate list without modifying original_collection
  // Using a basic sorting procedure is assumed here as abstract
  sorted_collection := custom_sort_method(sorted_collection)

  size_value := LENGTH(sorted_collection)
  midpoint := size_value DIV 2

  IF NOT ((size_value MOD 2) = 0) THEN
    median_value := sorted_collection.at(midpoint)
    RETURN median_value
  ELSE
    second_middle_element := sorted_collection.at(midpoint)
    first_middle_element := sorted_collection.at(midpoint - 1)

    median_value := (first_middle_element + second_middle_element) / (2.0)
    RETURN median_value
  END IF
END FUNCTION