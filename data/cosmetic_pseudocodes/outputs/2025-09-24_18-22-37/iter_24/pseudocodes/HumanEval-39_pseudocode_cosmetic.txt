```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        SET flag_result TO False
        IF NOT (integer_p GREATER THAN OR EQUAL TO 2)
            SET flag_result TO False
        ELSE
            SET flag_result TO True
            SET integer_v TO 2
            SET integer_limit TO MINIMUM OF (INTEGER PART OF SQUARE ROOT OF integer_p PLUS 1) AND (integer_p MINUS 1)
            WHILE integer_v LESS THAN OR EQUAL TO integer_limit âˆ§ flag_result
                SET flag_mod TO (integer_p MODULO integer_v)
                SWITCH flag_mod
                    CASE 0
                        SET flag_result TO False
                    CASE DEFAULT
                        SET flag_result TO flag_result
                END SWITCH
                SET integer_v TO integer_v PLUS 1
            END WHILE
        END IF
        RETURN flag_result
    END FUNCTION

    SET list_fibonacci TO [0, 1]
    SET boolean_continue TO True
    WHILE boolean_continue
        SET integer_length TO LENGTH OF list_fibonacci
        SET integer_new TO 0
        SET integer_new TO list_fibonacci.at(integer_length MINUS 1) PLUS list_fibonacci.at(integer_length MINUS 2)
        APPEND integer_new TO list_fibonacci
        IF is_prime(list_fibonacci.at(LENGTH OF list_fibonacci MINUS 1))
            SET integer_n TO integer_n MINUS 1
        END IF
        SWITCH (integer_n EQUAL TO 0)
            CASE True
                SET boolean_continue TO False
            CASE DEFAULT
                SET boolean_continue TO True
        END SWITCH
    END WHILE
    RETURN list_fibonacci.at(LENGTH OF list_fibonacci MINUS 1)
END FUNCTION
```