```
FUNCTION prod_signs(array_of_integers)
    
    SET flag_empty TO TRUE
    SET index_checker TO 0
    WHILE index_checker < (LENGTH OF array_of_integers) AND flag_empty
        SET flag_empty TO FALSE
        SET index_checker TO index_checker + 1
    END WHILE
    
    IF flag_empty IS TRUE
        RETURN None
    END IF

    SET contains_zero TO FALSE
    SET scan_pointer TO 0
    WHILE scan_pointer < LENGTH OF array_of_integers
        SET current_element TO array_of_integers.at(scan_pointer)
        IF current_element EQUALS 0
            SET contains_zero TO TRUE
            BREAK
        END IF
        SET scan_pointer TO scan_pointer + 1
    END WHILE

    DECLARE sign_product
    IF contains_zero IS TRUE
        SET sign_product TO 0
    ELSE
        SET neg_counter TO 0
        SET traverse_index TO 0
        WHILE traverse_index < LENGTH OF array_of_integers
            SET probe_element TO array_of_integers.at(traverse_index)
            IF probe_element < 0
                SET neg_counter TO neg_counter + 1
            END IF
            SET traverse_index TO traverse_index + 1
        END WHILE
        SET power_base TO -1
        SET exponent_result TO 1
        SET exponent_counter TO 0
        WHILE exponent_counter < neg_counter
            SET exponent_result TO exponent_result * power_base
            SET exponent_counter TO exponent_counter + 1
        END WHILE
        SET sign_product TO exponent_result
    END IF

    SET sum_abs_values TO 0
    SET accumulation_index TO 0
    WHILE accumulation_index < LENGTH OF array_of_integers
        SET magnitude TO array_of_integers.at(accumulation_index)
        IF magnitude < 0
            SET magnitude TO 0 - magnitude
        END IF
        SET sum_abs_values TO sum_abs_values + magnitude
        SET accumulation_index TO accumulation_index + 1
    END WHILE

    RETURN sign_product * sum_abs_values

END FUNCTION
```