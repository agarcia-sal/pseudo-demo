```
FUNCTION count_nums(array_of_integers)
    FUNCTION digits_sum(integer_value)
        SET flag_sign TO 1
        IF NOT (integer_value >= 0)
            SET temp_value TO integer_value * (-1)
            SET integer_value TO temp_value
            SET flag_sign TO -1
        END IF
        SET digit_strings TO CONVERT integer_value TO STRING
        SET digit_collection TO EMPTY LIST
        SET idx_counter TO 0
        WHILE idx_counter < LENGTH OF digit_strings
            SET temp_char TO digit_strings.at(idx_counter)
            SET temp_digit TO CONVERT temp_char TO INTEGER
            APPEND temp_digit TO digit_collection
            SET idx_counter TO idx_counter + 1
        END WHILE
        SET first_digit_adjusted TO digit_collection.at(0) * flag_sign
        SET digit_collection.at(0) TO first_digit_adjusted
        SET sum_accumulator TO 0
        SET index_sum TO 0
        WHILE index_sum < LENGTH OF digit_collection
            SET current_digit TO digit_collection[index_sum]
            SET sum_accumulator TO sum_accumulator + current_digit
            SET index_sum TO index_sum + 1
        END WHILE
        RETURN sum_accumulator
    END FUNCTION

    SET result_collector TO EMPTY LIST
    SET iterator_pos TO 0
    WHILE iterator_pos < LENGTH OF array_of_integers
        SET current_elem TO array_of_integers.at(iterator_pos)
        SET sum_digit TO digits_sum(current_elem)
        APPEND sum_digit TO result_collector
        SET iterator_pos TO iterator_pos + 1
    END WHILE

    SET filtered_collection TO EMPTY LIST
    SET pos_filter TO 0
    WHILE pos_filter < LENGTH OF result_collector
        SET candidate_elem TO result_collector[pos_filter]
        SWITCH
            CASE candidate_elem > 0:
                APPEND candidate_elem TO filtered_collection
                BREAK
            DEFAULT:
                BREAK
        END SWITCH
        SET pos_filter TO pos_filter + 1
    END WHILE
    SET length_filtered TO LENGTH OF filtered_collection
    RETURN length_filtered
END FUNCTION
```