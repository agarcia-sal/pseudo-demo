```
FUNCTION maximum(array_of_integers, positive_integer_k)
    DECLARE temp_flag AS BOOLEAN
    DECLARE temp_counter AS INTEGER
    DECLARE temp_result AS LIST
    DECLARE temp_index AS INTEGER

    temp_flag ← (positive_integer_k NOT EQUAL TO 0)
    IF temp_flag = FALSE THEN
        temp_result ← EMPTY_LIST
    ELSE
        SET temp_index ← 0
        WHILE (temp_index < LENGTH(array_of_integers) - 1)
            DECLARE inner_index AS INTEGER
            inner_index ← 0
            WHILE (inner_index < LENGTH(array_of_integers) - 1 - temp_index)
                DECLARE comparator AS BOOLEAN
                comparator ← (array_of_integers.at(inner_index) > array_of_integers.at(inner_index + 1))
                IF (comparator = TRUE) THEN
                    DECLARE swap_holder AS INTEGER
                    swap_holder ← array_of_integers.at(inner_index)
                    array_of_integers.at(inner_index) ← array_of_integers.at(inner_index + 1)
                    array_of_integers.at(inner_index + 1) ← swap_holder
                END IF
                inner_index ← inner_index + 1
            END WHILE
            temp_index ← temp_index + 1
        END WHILE

        DECLARE total_length AS INTEGER
        total_length ← LENGTH(array_of_integers)
        DECLARE start_slice_index AS INTEGER
        start_slice_index ← total_length - positive_integer_k
        temp_result ← EMPTY_LIST
        DECLARE extractor_index AS INTEGER
        extractor_index ← start_slice_index

        WHILE (extractor_index < total_length)
            temp_result.APPEND(array_of_integers.at(extractor_index))
            extractor_index ← extractor_index + 1
        END WHILE
    END IF

    RETURN temp_result
END FUNCTION
```