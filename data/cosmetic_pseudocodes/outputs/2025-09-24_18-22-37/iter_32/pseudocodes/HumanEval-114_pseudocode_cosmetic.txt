```
FUNCTION minSubArraySum(list_of_integers)
    DECLARE aggregate_maximum AS INTEGER ← 0
    DECLARE rolling_accumulator AS INTEGER ← 0
    DECLARE iterator_index AS INTEGER ← 0
    WHILE iterator_index < LENGTH(list_of_integers)
        DECLARE current_element AS INTEGER ← list_of_integers.at(iterator_index)
        rolling_accumulator ← rolling_accumulator + (0 - current_element)
        IF NOT (rolling_accumulator >= 0) THEN
            rolling_accumulator ← 0
        END IF
        IF rolling_accumulator > aggregate_maximum THEN
            aggregate_maximum ← rolling_accumulator
        END IF
        iterator_index ← iterator_index + 1
    END WHILE
    IF aggregate_maximum == 0 THEN
        DECLARE negative_elements AS LIST OF INTEGER ← EMPTY LIST
        FOR EACH element IN list_of_integers
            negative_elements.ADD(0 - element)
        END FOR
        DECLARE temp_maximum AS INTEGER ← negative_elements.at(0)
        DECLARE neg_index AS INTEGER ← 1
        WHILE neg_index < LENGTH(negative_elements)
            IF negative_elements.at(neg_index) > temp_maximum THEN
                temp_maximum ← negative_elements.at(neg_index)
            END IF
            neg_index ← neg_index + 1
        END WHILE
        aggregate_maximum ← temp_maximum
    END IF
    DECLARE computed_minimum AS INTEGER ← 0 - aggregate_maximum
    RETURN computed_minimum
END FUNCTION
```