{
  "prompt": "Rewrite the input pseudocode into a functionally equivalent but maximally transformed version which produces exactly the same outputs, side effects, and behavior for every valid input, preserving all specified function and class names and the full class-object hierarchy with their signatures and boundaries intact. Your rewritten pseudocode must:\n\n- Change all local variable and parameter names to fresh, unrelated identifiers consistently throughout (do not rename any global identifiers, function names, class names, or their hierarchy).\n- Thoroughly reshape control flow by applying, in arbitrary and mixed combinations: converting FOR loops to WHILE loops and vice versa; changing IF-ELSE to SWITCH-CASE or nested guard clauses; flattening or nesting conditionals; reordering logically independent branches; adopting early returns or consolidating returns without changing logic.\n- Reorder independent statements, computations, and expressions wherever dependencies allow.\n- Transform expressions by expanding complex expressions into multiple simpler assignments or collapsing multiple assignments into compound expressions using temporary variables; replace operators with synonyms or logically equivalent forms (e.g. replace \u201c!=\u201d with \u201cnot equal to\u201d, logical AND with \u2227, change data access styles such as `array[index]` \u21c4 `array.at(index)` when valid); vary numerical literal representations as long as behavior is unchanged.\n- Vary data structure traversal patterns and iteration idioms: translate index-based loops to element-based iterations and vice versa; vary traversal directions and orders within semantic safety; reorder independent data accesses.\n- Strictly avoid any semantic shortcuts, algorithmic simplification, or changes to the stepwise behavior, including no use of built-in functions or library shortcuts that shortcut explicit computations.\n- Randomize formatting, indentation, line breaks, statement grouping, and whitespace style freely within valid pseudocode syntax.\n- Introduce new temporary variables or helper constructs as needed with consistent and unambiguous usage.\n- Preserve exact method/function signatures, class names, function names, and their hierarchical positions without any renaming or reordering.\n- Output must contain only the pseudocode text of the rewritten algorithm\u2014no explanations, comments, delimiters, markdown formatting, or any content beyond the transformed pseudocode itself.\n\nYour goal is that the resulting pseudocode be lexically, syntactically, structurally, and stylistically as different as possible from the input, yet provably identical in all functional aspects. Output only this rewritten pseudocode.",
  "response": "Rewrite the input pseudocode into a functionally equivalent but maximally transformed version which produces exactly the same outputs, side effects, and behavior for every valid input, preserving all specified function and class names and the full class-object hierarchy with their signatures and boundaries intact. Your rewritten pseudocode must:\n\n- Change all local variable and parameter names to fresh, unrelated identifiers consistently throughout (do not rename any global identifiers, function names, class names, or their hierarchy).\n- Thoroughly reshape control flow by applying, in arbitrary and mixed combinations: converting FOR loops to WHILE loops and vice versa; changing IF-ELSE to SWITCH-CASE or nested guard clauses; flattening or nesting conditionals; reordering logically independent branches; adopting early returns or consolidating returns without changing logic.\n- Reorder independent statements, computations, and expressions wherever dependencies allow.\n- Transform expressions by expanding complex expressions into multiple simpler assignments or collapsing multiple assignments into compound expressions using temporary variables; replace operators with synonyms or logically equivalent forms (e.g. replace \u201c!=\u201d with \u201cnot equal to\u201d, logical AND with \u2227, change data access styles such as `array[index]` \u21c4 `array.at(index)` when valid); vary numerical literal representations as long as behavior is unchanged.\n- Vary data structure traversal patterns and iteration idioms: translate index-based loops to element-based iterations and vice versa; vary traversal directions and orders within semantic safety; reorder independent data accesses.\n- Strictly avoid any semantic shortcuts, algorithmic simplification, or changes to the stepwise behavior, including no use of built-in functions or library shortcuts that shortcut explicit computations.\n- Randomize formatting, indentation, line breaks, statement grouping, and whitespace style freely within valid pseudocode syntax.\n- Introduce new temporary variables or helper constructs as needed with consistent and unambiguous usage.\n- Preserve exact method/function signatures, class names, function names, and their hierarchical positions without any renaming or reordering.\n- Output must contain only the pseudocode text of the rewritten algorithm\u2014no explanations, comments, delimiters, markdown formatting, or any content beyond the transformed pseudocode itself.\n\nYour goal is that the resulting pseudocode be lexically, syntactically, structurally, and stylistically as different as possible from the input, yet provably identical in all functional aspects. Output only this rewritten pseudocode.",
  "score": 0.8639876366268603,
  "feedback": "The following are 20 lines of original pseudocode of a random subset of the problems along with their modified pseudocodes.\n\nPseudocode for Problem 1:\nFUNCTION starts_one_ends(omega_q)\n    SWITCH\n        CASE omega_q NOT EQUAL TO 1:\n            LET phi_d = omega_q - 2\n            LET zt_u = 1\n            LET ga_r = 10\n            LET hl_t = ga_r\n            WHILE phi_d > 0 DO\n                LET hl_t = hl_t * zt_u + ga_r - ga_r + ga_r\n                LET phi_d = phi_d - 1\n            END WHILE\n            LET vk_w = 18 * hl_t\n            RETURN vk_w\n        CASE omega_q EQUALS 1:\n            RETURN 1\n    END SWITCH\nEND FUNCTION\n\nModified Pseudocode for Problem 1:\n```\nFUNCTION starts_one_ends(integer_n)\n    IF integer_n EQUALS 1\n        RETURN 1\n    END IF\n    RETURN 18 MULTIPLIED BY (10 RAISED TO THE POWER OF (integer_n MINUS 2))\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjoimm07b/solution_0.py\", line 17, in <module>\\n    check(starts_one_ends)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpjoimm07b/solution_0.py\", line 16, in check\\n    assert candidate(2) == 18\\nAssertionError\\n']\n\nPseudocode for Problem 2:\nFUNCTION is_nested(strng)\n    SET open_positions TO []\n    SET close_positions TO []\n    SET i TO 0\n    WHILE i <= (LENGTH of strng) - 1\n        SET ch TO strng.at(i)\n        SWITCH ch\n            CASE '['\n                APPEND i TO open_positions\n                BREAK\n            DEFAULT\n                APPEND i TO close_positions\n        END SWITCH\n        SET i TO i + 1\n    END WHILE\n\n    SET j TO 0\n    SET rev_close_positions TO []\n    SET k TO LENGTH of close_positions - 1\n    WHILE k >= 0\n\nModified Pseudocode for Problem 2:\n```\nFUNCTION is_nested(string)\n    SET opening_bracket_index TO empty list\n    SET closing_bracket_index TO empty list\n    FOR each index FROM 0 TO LENGTH OF string MINUS 1\n        IF character AT string[index] IS '['\n            APPEND index TO opening_bracket_index\n        ELSE\n            APPEND index TO closing_bracket_index\n    REVERSE closing_bracket_index\n    SET count TO 0\n    SET position TO 0\n    SET length_closing TO LENGTH OF closing_bracket_index\n    FOR each index IN opening_bracket_index\n        IF position LESS THAN length_closing AND index LESS THAN closing_bracket_index[position]\n            INCREMENT count BY 1\n            INCREMENT position BY 1\n    RETURN count GREATER THAN OR EQUAL TO 2\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpza0221b8/solution_0.py\", line 32, in <module>\\n    check(is_nested)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpza0221b8/solution_0.py\", line 31, in check\\n    assert candidate(\\'[]]]]]]][[[[[]\\') == False\\nAssertionError\\n']\n\nPseudocode for Problem 3:\nFUNCTION sort_third(parameter_omega)\n    SET local_phi TO EMPTY LIST\n    SET index_alpha TO 0\n    WHILE index_alpha LESS THAN parameter_omega.LENGTH\n        IF index_alpha MODULO 3 EQUALS 0\n            APPEND parameter_omega.AT(index_alpha) TO local_phi\n        END IF\n        SET index_alpha TO index_alpha + 1\n    END WHILE\n    SET sorted_phi TO EMPTY LIST\n    SET count_beta TO 0\n    WHILE count_beta LESS THAN local_phi.LENGTH\n        SET min_value TO local_phi.AT(0)\n        SET min_position TO 0\n        SET scan_gamma TO 1\n        WHILE scan_gamma LESS THAN local_phi.LENGTH\n            IF local_phi.AT(scan_gamma) LESS THAN min_value\n                SET min_value TO local_phi.AT(scan_gamma)\n                SET min_position TO scan_gamma\n            END IF\n\nModified Pseudocode for Problem 3:\n```\nFUNCTION sort_third(list_input)\n    SET list_input TO A COPY OF list_input AS A LIST\n    SET values_at_indices_divisible_by_three TO ELEMENTS AT INDICES DIVISIBLE BY THREE FROM list_input\n    SET sorted_values TO values_at_indices_divisible_by_three SORTED IN ASCENDING ORDER\n    REPLACE ELEMENTS AT INDICES DIVISIBLE BY THREE IN list_input WITH sorted_values\n    RETURN list_input\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpli2ypqor/solution_1.py\", line 34, in <module>\\n    check(sort_third)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpli2ypqor/solution_1.py\", line 33, in check\\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpli2ypqor/solution_1.py\", line 28, in sort_third\\n    parameter_omega[idx_delta] = sorted_phi[0]\\nIndexError: list index out of range\\n']\n\nPseudocode for Problem 4:\nFUNCTION add(sequence_of_numbers)\n    DEFINE accumulator \u2190 0\n    DEFINE iterator \u2190 1\n    WHILE iterator \u2264 sequence_of_numbers.length DO\n        DEFINE current_element \u2190 sequence_of_numbers.at(iterator)\n        SWITCH (current_element mod 2)\n            CASE 0:\n                accumulator \u2190 accumulator + current_element\n                BREAK\n            DEFAULT:\n                BREAK\n        END SWITCH\n        iterator \u2190 iterator + 2\n    END WHILE\n    RETURN accumulator\nEND FUNCTION\n\nModified Pseudocode for Problem 4:\n```\nFUNCTION add(list_of_integers)\n    RETURN SUM OF ELEMENTS AT positions FROM 1 TO LENGTH OF list_of_integers STEP 2 WHERE ELEMENT IS EVEN\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpw7hbeo3a/solution_0.py\", line 15, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpw7hbeo3a/solution_0.py\", line 14, in check\\n    assert candidate([4, 88]) == 88\\nAssertionError\\n']\n\nPseudocode for Problem 5:\nFUNCTION sort_array(array_of_integers)\n    SET temp_result TO EMPTY LIST\n    SET temp_numbers TO EMPTY LIST\n\n    SET index_i TO 0\n    WHILE index_i < LENGTH(array_of_integers)\n        APPEND array_of_integers.at(index_i) TO temp_numbers\n        SET index_i TO index_i + 1\n    END WHILE\n\n    CALL bubble_sort_ascending(temp_numbers)\n\n    SET index_j TO 0\n    WHILE index_j < LENGTH(temp_numbers)\n        SET current_element TO temp_numbers.at(index_j)\n        SET binary_string_representation TO CONVERT_TO_BINARY(current_element)\n        SET trimmed_binary_string TO SUBSTRING(binary_string_representation, 2, LENGTH(binary_string_representation) - 2)\n\n        SET count_of_ones TO 0\n        SET k TO 0\n\nModified Pseudocode for Problem 5:\n```\nFUNCTION sort_array(array_of_integers)\n    SET sorted_array_based_on_decimal TO SORTED array_of_integers IN ASCENDING ORDER\n    SET final_sorted_array TO SORTED sorted_array_based_on_decimal USING KEY AS\n        COUNT OF '1' CHARACTERS IN BINARY REPRESENTATION OF element EXCLUDING THE '0b' PREFIX\n    RETURN final_sorted_array\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpj_ujnelc/solution_0.py\", line 91, in <module>\\n    check(sort_array)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpj_ujnelc/solution_0.py\", line 90, in check\\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\\nAssertionError\\n']\n\nPseudocode for Problem 6:\nFUNCTION split_words(x)\n    SET y TO 0\n    SET z TO 0\n    SET w TO 0\n\n    IF x.at(0) = \" \" OR x.at(1) = \" \" OR x.at(2) = \" \" OR x.at(3) = \" \" OR x.at(4) = \" \" OR x.at(5) = \" \" OR x.at(6) = \" \"\n        SET v TO 0\n        WHILE v < LENGTH(x)\n            IF x.at(v) = \" \"\n                SET z TO 1\n            END IF\n            SET v TO v + 1\n        END WHILE\n        IF z = 1\n            SET q TO EMPTY LIST\n            SET r TO 0\n            SET s TO 0\n            WHILE r < LENGTH(x)\n                IF x.at(r) != \" \"\n                    SET t TO r\n\nModified Pseudocode for Problem 6:\n```\nFUNCTION split_words(text)\n    IF space character IS IN text\n        RETURN result of splitting text on whitespace\n    ELSE IF comma character IS IN text\n        SET modified_text TO text with all commas replaced by space characters\n        RETURN result of splitting modified_text on whitespace\n    ELSE\n        SET count TO LENGTH OF list of characters IN text WHERE character IS lowercase AND ASCII value of character MODULO 2 EQUALS 0\n        RETURN count\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpf_jzwzj2/solution_3.py\", line 73, in <module>\\n    check(split_words)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpf_jzwzj2/solution_3.py\", line 72, in check\\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\\nAssertionError\\n']\n\nPseudocode for Problem 7:\nFUNCTION longest(zeta) \n    DECLARE omega \n    DECLARE psi\n    DECLARE alpha\n    SET omega TO None\n    SET psi TO 0\n    SET alpha TO 0\n\n    IF psi >= 1 THEN\n        GOTO step_loop\n    ELSE \n        IF zeta.at(0) IS DEFINED THEN\n            SET psi TO SIZE OF zeta\n        ELSE\n            RETURN omega\n        END IF\n    END IF\n\nstep_loop:\n    WHILE alpha < psi DO\n\nModified Pseudocode for Problem 7:\n```\nFUNCTION longest(list_of_strings)\n    IF list_of_strings IS EMPTY\n        RETURN None\n    END IF\n\n    SET maximum_length TO MAXIMUM OF LENGTH OF each string IN list_of_strings\n    FOR each string IN list_of_strings\n        IF LENGTH OF string EQUALS maximum_length\n            RETURN string\n        END IF\n    END FOR\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpbjcbp2es/solution_1.py\", line 59, in <module>\\n    check(longest)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpbjcbp2es/solution_1.py\", line 58, in check\\n    assert candidate([\\'x\\', \\'y\\', \\'z\\']) == \\'x\\'\\nAssertionError\\n']\n\nPseudocode for Problem 8:\nFUNCTION choose_num(p, q)\n    IF NOT (p \u2264 q) THEN\n        RETURN -1\n    ELSE\n        SWITCH TRUE\n            CASE (q % 2 = 0):\n                RETURN q\n            CASE (p = q):\n                RETURN -1\n            DEFAULT:\n                temp1 \u2190 q - 1\n                RETURN temp1\n        END SWITCH\n    END IF\nEND FUNCTION\n\nModified Pseudocode for Problem 8:\n```\nFUNCTION choose_num(x, y)\n    IF x GREATER THAN y\n        RETURN -1\n    END IF\n    IF y MODULO 2 EQUALS 0\n        RETURN y\n    END IF\n    IF x EQUALS y\n        RETURN -1\n    END IF\n    RETURN y MINUS 1\nEND FUNCTION\n```\nScore of Passing Rate - BLEU Score for ALL the problems: 0.8639876366268603"
}