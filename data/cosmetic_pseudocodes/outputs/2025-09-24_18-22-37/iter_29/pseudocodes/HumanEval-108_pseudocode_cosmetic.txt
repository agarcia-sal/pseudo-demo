``` 
FUNCTION count_nums(collection_of_values)
    FUNCTION digits_sum(num_val)
        SET multiplier_sign TO 1
        IF 0 > num_val THEN
            SET num_val TO num_val * (-1)
            SET multiplier_sign TO -1
        ENDIF
        SET digits_str TO STRING(num_val)
        SET digits_array TO EMPTY LIST
        SET counter_x TO 0
        WHILE counter_x < LENGTH(digits_str)
            APPEND INTEGER(digits_str[counter_x]) TO digits_array
            SET counter_x TO counter_x + 1
        ENDWHILE
        SET digits_array[0] TO digits_array[0] * multiplier_sign 
        SET total_sum TO 0
        SET index_y TO 0
        WHILE index_y < LENGTH(digits_array)
            SET total_sum TO total_sum + digits_array[index_y]
            SET index_y TO index_y + 1
        ENDWHILE
        RETURN total_sum
    ENDFUNCTION

    SET result_values TO EMPTY LIST
    SET idx_a TO 0
    WHILE idx_a < LENGTH(collection_of_values)
        SET val_b TO collection_of_values[idx_a]
        SET digit_sum_val TO digits_sum(val_b)
        APPEND digit_sum_val TO result_values
        SET idx_a TO idx_a + 1
    ENDWHILE

    SET positive_results TO EMPTY LIST
    SET pos_idx TO 0
    WHILE pos_idx < LENGTH(result_values)
        SET candidate TO result_values[pos_idx]
        IF candidate > 0 THEN
            APPEND candidate TO positive_results
        ELSE
            ; continue
        ENDIF
        SET pos_idx TO pos_idx + 1
    ENDWHILE

    RETURN LENGTH(positive_results)
ENDFUNCTION
```