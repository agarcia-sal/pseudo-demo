```
FUNCTION histogram(input_string)
   DECLARE result_map AS EMPTY_DICTIONARY
   DECLARE words_array AS SPLIT input_string BY " "
   DECLARE max_occurrence AS 0
   DECLARE idx AS 0

   WHILE idx < LENGTH(words_array)
      DECLARE current_word AS words_array.at(idx)
      DECLARE occurrence_count AS 0
      DECLARE scan_pos AS 0
      WHILE scan_pos < LENGTH(words_array)
         IF words_array.at(scan_pos) == current_word THEN
            occurrence_count = occurrence_count + 1
         ENDIF
         scan_pos = scan_pos + 1
      ENDWHILE

      IF current_word != "" THEN
         IF occurrence_count > max_occurrence THEN
            max_occurrence = occurrence_count
         ENDIF
      ENDIF
      idx = idx + 1
   ENDWHILE

   IF max_occurrence <= 0 THEN
      RETURN result_map
   ENDIF

   idx = 0
   LABEL outer_loop:
   WHILE idx < LENGTH(words_array)
      DECLARE checked_word AS words_array.at(idx)
      DECLARE checked_count AS 0
      DECLARE inner_idx AS 0
      WHILE inner_idx < LENGTH(words_array)
         IF words_array.at(inner_idx) == checked_word THEN
            checked_count = checked_count + 1
         ENDIF
         inner_idx = inner_idx + 1
      ENDWHILE

      IF checked_count == max_occurrence THEN
         SET result_map[checked_word] = max_occurrence
      ENDIF
      idx = idx + 1
      GOTO outer_loop
   ENDWHILE

   RETURN result_map
END FUNCTION
```