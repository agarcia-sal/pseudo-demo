Rewrite the input pseudocode into a functionally identical version that differs maximally in lexical tokens, structure, control flow, naming (except for preserved global names as below), and style, while preserving exact semantic equivalence for all valid inputs. Your transformation must adhere strictly to the following:

- Preserve all function names, class names, method names, and their full class-object hierarchies, signatures, and boundaries exactly as in the original pseudocode without modification or reordering.

- Rename **only** all local variables and parameters to consistently used, entirely unrelated identifiers that do not clash or overlap with any preserved global, function, class, or method identifiers.

- Apply systematic, extensive rewriting of control flow constructs in arbitrary, mixed ways, including but not limited to:
  - Replace FOR loops with equivalent WHILE loops or vice versa.
  - Convert IF-ELSE chains into SWITCH-CASE, nested guard clauses, early returns, or restructured conditional nesting.
  - Reorder logically independent conditional branches or flatten/nest them differently.
  - Use short-circuit evaluation, early exits, or consolidate return statements without altering logic or output.

- Reorder independent statements, expression evaluations, and assignments wherever there are no semantic dependencies, altering the procedural sequence where safe.

- Transform expressions thoroughly:
  - Expand complex expressions into multiple simple intermediate assignments with temporaries, or merge sequential assignments into compound expressions.
  - Replace operators with equivalent synonyms or logically identical alternatives (e.g., “!=” to “not equal to”, logical AND to ∧).
  - Vary numeric literal representations (e.g., decimal to hex or vice versa) and reorder associative operations where valid.
  - Alter data access syntax where semantics permit (e.g., `array[index]` ⇄ `array.at(index)` or property access).

- Transform iteration and traversal styles:
  - Replace index-based loops with element-based iterations and vice versa.
  - Change loop directions and step sizes within semantic safety.
  - Reorder independent iterations or data access orderings.

- Introduce, rename, or inline temporary variables or helper constructs consistently to reshape the data flow.

- Randomize all formatting aspects extensively—indentation style and depth, statement grouping (single or multiple statements per line), line breaks, and whitespace usage—while maintaining valid pseudocode syntax.

- Rigorously avoid any change in algorithmic logic or shortcuts that simplify stepwise behavior or leverage built-in/library utilities that replace explicit algorithmic steps. Full stepwise fidelity must be preserved.

- The output must be exclusively the fully rewritten pseudocode text of the algorithm(s) as a single contiguous code block or text—no explanations, comments, annotations, delimiters, or extra output of any kind.

This rewrite must produce pseudocode lexically, syntactically, structurally, and stylistically as divergent as possible from the input, yet provably identical in observable behavior and outputs over all valid inputs.

Output only the rewritten pseudocode text.