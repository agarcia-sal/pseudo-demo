```
FUNCTION anti_shuffle(input_string)
	bucket_of_terms ← []
	intermediate_word_collection ← input_string.split(" ")
	internal_word ← ""
	letter_sequence ← []
	index_counter ← 0
	WHILE index_counter < LENGTH(intermediate_word_collection) DO
		internal_word ← intermediate_word_collection.at(index_counter)
		letter_sequence ← []
		sub_index ← 0
		WHILE sub_index < LENGTH(internal_word) DO
			letter_sequence.ADD(internal_word.at(sub_index))
			sub_index ← sub_index + 1
		END WHILE
		letter_sequence = SORT(letter_sequence)
		temp_string ← ""
		position ← 0
		WHILE position < LENGTH(letter_sequence) DO
			temp_string ← CONCAT(temp_string, letter_sequence.at(position))
			position ← position + 1
		END WHILE
		bucket_of_terms.ADD(temp_string)
		index_counter ← index_counter + 1
	END WHILE
	assembled_result ← ""
	element_index ← 0
	WHILE element_index < LENGTH(bucket_of_terms) DO
		assembled_result ← assembled_result + bucket_of_terms.at(element_index)
		IF element_index < LENGTH(bucket_of_terms) - 1 THEN
			assembled_result ← assembled_result + " "
		END IF
		element_index ← element_index + 1
	END WHILE
	RETURN assembled_result
END FUNCTION
```