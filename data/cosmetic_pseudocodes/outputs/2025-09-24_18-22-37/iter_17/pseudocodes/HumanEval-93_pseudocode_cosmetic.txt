```
FUNCTION encode(inputString)
  DECLARE keys AS STRING
  keys <- "AEIOUaeiou"
  DECLARE substitutionMap AS DICTIONARY
  FOR idx FROM 1 TO LENGTH(keys) DO
    DECLARE currentChar AS CHARACTER
    currentChar <- keys.at(idx)
    DECLARE incrementedChar AS CHARACTER
    incrementedChar <- CHAR(ASCII(currentChar) + 2)
    substitutionMap[currentChar] <- incrementedChar
  END FOR
  DECLARE toggledString AS STRING
  toggledString <- ""
  DECLARE pos AS INTEGER
  pos <- 1
  WHILE pos <= LENGTH(inputString) DO
    DECLARE curr AS CHARACTER
    curr <- inputString.at(pos)
    IF curr IS UPPERCASE THEN
      toggledString <- toggledString + TO_LOWERCASE(curr)
    ELSE IF curr IS LOWERCASE THEN
      toggledString <- toggledString + TO_UPPERCASE(curr)
    ELSE
      toggledString <- toggledString + curr
    END IF
    pos <- pos + 1
  END WHILE
  DECLARE output AS STRING
  output <- ""
  DECLARE idx2 AS INTEGER
  idx2 <- 1
  WHILE idx2 <= LENGTH(toggledString) DO
    DECLARE symbol AS CHARACTER
    symbol <- toggledString.at(idx2)
    IF substitutionMap CONTAINS symbol THEN
      output <- output + substitutionMap[symbol]
    ELSE
      output <- output + symbol
    END IF
    idx2 <- idx2 + 1
  END WHILE
  RETURN output
END FUNCTION
```