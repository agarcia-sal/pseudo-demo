FUNCTION by_length(given_numbers)
    LET num_words = {
        1: "One",
        2: "Two",
        3: "Three",
        4: "Four",
        5: "Five",
        6: "Six",
        7: "Seven",
        8: "Eight",
        9: "Nine"
    }
    
    LET descending_nums = SORT(given_numbers)  // assuming ascending sort first
    LET reversed_descending = EMPTY LIST
    LET idx = LENGTH(descending_nums) - 1
    WHILE idx >= 0
        APPEND descending_nums[idx] TO reversed_descending
        SET idx = idx - 1
    END WHILE
    
    LET output_collection = []
    LET i = 0
    WHILE i < LENGTH(reversed_descending)
        LET current_val = reversed_descending[i]
        SWITCH current_val
            CASE 1:
                APPEND num_words[1] TO output_collection
                BREAK
            CASE 2:
                APPEND num_words[2] TO output_collection
                BREAK
            CASE 3:
                APPEND num_words[3] TO output_collection
                BREAK
            CASE 4:
                APPEND num_words[4] TO output_collection
                BREAK
            CASE 5:
                APPEND num_words[5] TO output_collection
                BREAK
            CASE 6:
                APPEND num_words[6] TO output_collection
                BREAK
            CASE 7:
                APPEND num_words[7] TO output_collection
                BREAK
            CASE 8:
                APPEND num_words[8] TO output_collection
                BREAK
            CASE 9:
                APPEND num_words[9] TO output_collection
                BREAK
            DEFAULT:
                // do nothing
        END SWITCH
        SET i = i + 1
    END WHILE

    RETURN output_collection
END FUNCTION