{
  "prompt": "Rewrite the input pseudocode into a new version that is functionally identical\u2014producing exactly the same outputs, side effects, and behavior for all valid inputs\u2014while being as lexically, syntactically, structurally, and stylistically distinct as possible from the original. Strictly preserve all function and class names, as well as the entire class hierarchy and object structure with their original signatures and boundaries intact (i.e., no renaming or restructuring of these). Your transformed pseudocode must adhere to all of the following:\n\n- Rename all *local variables and parameters* with fresh, unrelated, consistently applied new names throughout; global identifiers, function names, class names, and the class-object hierarchy must remain unchanged.\n- Systematically alter control flow by applying arbitrary combinations of transformations such as: swapping FOR and WHILE loops; converting IF-ELSE into SWITCH-CASE or nested guards (or vice versa); flattening nested conditionals or introducing nested conditionals for flattening; reordering independent conditional branches; replacing multiple returns with single consolidated return points or introducing early returns, without altering semantics.\n- Reorder independent statements, expressions, and computations whenever data dependencies allow.\n- Thoroughly transform expressions by breaking down complex expressions into sequences of simpler assignments or consolidating several assignments into compound expressions; replace operators by logically equivalent alternatives or synonyms (e.g., \u201c!=\u201d \u21c4 \u201cnot equal to\u201d; logical AND \u21c4 \u2227; array[index] \u21c4 array.at(index) when allowed); vary numeric literal formats without changing computed values (e.g., 10 \u21c4 5*2, 0xA \u21c4 10).\n- Vary data structure traversal methods extensively by translating index-based loops into element-based iterations and vice versa; reverse or shuffle iteration directions as permissible; reorder data accesses when dependencies allow.\n- Introduce new temporary helper variables or intermediate constructs as needed to maximize structural difference while avoiding ambiguity or inconsistent reuse.\n- Randomize formatting rigorously\u2014vary indentation, line breaks, grouping, and whitespace freely within valid pseudocode syntax.\n- Never apply any algorithmic shortcuts, optimizations, semantic simplifications, or use built-in/library shortcuts that shortcut explicit operations or change stepwise computations.\n- Avoid any changes to function/class signatures, names, or their relative positions within hierarchies.\n- The output must be *only* the rewritten pseudocode text\u2014no explanations, comments, delimiters, markdown formatting, or anything else.\n\nYour objective is to maximize semantic fidelity combined with maximal lexical, syntactic, structural, and stylistic diversity from the input pseudocode, thus generating a version that passes strict correctness tests but looks radically different from the original. Output exclusively the transformed pseudocode.",
  "response": "Rewrite the input pseudocode into a new version that is functionally identical\u2014producing exactly the same outputs, side effects, and behavior for all valid inputs\u2014while being as lexically, syntactically, structurally, and stylistically distinct as possible from the original. Strictly preserve all function and class names, as well as the entire class hierarchy and object structure with their original signatures and boundaries intact (i.e., no renaming or restructuring of these). Your transformed pseudocode must adhere to all of the following:\n\n- Rename all *local variables and parameters* with fresh, unrelated, consistently applied new names throughout; global identifiers, function names, class names, and the class-object hierarchy must remain unchanged.\n- Systematically alter control flow by applying arbitrary combinations of transformations such as: swapping FOR and WHILE loops; converting IF-ELSE into SWITCH-CASE or nested guards (or vice versa); flattening nested conditionals or introducing nested conditionals for flattening; reordering independent conditional branches; replacing multiple returns with single consolidated return points or introducing early returns, without altering semantics.\n- Reorder independent statements, expressions, and computations whenever data dependencies allow.\n- Thoroughly transform expressions by breaking down complex expressions into sequences of simpler assignments or consolidating several assignments into compound expressions; replace operators by logically equivalent alternatives or synonyms (e.g., \u201c!=\u201d \u21c4 \u201cnot equal to\u201d; logical AND \u21c4 \u2227; array[index] \u21c4 array.at(index) when allowed); vary numeric literal formats without changing computed values (e.g., 10 \u21c4 5*2, 0xA \u21c4 10).\n- Vary data structure traversal methods extensively by translating index-based loops into element-based iterations and vice versa; reverse or shuffle iteration directions as permissible; reorder data accesses when dependencies allow.\n- Introduce new temporary helper variables or intermediate constructs as needed to maximize structural difference while avoiding ambiguity or inconsistent reuse.\n- Randomize formatting rigorously\u2014vary indentation, line breaks, grouping, and whitespace freely within valid pseudocode syntax.\n- Never apply any algorithmic shortcuts, optimizations, semantic simplifications, or use built-in/library shortcuts that shortcut explicit operations or change stepwise computations.\n- Avoid any changes to function/class signatures, names, or their relative positions within hierarchies.\n- The output must be *only* the rewritten pseudocode text\u2014no explanations, comments, delimiters, markdown formatting, or anything else.\n\nYour objective is to maximize semantic fidelity combined with maximal lexical, syntactic, structural, and stylistic diversity from the input pseudocode, thus generating a version that passes strict correctness tests but looks radically different from the original. Output exclusively the transformed pseudocode.",
  "score": 0.8712766380574913,
  "feedback": "The following are 20 lines of original pseudocode of a random subset of the problems along with their modified pseudocodes.\n\nPseudocode for Problem 1:\nFUNCTION sort_array(input_list)\n    SET temp_sorted_list TO COPY input_list\n    CALL temp_sorted_list.SORT_INPLACE()\n    SET helper_list TO EMPTY LIST\n    FOR EACH item IN temp_sorted_list DO\n        SET binary_str TO CONVERT_TO_BINARY(item)\n        SET ones_counter TO 0\n        FOR index FROM 3 TO LENGTH(binary_str) + 2 DO\n            IF CHAR_AT(binary_str, index - 2) = '1' THEN\n                SET ones_counter TO ones_counter + 1\n            END IF\n        END FOR\n        APPEND (item, ones_counter) TO helper_list\n    END FOR\n\n    FOR i FROM 0 TO LENGTH(helper_list) - 2 DO\n        FOR j FROM i + 1 TO LENGTH(helper_list) - 1 DO\n            IF GET_ELEMENT_AT(helper_list, i)[1] > GET_ELEMENT_AT(helper_list, j)[1] THEN\n                SET temp TO GET_ELEMENT_AT(helper_list, i)\n                SET helper_list[i] TO GET_ELEMENT_AT(helper_list, j)\n\nModified Pseudocode for Problem 1:\n```\nFUNCTION sort_array(array_of_integers)\n    SET sorted_array_based_on_decimal TO SORTED array_of_integers IN ASCENDING ORDER\n    SET final_sorted_array TO SORTED sorted_array_based_on_decimal USING KEY AS\n        COUNT OF '1' CHARACTERS IN BINARY REPRESENTATION OF element EXCLUDING THE '0b' PREFIX\n    RETURN final_sorted_array\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp8c5hruiy/solution_0.py\", line 32, in <module>\\n    check(sort_array)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp8c5hruiy/solution_0.py\", line 31, in check\\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp8c5hruiy/solution_0.py\", line 17, in sort_array\\n    if binary_str[index - 2] == \\'1\\':  # index-2 to adjust zero-based indexing\\nIndexError: string index out of range\\n']\n\nPseudocode for Problem 2:\nFUNCTION rounded_avg(alpha, beta)\n    DECLARE total_sum = 0\n    DECLARE current = alpha\n\n    IF beta >= alpha THEN\n        WHILE current <= beta DO\n            SET interim_value = total_sum + current\n            SET total_sum = interim_value\n            SET current = current + 1\n        END WHILE\n\n        DECLARE count_elements = (beta - alpha) + 1\n        DECLARE quotient = total_sum / count_elements\n\n        DECLARE nearest_int = ROUND(quotient)\n\n        DECLARE binary_str = TO_BINARY(nearest_int)\n\n        RETURN binary_str\n    ELSE\n\nModified Pseudocode for Problem 2:\n```\nFUNCTION rounded_avg(n, m)\n    IF m IS LESS THAN n\n        RETURN -1\n    SET summation TO 0\n    FOR each integer i FROM n TO m INCLUSIVE\n        INCREMENT summation BY i\n    SET average_value TO summation DIVIDED BY (m MINUS n PLUS 1)\n    SET rounded_average TO ROUND average_value TO NEAREST INTEGER\n    SET binary_representation TO BINARY FORMAT OF rounded_average\n    RETURN binary_representation\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprx34k8ut/solution_0.py\", line 2, in <module>\\n    def rounded_avg(alpha: int, beta: int) -> str | int:\\nTypeError: unsupported operand type(s) for |: \\'type\\' and \\'type\\'\\n']\n\nPseudocode for Problem 3:\nFUNCTION add(arr)\n    VAR totalSum := 0\n    VAR idx := 1\n    WHILE idx <= LENGTH(arr) DO\n        VAR elt := arr.at(idx)\n        IF (elt MOD 2) = 0 THEN\n            totalSum := totalSum + elt\n        END IF\n        idx := idx + 2\n    END WHILE\n    RETURN totalSum\nEND FUNCTION\n\nModified Pseudocode for Problem 3:\n```\nFUNCTION add(list_of_integers)\n    RETURN SUM OF ELEMENTS AT positions FROM 1 TO LENGTH OF list_of_integers STEP 2 WHERE ELEMENT IS EVEN\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprzppoepr/solution_0.py\", line 15, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmprzppoepr/solution_0.py\", line 14, in check\\n    assert candidate([4, 88]) == 88\\nAssertionError\\n']\n\nPseudocode for Problem 4:\nFUNCTION choose_num(a, b)\n    DECLARE result\n    IF b MOD 2 EQUALS 0 THEN\n        result = b\n    ELSE IF a GREATER THAN b THEN\n        result = -1\n    ELSE IF a EQUALS b THEN\n        result = -1\n    ELSE\n        result = b MINUS 1\n    END IF\n    RETURN result\nEND FUNCTION\n\nModified Pseudocode for Problem 4:\n```\nFUNCTION choose_num(x, y)\n    IF x GREATER THAN y\n        RETURN -1\n    END IF\n    IF y MODULO 2 EQUALS 0\n        RETURN y\n    END IF\n    IF x EQUALS y\n        RETURN -1\n    END IF\n    RETURN y MINUS 1\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmph2ddorkk/solution_1.py\", line 14, in <module>\\n    check(choose_num)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmph2ddorkk/solution_1.py\", line 13, in check\\n    assert candidate(13, 12) == -1\\nAssertionError\\n']\n\nPseudocode for Problem 5:\nFUNCTION longest(array_of_texts)\n    IF NOT (array_of_texts IS NOT EMPTY)\n        RETURN None\n    END IF\n\n    SET max_len TO 0\n    FOR each element IN array_of_texts\n        SET current_len TO LENGTH OF element\n        IF current_len > max_len\n            SET max_len TO current_len\n        END IF\n    END FOR\n\n    FOR index FROM 1 TO LENGTH OF array_of_texts\n        SET candidate TO array_of_texts.at(index)\n        IF LENGTH OF candidate = max_len\n            RETURN candidate\n        END IF\n    END FOR\nEND FUNCTION\n\nModified Pseudocode for Problem 5:\n```\nFUNCTION longest(list_of_strings)\n    IF list_of_strings IS EMPTY\n        RETURN None\n    END IF\n\n    SET maximum_length TO MAXIMUM OF LENGTH OF each string IN list_of_strings\n    FOR each string IN list_of_strings\n        IF LENGTH OF string EQUALS maximum_length\n            RETURN string\n        END IF\n    END FOR\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc36xr0n5/solution_1.py\", line 31, in <module>\\n    check(longest)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpc36xr0n5/solution_1.py\", line 30, in check\\n    assert candidate([\\'x\\', \\'y\\', \\'z\\']) == \\'x\\'\\nAssertionError\\n']\n\nPseudocode for Problem 6:\nFUNCTION get_closest_vowel(inputStr)  \n    DECLARE resultStr = \"\"  \n    DECLARE alphaSet = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}  \n    DECLARE lenVal = LENGTH OF inputStr  \n\n    SWITCH \n        CASE lenVal < 3: \n            resultStr = \"\"  \n            BREAK  \n        DEFAULT: \n            DECLARE pos = 1  \n            WHILE pos < lenVal - 1  \n                DECLARE currChar = inputStr AT pos  \n                IF currChar IN alphaSet THEN  \n                    DECLARE nextChar = inputStr AT (pos + 1)  \n                    DECLARE prevChar = inputStr AT (pos - 1)  \n                    IF (NOT (nextChar IN alphaSet)) AND (NOT (prevChar IN alphaSet)) THEN  \n                        resultStr = currChar  \n                        LEAVE WHILE  \n                    END IF  \n\nModified Pseudocode for Problem 6:\n```\nFUNCTION get_closest_vowel(word)\n    IF LENGTH OF word IS LESS THAN 3\n        RETURN empty string\n    END IF\n\n    SET vowels TO SET OF {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n\n    FOR index FROM LENGTH OF word MINUS 2 DOWNTO 1 STEP -1\n        IF word AT position index IS IN vowels\n            IF word AT position index PLUS 1 IS NOT IN vowels AND word AT position index MINUS 1 IS NOT IN vowels\n                RETURN word AT position index\n            END IF\n        END IF\n    END FOR\n\n    RETURN empty string\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp6oie88e2/solution_0.py\", line 27, in <module>\\n    check(get_closest_vowel)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp6oie88e2/solution_0.py\", line 26, in check\\n    assert candidate(\"yogurt\") == \"u\"\\nAssertionError\\n']\n\nPseudocode for Problem 7:\nFUNCTION get_row(matrix, key)\n    DECLARE found_positions AS EMPTY LIST\n    DECLARE outer_counter AS 0\n    WHILE outer_counter < LENGTH OF matrix\n        DECLARE inner_counter AS 0\n        WHILE inner_counter < LENGTH OF matrix AT outer_counter\n            DECLARE current_value AS matrix AT outer_counter AT inner_counter\n            IF NOT(current_value \u2260 key) THEN\n                LET position_pair BE (outer_counter, inner_counter)\n                APPEND position_pair TO found_positions\n            END IF\n            INCREMENT inner_counter BY 1\n        END WHILE\n        INCREMENT outer_counter BY 1\n    END WHILE\n\n    SORT found_positions BY FIRST ELEMENT IN ASCENDING ORDER\n\n    LET temp_positions = EMPTY LIST\n    FOR EACH pair IN found_positions\n\nModified Pseudocode for Problem 7:\n```\nFUNCTION get_row(two_dimensional_list, target_integer)\n    SET coordinates TO EMPTY LIST\n    FOR each row_index FROM 0 TO LENGTH OF two_dimensional_list MINUS 1\n        FOR each column_index FROM 0 TO LENGTH OF two_dimensional_list AT row_index MINUS 1\n            IF two_dimensional_list AT row_index AT column_index EQUALS target_integer\n                APPEND TUPLE(row_index, column_index) TO coordinates\n    SET coordinates TO coordinates SORTED BY SECOND ELEMENT IN DESCENDING ORDER\n    SET coordinates TO coordinates SORTED BY FIRST ELEMENT IN ASCENDING ORDER\n    RETURN coordinates\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 7:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp19aznl8e/solution_0.py\", line 35, in <module>\\n    check(get_row)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp19aznl8e/solution_0.py\", line 30, in check\\n    assert candidate([\\nAssertionError\\n']\n\nPseudocode for Problem 8:\nFUNCTION anti_shuffle(text_input)\n    SET words_collection TO SPLIT text_input BY \" \"\n    SET sorted_collection TO NEW LIST\n    SET index_counter TO 0\n    WHILE index_counter < LENGTH(words_collection)\n        SET current_word TO words_collection.at(index_counter)\n        SET chars_array TO CONVERT current_word TO CHAR ARRAY\n        SET temp_index TO 0\n        WHILE temp_index < LENGTH(chars_array)\n            SET pos TO temp_index\n            WHILE pos + 1 < LENGTH(chars_array)\n                IF chars_array.at(pos) > chars_array.at(pos + 1) THEN\n                    SET swap_tmp TO chars_array.at(pos)\n                    SET chars_array[pos] TO chars_array[pos + 1]\n                    SET chars_array[pos + 1] TO swap_tmp\n                END IF\n                SET pos TO pos + 1\n            END WHILE\n            SET temp_index TO temp_index + 1\n        END WHILE\n\nModified Pseudocode for Problem 8:\n```\nFUNCTION anti_shuffle(input_string)\n    SET list_of_words TO SPLIT input_string BY SPACE\n    SET list_of_sorted_words TO EMPTY LIST\n    FOR each word IN list_of_words\n        SET sorted_characters TO SORT CHARACTERS OF word IN ASCENDING ASCII ORDER\n        SET sorted_word TO JOIN sorted_characters INTO STRING\n        ADD sorted_word TO list_of_sorted_words\n    END FOR\n    SET result_string TO JOIN list_of_sorted_words WITH SPACE\n    RETURN result_string\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 8:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpk_hgryt6/solution_2.py\", line 37, in <module>\\n    check(anti_shuffle)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpk_hgryt6/solution_2.py\", line 36, in check\\n    assert candidate(\\'number\\') == \\'bemnru\\'\\nAssertionError\\n']\nScore of Passing Rate - BLEU Score for ALL the problems: 0.8712766380574913"
}