FUNCTION is_nested(string_param)
    SET open_positions TO new empty list
    SET close_positions TO new empty list
    SET curr_idx TO 0
    REPEAT
        IF string_param.at(curr_idx) EQUALS '[' THEN
            ADD curr_idx TO open_positions
        ELSE
            ADD curr_idx TO close_positions
        curr_idx ← curr_idx + 1
    UNTIL curr_idx EQUALS (LENGTH OF string_param)
    SET reversed_close_positions TO new empty list
    SET idx_for_close TO LENGTH OF close_positions MINUS 1
    WHILE idx_for_close GREATER OR EQUAL TO 0
        ADD close_positions.at(idx_for_close) TO reversed_close_positions
        idx_for_close ← idx_for_close - 1
    END WHILE
    SET matched_count TO 0
    SET pointer TO 0
    SET total_closes TO LENGTH OF reversed_close_positions
    FOR EACH open_pos IN open_positions DO
        IF (pointer LESS THAN total_closes) AND (open_pos LESS THAN reversed_close_positions.at(pointer)) THEN
            matched_count ← matched_count + 1
            pointer ← pointer + 1
        END IF
    END FOR
    IF matched_count GREATER OR EQUAL TO 0b10 THEN
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF
END FUNCTION