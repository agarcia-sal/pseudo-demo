FUNCTION is_palindrome(word)
    SET reversed_word TO EMPTY STRING
    FOR i FROM LENGTH(word) - 1 DOWNTO 0
        SET reversed_word TO reversed_word + word.at(i)
    END FOR
    IF word EQUALS reversed_word THEN
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF
END FUNCTION

FUNCTION make_palindrome(original_text)
    IF LENGTH(original_text) EQUALS 0 THEN
        RETURN EMPTY STRING
    END IF

    SET index_starting_palindromic_part TO 0
    REPEAT
        SET current_substring TO SUBSTRING(original_text, index_starting_palindromic_part, LENGTH(original_text) - index_starting_palindromic_part)
        IF is_palindrome(current_substring) THEN
            BREAK
        ELSE
            SET index_starting_palindromic_part TO index_starting_palindromic_part + 1
        END IF
    UNTIL FALSE

    SET prefix_substring TO SUBSTRING(original_text, 0, index_starting_palindromic_part)
    SET prefix_reversed TO EMPTY STRING
    FOR j FROM LENGTH(prefix_substring) - 1 DOWNTO 0
        SET prefix_reversed TO prefix_reversed + prefix_substring.at(j)
    END FOR

    RETURN original_text + prefix_reversed
END FUNCTION