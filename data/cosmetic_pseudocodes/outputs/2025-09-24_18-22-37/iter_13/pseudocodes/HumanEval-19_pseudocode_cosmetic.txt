FUNCTION sort_numbers(parameter_alpha)  
    SET mapping_beta TO NEW DICTIONARY  
    mapping_beta['eight'] = 0x8  
    mapping_beta['zero'] = 0b0  
    mapping_beta['seven'] = 0x7  
    mapping_beta['four'] = 0x4  
    mapping_beta['five'] = 0x5  
    mapping_beta['one'] = 1  
    mapping_beta['six'] = 6  
    mapping_beta['three'] = 3  
    mapping_beta['nine'] = 0b1001  
    mapping_beta['two'] = 2  

    SET container_gamma TO EMPTY LIST  
    SET index_delta TO 0  
    SET words_array TO SPLIT(parameter_alpha, ' ')  
    WHILE index_delta < LENGTH(words_array)  
        IF words_array.at(index_delta) IS NOT EQUAL TO '' THEN  
            APPEND words_array.at(index_delta) TO container_gamma  
        END IF  
        SET index_delta TO index_delta + 1  
    END WHILE  

    SET container_epsilon TO container_gamma  
    REPEAT  
        SET flag_zeta TO FALSE  
        FOR i_eta FROM 0 TO LENGTH(container_epsilon) - 2 STEP 1  
            IF mapping_beta.at(container_epsilon[i_eta]) > mapping_beta.at(container_epsilon[i_eta + 1]) THEN  
                SET temp_theta TO container_epsilon[i_eta]  
                container_epsilon[i_eta] = container_epsilon[i_eta + 1]  
                container_epsilon[i_eta + 1] = temp_theta  
                SET flag_zeta TO TRUE  
            END IF  
        END FOR  
    UNTIL NOT flag_zeta  

    SET result_iota TO ''  
    SET counter_kappa TO 0  
    WHILE counter_kappa < LENGTH(container_epsilon)  
        SET result_iota TO result_iota + container_epsilon.at(counter_kappa)  
        IF counter_kappa IS NOT EQUAL TO LENGTH(container_epsilon) - 1 THEN  
            SET result_iota TO result_iota + ' '  
        END IF  
        SET counter_kappa TO counter_kappa + 1  
    END WHILE  

    RETURN result_iota  
END FUNCTION