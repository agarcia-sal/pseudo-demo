FUNCTION sort_numbers(alpha_str)  
    SET mapping TO EMPTY DICTIONARY  
    mapping['five'] = 0x5  
    mapping['nine']  = 0x9  
    mapping['eight'] = 0x8  
    mapping['four']  = 4  
    mapping['seven'] = 7  
    mapping['one']   = 1  
    mapping['two']   = 0x2  
    mapping['six']   = 6  
    mapping['zero']  = 0  
    mapping['three'] = 3  

    SET tokens TO EMPTY LIST  
    FOR i FROM 1 TO LENGTH(alpha_str)  
        IF alpha_str.at(i) = ' ' OR i = LENGTH(alpha_str)  
            SET start_idx TO 1  
            IF i = LENGTH(alpha_str) THEN  
                SET end_idx TO i  
            ELSE  
                SET end_idx TO i - 1  
            ENDIF  
            SET fragment TO SUBSTRING(alpha_str, start_idx, end_idx)  
            IF fragment != '' THEN  
                APPEND fragment TO tokens  
            ENDIF  
            SET alpha_str TO SUBSTRING(alpha_str, i + 1, LENGTH(alpha_str))  
            SET i TO 0  
        ENDIF  
    ENDFOR  

    SET temp_list TO tokens  
    SET n TO LENGTH(temp_list)  
    REPEAT  
        SET changed TO FALSE  
        FOR j FROM 1 TO n - 1  
            IF mapping[temp_list.at(j)] > mapping[temp_list.at(j+1)] THEN  
                SET temp_var TO temp_list.at(j)  
                temp_list.at(j) = temp_list.at(j+1)  
                temp_list.at(j+1) = temp_var  
                SET changed TO TRUE  
            ENDIF  
        ENDFOR  
        SET n TO n - 1  
    UNTIL changed = FALSE  

    SET result_str TO ''  
    FOR k FROM 1 TO LENGTH(temp_list)  
        IF k = LENGTH(temp_list) THEN  
            SET result_str TO result_str + temp_list.at(k)  
        ELSE  
            SET result_str TO result_str + temp_list.at(k) + ' '  
        ENDIF  
    ENDFOR  

    RETURN result_str  
END FUNCTION