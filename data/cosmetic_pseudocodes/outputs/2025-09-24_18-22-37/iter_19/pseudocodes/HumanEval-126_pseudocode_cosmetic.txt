FUNCTION is_sorted(sequence_of_values)
  DECLARE map_frequency AS dictionary
  FOR idx FROM 0 TO LENGTH(sequence_of_values) - 1 DO
    map_frequency[sequence_of_values.at(idx)] ← 0
  END FOR
  DECLARE pointer AS integer ← 0
  WHILE pointer < LENGTH(sequence_of_values) DO
    DECLARE current_item ← sequence_of_values.at(pointer)
    map_frequency.at(current_item) ← map_frequency.at(current_item) + 1
    pointer ← pointer + 1
  END WHILE
  DECLARE occurrence_okay AS boolean ← TRUE
  FOR EACH element IN sequence_of_values DO
    IF map_frequency.at(element) > 2 THEN
      occurrence_okay ← FALSE
      BREAK
    END IF
  END FOR
  IF NOT occurrence_okay THEN
    RETURN FALSE
  END IF
  DECLARE ascending_order AS boolean ← TRUE
  FOR position FROM 1 TO LENGTH(sequence_of_values) - 1 DO
    DECLARE prior ← sequence_of_values.at(position - 1)
    DECLARE current ← sequence_of_values.at(position)
    IF prior > current THEN
      ascending_order ← FALSE
      EXIT FOR
    END IF
  END FOR
  SWITCH ascending_order DO
    CASE TRUE:
      RETURN TRUE
    CASE FALSE:
      RETURN FALSE
  END SWITCH
END FUNCTION