```
FUNCTION sort_array(array_of_integers)
  
  DECLARE temp_sorted_decimals
  DECLARE element_counter
  DECLARE binary_form
  DECLARE count_ones
  DECLARE index_i
  DECLARE result_array
  
  temp_sorted_decimals = array_of_integers
  REPEAT
    SET swapped_flag TO false
    FOR index_i FROM 1 TO LENGTH(temp_sorted_decimals) - 1
      IF temp_sorted_decimals.at(index_i - 1) > temp_sorted_decimals.at(index_i)
        SWAP temp_sorted_decimals.at(index_i - 1) AND temp_sorted_decimals.at(index_i)
        SET swapped_flag TO true
      END IF
    END FOR
  UNTIL swapped_flag = false
  
  result_array = []
  DECLARE temp_map = []
  
  FOR element_counter IN temp_sorted_decimals
    binary_form = CONVERT_TO_BINARY(element_counter)   # binary with '0b' prefix included
    count_ones = 0
    FOR index_i FROM 3 TO LENGTH(binary_form)
      IF binary_form.at(index_i - 1) EQUALS '1'
        count_ones = count_ones + 1
      END IF
    END FOR
    APPEND (element_counter, count_ones) TO temp_map
  END FOR
  
  REPEAT
    SET swapped_flag TO false
    FOR index_i FROM 1 TO LENGTH(temp_map) - 1
      IF temp_map.at(index_i - 1).count_ones > temp_map.at(index_i).count_ones
        SWAP temp_map.at(index_i - 1) AND temp_map.at(index_i)
        SET swapped_flag TO true
      END IF
      IF temp_map.at(index_i - 1).count_ones = temp_map.at(index_i).count_ones AND temp_map.at(index_i - 1).element_counter > temp_map.at(index_i).element_counter
        SWAP temp_map.at(index_i - 1) AND temp_map.at(index_i)
        SET swapped_flag TO true
      END IF
    END FOR
  UNTIL swapped_flag = false
  
  FOR element_counter IN temp_map
    APPEND element_counter.element_counter TO result_array
  END FOR
  
  RETURN result_array

END FUNCTION
```