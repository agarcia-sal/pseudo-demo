FUNCTION is_palindrome(ch_arr)
  SET rev_arr TO EMPTY ARRAY
  SET idx_rev TO LENGTH(ch_arr) - 1
  WHILE idx_rev >= 0
    APPEND ch_arr.at(idx_rev) TO rev_arr
    SET idx_rev TO idx_rev - 1
  END WHILE
  SET eq_check TO TRUE
  SET idx_cmp TO 0
  WHILE idx_cmp < LENGTH(ch_arr) AND eq_check IS TRUE
    IF ch_arr.at(idx_cmp) NOT EQUAL TO rev_arr.at(idx_cmp)
      SET eq_check TO FALSE
    END IF
    SET idx_cmp TO idx_cmp + 1
  END WHILE
  RETURN eq_check
END FUNCTION

FUNCTION make_palindrome(str_input)
  SET result_str TO EMPTY STRING
  IF LENGTH(str_input) = 0 THEN 
    SET result_str TO ""
  ELSE
    SET pos_start_suffix TO 0
    REPEAT
      SET substr_candidate TO SUBSTRING(str_input, pos_start_suffix, LENGTH(str_input) - pos_start_suffix)
      SET is_sub_palindrome TO is_palindrome(substr_candidate)
      IF is_sub_palindrome THEN
        BREAK
      ELSE
        SET pos_start_suffix TO pos_start_suffix + 1
      END IF
    UNTIL FALSE
    SET prefix_sub TO SUBSTRING(str_input, 0, pos_start_suffix)
    SET rev_prefix TO EMPTY STRING
    FOR index_rev FROM LENGTH(prefix_sub) - 1 DOWNTO 0
      SET rev_prefix TO CONCATENATE rev_prefix WITH prefix_sub.at(index_rev)
    END FOR
    SET result_str TO CONCATENATE str_input WITH rev_prefix
  END IF
  RETURN result_str
END FUNCTION