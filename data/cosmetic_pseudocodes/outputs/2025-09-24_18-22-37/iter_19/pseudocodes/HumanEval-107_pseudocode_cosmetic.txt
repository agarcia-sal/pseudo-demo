FUNCTION even_odd_palindrome(k)
  
  FUNCTION is_palindrome(p)
    DECLARE str_rep TO TO_STRING(p)
    DECLARE rev_str TO EMPTY_STRING
    DECLARE idx TO LENGTH(str_rep)
    WHILE idx GREATER THAN 0
      SET rev_str TO CONCATENATE(rev_str, str_rep.at(idx - 1))
      SET idx TO idx - 1
    END WHILE
    RETURN (str_rep = rev_str)
  END FUNCTION

  DECLARE count_even_pal TO 0
  DECLARE count_odd_pal TO 0

  DECLARE counter TO 1
  REPEAT 
    IF (counter MOD 2 NOT EQUAL TO 0) THEN
      IF is_palindrome(counter) THEN
        SET count_odd_pal TO count_odd_pal + 1
      END IF
    ELSE 
      IF is_palindrome(counter) THEN
        SET count_even_pal TO count_even_pal + 1
      END IF
    END IF
    SET counter TO counter + 1
    IF counter GREATER THAN k THEN 
      BREAK
    END IF
  END REPEAT

  RETURN (count_even_pal, count_odd_pal)

END FUNCTION