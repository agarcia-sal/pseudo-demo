```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        SET flag_prime TO True
        IF NOT (integer_p >= 2)
            SET flag_prime TO False
        ELSE
            SET bound_limit TO integer_p - 1
            SET root_limit TO FLOOR(SQUARE_ROOT(integer_p)) + 1
            SET upper_bound TO MINIMUM(root_limit, bound_limit)
            SET idx TO 2
            REPEAT
                IF idx > upper_bound THEN
                    EXIT REPEAT
                ENDIF
                IF (integer_p MODULO idx) == 0 THEN
                    SET flag_prime TO False
                    EXIT REPEAT
                ENDIF
                SET idx TO idx + 1
            UNTIL False
        ENDIF
        RETURN flag_prime
    END FUNCTION

    SET sequence_list TO [0, 1]

m_loop: WHILE TRUE DO
    SET last_idx TO LENGTH(sequence_list) - 1
    SET second_last_idx TO last_idx - 1
    SET next_val TO sequence_list.at(last_idx) + sequence_list.at(second_last_idx)
    sequence_list.APPEND(next_val)

    IF is_prime(sequence_list.at(LENGTH(sequence_list) - 1))
        SET integer_n TO integer_n - 1
    ENDIF

    SWITCH
        CASE integer_n == 0:
            RETURN sequence_list.at(LENGTH(sequence_list) - 1)
        DEFAULT:
            CONTINUE m_loop
    END SWITCH
END WHILE

END FUNCTION
```