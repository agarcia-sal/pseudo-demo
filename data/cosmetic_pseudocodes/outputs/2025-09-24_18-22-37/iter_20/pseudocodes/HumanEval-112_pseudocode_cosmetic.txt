FUNCTION reverse_delete(string_s, string_c)
    DECLARE list_temp AS EMPTY LIST
    DECLARE idx AS INTEGER
    SET idx TO 1
    WHILE idx <= LENGTH(string_s)
        DECLARE ch AS CHARACTER
        SET ch TO string_s.at(idx)
        DECLARE flag_contains AS BOOLEAN
        SET flag_contains TO FALSE
        DECLARE idx_c AS INTEGER
        SET idx_c TO 1
        WHILE idx_c <= LENGTH(string_c)
            IF ch = string_c.at(idx_c) THEN
                SET flag_contains TO TRUE
                EXIT WHILE
            END IF
            SET idx_c TO idx_c + 1
        END WHILE
        IF NOT flag_contains THEN
            CALL list_temp.PUSH_BACK(ch)
        END IF
        SET idx TO idx + 1
    END WHILE

    DECLARE filtered_str AS STRING
    SET filtered_str TO EMPTY STRING
    DECLARE pos AS INTEGER
    SET pos TO 1
    WHILE pos <= LENGTH(list_temp)
        SET filtered_str TO filtered_str || list_temp.at(pos)
        SET pos TO pos + 1
    END WHILE

    DECLARE rev_str AS STRING
    SET rev_str TO EMPTY STRING
    DECLARE rev_pos AS INTEGER
    SET rev_pos TO LENGTH(filtered_str)
    WHILE rev_pos >= 1
        SET rev_str TO rev_str || filtered_str.at(rev_pos)
        SET rev_pos TO rev_pos - 1
    END WHILE

    DECLARE is_palindrome AS BOOLEAN
    IF rev_str = filtered_str THEN
        SET is_palindrome TO TRUE
    ELSE
        SET is_palindrome TO FALSE
    END IF

    RETURN TUPLE(filtered_str, is_palindrome)
END FUNCTION