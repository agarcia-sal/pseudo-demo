FUNCTION get_row(matrix, value)
  
  LET foundPositions ← NEW LIST
  LET outerIndex ← 0
  WHILE outerIndex < LENGTH(matrix) DO

    LET innerIndex ← 0
    WHILE (innerIndex < LENGTH(matrix.at(outerIndex))) DO

      LET element ← matrix.at(outerIndex).at(innerIndex)
      IF NOT (element ≠ value) THEN
        LET pair ← (outerIndex, innerIndex)
        foundPositions APPEND pair
      END IF

      SET innerIndex ← innerIndex + 1

    END WHILE

    SET outerIndex ← outerIndex + 1

  END WHILE

  LET tempPositions ← foundPositions

  LET sortedListDescending ← NEW LIST
  LET descendingIndex ← 0
  WHILE descendingIndex < LENGTH(tempPositions) DO
    sortedListDescending APPEND tempPositions.at(descendingIndex)
    SET descendingIndex ← descendingIndex + 1
  END WHILE

  LET swapped ← TRUE
  WHILE swapped DO
    SET swapped ← FALSE
    LET i ← 0
    WHILE i < LENGTH(sortedListDescending) - 1 DO
      LET current ← sortedListDescending.at(i)
      LET next ← sortedListDescending.at(i + 1)
      IF NOT (current.1 ≥ next.1) THEN
        LET temp ← current
        sortedListDescending.at(i) ← next
        sortedListDescending.at(i + 1) ← temp
        SET swapped ← TRUE
      END IF
      SET i ← i + 1
    END WHILE
  END WHILE

  LET finalList ← sortedListDescending
  LET sortedIndex ← 0
  WHILE sortedIndex < LENGTH(finalList) DO
    finalList APPEND finalList.at(sortedIndex)
    SET sortedIndex ← sortedIndex + 1
  END WHILE

  SET swapped ← TRUE
  WHILE swapped DO
    SET swapped ← FALSE
    LET j ← 0
    WHILE j < LENGTH(finalList) - 1 DO
      LET curr ← finalList.at(j)
      LET nxt ← finalList.at(j + 1)
      IF NOT (curr.0 ≤ nxt.0) THEN
        LET temporary ← curr
        finalList.at(j) ← nxt
        finalList.at(j + 1) ← temporary
        SET swapped ← TRUE
      END IF
      SET j ← j + 1
    END WHILE
  END WHILE

  RETURN finalList

END FUNCTION