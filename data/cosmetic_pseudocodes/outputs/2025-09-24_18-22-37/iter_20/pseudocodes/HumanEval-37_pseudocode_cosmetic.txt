```
FUNCTION sort_even(list_of_elements)
    SET step_value TO 2
    SET start_zero TO 0
    SET first_subset TO EMPTY LIST
    SET second_subset TO EMPTY LIST

    SET idx_a TO start_zero
    WHILE idx_a LESS THAN LENGTH OF list_of_elements
        APPEND list_of_elements AT idx_a TO first_subset
        SET idx_a TO idx_a + step_value
    END WHILE

    SET idx_b TO start_zero + 1
    WHILE idx_b LESS THAN LENGTH OF list_of_elements
        APPEND list_of_elements AT idx_b TO second_subset
        SET idx_b TO idx_b + step_value
    END WHILE

    // Sorting first_subset in non-decreasing order
    SET n TO LENGTH OF first_subset
    SET outer_counter TO n - 1
    WHILE outer_counter GREATER THAN 0
        SET inner_counter TO 0
        WHILE inner_counter LESS THAN outer_counter
            IF first_subset AT inner_counter GREATER THAN first_subset AT (inner_counter + 1)
                SET temp_var TO first_subset AT inner_counter
                SET first_subset AT inner_counter TO first_subset AT (inner_counter + 1)
                SET first_subset AT (inner_counter + 1) TO temp_var
            END IF
            SET inner_counter TO inner_counter + 1
        END WHILE
        SET outer_counter TO outer_counter - 1
    END WHILE

    SET merged_list TO EMPTY LIST
    SET iter_a TO 0
    SET len_first TO LENGTH OF first_subset
    SET len_second TO LENGTH OF second_subset

    WHILE iter_a LESS THAN len_second
        SET merged_pair TO LIST CONTAINING first_subset AT iter_a AND second_subset AT iter_a
        SET append_idx TO 0
        WHILE append_idx LESS THAN LENGTH OF merged_pair
            APPEND merged_pair AT append_idx TO merged_list
            SET append_idx TO append_idx + 1
        END WHILE
        SET iter_a TO iter_a + 1
    END WHILE

    IF len_first GREATER THAN len_second
        APPEND first_subset AT (len_first - 1) TO merged_list
    END IF

    RETURN merged_list

END FUNCTION
```