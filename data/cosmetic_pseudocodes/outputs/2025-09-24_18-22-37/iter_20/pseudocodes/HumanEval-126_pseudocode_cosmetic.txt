```
FUNCTION is_sorted(sequence)
  
  LET frequency_map BE an empty dictionary
  LET iterator_index BE 0
  LET seq_length BE LENGTH(sequence)
  
  WHILE iterator_index < seq_length DO
    LET current_element BE sequence.at(iterator_index)
    IF current_element NOT IN frequency_map THEN
      frequency_map[current_element] ← 0
    END IF
    LET updated_count BE frequency_map[current_element] + 1
    frequency_map[current_element] ← updated_count
    iterator_index ← iterator_index + 1
  END WHILE
  
  LET check_index BE 0
  WHILE check_index < seq_length DO
    LET freq_value BE frequency_map[sequence.at(check_index)]
    IF freq_value > 0x2 THEN
      RETURN False
    END IF
    check_index ← check_index + 1
  END WHILE

  LET ascending_index BE 1
  
  WHILE ascending_index < seq_length DO
    LET previous_value BE sequence.at(ascending_index - 1)
    LET current_value BE sequence.at(ascending_index)
    IF NOT (previous_value <= current_value) THEN
      RETURN False
    END IF
    ascending_index ← ascending_index + 1
  END WHILE
  
  RETURN True

END FUNCTION
```