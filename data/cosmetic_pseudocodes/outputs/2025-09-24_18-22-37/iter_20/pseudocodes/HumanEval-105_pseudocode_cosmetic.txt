FUNCTION by_length(mutable_sequence)  
    INITIALIZE reference_map = {  
        0x1: "One",  
        0x2: "Two",  
        0x3: "Three",  
        0x4: "Four",  
        0x5: "Five",  
        0x6: "Six",  
        0x7: "Seven",  
        0x8: "Eight",  
        0x9: "Nine"  
    }  
  
    SET descending_sorted = EMPTY LIST  
    SET temp_container = mutable_sequence  
  
    # sort descending without using built-in shortcut  
  
    SET outer_index = 0  
    WHILE outer_index < LENGTH(temp_container)  
        SET inner_index = outer_index + 1  
        WHILE inner_index < LENGTH(temp_container)  
            IF temp_container.at(inner_index) > temp_container.at(outer_index) THEN  
                SET temp_var = temp_container.at(outer_index)  
                SET temp_container[outer_index] = temp_container.at(inner_index)  
                SET temp_container[inner_index] = temp_var  
            END IF  
            SET inner_index = inner_index + 1  
        END WHILE  
        SET outer_index = outer_index + 1  
    END WHILE  
  
    SET index_tracker = 0  
    WHILE index_tracker < LENGTH(temp_container)  
        SET current_item = temp_container.at(index_tracker)  
        IF current_item EQUALS 0x1 OR current_item EQUALS 0x2 OR current_item EQUALS 0x3 OR current_item EQUALS 0x4 OR current_item EQUALS 0x5 OR current_item EQUALS 0x6 OR current_item EQUALS 0x7 OR current_item EQUALS 0x8 OR current_item EQUALS 0x9 THEN  
            SET fetched_value = reference_map[current_item]  
            APPEND fetched_value TO descending_sorted  
        ELSE  
            # do nothing if key not found  
        END IF  
        SET index_tracker = index_tracker + 1  
    END WHILE  
  
    RETURN descending_sorted  
END FUNCTION