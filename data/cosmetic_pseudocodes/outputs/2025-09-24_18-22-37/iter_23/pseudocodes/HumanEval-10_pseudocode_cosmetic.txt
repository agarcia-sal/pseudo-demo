```
FUNCTION is_palindrome(input_string)
    DECLARE temp_string AS STRING
    SET temp_string TO EMPTY STRING

    FOR index FROM LENGTH OF input_string - 1 DOWNTO 0 STEP -1
        SET temp_string TO temp_string + input_string.at(index)
    END FOR

    IF input_string EQUALS temp_string THEN
        RETURN TRUE
    ELSE
        RETURN FALSE
    END IF
END FUNCTION

FUNCTION make_palindrome(input_string)
    DECLARE pos_start_suffix AS INTEGER
    SET pos_start_suffix TO 0

    IF LENGTH OF input_string EQUALS 0 THEN
        RETURN ""
    ELSE
        DECLARE flag_pal AS BOOLEAN
        SET flag_pal TO FALSE

        WHILE NOT flag_pal DO
            DECLARE candidate_substring AS STRING
            SET candidate_substring TO SUBSTRING OF input_string FROM pos_start_suffix TO LENGTH OF input_string - 1

            IF is_palindrome(candidate_substring) THEN
                SET flag_pal TO TRUE
            ELSE
                SET pos_start_suffix TO pos_start_suffix + 1
            END IF
        END WHILE

        DECLARE prefix_substring AS STRING
        SET prefix_substring TO SUBSTRING OF input_string FROM 0 TO pos_start_suffix - 1

        DECLARE reversed_prefix AS STRING
        SET reversed_prefix TO EMPTY STRING

        DECLARE i AS INTEGER
        SET i TO LENGTH OF prefix_substring - 1

        WHILE i >= 0 DO
            SET reversed_prefix TO reversed_prefix + prefix_substring.at(i)
            SET i TO i - 1
        END WHILE

        RETURN input_string + reversed_prefix
    END IF
END FUNCTION
```