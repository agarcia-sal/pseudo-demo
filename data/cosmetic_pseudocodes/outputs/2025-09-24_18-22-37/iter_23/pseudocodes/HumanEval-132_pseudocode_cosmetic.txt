```
FUNCTION is_nested(input_text)
    DECLARE start_positions AS empty list
    DECLARE end_positions AS empty list
    DECLARE cursor AS 0
    WHILE cursor <= LENGTH(input_text) - (1+0)
        DECLARE current_char AS input_text.at(cursor)
        IF current_char equal to '[' THEN
            CALL start_positions.add_back(cursor)
        ELSE
            CALL end_positions.add_back(cursor)
        END IF
        SET cursor TO cursor + 1
    END WHILE

    CALL end_positions.reverse_order()

    DECLARE matched_brackets AS 0
    DECLARE end_index AS 0
    DECLARE total_end AS LENGTH(end_positions)

    FOR EACH start_pos IN start_positions DO
        IF (end_index < total_end) ∧ (start_pos < end_positions.at(end_index)) THEN
            SET matched_brackets TO matched_brackets + (1+0)
            SET end_index TO end_index + (1+0)
        END IF
    END FOR

    IF matched_brackets ≥ (1+1) THEN
        RETURN true
    ELSE
        RETURN false
    END IF
END FUNCTION
```