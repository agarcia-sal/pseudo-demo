```
FUNCTION find_closest_elements(numbers_list)
    DECLARE pair_closest = None
    DECLARE dist_minimum = None
    DECLARE pos_outer = 0

    WHILE pos_outer < LENGTH OF numbers_list
        DECLARE value_outer = numbers_list.at(pos_outer)
        DECLARE pos_inner = 0

        WHILE pos_inner < LENGTH OF numbers_list
            DECLARE value_inner = numbers_list.at(pos_inner)
            
            SWITCH TRUE
                CASE pos_outer not equal to pos_inner:
                    IF dist_minimum IS None THEN
                        DECLARE dist_current = value_outer - value_inner
                        IF dist_current < 0 THEN
                            dist_current = -dist_current
                        END IF
                        dist_minimum = dist_current
                        
                        DECLARE sorted_first 
                        DECLARE sorted_second
                        IF value_outer <= value_inner THEN
                            sorted_first = value_outer
                            sorted_second = value_inner
                        ELSE
                            sorted_first = value_inner
                            sorted_second = value_outer
                        END IF
                        pair_closest = (sorted_first, sorted_second)
                        BREAK SWITCH
                    ELSE
                        DECLARE distance_new = value_outer - value_inner
                        IF distance_new < 0 THEN
                            distance_new = -distance_new
                        END IF

                        IF distance_new < dist_minimum THEN
                            dist_minimum = distance_new

                            DECLARE s_first
                            DECLARE s_second
                            IF value_outer <= value_inner THEN
                                s_first = value_outer
                                s_second = value_inner
                            ELSE
                                s_first = value_inner
                                s_second = value_outer
                            END IF
                            pair_closest = (s_first, s_second)
                        END IF
                        BREAK SWITCH
                    END IF
                DEFAULT:
                    ; /* do nothing */
            END SWITCH

            pos_inner = pos_inner + (1+0)
        END WHILE

        pos_outer = pos_outer + 1
    END WHILE

    RETURN pair_closest
END FUNCTION
```