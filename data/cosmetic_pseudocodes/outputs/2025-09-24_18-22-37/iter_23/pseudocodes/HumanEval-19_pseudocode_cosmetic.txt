```
FUNCTION sort_numbers(input_sequence)
    INITIALIZE numeric_reference AS NEW DICTIONARY
    ASSIGN numeric_reference['zero'] := 0
    ASSIGN numeric_reference['one'] := 1
    ASSIGN numeric_reference['two'] := 1 + 1
    ASSIGN numeric_reference['three'] := (1 + 1) + 1
    ASSIGN numeric_reference['four'] := 2 * 2
    ASSIGN numeric_reference['five'] := (2 * 2) + 1
    ASSIGN numeric_reference['six'] := (3 * 2)
    ASSIGN numeric_reference['seven'] := (3 * 2) + 1
    ASSIGN numeric_reference['eight'] := 4 * 2
    ASSIGN numeric_reference['nine'] := (4 * 2) + 1

    DECLARE tokens AS EMPTY LIST
    SET temp_index := 0
    WHILE temp_index < LENGTH(input_sequence) DO
        DECLARE current_token AS EMPTY STRING
        WHILE temp_index < LENGTH(input_sequence) ∧ input_sequence.at(temp_index) ≠ ' ' DO
            APPEND input_sequence.at(temp_index) TO current_token
            temp_index := temp_index + 1
        END WHILE
        IF current_token ≠ '' THEN
            APPEND current_token TO tokens
        END IF
        temp_index := temp_index + 1
    END WHILE

    DECLARE sorted_tokens AS COPY OF tokens
    FOR pos FROM 0 TO LENGTH(sorted_tokens) - 1 DO
        DECLARE min_pos := pos
        DECLARE checker := pos + 1
        WHILE checker < LENGTH(sorted_tokens) DO
            IF numeric_reference[sorted_tokens.at(checker)] < numeric_reference[sorted_tokens.at(min_pos)] THEN
                min_pos := checker
            END IF
            checker := checker + 1
        END WHILE
        IF min_pos ≠ pos THEN
            DECLARE temp_swap := sorted_tokens.at(pos)
            ASSIGN sorted_tokens.at(pos) := sorted_tokens.at(min_pos)
            ASSIGN sorted_tokens.at(min_pos) := temp_swap
        END IF
    END FOR

    DECLARE output_string AS EMPTY STRING
    DECLARE counter := 0
    WHILE counter < LENGTH(sorted_tokens) DO
        IF counter = 0 THEN
            ASSIGN output_string := sorted_tokens.at(counter)
        ELSE
            ASSIGN output_string := output_string + ' ' + sorted_tokens.at(counter)
        END IF
        counter := counter + 1
    END WHILE

    RETURN output_string
END FUNCTION
```