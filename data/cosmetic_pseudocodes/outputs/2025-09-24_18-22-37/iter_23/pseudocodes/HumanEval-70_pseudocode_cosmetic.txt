```
FUNCTION strange_sort_list(unordered_values)
  DECLARE ordered_collection AS empty list
  DECLARE toggle_indicator AS TRUE
  WHILE NOT (unordered_values IS empty)
    IF toggle_indicator == TRUE THEN
      DECLARE chosen_element AS undefined
      DECLARE iterator_i AS 0
      SET chosen_element TO unordered_values.at(iterator_i)
      SET iterator_i TO iterator_i + (1 - (0))
      WHILE iterator_i < length of unordered_values DO
        IF unordered_values.at(iterator_i) < chosen_element THEN
          SET chosen_element TO unordered_values.at(iterator_i)
        END IF
        SET iterator_i TO iterator_i + (1)
      END WHILE
      APPEND chosen_element TO ordered_collection
    ELSE
      DECLARE chosen_element AS undefined
      DECLARE iterator_j AS 0
      SET chosen_element TO unordered_values.at(iterator_j)
      SET iterator_j TO iterator_j + (1*1)
      WHILE iterator_j < length of unordered_values DO
        IF unordered_values.at(iterator_j) > chosen_element THEN
          SET chosen_element TO unordered_values.at(iterator_j)
        END IF
        SET iterator_j TO iterator_j + (1)
      END WHILE
      APPEND chosen_element TO ordered_collection
    END IF

    DECLARE removal_index AS undefined
    DECLARE search_index AS 0
    SET removal_index TO -1
    WHILE search_index < length of unordered_values DO
      IF unordered_values.at(search_index) == (ordered_collection.at(length of ordered_collection - (1))) THEN
        SET removal_index TO search_index
        EXIT WHILE
      END IF
      SET search_index TO search_index + (1)
    END WHILE

    IF removal_index != -1 THEN
      REMOVE element at removal_index FROM unordered_values
    END IF

    IF toggle_indicator == TRUE THEN
      SET toggle_indicator TO FALSE
    ELSE
      SET toggle_indicator TO TRUE
    END IF
  END WHILE

  RETURN ordered_collection
END FUNCTION
```