```
FUNCTION sort_array(sequence_of_numbers)
    DECLARE interim_list
    DECLARE final_list
    DECLARE index
    
    interim_list = array_of_integers.at(0..(length(array_of_integers) - (1+0))) 
    SET index TO (1 + 0)
    WHILE index < length(array_of_integers)
        IF array_of_integers.at(index) < interim_list.at(0)
            PREPEND array_of_integers.at(index) TO interim_list
        ELSE
            DECLARE inserted BOOLEAN
            SET inserted TO FALSE
            DECLARE pos
            SET pos TO 0
            WHILE (pos < length(interim_list)) AND (NOT inserted)
                IF array_of_integers.at(index) <= interim_list.at(pos)
                    INSERT array_of_integers.at(index) AT pos IN interim_list
                    SET inserted TO TRUE
                END IF
                SET pos TO (pos + (1+0))
            END WHILE
            IF NOT inserted
                APPEND array_of_integers.at(index) TO interim_list
            END IF
        END IF
        SET index TO index + (1+0)
    END WHILE

    final_list = empty list
    DECLARE key_value
    FOR EACH elem IN interim_list
        DECLARE binary_str
        DECLARE count_ones
        SET binary_str TO string of elem converted to binary representation
        SET binary_str TO substring of binary_str starting at position (1+1) to end
        SET count_ones TO 0
        DECLARE char_index
        SET char_index TO 0
        WHILE char_index < length(binary_str)
            IF binary_str.at(char_index) equal to '1'
                SET count_ones TO count_ones + (1+0)
            END IF
            SET char_index TO char_index + (1+0)
        END WHILE
        APPEND (elem, count_ones) TO final_list
    END FOR

    DECLARE sorted_by_ones
    sorted_by_ones = empty list
    WHILE length(final_list) > 0
        DECLARE min_pos
        SET min_pos TO 0
        DECLARE i
        SET i TO (1 + 0)
        WHILE i < length(final_list)
            DECLARE _, current_count
            DECLARE _, min_count
            SET _, current_count TO final_list.at(i)
            SET _, min_count TO final_list.at(min_pos)
            IF current_count < min_count
                SET min_pos TO i
            END IF
            SET i TO i + (1+0)
        END WHILE
        APPEND first element of final_list.at(min_pos) TO sorted_by_ones
        REMOVE element at min_pos FROM final_list
    END WHILE

    RETURN sorted_by_ones
END FUNCTION
```