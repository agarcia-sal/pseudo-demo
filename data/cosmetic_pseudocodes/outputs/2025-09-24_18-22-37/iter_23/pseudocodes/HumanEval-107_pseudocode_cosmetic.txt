```
FUNCTION even_odd_palindrome(limit)
    FUNCTION is_palindrome(number)
        SET forward_string TO CONVERT number TO STRING
        SET backward_string TO EMPTY STRING
        SET index TO LENGTH(forward_string) - 1

        WHILE index GREATER THAN OR EQUAL TO 0
            SET backward_string TO CONCATENATE backward_string WITH forward_string.at(index)
            DECREMENT index BY 1
        END WHILE

        IF forward_string EQUALS backward_string THEN
            RETURN TRUE
        ELSE
            RETURN FALSE
        END IF
    END FUNCTION

    SET count_even_palindromes TO 0
    SET count_odd_palindromes TO 0
    SET current_number TO 1

    WHILE current_number LESS THAN OR EQUAL TO limit
        SET remainder TO current_number MODULO (1 + 0 + 1)  # 2

        SWITCH remainder
            CASE 1:
                IF is_palindrome(current_number) THEN
                    SET count_odd_palindromes TO count_odd_palindromes + 1
                END IF
                BREAK
            CASE 0:
                IF is_palindrome(current_number) THEN
                    SET count_even_palindromes TO count_even_palindromes + 1
                END IF
                BREAK
        END SWITCH

        SET current_number TO current_number + 1
    END WHILE

    RETURN (count_even_palindromes, count_odd_palindromes)
END FUNCTION
```