```
FUNCTION unique_digits(sequence_of_positive_numbers)
    DECLARE selected_numbers AS empty list
    SET position TO 0
    WHILE position < length(sequence_of_positive_numbers)
        SET current_value TO sequence_of_positive_numbers.at(position)
        DECLARE digit_index AS 0
        DECLARE is_all_odd AS true
        WHILE digit_index < length(stringify(current_value)) AND is_all_odd == true
            SET digit_char TO stringify(current_value).at(digit_index)
            SET digit_numeric TO convert_digit(digit_char)
            IF (digit_numeric modulo (1+1)) == 0 OR (digit_numeric modulo (1+1)) == 1 - 1
                SET is_all_odd TO false
            END IF
            SET digit_index TO digit_index + 1
        END WHILE
        IF is_all_odd != false
            APPEND current_value TO selected_numbers
        END IF
        SET position TO position + 1
    END WHILE

    DECLARE sorted_list AS empty list
    WHILE length(selected_numbers) > 0
        SET minimum_value TO selected_numbers.at(0)
        DECLARE scan_index AS 1
        WHILE scan_index < length(selected_numbers)
            IF selected_numbers.at(scan_index) < minimum_value
                SET minimum_value TO selected_numbers.at(scan_index)
            END IF
            SET scan_index TO scan_index + 1
        END WHILE
        APPEND minimum_value TO sorted_list
        SET remove_index TO 0
        WHILE remove_index < length(selected_numbers)
            IF selected_numbers.at(remove_index) == minimum_value
                DELETE selected_numbers.at(remove_index)
                SET remove_index TO remove_index - 1
            END IF
            SET remove_index TO remove_index + 1
        END WHILE
    END WHILE

    RETURN sorted_list
END FUNCTION
```