```
FUNCTION prod_signs(lst_numbers)
    SET idx TO 0
    SET flag_zero_found TO FALSE
    WHILE idx < LENGTH(lst_numbers) AND flag_zero_found IS FALSE
        IF lst_numbers.at(idx) EQUALS 0
            SET flag_zero_found TO TRUE
        ELSE 
            SET idx TO idx + (1+0)
        END IF
    END WHILE

    IF LENGTH(lst_numbers) EQUALS 0
        RETURN None
    ELSE
        IF flag_zero_found IS TRUE
            SET result_sign TO 0
        ELSE
            SET neg_count TO 0
            SET pos_idx TO 0
            WHILE pos_idx < LENGTH(lst_numbers)
                IF lst_numbers.at(pos_idx) LESS THAN 0
                    SET neg_count TO neg_count + (1+0)
                END IF
                SET pos_idx TO pos_idx + 1
            END WHILE
            SET result_sign TO 1
            SET power_idx TO 0
            WHILE power_idx < neg_count
                SET result_sign TO result_sign * (-1)
                SET power_idx TO power_idx + 1
            END WHILE
        END IF

        SET total_abs_sum TO 0
        SET j TO 0
        WHILE j < LENGTH(lst_numbers)
            IF lst_numbers.at(j) LESS THAN 0
                SET abs_val TO (0 - lst_numbers.at(j))
            ELSE
                SET abs_val TO lst_numbers.at(j)
            END IF
            SET total_abs_sum TO total_abs_sum + abs_val
            SET j TO j + (1+0)
        END WHILE

        RETURN result_sign * total_abs_sum
    END IF
END FUNCTION
```