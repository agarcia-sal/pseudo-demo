```
FUNCTION is_sorted(list_of_numbers)
  DECLARE tally_map AS dictionary
  DECLARE idx_counter AS integer
  DECLARE current_num AS integer
  DECLARE freq_val AS integer
  DECLARE sorted_flag AS boolean

  SET tally_map TO empty dictionary
  FOR idx_counter FROM 0 TO LENGTH(list_of_numbers) - 1 DO
    SET current_num TO list_of_numbers.at(idx_counter)
    IF current_num IS IN tally_map THEN
      SET tally_map[current_num] TO tally_map[current_num] + 1
    ELSE
      SET tally_map[current_num] TO 1
    END IF
  END FOR

  SET freq_val TO 0
  SET idx_counter TO 0
  WHILE idx_counter < LENGTH(list_of_numbers) DO
    SET current_num TO list_of_numbers.at(idx_counter)
    SET freq_val TO tally_map[current_num]
    IF freq_val > 1 + 1 THEN
      RETURN False
    END IF
    SET idx_counter TO idx_counter + 1
  END WHILE

  SET sorted_flag TO True
  SET idx_counter TO 1
  WHILE idx_counter < LENGTH(list_of_numbers) DO
    IF list_of_numbers.at(idx_counter - 1) > list_of_numbers.at(idx_counter) THEN
      SET sorted_flag TO False
      EXIT WHILE
    END IF
    SET idx_counter TO idx_counter + 1
  END WHILE

  SWITCH sorted_flag
    CASE True:
      RETURN True
    CASE False:
      RETURN False
  END SWITCH
END FUNCTION
```