FUNCTION encode(orig_message)  
    DECLARE alt_vowels AS STRING  
    DECLARE replacement_map AS DICTIONARY  
    DECLARE flipped_message AS STRING  
    DECLARE output_message AS STRING  
    DECLARE idx AS INTEGER  
    DECLARE current_char AS CHARACTER  
    DECLARE substitute_char AS CHARACTER  
  
    alt_vowels ← "aeiouAEIOU"  
  
    replacement_map ← EMPTY DICTIONARY  
    idx ← 0  
    WHILE idx < LENGTH(alt_vowels) DO  
        current_char ← alt_vowels.at(idx)  
        substitute_char ← CHAR(ASCII_VALUE(current_char) + 2)  
        replacement_map[current_char] ← substitute_char  
        idx ← idx + 1  
    END WHILE  
  
    flipped_message ← ""  
    idx ← 0  
    WHILE idx < LENGTH(orig_message) DO  
        current_char ← orig_message.at(idx)  
        IF current_char >= 'A' ∧ current_char <= 'Z' THEN  
            flipped_message ← flipped_message + CHAR(ASCII_VALUE(current_char) + 32)  
        ELSE IF current_char >= 'a' ∧ current_char <= 'z' THEN  
            flipped_message ← flipped_message + CHAR(ASCII_VALUE(current_char) - 32)  
        ELSE  
            flipped_message ← flipped_message + current_char  
        END IF  
        idx ← idx + 1  
    END WHILE  
  
    output_message ← ""  
    idx ← 0  
    WHILE idx < LENGTH(flipped_message) DO  
        current_char ← flipped_message.at(idx)  
        IF replacement_map.CONTAINS_KEY(current_char) THEN  
            output_message ← output_message + replacement_map[current_char]  
        ELSE  
            output_message ← output_message + current_char  
        END IF  
        idx ← idx + 1  
    END WHILE  
  
    RETURN output_message  
END FUNCTION