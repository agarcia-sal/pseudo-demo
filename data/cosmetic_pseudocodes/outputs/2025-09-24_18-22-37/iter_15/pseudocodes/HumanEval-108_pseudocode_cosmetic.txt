FUNCTION count_nums(original_array)
    FUNCTION digits_sum(aux_num)
        SET mult_factor TO 1
        SWITCH TRUE
            CASE aux_num LESS THAN 0:
                SET aux_num TO aux_num MULTIPLIED BY (0 - 1)
                SET mult_factor TO 0 - 1
                BREAK
        END SWITCH

        SET str_repr TO CONVERT aux_num TO STRING
        SET digit_array TO EMPTY LIST
        SET idx TO 0
        WHILE idx LESS THAN LENGTH OF str_repr
            SET temp_char TO str_repr.at(idx)
            SET temp_digit TO CONVERT temp_char TO INTEGER
            APPEND temp_digit TO digit_array
            SET idx TO idx + 1
        END WHILE

        SET digit_array[0] TO digit_array.at(0) MULTIPLIED BY mult_factor

        SET total TO 0
        SET pos TO 0
        WHILE pos LESS THAN LENGTH OF digit_array
            SET total TO total PLUS digit_array.at(pos)
            SET pos TO pos + 1
        END WHILE

        RETURN total
    END FUNCTION

    SET collected_sums TO EMPTY LIST
    SET counter1 TO 0
    WHILE counter1 LESS THAN LENGTH OF original_array
        SET current_element TO original_array.at(counter1)
        SET partial_sum TO digits_sum(current_element)
        APPEND partial_sum TO collected_sums
        SET counter1 TO counter1 + 1
    END WHILE

    SET favorable_items TO EMPTY LIST
    SET counter2 TO 0
    WHILE counter2 LESS THAN LENGTH OF collected_sums
        SET candidate TO collected_sums.at(counter2)
        IF NOT (candidate LESS THAN OR EQUAL TO 0)
            APPEND candidate TO favorable_items
        END IF
        SET counter2 TO counter2 + 1
    END WHILE

    SET result_length TO LENGTH OF favorable_items
    RETURN result_length
END FUNCTION