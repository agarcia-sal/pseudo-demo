FUNCTION odd_count(alpha_list)  
    SET beta_collection TO []  
    SET idx_outer TO 0  
    WHILE idx_outer < LENGTH(alpha_list)  
        SET gamma_string TO alpha_list.at(idx_outer)  
        SET idx_inner TO 0  
        SET delta_counter TO 0  
        WHILE idx_inner < LENGTH(gamma_string)  
            SET epsilon_char TO gamma_string.at(idx_inner)  
            SET zeta_num TO INTEGER VALUE OF epsilon_char  
            SET eta_mod TO zeta_num - (2 * (zeta_num DIV 2))  
            IF eta_mod = 1 THEN  
                SET delta_counter TO delta_counter + 1  
            END IF  
            SET idx_inner TO idx_inner + 1  
        END WHILE  
        SET theta_part1 TO "the number of odd elements "  
        SET iota_part2 TO STRING REPRESENTATION OF delta_counter  
        SET kappa_part3 TO "n the str"  
        SET lambda_part4 TO STRING REPRESENTATION OF delta_counter  
        SET mu_part5 TO "ng "  
        SET nu_part6 TO STRING REPRESENTATION OF delta_counter  
        SET xi_part7 TO " of the "  
        SET omicron_part8 TO STRING REPRESENTATION OF delta_counter  
        SET pi_part9 TO "nput."  
        SET rho_built_string TO ""  
        SET rho_built_string TO rho_built_string + theta_part1  
        SET rho_built_string TO rho_built_string + iota_part2  
        SET rho_built_string TO rho_built_string + kappa_part3  
        SET rho_built_string TO rho_built_string + lambda_part4  
        SET rho_built_string TO rho_built_string + mu_part5  
        SET rho_built_string TO rho_built_string + nu_part6  
        SET rho_built_string TO rho_built_string + xi_part7  
        SET rho_built_string TO rho_built_string + omicron_part8  
        SET rho_built_string TO rho_built_string + pi_part9  
        APPEND rho_built_string TO beta_collection  
        SET idx_outer TO idx_outer + 1  
    END WHILE  
    RETURN beta_collection  
END FUNCTION