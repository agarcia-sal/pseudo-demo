FUNCTION prod_signs(recv_list)
    IF LENGTH of recv_list EQUAL TO 0 THEN
        RETURN None
    END IF

    DECLARE tmp_flag AS BOOLEAN
    tmp_flag = False
    DECLARE idx AS INTEGER
    idx = 0
    WHILE idx < LENGTH of recv_list DO
        IF recv_list.at(idx) EQUAL TO 0 THEN
            tmp_flag = True
            BREAK
        END IF
        idx = idx + 1
    END WHILE

    DECLARE agg_sign AS INTEGER
    IF tmp_flag THEN
        agg_sign = 0
    ELSE
        DECLARE neg_count AS INTEGER
        neg_count = 0
        DECLARE iter_pos AS INTEGER
        iter_pos = 0
        WHILE iter_pos < LENGTH of recv_list DO
            IF recv_list.at(iter_pos) LESS THAN 0 THEN
                neg_count = neg_count + 1
            END IF
            iter_pos = iter_pos + 1
        END WHILE
        DECLARE tmp_base AS INTEGER
        tmp_base = -1
        DECLARE power_result AS INTEGER
        power_result = 1
        DECLARE power_idx AS INTEGER
        power_idx = 0
        WHILE power_idx < neg_count DO
            power_result = power_result * tmp_base
            power_idx = power_idx + 1
        END WHILE
        agg_sign = power_result
    END IF

    DECLARE total_abs AS INTEGER
    total_abs = 0
    DECLARE sum_idx AS INTEGER
    sum_idx = 0
    WHILE sum_idx < LENGTH of recv_list DO
        DECLARE val AS INTEGER
        val = recv_list.at(sum_idx)
        DECLARE abs_val AS INTEGER
        IF val LESS THAN 0 THEN
            abs_val = -val
        ELSE
            abs_val = val
        END IF
        total_abs = total_abs + abs_val
        sum_idx = sum_idx + 1
    END WHILE

    DECLARE final_result AS INTEGER
    final_result = agg_sign * total_abs
    RETURN final_result
END FUNCTION