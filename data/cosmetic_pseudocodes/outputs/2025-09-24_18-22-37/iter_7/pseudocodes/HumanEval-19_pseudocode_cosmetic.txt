FUNCTION sort_numbers(input_string)  
    DECLARE mapping AS DICTIONARY  
    mapping['zero'] := 0  
    mapping['one'] := 1  
    mapping['two'] := 2  
    mapping['three'] := 3  
    mapping['four'] := 4  
    mapping['five'] := 5  
    mapping['six'] := 6  
    mapping['seven'] := 7  
    mapping['eight'] := 8  
    mapping['nine'] := 9  

    DECLARE temp_words AS LIST  
    DECLARE index AS INTEGER := 0  
    DECLARE n AS INTEGER := LENGTH(SPLIT input_string BY ' ')  
    WHILE index < n DO  
        DECLARE current_word AS STRING := (SPLIT input_string BY ' ')[index]  
        IF current_word IS NOT EQUAL TO '' THEN  
            APPEND current_word TO temp_words  
        END IF  
        index := index + 1  
    END WHILE  

    DECLARE result_list AS LIST  
    DECLARE i AS INTEGER := 1  
    SET result_list := COPY(temp_words)  

    WHILE i < LENGTH(result_list) DO  
        DECLARE j AS INTEGER := 0  
        WHILE j < LENGTH(result_list) - i DO  
            DECLARE left_value AS INTEGER := mapping[result_list[j]]  
            DECLARE right_value AS INTEGER := mapping[result_list[j + 1]]  
            IF left_value > right_value THEN  
                DECLARE temp AS STRING := result_list[j]  
                result_list[j] := result_list[j + 1]  
                result_list[j + 1] := temp  
            END IF  
            j := j + 1  
        END WHILE  
        i := i + 1  
    END WHILE  

    DECLARE output_string AS STRING := ''  
    DECLARE k AS INTEGER := 0  
    DECLARE length_result AS INTEGER := LENGTH(result_list)  
    WHILE k < length_result DO  
        IF k IS EQUAL TO length_result - 1 THEN  
            output_string := output_string + result_list[k]  
        ELSE  
            output_string := output_string + result_list[k] + ' '  
        END IF  
        k := k + 1  
    END WHILE  

    RETURN output_string  
END FUNCTION