FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        SET boolean_result TO True
        IF integer_p < 2
            SET boolean_result TO False
        ELSE
            SET integer_limit TO MINIMUM((INTEGER_PART_OF(SQUARE_ROOT_OF(integer_p)) + 1), (integer_p - 1))
            SET integer_j TO 2
            WHILE integer_j <= integer_limit AND boolean_result == True
                SET integer_mod_result TO integer_p MODULO integer_j
                IF integer_mod_result == 0
                    SET boolean_result TO False
                ENDIF
                SET integer_j TO integer_j + 1
            ENDWHILE
        ENDIF
        RETURN boolean_result
    END FUNCTION

    SET list_fibonacci TO [0, 1]

    WHILE TRUE
        SET integer_last_index TO (LENGTH_OF(list_fibonacci) - 1)
        SET integer_second_last_index TO (integer_last_index - 1)
        SET integer_new_fib TO list_fibonacci.at(integer_last_index) + list_fibonacci.at(integer_second_last_index)
        APPEND integer_new_fib TO list_fibonacci

        IF is_prime(list_fibonacci.at(LENGTH_OF(list_fibonacci) - 1)) == True
            SET integer_n TO integer_n - 1
        ENDIF

        IF integer_n == 0
            RETURN list_fibonacci.at(LENGTH_OF(list_fibonacci) - 1)
        ENDIF
    ENDWHILE

END FUNCTION