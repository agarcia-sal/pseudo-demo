FUNCTION sort_third(list_input)
    SET list_clone TO A NEW EMPTY LIST
    SET idx_counter TO 0
    WHILE idx_counter < LENGTH(list_input)
        APPEND list_input.at(idx_counter) TO list_clone
        SET idx_counter TO idx_counter + 1
    END WHILE

    SET temp_collection TO NEW EMPTY LIST
    SET iterator_var TO 0
    WHILE iterator_var < LENGTH(list_clone)
        IF (iterator_var MOD 3) = 0 THEN
            APPEND list_clone.at(iterator_var) TO temp_collection
        END IF
        SET iterator_var TO iterator_var + 1
    END WHILE

    SET sorted_collection TO NEW EMPTY LIST
    SET copy_of_temp TO A NEW EMPTY LIST
    SET copy_idx TO 0
    WHILE copy_idx < LENGTH(temp_collection)
        APPEND temp_collection.at(copy_idx) TO copy_of_temp
        SET copy_idx TO copy_idx + 1
    END WHILE

    SET sort_start TO 0
    WHILE sort_start < LENGTH(copy_of_temp)
        SET min_pos TO sort_start
        SET sort_inner TO sort_start + 1
        WHILE sort_inner < LENGTH(copy_of_temp)
            IF copy_of_temp.at(sort_inner) < copy_of_temp.at(min_pos) THEN
                SET min_pos TO sort_inner
            END IF
            SET sort_inner TO sort_inner + 1
        END WHILE

        SET temp_storage TO copy_of_temp.at(sort_start)
        SET copy_of_temp[sort_start] TO copy_of_temp.at(min_pos)
        SET copy_of_temp[min_pos] TO temp_storage
        SET sort_start TO sort_start + 1
    END WHILE

    SET replace_idx TO 0
    SET tgt_index TO 0
    WHILE tgt_index < LENGTH(list_clone)
        IF (tgt_index MOD 3) = 0 THEN
            SET list_clone[tgt_index] TO copy_of_temp.at(replace_idx)
            SET replace_idx TO replace_idx + 1
        END IF
        SET tgt_index TO tgt_index + 1
    END WHILE

    RETURN list_clone
END FUNCTION