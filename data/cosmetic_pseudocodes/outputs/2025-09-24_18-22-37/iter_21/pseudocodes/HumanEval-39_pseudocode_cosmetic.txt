FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        IF integer_p < 2 THEN
            RETURN False
        END IF

        integer_limit ← MIN(FLOOR(SQRT(integer_p)) + 1, integer_p - 1)
        integer_divisor ← 2

        REPEAT
            IF integer_p MOD integer_divisor = 0 THEN
                RETURN False
            END IF
            integer_divisor ← integer_divisor + 1
        UNTIL integer_divisor > integer_limit

        RETURN True
    END FUNCTION

    list_fibonacci ← [0, 1]

    WHILE 1 = 1
        integer_a ← list_fibonacci.at(list_fibonacci.LENGTH - 1)
        integer_b ← list_fibonacci.at(list_fibonacci.LENGTH - 2)
        integer_c ← integer_a + integer_b
        list_fibonacci.APPEND(integer_c)

        SWITCH (is_prime(list_fibonacci.at(list_fibonacci.LENGTH -1)))
            CASE True:
                integer_n ← integer_n - 1
            CASE False:
                NULL
        END SWITCH

        IF integer_n = 0 THEN
            RETURN list_fibonacci.at(list_fibonacci.LENGTH - 1)
        END IF
    END WHILE
END FUNCTION