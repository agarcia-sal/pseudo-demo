```
FUNCTION sort_array(numbers_list)
    DECLARE temp_sorted_list
    DECLARE count_ones_key
    temp_sorted_list = numbers_list.sorted(ascending = true)

    DECLARE index_pointer
    index_pointer = 0
    DECLARE n
    n = temp_sorted_list.length

    WHILE index_pointer < n DO
        DECLARE current_element
        current_element = temp_sorted_list.at(index_pointer)
        DECLARE binary_form
        binary_form = to_binary_string(current_element)
        DECLARE binary_substring
        binary_substring = binary_form.substring(2, binary_form.length)
        DECLARE ones_count
        ones_count = 0

        DECLARE char_index
        char_index = 0

        WHILE char_index < binary_substring.length DO
            IF binary_substring.at(char_index) == '1' THEN
                ones_count = ones_count + 1
            END IF
            char_index = char_index + 1
        END WHILE

        IF index_pointer == 0 THEN
            count_ones_key = [ones_count]
        ELSE
            count_ones_key.append(ones_count)
        END IF
        index_pointer = index_pointer + 1
    END WHILE

    DECLARE zipped_pairs
    zipped_pairs = zip(count_ones_key, temp_sorted_list)

    DECLARE sorted_pairs
    sorted_pairs = zipped_pairs.sorted(ascending = true, key = first_element)

    DECLARE final_array
    final_array = []

    DECLARE pair_idx
    pair_idx = 0
    DECLARE pair_count
    pair_count = sorted_pairs.length

    WHILE pair_idx < pair_count DO
        final_array.append(sorted_pairs.at(pair_idx).second_element)
        pair_idx = pair_idx + 1
    END WHILE

    RETURN final_array
END FUNCTION
```