```
FUNCTION encode(plaintext)
    LET vowelChars BE "aeiouAEIOU"
    DECLARE transformedChars AS EMPTY DICTIONARY
    LET idx BE 0
    WHILE idx < LENGTH(vowelChars)
        LET originalChar BE vowelChars.at(idx)
        LET asciiVal BE ASCII(originalChar)
        LET shiftedVal BE asciiVal + 2
        LET newChar BE CHAR(shiftedVal)
        transformedChars[originalChar] ← newChar
        idx ← idx + 1
    END WHILE

    LET swappedText BE EMPTY STRING
    LET position BE 0
    WHILE position < LENGTH(plaintext)
        LET ch BE plaintext.at(position)
        IF 'a' <= ch AND ch <= 'z' THEN
            swappedText ← swappedText + CHAR(ASCII(ch) - 32)
        ELSE IF 'A' <= ch AND ch <= 'Z' THEN
            swappedText ← swappedText + CHAR(ASCII(ch) + 32)
        ELSE
            swappedText ← swappedText + ch
        END IF
        position ← position + 1
    END WHILE

    LET resultText BE ""
    FOR EACH character IN swappedText
        IF transformedChars CONTAINS KEY character THEN
            resultText ← resultText + transformedChars[character]
        ELSE
            resultText ← resultText + character
        END IF
    END FOR

    RETURN resultText
END FUNCTION
```