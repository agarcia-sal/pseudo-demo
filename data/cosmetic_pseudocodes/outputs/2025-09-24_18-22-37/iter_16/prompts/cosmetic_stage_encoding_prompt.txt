Rewrite the given pseudocode to produce a fully functionally equivalent version that preserves every input-output behavior, side effect, and interaction exactly as in the original. Your rewriting must maintain all original function names, class names, and retain the entire class-object hierarchy and method signatures unchanged, without reordering or renaming these global identifiers.

Within these constraints, transform the pseudocode by applying extensive and deliberate variations on all of the following dimensions to maximize syntactic, lexical, structural, and stylistic divergence while guaranteeing semantic equivalence:

- Rename **all local variables and function parameters** consistently to new, unrelated identifiers (never touch global names).

- Systematically restructure control flows by mixing and matching constructs arbitrarily: convert FOR loops to WHILE loops or vice versa; replace IF-ELSE chains with nested IFs, SWITCH-CASE, or guard clauses; flatten or nest conditionals; reorder logically independent branches; introduce or remove early returns without changing logic flow.

- Rearrange independent statements, sub-expressions, and computations within dependency constraints.

- Transform expressions profoundly: break down complex expressions into sequences of simpler assignments or compose multiple assignments into compact expressions; substitute operators for synonyms or equivalent logical forms (e.g., `!=` → “not equal to”, logical AND → ∧, change array access styles like `arr[index]` to `arr.at(index)` when valid); alter numerical literal forms without altering their values.

- Vary data traversal and iteration styles freely: switch between index-based and element-based loops; iterate forward or backward; revisit traversal order or data access order wherever correctness is preserved.

- Add new temporary variables or helper constructs as needed to clarify or diversify logic, ensuring consistent usage throughout.

- Modify formatting arbitrarily: indentation, line breaks, statement grouping, and whitespace must be randomized but syntactically correct.

- Under no circumstances simplify algorithms, replace explicit computations with built-ins or shortcuts, or alter the stepwise procedural behavior—preserve explicitness and detail found in the original pseudocode.

- Do not rename or reorder any function or class names or their hierarchical positions.

Output only the rewritten pseudocode text exactly—no commentary, explanations, or delimiters.

The rewritten pseudocode must be as distinct as possible from the original in form yet provably identical in functional behavior.