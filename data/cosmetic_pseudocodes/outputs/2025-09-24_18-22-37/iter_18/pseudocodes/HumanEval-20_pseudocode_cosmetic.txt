```
FUNCTION find_closest_elements(sequence_of_values)
    LET best_match BE NULL
    LET smallest_gap BE NULL

    LET outer_position BE 0
    WHILE outer_position < LENGTH(sequence_of_values) DO
        LET outer_value BE sequence_of_values.at(outer_position)
        LET inner_position BE 0
        REPEAT
            IF inner_position >= LENGTH(sequence_of_values) THEN
                BREAK
            END IF

            LET inner_value BE sequence_of_values.at(inner_position)
            IF outer_position != inner_position THEN
                IF smallest_gap IS NULL THEN
                    LET difference_measure BE outer_value
                    SET difference_measure TO difference_measure - inner_value
                    IF difference_measure < 0 THEN
                        SET difference_measure TO -difference_measure
                    END IF

                    SET smallest_gap TO difference_measure

                    IF outer_value < inner_value THEN
                        SET best_match TO (outer_value, inner_value)
                    ELSE
                        SET best_match TO (inner_value, outer_value)
                    END IF
                ELSE
                    LET tentative_distance BE outer_value - inner_value
                    IF tentative_distance < 0 THEN
                        SET tentative_distance TO -tentative_distance
                    END IF

                    IF tentative_distance < smallest_gap THEN
                        SET smallest_gap TO tentative_distance

                        IF inner_value < outer_value THEN
                            SET best_match TO (inner_value, outer_value)
                        ELSE
                            SET best_match TO (outer_value, inner_value)
                        END IF
                    END IF
                END IF
            END IF

            SET inner_position TO inner_position + 1
        UNTIL FALSE

        SET outer_position TO outer_position + 1
    END WHILE

    RETURN best_match
END FUNCTION
```