```
FUNCTION anti_shuffle(input_string)
    SET var_alpha TO SPLIT input_string BY SPACE
    SET var_beta TO NEW LIST
    SET index_omega TO 0
    SET length_delta TO LENGTH(var_alpha)
    
    WHILE index_omega < length_delta
        SET var_xi TO var_alpha.at(index_omega)
        SET temp_gamma TO NEW LIST
        
        FOR each char_kappa IN var_xi
            ADD char_kappa TO temp_gamma
        END FOR
        
        // Sort ascending by ASCII values
        REPEAT
            SET swapped TO false
            SET i_lambda TO 0
            WHILE i_lambda < LENGTH(temp_gamma) - 1
                IF temp_gamma.at(i_lambda) > temp_gamma.at(i_lambda + 1)
                    SET temp_val TO temp_gamma.at(i_lambda)
                    SET temp_gamma[i_lambda] TO temp_gamma[i_lambda + 1]
                    SET temp_gamma[i_lambda + 1] TO temp_val
                    SET swapped TO true
                END IF
                INCREMENT i_lambda BY 1
            END WHILE
            IF NOT swapped THEN BREAK
        UNTIL FALSE
        
        SET assembled_word TO ""
        FOR pos_eta FROM 0 TO LENGTH(temp_gamma) - 1
            SET assembled_word TO assembled_word + temp_gamma.at(pos_eta)
        END FOR
        
        ADD assembled_word TO var_beta
        SET index_omega TO index_omega + 1
    END WHILE
    
    IF LENGTH(var_beta) = 0 THEN
        RETURN ""
    END IF
    
    SET var_result TO var_beta.at(0)
    SET idx_sigma TO 1
    
    REPEAT
        IF NOT (idx_sigma < LENGTH(var_beta)) THEN BREAK
        SET var_result TO var_result + " " + var_beta.at(idx_sigma)
        SET idx_sigma TO idx_sigma + 1
    UNTIL FALSE
    
    RETURN var_result
END FUNCTION
```