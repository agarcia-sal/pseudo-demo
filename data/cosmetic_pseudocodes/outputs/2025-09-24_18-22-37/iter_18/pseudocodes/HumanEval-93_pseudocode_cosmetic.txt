```
FUNCTION encode(ciphertext)
    vowels_collection ← "aeiouAEIOU"
    temp_map ← EMPTY DICTIONARY
    counter ← 0
    REPEAT
        EXIT WHEN counter is greater than LENGTH(vowels_collection) minus 1
        current_symbol ← vowels_collection.at(counter)
        shifted_symbol ← CHARACTER_FROM_ASCII(ASCII_VALUE_OF(current_symbol) plus 2)
        temp_map[current_symbol] ← shifted_symbol
        counter ← counter + 1
    UNTIL false

    flipped_text ← EMPTY STRING
    index_var ← 0
    WHILE index_var < LENGTH(ciphertext)
        original_char ← ciphertext.at(index_var)
        IF original_char is IN vowels_collection THEN
            flipped_text ← flipped_text + temp_map.at(original_char)
        ELSE
            flipped_text ← flipped_text + original_char
        END IF
        index_var ← index_var + 1
    END WHILE

    output_string ← EMPTY STRING
    position ← 0
    WHILE position < LENGTH(flipped_text)
        character_to_flip ← flipped_text.at(position)
        IF character_to_flip is LOWERCASE THEN
            flipped_character ← TO_UPPER(character_to_flip)
        ELSE IF character_to_flip is UPPERCASE THEN
            flipped_character ← TO_LOWER(character_to_flip)
        ELSE
            flipped_character ← character_to_flip
        END IF
        output_string ← output_string + flipped_character
        position ← position + 1
    END WHILE

    RETURN output_string
END FUNCTION
```