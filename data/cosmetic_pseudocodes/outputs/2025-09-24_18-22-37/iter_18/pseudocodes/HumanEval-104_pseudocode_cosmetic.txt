```
FUNCTION unique_digits(list_of_positive_integers)
    DECLARE container_odd_elements AS empty list
    DECLARE idx_counter AS integer = 0
    REPEAT
        IF idx_counter >= LENGTH(list_of_positive_integers) THEN
            BREAK
        END IF

        DECLARE current_value AS integer = list_of_positive_integers.at(idx_counter)
        DECLARE digit_str AS string = TO_STRING(current_value)
        DECLARE digit_ptr AS integer = 0
        DECLARE all_odd_flag AS boolean = TRUE

        WHILE digit_ptr < LENGTH(digit_str) AND all_odd_flag = TRUE
            DECLARE current_digit AS character = digit_str.at(digit_ptr)
            DECLARE numeric_digit AS integer = ASCII_TO_INT(current_digit)
            IF numeric_digit MOD 2 = 0 THEN
                SET all_odd_flag TO FALSE
            END IF
            SET digit_ptr TO digit_ptr + 1
        END WHILE

        IF all_odd_flag
            SET container_odd_elements TO container_odd_elements + [current_value]
        END IF

        SET idx_counter TO idx_counter + 1
    END REPEAT

    DECLARE result_array AS list = container_odd_elements
    FOR i FROM 0 TO LENGTH(result_array) - 2 STEP 1
        FOR j FROM i + 1 TO LENGTH(result_array) - 1 STEP 1
            IF result_array.at(i) > result_array.at(j) THEN
                DECLARE temp_swap AS integer = result_array.at(i)
                SET result_array.at(i) TO result_array.at(j)
                SET result_array.at(j) TO temp_swap
            END IF
        END FOR
    END FOR

    RETURN result_array
END FUNCTION
```