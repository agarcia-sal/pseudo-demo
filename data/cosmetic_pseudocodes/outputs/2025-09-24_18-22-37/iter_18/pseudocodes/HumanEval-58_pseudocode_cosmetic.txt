```
FUNCTION common(list1, list2)
    DECLARE outputCollection AS set
    INITIALIZE outputCollection TO an empty set
    
    DECLARE idx1 AS integer
    SET idx1 TO 0
    WHILE idx1 LESS THAN LENGTH of list1 DO
        DECLARE elemA AS variable
        ASSIGN elemA TO list1.at(idx1)
        
        DECLARE idx2 AS integer
        SET idx2 TO 0
        REPEAT
            IF idx2 GREATER OR EQUAL TO LENGTH of list2 THEN
                BREAK
            ENDIF
            
            DECLARE elemB AS variable
            ASSIGN elemB TO list2.at(idx2)
            
            IF NOT (elemA NOT EQUAL TO elemB) THEN
                INSERT elemA INTO outputCollection
            ENDIF
            
            SET idx2 TO idx2 PLUS 1
        UNTIL false
        
        SET idx1 TO idx1 PLUS 1
    ENDWHILE
    
    DECLARE tempList AS list
    ASSIGN tempList TO list version of outputCollection
    
    DECLARE swapOccurred AS boolean
    SET swapOccurred TO true
    WHILE swapOccurred DO
        SET swapOccurred TO false
        DECLARE n AS integer
        SET n TO LENGTH of tempList
        
        DECLARE counter AS integer
        SET counter TO 1
        WHILE counter LESS THAN n DO
            IF tempList.at(counter - 1) GREATER THAN tempList.at(counter) THEN
                DECLARE tmpVar AS variable
                SET tmpVar TO tempList.at(counter - 1)
                SET tempList.at(counter - 1) TO tempList.at(counter)
                SET tempList.at(counter) TO tmpVar
                SET swapOccurred TO true
            ENDIF
            SET counter TO counter PLUS 1
        ENDWHILE
    ENDWHILE
    
    RETURN tempList
END FUNCTION
```