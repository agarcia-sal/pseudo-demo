{
  "prompt": "Rewrite the given pseudocode into a new version that is logically and functionally identical\u2014preserving every detail of its behavior, output, and algorithmic effect\u2014with absolutely no changes to original function names, class names, or their hierarchical/class-object structures. Your response must contain only pseudocode, with no explanations, comments, or formatting beyond the pseudocode itself.\n\nYour rewrite should maximize all possible syntactic and stylistic differences from the original pseudocode while guaranteeing exact semantic equivalence. To achieve this:\n\n- Completely rename all variables and parameters in a consistent, systematic manner distinct from original names.\n- Change all control flow constructs by employing varied forms and alternatives: convert FOR loops to WHILE loops, WHILE loops to FOR loops, IF statements to SWITCH/CASE, SWITCH/CASE to IF/ELSE chains, use early returns versus nested blocks, etc.\n- Reorder independent statements and computations where the evaluation order does not change meaning.\n- Adopt alternative idiomatic expressions, synonyms, and phrasing for assignments, arithmetic, comparisons, logical operations, and data structure access.\n- Restructure expressions and breakdown complex operations into smaller steps or consolidate simpler steps, as long as functionality is unaffected.\n- Modify the pseudocode\u2019s formatting, indentation style, and layout to differ from the original.\n- Avoid any semantic shortcuts or simplified abstractions that change the algorithmic process or output values.\n- Maintain the exact output format and ensure no change to function signatures or class hierarchy.\n- Do not omit or add any operation, condition, or computation.\n\nProduce only the rewritten pseudocode plain text exactly as you would pseudocode\u2014without markdown code fences, annotations, commentary, or any other text. The goal is to preserve unambiguous correctness and output invariance while maximizing syntactic, stylistic, and structural divergence from the input pseudocode.",
  "response": "Rewrite the given pseudocode into a new version that is logically and functionally identical\u2014preserving every detail of its behavior, output, and algorithmic effect\u2014with absolutely no changes to original function names, class names, or their hierarchical/class-object structures. Your response must contain only pseudocode, with no explanations, comments, or formatting beyond the pseudocode itself.\n\nYour rewrite should maximize all possible syntactic and stylistic differences from the original pseudocode while guaranteeing exact semantic equivalence. To achieve this:\n\n- Completely rename all variables and parameters in a consistent, systematic manner distinct from original names.\n- Change all control flow constructs by employing varied forms and alternatives: convert FOR loops to WHILE loops, WHILE loops to FOR loops, IF statements to SWITCH/CASE, SWITCH/CASE to IF/ELSE chains, use early returns versus nested blocks, etc.\n- Reorder independent statements and computations where the evaluation order does not change meaning.\n- Adopt alternative idiomatic expressions, synonyms, and phrasing for assignments, arithmetic, comparisons, logical operations, and data structure access.\n- Restructure expressions and breakdown complex operations into smaller steps or consolidate simpler steps, as long as functionality is unaffected.\n- Modify the pseudocode\u2019s formatting, indentation style, and layout to differ from the original.\n- Avoid any semantic shortcuts or simplified abstractions that change the algorithmic process or output values.\n- Maintain the exact output format and ensure no change to function signatures or class hierarchy.\n- Do not omit or add any operation, condition, or computation.\n\nProduce only the rewritten pseudocode plain text exactly as you would pseudocode\u2014without markdown code fences, annotations, commentary, or any other text. The goal is to preserve unambiguous correctness and output invariance while maximizing syntactic, stylistic, and structural divergence from the input pseudocode.",
  "score": 0.8398298194004271,
  "feedback": "The following are 20 lines of original pseudocode of a random subset of the problems along with their modified pseudocodes.\n\nPseudocode for Problem 1:\nFUNCTION words_string(input_string)\n    SWITCH (input_string == \"\")\n        CASE true:\n            RETURN []\n    END SWITCH\n\n    SET temp_chars TO []\n\n    SET index_counter TO 0\n    WHILE index_counter < LENGTH(input_string)\n        SET current_char TO input_string[index_counter]\n        SWITCH current_char == ','\n            CASE true:\n                temp_chars = temp_chars + [' ']\n            CASE false:\n                temp_chars = temp_chars + [current_char]\n        END SWITCH\n        index_counter = index_counter + 1\n    END WHILE\n\n\nModified Pseudocode for Problem 1:\n```\nFUNCTION words_string(input_string)\n    IF input_string IS EMPTY\n        RETURN empty list\n    END IF\n\n    SET character_list TO empty list\n\n    FOR each character IN input_string\n        IF character IS EQUAL TO comma\n            APPEND space TO character_list\n        ELSE\n            APPEND character TO character_list\n        END IF\n    END FOR\n\n    SET joined_string TO concatenation of all characters in character_list\n    RETURN list of words obtained by splitting joined_string on whitespace\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 1:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzrxoltfg/solution_0.py\", line 25, in <module>\\n    check(words_string)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpzrxoltfg/solution_0.py\", line 24, in check\\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\\nAssertionError\\n']\n\nPseudocode for Problem 2:\nFUNCTION get_odd_collatz(x)\n    SET result_list TO []\n    SWITCH (x MOD 2)\n        CASE 0:\n            result_list := []\n        DEFAULT:\n            result_list := [x]\n    END SWITCH\n\n    FOR value FROM x DOWNTO 2 STEP -1\n        IF x <= 1 THEN\n            BREAK\n        END IF\n\n        IF (x MOD 2) = 0 THEN\n            x := x / 2\n        ELSE\n            x := (3 * x) + 1\n        END IF\n\n\nModified Pseudocode for Problem 2:\n```\nFUNCTION get_odd_collatz(n)\n    IF n MODULO 2 EQUALS 0\n        SET odd_collatz TO empty list\n    ELSE\n        SET odd_collatz TO list containing n\n    END IF\n\n    WHILE n GREATER THAN 1\n        IF n MODULO 2 EQUALS 0\n            SET n TO n DIVIDED BY 2\n        ELSE\n            SET n TO n MULTIPLIED BY 3 PLUS 1\n        END IF\n\n        IF n MODULO 2 EQUALS 1\n            APPEND n AS INTEGER TO odd_collatz\n        END IF\n    END WHILE\n\n\nError(s) from the decoded code for Problem 2:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp99_rpgwb/solution_0.py\", line 20, in <module>\\n    check(get_odd_collatz)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmp99_rpgwb/solution_0.py\", line 19, in check\\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\\nAssertionError\\n']\n\nPseudocode for Problem 3:\nFUNCTION decimal_to_binary(num)\n    SET bin_representation TO CONVERT_TO_BINARY(num)\n    SET middle_section TO EXTRACT_SUBSTRING(bin_representation, START=2, LENGTH=LENGTH(bin_representation)-1)\n    SET prefix TO \"db\"\n    SET suffix TO \"db\"\n    RETURN CONCATENATE(prefix, middle_section, suffix)\nEND FUNCTION\n\nModified Pseudocode for Problem 3:\n```\nFUNCTION decimal_to_binary(decimal_number)\n    RETURN CONCATENATE \"db\", SUBSTRING OF BINARY REPRESENTATION OF decimal_number FROM INDEX 2 TO END, AND \"db\"\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 3:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxc0_y_hr/solution_0.py\", line 10, in <module>\\n    check(decimal_to_binary)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpxc0_y_hr/solution_0.py\", line 9, in check\\n    assert candidate(0) == \"db0db\"\\nAssertionError\\n']\n\nPseudocode for Problem 4:\nFUNCTION add(numbers_collection)\n    VARIABLE index_counter = 1\n    VARIABLE accumulated_sum = 0\n    WHILE index_counter <= SIZE OF numbers_collection\n        VARIABLE current_element = numbers_collection[index_counter]\n        IF current_element MOD 2 = 0 THEN\n            accumulated_sum = accumulated_sum + current_element\n        END IF\n        index_counter = index_counter + 2\n    END WHILE\n    RETURN accumulated_sum\nEND FUNCTION\n\nModified Pseudocode for Problem 4:\n```\nFUNCTION add(list_of_integers)\n    RETURN SUM OF ELEMENTS AT positions FROM 1 TO LENGTH OF list_of_integers STEP 2 WHERE ELEMENT IS EVEN\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 4:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpz0kyyugm/solution_0.py\", line 15, in <module>\\n    check(add)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpz0kyyugm/solution_0.py\", line 14, in check\\n    assert candidate([4, 88]) == 88\\nAssertionError\\n']\n\nPseudocode for Problem 5:\nFUNCTION rounded_avg(x, y)\n    SWITCH TRUE\n        CASE y < x:\n            RETURN -1\n    SET total_sum TO 0\n    SET index TO x\n    WHILE index <= y\n        SET total_sum TO total_sum + index\n        SET index TO index + 1\n    SET count TO (y - x + 1)\n    SET mean_value TO total_sum / count\n    SET rounded_mean TO ROUND(mean_value)\n    SET binary_string TO TO_BINARY(rounded_mean)\n    RETURN binary_string\nEND FUNCTION\n\nModified Pseudocode for Problem 5:\n```\nFUNCTION rounded_avg(n, m)\n    IF m IS LESS THAN n\n        RETURN -1\n    SET summation TO 0\n    FOR each integer i FROM n TO m INCLUSIVE\n        INCREMENT summation BY i\n    SET average_value TO summation DIVIDED BY (m MINUS n PLUS 1)\n    SET rounded_average TO ROUND average_value TO NEAREST INTEGER\n    SET binary_representation TO BINARY FORMAT OF rounded_average\n    RETURN binary_representation\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 5:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpra19m5ly/solution_0.py\", line 19, in <module>\\n    check(rounded_avg)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpra19m5ly/solution_0.py\", line 18, in check\\n    assert candidate(1, 5) == \"0b11\"\\nAssertionError\\n']\n\nPseudocode for Problem 6:\nFUNCTION solve(integer_N)\n    SET computed_sum TO 0\n    SET str_num TO STRING OF integer_N\n    SET idx TO 1\n    WHILE idx <= LENGTH OF str_num\n        SET char_val TO CHARACTER AT POSITION idx IN str_num\n        SET int_val TO INTEGER CONVERSION OF char_val\n        SET computed_sum TO computed_sum + int_val\n        INCREMENT idx BY 1\n    END WHILE\n    SET bin_str_full TO CONVERT computed_sum TO BINARY STRING\n    SET bin_str_trimmed TO SUBSTRING OF bin_str_full FROM POSITION 3 TO END\n    RETURN bin_str_trimmed\nEND FUNCTION\n\nModified Pseudocode for Problem 6:\n```\nFUNCTION solve(integer_N)\n    SET sum_of_digits TO 0\n    FOR each character_digit IN STRING REPRESENTATION OF integer_N\n        INCREMENT sum_of_digits BY INTEGER VALUE OF character_digit\n    SET binary_representation TO BINARY STRING OF sum_of_digits EXCLUDING THE FIRST TWO CHARACTERS\n    RETURN binary_representation\nEND FUNCTION\n```\n\nError(s) from the decoded code for Problem 6:\n['Traceback (most recent call last):\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpizrpw1cn/solution_0.py\", line 16, in <module>\\n    check(solve)\\n  File \"/var/folders/x3/l43tt5dd3y19dmn0cq8rhm7r0000gq/T/tmpizrpw1cn/solution_0.py\", line 15, in check\\n    assert candidate(150) == \"110\", \"Error\"\\nAssertionError: Error\\n']\n\nPseudocode for Problem 7:\nFUNCTION sum_to_n(num)\n    total \u2190 0\n    counter \u2190 0\n    WHILE counter <= num DO\n        total \u2190 total + counter\n        counter \u2190 counter + 1\n    END WHILE\n    RETURN total\nEND FUNCTION\n\nModified Pseudocode for Problem 7:\n```\nFUNCTION sum_to_n(integer_n)\n    RETURN SUM OF ALL INTEGERS FROM 0 TO integer_n INCLUSIVE\nEND FUNCTION\n```\n\nPseudocode for Problem 8:\nFUNCTION all_prefixes(input_string)\n    INITIALIZE prefixes_collection AS empty list\n    INITIALIZE position TO 0\n    WHILE position < LENGTH(input_string)\n        SET current_prefix TO SUBSTRING(input_string, 0, position + 1)\n        ADD current_prefix TO prefixes_collection\n        INCREMENT position BY 1\n    END WHILE\n    RETURN prefixes_collection\nEND FUNCTION\n\nModified Pseudocode for Problem 8:\n```\nFUNCTION all_prefixes(input_string)\n    SET result_list TO empty list\n    FOR each index FROM 0 TO LENGTH OF input_string MINUS 1\n        APPEND SUBSTRING OF input_string FROM START TO index PLUS 1 TO result_list\n    RETURN result_list\nEND FUNCTION\n```\nScore of Passing Rate - BLEU Score for ALL the problems: 0.8398298194004271"
}