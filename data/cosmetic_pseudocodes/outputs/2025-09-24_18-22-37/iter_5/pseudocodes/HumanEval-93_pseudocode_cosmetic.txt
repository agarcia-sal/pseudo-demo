FUNCTION encode(input_text)
    ASSIGN vowel_letters := "aeiouAEIOU"
    DECLARE vowel_mapping AS EMPTY DICTIONARY
    INITIALIZE index_counter TO 0
    WHILE index_counter < LENGTH(vowel_letters)
        ASSIGN current_char := vowel_letters[index_counter]
        ASSIGN ascii_val := ASCII_OF(current_char)
        ASSIGN mapped_char := CHAR_FROM_ASCII(ascii_val + 2)
        vowel_mapping[current_char] = mapped_char
        INCREMENT index_counter BY 1
    END WHILE
    ASSIGN swapped_text := EMPTY STRING
    DECLARE iterator := 0
    WHILE iterator < LENGTH(input_text)
        ASSIGN cur_char := input_text[iterator]
        IF cur_char IS BETWEEN 'a' AND 'z' THEN
            ASSIGN swapped_char := CHAR_FROM_ASCII(ASCII_OF(cur_char) - 32)
        ELSE IF cur_char IS BETWEEN 'A' AND 'Z' THEN
            ASSIGN swapped_char := CHAR_FROM_ASCII(ASCII_OF(cur_char) + 32)
        ELSE
            ASSIGN swapped_char := cur_char
        END IF
        APPEND swapped_char TO swapped_text
        INCREMENT iterator BY 1
    END WHILE
    DECLARE result_string := EMPTY STRING
    DECLARE pos := 0
    WHILE pos < LENGTH(swapped_text)
        DECLARE letter := swapped_text[pos]
        IF vowel_mapping CONTAINS KEY letter THEN
            APPEND vowel_mapping[letter] TO result_string
        ELSE
            APPEND letter TO result_string
        END IF
        INCREMENT pos BY 1
    END WHILE
    RETURN result_string
END FUNCTION