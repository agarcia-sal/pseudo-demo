FUNCTION sort_array(arr)
  DECLARE idx = 0
  DECLARE count_len = LENGTH(arr)
  DECLARE temp_sorted_arr = []
  WHILE idx < count_len
    APPEND arr[idx] TO temp_sorted_arr
    idx = idx + 1
  END WHILE

  FOR i FROM 0 TO LENGTH(temp_sorted_arr) - 2
    FOR j FROM i + 1 TO LENGTH(temp_sorted_arr) - 1
      IF temp_sorted_arr[i] > temp_sorted_arr[j] THEN
        DECLARE temp = temp_sorted_arr[i]
        temp_sorted_arr[i] = temp_sorted_arr[j]
        temp_sorted_arr[j] = temp
      END IF
    END FOR
  END FOR

  DECLARE result = []
  DECLARE flag
  FOR i FROM 0 TO LENGTH(temp_sorted_arr) - 1
    flag =FALSE
    FOR j FROM 0 TO LENGTH(result) - 1
      IF COUNT_ONES_IN_BINARY(temp_sorted_arr[i]) < COUNT_ONES_IN_BINARY(result[j]) THEN
        INSERT temp_sorted_arr[i] AT POSITION j IN result
        flag = TRUE
        BREAK
      ELSE IF COUNT_ONES_IN_BINARY(temp_sorted_arr[i]) = COUNT_ONES_IN_BINARY(result[j]) THEN
        IF temp_sorted_arr[i] < result[j] THEN
          INSERT temp_sorted_arr[i] AT POSITION j IN result
          flag = TRUE
          BREAK
        END IF
      END IF
    END FOR
    IF NOT flag THEN
      APPEND temp_sorted_arr[i] TO result
    END IF
  END FOR

  RETURN result

FUNCTION COUNT_ONES_IN_BINARY(num)
  DECLARE binary_representation = TO_BINARY_STRING(num)  # no prefix assumed
  DECLARE count_ones = 0
  DECLARE k = 0
  WHILE k < LENGTH(binary_representation)
    IF binary_representation[k] = '1' THEN
      count_ones = count_ones + 1
    END IF
    k = k + 1
  END WHILE
  RETURN count_ones