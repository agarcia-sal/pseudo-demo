FUNCTION minPath(grid, k)
    LET size = LENGTH(grid)
    LET minimum_value = size * size + 1
    LET row_index = 0
    WHILE row_index < size
        LET column_index = 0
        WHILE column_index < size
            IF grid[row_index][column_index] = 1 THEN
                LET neighbors = []
                IF row_index <> 0 THEN
                    ADD grid[row_index - 1][column_index] TO neighbors
                END IF
                IF column_index <> 0 THEN
                    ADD grid[row_index][column_index - 1] TO neighbors
                END IF
                IF row_index <> size - 1 THEN
                    APPEND grid[row_index + 1][column_index] TO neighbors
                END IF
                IF column_index <> size - 1 THEN
                    APPEND grid[row_index][column_index + 1] TO neighbors
                END IF
                LET temp_min = neighbors[0]
                LET idx = 1
                WHILE idx < LENGTH(neighbors)
                    IF neighbors[idx] < temp_min THEN
                        temp_min = neighbors[idx]
                    END IF
                    idx = idx + 1
                END WHILE
                minimum_value = temp_min
            END IF
            column_index = column_index + 1
        END WHILE
        row_index = row_index + 1
    END WHILE

    LET result = []
    LET count = 0
    FOR count FROM 0 TO k - 1 DO
        SWITCH count MOD 2
            CASE 0:
                APPEND 1 TO result
                BREAK
            CASE 1:
                APPEND minimum_value TO result
                BREAK
        END SWITCH
    END FOR

    RETURN result
END FUNCTION