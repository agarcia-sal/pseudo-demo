FUNCTION sort_array(original_list)
  SET intermediate_sorted_list TO original_list
  SET index_counter TO 0
  WHILE index_counter < LENGTH original_list
    SET current_value TO original_list[index_counter]
    SET position TO 0
    WHILE position < index_counter AND intermediate_sorted_list[position] <= current_value
      SET position TO position + 1
    END WHILE
    SET shift_index TO index_counter
    WHILE shift_index > position
      SET intermediate_sorted_list[shift_index] TO intermediate_sorted_list[shift_index - 1]
      SET shift_index TO shift_index - 1
    END WHILE
    SET intermediate_sorted_list[position] TO current_value
    SET index_counter TO index_counter + 1
  END WHILE

  SET length_of_list TO LENGTH intermediate_sorted_list
  SET outer_index TO 0
  WHILE outer_index < length_of_list
    SET inner_index TO outer_index + 1
    WHILE inner_index < length_of_list
      SET first_value TO intermediate_sorted_list[outer_index]
      SET second_value TO intermediate_sorted_list[inner_index]
      SET first_binary_str TO STRING REPRESENTATION OF first_value
      SET second_binary_str TO STRING REPRESENTATION OF second_value
      SET count_ones_first TO 0
      SET count_ones_second TO 0
      SET char_index_first TO 0
      WHILE char_index_first < LENGTH BINARY first_value - 2
        IF SUBSTRING(BINARY first_value, char_index_first + 3, 1) IS '1'
          SET count_ones_first TO count_ones_first + 1
        END IF
        SET char_index_first TO char_index_first + 1
      END WHILE
      SET char_index_second TO 0
      WHILE char_index_second < LENGTH BINARY second_value - 2
        IF SUBSTRING(BINARY second_value, char_index_second + 3, 1) IS '1'
          SET count_ones_second TO count_ones_second + 1
        END IF
        SET char_index_second TO char_index_second + 1
      END WHILE

      IF count_ones_first > count_ones_second
        SET temp_item TO intermediate_sorted_list[outer_index]
        SET intermediate_sorted_list[outer_index] TO intermediate_sorted_list[inner_index]
        SET intermediate_sorted_list[inner_index] TO temp_item
      END IF
      SET inner_index TO inner_index + 1
    END WHILE
    SET outer_index TO outer_index + 1
  END WHILE

  RETURN intermediate_sorted_list
END FUNCTION