CLASS Solution
    FUNCTION maxBottlesDrunk(numBottles numBottles numExchange numExchange)
        FUNCTION sub_collectNewBottles(currentEmpty, exchangeLimit)
            IF NOT (currentEmpty < exchangeLimit) THEN
                SET updatedEmpty TO currentEmpty - exchangeLimit
                SET refreshedBottles TO 1

                SET nextEmpty TO updatedEmpty
                SET nextLimit TO exchangeLimit + 1

                SET recursionResult TO sub_collectNewBottles(nextEmpty, nextLimit)
                SET totalNewBottles TO recursionResult[1] + refreshedBottles
                SET remainingEmpty TO recursionResult[0]

                RETURN [remainingEmpty, totalNewBottles]
            ELSE
                RETURN [currentEmpty, 0]
            END IF
        END FUNCTION

        SET cumulativeConsumed TO 0
        SET recyclableEmpties TO 0

        WHILE 0 < numBottles
            SET cumulativeConsumed TO cumulativeConsumed + numBottles
            SET recyclableEmpties TO recyclableEmpties + numBottles
            SET numBottles TO 0

            SET unpacked TO sub_collectNewBottles(recyclableEmpties, numExchange)
            SET recyclableEmpties TO unpacked[0]
            SET numBottles TO unpacked[1]
        END WHILE

        RETURN cumulativeConsumed
    END FUNCTION
END CLASS