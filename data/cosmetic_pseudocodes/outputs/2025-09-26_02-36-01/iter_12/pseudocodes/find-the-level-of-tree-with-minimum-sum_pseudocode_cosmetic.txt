CLASS TreeNode  
	FUNCTION __init__(self COMMA val EQUALS 0 COMMA left EQUALS None COMMA right EQUALS None)  
		LET alpha EQUALS val  
		LET beta EQUALS left  
		LET gamma EQUALS right  
		SET self.val TO alpha  
		SET self.left TO beta  
		SET self.right TO gamma  
	END FUNCTION  
END CLASS  

FUNCTION tree_node(values)  
	IF NOT (values EQUALS empty) THEN  
		LET omega EQUALS 1  
		LET zeta DEQUE_NEW  
		LET delta EQUALS TreeNode(values[0])  
		APPEND delta TO zeta  
		WHILE LENGTH(zeta) GREATER THAN 0 DO  
			LET sigma EQUALS POP_LEFT(zeta)  
			IF omega LESS THAN LENGTH(values) AND values[omega] ISNOT None THEN  
				LET kappa EQUALS TreeNode(values[omega])  
				SET sigma.left TO kappa  
				APPEND kappa TO zeta  
			END IF  
			SET omega TO omega + 1  
			IF omega LESS THAN LENGTH(values) AND values[omega] ISNOT None THEN  
				LET rho EQUALS TreeNode(values[omega])  
				SET sigma.right TO rho  
				APPEND rho TO zeta  
			END IF  
			SET omega TO omega + 1  
		END WHILE  
		RETURN delta  
	ELSE  
		RETURN None  
	END IF  
END FUNCTION  

FUNCTION is_same_tree(p COMMA q)  
	IF p IS None THEN  
		IF q IS None THEN  
			RETURN True  
		ELSE  
			RETURN False  
		END IF  
	ELSE  
		IF q IS None THEN  
			RETURN False  
		ELSE  
			IF p.val EQUALS q.val THEN  
				LET left_same EQUALS is_same_tree(p.left COMMA q.left)  
				LET right_same EQUALS is_same_tree(p.right COMMA q.right)  
				RETURN (left_same AND right_same)  
			ELSE  
				RETURN False  
			END IF  
		END IF  
	END IF  
END FUNCTION  

CLASS Solution  
	FUNCTION minimumLevel(self COMMA root)  
		IF root IS None THEN  
			RETURN 0  
		END IF  
		LET a_deque EQUALS DEQUE_NEW  
		APPEND root TO a_deque  
		LET min_lev EQUALS 1  
		LET min_sum_val EQUALS INFINITY  
		LET lev EQUALS 1  
		WHILE TRUE DO  
			IF NOT (LENGTH(a_deque) GREATER THAN 0) THEN  
				BREAK  
			END IF  
			LET sum_level EQUALS 0  
			LET iter_count EQUALS LENGTH(a_deque)  
			LET idx EQUALS 0  
			WHILE idx LESS THAN iter_count DO  
				LET curr_node EQUALS POP_LEFT(a_deque)  
				SET sum_level TO sum_level + curr_node.val  
				IF curr_node.left ISNOT None THEN  
					APPEND curr_node.left TO a_deque  
				END IF  
				IF curr_node.right ISNOT None THEN  
					APPEND curr_node.right TO a_deque  
				END IF  
				SET idx TO idx + 1  
			END WHILE  
			IF sum_level LESS THAN min_sum_val THEN  
				SET min_sum_val TO sum_level  
				SET min_lev TO lev  
			END IF  
			SET lev TO lev + 1  
		END WHILE  
		RETURN min_lev  
	END FUNCTION  
END CLASS