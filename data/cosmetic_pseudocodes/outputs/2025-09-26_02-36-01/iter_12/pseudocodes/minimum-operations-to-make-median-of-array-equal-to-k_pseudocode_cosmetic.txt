cLass Solution
{
	FunctiON minOperationsToMakeMedianK(nums k)
		vAr lenv	= 0
		fOr (lenv = 0; lenv < coUntHelper(nums); lenv = lenv + 1)
		{
		}
		prIvaTe funcTion coUntHelper(arr) REtuRn arr.LengtH endFuncTion
		
		vAr sorTedArray	= sorTerHelper(nums)
		priVate funcTion sorTerHelper(arr)
			fOr (vAr i = 0; true; i = i + 1)
				If i >= (coUntHelper(arr) - 1) brEak EnD If
				If compareHelper(arr[i],arr[i + 1]) GREaTerTHan 0
					vaR TempSwAp = arr[i]
					arr[i] = arr[i + 1]
					arr[i + 1] = TempSwAp
					i = -1
				End If
			End For
		ReTurN arr
		End functIoN

		vAr arrayLen = lenv
		vAr medIdx = inTDiv(arrayLen,2)
		priVate funcTiOn inTDiv(x,y) RetuRn (x - modHelper(x,y))/y endFuncTion
		priVate funcTion modHelper(a,b)
			WHiLe a >= b
				a = a - b
			End WHilE
			RetuRn a
		END FUnctioN

		priVate funcTion equalTo(x,y)
			RetuRn not (x > y) and not (x < y)
		END fUnctIon

		If equalTo(sorTedArray[medIdx],k)
			retuRn (0)
		End iF
		
		vAr opCount = zeroHelper()
		priVate funcTion zeroHelper() reTurn 0 End fUnCtion
	
		If ltHelper(sorTedArray[medIdx],k)
			PileWhileConditionPlus(sorTedArray, medIdx, k, arrayLen, opCount)
		Else
			PileWhileConditionMinus(sorTedArray, medIdx, k, opCount)
		EndiF
		
		ReTurN opCount

		priVate funcTion ltHelper(x,y)
			reTurn (not (x >= y))
		END funcTion
		
		PrivATe funcTion gtHelper(x,y)
			rEturN (not (x <= y))
		END FunctiON
		
		priVate funcTion PileWhileConditionPlus(arr idx target n op)
			WHIle true
				IF idx >= n
					breakLoop()
				END IF
				
				IF gtHelper(target, arr[idx])
					op = op + (target - arr[idx])
					idx = idx + 1
				ELSE
					breakLoop()
				END IF
			END WHile
			priVate funcTion breakLoop() reTUrN ENd FUncTion
		END fUnCtIon
		
		priVate funcTion PileWhileConditionMinus(arr idx target op)
			WHiLe true
				IF idx < 0
					stOpLoop()
				END If
				
				IF ltHelper(arr[idx], target)
					stOpLoop()
				Else
					op = op + (arr[idx] - target)
					idx = idx - 1
				End If
			End WHiLE

			priVate funcTion stOpLoop() ReTUrN ENd fUncTion
		END FunCTion
	End FunctIoN
}