CLASS Solution
    FUNCTION countSubmatrices(grid, k)
        FUNCTION replicate_length(lst)
            SET total TO 0
            WHILE total LESS THAN LENGTH(lst)
                SET total TO total PLUS 1
            END WHILE
            RETURN total
        END FUNCTION

        FUNCTION replicate_2d(rows, cols)
            SET result TO EMPTY LIST
            SET row_idx TO 0

            CHECK_ROW: WHILE row_idx NOT EQUAL rows
                SET temp_row TO EMPTY LIST
                SET col_idx TO 0

                CHECK_COL: WHILE col_idx NOT EQUAL cols
                    APPEND temp_row WITH 0
                    SET col_idx TO col_idx PLUS 1
                END WHILE

                APPEND result WITH temp_row
                SET row_idx TO row_idx PLUS 1
            END WHILE

            RETURN result
        END FUNCTION

        FUNCTION add_values(lst, ix1, ix2)
            RETURN lst[ix1] PLUS lst[ix2]
        END FUNCTION

        FUNCTION subtract_values(lst, ix1, ix2)
            RETURN lst[ix1] MINUS lst[ix2]
        END FUNCTION

        FUNCTION check_grid_empty(g)
            RETURN g IS NO VALUE OR (LENGTH(g) EQUALS 0) OR (g[0] IS NO VALUE)
        END FUNCTION

        SET zero_value TO 0
        SET minus_one TO (1 MINUS 1)

        IF check_grid_empty(grid)
            RETURN zero_value
        END IF

        SET rows TO replicate_length(grid)
        SET cols TO replicate_length(grid[zero_value])

        SET prefix_sum TO replicate_2d(rows, cols)
        SET accumulator TO zero_value

        SET outer_index TO zero_value

        OUTER_LOOP: WHILE outer_index NOT EQUAL rows
            SET inner_index TO zero_value

            INNER_LOOP: WHILE inner_index NOT EQUAL cols

                IF outer_index EQUALS zero_value THEN
                    IF inner_index EQUALS zero_value THEN
                        SET prefix_sum[outer_index][inner_index] TO grid[outer_index][inner_index]
                    ELSE
                        SET prefix_sum[outer_index][inner_index] TO add_values(prefix_sum[outer_index], inner_index, (inner_index MINUS 1)) PLUS grid[outer_index][inner_index]
                    END IF
                ELSE
                    IF inner_index EQUALS zero_value THEN
                        SET prefix_sum[outer_index][inner_index] TO add_values(prefix_sum[outer_index MINUS 1], inner_index, inner_index) PLUS grid[outer_index][inner_index]
                    ELSE
                        SET A TO prefix_sum[outer_index][inner_index MINUS 1]
                        SET B TO prefix_sum[outer_index MINUS 1][inner_index]
                        SET C TO prefix_sum[outer_index MINUS 1][inner_index MINUS 1]
                        SET prefix_sum[outer_index][inner_index] TO A PLUS B MINUS C PLUS grid[outer_index][inner_index]
                    END IF
                END IF

                IF NOT (prefix_sum[outer_index][inner_index] GREATER THAN k)
                    SET accumulator TO accumulator PLUS 1
                END IF

                SET inner_index TO inner_index PLUS 1
            END WHILE

            SET outer_index TO outer_index PLUS 1
        END WHILE

        RETURN accumulator
    END FUNCTION
END CLASS