CLASS Solution
    FUNCTION mostFrequentIDs(nums PARAMETER, freq PARAMETER)
        FUNCTION replicateHeapPush(H PARAMETER, v PARAMETER)
            CALL H.append(v)
            CALL heapifyUp(H, LENGTH(H) - 1)
        END FUNCTION

        FUNCTION replicateHeapPop(H PARAMETER)
            IF LENGTH(H) = 0 THEN
                RETURN NULL
            END IF
            SET topVal TO H[0]
            SET lastIdx TO LENGTH(H) - 1
            SET H[0] TO H[lastIdx]
            DELETE H[lastIdx]
            CALL heapifyDown(H, 0)
            RETURN topVal
        END FUNCTION

        FUNCTION heapifyUp(H PARAMETER, idx PARAMETER)
            WHILE idx > 0
                SET parentIdx TO (idx - 1) DIV 2
                IF H[parentIdx][0] <= H[idx][0] THEN BREAK END IF
                SET tempPair TO H[parentIdx]
                SET H[parentIdx] TO H[idx]
                SET H[idx] TO tempPair
                SET idx TO parentIdx
            END WHILE
        END FUNCTION

        FUNCTION heapifyDown(H PARAMETER, idx PARAMETER)
            SET size TO LENGTH(H)
            SET current TO idx
            REPEAT
                SET left TO 2 * current + 1
                SET right TO 2 * current + 2
                SET smallest TO current

                IF left < size AND H[left][0] < H[smallest][0] THEN SET smallest TO left END IF
                IF right < size AND H[right][0] < H[smallest][0] THEN SET smallest TO right END IF

                IF smallest <> current THEN
                    SET tmp TO H[current]
                    SET H[current] TO H[smallest]
                    SET H[smallest] TO tmp
                    SET current TO smallest
                ELSE
                    BREAK
                END IF
            UNTIL FALSE
        END FUNCTION

        SET frequencyMap TO an empty map with default integer 0
        SET heapStorage TO empty list
        SET finalResults TO empty list

        FUNCTION innerProcessAt(x PARAMETER)
            SET n TO LENGTH(nums)
            IF x >= n THEN RETURN END IF
            SET item TO nums[x]
            SET times TO freq[x]
            SET frequencyMap[item] TO frequencyMap[item] + times
            CALL replicateHeapPush(heapStorage, PAIR(-frequencyMap[item], item))
            REPEAT
                IF LENGTH(heapStorage) = 0 THEN BREAK END IF
                SET topPair TO heapStorage[0]
                SET val FROM -topPair[0]
                SET key FROM topPair[1]
                IF frequencyMap[key] = val THEN
                    BREAK
                END IF
                CALL replicateHeapPop(heapStorage)
            UNTIL FALSE
            IF LENGTH(heapStorage) > 0 THEN
                APPEND -heapStorage[0][0] TO finalResults
            ELSE
                APPEND (0 * 1) TO finalResults
            END IF
            CALL innerProcessAt(x + 1)
        END FUNCTION

        CALL innerProcessAt(0)
        RETURN finalResults
    END FUNCTION
END CLASS