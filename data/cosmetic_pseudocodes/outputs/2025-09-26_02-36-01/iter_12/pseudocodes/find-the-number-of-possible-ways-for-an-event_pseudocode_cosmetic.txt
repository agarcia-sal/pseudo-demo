CLASS Solution  
    FUNCTION numberOfWays(n integer parameter, x integer parameter, y integer parameter) RETURNS integer  
        FUNCTION MulMod(a integer, b integer) RETURNS integer  
            SET result TO 0  
            SET base TO a MODULO (1000000007)  
            SET multiplier TO b MODULO (1000000007)  
            WHILE multiplier > 0  
                IF multiplier BITWISE-AND 1 != 0  
                    SET result TO (result + base) MODULO 1000000007  
                END IF  
                SET base TO (base + base) MODULO 1000000007  
                SET multiplier TO multiplier SHIFT-RIGHT 1  
            END WHILE  
            RETURN result  
        END FUNCTION  

        SET MODULO_VALUE TO 1000000000 + 7  
        SET matrix TO EMPTY LIST  
        SET index_outer TO 0  
        WHILE index_outer <= n  
            SET inner_list TO EMPTY LIST  
            SET index_inner TO 0  
            WHILE index_inner <= x  
                APPEND 0 TO inner_list  
                SET index_inner TO index_inner + 1  
            END WHILE  
            APPEND inner_list TO matrix  
            SET index_outer TO index_outer + 1  
        END WHILE  

        SET matrix[0][0] TO 1  

        SET loop_counter_n TO 1  
        WHILE loop_counter_n <= n  
            SET loop_counter_x TO 1  
            WHILE loop_counter_x <= x  
                SET term1 TO MulMod(matrix[loop_counter_n - 1][loop_counter_x], loop_counter_x)  
                SET term2 TO MulMod(matrix[loop_counter_n - 1][loop_counter_x - 1], (x - (loop_counter_x - 1)))  
                SET sum_terms TO (term1 + term2) MODULO MODULO_VALUE  
                SET matrix[loop_counter_n][loop_counter_x] TO sum_terms  
                SET loop_counter_x TO loop_counter_x + 1  
            END WHILE  
            SET loop_counter_n TO loop_counter_n + 1  
        END WHILE  

        SET result_value TO 0  
        SET power_accumulator TO 1  
        SET counter_j TO 1  

        LABEL accumulate_loop  
        IF counter_j > x THEN  
            GOTO end_accumulate  
        END IF  

        SET power_accumulator TO (power_accumulator * y) MODULO MODULO_VALUE  
        SET increment_value TO MulMod(matrix[n][counter_j], power_accumulator)  
        SET result_value TO (result_value + increment_value) MODULO MODULO_VALUE  
        SET counter_j TO counter_j + 1  

        GOTO accumulate_loop  
        LABEL end_accumulate  

        RETURN result_value  
    END FUNCTION  
END CLASS