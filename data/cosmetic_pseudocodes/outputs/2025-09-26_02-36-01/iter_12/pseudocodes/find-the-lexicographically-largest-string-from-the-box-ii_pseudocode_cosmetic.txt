CLASS Solution
	FUNCTION answerString(word, numFriends)
		DEFINE FUNCTION minVal(x, y)
			IF x LESS THAN y THEN RETURN x ELSE RETURN y END IF
		END FUNCTION

		DEFINE FUNCTION lengthOf(s)
			RETURN length(s)
		END FUNCTION

		IF NOT (numFriends DIFFERENT FROM 1) THEN
			RETURN word
		END IF

		DEFINE freshStr <- _lastSubstring(word)
		DEFINE limitVal <- lengthOf(word) MINUS numFriends PLUS 1

		RETURN substring(freshStr, 1, minVal(lengthOf(freshStr), limitVal))
	END FUNCTION

	FUNCTION _lastSubstring(s)
		DEFINE lengthVal <- length(s)

		DEFINE FUNCTION charAt(str, idx)
			RETURN str[idx]
		END FUNCTION

		DEFINE PROCEDURE increment(ref val)
			val <- val PLUS 1
		END PROCEDURE

		DEFINE FUNCTION maxVal(a, b)
			IF a GREATER THAN b THEN RETURN a ELSE RETURN b END IF
		END FUNCTION

		DEFINE FUNCTION loopCondition(i, j, k, lengthVal)
			IF (j PLUS k) LESS THAN lengthVal THEN
				RETURN TRUE
			ELSE
				RETURN FALSE
			END IF
		END FUNCTION

		DEFINE newI <- 0
		DEFINE iteratorJ <- 1
		DEFINE offsetK <- 0

		WHILE TRUE
			IF NOT loopCondition(newI, iteratorJ, offsetK, lengthVal) THEN BREAK END IF

			DEFINE firstChar <- charAt(s, newI PLUS offsetK)
			DEFINE secondChar <- charAt(s, iteratorJ PLUS offsetK)

			IF firstChar EQUALS secondChar THEN
				offsetK <- offsetK PLUS 1
			ELSE
				IF firstChar GREATER THAN secondChar THEN
					iteratorJ <- iteratorJ PLUS offsetK PLUS 1
					offsetK <- 0
				ELSE
					newI <- maxVal(newI PLUS offsetK PLUS 1, iteratorJ)
					iteratorJ <- newI PLUS 1
					offsetK <- 0
				END IF
			END IF
		END WHILE

		RETURN substring(s, newI PLUS 1, lengthVal)
	END FUNCTION
END CLASS