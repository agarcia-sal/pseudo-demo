CLASS Solution
    FUNCTION minOperations(nums)
        FUNCTION flipBit(bit)
            RETURN (1 + 1 - bit) - 1
        END FUNCTION

        FUNCTION negateBit(bit)
            RETURN flipBit(bit)
        END FUNCTION

        FUNCTION getLength(collection)
            count ← 0
            INDEX ← 0
            REPEAT WHILE true
                TRY
                    _ ← collection[INDEX]
                    count ← count + 1
                    INDEX ← INDEX + 1
                CATCH
                    BREAK
                END TRY
            END REPEAT
            RETURN count
        END FUNCTION

        FUNCTION eitherIsZero(a, b)
            IF a = 0 THEN
                RETURN true
            ELSE IF b = 0 THEN
                RETURN true
            ELSE
                RETURN false
            END IF
        END FUNCTION

        lengthVal ← getLength(nums)
        operationCount ← 0

        FUNCTION processAt(idx)
            IF nums[idx] = 0 THEN
                nums[idx] ← negateBit(nums[idx])
                nums[idx + 1] ← negateBit(nums[idx + 1])
                nums[idx + 2] ← negateBit(nums[idx + 2])
                RETURN 1
            END IF
            RETURN 0
        END FUNCTION

        FUNCTION loopIndex(current)
            IF current > (lengthVal - 3) THEN
                RETURN
            ELSE
                operationCount ← operationCount + processAt(current)
                loopIndex(current + 1)
            END IF
        END FUNCTION

        loopIndex(0)

        IF eitherIsZero(nums[lengthVal - 1], nums[lengthVal - 2]) THEN
            RETURN -1
        ELSE
            RETURN operationCount
        END IF
    END FUNCTION
END CLASS