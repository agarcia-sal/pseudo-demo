claSS Solution
    funCtion minimumDifference(nums, k)
        funCtion ComputeOrBetweenIndices(aIndex, bIndex)
            declare acc as integer = 0
            declare cursor as integer = aIndex
            WHILE cursor <= bIndex
                acc = acc BITWISE_OR nums[cursor]
                cursor = cursor + 1
            END WHILE
            RETURN acc
        END funCtion

        declare lengthOfNums as integer = LENGTH(nums)
        declare smallestDifference as real = (1.0 / 0.0)

        declare leftPointer as integer = 0
        REPEAT
            declare rollingOR as integer = 0
            declare rightPointer as integer = leftPointer
            WHILE rightPointer < lengthOfNums
                rollingOR = rollingOR BITWISE_OR nums[rightPointer]
                declare currentDifference as real = (k - rollingOR)
                IF currentDifference < 0 THEN
                    currentDifference = currentDifference * -1
                END IF
                IF currentDifference < smallestDifference THEN
                    smallestDifference = currentDifference
                END IF
                IF currentDifference = 0 THEN
                    RETURN 0
                END IF
                rightPointer = rightPointer + 1
            END WHILE
            leftPointer = leftPointer + 1
        UNTIL leftPointer >= lengthOfNums

        RETURN smallestDifference
    end funCtion
end claSS