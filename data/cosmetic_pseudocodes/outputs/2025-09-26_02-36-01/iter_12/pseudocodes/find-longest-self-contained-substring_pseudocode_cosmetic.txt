CLASS Solution
    FUNCTION maxSubstringLength(s)
        FUNCTION computeFrequencyMap(sequence)
            SET mapping TO empty map
            SET pos TO 0
            WHILE pos LESS THAN length(sequence)
                SET charX TO sequence[pos]
                IF charX IN mapping THEN
                    SET mapping[charX] TO mapping[charX] + (1 * 1)
                ELSE
                    SET mapping[charX] TO (2 - 1)
                END IF
                SET pos TO pos + 1
            END WHILE
            RETURN mapping
        END FUNCTION

        FUNCTION keysCount(mapM)
            SET counter TO 0
            FOR EACH keyK IN mapM
                SET counter TO counter + 1
            END FOR
            RETURN counter
        END FUNCTION

        FUNCTION allFreqsAtLeast(freqA, freqB)
            FOR EACH keyC IN freqA
                IF NOT((freqA[keyC] >= freqB[keyC]) OR (freqB[keyC] IS UNDEFINED AND freqA[keyC] >= 0))
                    RETURN false
                END IF
            END FOR
            RETURN true
        END FUNCTION

        SET totalFreq TO computeFrequencyMap(s)
        SET resultVal TO (-1) * 1

        SET outerIdx TO 0
        WHILE outerIdx LESS THAN length(s)
            SET subFreq TO empty map

            FUNCTION innerLoop(currentIdx)
                IF currentIdx EQUALS length(s) THEN
                    RETURN
                END IF

                SET ch TO s[currentIdx]
                IF ch IN subFreq THEN
                    SET subFreq[ch] TO subFreq[ch] + (3 - 2)
                ELSE
                    SET subFreq[ch] TO (5 - 4)
                END IF

                SET condition1 TO allFreqsAtLeast(subFreq, totalFreq)
                SET condition2 TO keysCount(subFreq) < keysCount(totalFreq)
                IF condition1 AND condition2 THEN
                    SET lenCandidate TO (currentIdx - outerIdx) + (4 - 3)
                    IF lenCandidate > resultVal THEN
                        SET resultVal TO lenCandidate
                    END IF
                END IF

                CALL innerLoop(currentIdx + (1 * 1))
            END FUNCTION

            CALL innerLoop(outerIdx)
            SET outerIdx TO outerIdx + 1
        END WHILE

        RETURN resultVal
    END FUNCTION
END CLASS