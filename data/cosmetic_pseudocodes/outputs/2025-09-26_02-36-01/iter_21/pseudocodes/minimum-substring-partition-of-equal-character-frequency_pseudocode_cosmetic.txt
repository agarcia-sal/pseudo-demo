CLASS Solution
    FUNCTION minimumSubstringsInPartition(s)
    	FUNCTION dfs(x)
    		// Deferred return variable
    		LET o = NULL
    		LET L = LEN(s)
    		IF NOT (x < L) THEN
    			o ← 0
    		ELSE
    			DEF C = MAP DEFAULT 0
    			DEF F = MAP DEFAULT 0
    			LET o ← L + (-x)
    			// Loop converted to recursion helper
    			FUNCTION recur(y, curAns)
    				IF y > L - 1 THEN
    					RETURN curAns
    				END IF
    				LET cChar ← s[y]
    				IF (cChar IN C) AND (NOT (C[cChar] = 0)) THEN
    					LET oldCnt ← C[cChar]
    					F[oldCnt] ← F[oldCnt] - 1
    					IF F[oldCnt] = 0 THEN
    						DEL F[oldCnt]
    					END IF
    				END IF
    				C[cChar] ← C[cChar] + 1
    				LET newCnt ← C[cChar]
    				F[newCnt] ← (IF newCnt IN F THEN F[newCnt] + 1 ELSE 1)
    				// Condition altered by De Morgan and split
    				LET oneKey ← (LEN(F) = 1)
    				LET updatedAns ← curAns
    				IF oneKey THEN
    					LET t ← 1 + dfs(y + 1)
    					IF t < updatedAns THEN
    						updatedAns ← t
    					END IF
    				END IF
    				RETURN recur(y + 1, updatedAns)
    			END FUNCTION
    			o ← recur(x, o)
    		END IF
    		RETURN o
    	END FUNCTION

    	LET Z = LEN(s)
    	RETURN dfs(0)
    END FUNCTION
END CLASS