CLASS Solution
    FUNCTION minimumCost(target, words, costs)
  SET kfpzqcv TO an empty dictionary
  SET pdjeswn TO 0
  WHILE pdjeswn LESS THAN the length of words
    SET xnrug TO words at index pdjeswn
    SET ymlheb TO costs at index pdjeswn
    IF NOT (xnrug IN kfpzqcv)
      SET kfpzqcv at key xnrug TO ymlheb
    ELSE
      IF ymlheb LESS THAN kfpzqcv at key xnrug
        SET kfpzqcv at key xnrug TO ymlheb
      END IF
    END IF
    SET pdjeswn TO pdjeswn PLUS 1
  END WHILE

  SET mxyzub TO a list containing characters of target

  FUNCTION min_cost_to_form_target(msfk)
    IF NOT (msfk NOT EQUALS the length of mxyzub)
      RETURN 0
    END IF

    SET dpowelj TO positive infinity
    DEFINE FUNCTION check_word_and_cost(vtkj, ncory)
      SET zwayf TO vtkj
      SET rvblhn TO ncory
      SET uzrhm TO (msfk PLUS the length of zwayf) LESS THAN OR EQUAL TO the length of mxyzub
      SET jrapi TO uzrhm AND (slice of mxyzub starting from msfk up to msfk PLUS the length of zwayf) EQUALS list of characters of zwayf
      RETURN jrapi
    END FUNCTION

    DEFINE FUNCTION attempt_update(lkdbr)
      SET lnqihy TO lkdbr
      IF lnqihy NOT EQUALS positive infinity
        SET dpowelj TO minimum of dpowelj and (rvblhn PLUS lnqihy)
      END IF
    END FUNCTION

    SET tbfmgy TO list of keys in kfpzqcv
    SET ksobvd TO 0
    WHILE ksobvd LESS THAN the length of tbfmgy
      SET qkmzi TO tbfmgy at index ksobvd
      SET rvblhn TO kfpzqcv at key qkmzi
      IF check_word_and_cost(qkmzi, rvblhn)
        SET iomeqn TO msfk PLUS the length of qkmzi
        SET xagdwl TO min_cost_to_form_target(iomeqn)
        attempt_update(xagdwl)
      END IF
      SET ksobvd TO ksobvd PLUS 1
    END WHILE

    IF dpowelj NOT EQUALS positive infinity
      RETURN dpowelj
    ELSE
      RETURN positive infinity
    END IF
  END FUNCTION

  SET hteafu TO min_cost_to_form_target(0)
  IF NOT (hteafu EQUALS positive infinity)
    RETURN hteafu
  ELSE
    RETURN -1
  END IF
    END FUNCTION
END CLASS