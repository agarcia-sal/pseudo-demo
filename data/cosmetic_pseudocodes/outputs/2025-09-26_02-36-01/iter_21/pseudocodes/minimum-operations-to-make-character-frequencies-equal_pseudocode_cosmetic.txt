CLASS Solution
	FUNCTION makeStringGood(s)
		SET a0 TO a list of twenty six zeros
		SET j4 TO 0
		WHILE j4 < LENGTH OF s
			SET W7 TO ORD(s[j4]) - ORD('a')
			SET a0[W7] TO a0[W7] + 1
			SET j4 TO j4 + 1
		END WHILE

		SET pR TO a0[0]
		SET hasBeenSet TO FALSE
		SET Ev TO pR
		FUNCTION _minVal(x, y)
			IF x < y THEN RETURN x ELSE RETURN y END IF
		END FUNCTION

		FUNCTION _callForTarget(targ)
			RETURN _getMinOperations(a0, targ)
		END FUNCTION

		FUNCTION helperMax(lst)
			SET idx TO 0
			SET maxVal TO lst[0]
			SET idxTemp TO 1
			WHILE idxTemp < LENGTH OF lst
				IF lst[idxTemp] > maxVal THEN
					SET maxVal TO lst[idxTemp]
				END IF
				SET idxTemp TO idxTemp + 1
			END WHILE
			RETURN maxVal
		END FUNCTION

		SET maxCount TO helperMax(a0)
		SET k9 TO 1
		WHILE k9 <= maxCount
			SET Rn TO _callForTarget(k9)
			IF hasBeenSet = FALSE THEN
				SET Ev TO Rn
				SET hasBeenSet TO TRUE
			ELSE
				SET Ev TO _minVal(Ev, Rn)
			END IF
			SET k9 TO k9 + 1
		END WHILE
		RETURN Ev
	END FUNCTION

	FUNCTION _getMinOperations(count, target)
		FUNCTION _minVal(a, b)
			IF a < b THEN RETURN a ELSE RETURN b END IF
		END FUNCTION

		SET Gz TO a list of twenty seven zeros
		SET wP TO 25
		WHILE wP >= 0
			SET d2 TO count[wP]
			IF target > count[wP] THEN
				SET dx TO target - count[wP]
			ELSE
				SET dx TO count[wP] - target
			END IF

			SET Lr TO _minVal(d2, dx + Gz[wP + 1])

			IF wP + 1 < 26 AND count[wP + 1] < target THEN
				SET y1 TO target - count[wP + 1]
				IF count[wP] <= target THEN
					SET mV TO count[wP]
				ELSE
					SET mV TO count[wP] - target
				END IF

				IF y1 > mV THEN
					SET Gv TO mV + (y1 - mV)
				ELSE
					SET Gv TO y1 + (mV - y1)
				END IF

				SET Lr TO _minVal(Lr, Gv + Gz[wP + 2])
			END IF
			SET Gz[wP] TO Lr
			SET wP TO wP - 1
		END WHILE
		RETURN Gz[0]
	END FUNCTION
END CLASS