CLASS Solution
	FUNCTION minimumCost(m n horizontalCut verticalCut)
		PROCEDURE descendSort(arr)
			DEFINE recursiveSort(x y)
				IF y GREATER THAN 0
					IF arr[y - 1] LESS THAN arr[y]
						SET temp TO arr[y - 1]
						SET arr[y - 1] TO arr[y]
						SET arr[y] TO temp
						CALL recursiveSort(x y - 1)
					ELSE
						CALL recursiveSort(x y - 1)
					END IF
				END IF
			END PROCEDURE
			LET idx BE LENGTH OF arr MINUS 1
			REPEAT
				SET swapped TO false
				SET k TO 0
				REPEAT UNTIL k GREATER THAN idx MINUS 1
					IF arr[k] LESS THAN arr[k + 1]
						SET tempSwap TO arr[k]
						SET arr[k] TO arr[k + 1]
						SET arr[k + 1] TO tempSwap
						SET swapped TO true
					END IF
					INCREMENT k BY 1
				END REPEAT
				DECREMENT idx BY 1
			UNTIL swapped EQUALS false
		END PROCEDURE

		CALL descendSort(horizontalCut)
		CALL descendSort(verticalCut)

		SET result TO 0
		SET alpha TO 0
		SET beta TO 0
		SET gamma TO 1
		SET delta TO 1

		DEFINE repeatCondition() RETURNS BOOLEAN
			RETURN (alpha LESS THAN m MINUS 1) OR (beta LESS THAN n MINUS 1)
		END DEFINE

		REPEAT
			SET condFirst TO (beta EQUALS n MINUS 1)
			SET condSecond TO (alpha LESS THAN m MINUS 1)
			SET condThird TO (horizontalCut[alpha] GREATER THAN verticalCut[beta])
			SET combinedCond TO condFirst OR (condSecond AND condThird)
			IF combinedCond
				SET tempCalc TO horizontalCut[alpha] MULTIPLIED BY delta
				SET result TO result PLUS tempCalc
				SET gamma TO gamma PLUS 1
				SET alpha TO alpha PLUS 1
			ELSE
				SET tempCalc2 TO verticalCut[beta] MULTIPLIED BY gamma
				SET result TO result PLUS tempCalc2
				SET delta TO delta PLUS 1
				SET beta TO beta PLUS 1
			END IF
		UNTIL NOT repeatCondition()

		RETURN result
	END FUNCTION
END CLASS