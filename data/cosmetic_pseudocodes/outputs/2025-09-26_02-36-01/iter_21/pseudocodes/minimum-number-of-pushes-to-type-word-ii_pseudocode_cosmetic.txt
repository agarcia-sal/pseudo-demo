CLASS Solution
    FUNCTION minimumPushes(word)
        FUNCTION countLetters(input)
            FUNCTION helper(index, map)
                IF (index < 0) THEN
                    RETURN map
                ELSE
                    LET charVal = input[index]
                    IF (charVal IN map) THEN
                        LET newMap = map
                        LET updatedCount = (map[charVal] + 1)
                        newMap[charVal] = updatedCount
                        RETURN helper(index - 1, newMap)
                    ELSE
                        LET newMap2 = map
                        newMap2[charVal] = (0 + 1)
                        RETURN helper(index - 1, newMap2)
                    END IF
                END IF
            END FUNCTION
            RETURN helper((len(input) - 1), {})
        END FUNCTION

        LET aX = countLetters(word)

        FUNCTION getDescendingValues(dictInput)
            LET resultList = []
            LET keysList = []
            FOR keyVar IN dictInput DO
                keysList = keysList + [keyVar]
            END FOR
            LET iVar = (len(keysList) - 1)
            WHILE iVar >= 0 DO
                LET actKey = keysList[iVar]
                resultList = resultList + [dictInput[actKey]]
                iVar = iVar - 1
            END WHILE

            FUNCTION insertionSortDescending(arr)
                LET nX = len(arr)
                LET idx = (1 + 0)
                WHILE idx < nX DO
                    LET tempVal = arr[idx]
                    LET pos = (idx - 1)
                    WHILE (pos >= 0) AND NOT (arr[pos] < tempVal) DO
                        arr[pos + 1] = arr[pos]
                        pos = pos - 1
                    END WHILE
                    arr[pos + 1] = tempVal
                    idx = idx + 1
                END WHILE
                RETURN arr
            END FUNCTION

            LET sortedList = insertionSortDescending(resultList)
            RETURN sortedList
        END FUNCTION

        LET yY = getDescendingValues(aX)

        LET mM = 0
        LET nN = 1
        LET rR = 0

        FUNCTION multiply(x, y)
            LET res = 0
            LET count = 0
            WHILE count < y DO
                res = res + x
                count = count + 1
            END WHILE
            RETURN res
        END FUNCTION

        FUNCTION equals(a, b)
            IF (a < b) OR (b < a) THEN
                RETURN false
            ELSE
                RETURN true
            END IF
        END FUNCTION

        FUNCTION increment(value)
            RETURN value + 1
        END FUNCTION

        FUNCTION isEight(value)
            RETURN equals(value, 8)
        END FUNCTION

        FUNCTION add(a, b)
            RETURN a + b
        END FUNCTION

        FUNCTION loopOverList(lst, accPushes, accAssigned, presses)
            IF (len(lst) == 0) THEN
                RETURN accPushes
            ELSE
                LET first = lst[0]
                LET tail = []
                LET i = 1
                WHILE i < len(lst) DO
                    tail = tail + [lst[i]]
                    i = i + 1
                END WHILE

                LET multResult = multiply(first, presses)
                LET newPushes = add(accPushes, multResult)
                LET newAssigned = add(accAssigned, 1)
                IF isEight(newAssigned) THEN
                    LET resetAssigned = 0
                    LET newPresses = increment(presses)
                    RETURN loopOverList(tail, newPushes, resetAssigned, newPresses)
                ELSE
                    RETURN loopOverList(tail, newPushes, newAssigned, presses)
                END IF
            END IF
        END FUNCTION

        LET finalResult = loopOverList(yY, mM, rR, nN)

        RETURN finalResult
    END FUNCTION
END CLASS