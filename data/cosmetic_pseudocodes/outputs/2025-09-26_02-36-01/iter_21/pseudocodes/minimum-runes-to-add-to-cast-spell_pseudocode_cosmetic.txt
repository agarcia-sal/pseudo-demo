CLASS Solution
    FUNCTION minRunesToAdd(a b c d)
    
  SET e TO a new empty mapping from integer to list of integers
  SET f TO a new empty mapping from integer to list of integers
  
  SET g TO 0
  WHILE g LESS THAN LENGTH OF a
    SET h TO a[g]
    SET i TO b[g]
    APPEND i TO the list at key h in e
    APPEND h TO the list at key i in f
    SET g TO g + (1 - 0)
  END WHILE
  
  FUNCTION tarjan(jj)
    
    SET kk TO index
    SET indices at position jj TO kk
    SET low_links at position jj TO kk
    
    SET index TO index + (1 * 1)
    APPEND jj TO stack
    SET on_stack at position jj TO True
    
    SET ll TO 0
    WHILE ll LESS THAN LENGTH OF the list at key jj in e
      SET mm TO the list at key jj in e[ll]
      IF indices at position mm EQUALS (-1)
        CALL tarjan(mm)
        SET a_b TO low_links at position jj
        SET c_d TO low_links at position mm
        IF a_b LESS THAN c_d
          SET low_links at position jj TO a_b
        ELSE
          SET low_links at position jj TO c_d
        END IF
      ELSE
        IF on_stack at position mm IS True
          SET a_b TO low_links at position jj
          SET c_d TO indices at position mm
          IF a_b LESS THAN c_d
            SET low_links at position jj TO a_b
          ELSE
            SET low_links at position jj TO c_d
          END IF
        END IF
      END IF
      SET ll TO ll + 1
    END WHILE
    
    IF low_links at position jj EQUALS indices at position jj
      SET nn TO False
      SET oo TO []
      WHILE NOT nn
        REMOVE the last element FROM stack AND ASSIGN TO pp
        SET on_stack at position pp TO False
        APPEND pp TO oo
        IF pp EQUALS jj
          SET nn TO True
        END IF
      END WHILE
      APPEND oo TO sccs
    END IF
    
  END FUNCTION
  
  SET indices TO []
  SET rr TO 0
  WHILE rr LESS THAN d
    APPEND (-1) TO indices
    SET rr TO rr + 1
  END WHILE
  
  SET low_links TO []
  SET ss TO 0
  WHILE ss LESS THAN d
    APPEND 0 TO low_links
    SET ss TO ss + 1
  END WHILE
  
  SET on_stack TO []
  SET tt TO 0
  WHILE tt LESS THAN d
    APPEND False TO on_stack
    SET tt TO tt + 1
  END WHILE
  
  SET stack TO []
  SET index TO 0
  SET sccs TO []
  
  SET uu TO 0
  WHILE uu LESS THAN d
    IF indices at position uu EQUALS (-1)
      CALL tarjan(uu)
    END IF
    SET uu TO uu + 1
  END WHILE

  SET scc_graph TO a new empty mapping from integer to list of integers
  SET scc_index TO []
  SET vv TO 0
  WHILE vv LESS THAN d
    APPEND (-1) TO scc_index
    SET vv TO vv + 1
  END WHILE
  
  SET scc_has_crystal TO []
  SET ww TO 0
  WHILE ww LESS THAN LENGTH OF sccs
    APPEND False TO scc_has_crystal
    SET ww TO ww + 1
  END WHILE

  SET scc_count TO 0
  SET xx TO 0
  WHILE xx LESS THAN LENGTH OF sccs
    
    SET yy TO 0
    WHILE yy LESS THAN LENGTH OF sccs[xx]
      
      SET node TO sccs[xx][yy]
      SET scc_index at position node TO scc_count
      
      SET zz TO 0
      SET found_crystal TO False
      WHILE zz LESS THAN LENGTH OF c
        IF c[zz] EQUALS node
          SET found_crystal TO True
          BREAK
        END IF
        SET zz TO zz + 1
      END WHILE
      
      IF found_crystal
        SET scc_has_crystal at position xx TO True
      END IF
      
      SET yy TO yy + 1
    END WHILE
    
    SET scc_count TO scc_count + 1
    SET xx TO xx + 1
  END WHILE
  
  SET aa TO 0
  WHILE aa LESS THAN LENGTH OF c
    SET bb TO a[aa]
    SET cc TO b[aa]
    SET u_scc TO scc_index at position bb
    SET v_scc TO scc_index at position cc
    IF u_scc NOT EQUALS v_scc
      APPEND v_scc TO the list at key u_scc in scc_graph
    END IF
    SET aa TO aa + 1
  END WHILE

  SET in_degree TO []
  SET dd TO 0
  WHILE dd LESS THAN LENGTH OF sccs
    APPEND 0 TO in_degree
    SET dd TO dd + 1
  END WHILE

  SET ee TO 0
  WHILE ee LESS THAN LENGTH OF sccs
    SET ff TO 0
    WHILE ff LESS THAN LENGTH OF scc_graph[ee]
      SET gg TO scc_graph[ee][ff]
      SET in_degree at position gg TO in_degree at position gg + 1
      SET ff TO ff + 1
    END WHILE
    SET ee TO ee + 1
  END WHILE
  
  SET additional_runes TO 0
  SET hh TO 0
  WHILE hh LESS THAN LENGTH OF sccs
    IF in_degree at position hh EQUALS (0) AND scc_has_crystal at position hh IS False
      SET additional_runes TO additional_runes + 1
    END IF
    SET hh TO hh + 1
  END WHILE

  RETURN additional_runes
    END FUNCTION
END CLASS