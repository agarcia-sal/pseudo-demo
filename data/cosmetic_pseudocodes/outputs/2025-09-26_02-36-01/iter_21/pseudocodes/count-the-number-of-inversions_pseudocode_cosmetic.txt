CLASS Solution
    FUNCTION numberOfPermutations(n, requirements)
            SET MOD TO 7 PLUS ((10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10))
            SET req_dict TO {}
            
            FUNCTION insertPairs(lst)
                IF lst IS EMPTY THEN RETURN END IF
                SET a TO lst[0][0]
                SET b TO lst[0][1]
                SET req_dict[a] TO b
                CALL insertPairs(lst SLICE FROM 1 TO END)
            END FUNCTION
            CALL insertPairs(requirements)
            
            FUNCTION count_permutations(aa, bb, cc)
                IF aa EQUALS n THEN
                    IF bb EQUALS (IF req_dict CONTAINS KEY n THEN req_dict[n]-1 ELSE 0) THEN
                        RETURN 1
                    ELSE RETURN 0 END IF
                END IF
                
                IF aa GREATER_THAN 0 THEN
                    IF NOT(bb EQUALS (IF req_dict CONTAINS KEY aa THEN req_dict[aa]-1 ELSE bb)) THEN
                        RETURN 0
                    END IF
                END IF
                
                SET dd TO 0
                SET ee TO 0
                WHILE ee LESS_THAN n DO
                    IF (cc BITWISE_AND (1 LEFT_SHIFT ee)) EQUALS 0 THEN
                        SET ff TO bb
                        SET gg TO ee + 1
                        WHILE gg LESS_THAN n DO
                            IF (cc BITWISE_AND (1 LEFT_SHIFT gg)) NOT_EQUALS 0 THEN
                                SET ff TO ff + 1
                            END IF
                            SET gg TO gg + 1
                        END WHILE
                        SET hh TO count_permutations(aa + 1, ff, cc BITWISE_OR (1 LEFT_SHIFT ee))
                        SET dd TO (dd + hh) MOD MOD
                    END IF
                    SET ee TO ee + 1
                END WHILE
                RETURN dd
            END FUNCTION
            
            RETURN count_permutations(0, 0, 0)
    END FUNCTION
END CLASS