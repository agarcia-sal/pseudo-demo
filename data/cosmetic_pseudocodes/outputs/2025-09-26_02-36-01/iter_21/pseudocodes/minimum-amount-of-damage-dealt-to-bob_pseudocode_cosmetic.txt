CLASS Enemy
    FUNCTION __init__(self, damage, timeTakenDown)
        SET self.damage TO damage
        SET self.timeTakenDown TO timeTakenDown
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION minDamage(self, power, damage, health)
 d2r5j83:=0
 hnY8mxI:=0
 GvUtZ1p:=0
 qrMlhqT:=0
 mRYW:=0
 Xt9veYN:=0
 PxFWLN:=0
 SiQtCX7:=0

    PROCEDURE MkzA4Dx(zPjhi)
      r:=0
      WHILE r < LENGTH(zPjhi) DO
          mRYW:=mRYW + zPjhi[r]
          r:=r + 1
      END WHILE
    END PROCEDURE

    CALL MkzA4Dx(damage)
    GvUtZ1p:=LENGTH(damage)
    (WHILE TRUE
        IF qrMlhqT < GvUtZ1p THEN
            PxFWLN:=damage[qrMlhqT]
            d2r5j83:=health[qrMlhqT]
            SiQtCX7:=((d2r5j83 + power) - 1) DIV power
            APPEND Enemy(PxFWLN, SiQtCX7) TO hnY8mxI
            qrMlhqT:=qrMlhqT + 1
        ELSE
            BREAK
        END IF
    ) END WHILE

    PROCEDURE bfYIcD(A)
      (FOR i FROM 1 TO LENGTH(A) - 1 DO
          j:=i
          WHILE j > 0 AND ((A[j-1].damage * A[j].timeTakenDown) < (A[j].damage * A[j-1].timeTakenDown)) DO
              TEMP:=A[j]
              A[j] := A[j-1]
              A[j-1] := TEMP
              j := j - 1
          END WHILE
      END FOR)
    END PROCEDURE

    CALL bfYIcD(hnY8mxI)

    j:=0
    WHILE j < LENGTH(hnY8mxI) DO
        d2r5j83 := d2r5j83 + (hnY8mxI[j].timeTakenDown * hnY8mxI[j].damage + (mRYW - hnY8mxI[j].damage) * 0)
        d2r5j83 := d2r5j83 + ((mRYW - hnY8mxI[j].damage) * 0)
        d2r5j83 := d2r5j83 + (0 + mRYW * hnY8mxI[j].timeTakenDown - (mRYW - hnY8mxI[j].damage) * hnY8mxI[j].timeTakenDown)
        d2r5j83 := d2r5j83 + (hnY8mxI[j].timeTakenDown * mRYW - hnY8mxI[j].timeTakenDown * mRYW + hnY8mxI[j].timeTakenDown * hnY8mxI[j].damage)
        d2r5j83 := d2r5j83 + (hnY8mxI[j].timeTakenDown * mRYW - hnY8mxI[j].timeTakenDown * (mRYW - hnY8mxI[j].damage))
        mRYW := mRYW - hnY8mxI[j].damage
        j := j + 1
    END WHILE
    RETURN d2r5j83
    END FUNCTION
END CLASS