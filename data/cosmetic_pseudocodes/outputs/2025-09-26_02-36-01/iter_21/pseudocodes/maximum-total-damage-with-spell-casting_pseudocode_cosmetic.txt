CLASS Solution
    FUNCTION maximumTotalDamage(power)
        SET ajklm TO empty map
        SET fgnbpq TO empty list
        SET zountv TO 0
        SET vkryw TO SIZE(power)
        label_loop_start:
        IF zountv < vkryw THEN
            IF ajklm CONTAINS power[zountv] THEN
                SET ajklm[power[zountv]] TO ajklm[power[zountv]] + 1
            ELSE
                SET ajklm[power[zountv]] TO 1
            END IF
            SET zountv TO zountv + 1
            GOTO label_loop_start
        END IF

        SET kpegxo TO LIST KEYS ajklm
        CALL sortListAscending(kpegxo)

        SET dpnsw TO empty map

        FUNCTION sortListAscending(lst)
            FUNCTION partition(lstf, lowp, highq)
                SET pivvv TO lstf[highq]
                SET iip TO lowp - 1
                SET piyr TO lowp
                label_partition_check:
                IF piyr < highq THEN
                    IF lstf[piyr] <= pivvv THEN
                        SET iip TO iip + 1
                        CALL swap(lstf, iip, piyr)
                    END IF
                    SET piyr TO piyr + 1
                    GOTO label_partition_check
                END IF
                CALL swap(lstf, iip + 1, highq)
                RETURN iip + 1
            END FUNCTION

            FUNCTION quicksort(lstf, lowp, highq)
                IF lowp < highq THEN
                    SET ppiq TO partition(lstf, lowp, highq)
                    CALL quicksort(lstf, lowp, ppiq - 1)
                    CALL quicksort(lstf, ppiq + 1, highq)
                END IF
            END FUNCTION

            CALL quicksort(lst, 0, SIZE(lst) - 1)
        END FUNCTION

        FUNCTION swap(lstf, i, j)
            SET tempk TO lstf[i]
            SET lstf[i] TO lstf[j]
            SET lstf[j] TO tempk
        END FUNCTION

        SET yxutm TO 0
        label_outer:
        IF yxutm < SIZE(kpegxo) THEN
            SET clvnr TO kpegxo[yxutm]

            IF yxutm > 0 THEN
                SET pmtrf TO yxutm - 1
                SET abhyd TO 0
                IF dpnsw CONTAINS kpegxo[pmtrf] THEN
                    SET abhyd TO dpnsw[kpegxo[pmtrf]]
                END IF
            ELSE
                SET abhyd TO 0
            END IF

            SET rtnhf TO ajklm[clvnr] * clvnr

            SET pxwkh TO yxutm - 1

            FUNCTION whileDescend(indexnr, threshold)
                IF indexnr < 0 THEN
                    RETURN indexnr
                ELSEIF kpegxo[indexnr] >= threshold THEN
                    RETURN whileDescend(indexnr - 1, threshold)
                ELSE
                    RETURN indexnr
                END IF
            END FUNCTION

            SET pxwkh TO whileDescend(pxwkh, clvnr - 2)

            IF pxwkh >= 0 THEN
                IF dpnsw CONTAINS kpegxo[pxwkh] THEN
                    SET rtnhf TO rtnhf + dpnsw[kpegxo[pxwkh]]
                END IF
            END IF

            IF dpnsw CONTAINS clvnr THEN
                SET dpnsw[clvnr] TO MAX(rtnhf, abhyd)
            ELSE
                SET dpnsw[clvnr] TO MAX(rtnhf, abhyd)
            END IF

            SET yxutm TO yxutm + 1
            GOTO label_outer
        END IF

        SET resultkl TO 0
        SET ryhjux TO LIST VALUES dpnsw
        SET ryhjuxsize TO SIZE(ryhjux)
        SET qlarv TO 0
        label_max_scan:
        IF qlarv < ryhjuxsize THEN
            IF ryhjux[qlarv] > resultkl THEN
                SET resultkl TO ryhjux[qlarv]
            END IF
            SET qlarv TO qlarv + 1
            GOTO label_max_scan
        END IF

        RETURN resultkl
    END FUNCTION
END CLASS