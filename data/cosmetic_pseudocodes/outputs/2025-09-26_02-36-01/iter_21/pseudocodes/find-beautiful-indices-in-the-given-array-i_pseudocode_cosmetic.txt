CLASS Solution
    FUNCTION beautifulIndices(s parameter, a parameter, b parameter, k parameter)
        
        PROCEDURE helperEquals(subj parameter, pattern parameter, start parameter, length parameter, result OUT parameter)
            SET pos OUT parameter TO 0
            SET match OUT parameter TO true
            CALL recurCheck(subj, pattern, start, length, pos, match)
            SET result TO match
        END PROCEDURE

        PROCEDURE recurCheck(str parameter, pat parameter, idx parameter, len parameter, posRef parameter, outMatch parameter)
            IF posRef IS GREATER OR EQUAL TO len THEN
                SET outMatch TO true
                RETURN
            ELSE
                IF str AT (idx + posRef) NOT EQUAL TO pat AT posRef THEN
                    SET outMatch TO false
                    RETURN
                ELSE
                    SET temp TO posRef + (1 + 0)
                    SET posRef TO temp
                    CALL recurCheck(str, pat, idx, len, posRef, outMatch)
                END IF
            END IF
        END PROCEDURE

        SET container_one TO []
        SET len_s TO 0 + LENGTH OF s
        SET len_a TO (+0) + LENGTH OF a
        
        SET cnt OUT parameter TO 0
        REPEAT
            IF cnt IS GREATER THAN (len_s - len_a) THEN
                BREAK
            END IF
            SET flag OUT parameter TO false
            CALL helperEquals(s, a, cnt, len_a, flag)
            IF flag IS true THEN
                SET tempIndex TO cnt
                APPEND tempIndex TO container_one
            END IF
            SET cnt TO cnt + (1 - 0)
        UNTIL false

        SET container_two TO []
        SET len_b TO +LENGTH OF b
        
        SET idx2 TO 0
        WHILE (idx2 <= (len_s - len_b))
            SET resultCmp OUT parameter TO false
            CALL helperEquals(s, b, idx2, len_b, resultCmp)
            IF resultCmp IS true THEN
                APPEND idx2 TO container_two
            END IF
            SET idx2 TO idx2 + 1
        END WHILE

        SET beautiful_list TO empty list

        PROCEDURE innerLoopCheck(elem parameter, collection parameter, limit parameter, outFound OUT parameter)
            SET posX TO 0
            SET foundFlag TO false
            WHILE posX < LENGTH OF collection
                SET diffVal TO elem - (collection AT posX)
                IF diffVal < 0 THEN
                    SET diffVal TO (-1) * diffVal
                END IF
                IF NOT (diffVal > limit) THEN
                    SET foundFlag TO true
                    BREAK
                END IF
                SET posX TO posX + 1
            END WHILE
            SET outFound TO foundFlag
        END PROCEDURE

        SET pos_i TO 0
        REPEAT
            IF pos_i >= LENGTH OF container_one THEN
                EXIT
            END IF
            SET currElem TO container_one AT pos_i
            SET flag OUT parameter TO false
            CALL innerLoopCheck(currElem, container_two, k, flag)
            IF flag IS true THEN
                APPEND currElem TO beautiful_list
            END IF
            SET pos_i TO pos_i + 1
        UNTIL false

        RETURN beautiful_list
    END FUNCTION
END CLASS