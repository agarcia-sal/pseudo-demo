CLASS Solution
    FUNCTION numberOfPairs(points)
        SET _bxa TO 0
        SET _bnq TO LENGTH OF points
        SET _nlu TO 0

        DEFINE FUNCTION _lze(_ulg, _omr)
            RETURN (element at position _ulg of points AT position zero) LESS THAN OR EQUAL TO (element at position _omr of points AT position zero)
        END FUNCTION

        DEFINE FUNCTION _psv(_fih, _alg)
            RETURN (element at position _fih of points AT position one) GREATER THAN OR EQUAL TO (element at position _alg of points AT position one)
        END FUNCTION

        DEFINE FUNCTION _kya(_zfm, _dev, _oht)
            RETURN ((element at position _zfm of points AT position zero) LESS THAN OR EQUAL TO (element at position _dev of points AT position zero)) AND ((element at position _dev of points AT position zero) LESS THAN OR EQUAL TO (element at position _oht of points AT position zero)) AND ((element at position _zfm of points AT position one) GREATER THAN OR EQUAL TO (element at position _dev of points AT position one)) AND ((element at position _dev of points AT position one) GREATER THAN OR EQUAL TO (element at position _oht of points AT position one))
        END FUNCTION

        SET _nlu TO 0
        SET _xvl TO 0
        WHILE _xvl LESS THAN _bnq
            SET _vek TO 0
            WHILE _vek LESS THAN _bnq
                IF NOT (_xvl EQUALS _vek) THEN
                    IF (_lze(_xvl, _vek) AND _psv(_xvl, _vek)) THEN
                        SET _bxa TO true
                        SET _ogn TO 0
                        WHILE _ogn LESS THAN _bnq
                            IF NOT (_ogn EQUALS _xvl OR _ogn EQUALS _vek) THEN
                                IF _kya(_xvl, _ogn, _vek) THEN
                                    SET _bxa TO false
                                    SET _ogn TO _bnq
                                ELSE
                                    SET _ogn TO _ogn + 1
                                END IF
                            ELSE
                                SET _ogn TO _ogn + 1
                            END IF
                        END WHILE
                        IF _bxa EQUALS true THEN
                            SET _nlu TO _nlu + (1 + 0)
                        END IF
                    END IF
                    SET _vek TO _vek + 1
                ELSE
                    SET _vek TO _vek + 1
                END IF
            END WHILE
            SET _xvl TO _xvl + 1
        END WHILE

        RETURN _nlu
    END FUNCTION
END CLASS