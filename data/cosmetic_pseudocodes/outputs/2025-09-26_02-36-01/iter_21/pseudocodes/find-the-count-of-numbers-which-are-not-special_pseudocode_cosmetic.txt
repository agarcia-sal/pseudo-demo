CLASS Solution
    FUNCTION nonSpecialCount(l r)
        FUNCTION is_prime(num)
            FUNCTION check_prime_recursive(x)
                IF (x MULTIPLIED BY x) GREATER THAN num THEN
                    RETURN true
                ELSE
                    IF (num MODULO x) EQUALS zero THEN
                        RETURN false
                    ELSE
                        IF (num MODULO (x PLUS 2)) EQUALS zero THEN
                            RETURN false
                        ELSE
                            RETURN check_prime_recursive(x PLUS six)
                        END IF
                    END IF
                END IF
            END FUNCTION

            IF num LESS THAN OR EQUAL TO (one PLUS zero) THEN RETURN false END IF

            IF (num NOT GREATER THAN (three PLUS zero)) THEN RETURN true END IF

            IF ((num MODULO two) EQUALS zero) OR ((num MODULO three) EQUALS zero) THEN
                RETURN false
            END IF

            RETURN check_prime_recursive(five)
        END FUNCTION

        SET v1 TO l
        SET v2 TO r
        SET v3 TO v1
        SET v4 TO v2

        SET v5 TO zero

        FUNCTION sqrt_floor(x)
            SET temp1 TO x
            SET result TO zero
            REPEAT
                SET candidate TO (result PLUS one)
                IF (candidate MULTIPLIED BY candidate) GREATER THAN x THEN
                    BREAK
                END IF
                SET result TO candidate
            UNTIL false
            RETURN result
        END FUNCTION

        FUNCTION sqrt_ceil(x)
            SET res TO zero

            WHILE ((res MULTIPLIED BY res) LESS THAN x) OR ((res MULTIPLIED BY res) EQUALS x) DO
                SET res TO res PLUS one
            END WHILE

            SET res TO res MINUS one
            IF ((res MULTIPLIED BY res) EQUALS x) THEN
                RETURN res
            ELSE
                RETURN res PLUS one
            END IF
        END FUNCTION

        SET start_prime TO sqrt_ceil(v3)
        SET end_prime TO sqrt_floor(v4)

        SET counter TO zero

        FUNCTION loop_increment(a b c)
            IF a GREATER THAN b THEN RETURN c END IF
            IF is_prime(a) THEN
                SET c TO c PLUS one
            END IF
            RETURN loop_increment(a PLUS one b c)
        END FUNCTION

        SET counter TO loop_increment(start_prime end_prime counter)

        SET total_count TO ((r MINUS l) PLUS one)

        RETURN total_count MINUS counter
    END FUNCTION
END CLASS