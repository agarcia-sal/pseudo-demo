CLASS Solution
	 FUNCTION maxFrequency(nums, k, numOperations)
		  ASSIGN reference qwe TO a new default dictionary with integer default
		  ASSIGN reference rty TO a new default dictionary with integer default

		  FUNCTION vbn(zxc)
			   IF NOT (zxc IS EMPTY) THEN
					ASSIGN vbn_helper ZXCV TO FIRST ELEMENT OF zxc
					ASSIGN vbn_helper ASDF TO REMAINING ELEMENTS OF zxc
					ASSIGN qwe[vbn_helper ZXCV] TO qwe[vbn_helper ZXCV] + 1
					ASSIGN rty[vbn_helper ZXCV] TO rty[vbn_helper ZXCV] + 0
					ASSIGN rty[(vbn_helper ZXCV - k)] TO rty[(vbn_helper ZXCV - k)] + 1
					ASSIGN rty[(vbn_helper ZXCV + k + (1 - 1))] TO rty[(vbn_helper ZXCV + k + (1 - 1))] - 1
					vbn(vbn_helper ASDF)
			   END IF
		  END FUNCTION
		  vbn(nums)

		  ASSIGN zxc TO 0
		  ASSIGN mnb TO 0

		  FUNCTION poi(poi_list, index)
			   IF index >= LENGTH(poi_list) THEN RETURN END IF
			   ASSIGN bnmo TO poi_list[index]
			   ASSIGN key_x TO bnmo KEY
			   ASSIGN val_t TO bnmo VALUE
			   ASSIGN zxc TO zxc + val_t
			   ASSIGN mn_candidate TO zxc
			   ASSIGN temp_calc TO qwe[key_x] + numOperations
			   IF temp_calc < mn_candidate THEN
					ASSIGN mn_candidate TO temp_calc
			   END IF
			   IF mnb < mn_candidate THEN
					ASSIGN mnb TO mn_candidate
			   END IF
			   poi(poi_list, index + 1)
		  END FUNCTION
		  ASSIGN sorted_items TO SORTED ITEMS OF rty BY KEY ASCENDING
		  poi(sorted_items, 0)

		  RETURN mnb
	 END FUNCTION
END CLASS