CLASS Solution
    FUNCTION findPermutation(nums)
  FUNCTION u70(k4x, m9z)
    IF NOT (k4x XOR ( (1 << LENGTH(nums)) - 1 )) THEN
         RETURN ( pre0 := m9z - nums[0]; (pre0 < 0) * (-pre0) + (pre0 >= 0) * pre0 )
    END IF
    SET v32 TO +âˆž
    SET idx TO 0
    WHILE idx < LENGTH(nums)
      IF ((k4x >> idx) & 1) = 0 THEN
        SET wv TO m9z - nums[idx]
        SET ua TO (wv < 0) * (-wv) + (wv >= 0) * wv
        SET ua TO ua + u70(k4x | (1 << idx), idx)
        IF ua < v32 THEN
              v32 := ua
        END IF
      END IF
      idx := idx + 1
    END WHILE
    RETURN v32
  END FUNCTION

  PROCEDURE kz(k4x, m9z)
   CALL ans.PUSH(m9z)
   IF (k4x XOR ( (1 << LENGTH(nums)) - 1 )) = 0 THEN RETURN END IF
   SET v32 TO u70(k4x, m9z)
   SET curi TO 0
   REPEAT
     IF ((k4x >> curi) & 1) = 0 THEN
       SET wv TO m9z - nums[curi]
       SET ua TO (wv < 0) * (-wv) + (wv >= 0) * wv
       SET ua := ua + u70(k4x | (1 << curi), curi)
       IF ua = v32 THEN
         CALL kz(k4x | (1 << curi), curi)
         LEAVE
       END IF
     END IF
     curi := curi + 1
   UNTIL curi >= LENGTH(nums)
  END PROCEDURE

  SET ans TO []
  CALL kz(1 << 0, 0)
  RETURN ans
END FUNCTION
END CLASS