CLASS Solution
    FUNCTION minMoves(rooks)
        SET A TO LENGTH(rooks)
        DEFINE FUNCTION absVal(num)
            IF (num < 0)
                RETURN 0 - num
            ELSE
                RETURN num
            END IF
        END FUNCTION

        CALL PROCEDURE sortByFirstElement(input, output)
            SET B TO LENGTH(input)
            IF (B < 2)
                SET output TO input
                RETURN
            END IF
            SET C TO B / 2
            DEFINE ARRAY leftPart
            DEFINE ARRAY rightPart
            CALL PROCEDURE sliceArray(input, 0, C, leftPart)
            CALL PROCEDURE sliceArray(input, C, B, rightPart)
            CALL PROCEDURE sortByFirstElement(leftPart, leftPart)
            CALL PROCEDURE sortByFirstElement(rightPart, rightPart)
            CALL PROCEDURE mergeSorted(leftPart, rightPart, output, 1)
        END PROCEDURE

        CALL PROCEDURE sortBySecondElement(input, output)
            SET D TO LENGTH(input)
            IF (D < 2)
                SET output TO input
                RETURN
            END IF
            SET E TO D / 2
            DEFINE ARRAY leftSide
            DEFINE ARRAY rightSide
            CALL PROCEDURE sliceArray(input, 0, E, leftSide)
            CALL PROCEDURE sliceArray(input, E, D, rightSide)
            CALL PROCEDURE sortBySecondElement(leftSide, leftSide)
            CALL PROCEDURE sortBySecondElement(rightSide, rightSide)
            CALL PROCEDURE mergeSorted(rightSide, leftSide, output, 2)
        END PROCEDURE

        CALL PROCEDURE sliceArray(arr, startIndex, endIndex, result)
            DEFINE ARRAY temp
            SET F TO startIndex
            WHILE (F < endIndex)
                ADD arr[F] TO temp
                SET F TO F + 1
            END WHILE
            SET result TO temp
        END PROCEDURE

        CALL PROCEDURE mergeSorted(arr1, arr2, mergedResult, keyIndex)
            DEFINE ARRAY merged
            SET G TO 0
            SET H TO 0
            WHILE NOT (G >= LENGTH(arr1) AND H >= LENGTH(arr2))
                IF (G >= LENGTH(arr1))
                    ADD arr2[H] TO merged
                    SET H TO H + 1
                ELSE IF (H >= LENGTH(arr2))
                    ADD arr1[G] TO merged
                    SET G TO G + 1
                ELSE IF (arr1[G][keyIndex] <= arr2[H][keyIndex])
                    ADD arr1[G] TO merged
                    SET G TO G + 1
                ELSE
                    ADD arr2[H] TO merged
                    SET H TO H + 1
                END IF
            END WHILE
            SET mergedResult TO merged
        END PROCEDURE

        DEFINE ARRAY Q
        DEFINE ARRAY R
        CALL sortByFirstElement(rooks, Q)
        CALL sortBySecondElement(rooks, R)

        SET I TO 0
        SET S TO 0
        FUNCTION computeRowMoves()
            IF (I >= A)
                RETURN 0
            ELSE
                SET diff1 TO Q[I][1] - I
                SET absDiff1 TO absVal(diff1)
                SET I TO I + 1
                RETURN absDiff1 + computeRowMoves()
            END IF
        END FUNCTION

        SET I TO 0
        FUNCTION computeColMoves()
            IF (I >= A)
                RETURN 0
            ELSE
                SET diff2 TO R[I][2] - I
                SET absDiff2 TO absVal(diff2)
                SET I TO I + 1
                RETURN absDiff2 + computeColMoves()
            END IF
        END FUNCTION

        SET S TO computeRowMoves()
        SET I TO 0
        SET T TO computeColMoves()

        RETURN S + T
    END FUNCTION
END CLASS