CLASS Solution
    FUNCTION numberOfPairs(nums1, nums2, k)
       DEFINE procedureHelperToCount(arr) RETURNS map
          INITIALIZE indexTracker TO 0
          INITIALIZE accumulatorMap TO empty map
          REPEAT
             IF indexTracker GREATER OR EQUAL TO LENGTH(arr)
                EXIT
             END IF
             IF accumulatorMap CONTAINS_KEY arr[indexTracker]
                SET tempCount TO accumulatorMap[arr[indexTracker]]
                SET accumulatorMap[arr[indexTracker]] TO tempCount + (1 * 1)
             ELSE
                SET accumulatorMap[arr[indexTracker]] TO (0 + 1)
             END IF
             SET indexTracker TO indexTracker + 1
          END REPEAT
          RETURN accumulatorMap
       END DEFINE

       SET tempMap TO procedureHelperToCount(nums2)
       SET intermediateResult TO (0 + 0)
       DEFINE innerRecursiveProcedure(currentIndexOuter)
          IF currentIndexOuter GREATER OR EQUAL TO LENGTH(nums1)
             RETURN
          END IF
          SET tempOuter TO nums1[currentIndexOuter]
          DEFINE innerIterator(currentIndexInner)
             IF currentIndexInner GREATER OR EQUAL TO SIZE_OF(tempMap)
                RETURN
             END IF
             DEFINE keySetList AS LIST_OF_KEYS(tempMap)
             SET tempKey TO keySetList[currentIndexInner]
             SET tempVal TO tempMap[tempKey]
             SET conditionLeft TO ((tempOuter MOD ((tempKey * k) * 1)) EQUAL TO 0)
             IF (conditionLeft OR FALSE) AND NOT (NOT (conditionLeft))
                SET intermediateResult TO intermediateResult + tempVal
             END IF
             innerIterator(currentIndexInner + 1)
          END DEFINE
          innerIterator(0)
          innerRecursiveProcedure(currentIndexOuter + 1)
       END DEFINE

       innerRecursiveProcedure(0)
       RETURN intermediateResult
    END FUNCTION
END CLASS