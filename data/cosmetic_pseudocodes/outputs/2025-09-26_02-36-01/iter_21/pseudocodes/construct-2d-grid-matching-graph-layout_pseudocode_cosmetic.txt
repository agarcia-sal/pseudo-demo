CLASS Solution
    FUNCTION constructGridLayout(n, edges)
      SET A TO a list of length n, each element an empty list
      SET B TO 0
      WHILE B < LENGTH(edges)
        SET C TO ELEMENT AT position B of edges
        SET D TO ELEMENT AT position 0 of C
        SET E TO ELEMENT AT position 1 of C
        APPEND E TO ELEMENT AT position D of A
        APPEND D TO ELEMENT AT position E of A
        SET B TO B + 1
      END WHILE

      SET F TO a list of length 5, all elements initialized to (0 - 1)
      SET G TO 0
      REPEAT
        EXIT WHEN G >= LENGTH(A)
        SET H TO ELEMENT AT position G of A
        SET I TO LENGTH(H)
        SET ELEMENT AT position I of F TO G
        SET G TO G + 1
      UNTIL FALSE

      SET J TO (ELEMENT AT position 1 of F)
      SET K TO (0 - 1)
      IF NOT(J = K) THEN
        SET L TO a list containing J
      ELSE
        IF (ELEMENT AT position 4 of F) = K THEN
          SET M TO ELEMENT AT position 2 of F
          SET N TO 0
          WHILE N < LENGTH(ELEMENT AT position M of A)
            SET O TO ELEMENT AT position N of ELEMENT AT position M of A
            IF LENGTH(ELEMENT AT position O of A) = 2 THEN
              SET L TO [M, O]
              BREAK
            END IF
            SET N TO N + 1
          END WHILE
        ELSE
          SET P TO ELEMENT AT position 2 of F
          SET L TO [P]
          SET Q TO P
          SET R TO ELEMENT AT position 0 of ELEMENT AT position P of A
          SET S TO TRUE
          WHILE S
            IF LENGTH(ELEMENT AT position R of A) <= 2 THEN
              SET S TO FALSE
            ELSE
              APPEND R TO L
              SET T TO 0
              SET U TO FALSE
              WHILE NOT U AND T < LENGTH(ELEMENT AT position R of A)
                SET V TO ELEMENT AT position T of ELEMENT AT position R of A
                IF NOT (V = Q) AND LENGTH(ELEMENT AT position V of A) < 4 THEN
                  SET Q TO R
                  SET R TO V
                  SET U TO TRUE
                END IF
                SET T TO T + 1
              END WHILE
            END IF
          END WHILE
          APPEND R TO L
        END IF
      END IF

      SET W TO [L]
      SET X TO a list of length n, all elements false
      SET Y TO 0
      SET Z TO ( (n DIVIDE_BY LENGTH(L)) - 1 )
      REPEAT
        EXIT WHEN Y > Z
        SET AA TO 0
        WHILE AA < LENGTH(L)
          SET AB TO ELEMENT AT position AA of L
          SET ELEMENT AT position AB of X TO true
          SET AA TO AA + 1
        END WHILE

        SET AC TO []
        SET AD TO 0
        WHILE AD < LENGTH(L)
          SET AE TO ELEMENT AT position AD of L
          SET AF TO 0
          SET AG TO false
          WHILE NOT AG AND AF < LENGTH(ELEMENT AT position AE of A)
            SET AH TO ELEMENT AT position AF of ELEMENT AT position AE of A
            IF ELEMENT AT position AH of X = false THEN
              APPEND AH TO AC
              SET AG TO true
            END IF
            SET AF TO AF + 1
          END WHILE
          SET AD TO AD + 1
        END WHILE

        APPEND AC TO W
        SET L TO AC
        SET Y TO Y + 1
      UNTIL FALSE

      RETURN W
    END FUNCTION
END CLASS