CLASS Solution
	FUNCTION maxScore(grid)
		DECLARE a1 AS INTEGER := LENGTH OF grid
		DECLARE a2 AS INTEGER := LENGTH OF element at position zero of grid
		PROCEDURE initList(x, y)
			RETURN LIST OF x ELEMENTS EACH CONTAINING LIST OF y ELEMENTS SET TO (1.0 / 0.0)
		END PROCEDURE

		PROCEDURE minValue(p, q)
			IF p < q THEN
				RETURN p
			ELSE
				RETURN q
			END IF
		END PROCEDURE

		PROCEDURE maxValue(p, q)
			IF p > q THEN RETURN p ELSE RETURN q END IF
		END PROCEDURE

		DECLARE b1 AS LIST := initList(a1, a2)
		ASSIGN element at position zero of element at position zero of b1 TO element at position zero of element at position zero of grid
		
		DECLARE y1 AS INTEGER := 1
		WHILE y1 < a2 DO
			ASSIGN element at position y1 of element at position zero of b1 TO minValue(element at position (y1 - 1) of element at position zero of b1, element at position y1 of element at position zero of grid)
			y1 := y1 + 1
		END WHILE

		DECLARE x1 AS INTEGER := 1
		WHILE x1 < a1 DO
			ASSIGN element at position x1 of element at position zero of b1 TO minValue(element at position (x1 - 1) of element at position zero of b1, element at position x1 of element at position zero of grid)
			x1 := x1 + 1
		END WHILE

		DECLARE x2 AS INTEGER := 1
		DECLARE maxTemp AS REAL := - (1.0 / 0.0)
		REPEAT
			IF NOT (x2 < a1) THEN BREAK END IF
			DECLARE y2 AS INTEGER := 1
			REPEAT
				IF NOT (y2 < a2) THEN BREAK END IF
				ASSIGN element at position y2 of element at position x2 of b1 TO minValue(element at position y2 of element at position (x2 - 1) of b1, element at position (y2 - 1) of element at position x2 of b1)
				DECLARE val1 AS REAL := element at position y2 of element at position x2 of grid
				DECLARE val2 AS REAL := element at position y2 of element at position x2 of b1
				DECLARE diffVal AS REAL := val1 + (-1) * val2
				maxTemp := maxValue(maxTemp, diffVal)
				y2 := y2 + 1
			UNTIL FALSE
			x2 := x2 + 1
		UNTIL FALSE

		RETURN maxTemp
	END FUNCTION
END CLASS