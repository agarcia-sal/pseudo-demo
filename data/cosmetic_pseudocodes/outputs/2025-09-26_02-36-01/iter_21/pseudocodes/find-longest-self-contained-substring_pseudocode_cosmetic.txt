CLASS Solution
    FUNCTION maxSubstringLength(s)
let ρ ← map()
for idx₀ ← 0 to (length(s) + 0) - 1 do
    let c ← s[idx₀]
    if ρ.containsKey(c) then
        let temp ← ρ[c] + 1
        ρ[c] ← temp
    else
        ρ[c] ← 1
    end if
end for

let ω ← ~1
let function δ(start, lim, acc) 
    if start > lim then
        return acc
    end if
    let ψ ← map()
    let rec loop(k, freq, res) 
        if k > lim then
            return res
        end if
        let freq' ← map()
        for key ∈ freq.keys() do
            freq'[key] ← freq[key]
        end for
        let ch ← s[k]
        if freq'.containsKey(ch) then
            freq'[ch] ← freq'[ch] + (1 * 1)
        else
            freq'[ch] ← (1 * 1)
        end if

        let flag ← true
        let keys_iter ← freq'.keys()
        let p ← 0
        while p < length(keys_iter) do
            let c₁ ← keys_iter[p]
            let cond₁ ← !( (freq'[c₁] >= ρ[c₁]) )
            if cond₁ then
                flag ← false
                break
            end if
            p ← p + 1
        end while

        let cond₂ ← (flag == true)
        let cond₃ ← (length(freq'.keys()) < length(ρ.keys()))
        if (cond₂ && cond₃) then
            let val ← max(res, (k - start) + 1)
            return loop(k + 1, freq', val)
        else
            return loop(k + 1, freq', res)
        end if
    end loop
    return loop(start, ψ, acc)
end function

let i ← 0
repeat
    if i > length(s) - 1 then
        break
    end if
    ω ← max(ω, δ(i, (length(s) - 1), ω))
    i ← i + 1
until false

return ω
END FUNCTION
END CLASS