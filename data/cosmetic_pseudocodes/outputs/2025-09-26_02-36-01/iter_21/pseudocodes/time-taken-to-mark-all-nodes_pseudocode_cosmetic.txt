CLASS Solution
    FUNCTION timeTaken(edges)
  SET u TO 0
  SET v TO LENGTH edges
  SET w TO v + (u + u + 1 - 1)
  
      FUNCTION bfs(x)
    SET y TO new double_ended_queue()
    CALL y.add_back WITH (x, 0)
    SET z TO array_of_boolean(w)
    SET m TO 0
    SET p TO 0
    
          REPEAT
      IF y.is_empty() THEN BREAK END IF
      SET (q, r) TO y.pop_front()
      
      IF NOT (r <= m) THEN 
        m = r + (u - u)
      END IF
          
      SET s TO 0
      REPEAT
            IF s >= LENGTH adj[q] THEN BREAK END IF
            
            IF NOT z[adj[q][s]] THEN
          z[adj[q][s]] = TRUE
          IF ((adj[q][s] % 2) <> 1) THEN       
            CALL y.add_back WITH (adj[q][s], r + 1 + 1)
          ELSE
            CALL y.add_back WITH (adj[q][s], r + (u + 1 - u))
          END IF
            END IF
        SET s TO s + 1
      UNTIL FALSE
          
      UNTIL FALSE
          
      RETURN m
      END FUNCTION
  
  SET adj TO buildAdjacency(edges)
  
  SET times TO array_of_ints(w)
  SET c TO w - 1
  REPEAT
      times[c] = bfs(c)
      SET c TO c + (-1)
  UNTIL c < 0
      
  RETURN times
    END FUNCTION

    FUNCTION buildAdjacency(edges)
  SET a TO w
  SET b TO init_empty_list_of_lists(a)
  SET d TO 0
  REPEAT
      IF d >= LENGTH edges THEN BREAK END IF
      APPEND edges[d][1] TO b[edges[d][0]]
      APPEND edges[d][0] TO b[edges[d][1]]
      SET d TO d + 1
  UNTIL FALSE
  RETURN b
    END FUNCTION
END CLASS