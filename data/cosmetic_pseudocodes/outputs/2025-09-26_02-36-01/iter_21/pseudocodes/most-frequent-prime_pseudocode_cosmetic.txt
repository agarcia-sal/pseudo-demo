FUNCTION is_prime(alpha)  
  SET beta TO false  
  IF NOT (alpha GREATER THAN one) THEN  
    SET beta TO false  
  ELSE  
    IF alpha LESS THAN OR EQUAL TO three THEN  
      SET beta TO true  
    ELSE  
      IF (alpha MODULO two NOT EQUALS zero) AND (alpha MODULO three NOT EQUALS zero) THEN  
        SET gamma TO five  
        FUNCTION recur(delta)  
          IF delta MULTIPLIED BY delta GREATER THAN alpha THEN  
            RETURN true  
          ELSE  
            IF (alpha MODULO delta EQUALS zero) OR (alpha MODULO (delta + 2) EQUALS zero) THEN  
              RETURN false  
            ELSE  
              RETURN recur(delta + 6)  
            END IF  
          END IF  
        END FUNCTION  
        SET beta TO recur(gamma)  
      ELSE  
        SET beta TO false  
      END IF  
    END IF  
  END IF  
  RETURN beta  
END FUNCTION  

CLASS Solution  
  FUNCTION mostFrequentPrime(mu)  
    SET nu TO LENGTH OF mu  
    SET xi TO LENGTH OF mu AT INDEX zero  
    SET omega TO LIST OF [(-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1)]  
    SET sigma TO EMPTY MAP FROM ELEMENT TO INTEGER  

    FUNCTION walk(a1, a2, a3, a4, a5)  
      SET b1 TO a1 + a3  
      SET b2 TO a2 + a4  
      IF (b1 GREATER THAN OR EQUAL TO zero) AND (b1 LESS THAN nu) AND (b2 GREATER THAN OR EQUAL TO zero) AND (b2 LESS THAN xi) THEN  
        SET c1 TO (a5 MULTIPLIED BY (five + five)) + mu AT INDEX b1 AT INDEX b2  
        IF c1 GREATER THAN (five + five) AND is_prime(c1) THEN  
          IF c1 IN sigma THEN  
            SET sigma[c1] TO sigma[c1] + 1  
          ELSE  
            SET sigma[c1] TO one  
          END IF  
        END IF  
        CALL walk(b1, b2, a3, a4, c1)  
      END IF  
    END FUNCTION  

    SET i TO zero  
    REPEAT  
      IF i GREATER THAN OR EQUAL TO nu THEN  
        BREAK  
      END IF  
      SET j TO zero  
      REPEAT  
        IF j GREATER THAN OR EQUAL TO xi THEN  
          BREAK  
        END IF  
        SET idx TO zero  
        REPEAT  
          IF idx GREATER THAN OR EQUAL TO LENGTH OF omega THEN  
            BREAK  
          END IF  
          SET dx TO omega AT INDEX idx AT INDEX zero  
          SET dy TO omega AT INDEX idx AT INDEX one  
          CALL walk(i, j, dx, dy, mu AT INDEX i AT INDEX j)  
          SET idx TO idx + 1  
        UNTIL false  
        SET j TO j + 1  
      UNTIL false  
      SET i TO i + 1  
    UNTIL false  

    IF LENGTH OF sigma EQUALS zero THEN  
      RETURN -1  
    ELSE  
      SET result TO null  
      SET max_pair TO (-1, -1)  
      FOR EACH key IN sigma KEYS  
        SET current_pair TO (sigma[key], key)  
        IF (current_pair AT INDEX zero GREATER THAN max_pair AT INDEX zero) OR  
           ((current_pair AT INDEX zero EQUALS max_pair AT INDEX zero) AND (current_pair AT INDEX one GREATER THAN max_pair AT INDEX one)) THEN  
          SET max_pair TO current_pair  
          SET result TO key  
        END IF  
      END FOR  
      RETURN result  
    END IF  
  END FUNCTION  
END CLASS