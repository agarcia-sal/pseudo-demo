```pseudocode
CLASS Solution
    FUNCTION medianOfUniquenessArray(nums)
        FUNCTION computeCountThreshold(limit)
            SET accumulator TO 0
            SET start_index TO 0
            ASSIGN freq_map TO new empty map with default zero values
            SET unique_counter TO 0
            SET current_index TO 0
            REPEAT
                IF freq_map[nums[current_index]] EQUALS 0 THEN
                    SET unique_counter TO unique_counter PLUS 1
                END IF
                SET freq_map[nums[current_index]] TO freq_map[nums[current_index]] PLUS 1

                WHILE unique_counter GREATER THAN limit DO
                    SET freq_map[nums[start_index]] TO freq_map[nums[start_index]] MINUS 1
                    IF freq_map[nums[start_index]] EQUALS 0 THEN
                        SET unique_counter TO unique_counter MINUS 1
                    END IF
                    SET start_index TO start_index PLUS 1
                END WHILE

                SET accumulator TO accumulator PLUS (current_index MINUS start_index) PLUS 1
                SET current_index TO current_index PLUS 1
            UNTIL current_index GREATER THAN nums.length MINUS 1
            RETURN accumulator
        END FUNCTION

        SET length_val TO nums.length
        SET total_subs TO (length_val TIMES (length_val PLUS 1)) DIVIDED BY 2
        SET median_idx TO (total_subs PLUS 1) DIVIDED BY 2
        SET lower_bound TO 1
        SET upper_bound TO length_val

        PROCEDURE binarySearch()
            WHILE lower_bound LESS THAN upper_bound DO
                SET mid_point TO (lower_bound PLUS upper_bound) DIVIDED BY 2
                IF computeCountThreshold(mid_point) LESS THAN median_idx THEN
                    SET lower_bound TO mid_point PLUS 1
                ELSE
                    SET upper_bound TO mid_point
                END IF
            END WHILE
        END PROCEDURE

        CALL binarySearch()
        RETURN lower_bound
    END FUNCTION
END CLASS
```