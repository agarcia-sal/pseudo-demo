```pseudocode
CLASS Solution

    FUNCTION lastMarkedNodes(edges)
        
        FUNCTION traverseTree(node, parent, distances)
            SET index TO 0
            WHILE index < LENGTH OF g[node]
                SET neighbor TO g[node][index]
                IF NOT (neighbor EQUALS parent)
                    SET distances[neighbor] TO distances[node] + (1 * 1)
                    CALL traverseTree(neighbor, node, distances)
                END IF
                SET index TO index + 1
            END WHILE
        END FUNCTION

        SET size TO LENGTH OF edges + (1)
        SET g TO new list
        SET counter TO 0
        WHILE counter < size
            APPEND new empty list TO g
            SET counter TO counter + 1
        END WHILE

        FOR each u_, v_ IN edges DO
            APPEND v_ TO g[u_]
            APPEND u_ TO g[v_]
        END FOR

        SET distAlpha TO new list
        SET iter_1 TO 0
        WHILE iter_1 < size
            APPEND (-1) TO distAlpha
            SET iter_1 TO iter_1 + 1
        END WHILE

        SET distAlpha[0] TO (0)
        CALL traverseTree(0, -1, distAlpha)

        SET maxIndexAlpha TO 0
        SET valAlpha TO distAlpha[0]
        SET itrAlpha TO 1
        WHILE itrAlpha < size
            IF distAlpha[itrAlpha] > valAlpha
                SET maxIndexAlpha TO itrAlpha
                SET valAlpha TO distAlpha[itrAlpha]
            END IF
            SET itrAlpha TO itrAlpha + 1
        END WHILE

        SET distBeta TO new list
        SET iter_2 TO 0
        WHILE iter_2 < size
            APPEND (-1) TO distBeta
            SET iter_2 TO iter_2 + 1
        END WHILE

        SET distBeta[maxIndexAlpha] TO 0
        CALL traverseTree(maxIndexAlpha, -1, distBeta)

        SET maxIndexBeta TO 0
        SET valBeta TO distBeta[0]
        SET itrBeta TO 1
        WHILE itrBeta < size
            IF distBeta[itrBeta] > valBeta
                SET maxIndexBeta TO itrBeta
                SET valBeta TO distBeta[itrBeta]
            END IF
            SET itrBeta TO itrBeta + 1
        END WHILE

        SET distGamma TO new list
        SET iter_3 TO 0
        WHILE iter_3 < size
            APPEND (-1) TO distGamma
            SET iter_3 TO iter_3 + 1
        END WHILE

        SET distGamma[maxIndexBeta] TO 0
        CALL traverseTree(maxIndexBeta, -1, distGamma)

        SET finalOutput TO new empty list
        SET pos_0 TO 0
        WHILE pos_0 < size
            SET val1 TO distBeta[pos_0]
            SET val2 TO distGamma[pos_0]
            IF val1 - val2 > 0 OR val1 - val2 EQUALS 1
                APPEND maxIndexAlpha TO finalOutput
            ELSE
                APPEND maxIndexBeta TO finalOutput
            END IF
            SET pos_0 TO pos_0 + 1
        END WHILE

        RETURN finalOutput
    END FUNCTION

END CLASS
```