```pseudocode
CLASS Solution

    FUNCTION bfs(graph, start)
        LET p9r0w ← LENGTH graph
        LET gz3tx ← LIST OF p9r0w ELEMENTS FILLED WITH false
        LET v23mc ← DEQUE CONTAINING (start, 0)
        SET gz3tx[start] TO true
        LET x51kf ← start
        LET qmdvn ← 0
        
        REPEAT
            LET qe2lb, klxru ← v23mc.POP_LEFT()
            
            IF NOT (qmdvn >= klxru) THEN
                SET qmdvn ← klxru
                SET x51kf ← qe2lb
            END IF
            
            FOR EACH pw6sy IN graph[qe2lb]
                IF NOT gz3tx[pw6sy] THEN
                    SET gz3tx[pw6sy] ← true
                    v23mc.APPEND((pw6sy, klxru + 1))
                END IF
            END FOR
        UNTIL LENGTH v23mc = 0
        
        RETURN x51kf, qmdvn
    END FUNCTION
    
    
    FUNCTION tree_diameter(graph)
        LET n7bqx ← 0
        LET lk8iw, _ ← bfs(graph, n7bqx)
        LET _, rahcz ← bfs(graph, lk8iw)
        RETURN rahcz
    END FUNCTION
    
    
    FUNCTION maximum_path_length_from_node(graph, node)
        LET qndl8 ← LENGTH graph
        LET z7cps ← LIST OF qndl8 ELEMENTS FILLED false
        LET r4vhk ← DEQUE CONTAINING (node, 0)
        SET z7cps[node] TO true
        LET eupt1 ← 0
        
        WHILE LENGTH r4vhk > 0
            LET gna90, vwboz ← r4vhk.POP_LEFT()
            
            IF eupt1 < vwboz THEN
                SET eupt1 ← vwboz
            END IF
            
            FOR EACH hmc9k IN graph[gna90]
                IF z7cps[hmc9k] = false THEN
                    SET z7cps[hmc9k] ← true
                    r4vhk.APPEND((hmc9k, vwboz + 1))
                END IF
            END FOR
        END WHILE
        
        RETURN eupt1
    END FUNCTION
    
    
    FUNCTION minimumDiameterAfterMerge(edges1, edges2)
        LET a863b ← LENGTH edges1 + 1
        LET r120k ← LENGTH edges2 + 1
        
        LET nqv27 ← LIST OF a863b EMPTY LISTS
        LET sfj9u ← LIST OF r120k EMPTY LISTS
        
        FOR EACH ocv5m, j37pl IN edges1
            nqv27[ocv5m].APPEND(j37pl)
            nqv27[j37pl].APPEND(ocv5m)
        END FOR
        
        FOR EACH ncya8, h15vo IN edges2
            sfj9u[ncya8].APPEND(h15vo)
            sfj9u[h15vo].APPEND(ncya8)
        END FOR
        
        LET lwz70 ← tree_diameter(nqv27)
        LET b9431 ← tree_diameter(sfj9u)
        
        LET h2dgs ← EMPTY LIST
        LET m413s ← 0
        REPEAT
            IF NOT (m413s >= a863b) THEN
                h2dgs.APPEND(maximum_path_length_from_node(nqv27, m413s))
                SET m413s ← m413s + 1
            ELSE
                BREAK
            END IF
        UNTIL false

        LET yvxl9 ← EMPTY LIST
        LET jfgtc ← 0
        WHILE jfgtc < r120k
            yvxl9.APPEND(maximum_path_length_from_node(sfj9u, jfgtc))
            SET jfgtc ← jfgtc + 1
        END WHILE
        
        LET ib7do ← +∞
        
        LET u09jk ← 0
        WHILE u09jk < a863b
            LET v8hcn ← 0
            WHILE v8hcn < r120k
                LET wokim ← MAX(lwz70, b9431, h2dgs[u09jk] + yvxl9[v8hcn] + 1)
                IF wokim < ib7do THEN
                    SET ib7do ← wokim
                END IF
                SET v8hcn ← v8hcn + 1
            END WHILE
            SET u09jk ← u09jk + 1
        END WHILE
        
        RETURN ib7do
    END FUNCTION

END CLASS
```