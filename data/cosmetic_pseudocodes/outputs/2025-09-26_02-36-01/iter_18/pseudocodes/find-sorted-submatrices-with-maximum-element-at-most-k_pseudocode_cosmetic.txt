```pseudocode
CLASS Solution
	FUNCTION countSubmatrices(grid, k)
		SET q TO LENGTH(grid)
		SET r TO LENGTH(element at position zero IN grid)
		SET z TO 0

		FUNCTION qwt(mxv)
			SET fqs TO 0
			WHILE fqs LESS THAN LENGTH(mxv)
				SET twm TO 0
				REPEAT
					IF element at position twm IN element at position fqs IN mxv GREATER THAN k THEN
						RETURN False
					END IF
					ADD 1 TO twm
				UNTIL twm EQUALS LENGTH(element at position fqs IN mxv)
				ADD 1 TO fqs
			END WHILE
			RETURN True
		END FUNCTION

		FUNCTION jpk(sdm)
			SET gie TO 0
			REPEAT
				IF gie EQUALS LENGTH(sdm) THEN
					EXIT REPEAT
				END IF
				SET dbm TO 1
				REPEAT
					IF dbm EQUALS LENGTH(element at position gie IN sdm) THEN
						EXIT REPEAT
					END IF
					IF NOT (element at position dbm IN element at position gie IN sdm LESS THAN OR EQUAL TO element at position (dbm MINUS 1) IN element at position gie IN sdm) THEN
						RETURN False
					END IF
					ADD 1 TO dbm
				UNTIL False
				ADD 1 TO gie
			UNTIL False
			RETURN True
		END FUNCTION

		SET xfl TO 0
		WHILE xfl LESS THAN q
			SET syf TO 0
			REPEAT
				IF syf EQUALS r THEN
					EXIT REPEAT
				END IF
				SET mof TO xfl
				WHILE mof LESS THAN q
					SET uht TO syf
					REPEAT
						IF uht EQUALS r THEN
							EXIT REPEAT
						END IF
						SET subm TO EMPTY LIST
						SET xbq TO mof
						WHILE xbq GREATER THAN OR EQUAL TO xfl
							SET fkx TO element at position xbq IN grid
							SET row_slice TO EMPTY LIST
							SET mdv TO syf
							REPEAT
								IF mdv GREATER THAN uht THEN
									EXIT REPEAT
								END IF
								APPEND element at position mdv IN fkx TO row_slice
								ADD 1 TO mdv
							UNTIL False
							APPEND row_slice TO subm
							SUBTRACT 1 FROM xbq
						END WHILE
						IF qwt(subm) AND jpk(subm) THEN
							SET z TO z PLUS 1
						END IF
						ADD 1 TO uht
					UNTIL False
					ADD 1 TO mof
				END WHILE
				ADD 1 TO syf
			UNTIL False
			ADD 1 TO xfl
		END WHILE

		RETURN z
	END FUNCTION
END CLASS
```