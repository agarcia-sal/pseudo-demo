```pseudocode
CLASS Solution
    FUNCTION canSortArray(nums)
        FUNCTION count_set_bits(x)
            SET accumulator TO 0
            SET mask TO 1
            WHILE x GREATER THAN 0
                IF (x BITWISE-AND mask) NOT EQUAL TO 0
                    SET accumulator TO accumulator PLUS 1
                END IF
                SET x TO x DIVIDED BY 2
            END WHILE
            RETURN accumulator
        END FUNCTION

        SET length_val TO 0
        SET sorted_nums TO EMPTY LIST
        SET length_val TO 0
        WHILE length_val LESS THAN LENGTH OF nums
            SET length_val TO length_val PLUS 1
        END WHILE
        SET sorted_nums TO A NEW LIST WITH ELEMENTS OF nums
        SET index_a TO 1
        WHILE index_a LESS THAN length_val
            SET index_b TO 1
            WHILE index_b LESS THAN (length_val MINUS index_a PLUS 1)
                SET first_val_bits TO count_set_bits(nums[index_b MINUS 1])
                SET second_val_bits TO count_set_bits(nums[index_b])
                IF NOT (first_val_bits NOT EQUAL TO second_val_bits OR nums[index_b MINUS 1] LESS THAN OR EQUAL TO nums[index_b])
                    SET temp_var TO nums[index_b MINUS 1]
                    SET nums[index_b MINUS 1] TO nums[index_b]
                    SET nums[index_b] TO temp_var
                END IF
                SET index_b TO index_b PLUS 1
            END WHILE
            SET index_a TO index_a PLUS 1
        END WHILE

        SET is_equal TO TRUE
        SET pos_check TO 0
        WHILE pos_check LESS THAN length_val
            IF nums[pos_check] NOT EQUAL TO sorted_nums[pos_check]
                SET is_equal TO FALSE
            END IF
            SET pos_check TO pos_check PLUS 1
        END WHILE
        RETURN is_equal
    END FUNCTION
END CLASS
```