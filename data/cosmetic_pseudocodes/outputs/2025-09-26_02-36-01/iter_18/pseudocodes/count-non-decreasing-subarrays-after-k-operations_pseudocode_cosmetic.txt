```  
CLASS Solution  
    FUNCTION countNonDecreasingSubarrays(nums k)  
        SET total_length TO LENGTH OF nums  
        
        FUNCTION canMakeNonDecreasing(position count)  
            SET adjustment TO 0  
            SET highest_val TO nums[position]  
            SET index TO 1  
            REPEAT  
                IF index IS EQUAL TO count THEN  
                    BREAK  
                END IF  
                IF nums[position + index] < highest_val THEN  
                    SET adjustment TO adjustment + (highest_val - nums[position + index])  
                END IF  
                SET highest_val TO IF highest_val > nums[position + index] THEN highest_val ELSE nums[position + index]  
                IF adjustment > k THEN  
                    RETURN False  
                END IF  
                SET index TO index + 1  
            UNTIL FALSE  
            RETURN True  
        END FUNCTION  
        
        SET max_possible_subarrays TO total_length * (total_length + 1) / 2  
        SET count_invalid TO 0  
        
        SET outer_ptr TO 0  
        WHILE outer_ptr < total_length DO  
            SET min_bound TO 1  
            SET max_bound TO total_length - outer_ptr  
            SET valid_len TO 0  
            WHILE min_bound <= max_bound DO  
                SET mid_val TO (min_bound + max_bound) / 2  
                IF canMakeNonDecreasing(outer_ptr mid_val) IS True THEN  
                    SET valid_len TO mid_val  
                    SET min_bound TO mid_val + 1  
                ELSE  
                    SET max_bound TO mid_val - 1  
                END IF  
            END WHILE  
            SET count_invalid TO count_invalid + (total_length - outer_ptr - valid_len)  
            SET outer_ptr TO outer_ptr + 1  
        END WHILE  
        
        RETURN max_possible_subarrays - count_invalid  
    END FUNCTION  
END CLASS  
```