```pseudocode
CLASS Solution
    FUNCTION maxHammingDistances(nums LIST OF INTEGER m INTEGER) RETURNS LIST OF INTEGER
        SET encoded_vals TO []

        SET idx_a TO 0
        WHILE idx_a < LENGTH(nums)
            SET val_str TO ""
            SET idx_b TO 0
            WHILE idx_b < m
                SET bit_mask TO 1 << (m - 1 - idx_b)
                IF (nums[idx_a] & bit_mask) <> 0
                    SET val_str TO val_str + "1"
                ELSE
                    SET val_str TO val_str + "0"
                END IF
                SET idx_b TO idx_b + 1
            END WHILE
            APPEND val_str TO encoded_vals
            SET idx_a TO idx_a + 1
        END WHILE

        SET resulting_list TO []

        FUNCTION calcHamming(bin_x STRING, bin_y STRING) RETURNS INTEGER
            SET cnt TO 0
            SET pos TO 0
            SET total_len TO LENGTH(bin_x)
            REPEAT
                IF NOT (bin_x[pos] = bin_y[pos])
                    SET cnt TO cnt + 1
                END IF
                SET pos TO pos + 1
            UNTIL pos >= total_len
            RETURN cnt
        END FUNCTION

        SET outer_idx TO 0
        REPEAT
            IF outer_idx >= LENGTH(nums)
                BREAK
            END IF
            SET max_found TO 0
            SET inner_idx TO 0
            WHILE inner_idx < LENGTH(nums)
                IF NOT (outer_idx = inner_idx)
                    SET computed_dist TO calcHamming(encoded_vals[outer_idx], encoded_vals[inner_idx])
                    IF max_found < computed_dist
                        SET max_found TO computed_dist
                    END IF
                END IF
                SET inner_idx TO inner_idx + 1
            END WHILE
            APPEND max_found TO resulting_list
            SET outer_idx TO outer_idx + 1
        UNTIL FALSE

        RETURN resulting_list
    END FUNCTION
END CLASS
```