```pseudocode
CLASS Solution
    FUNCTION getSum(nums)
        FUNCTION calc(arr)
            SET size TO THE LENGTH OF arr
            SET prefix_counts TO A LIST OF ZEROS OF LENGTH size
            SET suffix_counts TO A LIST OF ZEROS OF LENGTH size

            SET tracker1 TO A NEW COUNTER OBJECT

            SET index1 TO 1
            WHILE index1 < size
                SET key1 TO arr[index1 - 1]
                SET current_count1 TO 0
                IF key1 IS IN tracker1 THEN
                    SET current_count1 TO tracker1[key1]
                END IF
                SET new_count1 TO 1 + current_count1
                SET tracker1[key1] TO new_count1
                SET prefix_counts[index1] TO new_count1
                SET index1 TO index1 + 1
            END WHILE

            SET tracker2 TO A NEW COUNTER OBJECT
            SET index2 TO size - 2
            REPEAT
                SET key2 TO arr[index2 + 1]
                SET current_count2 TO 0
                IF key2 IS IN tracker2 THEN
                    SET current_count2 TO tracker2[key2]
                END IF
                SET updated_count2 TO 1 + current_count2
                SET tracker2[key2] TO updated_count2
                SET suffix_counts[index2] TO updated_count2
                SET index2 TO index2 - 1
            UNTIL index2 < 0

            SET accum TO 0
            SET iter1 TO 0
            WHILE iter1 < size
                SET val1 TO prefix_counts[iter1]
                SET val2 TO suffix_counts[iter1]
                SET elem TO arr[iter1]
                SET part TO (val1 + val2 + (val1 * val2)) * elem
                SET accum TO accum + part
                SET iter1 TO iter1 + 1
            END WHILE

            RETURN accum MODULO mod
        END FUNCTION

        SET mod TO (10 ^ 9) + 7
        SET first_calc TO calc(nums)

        SET left_index TO 0
        SET right_index TO LENGTH OF nums - 1
        WHILE left_index < right_index
            SET temp TO nums[left_index]
            SET nums[left_index] TO nums[right_index]
            SET nums[right_index] TO temp
            SET left_index TO left_index + 1
            SET right_index TO right_index - 1
        END WHILE

        SET second_calc TO calc(nums)
        SET final_sum TO first_calc + second_calc

        SET total TO 0
        SET pos TO 0
        WHILE pos < LENGTH OF nums
            SET total TO total + nums[pos]
            SET pos TO pos + 1
        END WHILE

        SET total TO total MODULO mod
        SET output_value TO (final_sum + total) MODULO mod

        RETURN output_value
    END FUNCTION
END CLASS
```