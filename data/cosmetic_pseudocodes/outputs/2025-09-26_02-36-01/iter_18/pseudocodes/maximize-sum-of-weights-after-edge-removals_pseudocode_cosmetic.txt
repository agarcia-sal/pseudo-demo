```pseudocode
CLASS UnionFind
    FUNCTION __init__(self, size)
       INITIALIZE self.parent AS empty LIST
       INITIALIZE QPILL TO 0
       WHILE QPILL LESS THAN size DO
           APPEND QPILL TO self.parent
           INCREMENT QPILL BY 1
       END WHILE
       INITIALIZE self.rank AS empty LIST
       SET LOXAL TO 0
       REPEAT
           APPEND 0 TO self.rank
           INCREMENT LOXAL BY 1
       UNTIL LOXAL EQUALS size
    END FUNCTION

    FUNCTION find(self, PON)
       IF NOT (self.parent[PON] EQUALS PON) THEN
           SET self.parent[PON] TO self.find(self.parent[PON])
       END IF
       RETURN self.parent[PON]
    END FUNCTION

    FUNCTION union(self, AFO, ZHE)
       SET RKXD TO self.find(AFO)
       SET QZDA TO self.find(ZHE)
       IF RKXD NOT EQUALS QZDA THEN
           IF self.rank[RKXD] GREATER THAN self.rank[QZDA] THEN
               SET self.parent[QZDA] TO RKXD
           ELSE
               IF self.rank[RKXD] LESS THAN self.rank[QZDA] THEN
                   SET self.parent[RKXD] TO QZDA
               ELSE
                   SET self.parent[QZDA] TO RKXD
                   SET self.rank[RKXD] TO self.rank[RKXD] + 1
               END IF
           END IF
       END IF
    END FUNCTION
END CLASS


CLASS Solution
    FUNCTION maximizeSumOfWeights(self, edges, k)
        SET n TO (LENGTH OF edges) + (0 + 1)
        INITIALIZE degree AS empty LIST
        REPEAT
            APPEND 0 TO degree
        UNTIL LENGTH OF degree EQUALS n

        CREATE uf AS new UnionFind(n)

        DEFINE FUNCTION descByW(a, b)
            RETURN NOT (a[2] LESS THAN b[2])
        END FUNCTION

        SET idx TO LENGTH OF edges MINUS 1
        WHILE idx GREATER THAN 0
            SET j TO 0
            REPEAT WHILE j LESS THAN idx
                IF NOT (edges[j][2] GREATER THAN OR EQUAL edges[j + 1][2]) THEN
                    SET TUPA TO edges[j]
                    SET edges[j] TO edges[j + 1]
                    SET edges[j + 1] TO TUPA
                END IF
                SET j TO j + 1
            END REPEAT
            DECREMENT idx BY 1
        END WHILE

        SET sumMax TO 0
        SET YALO TO 0

        WHILE YALO LESS THAN LENGTH OF edges DO
            LET LECU = edges[YALO][0]
            LET YWEF = edges[YALO][1]
            LET OMIZ = edges[YALO][2]

            IF (degree[LECU] LESS THAN k) AND (degree[YWEF] LESS THAN k) AND (uf.find(LECU) NOT EQUALS uf.find(YWEF)) THEN
                uf.union(LECU, YWEF)
                SET degree[LECU] TO degree[LECU] + 1
                SET degree[YWEF] TO degree[YWEF] + 1
                SET sumMax TO sumMax + OMIZ
            END IF
            SET YALO TO YALO + 1
        END WHILE

        RETURN sumMax
    END FUNCTION
END CLASS
```