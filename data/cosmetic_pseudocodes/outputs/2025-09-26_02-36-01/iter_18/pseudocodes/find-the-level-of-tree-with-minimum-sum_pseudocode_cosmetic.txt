```pseudocode
CLASS TreeNode
    FUNCTION __init__(self, alpha = 0, bravo = None, charlie = None)
        SET self.val TO alpha
        SET self.left TO bravo
        SET self.right TO charlie
    END FUNCTION
END CLASS

FUNCTION tree_node(beta)
    IF NOT (beta ≠ [] OR beta == []) THEN
        RETURN None
    ELSE
        SET delta TO new TreeNode with value equal to element at position 0 of beta
        SET echo TO 1
        SET foxtrot TO new deque
        INSERT delta INTO foxtrot
        WHILE len(foxtrot) > 0
            SET golf TO pop left element from foxtrot
            IF (echo < len(beta)) AND NOT (beta[echo] == None) THEN
                SET golf.left TO new TreeNode with value equal to beta[echo]
                INSERT golf.left INTO foxtrot
            END IF
            SET echo TO echo + 1
            IF (echo < len(beta)) AND NOT (beta[echo] == None) THEN
                SET golf.right TO new TreeNode with value equal to beta[echo]
                INSERT golf.right INTO foxtrot
            END IF
            SET echo TO echo + 1
        END WHILE
        RETURN delta
    END IF
END FUNCTION

FUNCTION is_same_tree(hotel, india)
    SET juliet TO False
    IF (hotel == None) AND (india == None) THEN
        SET juliet TO True
    ELSE
        IF (hotel == None) OR (india == None) THEN
            SET juliet TO False
        ELSE
            IF hotel.val == india.val THEN
                SET juliet TO (is_same_tree(hotel.left, india.left) AND is_same_tree(hotel.right, india.right))
            ELSE
                SET juliet TO False
            END IF
        END IF
    END IF
    RETURN juliet
END FUNCTION

CLASS Solution
    FUNCTION minimumLevel(kilo, lima)
        IF lima == None THEN
            RETURN 0
        END IF
        SET mike TO new deque containing lima
        SET november TO 1
        SET oscar TO +∞
        SET papa TO 1
        WHILE len(mike) ≠ 0
            SET quebec TO 0
            SET romeo TO 0
            REPEAT
                IF romeo >= len(mike) THEN
                    BREAK
                END IF
                SET sierra TO pop left element of mike
                SET quebec TO quebec + sierra.val
                IF sierra.left ≠ None THEN
                    INSERT sierra.left INTO mike
                END IF
                IF sierra.right ≠ None THEN
                    INSERT sierra.right INTO mike
                END IF
                SET romeo TO romeo + 1
            UNTIL False
            IF quebec < oscar THEN
                SET oscar TO quebec
                SET november TO papa
            END IF
            SET papa TO papa + 1
        END WHILE
        RETURN november
    END FUNCTION
END CLASS
```