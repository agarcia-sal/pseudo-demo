```pseudocode
CLASS Enemy
    FUNCTION __init__(self, damage, timeTakenDown)
  self.damage = damage
  self.timeTakenDown = timeTakenDown
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION minDamage(self, power, damage, health)
  resultVar <- 0
  totalAmount <- 0
  idxVar <- 0
  enemyList <- []
  WHILE idxVar <= LENGTH OF damage - 1 DO
    totalAmount = totalAmount + damage[idxVar]
    idxVar = idxVar + 1
  END WHILE

  posCounter <- 0
  REPEAT
    IF NOT (posCounter < LENGTH OF damage) THEN
      BREAK
    END IF
    tempDmg <- damage[posCounter]
    tempHlt <- health[posCounter]
    calcTime <- ((tempHlt + power) - 1) DIV power
    tempEnemy <- Enemy(tempDmg, calcTime)
    APPEND tempEnemy TO enemyList
    posCounter <- posCounter + 1
  UNTIL FALSE

  FUNCTION ratioCompare(a, b)
    COMPARE_LEFT <- a.damage * b.timeTakenDown
    COMPARE_RIGHT <- b.damage * a.timeTakenDown
    IF COMPARE_LEFT > COMPARE_RIGHT THEN
      RETURN -1
    ELSE IF COMPARE_LEFT < COMPARE_RIGHT THEN
      RETURN 1
    ELSE
      RETURN 0
    END IF
  END FUNCTION
  enemyList = SORT(enemyList, ratioCompare)

  outputValue <- 0
  remSum <- totalAmount
  INDEXER <- 0
  WHILE INDEXER < LENGTH OF enemyList DO
    currentEnemy <- enemyList[INDEXER]
    outputValue = outputValue + (remSum * currentEnemy.timeTakenDown)
    remSum = remSum - currentEnemy.damage
    INDEXER = INDEXER + 1
  END WHILE

  finalOutput <- outputValue
  RETURN finalOutput
    END FUNCTION
END CLASS
```