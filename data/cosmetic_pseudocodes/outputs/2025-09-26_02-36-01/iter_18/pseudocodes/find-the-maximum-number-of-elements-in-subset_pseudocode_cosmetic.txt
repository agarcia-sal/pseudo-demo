```pseudocode
CLASS Solution
    FUNCTION maximumLength(nums)
        SET freqMap TO empty mapping of numbers to counts
        FOR each item IN nums
            IF item IS in freqMap
                SET freqMap[item] TO freqMap[item] + 1
            ELSE
                SET freqMap[item] TO 1
            END IF
        END FOR

        SET memo TO empty mapping from numbers to lengths

        FUNCTION recurse(y)
            IF NOT (y IS in freqMap) OR freqMap[y] < 2
                IF (y IS in freqMap) AND (freqMap[y] >= 1)
                    SET resultVar TO 1
                ELSE
                    SET resultVar TO 0
                END IF
                RETURN resultVar
            END IF

            IF y IS in memo
                RETURN memo[y]
            END IF

            SET squared TO y * y
            SET tempVal TO recurse(squared) + 2
            SET memo[y] TO tempVal
            RETURN tempVal
        END FUNCTION

        SET bestLen TO 1

        SET keysList TO list of keys in freqMap
        SET indexVar TO 0

        WHILE indexVar < LENGTH(keysList)
            SET currentKey TO keysList[indexVar]

            IF currentKey = 1
                SET occ TO freqMap[currentKey]
                SET adjusted TO occ - 1 - ((occ MOD 2) * 2)
                IF adjusted > bestLen
                    SET bestLen TO adjusted
                END IF
            ELSE
                SET candidate TO recurse(currentKey)
                IF candidate > bestLen
                    SET bestLen TO candidate
                END IF
            END IF

            SET indexVar TO indexVar + 1
        END WHILE

        RETURN bestLen
    END FUNCTION
END CLASS
```