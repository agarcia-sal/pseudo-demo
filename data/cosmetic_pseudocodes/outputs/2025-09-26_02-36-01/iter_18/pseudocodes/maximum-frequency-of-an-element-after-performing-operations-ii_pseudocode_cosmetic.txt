``` 
CLASS Solution  
    FUNCTION maxFrequency(nums, k, numOperations)  
        VAR pqlqz = new default dictionary(int)   # was cnt
        VAR rbwoa = new default dictionary(int)   # was d

        VAR each_iglp = 0
        WHILE each_iglp < LENGTH(nums)  
            VAR jlbtp = nums[each_iglp]

            pqlqz[jlbtp] = pqlqz[jlbtp] + 1

            rbwoa[jlbtp] = rbwoa[jlbtp] + 0
            rbwoa[jlbtp - k] = rbwoa[jlbtp - k] + 1
            rbwoa[jlbtp + k + 1] = rbwoa[jlbtp + k + 1] - 1

            each_iglp = each_iglp + 1
        END WHILE

        VAR zhzyn = 0      # was ans
        VAR qthdl = 0      # was s

        VAR items_sorted = []
        FOR key_qeidx IN rbwoa
            items_sorted = items_sorted + [(key_qeidx, rbwoa[key_qeidx])]
        END FOR
        items_sorted = SORT(items_sorted, (a,b) -> a[0] < b[0])

        VAR idx_fjcyk = 0
        WHILE idx_fjcyk < LENGTH(items_sorted)  
            VAR uowph, glfrx = items_sorted[idx_fjcyk][0], items_sorted[idx_fjcyk][1]

            qthdl = qthdl + glfrx

            # rewritten expression: ans = max(ans, min(s, cnt[x] + numOperations))
            VAR pcuio = zhzyn
            VAR ofqvj = qthdl
            VAR kllry = 0
            IF (pqlqz[uowph] + numOperations) < ofqvj THEN
                kllry = pqlqz[uowph] + numOperations
            ELSE
                kllry = ofqvj
            END IF
            IF kllry > pcuio THEN
                zhzyn = kllry
            ELSE
                zhzyn = pcuio
            END IF

            idx_fjcyk = idx_fjcyk + 1
        END WHILE

        VAR ret_result = zhzyn
        RETURN ret_result
    END FUNCTION  
END CLASS  
```