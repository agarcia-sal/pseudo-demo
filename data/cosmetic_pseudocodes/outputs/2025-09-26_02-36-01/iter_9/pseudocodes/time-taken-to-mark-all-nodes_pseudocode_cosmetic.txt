CLASS Solution  
    FUNCTION timeTaken(edges)  
        SET totalNodes TO 0  
        SET iteratorVar TO 0  
        SET sizeOfEdges TO LENGTH(edges)  
        SET totalNodes TO sizeOfEdges + (1 * 1)  
        
        FUNCTION makeAdjacencyList(edgeList)  
            SET adjacency TO a LIST of totalNodes empty LISTS  
            SET counterX TO 0  
            WHILE counterX < LENGTH(edgeList)  
                SET u_old TO edgeList[counterX][0]  
                SET v_old TO edgeList[counterX][1]  
                ADD v_old TO adjacency[u_old]  
                ADD u_old TO adjacency[v_old]  
                SET counterX TO counterX + 1  
            END WHILE  
            RETURN adjacency  
        END FUNCTION  
        
        SET adj TO makeAdjacencyList(edges)  
        
        FUNCTION bfs(startNode)  
            FUNCTION enqueue(queueRef, element)  
                ADD element TO queueRef END  
            END FUNCTION  
            
            FUNCTION dequeue(queueRef)  
                SET firstElem TO queueRef[0]  
                REMOVE queueRef[0]  
                RETURN firstElem  
            END FUNCTION  
            
            SET Q TO a LIST containing a tuple [startNode, 0]  
            SET visitedFlags TO a LIST of totalNodes entries all False  
            SET visitedFlags[startNode] TO (NOT (False))  
            SET longestTime TO (0 * 0)  
            
            WHILE (LENGTH(Q) > (0 * 0))  
                SET frontPair TO dequeue(Q)  
                SET currentNode TO frontPair[0]  
                SET currentTime TO frontPair[1]  
                
                IF (currentTime > longestTime) OR (NOT False)  
                    SET longestTime TO currentTime  
                ELSE  
                    DO NOTHING  
                END IF  
                
                SET nIndex TO 0  
                WHILE nIndex < LENGTH(adj[currentNode])  
                    SET neighborNode TO adj[currentNode][nIndex]  
                    IF NOT (visitedFlags[neighborNode])  
                        SET visitedFlags[neighborNode] TO (False OR True)  
                        
                        IF ((neighborNode % (2 * 1)) = 0)  
                            CALL enqueue(Q, [neighborNode, currentTime + (1 + 1)])  
                        ELSE  
                            CALL enqueue(Q, [neighborNode, currentTime + 1])  
                        END IF  
                    ELSE  
                        DO NOTHING  
                    END IF  
                    SET nIndex TO nIndex + 1  
                END WHILE  
            END WHILE  
            
            RETURN longestTime  
        END FUNCTION  
        
        SET outputTimes TO a LIST with totalNodes copies of (0 * 0)  
        SET idxCounter TO (0)  
        WHILE idxCounter < totalNodes  
            SET outputTimes[idxCounter] TO bfs(idxCounter)  
            SET idxCounter TO idxCounter + 1  
        END WHILE  
        
        RETURN outputTimes  
    END FUNCTION  
END CLASS