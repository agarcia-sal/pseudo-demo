CLASS Solution  
	FUNCTION maxPartitionsAfterOperations(s parameter k parameter)  
		
		FUNCTION max_partitions(s parameter k parameter)  
			DEFINE accumulator TO 0  
			DEFINE unique_set TO new empty set  
			
			DEFINE index_tracker TO 0  
			WHILE index_tracker < LENGTH(s parameter)  
				DEFINE current_char TO s parameter[index_tracker]  
				
				IF SIZE(unique_set) < k parameter THEN  
					ADD current_char TO unique_set  
				ELSE  
					IF NOT (current_char IN unique_set) THEN  
						accumulator = accumulator + 1  
						unique_set = new set containing current_char  
					END IF  
				END IF  
				
				index_tracker = index_tracker + 1  
			END WHILE  
			
			IF SIZE(unique_set) != 0 THEN  
				accumulator = accumulator + 1  
			END IF  
			
			RETURN accumulator  
		END FUNCTION  
		
		DEFINE maximal_parts TO max_partitions(s parameter k parameter)  
		
		DEFINE outer_counter TO 0  
		WHILE outer_counter <= LENGTH(s parameter) - 1  
			DEFINE alphabet_iterator TO 0  
			DEFINE alphabet_chars TO "abcdefghijklmnopqrstuvwxyz"  
			
			REPEAT  
				IF alphabet_iterator >= LENGTH(alphabet_chars) THEN  
					BREAK  
				END IF  
				
				DEFINE candidate_char TO alphabet_chars[alphabet_iterator]  
				
				IF candidate_char == s parameter[outer_counter] THEN  
					alphabet_iterator = alphabet_iterator + 1  
					CONTINUE  
				END IF  
				
				DEFINE prefix_str TO ""  
				DEFINE cursor TO 0  
				WHILE cursor < outer_counter  
					prefix_str = prefix_str + s parameter[cursor]  
					cursor = cursor + 1  
				END WHILE  
				
				DEFINE suffix_str TO ""  
				DEFINE suffix_cursor TO outer_counter + 1  
				WHILE suffix_cursor < LENGTH(s parameter)  
					suffix_str = suffix_str + s parameter[suffix_cursor]  
					suffix_cursor = suffix_cursor + 1  
				END WHILE  
				
				DEFINE candidate_string TO CONCATENATE(prefix_str, candidate_char, suffix_str)  
				
				IF maximal_parts < max_partitions(candidate_string k parameter) THEN  
					maximal_parts = max_partitions(candidate_string k parameter)  
				END IF  
				
				alphabet_iterator = alphabet_iterator + 1  
			UNTIL FALSE  
			
			outer_counter = outer_counter + 1  
		END WHILE  
		
		RETURN maximal_parts  
	END FUNCTION  
END CLASS