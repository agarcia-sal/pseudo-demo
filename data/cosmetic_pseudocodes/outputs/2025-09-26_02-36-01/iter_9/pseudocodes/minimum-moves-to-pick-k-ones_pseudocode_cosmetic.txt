CLASS Solution
    FUNCTION minimumMoves(wt LIST OF INTEGERS ur INTEGER qt INTEGER) RETURNS INTEGER
        SET uy TO an empty list
        SET jz TO 0

        WHILE jz < LENGTH(wt)
            IF wt[jz] == 1
                APPEND jz TO uy
            END IF
            SET jz TO jz + 1
        END WHILE

        IF LENGTH(uy) == 0
            RETURN ur * 2
        END IF

        SET gx TO LENGTH(uy)
        SET oq TO list filled with zeros of size gx + 1
        SET hz TO 0

        WHILE hz < gx
            SET oq[hz + 1] TO oq[hz] + uy[hz]
            SET hz TO hz + 1
        END WHILE

        FUNCTION cost(fl INTEGER gv INTEGER) RETURNS INTEGER
            SET px TO (fl + gv) DIV 2
            SET ps TO uy[px]
            SET wn TO 0
            SET dn TO fl

            WHILE dn < px
                SET wn TO wn + ps - uy[dn] - px + dn
                SET dn TO dn + 1
            END WHILE

            SET mf TO px + 1

            WHILE mf <= gv
                SET wn TO wn + uy[mf] - ps - mf + px
                SET mf TO mf + 1
            END WHILE

            RETURN wn
        END FUNCTION

        SET tw TO +âˆž

        SET np TO 0
        WHILE np <= gx - ur
            SET rp TO np + ur - 1
            SET tq TO cost(np , rp)
            IF (ur % 2) == 1
                SET ph TO (np + rp) DIV 2
                SET ql TO uy[ph]
                SET vx TO rp - ph - (ql - uy[ph] - 1)
            ELSE
                SET jm TO (np + rp) DIV 2
                SET bs TO jm + 1
                SET ofl TO uy[jm]
                SET wv TO uy[bs]
                SET vx TO bs - jm - 1 - (wv - ofl - 1)
            END IF

            IF vx > qt
                SET tq TO tq + vx - qt
            END IF

            IF tq < tw
                SET tw TO tq
            END IF

            SET np TO np + 1
        END WHILE

        RETURN tw
    END FUNCTION
END CLASS