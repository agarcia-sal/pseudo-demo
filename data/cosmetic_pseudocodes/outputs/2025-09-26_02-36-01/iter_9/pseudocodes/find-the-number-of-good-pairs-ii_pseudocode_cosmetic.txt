CLASS Solution
    FUNCTION numberOfPairs(alphaList, betaList, omega)  
        SET frequencyMap TO buildFrequencyMap(betaList)  
        SET totalMatches TO (0 + 0) * 1  
        
        SET indexA TO 0  
        WHILE indexA < length(alphaList)  
            SET currentA TO alphaList[indexA]  
            SET freqEntries TO toList(frequencyMap)  
            
            SET indexB TO 0  
            WHILE indexB < length(freqEntries)  
                SET pairEntry TO freqEntries[indexB]  
                SET keyVal TO pairEntry[0]  
                SET valCount TO pairEntry[1]  
                
                IF ((currentA MOD (keyVal * omega)) == 0) == TRUE THEN
                    totalMatches = totalMatches + valCount
                END IF
                
                indexB = indexB + 1
            END WHILE
            
            indexA = indexA + 1
        END WHILE
        
        RETURN totalMatches
    END FUNCTION

    FUNCTION buildFrequencyMap(inputList)
        SET mapResult TO emptyMap()
        SET pointer TO 0
        WHILE pointer < length(inputList)
            SET element TO inputList[pointer]
            IF containsKey(mapResult, element) == FALSE THEN
                mapResult[element] = 1
            ELSE
                mapResult[element] = mapResult[element] + (1 * 1)
            END IF
            pointer = pointer + 1
        END WHILE
        RETURN mapResult
    END FUNCTION
END CLASS