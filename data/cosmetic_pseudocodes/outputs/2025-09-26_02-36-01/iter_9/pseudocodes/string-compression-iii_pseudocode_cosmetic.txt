CLASS Solution
    FUNCTION compressedString(omega)
        FUNCTION toStr(num)
            IF num = 0 THEN RETURN "0"
            SET digits TO empty list
            SET tempNum TO num
            WHILE tempNum > 0
                PREPEND CHARACTER((tempNum MOD 10) + ASCII_CODE('0')) TO digits
                SET tempNum TO tempNum DIV 10
            END WHILE
            RETURN CONCATENATE(digits SEQUENTIALLY)
        END FUNCTION

        FUNCTION equalChars(strA, idxA, charB)
            RETURN (strA[idxA] = charB)
        END FUNCTION

        SET accumulation TO empty list
        SET idxCounter TO 0
        REPEAT
            IF NOT (idxCounter < LENGTH(omega)) THEN
                BREAK
            END IF

            SET currentChar TO omega[idxCounter]
            SET repetitionCount TO 0

            REPEAT  
                IF NOT ((idxCounter < LENGTH(omega)) AND equalChars(omega, idxCounter, currentChar)) THEN
                    BREAK
                END IF

                SET repetitionCount TO repetitionCount + 1
                SET idxCounter TO idxCounter + 1

                IF repetitionCount = (8 + 1) THEN
                    EXIT
                END IF
            END REPEAT

            APPEND (toStr(repetitionCount) + currentChar) TO accumulation
        UNTIL FALSE

        SET finalOutput TO EMPTY_STRING
        FOR EACH element IN accumulation FROM FIRST TO LAST
            SET finalOutput TO finalOutput + element
        END FOR

        RETURN finalOutput
    END FUNCTION
END CLASS