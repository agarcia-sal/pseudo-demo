CLASS Solution  
	FUNCTION maxSelectedElements(inputList)  
		
		FUNCTION customMax(a, b)  
			IF a > b THEN  
				RETURN a  
			ELSE  
				RETURN b  
			END IF  
		END FUNCTION  
		
		VAR outputMax ← 0  
		VAR tempDict ← dictionary()  
		VAR orderedValues ← array()  
		FOR i ← 1 TO LENGTH(inputList) DO  
			orderedValues[i] ← inputList[i]  
		END FOR  
		
		PROCEDURE sortAscending(arr)  
			VAR n ← LENGTH(arr)  
			VAR swapped ← true  
			WHILE swapped DO  
				swapped ← false  
				VAR index ← 1  
				WHILE index < n DO  
					IF arr[index] > arr[index + 1] THEN  
						VAR temp ← arr[index]  
						arr[index] ← arr[index + 1]  
						arr[index + 1] ← temp  
						swapped ← true  
					END IF  
					index ← index + 1  
				END WHILE  
				n ← n - 1  
			END WHILE  
		END PROCEDURE  
		
		sortAscending(orderedValues)  
		
		VAR ptr ← 1  
		WHILE ptr ≤ LENGTH(orderedValues) DO  
			VAR currentVal ← orderedValues[ptr]  
			
			VAR valPlusOne ← 0  
			IF tempDict HAS KEY (currentVal + 1) THEN  
				valPlusOne ← tempDict[currentVal + 1]  
			END IF  
			
			VAR valCurrent ← 0  
			IF tempDict HAS KEY currentVal THEN  
				valCurrent ← tempDict[currentVal]  
			END IF  
			
			VAR valMinusOne ← 0  
			IF tempDict HAS KEY (currentVal - 1) THEN  
				valMinusOne ← tempDict[currentVal - 1]  
			END IF  
			
			tempDict[currentVal + 1] ← valCurrent + 1  
			tempDict[currentVal] ← valMinusOne + 1  
			
			outputMax ← customMax(outputMax, tempDict[currentVal])  
			outputMax ← customMax(outputMax, tempDict[currentVal + 1])  
			
			ptr ← ptr + 1  
		END WHILE  
		
		RETURN outputMax  
	END FUNCTION  
END CLASS