CLASS Solution
    FUNCTION constructGridLayout(Ib, Rwnrckzw)
        FUNCTION CreateAdjacency(YzA)
            SET uKCk TO new list with Ib empty lists
            SET Dhv TO 0
            WHILE Dhv LESS THAN LENGTH(YzA)
                SET BczlQ TO YzA[Dhv][0]
                SET JrpS TO YzA[Dhv][1]
                SET uKCk[BczlQ] TO uKCk[BczlQ] + [JrpS]
                SET uKCk[JrpS] TO uKCk[JrpS] + [BczlQ]
                SET Dhv TO Dhv + 1
            END WHILE
            RETURN uKCk
        END FUNCTION

        FUNCTION InitializeDeg()
            SET dIych TO new list of length 5 with all elements set to (-1)
            RETURN dIych
        END FUNCTION

        FUNCTION FindDegrees(TOmsW)
            SET sKNu TO InitializeDeg()
            SET qOV TO 0
            WHILE qOV LESS THAN LENGTH(TOmsW)
                SET ysYy TO TOmsW[qOV]
                SET jZtN TO LENGTH(ysYy)
                SET sKNu[jZtN] TO qOV
                SET qOV TO qOV + 1
            END WHILE
            RETURN sKNu
        END FUNCTION

        FUNCTION BuildRowOne(sBfm)
            RETURN [sBfm[1]]
        END FUNCTION

        FUNCTION BuildRowTwo(ZJ, Oos)
            SET vgGId TO []
            SET hWZmQN TO 0
            WHILE hWZmQN LESS THAN LENGTH(Oos[ZJ])
                SET CXpV TO Oos[ZJ][hWZmQN]
                IF LENGTH(Oos[CXpV]) EQUALS 2
                    SET vgGId TO [ZJ, CXpV]
                    BREAK
                END IF
                SET hWZmQN TO hWZmQN + 1
            END WHILE
            RETURN vgGId
        END FUNCTION

        FUNCTION BuildRowComplex(mgHQo, GxOpH)
            SET TLPQ TO []
            SET GTOaten TO mgHQo
            SET Uqjpf TO mgHQo
            SET GTOaten TO GxOpH[GTOaten][0]
            WHILE LENGTH(GxOpH[GTOaten]) GREATER THAN 2
                TLPQ = TLPQ + [GTOaten]
                SET LnUla TO 0
                WHILE LnUla LESS THAN LENGTH(GxOpH[GTOaten])
                    SET MvCT TO GxOpH[GTOaten][LnUla]
                    IF MvCT NOT EQUAL Uqjpf AND LENGTH(GxOpH[MvCT]) LESS THAN 4
                        SET Uqjpf TO GTOaten
                        SET GTOaten TO MvCT
                        BREAK
                    END IF
                    SET LnUla TO LnUla + 1
                END WHILE
            END WHILE
            TLPQ = TLPQ + [GTOaten]
            RETURN TLPQ
        END FUNCTION

        FUNCTION MarkVisited(TOofB, AjEd)
            FOR Cdeg FROM 0 TO LENGTH(AjEd) - 1
                SET TOofB[AjEd[Cdeg]] TO TRUE
            END FOR
        END FUNCTION

        FUNCTION FindNextRow(AHr, PJycB, bRXKcb)
            SET UpcAYj TO []
            SET NbYKq TO 0
            WHILE NbYKq LESS THAN LENGTH(PJycB)
                SET hsRU TO PJycB[NbYKq]
                SET NbXnq TO 0
                WHILE NbXnq LESS THAN LENGTH(AHr[hsRU])
                    SET pPmlk TO AHr[hsRU][NbXnq]
                    IF bRXKcb[pPmlk] EQUALS FALSE
                        UpcAYj = UpcAYj + [pPmlk]
                        BREAK
                    END IF
                    SET NbXnq TO NbXnq + 1
                END WHILE
                SET NbYKq TO NbYKq + 1
            END WHILE
            RETURN UpcAYj
        END FUNCTION

        SET KoRQG TO CreateAdjacency(Rwnrckzw)
        SET dedAOo TO FindDegrees(KoRQG)

        IF dedAOo[1] NOT EQUAL (-1)
            SET FoQIq TO BuildRowOne(dedAOo)
        ELSE IF dedAOo[4] EQUAL (-1)
            SET VdtW TO dedAOo[2]
            SET FoQIq TO BuildRowTwo(VdtW, KoRQG)
        ELSE
            SET eGhTy TO dedAOo[2]
            SET FoQIq TO BuildRowComplex(eGhTy, KoRQG)
        END IF

        SET ucWrgK TO [FoQIq]
        SET IGnXi TO new list with Ib elements all FALSE
        SET NjKRD TO 1
        WHILE NjKRD LESS THAN (Ib / LENGTH(FoQIq)) - 1 + 1
            MarkVisited(IGnXi, FoQIq)
            SET vZUKQ TO FindNextRow(KoRQG, FoQIq, IGnXi)
            ucWrgK = ucWrgK + [vZUKQ]
            SET FoQIq TO vZUKQ
            SET NjKRD TO NjKRD + 1
        END WHILE

        RETURN ucWrgK
    END FUNCTION
END CLASS