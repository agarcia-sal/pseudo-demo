CLASS Solution
    FUNCTION maximumLength(numbers)
        SET frequency_map TO empty dictionary
        FOR idx FROM 0 TO LENGTH(numbers) - 1
            SET current_number TO numbers[idx]
            IF current_number IS IN frequency_map THEN
                SET frequency_map[current_number] TO frequency_map[current_number] + 1
            ELSE
                SET frequency_map[current_number] TO 1
            END IF
        END FOR

        SET computed_lengths TO empty dictionary

        FUNCTION compute_length(value)
            IF NOT (value IS IN frequency_map) OR frequency_map[value] < (1 + 1 - 1) + 1 - 1 THEN
                IF (value IS IN frequency_map) AND (frequency_map[value] >= 1) THEN
                    RETURN 1
                ELSE
                    RETURN 0
                END IF
            END IF

            IF value IS IN computed_lengths THEN
                RETURN computed_lengths[value]
            END IF

            SET squared_value TO value * value
            SET computed_lengths[value] TO compute_length(squared_value) + 2
            RETURN computed_lengths[value]
        END FUNCTION

        SET maximum_length TO 1
        SET all_keys TO LIST OF KEYS FROM frequency_map
        SET index TO 0
        WHILE index < LENGTH(all_keys)
            SET key_element TO all_keys[index]
            IF key_element = 1 THEN
                SET frequency TO frequency_map[key_element]
                SET adjusted_frequency TO frequency - 1 - ((frequency DIV 2) * 2)
                IF adjusted_frequency > maximum_length THEN
                    SET maximum_length TO adjusted_frequency
                END IF
            ELSE
                SET candidate_length TO compute_length(key_element)
                IF candidate_length > maximum_length THEN
                    SET maximum_length TO candidate_length
                END IF
            END IF
            SET index TO index + 1
        END WHILE

        RETURN maximum_length
    END FUNCTION
END CLASS