CLASS Solution  
    FUNCTION numberOfSubstrings(t)  
        SET lengthVal TO 0  
        SET resultCount TO 0  
        PROCEDURE computeLength(text, OUT size)  
            SET indexVal TO 0  
            REPEAT  
                IF text[indexVal] IS NULL  
                    size <- indexVal  
                    RETURN  
                END IF  
                indexVal <- indexVal + 1  
            UNTIL FALSE  
        END PROCEDURE  
        CALL computeLength(t, lengthVal)  
        SET outerIndex TO 0  
        WHILE outerIndex <= (lengthVal - 1) DO  
            SET accumOnes TO 0  
            SET accumZeros TO 0  
            PROCEDURE checkCharAt(pos, OUT isOne)  
                IF t[pos] = '1'  
                    isOne <- TRUE  
                ELSE  
                    isOne <- FALSE  
                END IF  
            END PROCEDURE  
            SET innerIndex TO outerIndex  
            WHILE innerIndex <= (lengthVal - 1) DO  
                SET oneFound TO FALSE  
                CALL checkCharAt(innerIndex, oneFound)  
                IF oneFound  
                    accumOnes <- accumOnes + 1  
                ELSE  
                    accumZeros <- accumZeros + 1  
                END IF  
                FUNCTION shouldIncrement(onesCount, zerosCount) RETURNS BOOLEAN  
                    RETURN NOT (onesCount < (zerosCount * zerosCount))  
                END FUNCTION  
                IF shouldIncrement(accumOnes, accumZeros)  
                    resultCount <- resultCount + 1  
                END IF  
                innerIndex <- innerIndex + 1  
            END WHILE  
            outerIndex <- outerIndex + 1  
        END WHILE  
        RETURN resultCount  
    END FUNCTION  
END CLASS