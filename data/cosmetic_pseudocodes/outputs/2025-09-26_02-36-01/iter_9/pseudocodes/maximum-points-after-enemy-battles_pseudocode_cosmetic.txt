CLASS Solution
    FUNCTION maximumPoints(enemyEnergies originalEnergy)
        PROCEDURE sortAscending(list)
            PROCEDURE swapIfNeeded(a, b)
                IF a > b THEN
                    TEMP ← a
                    a ← b
                    b ← TEMP
                END IF
                RETURN a, b
            END PROCEDURE

            REPEAT
                swapped ← FALSE
                INDEX ← 0
                WHILE INDEX < LENGTH(list) - 1 DO
                    first, second ← list[INDEX], list[INDEX + 1]
                    first, second ← swapIfNeeded(first, second)
                    list[INDEX], list[INDEX + 1] ← first, second
                    IF list[INDEX] != first OR list[INDEX + 1] != second THEN
                        swapped ← TRUE
                    END IF
                    INDEX ← INDEX + 1
                END WHILE
            UNTIL NOT swapped
        END PROCEDURE

        PROCEDURE integerDivision(dividend, divisor)
            QUOTIENT ← 0
            REM ← dividend
            WHILE REM >= divisor DO
                REM ← REM - divisor
                QUOTIENT ← QUOTIENT + 1
            END WHILE
            RETURN QUOTIENT, REM
        END PROCEDURE

        sortAscending(enemyEnergies)

        IF NOT (originalEnergy >= enemyEnergies[0]) THEN
            RETURN 0
        END IF

        RESULT ← 0
        INDEX ← LENGTH(enemyEnergies) - 1

        PROCEDURE process(index, currEnergy, points)
            IF index < 0 THEN
                RETURN points
            END IF

            QUOT, REM ← integerDivision(currEnergy, enemyEnergies[0])
            NEW_POINTS ← points + QUOT
            NEW_ENERGY ← REM + enemyEnergies[index]

            RETURN process(index - 1, NEW_ENERGY, NEW_POINTS)
        END PROCEDURE

        RETURN process(INDEX, originalEnergy, RESULT)
    END FUNCTION
END CLASS