CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        PROCEDURE sortDescending(arr)
            FOR p FROM 1 TO LENGTH(arr) - 1
                SET q TO p
                WHILE q > 0 AND arr[q] > arr[q - 1]
                    SET tempVal TO arr[q]
                    SET arr[q] TO arr[q - 1]
                    SET arr[q - 1] TO tempVal
                    DECREMENT q BY 1
                END WHILE
            END FOR
        END PROCEDURE

        CALL sortDescending(horizontalCut)
        CALL sortDescending(verticalCut)

        SET totalCost TO 0
        SET idxH TO 0
        SET idxV TO 0
        SET heightCount TO 1
        SET widthCount TO 1

        FUNCTION hasMoreCuts(x y)
            RETURN (x < y)
        END FUNCTION

        WHILE (hasMoreCuts(idxH LENGTH(horizontalCut))) OR (hasMoreCuts(idxV LENGTH(verticalCut)))
            IF (idxV = LENGTH(verticalCut)) OR ((idxH < LENGTH(horizontalCut)) AND (horizontalCut[idxH] > verticalCut[idxV]))
                SET addVal TO horizontalCut[idxH] * widthCount
                SET totalCost TO totalCost + addVal
                SET heightCount TO heightCount + 1
                SET idxH TO idxH + 1
            ELSE
                SET addVal TO verticalCut[idxV] * heightCount
                SET totalCost TO totalCost + addVal
                SET widthCount TO widthCount + 1
                SET idxV TO idxV + 1
            END IF
        END WHILE

        RETURN totalCost
    END FUNCTION
END CLASS