CLASS Solution
    FUNCTION occurrencesOfElement(alpha, beta, gamma)
        FUNCTION equalsHelper(u, v)
            RETURN NOT (u < v OR u > v)
        END FUNCTION

        FUNCTION lessEqualHelper(u, v)
            RETURN NOT (u > v)
        END FUNCTION

        FUNCTION getListLength(lst)
            SET cnt TO 0
            WHILE TRUE
                IF cnt >= LENGTH(lst)
                    BREAK
                END IF
                SET cnt TO cnt + 1
            END WHILE
            RETURN cnt
        END FUNCTION

        FUNCTION elemAtIndex(lst, idx)
            SET pos TO 0
            SET result TO NULL
            WHILE TRUE
                IF pos >= LENGTH(lst)
                    BREAK
                END IF
                IF pos EQUALS idx
                    SET result TO lst[pos]
                    BREAK
                END IF
                SET pos TO pos + 1
            END WHILE
            RETURN result
        END FUNCTION

        FUNCTION appendToList(lst, val)
            SET newList TO empty list
            SET k TO 0
            WHILE TRUE
                IF k >= LENGTH(lst)
                    BREAK
                END IF
                SET newList TO newList + [lst[k]]
                SET k TO k + 1
            END WHILE
            SET newList TO newList + [val]
            RETURN newList
        END FUNCTION

        SET delta TO 0
        SET omega TO 0
        SET sigma TO empty list
        WHILE TRUE
            IF delta >= LENGTH(alpha)
                BREAK
            END IF
            SET phi TO alpha[delta]
            IF equalsHelper(phi, gamma)
                SET sigma TO appendToList(sigma, delta)
            END IF
            SET delta TO delta + 1
        END WHILE

        SET tau TO empty list
        SET iota TO 0
        WHILE TRUE
            IF iota >= LENGTH(beta)
                BREAK
            END IF
            SET psi TO beta[iota]
            IF lessEqualHelper(psi, LENGTH(sigma))
                SET elem TO elemAtIndex(sigma, psi - 1)
                SET tau TO appendToList(tau, elem)
            ELSE
                SET tau TO appendToList(tau, -1)
            END IF
            SET iota TO iota + 1
        END WHILE

        RETURN tau
    END FUNCTION
END CLASS