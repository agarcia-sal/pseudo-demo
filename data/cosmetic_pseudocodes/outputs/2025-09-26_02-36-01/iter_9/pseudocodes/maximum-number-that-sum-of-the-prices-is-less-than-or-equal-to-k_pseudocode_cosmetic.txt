CLASS Solution
    FUNCTION findMaximumNumber(A, B)
        FUNCTION calcSetBits(C, D)
            SET E TO 0
            SET F TO (1 * (2 ^ D))
            SET G TO C DIV F
            SET E TO E + ((G DIV 2) * F)
            IF (G MOD 2) == 1 THEN
                SET E TO E + ((C MOD F) + 1)
            END IF
            RETURN E
        END FUNCTION

        FUNCTION calcAccumPrice(H)
            SET J TO 0
            SET K TO 1
            REPEAT
                IF (2 ^ ((K * B) - 1)) > H THEN
                    BREAK
                END IF
                SET J TO J + calcSetBits(H, (K * B) - 1)
                SET K TO K + 1
            UNTIL FALSE
            RETURN J
        END FUNCTION

        SET L TO 1
        SET M TO 2 ^ 60
        WHILE L <= M
            SET N TO L + ((M - L) DIV 2)
            IF calcAccumPrice(N) <= A THEN
                SET L TO N + 1
            ELSE
                SET M TO N - 1
            END IF
        END WHILE
        RETURN M
    END FUNCTION
END CLASS