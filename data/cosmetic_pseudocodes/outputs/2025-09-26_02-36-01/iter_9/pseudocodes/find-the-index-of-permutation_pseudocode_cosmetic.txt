CLASS Solution
	FUNCTION getPermutationIndex(perm)
		DEFINE computeFactorials(length)
			LET results BE new LIST of length length
			SET results[0] TO 1
			SET counter TO 1
			WHILE counter < length
				SET results[counter] TO results[counter - 1] * counter
				INCREMENT counter BY 1
			END WHILE
			RETURN results
		END FUNCTION

		DEFINE findPosition(value, container)
			LET idx BE 0
			REPEAT
				IF container[idx] == value THEN
					RETURN idx
				END IF
				INCREMENT idx BY 1
			UNTIL false
		END FUNCTION

		LET size BE 0
		WHILE size != LENGTH OF perm
			INCREMENT size BY 1
		END WHILE

		LET moduloValue BE (10 ^ 9) + 1

		LET factorialList BE computeFactorials(size)

		LET availableNumbers BE []
		LET counterIndex BE 1
		WHILE counterIndex <= size
			APPEND counterIndex TO availableNumbers
			INCREMENT counterIndex BY 1
		END WHILE

		LET totalIndex BE 0
		LET stepCounter BE 0
		WHILE stepCounter < size
			LET currentPos BE findPosition(perm[stepCounter], availableNumbers)
			SET totalIndex TO totalIndex + (currentPos * factorialList[(size - stepCounter) - 1])
			REMOVE availableNumbers[currentPos]
			INCREMENT stepCounter BY 1
		END WHILE

		LET finalResult BE totalIndex % moduloValue
		RETURN finalResult
	END FUNCTION
END CLASS