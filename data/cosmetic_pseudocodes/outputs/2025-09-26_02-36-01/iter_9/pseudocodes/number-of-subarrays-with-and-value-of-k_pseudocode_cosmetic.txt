CLASS Solution
    FUNCTION countSubarrays(nums parameter LIST OF INTEGER k parameter INTEGER) RETURNS INTEGER
        FUNCTION bitwise_and(a PARAMETER INTEGER, b PARAMETER INTEGER) RETURNS INTEGER
            RETURN a BITWISE AND b
        END FUNCTION

        FUNCTION is_equal(x PARAMETER INTEGER, y PARAMETER INTEGER) RETURNS BOOLEAN
            RETURN (x EQUALS y)
        END FUNCTION

        FUNCTION is_less(x PARAMETER INTEGER, y PARAMETER INTEGER) RETURNS BOOLEAN
            RETURN (x LESS THAN y)
        END FUNCTION

        SET length_val TO 0
        SET idx_start TO 0
        SET idx_end TO 0
        SET result_counter TO 0

        length_val = 0
        idx_start = 0
        WHILE idx_start LESS THAN LENGTH OF nums
            length_val = LENGTH OF nums

            DECLARE FUNCTION inner_loop(pos_start PARAMETER INTEGER, pos_end PARAMETER INTEGER, accumulator PARAMETER INTEGER, accumulated_result PARAMETER INTEGER) RETURNS INTEGER
                IF pos_end GREATER THAN OR EQUAL TO length_val THEN 
                    RETURN accumulated_result
                ELSE
                    LET combined_val = bitwise_and(accumulator, nums[pos_end])

                    IF is_equal(combined_val, k) THEN
                        LET incremented_result = accumulated_result + 1

                        IF is_less(combined_val, k) THEN
                            RETURN incremented_result
                        ELSE
                            RETURN inner_loop(pos_start, pos_end + 1, combined_val, incremented_result)
                        END IF
                    ELSE
                        IF is_less(combined_val, k) THEN
                            RETURN accumulated_result
                        ELSE
                            RETURN inner_loop(pos_start, pos_end + 1, combined_val, accumulated_result)
                        END IF
                    END IF
                END IF
            END FUNCTION

            result_counter = result_counter + inner_loop(idx_start, idx_start, nums[idx_start], 0)

            idx_start = idx_start + 1
        END WHILE

        RETURN result_counter
    END FUNCTION
END CLASS