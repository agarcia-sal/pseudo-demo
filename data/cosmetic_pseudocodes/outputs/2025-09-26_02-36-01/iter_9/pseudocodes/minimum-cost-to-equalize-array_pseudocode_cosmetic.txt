CLASS Solution
    FUNCTION minCostToEqualizeArray(lambdaOmega MuNu XiPi)
        SET omegaTheta TO 1_000_000_007
        SET PsiPi TO LENGTH_OF(lambdaOmega)
        SET alphaBeta TO lambdaOmega[0]
        SET tauSigma TO lambdaOmega[0]
        SET NuXi TO 0

        SET kappaRho TO 0
        WHILE kappaRho < PsiPi
            SET chiPsi TO lambdaOmega[kappaRho]
            IF chiPsi < alphaBeta
                SET alphaBeta TO chiPsi
            END IF
            IF chiPsi > tauSigma
                SET tauSigma TO chiPsi
            END IF
            SET NuXi TO NuXi + chiPsi
            SET kappaRho TO kappaRho + 1
        END WHILE

        IF (cost1 * 2) <= cost2 OR PsiPi < 3
            SET deltaSigma TO (tauSigma * PsiPi) - NuXi
            RETURN ((cost1 * deltaSigma) % omegaTheta)
        END IF

        FUNCTION zetaEta(kappaOmega)
            SET epsilonDelta TO kappaOmega - alphaBeta
            SET phiChi TO (kappaOmega * PsiPi) - NuXi
            SET upsilonLambda TO MINIMUM(phiChi / 2, phiChi - epsilonDelta)
            RETURN (cost1 * (phiChi - 2 * upsilonLambda) + cost2 * upsilonLambda)
        END FUNCTION

        FUNCTION etaKappa()
            SET iotaGamma TO tauSigma
            SET lambdaBeta TO 2 * tauSigma - 1
            SET rhoSigma TO null
            FUNCTION recursiveSearch(x)
                IF x > lambdaBeta
                    RETURN rhoSigma
                ELSE
                    SET psiAlpha TO zetaEta(x)
                    IF rhoSigma == null OR psiAlpha < rhoSigma
                        SET rhoSigma TO psiAlpha
                    END IF
                    RETURN recursiveSearch(x + 1)
                END IF
            END FUNCTION
            RETURN recursiveSearch(iotaGamma)
        END FUNCTION

        SET omegaPhi TO etaKappa()
        RETURN omegaPhi % omegaTheta
    END FUNCTION
END CLASS