CLASS Solution
	Function maxTotalReward(omega)
		Function eta(psi)
			Function phi(alpha, beta)
				RETURN (alpha < beta) OR (alpha = beta)
			END FUNCTION

			Function zeta(gamma, delta)
				RETURN gamma + delta
			END FUNCTION

			Variable rho
			Variable sigma
			Variable tau
			Variable upsilon
			Variable chi
			Variable psi_index

			rho = LENGTH(omega)
            psi_index = 0
            WHILE psi_index < rho
                IF NOT phi(omega[psi_index], psi)
                    psi_index = psi_index + 1
                ELSE
                    BREAK
                END IF
            END WHILE

			sigma = 0
			tau = psi_index

			WHILE tau < rho
				upsilon = omega[tau]
				chi = zeta(psi, upsilon)
				IF NOT (chi <= psi)
					sigma = MAXIMUM(sigma, zeta(upsilon, eta(chi)))
				END IF
				tau = tau + 1
			END WHILE
			
			RETURN sigma
		END FUNCTION
		
		/* Sort omega in ascending order using a local implementation */
		Function insertionSort(arr)
			Variable a
			Variable b
			Variable c
			Variable d
			a = 1
			WHILE a < LENGTH(arr)
				b = arr[a]
				c = a - 1
				WHILE c >= 0 AND NOT phi(arr[c], b)
					arr[c + 1] = arr[c]
					c = c - 1
				END WHILE
				arr[c + 1] = b
				a = a + 1
			END WHILE
		END FUNCTION
		
		insertionSort(omega)
		RETURN eta(0)
	END FUNCTION
END CLASS