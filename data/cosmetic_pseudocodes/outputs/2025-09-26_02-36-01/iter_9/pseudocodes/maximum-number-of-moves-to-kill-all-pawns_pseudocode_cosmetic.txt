CLASS Solution
    FUNCTION maxMoves(kx, ky, positions)

        FUNCTION knightReachable(cx, cy, tx, ty)
            SET directions TO [ (2,1), (1,2), (-1,2), (-2,1), (-2,-1), (-1,-2), (1,-2), (2,-1) ]
            SET visitedPositions TO an empty set
            SET explorationQueue TO a list containing tuple(cx, cy, 0)
            ADD tuple(cx, cy) TO visitedPositions

            FUNCTION dequeue()
                RETURN explorationQueue[0], explorationQueue = explorationQueue[1..]
            END FUNCTION

            WHILE SIZE(explorationQueue) GREATER THAN 0
                SET currentX, currentY, dist TO dequeue()
                IF currentX EQUALS tx AND currentY EQUALS ty THEN
                    RETURN dist
                END IF
                FOR EACH (dx, dy) IN directions
                    SET nextX TO currentX + dx
                    SET nextY TO currentY + dy
                    IF nextX GREATER OR EQUAL 0 AND nextX LESS THAN 50 AND nextY GREATER OR EQUAL 0 AND nextY LESS THAN 50 THEN
                        SET candidate TO tuple(nextX, nextY)
                        IF candidate NOT IN visitedPositions THEN
                            ADD candidate TO visitedPositions
                            explorationQueue = explorationQueue + [ (nextX, nextY, dist + 1) ]
                        END IF
                    END IF
                END FOR
            END WHILE
            RETURN -1
        END FUNCTION

        SET totalPositions TO 0
        SET convertedPositions TO an empty list
        FOR EACH element IN positions
            convertedPositions = convertedPositions + [ tuple(element[0], element[1]) ]
            SET totalPositions TO totalPositions + 1
        END FOR

        FUNCTION innerDP(cx, cy, bitmask, playerTurn)
            IF bitmask EQUALS 0 THEN
                RETURN 0
            END IF

            IF playerTurn IS True THEN
                SET bestScore TO 0
            ELSE
                SET bestScore TO 1 / 0
            END IF

            FUNCTION getBit(index)
                RETURN 1 << index
            END FUNCTION

            SET idx TO 0
            REPEAT
                IF (bitmask & getBit(idx)) NOT EQUAL 0 THEN
                    SET tx TO convertedPositions[idx][0]
                    SET ty TO convertedPositions[idx][1]

                    SET moveCost TO knightReachable(cx, cy, tx, ty)

                    IF moveCost NOT EQUAL -1 THEN
                        SET updatedMask TO bitmask ^ getBit(idx)
                        SET nextValue TO moveCost + innerDP(tx, ty, updatedMask, NOT playerTurn)

                        IF playerTurn THEN
                            IF bestScore < nextValue THEN
                                SET bestScore TO nextValue
                            END IF
                        ELSE
                            IF bestScore > nextValue THEN
                                SET bestScore TO nextValue
                            END IF
                        END IF
                    END IF
                END IF
                SET idx TO idx + 1
            UNTIL idx EQUALS totalPositions

            RETURN bestScore
        END FUNCTION

        SET fullMask TO (1 << totalPositions) - 1
        RETURN innerDP(kx, ky, fullMask, True)
    END FUNCTION
END CLASS