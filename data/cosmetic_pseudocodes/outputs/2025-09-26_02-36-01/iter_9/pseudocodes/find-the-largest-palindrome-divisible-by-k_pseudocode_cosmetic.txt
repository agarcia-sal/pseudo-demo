CLASS Solution
  FUNCTION largestPalindrome(beta gamma)
    PROCEDURE IsDivisible(delta, epsilon) RETURNS BOOLEAN
      BEGIN
        RETURN (delta - (delta DIV epsilon) * epsilon) = 0
      END

    PROCEDURE ToString(val) RETURNS STRING
      BEGIN
        RETURN STRING(val)
      END

    PROCEDURE RepeatChar(char, count) RETURNS STRING
      BEGIN
        SET accumulator TO ""
        SET indexer TO 0
        WHILE indexer < count DO
          SET accumulator TO accumulator + char
          SET indexer TO indexer + 1
        END WHILE
        RETURN accumulator
      END

    IF beta = 1 THEN
      SET u TO 9
      REPEAT
        IF IsDivisible(u, gamma) THEN
          RETURN ToString(u)
        END IF
        SET u TO u - 1
      UNTIL u < 1
      RETURN ToString(0)
    END IF

    PROCEDURE IntFromString(s) RETURNS INTEGER
      BEGIN
        RETURN INTEGER(s)
      END

    SET halfLength TO (beta + 1) DIV 2
    SET halfStr TO RepeatChar("9", halfLength)
    SET halfInt TO IntFromString(halfStr)

    FUNCTION ReverseString(ss) RETURNS STRING
      BEGIN
        SET resultStr TO ""
        SET pos TO LENGTH(ss) - 1
        WHILE pos >= 0 DO
          SET resultStr TO resultStr + ss[pos]
          SET pos TO pos - 1
        END WHILE
        RETURN resultStr
      END

    WHILE halfInt > 0 DO
      SET halfStrRepr TO ToString(halfInt)
      IF (beta - 2 * (beta DIV 2)) = 0 THEN
        SET concatStr TO halfStrRepr + ReverseString(halfStrRepr)
      ELSE
        SET truncSubstr TO ""
        SET idx TO 0
        WHILE idx < LENGTH(halfStrRepr) - 1 DO
          SET truncSubstr TO truncSubstr + halfStrRepr[idx]
          SET idx TO idx + 1
        END WHILE
        SET concatStr TO halfStrRepr + ReverseString(truncSubstr)
      END IF
      SET candidate TO IntFromString(concatStr)
      IF IsDivisible(candidate, gamma) THEN
        RETURN ToString(candidate)
      END IF
      SET halfInt TO halfInt - 1
    END WHILE
    
    RETURN ToString(0)
  END FUNCTION
END CLASS