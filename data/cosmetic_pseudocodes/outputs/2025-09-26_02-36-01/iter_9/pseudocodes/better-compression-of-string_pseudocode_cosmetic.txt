CLASS Solution

    FUNCTION betterCompression(compressed)
        FUNCTION isAlpha(ch)
            RETURN ((ch >= "a") AND (ch <= "z")) OR ((ch >= "A") AND (ch <= "Z"))
        END FUNCTION

        FUNCTION toInt(ch)
            RETURN ORD(ch) - ORD("0")
        END FUNCTION

        FUNCTION dictGet(d, k)
            IF k IN d THEN
                RETURN d[k]
            ELSE
                RETURN 0
            END IF
        END FUNCTION

        FUNCTION dictSetAdd(d, k, v)
            d[k] = dictGet(d, k) + v
        END FUNCTION

        FUNCTION sortAlphaKeys(d)
            LOCAL keysList = []
            LOCAL idx = 1
            FOR key IN d
                keysList.APPEND(key)
            END FOR

            FUNCTION swap(a, b)
                LOCAL tmp = keysList[a]
                keysList[a] = keysList[b]
                keysList[b] = tmp
            END FUNCTION

            LOCAL n = LEN(keysList)
            LOCAL i = 1
            WHILE i < n
                LOCAL j = i + 1
                WHILE j <= n
                    IF NOT (keysList[i] <= keysList[j]) THEN
                        swap(i, j)
                    END IF
                    j = j + 1
                END WHILE
                i = i + 1
            END WHILE

            RETURN keysList
        END FUNCTION

        LOCAL xA1B = {}
        LOCAL xI9J = ""
        LOCAL n3K4 = 0

        LOCAL iP = 1
        WHILE iP <= LEN(compressed)
            LOCAL z7V = compressed[iP]
            IF isAlpha(z7V) THEN
                IF NOT (xI9J = "") THEN
                    dictSetAdd(xA1B, xI9J, n3K4)
                END IF
                xI9J = z7V
                n3K4 = 0
            ELSE
                n3K4 = (n3K4 * (5 + 5)) + toInt(z7V)
            END IF
            iP = iP + 1
        END WHILE

        IF NOT (xI9J = "") THEN
            dictSetAdd(xA1B, xI9J, n3K4)
        END IF

        LOCAL sF = []
        LOCAL sortedKeys = sortAlphaKeys(xA1B)

        LOCAL idxR = 1
        WHILE idxR <= LEN(sortedKeys)
            LOCAL keyC = sortedKeys[idxR]
            LOCAL valS = xA1B[keyC]
            LOCAL part = keyC + TO_STRING(valS)
            sF.APPEND(part)
            idxR = idxR + 1
        END WHILE

        LOCAL resultStr = ""
        LOCAL ixS = 1
        WHILE ixS <= LEN(sF)
            resultStr = resultStr + sF[ixS]
            ixS = ixS + 1
        END WHILE
        RETURN resultStr
    END FUNCTION

END CLASS