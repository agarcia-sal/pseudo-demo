Given any input pseudocode, generate a thoroughly transformed version that satisfies all of the following conditions:

- Preserve exact original semantics: the output pseudocode must produce the same outputs, have identical side effects, and uphold every logical behavior of the input.

- Keep all class names, method/function names, signatures (names, parameter types/names/order, and return types if specified), class inheritance, and declared object layouts unchanged, precisely as in the original input. Do not rename or restructure these interface elements or alter their hierarchical organization in any way.

- For all other code components (local/temporary variables, parameter variables, control flow, expressions, literals, data traversal, helper functions, and formatting), apply maximal and layered rewriting to maximize syntactic and structural divergence, including but not limited to:

  • Replace all loop constructs with logically equivalent alternate types (for ↔ while ↔ repeat-until ↔ recursion ↔ tail-recursion) ensuring the same iteration behavior.

  • Globally replace every local, temporary, and parameter variable identifier with freshly generated, unrelated, semantically consistent names with no overlap or semantic hints from any original local or temporary identifier.

  • Decompose or combine statements, split or merge conditionals, reorder safe independent operations, change the order or style of data traversal when output order or side effects are invariant.

  • Re-express all expressions deeply by applying arithmetic/logical identities, use De Morgan’s laws to reframe conditionals, expand or contract compound assignments, substitute equivalent expressions, create or remove intermediate temps, and rewrite constant literals as expressions or defined constants.

  • Transform control flow by inlining or extracting subexpressions or helper routines, rearranging early return positions versus deferred return variables, and reshaping nesting levels of conditionals and loops.

  • Convert direct built-in or standard library calls into custom local helper procedures implementing identical logic, or replace custom helper calls with built-in equivalents, wherever functional equivalence is preserved.

  • Vary all formatting details thoroughly: alter indentation schemes, line breaks, whitespace usage, block delimiters, keyword casing, and code ordering stylistically.

- Do not add, remove, optimize away, or abstract any algorithmic steps, data structure usages, or conceptual components. The full original logic and steps must remain intact.

- Do not rename, reshape, or alter external APIs, interfaces, or any identifier explicitly defining the program’s exposed contract.

- The output must consist solely of the fully rewritten pseudocode, formatted as a complete, standalone piece of code, exhibiting a wholly independent implementation style with minimal lexical or structural resemblance to the input apart from the intentionally preserved names noted above.

- This transformation prompt applies universally to any pseudocode input irrespective of domain or problem context.

- Your response must be strictly the transformed pseudocode text only; omit explanations, comments, annotations, or any other supplementary content.

Emphasize comprehensive orthogonal rewriting across identifiers, control flow, expressions, data traversals, helper routines, constants, and formatting to maximize surface and structural divergence while preserving all required interface elements verbatim and exact program semantics.

Output only the transformed pseudocode.