CLASS Solution  
    FUNCTION resultArray(nums)  
        INITIALIZE groupA WITH [nums[0]]  
        INITIALIZE groupB WITH [nums[1]]  
        INITIALIZE sortedA WITH [nums[0]]  
        INITIALIZE sortedB WITH [nums[1]]  
        
        FUNCTION countGreater(sortedList, target)  
            DEFINE left AS 0  
            DEFINE right AS LENGTH(sortedList)  
            
            WHILE left < right  
                DEFINE mid AS (left + right) DIVIDED BY 2  
                IF sortedList[mid] <= target  
                    SET left TO mid + 1  
                ELSE  
                    SET right TO mid  
                END IF  
            END WHILE  
            
            RETURN LENGTH(sortedList) - left  
        END FUNCTION  
        
        FOR index IN RANGE 2 TO LENGTH(nums) - 1  
            DEFINE currentValue AS nums[index]  
            DEFINE greaterInA AS countGreater(sortedA, currentValue)  
            DEFINE greaterInB AS countGreater(sortedB, currentValue)  
            
            IF greaterInA > greaterInB THEN  
                APPEND currentValue TO groupA  
                INSERT_INTO_SORTED_LIST(sortedA, currentValue)  
            ELSE IF greaterInA < greaterInB THEN  
                APPEND currentValue TO groupB  
                INSERT_INTO_SORTED_LIST(sortedB, currentValue)  
            ELSE  
                IF LENGTH(groupA) <= LENGTH(groupB) THEN  
                    APPEND currentValue TO groupA  
                    INSERT_INTO_SORTED_LIST(sortedA, currentValue)  
                ELSE  
                    APPEND currentValue TO groupB  
                    INSERT_INTO_SORTED_LIST(sortedB, currentValue)  
                END IF  
            END IF  
        END FOR  
        
        RETURN groupA CONCATENATED_WITH groupB  
        
        FUNCTION INSERT_INTO_SORTED_LIST(sortedList, element)  
            DEFINE low AS 0  
            DEFINE high AS LENGTH(sortedList)  
            
            WHILE low < high  
                DEFINE mid AS (low + high) DIVIDED BY 2  
                IF sortedList[mid] < element  
                    SET low TO mid + 1  
                ELSE  
                    SET high TO mid  
                END IF  
            END WHILE  
            
            INSERT element INTO sortedList AT POSITION low  
        END FUNCTION  
    END FUNCTION  
END CLASS