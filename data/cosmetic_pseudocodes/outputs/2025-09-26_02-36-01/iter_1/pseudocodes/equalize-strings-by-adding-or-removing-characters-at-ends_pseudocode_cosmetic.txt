CLASS Solution  
    FUNCTION minOperations(initial parameter TO string, target parameter TO string) RETURNS integer  
        DEFINE lengthInitial AS LENGTH(initial)  
        DEFINE lengthTarget AS LENGTH(target)  
        DEFINE dpMatrix AS LIST OF LISTS WITH (lengthInitial + 1) ROWS AND (lengthTarget + 1) COLUMNS FILLED WITH 0  
        DEFINE longestCommonSubstring AS 0  

        FOR indexInitial FROM 1 TO lengthInitial  
            FOR indexTarget FROM 1 TO lengthTarget  
                IF initial[indexInitial - 1] == target[indexTarget - 1] THEN  
                    dpMatrix[indexInitial][indexTarget] = dpMatrix[indexInitial - 1][indexTarget - 1] + 1  
                    IF dpMatrix[indexInitial][indexTarget] > longestCommonSubstring THEN  
                        longestCommonSubstring = dpMatrix[indexInitial][indexTarget]  
                    END IF  
                END IF  
            END FOR  
        END FOR  

        RETURN lengthInitial + lengthTarget - 2 * longestCommonSubstring  
    END FUNCTION  
END CLASS