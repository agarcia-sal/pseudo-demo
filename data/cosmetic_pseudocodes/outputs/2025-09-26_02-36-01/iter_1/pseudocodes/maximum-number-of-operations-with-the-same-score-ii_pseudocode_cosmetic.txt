CLASS Solution  
    FUNCTION maxOperations(nums)  
        FUNCTION explore(left, right, target, cache)  
            IF left >= right THEN  
                RETURN 0  
            END IF  
            KEY = (left, right, target)  
            IF cache CONTAINS KEY THEN  
                RETURN cache[KEY]  
            END IF  
            best = 0  
            sumLeftPair = nums[left] + nums[left + 1]  
            IF sumLeftPair == target THEN  
                best = MAX(best, 1 + explore(left + 2, right, target, cache))  
            END IF  
            sumRightPair = nums[right] + nums[right - 1]  
            IF sumRightPair == target THEN  
                best = MAX(best, 1 + explore(left, right - 2, target, cache))  
            END IF  
            sumOuterPair = nums[left] + nums[right]  
            IF sumOuterPair == target THEN  
                best = MAX(best, 1 + explore(left + 1, right - 1, target, cache))  
            END IF  
            cache[KEY] = best  
            RETURN best  
        END FUNCTION  
        
        total_len = LENGTH(nums)  
        option1 = 1 + explore(2, total_len - 1, nums[0] + nums[1], {})  
        option2 = 1 + explore(0, total_len - 3, nums[total_len - 1] + nums[total_len - 2], {})  
        option3 = 1 + explore(1, total_len - 2, nums[0] + nums[total_len - 1], {})  
        
        RETURN MAX(option1, option2, option3)  
    END FUNCTION  
END CLASS