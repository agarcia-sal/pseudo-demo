CLASS Solution  
    FUNCTION timeTaken(edges)  
        SET node_count TO LENGTH OF edges PLUS 1  
        SET adjacency_map TO EMPTY DICTIONARY  
        
        FOR each pair (u, v) IN edges  
            IF u NOT IN adjacency_map THEN  
                SET adjacency_map[u] TO EMPTY LIST  
            END IF  
            IF v NOT IN adjacency_map THEN  
                SET adjacency_map[v] TO EMPTY LIST  
            END IF  
            APPEND v TO adjacency_map[u]  
            APPEND u TO adjacency_map[v]  
        END FOR  
        
        FUNCTION bfs(source)  
            CREATE visited_nodes AS ARRAY OF False WITH SIZE node_count  
            CREATE bfs_queue AS NEW double-ended queue  
            ADD (source, 0) TO bfs_queue  
            MARK visited_nodes[source] AS True  
            SET longest_duration TO 0  
            
            LOOP WHILE bfs_queue IS NOT EMPTY  
                REMOVE leftmost element FROM bfs_queue AND ASSIGN TO (current_node, elapsed_time)  
                IF elapsed_time > longest_duration THEN  
                    longest_duration = elapsed_time  
                END IF  
                
                FOR each adjacent_node IN adjacency_map[current_node] OR EMPTY LIST  
                    IF visited_nodes[adjacent_node] IS False THEN  
                        visited_nodes[adjacent_node] = True  
                        IF adjacent_node MOD 2 = 0 THEN  
                            ADD (adjacent_node, elapsed_time + 2) TO bfs_queue  
                        ELSE  
                            ADD (adjacent_node, elapsed_time + 1) TO bfs_queue  
                        END IF  
                    END IF  
                END FOR  
            END LOOP  
            
            RETURN longest_duration  
        END FUNCTION  
        
        INITIALIZE result_times AS ARRAY OF 0 WITH LENGTH node_count  
        FOR index FROM 0 TO node_count - 1  
            SET result_times[index] TO bfs(index)  
        END FOR  
        
        RETURN result_times  
    END FUNCTION  
END CLASS