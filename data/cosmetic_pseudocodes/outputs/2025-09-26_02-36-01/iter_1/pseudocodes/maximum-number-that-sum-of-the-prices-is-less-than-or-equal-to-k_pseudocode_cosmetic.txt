CLASS Solution  
    FUNCTION findMaximumNumber(k, x)  
        FUNCTION bit_count(n, position)  
            LET total_bits = 0  
            LET segment = 2 ^ position  
            LET complete_segments = n \ segment  
            total_bits = (complete_segments \ 2) * segment  
            IF complete_segments MOD 2 == 1 THEN  
                total_bits = total_bits + (n MOD segment) + 1  
            END IF  
            RETURN total_bits  
        END FUNCTION  

        FUNCTION total_price(n)  
            LET sum_price = 0  
            LET index = 1  
            WHILE (2 ^ (index * x - 1)) <= n DO  
                sum_price = sum_price + bit_count(n, index * x - 1)  
                index = index + 1  
            END WHILE  
            RETURN sum_price  
        END FUNCTION  

        LET start = 1  
        LET end_ = 2 ^ 60  
        WHILE start <= end_ DO  
            LET middle = (start + end_) \ 2  
            IF total_price(middle) <= k THEN  
                start = middle + 1  
            ELSE  
                end_ = middle - 1  
            END IF  
        END WHILE  
        RETURN end_  
    END FUNCTION  
END CLASS