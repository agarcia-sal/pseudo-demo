```
CLASS Solution
    FUNCTION countOfPairs(n parameter, x parameter, y parameter) RETURNS list of integer
        INITIALIZE counts AS a list of length n FILLED WITH 0

        FUNCTION bfs(origin parameter)
            CREATE visited ARRAY of size n + 1 FILLED WITH False
            CREATE dist ARRAY of size n + 1 FILLED WITH 0
            CREATE deque QUEUE and ENQUEUE origin
            visited[origin] = True

            WHILE QUEUE is NOT empty
                SET node TO DEQUEUE from QUEUE
                
                DEFINE neighbors AS [node - 1, node + 1]

                FOR each adj IN neighbors
                    IF adj >= 1 AND adj <= n AND visited[adj] IS False THEN
                        visited[adj] = True
                        dist[adj] = dist[node] + 1
                        ENQUEUE adj INTO QUEUE
                    END IF
                END FOR

                IF node == x AND NOT visited[y] THEN
                    visited[y] = True
                    dist[y] = dist[node] + 1
                    ENQUEUE y INTO QUEUE
                END IF

                IF node == y AND NOT visited[x] THEN
                    visited[x] = True
                    dist[x] = dist[node] + 1
                    ENQUEUE x INTO QUEUE
                END IF
            END WHILE

            FOR idx FROM 1 TO n DO
                IF dist[idx] > 0 THEN
                    counts[dist[idx] - 1] = counts[dist[idx] - 1] + 1
                END IF
            END FOR
        END FUNCTION

        FOR position FROM 1 TO n DO
            CALL bfs WITH position
        END FOR

        RETURN counts
    END FUNCTION
END CLASS
```