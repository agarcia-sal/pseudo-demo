CLASS Solution
    FUNCTION maximumLength(nums)
        DEFINE freq AS a mapping from elements to their frequencies in nums
        INITIALIZE cache AS an empty mapping

        FUNCTION computeChainLength(value)
            IF value NOT IN freq OR freq[value] < 2 THEN
                IF value IN freq AND freq[value] >= 1 THEN
                    RETURN 1
                ELSE
                    RETURN 0
                END IF
            END IF
            IF value IN cache THEN
                RETURN cache[value]
            END IF
            LET squared_value = value * value
            LET chain_length = computeChainLength(squared_value) + 2
            cache[value] = chain_length
            RETURN chain_length
        END FUNCTION

        LET longest = 1
        FOR EACH element IN freq
            IF element == 1 THEN
                LET count = freq[element]
                LET adjusted_length = count - 1 - ((count MOD 2) * 2)
                longest = MAX(longest, adjusted_length)
            ELSE
                longest = MAX(longest, computeChainLength(element))
            END IF
        END FOR

        RETURN longest
    END FUNCTION
END CLASS