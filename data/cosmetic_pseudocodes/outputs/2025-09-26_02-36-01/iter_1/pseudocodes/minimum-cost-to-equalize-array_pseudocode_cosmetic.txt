CLASS Solution  
    FUNCTION minCostToEqualizeArray(nums cost1 cost2)  
        CONSTANT MODULUS = 1000000007  
        INTEGER length = LENGTH(nums)  
        INTEGER smallest = MIN(nums)  
        INTEGER largest = MAX(nums)  
        INTEGER sumValues = 0  
        FOR EACH number IN nums  
            sumValues = sumValues + number  
        END FOR  

        IF (cost1 * 2 <= cost2) OR (length < 3) THEN  
            INTEGER gapSum = largest * length - sumValues  
            RETURN (cost1 * gapSum) MOD MODULUS  
        END IF  

        FUNCTION computeCost(target)  
            INTEGER gapMax = target - smallest  
            INTEGER gapSumTotal = target * length - sumValues  
            INTEGER pairsUsed = MIN(gapSumTotal / 2, gapSumTotal - gapMax)  
            INTEGER costCalculation = cost1 * gapSumTotal - 2 * pairsUsed * cost1 + cost2 * pairsUsed  
            RETURN costCalculation  
        END FUNCTION  

        INTEGER answer = INFINITY  
        FOR candidate FROM largest TO (2 * largest) - 1  
            INTEGER currentCost = computeCost(candidate)  
            IF currentCost < answer THEN  
                answer = currentCost  
            END IF  
        END FOR  

        RETURN answer MOD MODULUS  
    END FUNCTION  
END CLASS