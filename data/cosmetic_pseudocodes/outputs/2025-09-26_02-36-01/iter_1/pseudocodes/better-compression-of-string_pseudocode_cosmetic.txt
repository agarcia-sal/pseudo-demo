CLASS Solution  
    FUNCTION betterCompression(compressed)  
        INITIALIZE char_count AS a dictionary defaulting to 0  
        INITIALIZE current_char AS null  
        INITIALIZE current_count AS 0  
        FOR idx FROM 0 TO LENGTH(compressed) - 1  
            LET ch = compressed[idx]  
            IF ch MATCHES alphabetic character THEN  
                IF current_char IS NOT null THEN  
                    char_count[current_char] = char_count[current_char] + current_count  
                END IF  
                current_char = ch  
                current_count = 0  
            ELSE  
                current_count = current_count * 10 + TO_INTEGER(ch)  
            END IF  
        END FOR  
        IF current_char IS NOT null THEN  
            char_count[current_char] = char_count[current_char] + current_count  
        END IF  
        SET output_parts TO an empty list  
        FOR character IN SORTED_KEYS(char_count)  
            APPEND character + TO_STRING(char_count[character]) TO output_parts  
        END FOR  
        RETURN JOIN(output_parts, "")  
    END FUNCTION  
END CLASS