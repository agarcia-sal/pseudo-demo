CLASS Solution  
    FUNCTION smallestNumber(num, t)  
        primeCount, isDivisible <- self._getPrimeCount(t)  
        IF isDivisible IS FALSE THEN  
            RETURN "-1"  
        END IF  

        factorCount <- self._getFactorCount(primeCount)  
        totalFactors <- SUM of all values in factorCount  
        IF totalFactors > LENGTH(num) THEN  
            resultStr <- EMPTY STRING  
            FOR digit, freq IN factorCount ITEMS  
                APPEND digit REPEATED freq TIMES TO resultStr  
            END FOR  
            RETURN resultStr  
        END IF  

        primeCountPrefix <- Counter()  
        FOR char IN num DO  
            primeCountPrefix <- primeCountPrefix + FACTOR_COUNTS(INT(char))  
        END FOR  

        firstZeroIndex <- LENGTH(num)  
        FOR i FROM 0 TO LENGTH(num)-1 DO  
            IF num[i] = '0' THEN  
                firstZeroIndex <- i  
                BREAK  
            END IF  
        END FOR  

        IF firstZeroIndex = LENGTH(num) AND primeCount <= primeCountPrefix THEN  
            RETURN num  
        END IF  

        FOR i, c IN ENUMERATE(num) IN REVERSE ORDER DO  
            d <- INT(c)  
            primeCountPrefix <- primeCountPrefix - FACTOR_COUNTS(d)  
            spaceAfter <- LENGTH(num) - 1 - i  

            IF i <= firstZeroIndex THEN  
                FOR biggerDigit FROM d+1 TO 9 DO  
                    factorsAfter <- self._getFactorCount(primeCount - primeCountPrefix - FACTOR_COUNTS(biggerDigit))  
                    IF SUM of values in factorsAfter <= spaceAfter THEN  
                        fillOnes <- spaceAfter - SUM of values in factorsAfter  
                        prefix <- SUBSTRING(num, 0, i)  
                        suffix <- ""  
                        FOR digit, freq IN factorsAfter ITEMS  
                            suffix <- suffix + (digit REPEATED freq TIMES)  
                        END FOR  
                        RETURN prefix + STRING(biggerDigit) + ('1' REPEATED fillOnes TIMES) + suffix  
                    END IF  
                END FOR  
            END IF  
        END FOR  

        factorCount <- self._getFactorCount(primeCount)  
        onesCount <- LENGTH(num) + 1 - SUM of values in factorCount  
        result <- ('1' REPEATED onesCount TIMES)  
        FOR digit, freq IN factorCount ITEMS  
            result <- result + (digit REPEATED freq TIMES)  
        END FOR  
        RETURN result  
    END FUNCTION  

    FUNCTION _getPrimeCount(t)  
        count <- Counter()  
        FOR prime IN [2, 3, 5, 7] DO  
            WHILE t MOD prime = 0 DO  
                t <- t DIV prime  
                count[prime] <- count[prime] + 1  
            END WHILE  
        END FOR  
        RETURN count, (t = 1)  
    END FUNCTION  

    FUNCTION _getFactorCount(count)  
        count8, rem2 <- DIVMOD(count[2], 3)  
        count9, count3 <- DIVMOD(count[3], 2)  
        count4, count2 <- DIVMOD(rem2, 2)  

        count6 <- 0  
        IF count2 = 1 AND count3 = 1 THEN  
            count2 <- 0  
            count3 <- 0  
            count6 <- 1  
        END IF  

        IF count3 = 1 AND count4 = 1 THEN  
            count2 <- 1  
            count6 <- 1  
            count3 <- 0  
            count4 <- 0  
        END IF  

        RETURN Counter({  
            '2': count2,  
            '3': count3,  
            '4': count4,  
            '5': count[5],  
            '6': count6,  
            '7': count[7],  
            '8': count8,  
            '9': count9  
        })  
    END FUNCTION  
END CLASS