CLASS Solution  
    FUNCTION countNonDecreasingSubarrays(nums k)  
        LET n BE LENGTH(nums)  
        
        FUNCTION canMakeNonDecreasing(start length)  
            LET cost BE 0  
            LET maxVal BE nums[start]  
            FOR offset IN RANGE(1, length)  
                LET currentVal BE nums[start + offset]  
                IF currentVal < maxVal THEN  
                    cost = cost + (maxVal - currentVal)  
                END IF  
                maxVal = MAX(maxVal, currentVal)  
                IF cost > k THEN  
                    RETURN False  
                END IF  
            END FOR  
            RETURN True  
        END FUNCTION  
        
        LET totalSubarrays BE n * (n + 1) / 2  
        LET invalidCount BE 0  
        
        FOR startIndex FROM 0 TO n - 1 STEP 1  
            LET low BE 1  
            LET high BE n - startIndex  
            WHILE low <= high DO  
                LET mid BE (low + high) // 2  
                IF canMakeNonDecreasing(startIndex mid) THEN  
                    low = mid + 1  
                ELSE  
                    high = mid - 1  
                END IF  
            END WHILE  
            invalidCount = invalidCount + (n - startIndex - high)  
        END FOR  
        
        RETURN totalSubarrays - invalidCount  
    END FUNCTION  
END CLASS