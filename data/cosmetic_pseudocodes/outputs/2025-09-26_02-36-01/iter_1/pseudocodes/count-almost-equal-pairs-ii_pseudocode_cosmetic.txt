CLASS Solution  
    FUNCTION countPairs(nums)  
        CALL nums.sort()  
        SET pairsCount TO 0  
        SET frequencyMap TO dictionary WITH default zero  
        FOR num IN nums DO  
            INIT flippedNumbers AS set CONTAINING num  
            CONVERT num TO stringNum (list of chars)  
            SET length TO size of stringNum  
            FOR endIndex FROM length - 1 DOWNTO 1 DO  
                FOR startIndex FROM 0 TO endIndex - 1 DO  
                    SWAP stringNum[startIndex], stringNum[endIndex]  
                    ADD integer formed by joining stringNum TO flippedNumbers  
                    FOR secondEnd FROM length - 1 DOWNTO startIndex + 2 DO  
                        FOR secondStart FROM startIndex + 1 TO secondEnd - 1 DO  
                            SWAP stringNum[secondStart], stringNum[secondEnd]  
                            ADD integer formed by joining stringNum TO flippedNumbers  
                            SWAP stringNum[secondStart], stringNum[secondEnd]  
                        END FOR  
                    END FOR  
                    SWAP stringNum[startIndex], stringNum[endIndex]  
                END FOR  
            END FOR  
            FOR val IN flippedNumbers DO  
                INCREASE pairsCount BY frequencyMap[val]  
            END FOR  
            INCREMENT frequencyMap[num] BY 1  
        END FOR  
        RETURN pairsCount  
    END FUNCTION  
END CLASS