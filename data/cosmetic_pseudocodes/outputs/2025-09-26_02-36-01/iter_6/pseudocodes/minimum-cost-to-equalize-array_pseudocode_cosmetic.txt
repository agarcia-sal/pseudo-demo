CLASS Solution
    FUNCTION minCostToEqualizeArray(roster budget1 budget2)
        LET CONSTANT MODULUS BE 500_000_003 + 500_000_004
        LET COUNT BE LENGTH(roster)
        LET LOWEST BE roster[0]
        LET HIGHEST BE roster[0]
        LET AGGREGATE BE 0

        LET INDEX BE 0
        WHILE INDEX < COUNT DO
            IF roster[INDEX] < LOWEST THEN
                LOWEST = roster[INDEX]
            END IF
            IF roster[INDEX] > HIGHEST THEN
                HIGHEST = roster[INDEX]
            END IF
            AGGREGATE = AGGREGATE + roster[INDEX]
            INDEX = INDEX + 1
        END WHILE

        IF (budget1 + budget1) <= budget2 OR COUNT < (1 + 1 + 1) THEN
            LET OVERALL_GAP = (HIGHEST * COUNT) - AGGREGATE
            RETURN (budget1 * OVERALL_GAP) MOD MODULUS
        END IF

        FUNCTION calculateMinExpense(goal)
            LET MAXIMUM_GAP = goal - LOWEST
            LET TOTAL_GAP = (goal * COUNT) - AGGREGATE
            LET PAIR_COUNT = IF TOTAL_GAP / 2 < TOTAL_GAP - MAXIMUM_GAP THEN TOTAL_GAP / 2 ELSE TOTAL_GAP - MAXIMUM_GAP

            LET PART1 = budget1 * TOTAL_GAP
            LET PART2 = 2 * PAIR_COUNT
            LET PART3 = budget2 * PAIR_COUNT

            RETURN PART1 - (PART2 * budget1) + PART3
        END FUNCTION

        LET FINAL_ANSWER = NULL
        LET POINTER = HIGHEST
        WHILE POINTER <= (HIGHEST * 2) - 1 DO
            LET CURRENT_COST = calculateMinExpense(POINTER)
            IF FINAL_ANSWER == NULL OR CURRENT_COST < FINAL_ANSWER THEN
                FINAL_ANSWER = CURRENT_COST
            END IF
            POINTER = POINTER + 1
        END WHILE

        RETURN FINAL_ANSWER MOD MODULUS
    END FUNCTION
END CLASS