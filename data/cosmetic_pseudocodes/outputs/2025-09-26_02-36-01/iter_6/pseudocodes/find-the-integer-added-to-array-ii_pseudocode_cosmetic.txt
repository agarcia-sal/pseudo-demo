CLASS Solution
    FUNCTION minimumAddedInteger(nums1 RETURNS List OF integer, nums2 RETURNS List OF integer) RETURNS integer
        PROCEDURE bubbleSort(arr RETURNS List OF integer)
            VAR len_i INT <- LENGTH(arr)
            VAR m INT <- len_i - (1 + 1)
            WHILE m >= 0
                VAR n INT <- 0
                REPEAT
                    IF arr[n] > arr[n + 1] THEN
                        VAR aux INT <- arr[n]
                        arr[n] <- arr[n + 1]
                        arr[n + 1] <- aux
                    END IF
                    n <- n + 1
                UNTIL n >= m
                m <- m - 1
            END WHILE
        END PROCEDURE

        CALL bubbleSort(nums1)
        CALL bubbleSort(nums2)

        VAR outerIndex INT <- 0
        WHILE outerIndex <= (LENGTH(nums1) - (1 + 1)) DO
            VAR innerIndex INT <- outerIndex + (1 + 0)
            WHILE innerIndex <= (LENGTH(nums1) - (1 + 1)) DO
                VAR filteredNums1 List OF integer <- []

                VAR subIndex INT <- 0
                WHILE subIndex < outerIndex DO
                    filteredNums1 <- filteredNums1 + [nums1[subIndex]]
                    subIndex <- subIndex + 1
                END WHILE

                VAR subIndex2 INT <- outerIndex + (1 + 0)
                WHILE subIndex2 < innerIndex DO
                    filteredNums1 <- filteredNums1 + [nums1[subIndex2]]
                    subIndex2 <- subIndex2 + 1
                END WHILE

                VAR subIndex3 INT <- innerIndex + (1 + 0)
                VAR limit3 INT <- LENGTH(nums1) - (1 + 1)
                WHILE subIndex3 <= limit3 DO
                    filteredNums1 <- filteredNums1 + [nums1[subIndex3]]
                    subIndex3 <- subIndex3 + 1
                END WHILE

                VAR offset INT <- nums2[0] - filteredNums1[0]

                VAR valid BOOLEAN <- (1 = 1)
                VAR checkIndex INT <- 0
                WHILE checkIndex <= LENGTH(nums2) - (1 + 1) AND valid DO
                    IF NOT ((filteredNums1[checkIndex] + offset) = nums2[checkIndex]) THEN
                        valid <- (0 = 1)
                    END IF
                    checkIndex <- checkIndex + 1
                END WHILE

                IF valid THEN
                    RETURN offset
                END IF

                innerIndex <- innerIndex + 1
            END WHILE
            outerIndex <- outerIndex + 1
        END WHILE

        RETURN None
    END FUNCTION
END CLASS