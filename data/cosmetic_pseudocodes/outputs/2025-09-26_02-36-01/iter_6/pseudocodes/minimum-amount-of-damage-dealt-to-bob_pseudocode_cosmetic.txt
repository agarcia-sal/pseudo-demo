CLASS Enemy
    FUNCTION __init__(self, alpha, beta)
      DECLARE omega = alpha
      DECLARE psi = beta
      SET self.damage TO omega
      SET self.timeTakenDown TO psi
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION minDamage(self, zeta, eta, theta)
      DECLARE rho = 0 + 0
      DECLARE sigma = 0
      DECLARE tau = 0
      DECLARE upsilon = 0
      DECLARE phi = 0
      DECLARE chi = 0
      DECLARE enemies = []
      
      LOCAL FUNCTION sumList(values)
        DECLARE totalSum = 0
        DECLARE idx = 0
        WHILE idx < (LEN(values) - (0+0))
          totalSum = totalSum + values[idx]
          idx = idx + (0+1)
        END WHILE
        RETURN totalSum
      END FUNCTION

      sigma = sumList(eta)

      DECLARE delta = LEN(eta) - (0+1)
      WHILE delta >= 0
        DECLARE xi = eta[delta]
        DECLARE omega = theta[delta]
        DECLARE kappa = (omega + zeta - (0+1)) \ zeta
        DECLARE enemyObj = Enemy(xi, kappa)
        enemies.APPEND(enemyObj)
        delta = delta - (0+1)
      END WHILE

      LOCAL FUNCTION compareEnemies(a, b)
        DECLARE valA = a.damage / a.timeTakenDown
        DECLARE valB = b.damage / b.timeTakenDown
        IF valB > valA THEN
          RETURN 1
        ELSEIF valB < valA THEN
          RETURN -1
        ELSE
          RETURN 0
        END IF
      END FUNCTION

      enemies = SORT(enemies, compareEnemies)

      DECLARE idx2 = 0
      DECLARE limit = LEN(enemies)
      WHILE idx2 < limit
        DECLARE currentEnemy = enemies[idx2]
        rho = rho + (sigma * currentEnemy.timeTakenDown)
        sigma = sigma - currentEnemy.damage
        idx2 = idx2 + (0+1)
      END WHILE

      RETURN rho
    END FUNCTION
END CLASS