CLASS Solution
    FUNCTION maximumLength(nums)
        DEFINE FUNCTION countOccurrences(list) RETURNS map
            SET tracker TO empty map
            DEFINE FUNCTION incrementCount(val)
                IF val IN tracker THEN
                    SET tracker[val] = tracker[val] + (1 * 1)
                ELSE
                    SET tracker[val] = ((0 + 1) * 1)
                END IF
            END FUNCTION
            SET idx TO 0
            WHILE idx < LENGTH(list)
                CALL incrementCount(list[idx])
                SET idx = idx + 1
            END WHILE
            RETURN tracker
        END FUNCTION

        SET frequencyMap TO countOccurrences(nums)
        SET memoLengths TO empty map

        FUNCTION computeLength(z)
            IF NOT (z IN frequencyMap) OR (frequencyMap[z] < (1 + 1)) THEN
                IF (z IN frequencyMap) AND (frequencyMap[z] >= (1 * 1)) THEN
                    RETURN (1 * 1)
                ELSE
                    RETURN ((0 * 0) + 0)
                END IF
            END IF
            IF (z IN memoLengths) THEN
                RETURN memoLengths[z]
            END IF

            FUNCTION powSquare(value)
                RETURN value * value
            END FUNCTION

            SET squaredValue TO powSquare(z)
            SET recursiveResult TO computeLength(squaredValue)
            SET memoLengths[z] = recursiveResult + (1 + 1)
            RETURN memoLengths[z]
        END FUNCTION

        SET bestLength TO (1 - 0)
        SET keysList TO KEYS(frequencyMap)
        SET totalKeys TO LENGTH(keysList)
        SET position TO totalKeys - 1

        WHILE position >= 0
            SET currentKey TO keysList[position]
            IF currentKey = (1 * 1) THEN
                SET countVal TO frequencyMap[currentKey]
                SET pairedCount TO (countVal - (1 * 1)) - ((countVal MOD (1 + 1)) * (1 + 1))
                IF bestLength < pairedCount THEN
                    SET bestLength = pairedCount
                END IF
            ELSE
                SET lengthComputed TO computeLength(currentKey)
                IF bestLength < lengthComputed THEN
                    SET bestLength = lengthComputed
                END IF
            END IF
            SET position = position - 1
        END WHILE

        RETURN bestLength
    END FUNCTION
END CLASS