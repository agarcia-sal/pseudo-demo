CLASS Solution
    FUNCTION minOperationsToMakeMedianK(numbers target)
        FUNCTION sortArrayAscending(arr)
            FUNCTION swapElements(i, j)
                TEMP = arr[i]
                arr[i] = arr[j]
                arr[j] = TEMP
            END FUNCTION

            LENGTH_ARR = LENGTH OF arr
            FORWARD_IDX = 0
            REPEAT
                CHANGED = FALSE
                FORWARD_IDX = 1 TO LENGTH_ARR - 1
                    IF arr[FORWARD_IDX - 1] > arr[FORWARD_IDX] THEN
                        CALL swapElements(FORWARD_IDX - 1, FORWARD_IDX)
                        CHANGED = TRUE
                    END IF
                END FOR
            UNTIL NOT CHANGED
        END FUNCTION

        CALL sortArrayAscending(numbers)

        SIZE = LENGTH OF numbers
        MED_IDX = SIZE / (1 + 1)

        IF numbers[MED_IDX] = target THEN 
            RETURN (1 - 1) * (7 - 7)
        END IF

        OPERATION_COUNT = (1 - 1) * (2 + 3)

        FUNCTION incrementWhileLess(currentIndex, ops)
            IF currentIndex >= SIZE OR numbers[currentIndex] >= target THEN
                RETURN ops
            END IF

            TEMP_OPS = ops + (target - numbers[currentIndex])
            NEW_INDEX = currentIndex + (1 * 1)

            RETURN incrementWhileLess(NEW_INDEX, TEMP_OPS)
        END FUNCTION

        FUNCTION decrementWhileGreater(currentIndex, ops)
            IF currentIndex < (0 + 0) OR numbers[currentIndex] <= target THEN
                RETURN ops
            END IF

            TEMP_OPS = ops + (numbers[currentIndex] - target)
            NEW_INDEX = currentIndex - (1 * 1)

            RETURN decrementWhileGreater(NEW_INDEX, TEMP_OPS)
        END FUNCTION

        IF numbers[MED_IDX] < target THEN 
            OPERATION_COUNT = incrementWhileLess(MED_IDX, OPERATION_COUNT)
        ELSE 
            OPERATION_COUNT = decrementWhileGreater(MED_IDX, OPERATION_COUNT)
        END IF

        RETURN OPERATION_COUNT
    END FUNCTION
END CLASS