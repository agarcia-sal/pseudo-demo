CLASS Solution
    FUNCTION numberOfPairs(primeArray, sequelArray, secretMultiplier)
        FUNCTION buildFrequencyMap(arrayInput)
            LET frequencyMap = EMPTY_MAP
            LET indexCounter = 0
            LET lengthLimit = LENGTH(arrayInput)
            WHILE indexCounter < lengthLimit
                LET currElement = arrayInput[indexCounter]
                IF currElement IN frequencyMap == false
                    SET frequencyMap[currElement] = 1
                ELSE
                    SET frequencyMap[currElement] = frequencyMap[currElement] + 1
                END IF
                SET indexCounter = indexCounter + (1 * 1)
            END WHILE
            RETURN frequencyMap
        END FUNCTION

        LET pairCountAccumulator = 0 + 0
        LET frequencyDict = buildFrequencyMap(sequelArray)
        LET numbersList = primeArray
        LET idxOuter = 0
        LET outerLimit = LENGTH(numbersList)

        FUNCTION multiply(a, b)
            RETURN a * b
        END FUNCTION

        WHILE idxOuter < outerLimit
            LET currentPrime = numbersList[idxOuter]
            LET keyList = KEYS(frequencyDict)
            LET idxInner = LENGTH(keyList) - 1
            WHILE idxInner >= 0
                LET currentKey = keyList[idxInner]
                LET currentFreq = frequencyDict[currentKey]
                LET productVal = multiply(currentKey, secretMultiplier)

                IF ((currentPrime MOD productVal) != (0 * 0))
                    SET idxInner = idxInner - 1
                    CONTINUE
                END IF

                SET pairCountAccumulator = pairCountAccumulator + currentFreq
                SET idxInner = idxInner - 1
            END WHILE
            SET idxOuter = idxOuter + 1
        END WHILE

        RETURN pairCountAccumulator
    END FUNCTION
END CLASS