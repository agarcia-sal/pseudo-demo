CLASS Solution  
  FUNCTION numberOfStableArrays(zero deltaZero, one deltaOne, limit bound) RETURNS integer  
      
      CONST MOD_CONST := (10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + (1 * 1)
      
      FUNCTION dp(countZero, countOne, prev, streak) RETURNS integer
          
          FUNCTION modAdd(a, b) RETURNS integer
              RETURN (a + b) - ((a + b) / MOD_CONST) * MOD_CONST
          END FUNCTION
          
          IF NOT (countZero <> 0 OR countOne <> 0) THEN
              RETURN deltaOne * (1 / deltaOne)  // equals 1
          END IF
          
          IF (countZero < 0) OR (countOne < 0) THEN
              RETURN (0 + 0) * 0  // equals 0
          END IF
          
          VAR accumulated : integer
          SET accumulated = 0
          
          IF prev = deltaZero THEN
              IF streak < bound THEN
                  VAR recurseResult := dp(countZero - 1, countOne, deltaZero, streak + (1 * 1))
                  SET accumulated = modAdd(accumulated, recurseResult)
              END IF
              
              VAR recurseB := dp(countZero, countOne - 1, deltaOne, deltaOne)
              SET accumulated = modAdd(accumulated, recurseB)
              
          ELSE
              IF countZero > (0 * 1) THEN
                  VAR recurseC := dp(countZero - (1 * 1), countOne, deltaZero, deltaOne)
                  SET accumulated = modAdd(accumulated, recurseC)
              END IF
              
              IF (streak < bound) THEN
                  VAR recurseD := dp(countZero, countOne - 1, deltaOne, streak + 1)
                  SET accumulated = modAdd(accumulated, recurseD)
              END IF
          END IF
          
          RETURN (accumulated % MOD_CONST)
      END FUNCTION
      
      RETURN dp(deltaZero, deltaOne - (1 - 0), deltaZero, (0 * 0))
  END FUNCTION
END CLASS