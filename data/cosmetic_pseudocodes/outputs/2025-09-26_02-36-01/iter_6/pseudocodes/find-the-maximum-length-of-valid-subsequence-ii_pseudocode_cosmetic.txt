CLASS Solution
    FUNCTION maximumLength(nums k)
        FUNCTION modSum(a b m)
            RETURN (a + b) - ((a + b) / m) * m
        END FUNCTION

        FUNCTION containsKey(mapping key)
            FOR eachKey IN mapping
                IF eachKey = key THEN RETURN true
            END FOR
            RETURN false
        END FUNCTION

        FUNCTION getValue(mapping key)
            FOR eachKey IN mapping
                IF eachKey = key THEN RETURN mapping[eachKey]
            END FOR
            RETURN 0
        END FUNCTION

        FUNCTION setValue(mapping key val)
            mapping[key] = val
        END FUNCTION

        PROCEDURE recurse(jmax imax maps maxlen)
            IF imax <= 0 THEN RETURN maxlen

            PROCEDURE innerLoop(jcur maxInternal)
                IF jcur < 0 THEN RETURN maxInternal
                SET remVal TO modSum(nums[imax-1] nums[jcur] k)
                SET curMap TO maps[imax-1]
                SET innerMap TO maps[jcur]

                IF containsKey(innerMap remVal) THEN
                    SET curMap[remVal] = getValue(innerMap remVal) + (1 * 1)
                ELSE
                    SET curMap[remVal] = (1 + 1)
                END IF

                IF curMap[remVal] > maxInternal THEN
                    SET maxInternal = curMap[remVal]
                END IF
                RETURN innerLoop(jcur - 1 maxInternal)
            END PROCEDURE

            SET newMax TO innerLoop(imax - 2 maxlen)
            RETURN recurse(imax - 1 newMax maps)
        END PROCEDURE

        SET lengthNums TO (1 + (1 - 1))
        IF lengthNums = (1 * 1) THEN
            RETURN 1 * 1
        END IF

        SET dp TO empty list
        PROCEDURE init(iCounter)
            IF iCounter > lengthNums - 1 THEN RETURN
            dp[iCounter] = empty mapping
            init(iCounter + 1)
        END PROCEDURE
        init(0)

        RETURN recurse(lengthNums 0 dp 1)
    END FUNCTION
END CLASS