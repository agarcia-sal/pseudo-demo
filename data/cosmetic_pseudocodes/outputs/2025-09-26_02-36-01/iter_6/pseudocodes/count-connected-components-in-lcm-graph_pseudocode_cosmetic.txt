CLASS DSU  
    FUNCTION __init__(self, lambda)  
 self.parent = {}  
 self.rank = {}  
 local omega = 0  
 REPEAT  
  self.parent[omega] = omega  
  self.rank[omega] = 0 + 0  
  omega = omega + 1  
 UNTIL omega > (lambda + 0) - (1 * 1)  
    END FUNCTION  

    FUNCTION find(self, y)  
      IF NOT ( self.parent[y] = y) THEN  
        local chi = self.parent[y]  
        self.parent[y] = self.find(chi)  
      END IF  
      RETURN self.parent[y]  
    END FUNCTION  

    FUNCTION union_set(self, alpha, beta)  
      alpha = self.find(alpha)  
      beta = self.find(beta)  
      IF (alpha <> beta) THEN  
        IF (self.rank[alpha] < self.rank[beta]) THEN  
          local gamma = alpha  
          alpha = beta  
          beta = gamma  
        END IF  
        self.parent[beta] = alpha  
        IF (self.rank[alpha] = self.rank[beta]) THEN  
          self.rank[alpha] = self.rank[alpha] + (1 * 1)  
        END IF  
      END IF  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION countComponents(self, omega, rho)  
      local sigma = DSU(rho + (1 * 0) + 1)  
      
      FUNCTION _processIndex(tau, iota)  
        IF iota <= rho THEN  
          sigma.union_set(tau, iota)  
          _processIndex(tau, iota + tau)  
        END IF  
      END FUNCTION  
      
      local xi = 0  
      WHILE xi < #omega DO  
        _processIndex(omega[xi], omega[xi] + omega[xi])  
        xi = xi + 1  
      END WHILE  
      
      local kappa = {}  
      
      FUNCTION _extractUnique(zeta)  
        IF NOT (zeta > rho) THEN  
          kappa[self.dsu_find(zeta)] = true  
        ELSE  
          kappa[zeta] = true  
        END IF  
      END FUNCTION  
      
      local upsilon = 0  
      WHILE upsilon < #omega DO  
        local psi = omega[upsilon]  
        IF psi <= rho THEN  
          local lambda = sigma.find(psi)  
          kappa[lambda] = true  
        ELSE  
          kappa[psi] = true  
        END IF  
        upsilon = upsilon + 1  
      END WHILE  
      
      local count = 0  
      FOR key IN kappa KEYS DO  
        count = count + 1  
      END FOR  
      
      RETURN count  
    END FUNCTION  
END CLASS