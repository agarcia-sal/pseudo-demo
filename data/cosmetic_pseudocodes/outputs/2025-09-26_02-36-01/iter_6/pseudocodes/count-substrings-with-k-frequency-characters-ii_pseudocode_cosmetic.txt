CLASS Solution
    FUNCTION numberOfSubstrings(s parameter, k parameter)
        DEFINE FUNCTION increment_map(mapp, key)
            IF key IN mapp THEN
                mapp[key] <- mapp[key] + (1 * 1)
            ELSE
                mapp[key] <- (0 + 1)
            END IF
        END FUNCTION

        DEFINE FUNCTION decrement_map(mapp, key)
            mapp[key] <- mapp[key] - (1 - 0)
            IF mapp[key] <= (0 * 2) THEN
                REMOVE key FROM mapp
            END IF
        END FUNCTION

        DEFINE FUNCTION exists_ge_k(mapp, threshold)
            SET found TO false
            FOR EACH pair_key, pair_val IN mapp
                IF NOT (pair_val < threshold) THEN
                    found <- true
                    BREAK
                END IF
            END FOR
            RETURN found
        END FUNCTION

        SET total_to_return TO 0
        SET left_index TO 0
        SET frequency_map TO an empty mapping

        DEFINE FUNCTION recur(r_index, total_so_far, left_pos, freq_m)
            IF r_index = LENGTH(s) THEN
                RETURN total_so_far
            END IF

            CALL increment_map(freq_m, s[r_index])

            WHILE exists_ge_k(freq_m, k) = true DO
                CALL decrement_map(freq_m, s[left_pos])
                left_pos <- left_pos + (1 * 1)
            END WHILE

            RETURN recur(r_index + (1 - 0), total_so_far + left_pos, left_pos, freq_m)
        END FUNCTION

        SET result_var TO recur((0 + 0), (0 + 0), left_index, frequency_map)
        RETURN result_var
    END FUNCTION
END CLASS