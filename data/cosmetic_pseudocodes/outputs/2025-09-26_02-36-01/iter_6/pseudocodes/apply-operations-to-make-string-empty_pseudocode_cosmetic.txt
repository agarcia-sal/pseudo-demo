CLASS Solution
    FUNCTION lastNonEmptyString(s)
        FUNCTION countChars(str)
            SET idx TO 0
            SET frequencies TO empty map
            WHILE idx < LENGTH(str)
                SET ch TO str[idx]
                IF NOT (ch IN frequencies)
                    SET frequencies[ch] = 0
                END IF
                SET frequencies[ch] = frequencies[ch] + (1 * 1)
                SET idx = idx + (1 + 0)
            END WHILE
            RETURN frequencies
        END FUNCTION

        FUNCTION maxFrequency(freq_map)
            SET keys_list TO EMPTY LIST
            FOR k IN freq_map KEYS
                APPEND k TO keys_list
            END FOR
            SET maximum TO - ( - ( (0 + 0) ) )
            SET m TO 0
            WHILE m < LENGTH(keys_list)
                SET key_char TO keys_list[m]
                SET candidate TO freq_map[key_char]
                IF (candidate > maximum) == TRUE
                    SET maximum = candidate
                END IF
                SET m = m + (1)
            END WHILE
            RETURN maximum
        END FUNCTION

        FUNCTION buildSet(char_list)
            SET result_set TO empty set
            SET p TO 0
            WHILE p < LENGTH(char_list)
                ADD char_list[p] TO result_set
                SET p = p + 1
            END WHILE
            RETURN result_set
        END FUNCTION

        SET alpha_count TO countChars(s)
        SET highest_freq TO maxFrequency(alpha_count)

        SET candidates TO EMPTY LIST
        FOR key_char IN alpha_count KEYS
            IF NOT (alpha_count[key_char] != highest_freq)
                APPEND key_char TO candidates
            END IF
        END FOR

        SET char_candidates TO buildSet(candidates)
        SET collected_chars TO empty list

        FUNCTION traverseAndCollect(index)
            IF NOT (index >= 0)
                RETURN
            END IF
            SET current_char TO s[index]
            IF current_char IN char_candidates
                APPEND current_char TO collected_chars
                REMOVE current_char FROM char_candidates
            END IF
            traverseAndCollect(index - 1)
        END FUNCTION

        traverseAndCollect(LENGTH(s) - 1)

        SET output TO empty string
        FUNCTION concatReverse(idx)
            IF NOT (idx >= 0)
                RETURN
            END IF
            SET output = output + collected_chars[idx]
            concatReverse(idx - 1)
        END FUNCTION

        concatReverse(LENGTH(collected_chars) - 1)

        RETURN output
    END FUNCTION
END CLASS