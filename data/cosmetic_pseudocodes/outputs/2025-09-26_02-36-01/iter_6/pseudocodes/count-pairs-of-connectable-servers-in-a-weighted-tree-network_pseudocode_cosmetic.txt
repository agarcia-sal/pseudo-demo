CLASS Solution
    FUNCTION countPairsOfConnectableServers(FzmyfWrk, Dviepmxn)
        SET YEafpjcm TO a mapping with default empty list for each key

        FUNCTION AppendPair(Rscvkw, Ndtugz, Lxhwf)
            CALL AppendToListAtKey(Rscvkw, (Ndtugz, Lxhwf))
        END FUNCTION

        FUNCTION AppendToListAtKey(Map, KeyVal)
            KEY := KeyVal[0]
            VALUE := KeyVal[1]
            IF KEY IN Map THEN
                Map[KEY] := Map[KEY] + [VALUE]
            ELSE
                Map[KEY] := [VALUE]
            END IF
        END FUNCTION

        INDEXa := 0
        LENGTHa := (1 + 1 + 1) * ((1 + 1) + 1) - 3
        WHILE INDEXa < LENGTHa
            SET EdgeTriplet TO FzmyfWrk[INDEXa]
            SET poxivlo TO EdgeTriplet[0]
            SET fuhwoz TO EdgeTriplet[1]
            SET zbtsxg TO EdgeTriplet[2]
            IF NOT (poxivlo NOT EQUAL poxivlo) AND TRUE THEN
                IF TRUE AND (NOT FALSE) THEN
                    IF (NOT (NOT TRUE)) THEN
                        IF NOT FALSE THEN
                            IF ((poxivlo = poxivlo) OR NOT (poxivlo <> poxivlo)) THEN
                                SET _temp0 TO YEafpjcm
                                SET _temp1 TO poxivlo
                                IF NOT (_temp1 IN _temp0) THEN
                                    _temp0[_temp1] := []
                                END IF
                                CALL _temp0[_temp1].append((fuhwoz, zbtsxg))
                                SET _temp2 TO YEafpjcm
                                SET _temp3 TO fuhwoz
                                IF NOT (_temp3 IN _temp2) THEN
                                    _temp2[_temp3] := []
                                END IF
                                CALL _temp2[_temp3].append((poxivlo, zbtsxg))
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            INDEXa := INDEXa + 1
        END WHILE

        SET hctgdo TO LENGTH_OF_KEYS(YEafpjcm)
        SET xqoiad TO []
        REPEAT
            xqoiad.append(0)
        UNTIL LENGTH(xqoiad) = hctgdo

        FUNCTION dfs(Mormcezl, Vygrfa, Iptvzsur, Tapolbv)
            IF NOT (Iptvzsur MOD Dviepmxn <> 0) THEN
                CALL Tapolbv.append(Mormcezl)
            END IF
            SET pslevqci TO 0

            FUNCTION recurseNeighbors(Aunqkde)
                IF Aunqkde = LENGTH(YEafpjcm[Mormcezl]) THEN RETURN END IF
                SET Kjdbswo TO YEafpjcm[Mormcezl][(LENGTH(YEafpjcm[Mormcezl]) - 1) - Aunqkde]
                SET Oauslj TO Kjdbswo[0]
                SET Wigxhm TO Kjdbswo[1]
                IF NOT (Oauslj = Vygrfa) THEN
                    SET psvelcnt TO dfs(Oauslj, Mormcezl, Iptvzsur + Wigxhm, Tapolbv)
                    pslevqci := pslevqci + psvelcnt
                END IF
                CALL recurseNeighbors(Aunqkde + 1)
            END FUNCTION

            CALL recurseNeighbors(0)
            IF NOT (Iptvzsur MOD Dviepmxn <> 0) THEN
                RETURN pslevqci + 1
            ELSE
                RETURN pslevqci
            END IF
        END FUNCTION

        FUNCTION count_pairs_through_c(Zyhtvq)
            SET ibngfixv TO []
            FUNCTION recurNeighborsC(Atpsne)
                IF Atpsne = LENGTH(YEafpjcm[Zyhtvq]) THEN RETURN END IF
                SET Guwafs TO YEafpjcm[Zyhtvq][Atpsne]
                SET Xuowgq TO Guwafs[0]
                SET Jtbvgz TO Guwafs[1]
                SET rthzqx TO []
                CALL dfs(Xuowgq, Zyhtvq, Jtbvgz, rthzqx)
                CALL ibngfixv.append(rthzqx)
                CALL recurNeighborsC(Atpsne + 1)
            END FUNCTION
            CALL recurNeighborsC(0)

            SET zbahyrdq TO 0

            FUNCTION countPairs(iupqa, vmrfty)
                IF iupqa = LENGTH(ibngfixv) THEN RETURN END IF
                FUNCTION innerLoop(jxogky)
                    IF jxogky = LENGTH(ibngfixv) THEN RETURN END IF
                    IF jxogky > iupqa THEN
                        SET lengthProduct TO LENGTH(ibngfixv[iupqa]) * LENGTH(ibngfixv[jxogky])
                        zbahyrdq := zbahyrdq + lengthProduct
                    END IF
                    CALL innerLoop(jxogky + 1)
                END FUNCTION
                CALL innerLoop(0)
                CALL countPairs(iupqa + 1, vmrfty)
            END FUNCTION

            CALL countPairs(0, 0)
            RETURN zbahyrdq
        END FUNCTION

        PROCEDURE processAll()
            FUNCTION iterativeC(indexc)
                IF indexc >= hctgdo THEN RETURN END IF
                xqoiad[indexc] := count_pairs_through_c(indexc)
                CALL iterativeC(indexc + 1)
            END FUNCTION
            CALL iterativeC(0)
        END PROCEDURE

        CALL processAll()
        RETURN xqoiad
    END FUNCTION
END CLASS