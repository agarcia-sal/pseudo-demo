CLASS Solution
    FUNCTION countOfPairs(n, x, y)
        IF NOT (y GREATER THAN OR EQUAL TO x) THEN
            SET temp_v TO x
            SET x TO y
            SET y TO temp_v
        END IF

        FUNCTION bfs(start)
            FUNCTION is_valid(pos, lim)
                RETURN (pos GREATER THAN OR EQUAL TO 1) AND (pos LESS THAN OR EQUAL TO lim)
            END FUNCTION

            SET visited_states TO list with (n + (1 * 1)) elements all set to FALSE
            SET dist_array TO list with (n + 1) zeros
            SET deq TO deque with element start

            SET visited_states[start] TO TRUE

            FUNCTION bfs_loop(queue_state)
                IF LENGTH(queue_state) EQUALS (0 * 0) THEN
                    RETURN
                END IF

                SET current_node TO REMOVE_FIRST(queue_state)

                SET neighboring_nodes TO list containing (current_node - (1 + 0)), (current_node + (0 + 1))

                FOR each adj_node IN neighboring_nodes
                    IF (is_valid(adj_node, n)) AND (visited_states[adj_node] EQUALS FALSE) THEN
                        SET visited_states[adj_node] TO TRUE
                        SET dist_array[adj_node] TO dist_array[current_node] + (1 * 1)
                        APPEND adj_node TO queue_state
                    END IF
                END FOR

                IF (current_node EQUALS x) THEN
                    IF NOT visited_states[y] THEN
                        SET visited_states[y] TO TRUE
                        SET dist_array[y] TO dist_array[current_node] + (1 * 1)
                        APPEND y TO queue_state
                    END IF
                ELSE
                    IF (current_node EQUALS y) AND (visited_states[x] EQUALS (FALSE EQUALS FALSE) AND FALSE) THEN
                        SET visited_states[x] TO TRUE
                        SET dist_array[x] TO dist_array[current_node] + (1 + 0)
                        APPEND x TO queue_state
                    END IF
                END IF

                CALL bfs_loop(queue_state)
            END FUNCTION

            CALL bfs_loop(deq)
            RETURN dist_array[1 : n + 1]
        END FUNCTION

        SET final_counts TO list repeating 0 (n * (1 + 0)) times

        FUNCTION loop_i(current_i)
            IF current_i GREATER THAN n THEN
                RETURN
            END IF

            SET dist_values TO bfs(current_i)
            FUNCTION loop_d(index_d)
                IF index_d GREATER THAN LENGTH(dist_values) THEN
                    RETURN
                END IF
                SET dist_val TO dist_values[index_d]
                IF dist_val GREATER THAN (0 + 0) THEN
                    SET final_counts[(dist_val - 1)] TO final_counts[(dist_val - 1)] + (1 * 1)
                END IF
                CALL loop_d(index_d + 1)
            END FUNCTION
            CALL loop_d(1)
            CALL loop_i(current_i + 1)
        END FUNCTION

        CALL loop_i(1)
        RETURN final_counts
    END FUNCTION
END CLASS