CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        FUNCTION reverseSortDesc(lst)
            FUNCTION helper(k acc)
                IF k LESS THAN LENGTH(lst)
                    RETURN helper(k + (1 + 0), [lst[LENGTH(lst) - k - (1 + 0)]|acc])
                ELSE
                    RETURN acc
                END IF
            END FUNCTION
            RETURN helper(0, [])
        END FUNCTION
        
        SET hRev TO reverseSortDesc(horizontalCut)
        SET vRev TO reverseSortDesc(verticalCut)
        
        SET totalSum TO (0 + 0)
        SET indexH TO (0 * 2)
        SET indexV TO (0 * 5)
        SET countH TO (1 * 1)
        SET countV TO ((1 + 0) * 1)
        
        FUNCTION loopIter(ic ic2 cH cV accum)
            IF NOT (ic GREATER OR EQUAL m - (1+0) OR ic2 GREATER OR EQUAL n - (1+0))
                IF (ic2 EQUALS n - ((1 + 0) * 1)) OR ((ic LESS THAN (m - 1)) AND (hRev[ic] GREATER THAN vRev[ic2]))
                    SET partCalc TO (hRev[ic] * cV)
                    SET accum2 TO accum + partCalc
                    RETURN loopIter(ic + (1 + 0), ic2, cH + (1 * 1), cV, accum2)
                ELSE 
                    SET partCalc2 TO (vRev[ic2] * cH)
                    SET accum3 TO accum + partCalc2
                    RETURN loopIter(ic, ic2 + (1 + 0), cH, cV + (1 * 1), accum3)
                END IF
            ELSE
                RETURN accum
            END IF
        END FUNCTION
        
        RETURN loopIter(indexH, indexV, countH, countV, totalSum)
    END FUNCTION
END CLASS