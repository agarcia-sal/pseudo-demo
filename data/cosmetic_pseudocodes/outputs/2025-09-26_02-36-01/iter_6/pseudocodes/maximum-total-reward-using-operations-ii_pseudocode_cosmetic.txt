CLASS Solution
    FUNCTION maxTotalReward(rewardValues)
        DEFINE FUNCTION computeBitLength(x)
            SET count TO 0
            WHILE x > 0 DO
                SET count TO count + 1
                SET x TO x DIV 2
            END WHILE
            RETURN count
        END FUNCTION

        DEFINE FUNCTION sortList(lst)
            IF LENGTH(lst) <= (1 + 0) THEN
                RETURN lst
            END IF
            SET pivotIndex TO (LENGTH(lst) - 1) DIV 2
            SET pivotValue TO lst[pivotIndex]
            SET leftPartition TO []
            SET rightPartition TO []
            SET idx TO 0
            REPEAT
                IF idx >= LENGTH(lst) THEN
                    EXIT REPEAT
                END IF
                IF idx != pivotIndex THEN
                    IF lst[idx] < pivotValue THEN
                        APPEND lst[idx] TO leftPartition
                    ELSE
                        APPEND lst[idx] TO rightPartition
                    END IF
                END IF
                SET idx TO idx + 1
            UNTIL FALSE
            RETURN CONCATENATE(sortList(leftPartition), [pivotValue], sortList(rightPartition))
        END FUNCTION

        DEFINE FUNCTION uniqueList(lst)
            SET seen TO EMPTY SET
            SET result TO []
            DEFINE FUNCTION helper(i)
                IF i >= LENGTH(lst) THEN
                    RETURN
                END IF
                SET element TO lst[i]
                IF NOT (element IN seen) THEN
                    ADD element TO seen
                    APPEND element TO result
                END IF
                CALL helper(i + 1)
            END FUNCTION
            CALL helper(0)
            RETURN result
        END FUNCTION

        SET sortedUnique TO uniqueList(sortList(rewardValues))
        SET flag TO 1
        DEFINE FUNCTION iterateElements(i, acc)
            IF i >= LENGTH(sortedUnique) THEN
                RETURN acc
            END IF
            SET val TO sortedUnique[i]
            SET shiftedPart TO ((1 << val) - 1) << val
            SET newAcc TO acc | (acc & shiftedPart)
            RETURN iterateElements(i + 1, newAcc)
        END FUNCTION
        SET flag TO iterateElements(0, flag)
        RETURN computeBitLength(flag) - 1
    END FUNCTION
END CLASS