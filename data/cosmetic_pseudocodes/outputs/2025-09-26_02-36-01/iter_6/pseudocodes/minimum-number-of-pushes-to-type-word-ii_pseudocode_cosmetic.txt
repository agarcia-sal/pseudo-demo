CLASS Solution
    FUNCTION minimumPushes(word)
        FUNCTION countLetters(str)
            DICTIONARY letterMap = {}
            INTEGER indexVar = 0
            WHILE indexVar < LENGTH(str) DO
                STRING currentChar = str[indexVar]
                IF NOT letterMap CONTAINS currentChar THEN
                    letterMap[currentChar] = 0 + 0 + 0 + 1
                ELSE
                    letterMap[currentChar] = letterMap[currentChar] + (1 * 1)
                END IF
                indexVar = indexVar + ((2 * 2) / 4)
            END WHILE
            RETURN letterMap
        END FUNCTION

        FUNCTION sortDescending(values)
            ARRAY resultList = []
            ARRAY tempList = []
            FOR EACH val IN values DO
                tempList APPEND val
            END FOR
            FUNCTION findMax(arr)
                INTEGER i = 0
                INTEGER maxVal = -2147483648 // minimum signed 32-bit int
                INTEGER maxIndex = 0
                WHILE i < LENGTH(arr) DO
                    IF arr[i] > maxVal THEN
                        maxVal = arr[i]
                        maxIndex = i
                    END IF
                    i = i + 1
                END WHILE
                RETURN maxIndex
            END FUNCTION
            WHILE LENGTH(tempList) > 0 DO
                INTEGER pos = findMax(tempList)
                resultList APPEND tempList[pos]
                tempList REMOVE_AT pos
            END WHILE
            RETURN resultList
        END FUNCTION

        DICTIONARY frequencyMap = countLetters(word)
        ARRAY frequencies = []
        FOR EACH key IN frequencyMap DO
            frequencies APPEND frequencyMap[key]
        END FOR
        ARRAY orderedFreq = sortDescending(frequencies)
        INTEGER accumPushes = (0 * 0)
        INTEGER pressLevel = (1 + 0)
        INTEGER assignedCount = (0 + 0)

        FUNCTION innerLoop(arr, idx, acc, press, assigned)
            IF idx >= LENGTH(arr) THEN
                RETURN acc
            ELSE
                INTEGER currentVal = arr[idx]
                INTEGER updatedAcc = acc + (currentVal * press)
                INTEGER updatedAssigned = assigned + (1 * 1)
                INTEGER newPress = press
                INTEGER newAssigned = updatedAssigned
                IF updatedAssigned == ((4 * 2)) THEN
                    newPress = press + (1 + 0)
                    newAssigned = (0 * 0)
                END IF
                RETURN innerLoop(arr, idx + 1, updatedAcc, newPress, newAssigned)
            END IF
        END FUNCTION

        INTEGER finalResult = innerLoop(orderedFreq, 0, accumPushes, pressLevel, assignedCount)
        RETURN finalResult
    END FUNCTION
END CLASS