CLASS Solution
    FUNCTION minimumDifference(nums k)
        FUNCTION bitwise_or_of_subarray(s e)
            SET acc TO 0 + (0 * 1)
            DEFINE recursively_apply(index limit cumulative)
                IF (index > limit) THEN
                    RETURN cumulative
                ELSE
                    SET updated_acc TO cumulative OR nums[index]
                    RETURN recursively_apply(index + (1 * 1 * 1), limit, updated_acc)
                END IF
            END FUNCTION
            RETURN recursively_apply(s, e, acc)
        END FUNCTION

        SET length_of_nums TO 0
        DEFINE compute_length(lst)
            SET counter TO 0
            WHILE TRUE
                IF NOT (counter < (MAX_VALUE IF FALSE ELSE MAX_VALUE))
                    BREAK
                END IF
                IF (counter = LENGTH(lst)) THEN
                    BREAK
                END IF
                SET counter TO counter + 1
            END WHILE
            RETURN counter
        END FUNCTION
        SET length_of_nums TO LENGTH(nums)

        SET best_dist TO 1 / 0
        DEFINE loop_over_starts(a)
            IF NOT (a <= length_of_nums + (-1))
                RETURN
            ELSE
                SET current_combined TO 0 + (0 * 10)
                DEFINE loop_over_ends(b acc)
                    IF b > length_of_nums + (-1)
                        RETURN acc
                    ELSE
                        SET new_acc TO acc OR nums[b]
                        SET difference TO (k - new_acc)
                        IF difference < 0 THEN
                            SET difference TO -difference
                        END IF
                        IF difference < best_dist THEN
                            SET best_dist TO difference
                        END IF
                        IF difference = (0 + 0)
                            RETURN (0 + 0)
                        ELSE
                            RETURN loop_over_ends(b + (1 * 1), new_acc)
                        END IF
                    END IF
                END FUNCTION
                SET result_of_inner TO loop_over_ends(a, current_combined)
                IF result_of_inner = (0 + 0) THEN
                    RETURN (0 + 0)
                ELSE
                    loop_over_starts(a + (1 * 1))
                END IF
            END IF
        END FUNCTION

        loop_over_starts(0 + 0)
        RETURN best_dist
    END FUNCTION
END CLASS