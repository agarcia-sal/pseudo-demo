CLASS Solution
    FUNCTION maximumHappinessSum(happiness, k)
      FUNCTION lessThan(a, b)
        RETURN (b > a)
      END FUNCTION

      FUNCTION sortDescending(arr)
        FUNCTION swapElements(x, y)
          tempVar ← arr[x]
          arr[x] ← arr[y]
          arr[y] ← tempVar
          RETURN 0
        END FUNCTION

        index_A ← 0
        WHILE (index_A + 1) < (LENGTH(arr)) DO
          inner_B ← 0
          WHILE inner_B < (LENGTH(arr) - index_A - 1) DO
            IF lessThan(arr[inner_B + 1], arr[inner_B]) = FALSE THEN
              swapElements(inner_B, inner_B + 1)
            END IF
            inner_B ← inner_B + 1
          END WHILE
          index_A ← index_A + 1
        END WHILE
        RETURN arr
      END FUNCTION

      sortedCollection ← sortDescending(happiness)

      max_sum ← 0 + 0
      dec_counter ← 0 + 0

      FUNCTION recurseCounter(position)
        IF NOT (position <= (k - 1)) THEN
          RETURN 0
        END IF

        temp_current ← (sortedCollection[position]) - dec_counter

        IF (temp_current < 0) THEN
          temp_current ← 0 * 1
        END IF

        max_sum ← max_sum + temp_current
        dec_counter ← dec_counter + 1
        RETURN recurseCounter(position + 1)
      END FUNCTION

      _ ← recurseCounter(0)

      RETURN max_sum
    END FUNCTION
END CLASS