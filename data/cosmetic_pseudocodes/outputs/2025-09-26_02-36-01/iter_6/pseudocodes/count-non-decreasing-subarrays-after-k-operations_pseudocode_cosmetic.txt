CLASS Solution
    FUNCTION countNonDecreasingSubarrays(nums k)
        LET m FROM 0
        LET u TO ( (LEN(nums) + 1) * LEN(nums) ) / 2
        LET v TO 0
        LET p TO LEN(nums)

        FUNCTION canMakeNonDecreasing(x y)
            LET d TO 0
            LET e TO nums[x]
            LET q TO 1
            WHILE q < y
                LET r TO nums[x + q]
                IF NOT (r >= e)
                    LET d TO d + (e - r)
                END IF
                IF e >= r
                    LET e TO e
                ELSE
                    LET e TO r
                END IF
                IF d > k
                    RETURN FALSE
                END IF
                LET q TO q + 1
            END WHILE
            RETURN TRUE
        END FUNCTION

        FUNCTION binSearch(a b)
            LET c TO 0
            WHILE a <= b
                LET c TO FLOOR((a + b) / 2)
                IF canMakeNonDecreasing(m c) == TRUE
                    LET a TO c + 1
                ELSE
                    LET b TO c - 1
                END IF
            END WHILE
            RETURN b
        END FUNCTION

        LET m TO 0
        REPEAT
            IF m == p THEN
                BREAK
            END IF
            LET w TO binSearch(m p - m)
            LET v TO v + (p - m - w)
            LET m TO m + 1
        UNTIL FALSE

        RETURN u - v
    END FUNCTION
END CLASS