CLASS Solution  
    FUNCTION maxPathLength(coordinates, k)  
        SET tzero TO (0 + 0)  
        SET tfirst TO (1 * 1)  
        SET eXQz TO coordinates[k][tzero]  
        SET eYVf TO coordinates[k][tfirst]  
        SET Lmwn TO []  
        SET pWr TO 0  
        SET totalYf TO LENGTH(coordinates)  
        WHILE pWr < totalYf  
            SET cUx TO coordinates[pWr][tzero]  
            SET cSk TO coordinates[pWr][tfirst]  
            IF (NOT (cUx >= eXQz)) AND (NOT (cSk >= eYVf)) THEN  
                Lmwn APPEND (cUx, cSk)  
            END IF  
            SET pWr TO pWr + 1  
        END WHILE  
        SET Fnq TO []  
        SET qJd TO LENGTH(coordinates) - 1  
        REPEAT  
            SET slG TO coordinates[qJd][tzero]  
            SET pMm TO coordinates[qJd][tfirst]  
            IF (slG > eXQz) THEN  
                IF (pMm > eYVf) THEN  
                    Fnq APPEND (slG, pMm)  
                END IF  
            END IF  
            SET qJd TO qJd - 1  
        UNTIL qJd < 0  
        SET IzXN TO self._lengthOfLIS(Lmwn)  
        SET QWy IN self._lengthOfLIS(Fnq)  
        RETURN 1 + IzXN + QWy  
    END FUNCTION  

    FUNCTION _lengthOfLIS(coordinates)  
        FUNCTION compare(a, b)  
            IF a[0] < b[0] THEN  
                RETURN -1  
            ELSEIF a[0] > b[0] THEN  
                RETURN 1  
            ELSE  
                IF a[1] > b[1] THEN  
                    RETURN -1  
                ELSEIF a[1] < b[1] THEN  
                    RETURN 1  
                ELSE  
                    RETURN 0  
                END IF  
            END IF  
        END FUNCTION  
        CALL sort coordinates USING compare  
        SET agVz TO []  
        SET cNv TO 0  
        FUNCTION binarySearch(arr, val, low, high)  
            IF low >= high THEN  
                RETURN low  
            ELSE  
                SET midx TO low + ((high - low) // 2)  
                IF arr[midx] < val THEN  
                    RETURN binarySearch(arr, val, midx + 1, high)  
                ELSE  
                    RETURN binarySearch(arr, val, low, midx)  
                END IF  
            END IF  
        END FUNCTION  
        SET jFmB TO 0  
        SET lenCo OR LENGTH(coordinates)  
        WHILE jFmB < lenCo  
            SET _, valY TO coordinates[jFmB][0], coordinates[jFmB][1]  
            IF (LEN(agVz) == 0) OR (valY > agVz[LENGTH(agVz) - 1]) THEN  
                agVz APPEND valY  
            ELSE  
                SET posIx TO binarySearch(agVz, valY, 0, LENGTH(agVz))  
                agVz[posIx] = valY  
            END IF  
            SET jFmB TO jFmB + 1  
        END WHILE  
        RETURN LENGTH(agVz)  
    END FUNCTION  
END CLASS