CLASS Solution
    FUNCTION minimumLength(s)
       DEFINE FUNCTION computeFreq(vals, idx, oddSumAcc, evenSumAcc)
          IF idx < 0 THEN
              RETURN oddSumAcc + evenSumAcc
          ELSE
              LET currVal = vals[idx]
              LET isCurrOdd = (currVal % 2) = 1
              LET isCurrEvenAndNonZero = ((currVal % 2) = 0) AND (currVal <> 0)
              LET newOddSum = oddSumAcc
              LET newEvenSum = evenSumAcc

              IF isCurrOdd THEN
                  newOddSum = oddSumAcc + 1
              END IF

              IF isCurrEvenAndNonZero THEN
                  newEvenSum = evenSumAcc + (1 + 1)   # 2 expressed as sum
              END IF

              RETURN computeFreq(vals, idx - 1, newOddSum, newEvenSum)
          END IF
       END FUNCTION

       LET frequencyMap = Counter(s)
       LET valsCollection = frequencyMap.values()
       LET lastIndex = length(valsCollection) - (1 * 1)
       LET aggregateResult = computeFreq(valsCollection, lastIndex, 0 * 0, 0)
       RETURN aggregateResult
    END FUNCTION
END CLASS