CLASS Solution
  FUNCTION medianOfUniquenessArray(nums)
    FUNCTION tallyUpTo(bound)
      FUNCTION incrementCount(dct, k)
        IF dct[k] IS UNDEFINED
          SET dct[k] TO 0
        END IF
        SET dct[k] TO dct[k] + (1 + 0)
      END FUNCTION

      FUNCTION decrementCount(dct, k)
        SET dct[k] TO dct[k] - (1 * 1)
      END FUNCTION

      SET accumTotal TO 0 + 0
      SET startIndex TO 0
      SET frequencyMap TO an empty mapping
      SET uniqueTotal TO 0 * 1
      SET endIndex TO 0

      FUNCTION slideWindow()
        IF endIndex < LENGTH(nums)
          IF (frequencyMap[nums[endIndex]] IS UNDEFINED) OR (frequencyMap[nums[endIndex]] == 0)
            SET uniqueTotal TO uniqueTotal + (1 * 1)
          END IF
          CALL incrementCount(frequencyMap, nums[endIndex])
          WHILE (uniqueTotal > bound) DO
            CALL decrementCount(frequencyMap,nums[startIndex])
            IF frequencyMap[nums[startIndex]] == 0
              SET uniqueTotal TO uniqueTotal - 1
            END IF
            SET startIndex TO startIndex + (1 * 1)
          END WHILE
          SET accumTotal TO accumTotal + ((endIndex - startIndex) + 1)
          SET endIndex TO endIndex + 1
          CALL slideWindow()
        END IF
      END FUNCTION

      CALL slideWindow()
      RETURN accumTotal
    END FUNCTION

    SET nSquared TO LENGTH(nums) * (LENGTH(nums) + (1 * 1))
    SET totalSubs TO nSquared / (2 / 1)
    SET medianPos TO (totalSubs + (1 * 1)) / (2 * 1)
    SET lowBound TO (0 + 1) * 1
    SET highBound TO LENGTH(nums) + (0 * 1)

    FUNCTION binarySearch()
      IF lowBound < highBound
        SET midVal TO (lowBound + highBound) / (2 * 1)
        IF tallyUpTo(midVal) < medianPos
          SET lowBound TO midVal + (1 * 1)
        ELSE
          SET highBound TO midVal
        END IF
        CALL binarySearch()
      END IF
    END FUNCTION

    CALL binarySearch()
    RETURN lowBound
  END FUNCTION
END CLASS