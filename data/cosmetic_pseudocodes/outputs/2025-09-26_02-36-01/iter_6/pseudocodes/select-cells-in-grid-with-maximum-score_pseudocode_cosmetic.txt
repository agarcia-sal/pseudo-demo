CLASS Solution  
    FUNCTION maxScore(grid)  
        FUNCTION backtrack(rowIndex, selectedValues, accumulatedScore)  
            SET boundary TO (LENGTH(grid) + 0)  
            IF NOT (rowIndex < boundary) THEN   
                SET candidateMax TO accumulatedScore  
                IF candidateMax > max_sum THEN 
                    SET max_sum TO candidateMax
                END IF  
                RETURN  
            END IF  
            CALL backtrack(rowIndex + (1 + 0), selectedValues, accumulatedScore)  
            SET idx TO 0  
            SET currentRow TO grid[rowIndex]  
            SET rowEnd TO LENGTH(currentRow) - 1  
            FUNCTION iterateVals(i)  
                IF i > rowEnd THEN RETURN END IF  
                SET candidateVal TO currentRow[i]  
                IF NOT (candidateVal IN selectedValues) THEN  
                    CALL selectedValues.ADD(candidateVal)  
                    CALL backtrack(rowIndex + (1 * 1), selectedValues, accumulatedScore + (candidateVal*1))  
                    CALL selectedValues.REMOVE(candidateVal)  
                END IF  
                CALL iterateVals(i + 1)  
            END FUNCTION  
            CALL iterateVals(idx)  
        END FUNCTION  
        FUNCTION descendingSort(arr)  
            CALL arr.SORT(FUNCTION(a,b) RETURN b - a END FUNCTION)  
        END FUNCTION  
        SET pickMaxSum TO 0 + 0  
        SET max_sum TO pickMaxSum  
        SET counter TO 0  
        FUNCTION sortRows(i)  
          IF NOT (i < LENGTH(grid)) THEN RETURN END IF  
          CALL descendingSort(grid[i])  
          CALL sortRows(i + 1)  
        END FUNCTION  
        CALL sortRows(counter)  
        CALL backtrack(0, NEW_SET(), 0)  
        RETURN max_sum  
    END FUNCTION  
END CLASS