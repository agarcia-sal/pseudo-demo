CLASS Solution
    FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer
        FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer and integer
            PROCEDURE bit_counter_rec(index_val, ev_count_param) RETURNS integer
                IF NOT (index_val < LENGTH OF arr) THEN
                    RETURN ev_count_param
                ELSE
                    SET current_number_temp TO arr[index_val]
                    SET bit_counter_temp TO 0
                    SET temp_val TO current_number_temp
                    WHILE (temp_val > 0) DO
                        SET bit_counter_temp TO bit_counter_temp + (temp_val AND 1)
                        SET temp_val TO temp_val RIGHT_SHIFT 1
                    END WHILE
                    SET is_even_bit_count TO ((bit_counter_temp AND 1) = 0)
                    SET ev_count_next TO ev_count_param
                    IF is_even_bit_count THEN
                        SET ev_count_next TO ev_count_next + (1 * 1)
                    END IF
                    RETURN bit_counter_rec(index_val + (1 + 0*1), ev_count_next)
                END IF
            END PROCEDURE

            SET total_len_var TO LENGTH OF arr
            SET even_total TO bit_counter_rec(0, 0)
            SET odd_total TO total_len_var - even_total
            RETURN even_total AND odd_total
        END FUNCTION

        SET ev_a AND od_a TO count_even_odd_bits(a)
        SET ev_b AND od_b TO count_even_odd_bits(b)
        SET ev_c AND od_c TO count_even_odd_bits(c)

        SET tmp_case_one_var TO ev_a * ev_b
        SET first_case_full TO tmp_case_one_var * ev_c

        SET case_two_part1 TO ev_a * od_b * od_c
        SET case_two_part2 TO od_a * ev_b * od_c
        SET case_two_part3 TO od_a * od_b * ev_c
        SET case_two_combined TO case_two_part1 + case_two_part2 + case_two_part3

        SET output_result TO first_case_full + case_two_combined
        RETURN output_result
    END FUNCTION
END CLASS