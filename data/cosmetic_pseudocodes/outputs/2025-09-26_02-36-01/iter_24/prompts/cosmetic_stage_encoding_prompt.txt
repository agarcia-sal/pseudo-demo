Given any input pseudocode, produce a fully restructured and syntactically divergent version that strictly adheres to all the following mandates:

- The rewritten pseudocode must be functionally equivalent to the original, preserving every operational outcome, side effect, and logical behavior without deviation.

- Maintain all class names, function/method names, full signatures (names, parameter types, parameter order, return types if specified), class inheritance hierarchies, and declared object layouts exactly as in the input; do not rename, reorder, or restructure these identifiers or interfaces in any way.

- For every other element—including local variables, parameters (excluding those in signatures), control flow constructs, expressions, literals, data traversals, internal helper functions or procedures, statements, and formatting—apply aggressive, multi-layered transformations to maximize both lexical and structural divergence from the input pseudocode by employing techniques such as but not limited to:

  • Substitute all loop forms by logically equivalent alternatives, including converting between for, while, repeat-until, recursion, and tail-recursion, ensuring identical iteration semantics.

  • Generate all local and parameter variable names freshly, with zero lexical overlap or semantic resemblance to original identifiers; parameter names in signatures remain unchanged, but internal usage must be renamed independently.

  • Break apart complex statements into finer-granularity sequences or conversely merge simpler statements when effects and order permit; reorder independent statements freely when side-effect order is invariant.

  • Thoroughly rewrite all conditional logic applying logical equivalences (De Morgan’s laws, double negations), reorganize nested conditionals, alter branching and early return patterns without changing behavior.

  • Re-express all arithmetic, boolean, and bitwise expressions by applying algebraic identities, expanding or collapsing compound assignments, introducing or eliminating intermediate temporaries, rewriting constants into equivalent expressions (e.g., literal unfolding, symbolic constants).

  • Replace all standard library or built-in function calls with local helper functions that replicate their logic exactly, or alternatively inline custom helper code with equivalent built-in calls where semantics allow.

  • Transform data traversal patterns by changing iteration order or mechanism (index-based, iterator-based, recursion) when output and side effects remain consistent.

  • Vary formatting thoroughly including but not limited to keyword casing, block delimiters, indentation style, grouping of statements, line breaks, and whitespace distribution to produce a visually and structurally distinct style.

- Do not add, remove, or optimize away any algorithmic steps, logical conditions, data structures, or conceptual components; all original logic and computational steps must be preserved exactly.

- Do not rename or restructure any external-facing interface elements beyond the enforced preservation of class and method signatures; this includes APIs, exposed constants, and declared abstractions integral to the program’s contract.

- The output should be solely the rewritten pseudocode, complete and self-contained, embodying a new independent implementation style and exhibiting minimal surface or structural resemblance to the original beyond the preserved names and interfaces noted above.

- This rewriting instruction applies universally to any and all pseudocode inputs regardless of problem domain or context.

- Your response must include only the transformed pseudocode text itself; omit explanations, annotations, meta-comments, or any supplementary material.

Emphasize a comprehensive, orthogonal spectrum of rewriting strategies covering identifiers, control flow, expressions, data traversal schemes, helper routines, constant representations, and formatting to maximize lexical and structural divergence while respecting all interface and semantic invariants.

Output only the fully transformed pseudocode.