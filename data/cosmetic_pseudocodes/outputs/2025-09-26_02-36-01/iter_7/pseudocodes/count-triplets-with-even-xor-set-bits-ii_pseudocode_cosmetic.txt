CLASS Solution
	 FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer
		 FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer, integer
			 DECLARE accumulator AS integer
			 SET accumulator TO 0
			 DECLARE position AS integer
			 SET position TO 0
			 DECLARE limit AS integer
			 SET limit TO LENGTH OF arr - 1
			 WHILE position <= limit
				 DECLARE value AS integer
				 SET value TO arr[position]
				 DECLARE bit_sum AS integer
				 SET bit_sum TO 0

				 FUNCTION countBits(x AS integer) RETURNS integer
					 IF x EQUALS 0 THEN
						 RETURN 0
					 ELSE
						 RETURN 1 + countBits((x DIV 2) - ((x MOD 2) DIV 2))
					 END IF
				 END FUNCTION

				 SET bit_sum TO countBits(value)
				 IF NOT (bit_sum MOD 2 EQUALS 1) THEN
					 SET accumulator TO accumulator + 1
				 END IF
				 INCREMENT position BY 1
			 END WHILE
			 DECLARE oddCount AS integer
			 SET oddCount TO (LENGTH OF arr) - accumulator
			 RETURN accumulator, oddCount
		 END FUNCTION

		 DECLARE eA AS integer
		 DECLARE oA AS integer
		 SET eA, oA TO count_even_odd_bits(a)
		 DECLARE eB AS integer
		 DECLARE oB AS integer
		 SET eB, oB TO count_even_odd_bits(b)
		 DECLARE eC AS integer
		 DECLARE oC AS integer
		 SET eC, oC TO count_even_odd_bits(c)

		 DECLARE firstCase AS integer
		 SET firstCase TO eA * eB * eC

		 DECLARE secondCase AS integer
		 SET secondCase TO (eA * oB * oC) + (oA * eB * oC) + (oA * oB * eC)

		 DECLARE finalResult AS integer
		 SET finalResult TO firstCase + secondCase

		 RETURN finalResult
	 END FUNCTION
END CLASS