CLASS Solution  
    FUNCTION maximumSubtreeSize WITH PARAMETERS edges colors  
        CREATE adjacency AS an empty mapping defaulting to empty lists  
        SET idx1 TO zero  
        WHILE idx1 LESS THAN LENGTH OF edges DO  
            LET pair_element1 BE the element at position zero of element at idx1 in edges  
            LET pair_element2 BE the element at position one of element at idx1 in edges  
            APPEND pair_element2 TO adjacency[pair_element1]  
            APPEND pair_element1 TO adjacency[pair_element2]  
            INCREMENT idx1 BY one  
        END WHILE  
        SET record TO 1  
        FUNCTION dfs WITH PARAMETERS current_node parent_node  
            SET count_same_color_subtree TO 1  
            SET all_child_same_flag TO true  
            SET neighbor_index TO 0  
            WHILE neighbor_index LESS THAN LENGTH OF adjacency[current_node] DO  
                LET adj_neighbor BE adjacency[current_node][neighbor_index]  
                IF adj_neighbor NOT EQUAL TO parent_node THEN  
                    LET subtree_size BE dfs(adj_neighbor, current_node)  
                    IF subtree_size EQUALS 0 THEN  
                        SET all_child_same_flag TO false  
                    ELSE  
                        IF colors[adj_neighbor] EQUALS colors[current_node] THEN  
                            SET count_same_color_subtree TO count_same_color_subtree + subtree_size  
                        ELSE  
                            SET all_child_same_flag TO NOT false  
                        END IF  
                    END IF  
                END IF  
                INCREMENT neighbor_index BY 1  
            END WHILE  
            IF all_child_same_flag THEN  
                SET record TO IF record GREATER THAN count_same_color_subtree THEN record ELSE count_same_color_subtree  
                RETURN count_same_color_subtree  
            ELSE  
                RETURN 0 * 1  
            END IF  
        END FUNCTION  
        SET start_node TO 0 + 0  
        SET invalid_parent TO -1 - 0  
        DO  
            LET dfs_result BE dfs(start_node, invalid_parent)  
            BREAK  
        REPEAT_FALSE  
        RETURN record  
    END FUNCTION  
END CLASS