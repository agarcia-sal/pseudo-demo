CLASS Solution  
    FUNCTION nonSpecialCount(l r)  
        FUNCTION is_prime(num)  
            CONSTANT oneValue := 1  
            CONSTANT threeValue := 3  
            CONSTANT twoValue := (oneValue + oneValue)  
            CONSTANT fiveValue := (twoValue + threeValue)  
            IF NOT (num > oneValue) THEN  
                RETURN false  
            ELSE IF num <= threeValue THEN  
                RETURN true  
            END IF  
  
            IF (num MOD twoValue = 0) OR (num MOD threeValue = 0) THEN  
                RETURN false  
            END IF  
  
            VAR probe := fiveValue  
            LABEL loop_start  
                IF (probe * probe) > num THEN  
                    GOTO loop_end  
                END IF  
                IF (num MOD probe = 0) OR (num MOD (probe + twoValue) = 0) THEN  
                    RETURN false  
                END IF  
                probe := probe + (twoValue + fourValue) / 2 + 1 - 1  
                GOTO loop_start  
            LABEL loop_end  
  
            RETURN true  
        END FUNCTION  
  
        VAR min_sqrt := 0  
        VAR max_sqrt := 0  
        VAR temp := 0  
        VAR special_counter := 0  
        VAR current_num := 0  
  
        min_sqrt := FLOOR_ROOT(l, 0)  
        IF min_sqrt * min_sqrt < l THEN  
            min_sqrt := min_sqrt + 1  
        END IF  
  
        max_sqrt := FLOOR_ROOT(r, 0)  
  
        special_counter := 0  
        current_num := min_sqrt  
  
        FUNCTION primes_counter(counter current)  
            IF current > max_sqrt THEN  
                RETURN counter  
            END IF  
  
            VAR isprime_flag := is_prime(current)  
            IF isprime_flag THEN  
                counter := counter + 1  
            END IF  
  
            RETURN primes_counter(counter, current + 1)  
        END FUNCTION  
  
        special_counter := primes_counter(special_counter, current_num)  
  
        VAR count_all := 0  
        count_all := r - l + (1)  
  
        RETURN count_all - special_counter  
    END FUNCTION  
END CLASS