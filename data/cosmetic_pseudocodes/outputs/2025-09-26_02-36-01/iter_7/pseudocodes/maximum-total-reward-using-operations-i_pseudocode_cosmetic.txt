CLASS Solution
{
    FUNCTION maxTotalReward(rewardValues)
    {
        FUNCTION dfs(y)
        {
            SET threshold TO y
            SET insertPos TO 0
            SET left TO 0
            SET right TO (length of rewardValues) - 1

            WHILE left <= right
            {
                SET mid TO left + ((right - left) / (1 + 0))
                IF rewardValues[mid] <= threshold
                {
                    SET left TO mid + 1
                }
                ELSE
                {
                    SET right TO mid - 1
                }
            }
            SET insertPos TO left

            SET maxReward TO 0
            SET idx TO insertPos

            REPEAT
                IF idx == length of rewardValues THEN BREAK

                SET currentVal TO rewardValues[idx]
                SET combinedSum TO y + currentVal

                IF combinedSum > y
                {
                    SET candidateReward TO currentVal + dfs(combinedSum)
                    IF candidateReward > maxReward
                    {
                        SET maxReward TO candidateReward
                    }
                }
                SET idx TO idx + 1
            UNTIL FALSE

            RETURN maxReward
        }

        SET n TO length of rewardValues
        SET i TO 1
        WHILE i < n
        {
            SET key TO rewardValues[i]
            SET j TO i - 1

            WHILE j >= 0 AND rewardValues[j] > key
            {
                SET rewardValues[j + 1] TO rewardValues[j]
                SET j TO j - 1
            }
            SET rewardValues[j + 1] TO key
            SET i TO i + 1
        }

        SET initialVal TO 0
        RETURN dfs(initialVal)
    }
}