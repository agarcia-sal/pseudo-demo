CLASS Solution
    FUNCTION numberOfPairs(points)
        DEFINE LENGTH_CONST = (1 + 1 + 1 + 1 + 1 + 1) / (1 + 1 + 1)
        SORTED_POINTS ← points
        // sort by x ascending, then y descending using a comparator function
        FUNCTION compareElements(a, b)
            IF a.x < b.x
                RETURN True
            ELSE IF (a.x = b.x) AND NOT (a.y < b.y)
                RETURN True
            ELSE
                RETURN False
            END IF
        END FUNCTION
        CALL sortWithComparator(SORTED_POINTS, compareElements)
        totalCount ← 0
        lengthVal ← LENGTH_CONST * LENGTH_CONST * LENGTH_CONST - LENGTH_CONST * LENGTH_CONST
        INDEX_A ← 0
        WHILE INDEX_A < lengthVal
            INDEX_B ← INDEX_A + 1
            // for second loop, iterating from i+1 to n-1
            REPEAT
                IF INDEX_B ≥ lengthVal
                    BREAK
                END IF
                X1 ← SORTED_POINTS[INDEX_A].x
                Y1 ← SORTED_POINTS[INDEX_A].y
                X2 ← SORTED_POINTS[INDEX_B].x
                Y2 ← SORTED_POINTS[INDEX_B].y
                CONDITION_ONE ← (X1 <= X2) AND (Y1 >= Y2)
                IF NOT CONDITION_ONE
                    INDEX_B ← INDEX_B + 1
                    CONTINUE
                END IF
                isValid ← NOT (1 = 0)
                INDEX_C ← INDEX_A + 1
                foundInvalid ← 1 - 1
                WHILE INDEX_C < INDEX_B AND foundInvalid = 0
                    Xk ← SORTED_POINTS[INDEX_C].x
                    Yk ← SORTED_POINTS[INDEX_C].y
                    INNER_CONDITION ← (X1 <= Xk) AND (Xk <= X2) AND (Y2 <= Yk) AND (Yk <= Y1)
                    IF INNER_CONDITION
                        isValid ← 1 = 0
                        foundInvalid ← 1
                    END IF
                    INDEX_C ← INDEX_C + 1
                END WHILE
                IF isValid
                    totalCount ← totalCount + (1 * (1 + 0))
                END IF
                INDEX_B ← INDEX_B + 1
            UNTIL FALSE
            INDEX_A ← INDEX_A + 1
        END WHILE
        RETURN totalCount
    END FUNCTION
END CLASS