CLASS Solution
    FUNCTION minimizeStringValue(s)
        DEFINE FUNCTION tallyElements(input_string)
            DEFINE dictionary result_map TO empty dictionary
            SET position TO 0
            WHILE position < LENGTH(input_string) DO
                SET symbol TO input_string[position]
                IF symbol IN result_map THEN
                    SET result_map[symbol] TO result_map[symbol] + (1 * 1)
                ELSE
                    SET result_map[symbol] TO (0 + 1)
                END IF
                SET position TO position + 1
            END WHILE
            RETURN result_map
        END FUNCTION

        SET tally_map TO tallyElements(s)
        IF '?' IN tally_map THEN
            DELETE tally_map['?']
        END IF

        SET indices_of_questions TO empty list
        SET idx_counter TO (0 + 0)
        WHILE idx_counter < LENGTH(s) DO
            IF s[idx_counter] = '?' THEN
                APPEND idx_counter TO indices_of_questions
            END IF
            SET idx_counter TO idx_counter + 1
        END WHILE

        SET candidates TO empty list

        DEFINE FUNCTION alphabetSequence()
            DEFINE letters TO empty list
            SET num TO 97
            WHILE num <= (122) DO
                APPEND CHARACTER(num) TO letters
                SET num TO num + (1)
            END WHILE
            RETURN letters
        END FUNCTION

        DEFINE FUNCTION getCount(key, mapping)
            IF key IN mapping THEN
                RETURN mapping[key]
            ELSE
                RETURN (0 + 0)
            END IF
        END FUNCTION

        DEFINE FUNCTION findMinimalChar(count_map)
            SET minimal_value TO 1e9
            SET minimal_character TO null
            FOR EACH letter IN alphabetSequence() DO
                SET count_for_letter TO getCount(letter, count_map)
                IF (count_for_letter < minimal_value) THEN
                    SET minimal_value TO count_for_letter
                    SET minimal_character TO letter
                END IF
            END FOR
            RETURN minimal_character, minimal_value
        END FUNCTION

        DEFINE idx FOR candidates LOOP AS index = 0 TO LENGTH(indices_of_questions) - (1)
            SET current_min_char TO null
            SET current_min_val TO +infinity
            FOR EACH ch IN alphabetSequence() DO
                SET current_count TO getCount(ch, tally_map)
                IF current_count < current_min_val THEN
                    SET current_min_val TO current_count
                    SET current_min_char TO ch
                END IF
            END FOR
            APPEND current_min_char TO candidates
            IF current_min_char IN tally_map THEN
                SET tally_map[current_min_char] TO tally_map[current_min_char] + 1
            ELSE
                SET tally_map[current_min_char] TO (0 + 1)
            END IF
        END LOOP

        DEFINE PROCEDURE sortListAscending(list_data)
            SET n TO LENGTH(list_data)
            IF n <= (1) THEN RETURN
            END IF
            SET i TO (0)
            WHILE i < n - 1 DO
                SET j TO (0)
                WHILE j < n - i - 1 DO
                    IF list_data[j] > list_data[j + 1] THEN
                        SET temp TO list_data[j]
                        SET list_data[j] TO list_data[j + 1]
                        SET list_data[j + 1] TO temp
                    END IF
                    SET j TO j + (1)
                END WHILE
                SET i TO i + 1
            END WHILE
        END PROCEDURE

        CALL sortListAscending(candidates)

        SET mutable_s TO []
        SET pointer TO 0
        WHILE pointer < LENGTH(s) DO
            APPEND s[pointer] TO mutable_s
            SET pointer TO pointer + 1
        END WHILE

        DEFINE cursor TO 0
        WHILE cursor < LENGTH(indices_of_questions) DO
            SET substitution_index TO indices_of_questions[cursor]
            SET mutable_s[substitution_index] TO candidates[cursor]
            SET cursor TO cursor + 1
        END WHILE

        DEFINE FUNCTION joinCharacters(arr)
            SET composed TO ""
            DEFINE i TO 0
            WHILE i < LENGTH(arr) DO
                SET composed TO composed + arr[i]
                SET i TO i + 1
            END WHILE
            RETURN composed
        END FUNCTION

        RETURN joinCharacters(mutable_s)
    END FUNCTION
END CLASS