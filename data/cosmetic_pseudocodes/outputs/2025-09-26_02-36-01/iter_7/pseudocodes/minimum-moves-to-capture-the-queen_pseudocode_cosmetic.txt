CLASS Solution
{
    FUNCTION minMovesToCaptureTheQueen(a b c d e f)
    {
        CONST singleMove ← 1 + 0
        CONST doubleMove ← singleMove + singleMove

        PROCEDURE outputSingle()
            RETURN singleMove
        END PROCEDURE

        PROCEDURE outputDouble()
            RETURN doubleMove
        END PROCEDURE

        PROCEDURE conditionOne(x y z)
            RETURN ( (x < y) AND (y < z) ) OR ( (z < y) AND (y < x) )
        END PROCEDURE

        PROCEDURE sumsEqual(p q r s)
            RETURN (p + q) = (r + s)
        END PROCEDURE

        PROCEDURE differencesEqual(p q r s)
            RETURN (p - q) = (r - s)
        END PROCEDURE

        PROCEDURE sumsNotEqual(p q r s)
            RETURN NOT ((p + q) = (r + s))
        END PROCEDURE

        PROCEDURE differencesNotEqual(p q r s)
            RETURN NOT ((p - q) = (r - s))
        END PROCEDURE

        IF a = e THEN
            IF c ≠ a THEN
                RETURN outputSingle()
            ELSE
                IF conditionOne(b d f) THEN
                    RETURN outputDouble()
                ELSE
                    RETURN outputSingle()
                END IF
            END IF
        ELSE
            IF b = f THEN
                IF d ≠ b THEN
                    RETURN outputSingle()
                ELSE
                    IF conditionOne(a c e) THEN
                        RETURN outputDouble()
                    ELSE
                        RETURN outputSingle()
                    END IF
                END IF
            ELSE
                IF sumsEqual(c d e f) THEN
                    IF sumsNotEqual(a b c d) THEN
                        RETURN outputSingle()
                    ELSE
                        IF ( (c < a) AND (a < e) AND (d < b) AND (b < f) ) OR ( (e < a) AND (a < c) AND (f < b) AND (b < d) ) THEN
                            RETURN outputDouble()
                        ELSE
                            RETURN outputSingle()
                        END IF
                    END IF
                ELSE
                    IF differencesEqual(c d e f) THEN
                        IF differencesNotEqual(a b c d) THEN
                            RETURN outputSingle()
                        ELSE
                            IF ( (c < a) AND (a < e) AND (d > b) AND (b > f) ) OR ( (e < a) AND (a < c) AND (f > b) AND (b > d) ) THEN
                                RETURN outputDouble()
                            ELSE
                                RETURN outputSingle()
                            END IF
                        END IF
                    ELSE
                        RETURN outputDouble()
                    END IF
                END IF
            END IF
        END IF
    }
}