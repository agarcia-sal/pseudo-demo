CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        DEFINE total_cost AS 0
        DEFINE count_h AS 1
        DEFINE count_v AS 1
        DEFINE index_h AS 0
        DEFINE index_v AS 0

        PROCEDURE sort_descending(arr)
            SET size = LENGTH(arr)
            FOR pos FROM 0 TO size - 2 DO
                FOR pos_inner FROM pos + 1 TO size - 1 DO
                    IF arr[pos_inner] > arr[pos] THEN
                        SET temp_val = arr[pos]
                        SET arr[pos] = arr[pos_inner]
                        SET arr[pos_inner] = temp_val
                    END IF
                END FOR
            END FOR
        END PROCEDURE

        CALL sort_descending(horizontalCut)
        CALL sort_descending(verticalCut)

        REPEAT
            IF (index_v = n - 1) OR ((index_h < m - 1) AND (horizontalCut[index_h] > verticalCut[index_v])) THEN
                SET total_cost = total_cost + horizontalCut[index_h] * count_v
                SET count_h = count_h + 1
                SET index_h = index_h + 1
            ELSE
                SET total_cost = total_cost + verticalCut[index_v] * count_h
                SET count_v = count_v + 1
                SET index_v = index_v + 1
            END IF
        UNTIL (index_h >= m - 1) AND (index_v >= n - 1)

        RETURN total_cost
    END FUNCTION
END CLASS