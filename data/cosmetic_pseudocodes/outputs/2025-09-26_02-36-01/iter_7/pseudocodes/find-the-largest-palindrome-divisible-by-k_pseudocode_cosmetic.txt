CLASS Solution
    FUNCTION largestPalindrome(n k)
        CONST ZERO_STR ← ("0" + "")
        CONST ONE_INT ← (1 + 0)
        CONST NINE_INT ← (5 + 4)
        CONST TWO_INT ← (1 + 1)

        FUNCTION toString(num)
            RETURN "" + num
        END FUNCTION

        FUNCTION toInt(s)
            RETURN s * 1
        END FUNCTION

        FUNCTION reverseString(s)
            SET idxStart ← 0
            SET idxEnd ← LENGTH(s) - 1
            SET arrChars ← s
            WHILE idxStart < idxEnd
                SET tmpChar ← arrChars[idxStart]
                arrChars[idxStart] ← arrChars[idxEnd]
                arrChars[idxEnd] ← tmpChar
                SET idxStart ← idxStart + (1 + 0)
                SET idxEnd ← idxEnd - (1 + 0)
            END WHILE
            RETURN arrChars
        END FUNCTION

        FUNCTION substring(s startPos endPos)
            SET acc ← ""
            SET i ← startPos
            WHILE i < endPos
                SET acc ← acc + s[i]
                SET i ← i + (1 + 0)
            END WHILE
            RETURN acc
        END FUNCTION

        FUNCTION concatStrings(a b)
            RETURN a + b
        END FUNCTION

        IF n = ONE_INT THEN
            SET y ← NINE_INT
            WHILE y >= ONE_INT
                IF (y % k) = (0 + 0)
                    RETURN toString(y)
                END IF
                SET y ← y - ONE_INT
            END WHILE
            RETURN ZERO_STR
        ELSE
            SET halfLen ← (n + ONE_INT) / TWO_INT
            SET halfStr ← ""
            SET idx ← 0
            WHILE idx < halfLen
                SET halfStr ← halfStr + toString(NINE_INT)
                SET idx ← idx + (1 + 0)
            END WHILE
            SET halfVal ← toInt(halfStr)
            
            FUNCTION buildPalindrome(hVal)
                SET hs ← toString(hVal)
                IF (n % TWO_INT) = (0 + 0) THEN
                    SET reversedHs ← reverseString(hs)
                    RETURN toInt(concatStrings(hs reversedHs))
                ELSE
                    SET subStr ← substring(hs 0 (LENGTH(hs) - ONE_INT))
                    SET reversedSub ← reverseString(subStr)
                    RETURN toInt(concatStrings(hs reversedSub))
                END IF
            END FUNCTION

            FUNCTION loop(hVal)
                IF hVal < (0 + 0) THEN
                    RETURN ZERO_STR
                END IF
                SET candidate ← buildPalindrome(hVal)
                IF (candidate % k) = (0 + 0) THEN
                    RETURN toString(candidate)
                END IF
                RETURN loop(hVal - ONE_INT)
            END FUNCTION

            RETURN loop(halfVal)
        END IF
    END FUNCTION
END CLASS