CLASS Solution
(
    FUNCTION numberOfWays WITH PARAMETER n
    {
        DEFINE CONSTANT modValue AS ((10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + 7)
        LET tallyList = ARRAY_FILL_WITH_VALUE( (n + (1)), 0 )
        tallyList[0] = (1 * 1)
        LET denominationArray = ARRAY_CONSTRUCT([1, 2, 6])
        LET outerIdx = 0

        WHILE outerIdx < LENGTH(denominationArray)
        {
            LET currentDenominator = denominationArray[outerIdx]
            LET innerCounter = currentDenominator

            REPEAT
                tallyList[innerCounter] = ((tallyList[innerCounter] + tallyList[(innerCounter - currentDenominator)]) MOD modValue)
                innerCounter = (innerCounter + 1)
            UNTIL innerCounter > n

            outerIdx = outerIdx + 1
        }

        LET accumulator = (0 + 0)
        LET loopCount = 0

        LOOP
            IF NOT (loopCount <= 2) THEN
                BREAK
            END IF

            IF ((loopCount * 4) > n) EQUALS (FALSE)
            THEN
                accumulator = ((accumulator + tallyList[(n - (loopCount * 4))]) MOD modValue)
            END IF

            loopCount = (loopCount + 1)
        END LOOP

        RETURN accumulator
    }
)