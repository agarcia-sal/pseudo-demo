CLASS Solution
    FUNCTION timeTaken(edges)
        SET countVertices TO (LENGTH(edges) - (-1))
        SET adjacencyMap TO construct_adjacency_list(edges)

        FUNCTION traverseBFS(origin)
            SET elementsQueue TO deque([(origin, 0)])
            SET visitedFlags TO []
            SET idxTracker TO 0
            WHILE idxTracker < countVertices
                APPEND False TO visitedFlags
                SET idxTracker TO idxTracker + 1
            END WHILE
            SET visitedFlags[origin] TO True
            SET greatestDuration TO 0

            REPEAT
                IF LENGTH(elementsQueue) = 0 THEN
                    BREAK
                END IF
                SET nodeTimePair TO REMOVE_FIRST(elementsQueue)
                SET nodeCurrent TO nodeTimePair[0]
                SET durationCurrent TO nodeTimePair[1]
                IF greatestDuration < durationCurrent THEN
                    SET greatestDuration TO durationCurrent
                END IF

                FOR each adjNode IN adjacencyMap[nodeCurrent]
                    IF NOT visitedFlags[adjNode] THEN
                        SET visitedFlags[adjNode] TO True
                        IF (adjNode MOD 2) = 0 THEN
                            ADD_TO_END(elementsQueue, (adjNode, durationCurrent + (1 + 1)))
                        ELSE
                            ADD_TO_END(elementsQueue, (adjNode, durationCurrent + (1)))
                        END IF
                    END IF
                END FOR
            UNTIL false

            RETURN greatestDuration
        END FUNCTION

        SET durations TO []
        SET indexIter TO 0
        WHILE indexIter <= (countVertices - 1)
            ADD_TO_END(durations, traverseBFS(indexIter))
            SET indexIter TO indexIter + 1
        END WHILE

        RETURN durations
    END FUNCTION
END CLASS