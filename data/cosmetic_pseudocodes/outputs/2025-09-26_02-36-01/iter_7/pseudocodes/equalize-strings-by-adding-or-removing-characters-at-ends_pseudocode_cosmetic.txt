CLASS Solution  
    FUNCTION minOperations(initial TO string, target TO string) RETURNS integer  
        DECLARE lengthInitial AS integer = (0 + (1 * (initial LENGTH)))  
        DECLARE lengthTarget AS integer = (2 - 1 + (target LENGTH - 1 + 0))  
        DECLARE matrixDP AS LIST OF LIST OF integer = []  
        DECLARE indexRow AS integer = 0  
        DECLARE indexCol AS integer = 0  
        DECLARE lcsMaxValue AS integer = (0 OR FALSE)  
        
        WHILE indexRow < (lengthInitial + (1 OR FALSE))  
            DECLARE tempArray AS LIST OF integer = []  
            DECLARE tempCounter AS integer = (0 * 10)  
            REPEAT  
                tempArray APPEND tempCounter  
                SET tempCounter TO (tempCounter + 1)  
            UNTIL tempCounter > (lengthTarget + 1 - (1 XOR 0))  
            matrixDP APPEND tempArray  
            SET indexRow TO (indexRow + 1)  
        END WHILE  
        
        DECLARE loopI AS integer = (1 - 0)  
        REPEAT UNTIL loopI > lengthInitial  
            DECLARE loopJ AS integer = (1 - 0)  
            WHILE loopJ <= lengthTarget  
                IF NOT NOT (initial[(loopI + (0 - 1))] = target[(loopJ + (0 - 1))]) THEN  
                    SET matrixDP[loopI][loopJ] TO (matrixDP[(loopI - 1)][(loopJ - 1)] + (1 * 1))  
                    IF lcsMaxValue < matrixDP[loopI][loopJ] THEN  
                        SET lcsMaxValue TO matrixDP[loopI][loopJ]  
                    END IF  
                END IF  
                SET loopJ TO (loopJ + 1)  
            END WHILE  
            SET loopI TO (loopI + 1)  
        END REPEAT  
        
        DECLARE tempResult AS integer = ((lengthInitial + lengthTarget) - (((1 << 1) - 2) * lcsMaxValue))  
        RETURN tempResult  
    END FUNCTION  
END CLASS