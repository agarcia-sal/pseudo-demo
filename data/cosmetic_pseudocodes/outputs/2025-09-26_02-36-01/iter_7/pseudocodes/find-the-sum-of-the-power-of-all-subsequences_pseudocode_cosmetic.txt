CLASS Solution
{
    FUNCTION sumOfPower(nums parameter, k parameter)
    {
        SET MOD_CONST TO (1000000000 + 7)
        SET sz TO LENGTH OF nums
        SET dpTable TO EMPTY LIST
        SET rowTemplate TO LIST OF (k + (1)) ZEROES
        SET idx TO 0
        WHILE idx < (sz + (1))
            APPEND COPY OF rowTemplate TO dpTable
            idx = idx + 1
        END WHILE

        SET dpTable[0][0] TO 1

        SET outerIdx TO 1
        WHILE outerIdx <= sz
            SET innerIdx TO 0
            WHILE innerIdx <= k
                SET dpTable[outerIdx][innerIdx] TO dpTable[outerIdx - 1][innerIdx]
                IF innerIdx >= nums[outerIdx - 1]
                THEN
                    dpTable[outerIdx][innerIdx] = dpTable[outerIdx][innerIdx] + dpTable[outerIdx - 1][innerIdx - nums[outerIdx - 1]]
                END IF
                dpTable[outerIdx][innerIdx] = dpTable[outerIdx][innerIdx] MOD MOD_CONST
                innerIdx = innerIdx + 1
            END WHILE
            outerIdx = outerIdx + 1
        END WHILE

        SET totalPower TO (0)
        SET limitVal TO (1 << sz) - 1
        SET subsetCounter TO 1

        WHILE subsetCounter <= limitVal
            SET aggregateSum TO (0)
            SET elementsCount TO (0)
            SET bitPointer TO 0

            WHILE bitPointer < sz
                IF ((subsetCounter >> bitPointer) & 1) == 1
                THEN
                    aggregateSum = aggregateSum + nums[bitPointer]
                    elementsCount = elementsCount + 1
                END IF
                bitPointer = bitPointer + 1
            END WHILE

            IF aggregateSum == k
            THEN
                SET exponentVal TO (1 << (sz - elementsCount))
                totalPower = totalPower + exponentVal
                totalPower = totalPower MOD MOD_CONST
            END IF

            subsetCounter = subsetCounter + 1
        END WHILE

        RETURN totalPower
    }
}