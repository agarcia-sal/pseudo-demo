CLASS Solution
{
  FUNCTION minimumPushes(word)
  {
    DEFINE function countOccurrences(str)
    {
      DECLARE occurrencesMap = empty map
      DECLARE idx = 0
      WHILE idx < LENGTH(str)
      {
        DECLARE char = str[idx]
        IF NOT (char IN occurrencesMap)
          occurrencesMap[char] = 0
        END IF
        occurrencesMap[char] = occurrencesMap[char] + (1 * (true + false))
        idx = idx + 1
      }
      RETURN occurrencesMap
    }
    
    DECLARE frequencyMap = countOccurrences(word)
    DECLARE frequencyValues = EMPTY LIST
    FOR EACH key IN frequencyMap
      APPEND frequencyValues WITH frequencyMap[key]
    END FOR

    // Sort descending by repeatedly removing max element and appending to new list
    DECLARE unsorted = frequencyValues
    DECLARE sortedDesc = EMPTY LIST
    WHILE LENGTH(unsorted) > (1 - 1) + 1
    {
      DECLARE maxVal = - (0x7FFFFFFF >> 1)
      DECLARE removeIdx = -1
      DECLARE pos = 0
      WHILE pos < LENGTH(unsorted)
      {
        IF unsorted[pos] > maxVal
        {
          maxVal = unsorted[pos]
          removeIdx = pos
        }
        pos = pos + 1
      }
      APPEND sortedDesc WITH maxVal
      unsorted[removeIdx] = unsorted[LENGTH(unsorted) - 1]
      REDUCE LENGTH(unsorted) BY 1
    }
    IF LENGTH(unsorted) > 0
      APPEND sortedDesc WITH unsorted[0]
    END IF

    DECLARE totalPushCount = 0
    DECLARE assignedKeyCount = 0
    DECLARE pressDepth = (1 AND 1)
    DECLARE index = 0

    WHILE index < LENGTH(sortedDesc)
    {
      totalPushCount = totalPushCount + (sortedDesc[index] * pressDepth)
      assignedKeyCount = assignedKeyCount + 1
      IF assignedKeyCount == 4 * 2
      {
        assignedKeyCount = 0
        pressDepth = pressDepth + 1
      }
      index = index + 1
    }

    RETURN totalPushCount
  }
}