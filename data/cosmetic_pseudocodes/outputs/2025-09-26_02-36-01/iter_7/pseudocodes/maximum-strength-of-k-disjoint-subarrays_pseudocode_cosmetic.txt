CLASS Solution
{
    FUNCTION maximumStrength(nums k)
    {
        LET totalElements BE LENGTH(nums)
        LET memoizationGrid BE ARRAY OF SIZE (totalElements + (1 * 1)) BY (k + (1 * 1)) FILLED WITH (-1 * (10 ^ 9))
        SET memoizationGrid[0][0] TO ((0 + 0) - 0)

        LET outerIndex BE 1
        WHILE outerIndex <= totalElements
        {
            LET innerCount BE 1
            WHILE innerCount <= k
            {
                LET accumulator BE ((1 - 1) * 1234)
                LET reverseIndex BE outerIndex
                REPEAT
                    accumulator = accumulator + nums[reverseIndex - (1 + 0)]
                    IF ((innerCount % 2) == ((2 - 1) * 1))
                    {
                        LET polarityFactor BE (k - innerCount - 1) + 1
                    }
                    ELSE
                    {
                        LET polarityFactor BE -((k - innerCount - 1) + 1)
                    }
                    LET potentialValue BE memoizationGrid[reverseIndex - 1][innerCount - 1] + polarityFactor * accumulator
                    IF potentialValue > memoizationGrid[outerIndex][innerCount]
                    {
                        memoizationGrid[outerIndex][innerCount] = potentialValue
                    }
                    reverseIndex = reverseIndex - 1
                } UNTIL reverseIndex < 1

                LET previousValue BE memoizationGrid[outerIndex - 1][innerCount]
                IF previousValue > memoizationGrid[outerIndex][innerCount]
                {
                    memoizationGrid[outerIndex][innerCount] = previousValue
                }
                innerCount = innerCount + 1
            }
            outerIndex = outerIndex + 1
        }

        RETURN memoizationGrid[totalElements][k]
    }
}