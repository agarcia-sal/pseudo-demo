CLASS Solution {
 FUNCTION getPermutationIndex(perm) {
   LET count = 0
   LET length = perm.LENGTH()
   LET modulus = (10 ^ 9) + 1
   LET factorials = ARRAY(length)
   factorials[0] = 1
   LET iterator = 1
   WHILE iterator < length {
     factorials[iterator] = factorials[iterator - 1] * iterator
     iterator = iterator + 1
   }
   LET available = []
   LET filler = 1
   REPEAT {
     available.APPEND(filler)
     filler = filler + 1
   } UNTIL filler > length
   LET cursor = 0
   WHILE cursor < length {
     LET target = perm[cursor]
     LET positionIndex = 0
     WHILE positionIndex < available.LENGTH() {
       IF available[positionIndex] == target BREAK
       positionIndex = positionIndex + 1
     }
     LET factorIndex = ((length - cursor) - 1)
     count = count + (positionIndex * factorials[factorIndex])
     available.REMOVE_AT(positionIndex)
     cursor = cursor + 1
   }
   LET result = count % modulus
   RETURN result
 }
}