CLASS Solution
    FUNCTION countWinningSequences(s)
        CONSTANT MODULO := (five * two) * (ten * ten * ten * ten * ten * ten * ten) + seven

        FUNCTION substituteMapping()
            RETURN dictionary {
                'F': 0,
                'W': 1,
                'E': 2
            }
        END FUNCTION

        FUNCTION deltaCalc(alpha, beta)
            # Define local constants for equivalences
            CONST_ZERO := 0
            CONST_ONE := 1
            CONST_NEGONE := -1
            CONST_TWO := 2

            IF alpha == beta THEN
                RETURN CONST_ZERO
            ELSE
                IF alpha < beta THEN
                    IF NOT (alpha != CONST_ZERO OR beta != CONST_TWO) THEN
                        RETURN CONST_ONE
                    ELSE
                        RETURN CONST_NEGONE
                    END IF
                ELSE # alpha > beta
                    IF alpha == CONST_TWO AND beta == CONST_ZERO THEN
                        RETURN CONST_NEGONE
                    ELSE
                        RETURN CONST_ONE
                    END IF
                END IF
            END IF
        END FUNCTION

        FUNCTION recursiveSearch(idx, balance, prevChoice)
            LEN_S := LENGTH(s)
            CONST_ZERO := 0
            CONST_ONE := 1

            IF (LEN_S - idx) <= balance THEN
                RETURN CONST_ZERO
            END IF

            IF idx >= LEN_S THEN
                IF balance < CONST_ZERO THEN
                    RETURN CONST_ONE
                ELSE
                    RETURN CONST_ZERO
                END IF
            END IF

            ACC := CONST_ZERO

            FUNCTION loopOverL(counter)
                IF counter > 2 THEN
                    RETURN
                END IF

                IF counter != prevChoice THEN
                    ACC := ACC + recursiveSearch(idx + 1, balance + deltaCalc(d[s[idx]], counter), counter)
                    ACC := ACC MOD MODULO
                END IF

                loopOverL(counter + 1)
            END FUNCTION

            loopOverL(CONST_ZERO)
            RETURN ACC
        END FUNCTION

        SET d TO substituteMapping()
        RESULT := recursiveSearch(0, 0, -1)
        CALL recursiveSearch.cache_clear  // keep interface verbatim

        RETURN RESULT
    END FUNCTION
END CLASS