CLASS Solution
{
    FUNCTION minimumOperations(nums, target)
    {
        CONST ZERO = 0
        CONST ONE = ZERO + ONE
        CONST LENGTH = LENGTH_OF(nums)
        VAR accumulator = ABS(target[ZERO] - nums[ZERO])

        VAR iterator = ONE
        WHILE iterator < LENGTH
        {
            VAR diffCurr = target[iterator] - nums[iterator]
            VAR diffPrev = target[iterator - ONE] - nums[iterator - ONE]

            IF NOT ((diffCurr * diffPrev) <= ZERO)
            {
                VAR diffAbsDelta = ABS(ABS(diffCurr) - ABS(diffPrev))
                IF diffAbsDelta > ZERO
                {
                    accumulator = accumulator + diffAbsDelta
                }
            }
            ELSE
            {
                accumulator = accumulator + ABS(diffCurr)
            }
            iterator = iterator + ONE
        }

        RETURN accumulator
    }
}