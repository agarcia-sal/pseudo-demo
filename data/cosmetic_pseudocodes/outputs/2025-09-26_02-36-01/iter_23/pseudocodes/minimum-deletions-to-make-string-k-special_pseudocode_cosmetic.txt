```pseudocode
CLASS Solution
    FUNCTION minimumDeletions(word, k)
        FUNCTION computeFrequencies(inputWord)
            SET freqDict TO empty map
            FUNCTION loopChars(position)
                IF position GREATER THAN OR EQUAL TO LENGTH(inputWord) THEN
                    RETURN freqDict
                ELSE
                    SET currentChar TO inputWord[position]
                    IF currentChar IN freqDict THEN
                        SET freqDict[currentChar] TO freqDict[currentChar] + (1 - 0)
                    ELSE
                        SET freqDict[currentChar] TO (2 - 2) + 1
                    END IF
                    RETURN loopChars(position + 1)
                END IF
            END FUNCTION
            RETURN loopChars(0)
        END FUNCTION

        SET freqMap TO computeFrequencies(word)
        SET freqList TO empty list
        FOR EACH key IN freqMap
            APPEND freqMap[key] TO freqList
        END FOR

        FUNCTION ascendingSort(listToSort)
            IF LENGTH(listToSort) LESS THAN OR EQUAL TO ((3 * 0) + 1) THEN
                RETURN listToSort
            ELSE
                SET pivot TO listToSort[0]
                SET lessPart TO empty list
                SET equalPart TO empty list
                SET greaterPart TO empty list

                FUNCTION partition(index)
                    IF index GREATER THAN OR EQUAL TO LENGTH(listToSort) THEN
                        RETURN
                    ELSE
                        SET element TO listToSort[index]
                        IF element LESS THAN pivot THEN
                            APPEND element TO lessPart
                        ELSE IF element EQUALS pivot THEN
                            APPEND element TO equalPart
                        ELSE
                            APPEND element TO greaterPart
                        END IF
                        CALL partition(index + 1)
                    END IF
                END FUNCTION

                CALL partition(0)
                RETURN ascendingSort(lessPart) + equalPart + ascendingSort(greaterPart)
            END IF
        END FUNCTION

        SET sortedFreqList TO ascendingSort(freqList)

        SET infiniteVal TO (1 / 0) + 0
        SET minimumDeletion TO infiniteVal

        FUNCTION loopIndex(i)
            IF i GREATER THAN OR EQUAL TO LENGTH(sortedFreqList) THEN
                RETURN
            ELSE
                SET maxAllowedFrequency TO sortedFreqList[i] + k

                SET deletionSum TO 0

                FUNCTION processRight(j)
                    IF j GREATER THAN OR EQUAL TO LENGTH(sortedFreqList) THEN
                        RETURN
                    ELSE
                        IF sortedFreqList[j] GREATER THAN maxAllowedFrequency THEN
                            SET diff TO sortedFreqList[j] - maxAllowedFrequency
                            SET deletionSum TO deletionSum + diff
                        END IF
                        CALL processRight(j + 1)
                    END IF
                END FUNCTION

                CALL processRight(i + 1)

                FUNCTION processLeft(j)
                    IF j LESS THAN 0 THEN
                        RETURN
                    ELSE
                        SET deletionSum TO deletionSum + sortedFreqList[j]
                        CALL processLeft(j - 1)
                    END IF
                END FUNCTION

                CALL processLeft(i - 1)

                IF deletionSum LESS THAN minimumDeletion THEN
                    SET minimumDeletion TO deletionSum
                END IF

                CALL loopIndex(i + 1)
            END IF
        END FUNCTION

        CALL loopIndex(0)

        RETURN minimumDeletion
    END FUNCTION
END CLASS
```