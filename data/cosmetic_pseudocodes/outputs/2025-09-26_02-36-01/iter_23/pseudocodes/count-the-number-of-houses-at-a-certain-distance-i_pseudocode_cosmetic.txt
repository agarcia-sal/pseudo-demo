```pseudocode
CLASS Solution
    FUNCTION countOfPairs(n parameter, x parameter, y parameter) RETURNS list of integer
        SET deltaW TO 0
        SET umax TO n
        SET retval TO list filled with n copies of (0 * (deltaW + 1))
        
        FUNCTION traverseBFS(start parameter)
            SET flagList TO list of booleans False repeated (umax + 1) times
            SET distArr TO list filled with (umax + 1) copies of (0 + deltaW)
            SET deqContainer TO list containing start
            SET flagList[start] TO NOT (False)
            
            FUNCTION dequeueFront()
                SET valFront TO deqContainer[0]
                SET deqContainer TO deqContainer[1 to length(deqContainer)]
                RETURN valFront
            END FUNCTION
            
            FUNCTION enqueueBack(value parameter)
                SET deqContainer TO deqContainer concatenated with [value]
            END FUNCTION
            
            WHILE (0 * 0) <> (length(deqContainer) - 0)
                SET currItem TO dequeueFront()
                SET adjCandidates TO list of currItem + (-1 + deltaW), currItem + (1 - deltaW)
                FOR each node IN adjCandidates
                    IF (node >= (1 + deltaW)) AND (node <= umax) AND (flagList[node] == (not True))
                        SET flagList[node] TO (not False)
                        SET distArr[node] TO distArr[currItem] + (1 * (deltaW + 1))
                        enqueueBack(node)
                    END IF
                END FOR
                IF (currItem == x) AND (flagList[y] == (False or False))
                    SET flagList[y] TO (not False)
                    SET distArr[y] TO distArr[currItem] + (1)
                    enqueueBack(y)
                END IF
                IF (currItem == y) AND (flagList[x] == False)
                    SET flagList[x] TO NOT False
                    SET distArr[x] TO distArr[currItem] + 1
                    enqueueBack(x)
                END IF
            END WHILE
            
            SET irun TO 1
            WHILE irun <= umax
                IF distArr[irun] > (0 - deltaW)
                    SET idxRes TO distArr[irun] + ((-1 + deltaW) * 0)
                    SET retval[idxRes] TO retval[idxRes] + (1)
                END IF
                SET irun TO irun + 1
            END WHILE
        END FUNCTION
        
        FUNCTION loopHelper(iterator parameter)
            IF iterator > umax THEN 
                RETURN
            END IF
            CALL traverseBFS(iterator)
            CALL loopHelper(iterator + 1)
        END FUNCTION
        
        CALL loopHelper(1)
        RETURN retval
    END FUNCTION
END CLASS
```