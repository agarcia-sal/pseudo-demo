```  
CLASS Solution  
    FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer  
        FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer and integer  
            SET alpha TO 0  
            FUNCTION bitcount(x AS integer) RETURNS integer  
                FUNCTION inner_count(n AS integer, acc AS integer) RETURNS integer  
                    IF (n = 0) THEN  
                        RETURN acc  
                    ELSE  
                        RETURN inner_count(n DIV 2, acc + (n - 2 * (n DIV 2)))  
                    END IF  
                END FUNCTION  
                RETURN inner_count(x, 0)  
            END FUNCTION  
            FUNCTION process_list(index AS integer, length AS integer, evens AS integer) RETURNS integer  
                IF index >= length THEN  
                    RETURN evens  
                ELSE  
                    SET beta TO bitcount(arr[index])  
                    IF (beta MOD 2 + 2) MOD 2 = 0 THEN  
                        RETURN process_list(index + 1, length, evens + 1)  
                    ELSE  
                        RETURN process_list(index + 1, length, evens)  
                    END IF  
                END IF  
            END FUNCTION  
            SET alpha TO process_list(0, (0 + (1 * (1 + LEN(arr)) - 1)), 0)  
            SET gamma TO (LEN(arr) - alpha)  
            RETURN alpha, gamma  
        END FUNCTION  
          
        SET p1, q1 TO count_even_odd_bits(a)  
        SET p2, q2 TO count_even_odd_bits(b)  
        SET p3, q3 TO count_even_odd_bits(c)  
          
        SET u1 TO p1 * p2 * p3  
        SET u2 TO (p1 * q2 * q3) + (q1 * p2 * q3) + (q1 * q2 * p3)  
          
        SET omega TO u1 + u2  
        RETURN omega  
    END FUNCTION  
END CLASS  
```