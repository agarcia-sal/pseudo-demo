```pseudocode
CLASS Solution
    FUNCTION countGoodIntegers(n integer, k integer) RETURNS integer
        FUNCTION factorialCalc(u integer) RETURNS integer
            IF u LESS THAN OR EQUAL TO 1 THEN
                RETURN 1
            ELSE
                RETURN u MULTIPLIED BY factorialCalc(u MINUS 1)
            END IF
        END FUNCTION

        FUNCTION countCharacters(str string) RETURNS map of character to integer
            FUNCTION helperCount(chars list of character, idx integer, acc map of character to integer) RETURNS map of character to integer
                IF idx GREATER THAN LENGTH(chars) MINUS 1 THEN
                    RETURN acc
                ELSE
                    SET currChar TO chars AT idx
                    IF currChar IN acc THEN
                        SET acc[currChar] TO acc[currChar] PLUS 1
                    ELSE
                        SET acc[currChar] TO 1
                    END IF
                    RETURN helperCount(chars, idx PLUS 1, acc)
                END IF
            END FUNCTION

            RETURN helperCount(CONVERT str TO LIST OF character, 0, EMPTY MAP)
        END FUNCTION

        FUNCTION sortString(input string) RETURNS string
            FUNCTION insertChar(sortedList list of character, ch character) RETURNS list of character
                IF sortedList IS EMPTY THEN
                    RETURN LIST WITH ch
                ELSE IF ch LESS THAN OR EQUAL TO sortedList[0] THEN
                    RETURN LIST OF ch CONCATENATED WITH sortedList
                ELSE
                    RETURN LIST OF sortedList[0] CONCATENATED WITH insertChar(sortedList FROM INDEX 1 TO END, ch)
                END IF
            END FUNCTION

            FUNCTION sortHelper(chars list of character) RETURNS list of character
                IF LENGTH(chars) EQUAL TO 0 THEN
                    RETURN EMPTY LIST
                ELSE
                    RETURN insertChar(sortHelper(chars FROM INDEX 1 TO END), chars[0])
                END IF
            END FUNCTION

            RETURN CONCATENATE sortHelper(CONVERT input TO LIST OF character)
        END FUNCTION

        FUNCTION reverseString(input string) RETURNS string
            FUNCTION revHelper(chars list of character, idx integer, acc list of character) RETURNS list of character
                IF idx LESS THAN 0 THEN
                    RETURN acc
                ELSE
                    RETURN revHelper(chars, idx MINUS 1, LIST OF acc CONCATENATED WITH chars[idx])
                END IF
            END FUNCTION

            RETURN CONCATENATE revHelper(CONVERT input TO LIST OF character, LENGTH(input) MINUS 1, EMPTY LIST)
        END FUNCTION

        FUNCTION stringToInt(str string) RETURNS integer
            FUNCTION toIntHelper(chars list of character, idx integer, acc integer) RETURNS integer
                IF idx GREATER THAN LENGTH(chars) MINUS 1 THEN
                    RETURN acc
                ELSE
                    SET digitValue TO ASCII_VALUE(chars[idx]) MINUS ASCII_VALUE('0')
                    RETURN toIntHelper(chars, idx PLUS 1, acc MULTIPLIED BY 10 PLUS digitValue)
                END IF
            END FUNCTION

            RETURN toIntHelper(CONVERT str TO LIST OF character, 0, 0)
        END FUNCTION

        FUNCTION intToString(num integer) RETURNS string
            IF num EQUALS 0 THEN
                RETURN "0"
            END IF

            FUNCTION intToStrRecur(x integer, acc list of character) RETURNS list of character
                IF x EQUALS 0 THEN
                    RETURN acc
                ELSE
                    SET remainder TO x MODULO 10
                    SET charDigit TO CHARACTER WITH ASCII VALUE remainder PLUS ASCII VALUE OF '0'
                    RETURN intToStrRecur(x DIVIDED BY 10, LIST OF charDigit CONCATENATED WITH acc)
                END IF
            END FUNCTION

            RETURN CONCATENATE intToStrRecur(num, EMPTY LIST)
        END FUNCTION

        FUNCTION pow(baseVal integer, exp integer) RETURNS integer
            IF exp EQUALS 0 THEN
                RETURN 1
            ELSE
                RETURN baseVal MULTIPLIED BY pow(baseVal, exp MINUS 1)
            END IF
        END FUNCTION

        FUNCTION substringFrom(str string, startIdx integer) RETURNS string
            FUNCTION substrHelper(chars list of character, idx integer, acc list of character) RETURNS list of character
                IF idx GREATER THAN LENGTH(chars) MINUS 1 THEN
                    RETURN acc
                ELSE
                    RETURN substrHelper(chars, idx PLUS 1, LIST OF acc CONCATENATED WITH chars[idx])
                END IF
            END FUNCTION

            RETURN CONCATENATE substrHelper(CONVERT str TO LIST OF character, startIdx, EMPTY LIST)
        END FUNCTION

        FUNCTION concatStrings(a string, b string) RETURNS string
            RETURN a PLUS b
        END FUNCTION

        FUNCTION appendToList(lst list of integer, val integer) RETURNS list of integer
            RETURN lst PLUS LIST WITH val
        END FUNCTION

        FUNCTION contains(set set of string, elem string) RETURNS boolean
            IF elem IN set THEN
                RETURN TRUE
            ELSE
                RETURN FALSE
            END IF
        END FUNCTION

        FUNCTION addToSet(s set of string, elem string) RETURNS set of string
            SET s2 TO s
            ADD elem TO s2
            RETURN s2
        END FUNCTION

        FUNCTION getSetValuesCount(m map of character to integer) RETURNS list of integer
            FUNCTION valHelper(keys list of character, idx integer, acc list of integer) RETURNS list of integer
                IF idx GREATER THAN LENGTH(keys) MINUS 1 THEN
                    RETURN acc
                ELSE
                    RETURN valHelper(keys, idx PLUS 1, acc PLUS LIST OF m[keys[idx]])
                END IF
            END FUNCTION

            RETURN valHelper(LIST OF KEYS IN m, 0, EMPTY LIST)
        END FUNCTION

        FUNCTION mapContainsKey(m map of character to integer, key character) RETURNS boolean
            IF key IN m THEN
                RETURN TRUE
            ELSE
                RETURN FALSE
            END IF
        END FUNCTION

        FUNCTION mapGet(m map of character to integer, key character) RETURNS integer
            RETURN m[key]
        END FUNCTION

        FUNCTION integerDiv(a integer, b integer) RETURNS integer
            RETURN a DIVIDED BY b
        END FUNCTION

        FUNCTION integerMod(a integer, b integer) RETURNS integer
            RETURN a MINUS (integerDiv(a, b) MULTIPLIED BY b)
        END FUNCTION

        FUNCTION factorialListCreate(limit integer) RETURNS list of integer
            FUNCTION facHelper(x integer, acc list of integer) RETURNS list of integer
                IF x GREATER THAN limit MINUS 1 THEN
                    RETURN acc
                ELSE
                    RETURN facHelper(x PLUS 1, appendToList(acc, factorialCalc(x)))
                END IF
            END FUNCTION

            RETURN facHelper(0, EMPTY LIST)
        END FUNCTION

        SET micv TO factorialListCreate(n PLUS 1)
        SET lrah TO 0
        SET zoin TO EMPTY SET
        SET rexv TO pow(10, integerDiv(n MINUS 1, 2))

        FUNCTION processIteration(mn integer, mx integer, answer integer, visited set of string) RETURNS integer
            IF mn GREATER THAN mx THEN
                RETURN answer
            ELSE
                SET stfx TO intToString(mn)
                SET revStfx TO reverseString(stfx)
                SET substrRevStfx TO substringFrom(revStfx, integerMod(n, 2))
                SET combinedStr TO concatStrings(stfx, substrRevStfx)
                IF integerMod(stringToInt(combinedStr), k) NOT EQUALS 0 THEN
                    RETURN processIteration(mn PLUS 1, mx, answer, visited)
                ELSE
                    SET sortedStr TO sortString(combinedStr)
                    IF contains(visited, sortedStr) THEN
                        RETURN processIteration(mn PLUS 1, mx, answer, visited)
                    ELSE
                        SET newVisited TO addToSet(visited, sortedStr)
                        SET counts TO countCharacters(sortedStr)
                        IF mapContainsKey(counts, '0') AND mapGet(counts, '0') GREATER THAN 0 THEN
                            SET partRes TO (n MINUS mapGet(counts, '0')) MULTIPLIED BY micv AT n MINUS 1
                        ELSE
                            SET partRes TO micv AT n
                        END IF

                        FUNCTION divideByFactorials(val integer, vals list of integer, idx integer) RETURNS integer
                            IF idx GREATER THAN LENGTH(vals) MINUS 1 THEN
                                RETURN val
                            ELSE
                                RETURN divideByFactorials(integerDiv(val, micv AT vals[idx]), vals, idx PLUS 1)
                            END IF
                        END FUNCTION

                        SET resVal TO divideByFactorials(partRes, getSetValuesCount(counts), 0)
                        RETURN processIteration(mn PLUS 1, mx, answer PLUS resVal, newVisited)
                    END IF
                END IF
            END IF
        END FUNCTION

        RETURN processIteration(rexv, (rexv MULTIPLIED BY 10) MINUS 1, lrah, zoin)
    END FUNCTION
END CLASS
```