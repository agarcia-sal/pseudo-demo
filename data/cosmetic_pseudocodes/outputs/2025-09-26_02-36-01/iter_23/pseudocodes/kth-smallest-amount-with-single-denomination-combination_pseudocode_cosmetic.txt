```  
CLASS Solution  
    FUNCTION findKthSmallest(coins k)  
        
        FUNCTION count_smaller_or_equal(x)  
            SET alpha TO 0  
            
            FUNCTION recurse_bits(beta current_index delta current_lcm epsilon num_sets)  
                IF current_index GREATER THAN OR EQUAL TO LENGTH OF coins  
                    IF (num_sets MOD 2) EQUALS 1  
                        RETURN alpha + (x DIV current_lcm)  
                    ELSE  
                        RETURN alpha - (x DIV current_lcm)  
                    END IF  
                END IF  
                
                SET zeta WITHBIT TO (delta BITWISE_AND (1 LEFT_SHIFT current_index))  
                IF zeta NOT EQUAL TO 0  
                    SET eta TO coins[current_index] DIVIDE BY gcd(current_lcm, coins[current_index])  
                    RETURN recurse_bits(current_index + 1, current_lcm * eta, num_sets + 1)  
                ELSE  
                    RETURN recurse_bits(current_index + 1, current_lcm, num_sets)  
                END IF  
            END FUNCTION  
            
            SET alpha TO recurse_bits(0, 1, 0)  
            RETURN alpha  
        END FUNCTION  
        
        SET sigma TO 1  
        SET tau TO k * (MINIMUM ELEMENT OF coins)  
        
        FUNCTION loop(left_value right_value)  
            IF left_value GREATER THAN OR EQUAL TO right_value  
                RETURN left_value  
            END IF  
            
            SET omega TO (left_value + right_value) DIV 2  
            IF count_smaller_or_equal(omega) LESS THAN k  
                RETURN loop(omega + 1, right_value)  
            ELSE  
                RETURN loop(left_value, omega)  
            END IF  
        END FUNCTION  
        
        RETURN loop(sigma, tau)  
    END FUNCTION  
END CLASS  
```