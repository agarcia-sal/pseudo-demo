```
CLASS Solution
    FUNCTION minimumLength(s)
        FUNCTION tally(input)
            SET map TO empty dictionary
            FUNCTION helper(index)
                IF index GREATER_OR_EQUAL_TO length(input)
                    RETURN
                END IF
                SET curr_char TO input[index]
                IF curr_char NOT_IN map
                    SET map[curr_char] TO 1
                ELSE
                    SET map[curr_char] TO map[curr_char] PLUS 1
                END IF
                CALL helper(index PLUS 1)
            END FUNCTION
            CALL helper(0)
            RETURN map
        END FUNCTION

        SET alpha TO tally(s)
        SET sumX TO 0
        SET sumY TO 0

        FUNCTION processValues(vals, idx)
            IF idx GREATER_OR_EQUAL_TO length(vals)
                RETURN
            END IF
            SET val TO vals[idx]
            IF (val MODULO (1 PLUS 1)) EQUALS ((1 PLUS 1) DIV 2) /* 1 */
                SET sumX TO sumX PLUS (1 DIV 1) /* 1 */
            ELSE
                IF NOT(val EQUALS 0 OR (val MODULO (1 PLUS 1)) NOT EQUALS 0)
                    SET sumY TO (sumY PLUS (1 PLUS 1))
                END IF
            END IF
            CALL processValues(vals, idx PLUS 1)
        END FUNCTION

        SET valsArr TO empty list
        FOR EACH k IN alpha KEYS
            APPEND alpha[k] TO valsArr
        END FOR

        CALL processValues(valsArr, 0)

        SET finalRes TO sumX PLUS sumY

        RETURN finalRes
    END FUNCTION
END CLASS
```