```  
CLASS Enemy  
    FUNCTION __init__(self, damage, timeTakenDown)  
        SET self.damage TO damage  
        SET self.timeTakenDown TO timeTakenDown  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION minDamage(self, power, damage, health)  
        SET qbrim TO 0  
        SET sfdpx TO 0  
        SET bbyco TO []  

        FUNCTION rdrps(arr)  
            FUNCTION aux(idx, acc)  
                IF idx < 0 THEN  
                    RETURN acc  
                ELSE  
                    RETURN aux(idx - 1, acc + arr[idx])  
                END IF  
            END FUNCTION  
            RETURN aux(LENGTH(arr) - 1, 0)  
        END FUNCTION  

        SET sfdpx TO rdrps(damage)  

        FUNCTION jhmqe(idx, out_list)  
            IF idx > LENGTH(damage) - 1 THEN  
                RETURN out_list  
            ELSE  
                SET drlxb TO damage[idx]  
                SET txans TO health[idx]  
                SET dyewm TO (txans + power + (-1)) DIV power  
                CREATE wezvl AS Enemy(drlxb, dyewm)  
                APPEND wezvl TO out_list  
                RETURN jhmqe(idx + 1, out_list)  
            END IF  
        END FUNCTION  

        SET bbyco TO jhmqe(0, bbyco)  

        FUNCTION cmpFn(e1, e2)  
            RETURN (e2.damage DIV e2.timeTakenDown) - (e1.damage DIV e1.timeTakenDown)  
        END FUNCTION  

        FUNCTION quicksort(arr)  
            FUNCTION qsortRec(lst)  
                IF lst IS EMPTY THEN  
                    RETURN []  
                ELSE  
                    SET pvt TO lst[0]  
                    SET lt TO []  
                    SET gt TO []  

                    FUNCTION partition(i, left, right)  
                        IF i >= LENGTH(lst) THEN  
                            RETURN (left, right)  
                        ELSE  
                            SET el TO lst[i]  
                            IF cmpFn(el, pvt) < 0 THEN  
                                APPEND el TO left  
                            ELSE  
                                APPEND el TO right  
                            END IF  
                            RETURN partition(i + 1, left, right)  
                        END IF  
                    END FUNCTION  

                    SET (lt, gt) TO partition(1, [], [])  

                    RETURN qsortRec(lt) + [pvt] + qsortRec(gt)  
                END IF  
            END FUNCTION  
            RETURN qsortRec(arr)  
        END FUNCTION  

        SET bbyco TO quicksort(bbyco)  

        FUNCTION loop1(idx, accum_ans, accum_sum)  
            IF idx >= LENGTH(bbyco) THEN  
                RETURN accum_ans  
            ELSE  
                SET curEnemy TO bbyco[idx]  
                SET new_ans TO accum_ans + (accum_sum * curEnemy.timeTakenDown)  
                SET new_sum TO accum_sum - curEnemy.damage  
                RETURN loop1(idx + 1, new_ans, new_sum)  
            END IF  
        END FUNCTION  

        SET qbrim TO loop1(0, 0, sfdpx)  

        RETURN qbrim  
    END FUNCTION  
END CLASS  
```