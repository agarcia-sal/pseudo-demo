```  
CLASS Solution  
    FUNCTION numberOfPairs(points)  
        SET result TO 0  
        SET size TO LENGTH OF points  
        
        FUNCTION recursionI(pIdx)  
            IF (pIdx > (size - 1)) THEN  
                RETURN 0  
            END IF  
            
            FUNCTION recursionJ(qIdx, accum)  
                IF (qIdx > (size - 1)) THEN  
                    RETURN accum  
                END IF  
                
                IF (pIdx = qIdx) THEN  
                    RETURN recursionJ(qIdx + 1, accum)  
                END IF  
                
                SET pointPX TO points[pIdx][0]  
                SET pointPY TO points[pIdx][1]  
                SET pointQX TO points[qIdx][0]  
                SET pointQY TO points[qIdx][1]  
                
                IF ((pointPX <= pointQX) AND NOT (pointPY < pointQY)) THEN  
                    FUNCTION validateK(kIdx, flag)  
                        IF (kIdx > (size - 1)) THEN  
                            RETURN flag  
                        END IF  
                        
                        IF ((kIdx = pIdx) OR (kIdx = qIdx)) THEN  
                            RETURN validateK(kIdx + 1, flag)  
                        END IF  
                        
                        SET pointKX TO points[kIdx][0]  
                        SET pointKY TO points[kIdx][1]  
                        
                        IF ( ( (pointPX <= pointKX) AND (pointKX <= pointQX) ) AND ( (pointPY >= pointKY) AND (pointKY >= pointQY) ) ) THEN  
                            RETURN validateK(size, false)  
                        END IF  
                        
                        RETURN validateK(kIdx + 1, flag)  
                    END FUNCTION
                    
                    SET isValid TO validateK(0, true)  
                    IF isValid THEN  
                        SET accum TO accum + 1  
                    END IF  
                END IF  
                
                RETURN recursionJ(qIdx + 1, accum)  
            END FUNCTION
            
            RETURN recursionJ(0, 0) + recursionI(pIdx + 1)  
        END FUNCTION  
        
        SET result TO recursionI(0)  
        RETURN result  
    END FUNCTION  
END CLASS  
```