```pseudocode
CLASS Solution
    FUNCTION maximumSetSize(nums1 PARAMETER List OF integers nums2 PARAMETER List OF integers) RETURNS integer
        FUNCTION getUniqueElements(inputList PARAMETER List OF integers) RETURNS List OF integers
            SET resultCollection TO empty List OF integers
            SET indexCounter TO 0
            FUNCTION findInCollection(val PARAMETER integer) RETURNS boolean
                SET iterIndex TO 0
                FUNCTION hasValue() RETURNS boolean
                    IF iterIndex >= LENGTH OF resultCollection THEN
                        RETURN false
                    ELSE 
                        IF resultCollection[iterIndex] = val THEN
                            RETURN true
                        ELSE
                            SET iterIndex TO iterIndex + 1
                            RETURN hasValue()
                        END IF
                    END IF
                END FUNCTION
                RETURN hasValue()
            END FUNCTION
            FUNCTION loopAdd() RETURNS void
                IF indexCounter >= LENGTH OF inputList THEN
                    RETURN
                ELSE
                    SET currentElem TO inputList[indexCounter]
                    IF NOT findInCollection(currentElem) THEN
                        APPEND currentElem TO resultCollection
                    END IF
                    SET indexCounter TO indexCounter + 1
                    loopAdd()
                END IF
            END FUNCTION
            loopAdd()
            RETURN resultCollection
        END FUNCTION
        
        FUNCTION intersectLists(listA PARAMETER List OF integers listB PARAMETER List OF integers) RETURNS List OF integers
            SET intersectResult TO empty List OF integers
            SET pointerA TO 0
            FUNCTION hasInB(val PARAMETER integer) RETURNS boolean
                SET pointerB TO 0
                FUNCTION checkB() RETURNS boolean
                    IF pointerB >= LENGTH OF listB THEN
                        RETURN false
                    ELSE
                        IF listB[pointerB] = val THEN
                            RETURN true
                        ELSE
                            SET pointerB TO pointerB + 1
                            RETURN checkB()
                        END IF
                    END IF
                END FUNCTION
                RETURN checkB()
            END FUNCTION
            FUNCTION loopIntersect() RETURNS void
                IF pointerA >= LENGTH OF listA THEN
                    RETURN
                ELSE
                    SET currentVal TO listA[pointerA]
                    IF hasInB(currentVal) THEN
                        APPEND currentVal TO intersectResult
                    END IF
                    SET pointerA TO pointerA + 1
                    loopIntersect()
                END IF
            END FUNCTION
            loopIntersect()
            RETURN intersectResult
        END FUNCTION
        
        FUNCTION differenceLists(listMain PARAMETER List OF integers listExclude PARAMETER List OF integers) RETURNS List OF integers
            SET diffs TO empty List OF integers
            SET posMain TO 0
            FUNCTION containsVal(v PARAMETER integer) RETURNS boolean
                SET posExclude TO 0
                FUNCTION innerCheck() RETURNS boolean
                    IF posExclude >= LENGTH OF listExclude THEN
                        RETURN false
                    ELSE
                        IF listExclude[posExclude] = v THEN
                            RETURN true
                        ELSE
                            SET posExclude TO posExclude + 1
                            RETURN innerCheck()
                        END IF
                    END IF
                END FUNCTION
                RETURN innerCheck()
            END FUNCTION
            FUNCTION diffLoop() RETURNS void
                IF posMain >= LENGTH OF listMain THEN
                    RETURN
                ELSE
                    SET valNow TO listMain[posMain]
                    IF NOT containsVal(valNow) THEN
                        APPEND valNow TO diffs
                    END IF
                    SET posMain TO posMain + 1
                    diffLoop()
                END IF
            END FUNCTION
            diffLoop()
            RETURN diffs
        END FUNCTION
        
        FUNCTION minInt(a PARAMETER integer b PARAMETER integer) RETURNS integer
            IF a <= b THEN
                RETURN a
            ELSE
                RETURN b
            END IF
        END FUNCTION
        
        FUNCTION maxInt(a PARAMETER integer b PARAMETER integer) RETURNS integer
            IF a >= b THEN
                RETURN a
            ELSE
                RETURN b
            END IF
        END FUNCTION
        
        SET lengthNums TO 0
        FUNCTION countNums() RETURNS void
            IF lengthNums < LENGTH OF nums1 THEN
                SET lengthNums TO lengthNums + 1
                countNums()
            END IF
        END FUNCTION
        countNums()
        
        SET halfLength TO 0
        FUNCTION calcHalf() RETURNS void
            IF halfLength + halfLength < lengthNums THEN
                SET halfLength TO halfLength + 1
                calcHalf()
            END IF
        END FUNCTION
        calcHalf()
        
        SET uniqueSet1 TO getUniqueElements(nums1)
        SET uniqueSet2 TO getUniqueElements(nums2)
        
        SET commonElements TO intersectLists(uniqueSet1, uniqueSet2)
        SET uniqueOnly1 TO differenceLists(uniqueSet1, commonElements)
        SET uniqueOnly2 TO differenceLists(uniqueSet2, commonElements)
        
        SET takeUnique1 TO 0
        IF halfLength < LENGTH OF uniqueOnly1 THEN
            SET takeUnique1 TO halfLength
        ELSE
            SET takeUnique1 TO LENGTH OF uniqueOnly1
        END IF
        
        SET takeUnique2 TO 0
        IF halfLength < LENGTH OF uniqueOnly2 THEN
            SET takeUnique2 TO halfLength
        ELSE
            SET takeUnique2 TO LENGTH OF uniqueOnly2
        END IF
        
        SET temp1 TO halfLength - takeUnique1
        SET temp2 TO halfLength - takeUnique2
        SET temp1a TO 0
        IF temp1 > 0 THEN
            SET temp1a TO temp1
        END IF
        SET temp2a TO 0
        IF temp2 > 0 THEN
            SET temp2a TO temp2
        END IF
        
        SET remainingCommonAllowed TO temp1a + temp2a
        
        SET leastCommonTake TO 0
        IF remainingCommonAllowed < LENGTH OF commonElements THEN
            SET leastCommonTake TO remainingCommonAllowed
        ELSE
            SET leastCommonTake TO LENGTH OF commonElements
        END IF
        
        SET resultTotal TO 0
        SET resultTotal TO takeUnique1 + takeUnique2 + leastCommonTake
        
        RETURN resultTotal
    END FUNCTION
END CLASS
```