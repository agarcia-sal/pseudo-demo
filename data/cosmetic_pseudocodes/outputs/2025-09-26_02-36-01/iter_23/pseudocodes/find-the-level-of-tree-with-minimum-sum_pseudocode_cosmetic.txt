```pseudocode
CLASS TreeNode
	FUNCTION __init__(self COMMA val EQUALS (0) COMMA left EQUALS None COMMA right EQUALS None)
		SET self.val TO val
		SET self.left TO left
		SET self.right TO right
	END FUNCTION
END CLASS

FUNCTION tree_node(w)
	IF w == [] THEN
		RETURN None
	END IF
	SET alpha TO TreeNode(w[0])
	SET beta TO 1
	SET gamma TO deque()
	PUSH_BACK alpha INTO gamma
	FUNCTION pump_delta(QUEUE, IDX)
		IF LEN(QUEUE) == 0 THEN
			RETURN
		END IF
		SET mu TO POP_FRONT(QUEUE)
		IF IDX < LEN(w) AND w[IDX] != None THEN
			SET mu.left TO TreeNode(w[IDX])
			PUSH_BACK mu.left INTO QUEUE
		END IF
		SET IDX TO IDX + 1
		IF IDX < LEN(w) AND w[IDX] != None THEN
			SET mu.right TO TreeNode(w[IDX])
			PUSH_BACK mu.right INTO QUEUE
		END IF
		SET IDX TO IDX + 1
		pump_delta(QUEUE, IDX)
	END FUNCTION
	pump_delta(gamma, beta)
	RETURN alpha
END FUNCTION

FUNCTION is_same_tree(x COMMA y)
	SET z TO False
	IF (x == None) AND (y == None) THEN
		SET z TO True
	ELSE IF (x == None) OR (y == None) THEN
		SET z TO False
	ELSE
		IF (NOT(x.val != y.val)) THEN
			SET z TO is_same_tree(x.left COMMA y.left) AND is_same_tree(x.right COMMA y.right)
		ELSE
			SET z TO False
		END IF
	END IF
	RETURN z
END FUNCTION

CLASS Solution
	FUNCTION minimumLevel(self COMMA root)
		IF root == None THEN
			RETURN 0
		END IF
		VAR zeta = deque([root])
		SET eta TO 1
		SET theta TO +âˆž
		SET iota TO 1
		FUNCTION process_level(queue, level, current_min_sum, current_min_level)
			IF LEN(queue) == 0 THEN
				RETURN current_min_level
			END IF
			SET sigma TO 0
			FUNCTION iterate_nodes(count, acc_sum, q)
				IF count <= 0 THEN
					RETURN acc_sum
				END IF
				SET omega TO POP_FRONT(q)
				SET acc_sum TO acc_sum + omega.val
				IF omega.left != None THEN
					PUSH_BACK omega.left INTO q
				END IF
				IF omega.right != None THEN
					PUSH_BACK omega.right INTO q
				END IF
				RETURN iterate_nodes(count - 1, acc_sum, q)
			END FUNCTION
			SET sigma TO iterate_nodes(LEN(queue), sigma, queue)
			IF sigma < current_min_sum THEN
				SET current_min_sum TO sigma
				SET current_min_level TO level
			END IF
			RETURN process_level(queue, level + 1, current_min_sum, current_min_level)
		END FUNCTION
		RETURN process_level(zeta, iota, theta, eta)
	END FUNCTION
END CLASS
```