```  
CLASS Solution  
    FUNCTION beautifulIndices(s parameter a parameter b parameter k)  
        FUNCTION check_and_collect_A(pos parameter acc parameter)  
            IF pos GREATER THAN LENGTH(s) MINUS LENGTH(a) MINUS one  
                RETURN acc  
            ELSE  
                IF substring(s, pos, pos PLUS LENGTH(a) MINUS one) EQUALS a  
                    RETURN check_and_collect_A(pos PLUS one, acc PLUS [pos])  
                ELSE  
                    RETURN check_and_collect_A(pos PLUS one, acc)  
                END IF  
            END IF  
        END FUNCTION  
        
        FUNCTION check_and_collect_B(pos parameter acc parameter)  
            DEFINE acc_list AS acc  
            IF pos GREATER THAN LENGTH(s) MINUS LENGTH(b) MINUS one  
                RETURN acc_list  
            ELSE  
                IF substring(s, pos, pos PLUS LENGTH(b) MINUS one) EQUALS b  
                    DEFINE new_acc AS acc_list PLUS [pos]  
                ELSE  
                    DEFINE new_acc AS acc_list  
                END IF  
                RETURN check_and_collect_B(pos PLUS one, new_acc)  
            END IF  
        END FUNCTION  
        
        DEFINE ai_indices AS check_and_collect_A(zero, empty list)  
        DEFINE bi_indices AS check_and_collect_B(zero, empty list)  
        
        FUNCTION find_beautiful(i parameter j parameter result parameter)  
            IF i GREATER THAN EQUAL TO LENGTH(ai_indices) OR j GREATER THAN EQUAL TO LENGTH(bi_indices)  
                RETURN result  
            ELSE  
                DEFINE diff AS ai_indices[i] MINUS bi_indices[j]  
                DEFINE abs_diff AS diff  
                IF diff LESS THAN zero  
                    SET abs_diff TO zero MINUS diff  
                END IF  
                IF abs_diff LESS THAN OR EQUAL TO k  
                    RETURN find_beautiful(i PLUS one, j, result PLUS [ai_indices[i]])  
                ELSE  
                    IF ai_indices[i] LESS THAN bi_indices[j]  
                        RETURN find_beautiful(i PLUS one, j, result)  
                    ELSE  
                        RETURN find_beautiful(i, j PLUS one, result)  
                    END IF  
                END IF  
            END IF  
        END FUNCTION  
        
        RETURN find_beautiful(zero, zero, empty list)  
    END FUNCTION  
END CLASS  
```