```pseudocode
CLASS Solution
    FUNCTION numberOfPairs(nums1, nums2, k)
        FUNCTION localCounter(sequence)
            SET mapResult TO empty map
            FUNCTION recurseCounter(idx)
                IF idx EQUALS length of sequence THEN
                    RETURN
                END IF
                SET currentElem TO sequence[idx]
                IF currentElem NOT IN mapResult THEN
                    SET mapResult[currentElem] TO 1
                ELSE
                    SET mapResult[currentElem] TO mapResult[currentElem] PLUS 1
                END IF
                CALL recurseCounter(idx PLUS 1)
            END FUNCTION
            CALL recurseCounter(0)
            RETURN mapResult
        END FUNCTION

        SET freqMap TO localCounter(nums2)
        SET pairTotal TO 0

        FUNCTION outerRecursion(pIdx)
            IF pIdx EQUALS length of nums1 THEN
                RETURN
            END IF

            SET currFirst TO nums1[pIdx]

            FUNCTION innerRecursion(frequencyIterator)
                IF frequencyIterator IS empty THEN
                    RETURN
                END IF

                SET keyElem TO first key of frequencyIterator
                SET valCount TO first value of frequencyIterator

                IF ((currFirst MOD (keyElem MULTIPLIED BY k)) EQUALS 0) THEN
                    SET pairTotal TO pairTotal PLUS valCount
                END IF

                CALL innerRecursion(rest of frequencyIterator)
            END FUNCTION

            CALL innerRecursion(freqMap entries as list)
            CALL outerRecursion(pIdx PLUS 1)
        END FUNCTION

        CALL outerRecursion(0)
        RETURN pairTotal
    END FUNCTION
END CLASS
```