```pseudocode
CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        PROCEDURE DescendingSort(arr)
            PROCEDURE QuickSortDesc(left right)
                IF (left LESS THAN right) THEN
                    SET pivotIndex TO left
                    SET partitionIndex TO left
                    PROCEDURE Swap(x y)
                        SET temp TO arr[x]
                        SET arr[x] TO arr[y]
                        SET arr[y] TO temp
                    END PROCEDURE
                    FOR k FROM (left PLUS 1) TO right INCREMENT 1
                        IF arr[k] GREATER THAN arr[pivotIndex] THEN
                            INCREMENT partitionIndex BY 1
                            CALL Swap(partitionIndex k)
                        END IF
                    END FOR
                    CALL Swap(pivotIndex partitionIndex)
                    CALL QuickSortDesc(left partitionIndex MINUS 1)
                    CALL QuickSortDesc(partitionIndex PLUS 1 right)
                END IF
            END PROCEDURE
            CALL QuickSortDesc(0 LENGTH(arr) MINUS 1)
        END PROCEDURE

        CALL DescendingSort(horizontalCut)
        CALL DescendingSort(verticalCut)

        SET accumulator TO 0
        SET idxHorizontal TO 0
        SET idxVertical TO 0
        SET countHorizontal TO 1
        SET countVertical TO 1

        PROCEDURE LoopUntilDone(a b c d)
            IF NOT((a LESS THAN (m MINUS 1)) OR (b LESS THAN (n MINUS 1))) THEN
                RETURN
            ELSE
                IF (b EQUALS (n MINUS 1)) OR ((a LESS THAN (m MINUS 1)) AND (horizontalCut[a] GREATER THAN verticalCut[b])) THEN
                    SET accumulator TO accumulator PLUS (horizontalCut[a] TIMES d)
                    SET countHorizontal TO countHorizontal PLUS 1
                    SET idxHorizontal TO idxHorizontal PLUS 1
                ELSE
                    SET accumulator TO accumulator PLUS (verticalCut[b] TIMES c)
                    SET countVertical TO countVertical PLUS 1
                    SET idxVertical TO idxVertical PLUS 1
                END IF
                CALL LoopUntilDone(idxHorizontal idxVertical countHorizontal countVertical)
            END IF
        END PROCEDURE

        CALL LoopUntilDone(idxHorizontal idxVertical countHorizontal countVertical)

        RETURN accumulator
    END FUNCTION
END CLASS
```