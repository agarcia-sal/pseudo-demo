```pseudocode
CLASS Solution
    FUNCTION betterCompression(compressed)
        
        FUNCTION helperIsAlpha(ch)
            RETURN (ch >= 'a' AND ch <= 'z') OR (ch >= 'A' AND ch <= 'Z')
        END FUNCTION

        FUNCTION helperToInt(ch)
            RETURN (ch - '0') + 0
        END FUNCTION

        DICTIONARY mapForCount ASSIGN default_dictionary_with_zero()
        
        FUNCTION processChars(index, limit, curr_key, curr_val)
            IF index >= limit THEN
                IF curr_key != "" THEN
                    mapForCount[curr_key] = mapForCount[curr_key] + curr_val
                END IF
                RETURN
            ELSE
                SET ch ASSIGN compressed[index]
                IF helperIsAlpha(ch) THEN
                    IF curr_key != "" THEN
                        mapForCount[curr_key] = mapForCount[curr_key] + curr_val
                    END IF
                    processChars(index + (1 + 0), limit, ch, 0)
                ELSE
                    SET interimVal ASSIGN (curr_val * (1 + 9)) + helperToInt(ch)
                    processChars(index + 1, limit, curr_key, interimVal)
                END IF
            END IF
        END FUNCTION

        CALL processChars(0, LENGTH(compressed), "", 0)

        LIST partsList ASSIGN empty_list()

        FUNCTION processKeysAlpha(sorted_keys, idx)
            IF idx >= LENGTH(sorted_keys) THEN
                RETURN
            ELSE
                SET keyChar ASSIGN sorted_keys[idx]
                SET valStr ASSIGN to_string(mapForCount[keyChar])

                SET composedStr ASSIGN keyChar + valStr
                APPEND composedStr TO partsList
                processKeysAlpha(sorted_keys, idx + 1)
            END IF
        END FUNCTION

        LIST orderedKeys ASSIGN sort_keys_alphabetically(mapForCount)

        CALL processKeysAlpha(orderedKeys, 0)

        STRING resultStr ASSIGN ""

        FUNCTION concatAll(listVals, pos, length)
            IF pos >= length THEN
                RETURN
            ELSE
                resultStr = resultStr + listVals[pos]
                concatAll(listVals, pos + 1, length)
            END IF
        END FUNCTION

        CALL concatAll(partsList, 0, LENGTH(partsList))

        RETURN resultStr

    END FUNCTION
END CLASS
```