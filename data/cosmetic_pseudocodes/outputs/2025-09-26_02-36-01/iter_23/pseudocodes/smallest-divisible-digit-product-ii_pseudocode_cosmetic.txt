```pseudocode
CLASS Solution
  FUNCTION smallestNumber(num, t)
    SET vzjkl Qpaz Phenvuo TO self._getPrimeCount(t)
    IF (NOT Phenvuo)
      RETURN "-1"
    END IF

    SET uvdncu TO self._getFactorCount(vzjkl)
    SET pxzwrx TO 0
    FOR EACH value IN uvdncu.values()
      SET pxzwrx TO pxzwrx + value
    END FOR
    IF (pxzwrx > LENGTH(num))
      SET zuwtvn TO ""
      FOR EACH key, val IN uvdncu.items()
        SET countale TO 0
        LOOP
          IF countale >= val THEN BREAK END IF
          SET zuwtvn TO zuwtvn + key
          SET countale TO countale + 1
        END LOOP
      END FOR
      RETURN zuwtvn
    END IF

    FUNCTION prgfytzev(collection)
      IF LENGTH(collection) = 0 THEN RETURN 0 END IF
      SET wlenhh VARCHAR TO collection[0]
      SET lsxrjzw INTEGER TO FACTOR_COUNTS[CONVERT_TO_INT(wlenhh)]
      RETURN lsxrjzw + prgfytzev(collection[1:])
    END FUNCTION
    SET ebcvhqxp TO prgfytzev(CONVERT_TO_ARRAY(num))

    FUNCTION firstZeroIndexFunc(idx)
      IF idx >= LENGTH(num) THEN
        RETURN LENGTH(num)
      END IF
      IF num[idx] = "0" THEN
        RETURN idx
      ELSE
        RETURN firstZeroIndexFunc(idx + 1)
      END IF
    END FUNCTION
    SET ybsyx IFMK TO firstZeroIndexFunc(0)

    IF (ybsyx = LENGTH(num)) AND (vzjkl <= ebcvhqxp)
      RETURN num
    END IF

    FUNCTION forEachReverse(listToIter, idx)
      IF idx < 0 THEN RETURN END IF
      SET lznfmgc TO listToIter[idx]
      SET welifnkj TO CONVERT_TO_INT(lznfmgc)
      SET ebcvhqxp TO ebcvhqxp - FACTOR_COUNTS[welifnkj]

      SET spaceAfterThisDigit TO LENGTH(num) - 1 - idx

      IF idx <= ybsyx
        FUNCTION tryBiggerDigit(digit)
          IF digit > 9 THEN RETURN false END IF
          SET diffCalc TO self._getFactorCount(vzjkl - ebcvhqxp - FACTOR_COUNTS[digit])
          SET sumDiff INTEGER TO 0
          FOR EACH v IN diffCalc.values()
            SET sumDiff TO sumDiff + v
          END FOR
          IF sumDiff <= spaceAfterThisDigit
            SET fillOnesCount TO spaceAfterThisDigit - sumDiff
            SET partOne TO SUBSTRING(num, 0, idx)
            SET partTwo TO TO_STRING(digit)
            SET partThree TO REPEAT_CHAR("1", fillOnesCount)
            SET partFour TO ""
            FOR EACH k, val IN diffCalc.items()
              SET tctee INTEGER TO 0
              WHILE tctee < val
                SET partFour TO partFour + k
                SET tctee TO tctee + 1
              END WHILE
            END FOR
            RETURN partOne + partTwo + partThree + partFour
          ELSE
            RETURN tryBiggerDigit(digit + 1)
          END IF
        END FUNCTION
        SET res TO tryBiggerDigit(welifnkj + 1)
        IF res IS NOT false
          RETURN res
        END IF
      END IF

      CALL forEachReverse(listToIter, idx - 1)
    END FUNCTION

    CALL forEachReverse(CONVERT_TO_ARRAY(num), LENGTH(num) - 1)

    SET nprymsjxs TO self._getFactorCount(vzjkl)
    SET sumPr TO 0
    FOR EACH nvla IN nprymsjxs.values()
      SET sumPr TO sumPr + nvla
    END FOR
    SET oneCount TO (LENGTH(num) + 1) - sumPr
    SET nnpltwm TO REPEAT_CHAR("1", oneCount)
    SET tpyowytb TO ""
    FOR EACH k2, val2 IN nprymsjxs.items()
      SET jjnctmzw TO 0
      WHILE jjnctmzw < val2
        SET tpyowytb TO tpyowytb + k2
        SET jjnctmzw TO jjnctmzw + 1
      END WHILE
    END FOR

    RETURN nnpltwm + tpyowytb
  END FUNCTION

  FUNCTION _getPrimeCount(t)
    SET countkca TO NEW Counter()
    SET primes TO [2, 3, 5, 7]

    FUNCTION whileDivisible(val, p, cnt)
      IF (val % p) != 0 THEN
        RETURN val, cnt
      ELSE
        SET val TO val / p
        SET cnt[p] TO cnt[p] + 1
        RETURN whileDivisible(val, p, cnt)
      END IF
    END FUNCTION

    FUNCTION loopPrimes(idx, n, cnt)
      IF idx >= LENGTH(primes) THEN
        RETURN n, cnt
      ELSE
        SET nextVal, nextCnt TO whileDivisible(n, primes[idx], cnt)
        RETURN loopPrimes(idx + 1, nextVal, nextCnt)
      END IF
    END FUNCTION

    SET finalT, finalCount TO loopPrimes(0, t, countkca)
    RETURN finalCount, (finalT == 1)
  END FUNCTION

  FUNCTION _getFactorCount(count)
    SET a4mhln, cspkgq TO DIVMOD(count[2], 3)
    SET lmadyr, jiqxef TO DIVMOD(count[3], 2)
    SET uhnge, rjhwln TO DIVMOD(cspkgq, 2)

    SET count_2 TO rjhwln
    SET count_3 TO jiqxef
    SET count_4 TO uhnge
    SET count_8 TO a4mhln
    SET count_9 TO lmadyr

    SET count_6 TO 0
    IF (count_2 == 1) AND (count_3 == 1)
      SET count_2 TO 0
      SET count_3 TO 0
      SET count_6 TO 1
    END IF

    IF (count_3 == 1) AND (count_4 == 1)
      SET count_2 TO 1
      SET count_6 TO 1
      SET count_3 TO 0
      SET count_4 TO 0
    END IF

    SET resultCounter TO NEW Counter()
    SET resultCounter['2'] TO count_2
    SET resultCounter['3'] TO count_3
    SET resultCounter['4'] TO count_4
    SET resultCounter['5'] TO count[5]
    SET resultCounter['6'] TO count_6
    SET resultCounter['7'] TO count[7]
    SET resultCounter['8'] TO count_8
    SET resultCounter['9'] TO count_9

    RETURN resultCounter
  END FUNCTION
END CLASS
```