```pseudocode
CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        FUNCTION sortDescending(arr) 
            FUNCTION recurseSort(startIndex endIndex)
                IF startIndex GREATER OR EQUAL endIndex RETURN
                SET pivotIndex TO startIndex
                SET leftCursor TO startIndex PLUS one
                SET rightCursor TO endIndex
                WHILE leftCursor LESS OR EQUAL rightCursor
                    IF arr[leftCursor] GREATER OR EQUAL arr[pivotIndex]
                        SET leftCursor TO leftCursor PLUS one
                    ELSE IF arr[rightCursor] LESS arr[pivotIndex]
                        SET rightCursor TO rightCursor MINUS one
                    ELSE
                        SET tempVal TO arr[leftCursor]
                        SET arr[leftCursor] TO arr[rightCursor]
                        SET arr[rightCursor] TO tempVal
                        SET leftCursor TO leftCursor PLUS one
                        SET rightCursor TO rightCursor MINUS one
                    END IF
                END WHILE
                SET tempPivot TO arr[pivotIndex]
                SET arr[pivotIndex] TO arr[rightCursor]
                SET arr[rightCursor] TO tempPivot
                CALL recurseSort(startIndex rightCursor MINUS one)
                CALL recurseSort(rightCursor PLUS one endIndex)
            END FUNCTION
            CALL recurseSort(0 LENGTH OF arr MINUS one)
        END FUNCTION

        CALL sortDescending(horizontalCut)
        CALL sortDescending(verticalCut)

        SET accumulator TO 0
        SET idxA TO 0
        SET idxB TO 0
        SET countH TO 1
        SET countV TO 1

        FUNCTION loopProcess(indexA indexB acc countHorizontal countVertical)
            IF (indexA GREATER OR EQUAL LENGTH OF horizontalCut) AND (indexB GREATER OR EQUAL LENGTH OF verticalCut)
                RETURN acc
            ELSE
                IF (indexB GREATER OR EQUAL LENGTH OF verticalCut) OR ((indexA LESS LENGTH OF horizontalCut) AND (horizontalCut[indexA] GREATER verticalCut[indexB]))
                    SET partialSum TO acc PLUS (horizontalCut[indexA] MULTIPLIED BY countVertical)
                    RETURN loopProcess(indexA PLUS one indexB partialSum countHorizontal PLUS one countVertical)
                ELSE
                    SET partialSum TO acc PLUS (verticalCut[indexB] MULTIPLIED BY countHorizontal)
                    RETURN loopProcess(indexA indexB PLUS one partialSum countHorizontal countVertical PLUS one)
                END IF
            END IF
        END FUNCTION

        RETURN loopProcess(idxA idxB accumulator countH countV)
    END FUNCTION
END CLASS
```