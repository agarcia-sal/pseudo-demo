```  
CLASS Solution  
    FUNCTION shortestSubstrings(arr)  
        SET _dict_counter TO an empty dictionary  
        PROCEDURE _init_counter()  
            SET _idx_a TO 0  
            PROCEDURE _add_substrings(str_p, len_p)  
                PROCEDURE _loop_j(i_p, j_p)  
                    IF j_p < len_p + 1 THEN  
                        SET _sub_p TO substring of str_p from i_p TO j_p - 1  
                        IF _sub_p IN _dict_counter THEN  
                            SET _dict_counter[_sub_p] TO _dict_counter[_sub_p] + 1  
                        ELSE  
                            SET _dict_counter[_sub_p] TO 1  
                        END IF  
                        CALL _loop_j(i_p, j_p + 1)  
                    ELSE  
                        RETURN  
                    END IF  
                END PROCEDURE  
                IF _idx_a < len_p THEN  
                    CALL _loop_j(_idx_a, _idx_a + 1)  
                    SET _idx_a TO _idx_a + 1  
                    CALL _add_substrings(str_p, len_p)  
                ELSE  
                    RETURN  
                END IF  
            END PROCEDURE  
            CALL _add_substrings(s, length_s)  
        END PROCEDURE  

        SET _pos_x TO 0  
        WHILE _pos_x < length(arr) DO  
            SET s TO arr[_pos_x]  
            SET length_s TO length of s  
            CALL _init_counter()  
            SET _pos_x TO _pos_x + 1  
        END WHILE  

        SET answer TO empty list  

        PROCEDURE _find_shortest_unique(sq)  
            SET len_sq TO length of sq  
            SET ret_val TO ""  
            PROCEDURE _walker_i(i_i)  
                PROCEDURE _walker_j(j_j)  
                    IF j_j <= len_sq THEN  
                        SET subs_i_j TO substring of sq from i_i TO j_j - 1  
                        IF (_dict_counter[subs_i_j] == 1) THEN  
                            IF (ret_val == "") OR ((length of subs_i_j) < (length of ret_val)) OR  
                               ((length of subs_i_j) == (length of ret_val) AND subs_i_j < ret_val) THEN  
                                SET ret_val TO subs_i_j  
                            END IF  
                        END IF  
                        CALL _walker_j(j_j + 1)  
                    ELSE RETURN  
                    END IF  
                END PROCEDURE  
                IF i_i < len_sq THEN  
                    CALL _walker_j(i_i + 1)  
                    CALL _walker_i(i_i + 1)  
                ELSE  
                    RETURN  
                END IF  
            END PROCEDURE  
            CALL _walker_i(0)  
            RETURN ret_val  
        END PROCEDURE  

        SET _idy_m TO 0  
        WHILE _idy_m < length(arr) DO  
            SET _curr_str TO arr[_idy_m]  
            SET res_substr TO _find_shortest_unique(_curr_str)  
            APPEND res_substr TO answer  
            SET _idy_m TO _idy_m + 1  
        END WHILE  

        RETURN answer  
    END FUNCTION  
END CLASS  
```