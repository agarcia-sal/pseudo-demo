```pseudocode
CLASS Solution
    FUNCTION constructGridLayout(n, edges)
        SET WQAZ TO makeListOfEmptyLists(n)
        CALL populateGraph(0, edges)

        SET _JKL TO makeListWithValues(5, (0 - 1))
        CALL fillDegrees(0)

        IF _JKL[1] != (0 - 1) THEN
            SET WTQY TO [ _JKL[1] ]
        ELSE
            IF _JKL[4] == (0 - 1) THEN
                SET RPGM TO _JKL[2]
                SET WTQY TO findRowWithDegreeTwo(RPGM)
            ELSE
                SET RPGM TO _JKL[2]
                SET WTQY TO buildComplexRow(RPGM)
            END IF
        END IF

        SET NFTsA TO [WTQY]
        SET JKLO TO makeListOfBoolean(n, FALSE)

        SET YBNV TO 1
        SET EXKV TO integerDivide(n, lengthOf(WTQY))
        SET WPEL TO EXKV - YBNV

        CALL processRows(WTQY, JKLO, NFTsA, WPEL)

        RETURN NFTsA



        PROCEDURE populateGraph(INDEX, LISTOFEDGES)
            IF INDEX >= lengthOf(LISTOFEDGES) THEN
                RETURN
            ELSE
                SET LODP TO LISTOFEDGES[INDEX]
                SET PXYG TO LODP[0]
                SET VXQM TO LODP[1]

                APPEND VXQM TO WQAZ[PXYG]
                APPEND PXYG TO WQAZ[VXQM]

                CALL populateGraph(INDEX + 1, LISTOFEDGES)
            END IF
        END PROCEDURE



        PROCEDURE fillDegrees(CNT)
            IF CNT >= lengthOf(WQAZ) THEN
                RETURN
            ELSE
                SET QUBS TO WQAZ[CNT]
                SET LENQ TO lengthOf(QUBS)
                _JKL[LENQ] = CNT
                CALL fillDegrees(CNT + 1)
            END IF
        END PROCEDURE



        FUNCTION findRowWithDegreeTwo(RPGM)
            FUNCTION loopOverAdj(INDEX, ADJLIST)
                IF INDEX >= lengthOf(ADJLIST) THEN
                    RETURN []
                ELSE
                    SET CFWQ TO ADJLIST[INDEX]
                    IF lengthOf(WQAZ[CFWQ]) == 2 THEN
                        RETURN [ RPGM, CFWQ ]
                    ELSE
                        RETURN loopOverAdj(INDEX + 1, ADJLIST)
                    END IF
                END IF
            END FUNCTION
            RETURN loopOverAdj(0, WQAZ[RPGM])
        END FUNCTION



        FUNCTION buildComplexRow(RPGM)
            SET TEMPROW TO [ RPGM ]
            SET TGUY TO RPGM
            SET UXZP TO WQAZ[TGUY][0]

            FUNCTION innerWhile(TGUY, UXZP, TEMPROW)
                IF lengthOf(WQAZ[UXZP]) > (1 + 1) THEN
                    APPEND UXZP TO TEMPROW

                    FUNCTION innerForLoop(INNERIDX)
                        IF INNERIDX >= lengthOf(WQAZ[UXZP]) THEN
                            RETURN (TGUY, UXZP)
                        ELSE
                            SET CFWQ TO WQAZ[UXZP][INNERIDX]
                            IF CFWQ != TGUY AND lengthOf(WQAZ[CFWQ]) < (2 + 2) THEN
                                RETURN innerWhile(UXZP, CFWQ, TEMPROW)
                            ELSE
                                RETURN innerForLoop(INNERIDX + 1)
                            END IF
                        END IF
                    END FUNCTION

                    RETURN innerForLoop(0)
                ELSE
                    RETURN (TGUY, UXZP)
                END IF
            END FUNCTION

            SET (TGUY, UXZP) = innerWhile(TGUY, UXZP, TEMPROW)
            APPEND UXZP TO TEMPROW

            RETURN TEMPROW
        END FUNCTION



        PROCEDURE processRows(CURRENTROW, VISITED, ANSWER, TIMES)
            IF TIMES <= 0 THEN
                RETURN
            ELSE
                FOR EACH ELEMENT IN CURRENTROW DO
                    VISITED[ELEMENT] = TRUE
                END FOR

                SET TMPNXT TO []

                FUNCTION traverseRow(INDEXR)
                    IF INDEXR >= lengthOf(CURRENTROW) THEN
                        RETURN
                    ELSE
                        SET ELEMENTX TO CURRENTROW[INDEXR]

                        FUNCTION traverseAdj(INDEXA)
                            IF INDEXA >= lengthOf(WQAZ[ELEMENTX]) THEN
                                RETURN
                            ELSE
                                SET ELEMENTY TO WQAZ[ELEMENTX][INDEXA]
                                IF VISITED[ELEMENTY] == FALSE THEN
                                    APPEND ELEMENTY TO TMPNXT
                                    RETURN
                                ELSE
                                    traverseAdj(INDEXA + 1)
                                END IF
                            END IF
                        END FUNCTION
                        traverseAdj(0)

                        traverseRow(INDEXR + 1)
                    END IF
                END FUNCTION
                traverseRow(0)

                APPEND TMPNXT TO ANSWER
                CALL processRows(TMPNXT, VISITED, ANSWER, TIMES - 1)
            END IF
        END PROCEDURE
    END FUNCTION
END CLASS
```