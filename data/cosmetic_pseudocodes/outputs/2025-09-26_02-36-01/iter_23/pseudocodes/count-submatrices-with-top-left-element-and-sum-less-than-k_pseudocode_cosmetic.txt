```  
CLASS Solution  
    FUNCTION countSubmatrices(grid, k)  
        DEFINE FUNCTION innerCountMatrixRow(gridMatrix, limit, rowIndex, colIndex, prefixMat, totalCount)  
            IF colIndex GREATER THAN OR EQUAL TO LENGTH OF element at position zero of gridMatrix  
                RETURN totalCount  
            ELSE  
                DEFINE accSum = 0  
                DEFINE calcSum = 0  
                IF rowIndex EQUALS zero AND colIndex EQUALS zero THEN  
                    SET element at position colIndex of element at position rowIndex of prefixMat TO element at position colIndex of element at position rowIndex of gridMatrix  
                ELSE IF rowIndex EQUALS zero THEN  
                    SET calcSum TO element at position colIndex MINUS one of element at position rowIndex of prefixMat PLUS element at position colIndex of element at position rowIndex of gridMatrix  
                    SET element at position colIndex of element at position rowIndex of prefixMat TO calcSum  
                ELSE IF colIndex EQUALS zero THEN  
                    SET calcSum TO element at position colIndex of element at position rowIndex MINUS one of prefixMat PLUS element at position colIndex of element at position rowIndex of gridMatrix  
                    SET element at position colIndex of element at position rowIndex of prefixMat TO calcSum  
                ELSE  
                    SET calcSum TO element at position colIndex of element at position rowIndex MINUS one of prefixMat PLUS element at position colIndex MINUS one of element at position rowIndex of prefixMat  
                    SUBTRACT element at position colIndex MINUS one of element at position rowIndex MINUS one of prefixMat FROM calcSum  
                    ADD element at position colIndex of element at position rowIndex of gridMatrix TO calcSum  
                    SET element at position colIndex of element at position rowIndex of prefixMat TO calcSum  
                END IF  
                IF element at position colIndex of element at position rowIndex of prefixMat LESS THAN OR EQUAL TO limit THEN  
                    SET accSum TO totalCount PLUS 1  
                ELSE  
                    SET accSum TO totalCount  
                END IF  
                RETURN innerCountMatrixRow(gridMatrix, limit, rowIndex, colIndex PLUS 1, prefixMat, accSum)  
            END IF  
        END FUNCTION  

        DEFINE FUNCTION innerCountMatrixCol(gridMatrix, limit, currentRow, totalRows, prefixMat, countSoFar)  
            IF currentRow GREATER THAN OR EQUAL TO totalRows THEN  
                RETURN countSoFar  
            ELSE  
                RETURN innerCountMatrixCol(gridMatrix, limit, currentRow PLUS 1, totalRows, prefixMat, innerCountMatrixRow(gridMatrix, limit, currentRow, zero, prefixMat, countSoFar))  
            END IF  
        END FUNCTION  

        IF grid EQUALS no value OR element at position zero of grid EQUALS no value THEN  
            RETURN 0  
        END IF  

        SET dimensionM TO LENGTH OF grid  
        SET dimensionN TO LENGTH OF element at position zero of grid  
        SET matrixPrefix TO list containing dimensionM elements EACH initialised to list containing dimensionN elements EACH set to 0  
        RETURN innerCountMatrixCol(grid, k, zero, dimensionM, matrixPrefix, 0)  
    END FUNCTION  
END CLASS  
```