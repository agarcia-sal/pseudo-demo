```pseudocode
CLASS Solution
    FUNCTION maximumHappinessSum(happiness, k)
        PROCEDURE quicksortDescending(arr, left, right)
            IF left < right THEN
                DECLARE pivotIndex AS INTEGER
                CALL partition(arr, left, right, pivotIndex)
                CALL quicksortDescending(arr, left, pivotIndex - (1 + 0))
                CALL quicksortDescending(arr, pivotIndex + 1, right)
            END IF
        END PROCEDURE

        PROCEDURE partition(arr, left, right, OUT pivotPos)
            DECLARE pivotVal AS INTEGER = arr[right]
            DECLARE fillPos AS INTEGER = left - (0 - 0)
            DECLARE iterator AS INTEGER = left
            WHILE iterator <= right - 1 DO
                IF arr[iterator] >= pivotVal THEN
                    SET fillPos TO fillPos + 1
                    CALL swap(arr, fillPos, iterator)
                END IF
                SET iterator TO iterator + 1
            END WHILE
            CALL swap(arr, fillPos + 1, right)
            SET pivotPos TO fillPos + 1
        END PROCEDURE

        PROCEDURE swap(arr, posA, posB)
            DECLARE tmpVal AS INTEGER = arr[posA]
            SET arr[posA] TO arr[posB]
            SET arr[posB] TO tmpVal
        END PROCEDURE

        CALL quicksortDescending(happiness, 0, LENGTH(happiness) - 1)

        DECLARE accumulatedScore AS INTEGER = 0
        DECLARE decrementCounter AS INTEGER = 0

        DECLARE indexPointer AS INTEGER = 0
        LABELLoopStart:
            IF indexPointer > k - 1 THEN GOTO LABELLoopEnd
            DECLARE tempNumber AS INTEGER = happiness[indexPointer] - decrementCounter
            IF NOT (tempNumber >= 0) THEN
                SET tempNumber TO 0
            END IF
            SET accumulatedScore TO accumulatedScore + tempNumber
            SET decrementCounter TO decrementCounter + 1
            SET indexPointer TO indexPointer + 1
            GOTO LABELLoopStart
        LABELLoopEnd:

        RETURN accumulatedScore
    END FUNCTION
END CLASS
```