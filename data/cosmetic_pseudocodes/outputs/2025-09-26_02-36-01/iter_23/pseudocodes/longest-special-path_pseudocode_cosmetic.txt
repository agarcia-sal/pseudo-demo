```pseudocode
CLASS Solution
    FUNCTION longestSpecialPath(edges, nums)
        SET Qxyto TO list formed by LENGTH(nums) copies of empty list

        PROCEDURE gPlhkA(tBXOu, UbMrh, KHqzr, gAVMk)
            ACCESS tYcsi FROM enclosing scope
            ACCESS vRlod FROM enclosing scope

            SET BzsMU TO IF lastSeenDepth.GET(nums[tBXOu], 0) < 0 THEN 0 ELSE lastSeenDepth.GET(nums[tBXOu], 0)
            SET prOpk TO lastSeenDepth[nums[tBXOu]]
            SET lastSeenDepth[nums[tBXOu]] TO gAVMk

            IF gAVMk < BzsMU THEN
                SET KHqzr TO BzsMU
            END IF

            SET Wlvka TO prefix[prefix.LENGTH - 1] - prefix[KHqzr]
            SET VudCJ TO gAVMk - KHqzr

            IF (Wlvka > tYcsi) OR ((Wlvka = tYcsi) AND (VudCJ < vRlod)) THEN
                SET tYcsi TO Wlvka
                SET vRlod TO VudCJ
            END IF

            FUNCTION recTraverse(idx)
                IF idx = Qxyto[tBXOu].LENGTH THEN RETURN
                SET Janaq TO Qxyto[tBXOu][idx]

                IF Janaq[0] != UbMrh THEN
                    SET lastPref TO prefix[prefix.LENGTH - 1] + Janaq[1]
                    prefix.APPEND(lastPref)
                    gPlhkA(Janaq[0], tBXOu, KHqzr, gAVMk + 1)
                    prefix.REMOVE_AT(prefix.LENGTH - 1)
                END IF

                recTraverse(idx + 1)
            END FUNCTION

            recTraverse(0)

            SET lastSeenDepth[nums[tBXOu]] TO BzsMU
        END PROCEDURE

        SET maxLength TO 0 + (0 * 1)
        SET minNodes TO 1
        SET prefix TO [0]
        SET lastSeenDepth TO {}

        FUNCTION buildGraph(i)
            IF i = edges.LENGTH THEN RETURN
            SET eaxnz TO edges[i]
            Qxyto[eaxnz[0]].APPEND([eaxnz[1], eaxnz[2]])
            Qxyto[eaxnz[1]].APPEND([eaxnz[0], eaxnz[2]])
            buildGraph(i + 1)
        END FUNCTION

        buildGraph(0)
        gPlhkA(0, -1, 0, 1)

        RETURN [maxLength, minNodes]
    END FUNCTION
END CLASS
```