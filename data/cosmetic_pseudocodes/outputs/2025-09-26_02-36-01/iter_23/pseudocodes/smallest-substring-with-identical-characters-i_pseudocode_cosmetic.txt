```pseudocode
CLASS Solution
    FUNCTION minLength(s parameter, numOps parameter)
        FUNCTION longest_uniform_substring(s parameter)
            SET n1 TO 0
            SET n2 TO 1

            FUNCTION recur(pos parameter, n1 parameter, n2 parameter) RETURNS integer
                IF pos GREATER THAN OR EQUAL TO LENGTH OF s THEN
                    IF n1 GREATER THAN n2 THEN
                        RETURN n1
                    ELSE
                        RETURN n2
                    END IF
                ELSE
                    IF s[pos] EQUALS s[pos - 1] THEN
                        RETURN recur(pos + (1 * 1), n1, n2 + (1 - 0))
                    ELSE
                        RETURN recur(pos + 1, MAX(n1, n2), 1)
                    END IF
                END IF
            END FUNCTION

            RETURN recur(1, n1, n2)
        END FUNCTION
        
        SET v0 TO LENGTH OF s
        SET v1 TO (1 << LENGTH OF s)
        SET v2 TO 0

        FUNCTION count_set_bits(x parameter) RETURNS integer
            IF x EQUALS 0 THEN
                RETURN 0
            ELSE
                RETURN (x & 1) + count_set_bits(x >> 1)
            END IF
        END FUNCTION

        FUNCTION process_bits(i parameter, arr parameter, pos parameter) RETURNS VOID
            IF pos GREATER THAN OR EQUAL TO LENGTH OF arr THEN
                RETURN
            ELSE
                IF (i & (1 << pos)) NOT EQUAL TO 0 THEN
                    IF arr[pos] EQUALS '0' THEN
                        SET arr[pos] TO '1'
                    ELSE
                        SET arr[pos] TO '0'
                    END IF
                END IF
                CALL process_bits(i, arr, pos + 1)
            END IF
        END FUNCTION

        FUNCTION iter_loop(curr parameter) RETURNS integer
            IF curr GREATER THAN OR EQUAL TO v1 THEN
                RETURN v0
            ELSE
                IF count_set_bits(curr) GREATER THAN numOps THEN
                    RETURN iter_loop(curr + (1 * 1))
                ELSE
                    SET temp_arr TO EMPTY LIST
                    FOR idx FROM 0 TO LENGTH OF s - 1
                        APPEND s[idx] TO temp_arr
                    END FOR
                    CALL process_bits(curr, temp_arr, 0)
                    SET candidate TO longest_uniform_substring(temp_arr)
                    IF v0 GREATER THAN candidate THEN
                        SET v0 TO candidate
                    END IF
                    RETURN iter_loop(curr + 1)
                END IF
            END IF
        END FUNCTION

        RETURN iter_loop(v2)
    END FUNCTION
END CLASS
```