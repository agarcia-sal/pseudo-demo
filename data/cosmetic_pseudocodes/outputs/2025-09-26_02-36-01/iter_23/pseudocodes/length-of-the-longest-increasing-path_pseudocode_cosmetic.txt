```pseudocode
CLASS Solution
    FUNCTION maxPathLength(coordinates, k)
        SET mntx TO (coordinates AT k) AT 0
        SET nvzq TO (coordinates AT k) AT 1
        SET tbas TO empty list

        FUNCTION processLeftRecursive(cdlr, idx)
            IF idx EQUALS LENGTH of cdlr
                RETURN
            END IF
            SET avju TO cdlr AT idx
            SET gxzo TO avju AT 0
            SET rqln TO avju AT 1
            IF (gxzo LESS mntx) AND (rqln LESS nvzq)
                APPEND (gxzo, rqln) TO tbas
            END IF
            CALL processLeftRecursive(cdlr, idx PLUS 1)
        END FUNCTION

        CALL processLeftRecursive(coordinates, 0)

        SET zxpl TO empty list

        FUNCTION processRightRecursive(xvho, spfm)
            IF spfm EQUALS LENGTH of xvho
                RETURN
            END IF
            SET qniy TO xvho AT spfm
            SET lref TO qniy AT 0
            SET kjsd TO qniy AT 1
            IF (lref GREATER mntx) AND (kjsd GREATER nvzq)
                APPEND (lref, kjsd) TO zxpl
            END IF
            CALL processRightRecursive(xvho, spfm PLUS 1)
        END FUNCTION

        CALL processRightRecursive(coordinates, 0)

        RETURN (1 PLUS self._lengthOfLIS(tbas) PLUS self._lengthOfLIS(zxpl))
    END FUNCTION

    FUNCTION _lengthOfLIS(coordinates)
        FUNCTION comparator(a, b)
            IF a AT 0 LESS b AT 0 RETURN -1
            ELSE IF a AT 0 GREATER b AT 0 RETURN 1
            ELSE 
                IF a AT 1 GREATER b AT 1 RETURN -1
                ELSE IF a AT 1 LESS b AT 1 RETURN 1
                ELSE RETURN 0
            END IF
        END FUNCTION
        CALL coordinates.SORT_WITH_COMPARATOR(comparator)

        SET lseq TO empty list

        FUNCTION bisectLeft(arr, val, start, end)
            IF start EQUALS end
                RETURN start
            END IF
            SET mid TO (start PLUS end) DIVIDED BY 2
            IF arr AT mid LESS val
                RETURN bisectLeft(arr, val, mid PLUS 1, end)
            ELSE
                RETURN bisectLeft(arr, val, start, mid)
            END IF
        END FUNCTION

        FUNCTION iterateAndProcess(lst, idx)
            IF idx NOT LESS THAN LENGTH of lst
                RETURN
            END IF
            SET item TO lst AT idx
            SET unused TO item AT 0
            SET wybf TO item AT 1

            IF (LENGTH of lseq EQUALS 0) OR (wybf GREATER lseq AT (LENGTH of lseq MINUS 1))
                APPEND wybf TO lseq
            ELSE
                SET qooe TO bisectLeft(lseq, wybf, 0, LENGTH of lseq)
                SET lseq AT qooe TO wybf
            END IF
            CALL iterateAndProcess(lst, idx PLUS 1)
        END FUNCTION

        CALL iterateAndProcess(coordinates, 0)
        RETURN LENGTH of lseq
    END FUNCTION
END CLASS
```