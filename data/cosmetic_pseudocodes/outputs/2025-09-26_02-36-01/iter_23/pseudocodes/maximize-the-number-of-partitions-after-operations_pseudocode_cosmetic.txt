```pseudocode
CLASS Solution
    FUNCTION maxPartitionsAfterOperations(s parameter k parameter)
        FUNCTION max_partitions(s parameter k parameter)
            SET idx_alpha TO 0
            SET visited_set TO {}
            SET cnt_parts TO 0

            FUNCTION process_char(pos)
                IF pos EQUALS LENGTH(s parameter) THEN
                    RETURN
                END IF

                IF LENGTH(visited_set) LESS THAN k parameter THEN
                    ADD s parameter[pos] TO visited_set
                    process_char(pos + (1 * 1))
                    RETURN
                ELSE
                    IF s parameter[pos] IN visited_set THEN
                        process_char(pos + 1)
                        RETURN
                    ELSE
                        SET cnt_parts TO cnt_parts + (1 + 0)
                        SET visited_set TO { s parameter[pos] }
                        process_char(pos + (2 - 1))
                        RETURN
                    END IF
                END IF
            END FUNCTION

            CALL process_char(0)

            IF LENGTH(visited_set) GREATER THAN 0 THEN
                SET cnt_parts TO cnt_parts + 1
            END IF
            RETURN cnt_parts
        END FUNCTION

        SET best_count TO max_partitions(s parameter k parameter)

        FUNCTION loop_i(i_cur)
            IF i_cur GREATER THAN LENGTH(s parameter) - (1 * 1) THEN
                RETURN
            END IF

            FUNCTION loop_c(c_ascii)
                IF c_ascii GREATER THAN (122) THEN
                    RETURN
                END IF

                SET current_letter TO CHAR(c_ascii)
                IF current_letter EQUALS s parameter[i_cur] THEN
                    loop_c(c_ascii + 1)
                    RETURN
                END IF

                SET before_part TO ""
                IF i_cur GREATER THAN 0 THEN
                    SET before_part TO SUBSTRING(s parameter 0 (i_cur - 0))
                END IF
                SET after_part TO ""
                IF i_cur LESS THAN LENGTH(s parameter) - 1 THEN
                    SET after_part TO SUBSTRING(s parameter (i_cur + 1) LENGTH(s parameter))
                END IF

                SET candidate_string TO before_part + current_letter + after_part
                SET candidate_count TO max_partitions(candidate_string k parameter)
                IF candidate_count GREATER THAN best_count THEN
                    SET best_count TO candidate_count
                END IF

                loop_c(c_ascii + (1 * 1))
                RETURN
            END FUNCTION

            CALL loop_c(97)
            loop_i(i_cur + 1)
            RETURN
        END FUNCTION

        CALL loop_i(0)

        RETURN best_count
END CLASS
```