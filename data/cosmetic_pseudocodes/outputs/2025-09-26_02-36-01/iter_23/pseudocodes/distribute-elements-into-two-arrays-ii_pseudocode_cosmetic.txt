```pseudocode
CLASS Solution
    FUNCTION resultArray(nums)
        SET pqr TO NEW LIST WITH nums[0]
        SET xyz TO NEW LIST WITH nums[1]
        SET abc TO NEW LIST WITH nums[0]
        SET def TO NEW LIST WITH nums[1]

        FUNCTION helper(mno, uvw)
            FUNCTION binarySearchRight(arr, key, start, end)
                IF start >= end THEN
                    IF arr[start] <= key THEN
                        RETURN start + 1
                    ELSE
                        RETURN start
                    END IF
                ELSE
                    SET mid TO (start + end) / 2
                    IF arr[mid] <= key THEN
                        RETURN binarySearchRight(arr, key, mid + 1, end)
                    ELSE
                        RETURN binarySearchRight(arr, key, start, mid)
                    END IF
                END IF
            END FUNCTION

            SET pos TO binarySearchRight(mno, uvw, 0, LENGTH OF mno - 1)
            RETURN LENGTH OF mno - pos
        END FUNCTION

        FUNCTION processIndex(jkl)
            IF jkl >= LENGTH OF nums THEN
                RETURN
            END IF

            SET rst TO nums[jkl]
            SET yui TO helper(abc, rst)
            SET iop TO helper(def, rst)

            IF (yui > iop) = TRUE THEN
                ADD_ELEMENT_TO_END(pqr, rst)
                CALL insertSorted(abc, rst)
            ELSE
                IF (yui < iop) = TRUE THEN
                    ADD_ELEMENT_TO_END(xyz, rst)
                    CALL insertSorted(def, rst)
                ELSE
                    IF (LENGTH OF pqr <= LENGTH OF xyz) = TRUE THEN
                        ADD_ELEMENT_TO_END(pqr, rst)
                        CALL insertSorted(abc, rst)
                    ELSE
                        ADD_ELEMENT_TO_END(xyz, rst)
                        CALL insertSorted(def, rst)
                    END IF
                END IF
            END IF

            processIndex(jkl + 1)
        END FUNCTION

        FUNCTION insertSorted(arr, val)
            SET left TO 0
            SET right TO LENGTH OF arr
            WHILE left < right
                SET mid TO (left + right) / 2
                IF arr[mid] < val THEN
                    SET left TO mid + 1
                ELSE
                    SET right TO mid
                END IF
            END WHILE
            INSERT val INTO arr AT INDEX left
        END FUNCTION

        CALL processIndex(2)

        RETURN CONCATENATE_LISTS(pqr, xyz)
    END FUNCTION
END CLASS
```