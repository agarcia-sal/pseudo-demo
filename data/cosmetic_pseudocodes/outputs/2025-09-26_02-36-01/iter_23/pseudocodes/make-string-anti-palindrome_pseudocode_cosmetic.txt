``` 
CLASS Solution
    FUNCTION makeAntiPalindrome(s)
        FUNCTION swapElements(arr, x, y)
            SET tempVar TO arr[x]
            SET arr[x] TO arr[y]
            SET arr[y] TO tempVar
        END FUNCTION

        FUNCTION recursiveCheck(pIndex, limitIndex, offset, collection)
            IF (pIndex < limitIndex) AND (collection[pIndex] = collection[pIndex - offset]) THEN
                RETURN recursiveCheck(pIndex + 1, limitIndex, offset, collection)
            END IF
            RETURN pIndex
        END FUNCTION

        FUNCTION recursiveSecondaryScan(startIndex, endIndex, col)
            IF (startIndex < endIndex) AND (col[startIndex] = col[endIndex - startIndex - 1]) THEN
                RETURN recursiveSecondaryScan(startIndex + 1, endIndex, col)
            END IF
            RETURN startIndex
        END FUNCTION

        FUNCTION findSuitableSwap(xIndex, upperBound, candidates, target1, target2)
            IF xIndex > upperBound THEN
                RETURN false, xIndex
            END IF

            IF (candidates[xIndex] <> target1) AND (candidates[xIndex] <> target2) THEN
                RETURN true, xIndex
            END IF
            RETURN findSuitableSwap(xIndex + 1, upperBound, candidates, target1, target2)
        END FUNCTION

        SET characterList TO EMPTY LIST
        FOR eachChar IN s
            APPEND eachChar TO characterList
        END FOR

        FUNCTION insertionSort(arr)
            FUNCTION innerSort(idx, length, arrRef)
                IF idx >= length THEN
                    RETURN
                END IF
                SET keyVal TO arrRef[idx]
                SET pos TO idx - 1
                WHILE (pos >= 0) AND (arrRef[pos] > keyVal)
                    SET arrRef[pos + 1] TO arrRef[pos]
                    SET pos TO pos - 1
                END WHILE
                SET arrRef[pos + 1] TO keyVal
                innerSort(idx + 1, length, arrRef)
            END FUNCTION
            innerSort(1, LENGTH(arr), arr)
        END FUNCTION

        insertionSort(characterList)

        SET lenChars TO LENGTH(characterList)
        SET midPoint TO (lenChars - (lenChars MOD 2)) DIV 2

        IF characterList[midPoint] = characterList[midPoint - 1] THEN
            SET firstCounter TO recursiveCheck(midPoint, lenChars, 1, characterList)
            SET secondCounter TO midPoint
            WHILE (secondCounter < lenChars) AND (characterList[secondCounter] = characterList[lenChars - secondCounter - 1])
                IF firstCounter >= lenChars THEN
                    RETURN "-1"
                END IF
                CALL swapElements(characterList, firstCounter, secondCounter)
                SET firstCounter TO firstCounter + 1
                SET secondCounter TO secondCounter + 1
            END WHILE
        END IF

        FUNCTION traverseIndex(currentIndex, limitIndex, arrChars)
            IF currentIndex >= limitIndex THEN
                RETURN true
            END IF
            IF arrChars[currentIndex] = arrChars[lenChars - currentIndex - 1] THEN
                SET swappedFlag TO false
                FUNCTION innerSwap(kIndex, maxIndex)
                    IF kIndex > maxIndex OR swappedFlag = true THEN
                        RETURN
                    END IF
                    IF (arrChars[kIndex] <> arrChars[currentIndex]) AND (arrChars[kIndex] <> arrChars[lenChars - currentIndex - 1]) THEN
                        CALL swapElements(arrChars, kIndex, currentIndex)
                        swappedFlag := true
                        RETURN
                    END IF
                    innerSwap(kIndex + 1, maxIndex)
                END FUNCTION
                innerSwap(midPoint, lenChars - 1)
                IF swappedFlag = false THEN
                    RETURN false
                END IF
            END IF
            RETURN traverseIndex(currentIndex + 1, limitIndex, arrChars)
        END FUNCTION

        SET traversalResult TO traverseIndex(0, midPoint, characterList)
        IF traversalResult = false THEN
            RETURN "-1"
        END IF

        SET accString TO ""
        FOR idx FROM 0 TO lenChars - 1
            accString := accString + characterList[idx]
        END FOR

        RETURN accString

    END FUNCTION
END CLASS
```