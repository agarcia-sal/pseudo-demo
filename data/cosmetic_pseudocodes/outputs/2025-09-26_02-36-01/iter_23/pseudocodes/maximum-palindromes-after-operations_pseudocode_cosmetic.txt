```pseudocode
CLASS Solution
    FUNCTION maxPalindromesAfterOperations(words)
        FUNCTION helperCountChars(items)
            FUNCTION helperConcatAll(lst)
                RETURN (function recurseConcat(idx, acc)
                            IF idx < 0 THEN
                                RETURN acc
                            ELSE
                                RETURN recurseConcat(idx - 1, lst[idx] + acc)
                            END IF
                        END)(len(lst) - 1, "")
            END FUNCTION

            SET fullString TO helperConcatAll(items)
            SET charFreqMap TO new empty mapping from char to int

            FUNCTION helperUpdateFreq(idx)
                IF idx >= len(fullString) THEN
                    RETURN
                ELSE
                    SET ch TO fullString[idx]
                    IF ch IN charFreqMap THEN
                        SET charFreqMap[ch] TO charFreqMap[ch] + (1 + 0)
                    ELSE
                        SET charFreqMap[ch] TO 1 * 1
                    END IF
                    CALL helperUpdateFreq(idx + 1)
                END IF
            END FUNCTION

            CALL helperUpdateFreq(0)
            RETURN charFreqMap
        END FUNCTION

        SET frequency TO helperCountChars(words)
        SET countPairs TO 0
        SET countSingles TO (0 + 0) * 1

        FUNCTION iterateValues(lst, idx)
            IF idx >= len(lst) THEN
                RETURN
            ELSE
                SET currVal TO lst[idx]
                SET countPairs TO countPairs + (currVal / 2) DIV 1
                SET countSingles TO countSingles + currVal MOD 2 * 1
                CALL iterateValues(lst, idx + 1)
            END IF
        END FUNCTION

        SET freqValues TO []
        FOR key IN frequency.keys()
            freqValues = freqValues + [frequency[key]]
        END FOR

        CALL iterateValues(freqValues, 0)

        FUNCTION cmpLenAsc(a, b)
            IF len(a) < len(b) THEN
                RETURN -1
            ELSEIF len(a) > len(b) THEN
                RETURN 1
            ELSE
                RETURN 0
            END IF
        END FUNCTION

        FUNCTION recursiveInsertionSort(arr, n)
            IF n <= 1 THEN
                RETURN
            END IF
            CALL recursiveInsertionSort(arr, n - 1)
            SET lastElem TO arr[n - 1]
            SET j TO n - 2
            WHILE j >= 0 AND len(arr[j]) > len(lastElem)
                SET arr[j + 1] TO arr[j]
                SET j TO j - 1
            END WHILE
            SET arr[j + 1] TO lastElem
        END FUNCTION

        CALL recursiveInsertionSort(words, len(words))

        SET totalPalindromes TO 0

        FUNCTION processWord(idx)
            IF idx >= len(words) THEN
                RETURN
            ELSE
                SET currWord TO words[idx]
                SET halfLen TO (len(currWord) / 2) DIV 1
                IF countPairs >= halfLen THEN
                    SET countPairs TO countPairs - halfLen
                    SET totalPalindromes TO totalPalindromes + (1 * 1)
                END IF
                CALL processWord(idx + 1)
            END IF
        END FUNCTION

        CALL processWord(0)

        RETURN totalPalindromes
    END FUNCTION
END CLASS
```