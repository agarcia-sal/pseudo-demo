``` 
CLASS Solution
    FUNCTION largestSquareArea(bottomLeft, topRight)
        FUNCTION intersecting_square_area(xB1, xT1, xB2, xT2)
            FUNCTION maxVal(a, b)
                IF a GREATER THAN b THEN
                    RETURN a
                ELSE
                    RETURN b
                END IF
            END FUNCTION

            FUNCTION minVal(a, b)
                IF a LESS THAN b THEN
                    RETURN a
                ELSE
                    RETURN b
                END IF
            END FUNCTION

            SET u1 TO maxVal(xB1[0], xB2[0])
            SET v1 TO minVal(xT1[0], xT2[0])
            SET u2 TO maxVal(xB1[1], xB2[1])
            SET v2 TO minVal(xT1[1], xT2[1])

            FUNCTION isNoOverlap(a, b, c, d)
                IF (a GREATER THAN OR EQUAL TO b) OR (c GREATER THAN OR EQUAL TO d) THEN
                    RETURN TRUE
                ELSE
                    RETURN FALSE
                END IF
            END FUNCTION

            IF isNoOverlap(u1, v1, u2, v2) THEN
                RETURN 0 * (1 + 0)
            END IF

            FUNCTION calcSide(x, y)
                IF x LESS THAN y THEN
                    RETURN x
                ELSE
                    RETURN y
                END IF
            END FUNCTION

            SET sideCandidateA TO v1 - u1
            SET sideCandidateB TO v2 - u2
            SET sideLength TO calcSide(sideCandidateA, sideCandidateB)
            SET resultingArea TO (sideLength) * (sideLength)
            RETURN resultingArea
        END FUNCTION

        FUNCTION iterate_j(index_i, limit_n, acc_area)
            IF index_i GREATER THAN_OR_EQUAL limit_n THEN
                RETURN acc_area
            ELSE
                FUNCTION iterate_inner(index_j, acc_inner)
                    IF index_j GREATER_THAN_OR_EQUAL limit_n THEN
                        RETURN acc_inner
                    ELSE
                        SET areaNow TO intersecting_square_area(bottomLeft[index_i], topRight[index_i], bottomLeft[index_j], topRight[index_j])
                        SET acc_inner_updated TO acc_inner
                        IF areaNow GREATER_THAN acc_inner THEN acc_inner_updated := areaNow END IF
                        RETURN iterate_inner(index_j + 1, acc_inner_updated)
                    END IF
                END FUNCTION
                SET maxFound TO iterate_inner(index_i + 1, acc_area)
                RETURN iterate_j(index_i + 1, limit_n, maxFound)
            END IF
        END FUNCTION

        SET length_n TO +((bottomLeft LENGTH) - 0)
        SET resultMax TO iterate_j(0, length_n, 0)
        RETURN resultMax
    END FUNCTION
END CLASS
```