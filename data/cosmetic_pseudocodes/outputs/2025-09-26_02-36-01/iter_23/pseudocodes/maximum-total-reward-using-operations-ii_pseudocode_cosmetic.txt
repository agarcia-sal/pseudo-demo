```
CLASS Solution
    FUNCTION maxTotalReward(rewardValues)
        PROCEDURE sortSequence(src, dest)
            IF LENGTH(src) <= 1 THEN
                SET dest TO src
            ELSE
                SET midpoint TO (LENGTH(src) DIV 2)
                SET leftPart TO NEW LIST
                SET rightPart TO NEW LIST
                CALL sortSequence(SUBLIST(src, 0, midpoint), leftPart)
                CALL sortSequence(SUBLIST(src, midpoint, LENGTH(src)), rightPart)
                SET i TO 0
                SET j TO 0
                SET merged TO NEW LIST
                WHILE (i < LENGTH(leftPart)) OR (j < LENGTH(rightPart))
                    IF (j >= LENGTH(rightPart)) OR ((i < LENGTH(leftPart)) AND NOT (rightPart[j] < leftPart[i]))
                        APPEND leftPart[i] TO merged
                        SET i TO (i + 1)
                    ELSE
                        APPEND rightPart[j] TO merged
                        SET j TO (j + 1)
                    END IF
                END WHILE
                SET dest TO merged
            END IF
        END PROCEDURE

        PROCEDURE uniqueSortedElements(inputList, outputList)
            CALL sortSequence(inputList, outputList)
            SET wq TO 0
            WHILE wq < LENGTH(outputList)
                SET wh TO (wq + 1)
                WHILE (wh < LENGTH(outputList)) AND (outputList[wq] = outputList[wh])
                    SET wh TO (wh + 1)
                END WHILE
                IF (wh - wq) > 1 THEN
                    FOR k FROM (wq + 1) TO (wh - 1)
                        REMOVE outputList AT INDEX (wq + 1)
                    END FOR
                END IF
                SET wq TO (wq + 1)
            END WHILE
        END PROCEDURE

        PROCEDURE bitLength(num, resultRef)
            SET counter TO 0
            SET remainder TO num
            WHILE remainder > 0
                SET remainder TO remainder DIV 2
                SET counter TO counter + 1
            END WHILE
            SET resultRef[0] TO counter
        END PROCEDURE

        SET tempList TO NEW LIST
        CALL uniqueSortedElements(rewardValues, tempList)

        SET arg3 TO 1
        SET cursor TO 0

        FUNCTION helperShiftLeft(base, exponent)
            IF exponent = 0 THEN
                RETURN 1
            ELSE
                RETURN 2 * helperShiftLeft(base, exponent - 1)
            END IF
        END FUNCTION

        PROCEDURE iterateElements(lst, index, accRef)
            IF index >= LENGTH(lst) THEN
                RETURN
            END IF
            SET currentVal TO lst[index]
            SET shiftedVal TO helperShiftLeft(1, currentVal)
            SET maskVal TO shiftedVal - 1
            SET accRef[0] TO accRef[0] OR (accRef[0] AND maskVal) * shiftedVal
            CALL iterateElements(lst, index + 1, accRef)
        END PROCEDURE

        SET accumulator TO [arg3]
        CALL iterateElements(tempList, 0, accumulator)

        SET bitlenResult TO [0]
        CALL bitLength(accumulator[0], bitlenResult)

        RETURN bitlenResult[0] - 1
    END FUNCTION
END CLASS
```