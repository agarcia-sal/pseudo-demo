```pseudocode
CLASS Solution
    FUNCTION countDays(days, meetings)
        FUNCTION quickSort(arr, left, right)
            IF left < right THEN
                pivotIndex = partition(arr, left, right)
                CALL quickSort(arr, left, pivotIndex - 1)
                CALL quickSort(arr, pivotIndex + 1, right)
            END IF
        END FUNCTION

        FUNCTION partition(arr, low, high)
            pivotValue = arr[high][0]
            storeIndex = low
            index = low
            WHILE index < high DO
                IF arr[index][0] <= pivotValue THEN
                    temp = arr[index]
                    arr[index] = arr[storeIndex]
                    arr[storeIndex] = temp
                    storeIndex = storeIndex + 1
                END IF
                index = index + 1
            END WHILE
            temp2 = arr[storeIndex]
            arr[storeIndex] = arr[high]
            arr[high] = temp2
            RETURN storeIndex
        END FUNCTION

        DECLARE a INTEGER variable assigned 1
        DECLARE b INTEGER variable assigned 0
        CALL quickSort(meetings, 0, LENGTH(meetings) - 1)

        FUNCTION loopProcess(arr, pos, limit, acc)
            IF pos >= LENGTH(arr) THEN
                IF limit <= days THEN
                    acc = acc + (days - limit + 1)
                END IF
                RETURN acc
            ELSE
                currentEntry = arr[pos]
                s = currentEntry[0]
                e = currentEntry[1]
                IF limit < s THEN
                    acc = acc + (s - limit)
                END IF
                newLimit = MAXIMUM(limit, e) + 1
                RETURN loopProcess(arr, pos + 1, newLimit, acc)
            END IF
        END FUNCTION

        RETURN loopProcess(meetings, 0, a, b)
    END FUNCTION
END CLASS
```