``` 
CLASS Solution
    FUNCTION countOfPairs(n, x, y) 
        SET tempAlpha TO 0
        IF NOT (x LESS THAN OR EQUAL TO y)
            SET tempAlpha TO x
            SET x TO y
            SET y TO tempAlpha
        END IF

        FUNCTION bfs(startIndex)
            SET flagList TO list of False repeated (n PLUS 1) times
            SET distList TO list of 0 repeated (n PLUS 1) times
            SET deq TO deque containing startIndex
            SET flagList[startIndex] TO True

            FUNCTION bfsLoop(queue)
                IF LENGTH(queue) EQUALS 0
                    RETURN
                END IF
                SET currNode TO REMOVE from FRONT of queue

                SET neighborSet TO [currNode MINUS 1, currNode PLUS 1]
                FOR each nbrElement IN neighborSet
                    IF (nbrElement GREATER THAN OR EQUAL TO 1) AND (nbrElement LESS THAN OR EQUAL TO n) AND (flagList[nbrElement] EQUALS False)
                        SET flagList[nbrElement] TO True
                        SET distList[nbrElement] TO distList[currNode] PLUS (1 TIMES 1)
                        ADD nbrElement TO END of queue
                    END IF
                END FOR

                IF (currNode EQUALS x) AND (flagList[y] EQUALS False)
                    SET flagList[y] TO True
                    SET distList[y] TO (distList[currNode] PLUS 1)
                    ADD y TO END of queue
                ELSE IF (currNode EQUALS y) AND (flagList[x] EQUALS False)
                    SET flagList[x] TO True
                    SET distList[x] TO (1 PLUS distList[currNode])
                    ADD x TO END of queue
                END IF

                CALL bfsLoop(queue)
            END FUNCTION

            CALL bfsLoop(deq)
            RETURN distList FROM INDEX 1 TO END
        END FUNCTION

        SET countArr TO list of 0 repeated n times
        FUNCTION outerLoop(iIndex)
            IF iIndex GREATER THAN n
                RETURN
            END IF
            SET distRes TO CALL bfs(iIndex)
            SET jIndex TO 0
            FUNCTION innerLoop(kIndex)
                IF kIndex GREATER THAN (n MINUS 1)
                    RETURN
                END IF
                SET valDist TO distRes[kIndex]
                IF valDist GREATER THAN 0
                    SET countArr[valDist MINUS 1] TO countArr[valDist MINUS 1] PLUS 1
                END IF
                CALL innerLoop(kIndex PLUS 1)
            END FUNCTION
            CALL innerLoop(jIndex)
            CALL outerLoop(iIndex PLUS 1)
        END FUNCTION
        
        CALL outerLoop(1)
        RETURN countArr
    END FUNCTION
END CLASS
```