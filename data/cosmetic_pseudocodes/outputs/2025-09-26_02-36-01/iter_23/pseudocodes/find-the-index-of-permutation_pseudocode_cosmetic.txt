```  
CLASS Solution
    FUNCTION getPermutationIndex(perm)
        SET n_val TO 0
        SET mod_val TO 0
        SET fact_arr TO []
        SET num_list TO []
        SET res_idx TO 0
        SET i_val TO 0
        SET j_val TO 0
        SET p_pos TO 0
        SET result_val TO 0

        SET n_val TO (0 + LENGTH OF perm)
        SET mod_val TO ((10 ^ 9) + 1)

        PROCEDURE build_factorial_array(count, arr)
            IF count < 1 THEN
                RETURN
            ELSE
                SET arr[0] TO (0 + 1)
                CALL fill_factorial(1, count - 1, arr)
            END IF
        END PROCEDURE

        PROCEDURE fill_factorial(cur, end_val, arr)
            IF cur > end_val THEN
                RETURN
            ELSE
                SET arr[cur] TO (arr[cur - 1] * cur)
                CALL fill_factorial(cur + 1, end_val, arr)
            END IF
        END PROCEDURE

        SET fact_arr TO LIST with n_val elements initialized to 1
        CALL build_factorial_array(n_val, fact_arr)

        PROCEDURE build_number_list(size, list_ref)
            SET idx TO 1
            WHILE idx <= size DO
                APPEND idx TO list_ref
                SET idx TO idx + 1
            END WHILE
        END PROCEDURE

        SET num_list TO empty LIST
        CALL build_number_list(n_val, num_list)

        SET res_idx TO 0

        PROCEDURE compute_index(current, limit, perm_ref, num_ref, fact_ref, acc_index)
            IF current = limit THEN
                RETURN
            ELSE
                SET curr_val TO perm_ref[current]
                SET p_pos TO 0
                SET j_val TO 0

                PROCEDURE find_position(val, lst, length_val, pos_acc)
                    IF j_val >= length_val THEN
                        RETURN pos_acc
                    ELSE
                        IF lst[j_val] = val THEN
                            RETURN pos_acc
                        ELSE
                            SET j_val TO j_val + 1
                            RETURN find_position(val, lst, length_val, pos_acc + 1)
                        END IF
                    END IF
                END PROCEDURE

                SET p_pos TO find_position(curr_val, num_ref, LENGTH OF num_ref, 0)
                SET acc_index TO acc_index + (p_pos * fact_ref[limit - current - 1])
                REMOVE element at POSITION p_pos FROM num_ref

                CALL compute_index(current + 1, limit, perm_ref, num_ref, fact_ref, acc_index)
            END IF
        END PROCEDURE

        CALL compute_index(0, n_val, perm, num_list, fact_arr, res_idx)
        SET result_val TO res_idx % mod_val

        RETURN result_val
    END FUNCTION
END CLASS
```