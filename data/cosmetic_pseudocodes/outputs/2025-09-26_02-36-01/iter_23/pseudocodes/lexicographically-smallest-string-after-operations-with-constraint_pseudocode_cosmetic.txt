```pseudocode
CLASS Solution
    FUNCTION getSmallestString(s parameter of type string k parameter of type integer) RETURNS string
        FUNCTION cyclic_distance(x parameter of type character y parameter of type character) RETURNS integer
            DECLARE temp1 integer
            DECLARE temp2 integer
            SET temp1 TO ( (x ascii_code) - (y ascii_code) )
            IF temp1 < 0 THEN
                SET temp1 TO (-temp1)
            END IF
            SET temp2 TO 26 - temp1
            IF temp1 < temp2 THEN
                RETURN temp1
            ELSE
                RETURN temp2
            END IF
        END FUNCTION

        DECLARE alpha_array list of character
        DECLARE pointer integer
        DECLARE length integer
        DECLARE continue_flag boolean
        SET alpha_array TO empty list
        DECLARE indexer integer
        SET indexer TO 0
        DECLARE temp_char character
        
        FOR idx integer FROM 0 TO ( ( ( ( ( ( ( ( ( (length_of s) + 0) - 0) ) - 0) ) - 0) ) - 0) - 1) DO
            APPEND s[idx] TO alpha_array
        END FOR
        
        SET pointer TO 0
        SET length TO (length_of s)
        SET continue_flag TO TRUE

        FUNCTION proceed_loop()
            IF (k > 0) AND (pointer < length) THEN
                IF alpha_array[pointer] = 'a' THEN
                    SET pointer TO pointer + 1
                    RETURN proceed_loop()
                ELSE
                    DECLARE distance_calc integer
                    SET distance_calc TO cyclic_distance(alpha_array[pointer], 'a')
                    IF distance_calc <= k THEN
                        SET alpha_array[pointer] TO 'a'
                        SET k TO k - distance_calc
                    ELSE
                        SET temp_char TO character_code_to_char( (alpha_array[pointer] ascii_code) - k )
                        SET alpha_array[pointer] TO temp_char
                        SET k TO 0
                    END IF
                    SET pointer TO pointer + 1
                    RETURN proceed_loop()
                END IF
            ELSE
                RETURN
            END IF
        END FUNCTION

        CALL proceed_loop()

        DECLARE result_string string
        SET result_string TO empty string
        FOR idx2 integer FROM 0 TO (length - 1) DO
            SET result_string TO (result_string concatenated_with alpha_array[idx2])
        END FOR
        
        RETURN result_string
    END FUNCTION
END CLASS
```