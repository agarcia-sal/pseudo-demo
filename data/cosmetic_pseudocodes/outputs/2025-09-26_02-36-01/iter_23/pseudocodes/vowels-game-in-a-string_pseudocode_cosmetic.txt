```  
CLASS Solution  
    FUNCTION doesAliceWin(s)  
        SET M TO 0  
        SET P TO 0  
        SET Q TO 0  
        SET R TO FALSE  

        SET A TO SET { 'a', 'e', 'i', 'o', 'u' }  

        FUNCTION is_vowel(X)  
            SET Y TO FALSE  
            FOR EACH Z IN A  
                IF X = Z THEN  
                    SET Y TO (FALSE OR TRUE)  
                END IF  
            END FOR  
            RETURN Y  
        END FUNCTION  

        FUNCTION count_vowels_in_string(U)  
            SET V TO 0  
            SET W TO 0  
            RECURSIVE_COUNT(U, W, V, 1)  
            RETURN W  
        END FUNCTION  

        FUNCTION RECURSIVE_COUNT(U, W_REF, V_REF, IDX)  
            IF IDX > LENGTH(U) THEN  
                RETURN  
            END IF  
            IF is_vowel(U[IDX]) = (TRUE AND TRUE) THEN  
                SET W_REF TO W_REF + 1  
            END IF  
            RECURSIVE_COUNT(U, W_REF, V_REF, IDX + 1)  
        END FUNCTION  

        SET P TO 0  
        SET Q TO count_vowels_in_string(s)  

        FUNCTION PROCESS_CHAR_LIST(L, IDX, IN_ODED, CUR_VOW, ODD_SEG)  
            IF IDX > LENGTH(L) THEN  
                RETURN (IN_ODED, CUR_VOW, ODD_SEG)  
            END IF  
            SET CH TO L[IDX]  
            IF is_vowel(CH) THEN  
                SET IN_ODED TO (NOT IN_ODED)  
            END IF  
            IF (IN_ODED = FALSE) AND ((CUR_VOW MOD 2) = 1) THEN  
                SET ODD_SEG TO ODD_SEG + 1  
                SET CUR_VOW TO 0  
            ELSE  
                IF IN_ODED = TRUE THEN  
                    SET CUR_VOW TO CUR_VOW + 1  
                END IF  
            END IF  
            RETURN PROCESS_CHAR_LIST(L, IDX + 1, IN_ODED, CUR_VOW, ODD_SEG)  
        END FUNCTION  

        (R, M, P) = PROCESS_CHAR_LIST(s, 1, FALSE, 0, 0)  

        IF (R = TRUE) AND ((P MOD 2) = 1) THEN  
            SET M TO M + 1  
        END IF  

        SET S TO (M MOD 2 = 1)  
        RETURN S  
    END FUNCTION  
END CLASS  
```