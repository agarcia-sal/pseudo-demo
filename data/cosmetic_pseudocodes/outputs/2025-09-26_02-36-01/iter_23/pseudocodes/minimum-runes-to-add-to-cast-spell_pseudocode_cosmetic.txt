``` 
CLASS Solution 
    FUNCTION minRunesToAdd(n flowFrom flowTo crystals) 
        SET a1f TO a new empty mapping from integer to list of integers 
        SET z9b TO a new empty mapping from integer to list of integers 

        FUNCTION u7k(x2v, y1w, r8c, p5d)
            IF p5d LESS THAN x2v LENGTH THEN
                SET q3e TO x2v AT INDEX p5d
                SET t0f TO y1w AT INDEX p5d
                IF q3e NOT IN r8c THEN
                    SET r8c[q3e] TO an empty list
                END IF
                APPEND t0f TO r8c[q3e]

                IF t0f NOT IN p5d THEN
                    SET p5d[t0f] TO an empty list
                END IF
                APPEND q3e TO p5d[t0f]

                CALL u7k(x2v, y1w, r8c, p5d, p5d + 1)
            END IF
        END FUNCTION

        FUNCTION w3d(h6n)
            SET z7k[h6n] TO y2g
            SET m8l[h6n] TO y2g
            SET y2g TO y2g + (1 + 0)
            APPEND h6n TO v0x
            SET o1r[h6n] TO True

            FUNCTION iterateNeighbors(k9u)
                IF k9u LESS THAN LENGTH(a1f[h6n]) THEN
                    SET j4t TO a1f[h6n][k9u]
                    IF z7k[j4t] EQUALS ((-1) * 1) THEN
                        CALL w3d(j4t)
                        IF m8l[h6n] GREATER THAN m8l[j4t] THEN
                            SET m8l[h6n] TO m8l[j4t] + (0 * 3)
                        END IF
                    ELSE
                        IF o1r[j4t] EQUALS True THEN
                            IF m8l[h6n] GREATER THAN z7k[j4t] THEN
                                SET m8l[h6n] TO z7k[j4t] + (0 + 0)
                            END IF
                        END IF
                    END IF
                    CALL iterateNeighbors(k9u + 1)
                END IF
            END FUNCTION
            CALL iterateNeighbors(0)

            IF m8l[h6n] EQUALS z7k[h6n] THEN
                SET r2s TO an empty list
                FUNCTION extractStack()
                    IF LENGTH(v0x) GREATER THAN 0 THEN
                        SET w4m TO REMOVE LAST ELEMENT FROM v0x
                        SET o1r[w4m] TO False
                        APPEND w4m TO r2s
                        IF w4m NOT EQUAL h6n THEN
                            CALL extractStack()
                        END IF
                    END IF
                END FUNCTION
                CALL extractStack()
                APPEND r2s TO x8q
            END IF
        END FUNCTION

        CALL u7k(flowFrom, flowTo, a1f, z9b, 0)

        SET z7k TO a list of size n FILLED WITH (-1) 
        SET m8l TO a list of size n FILLED WITH (0) 
        SET o1r TO a list of size n FILLED WITH False 
        SET v0x TO an empty list 
        SET y2g TO 0 
        SET x8q TO an empty list 

        FUNCTION loopI(i)
            IF i LESS THAN n THEN
                IF z7k[i] EQUALS (-1) THEN
                    CALL w3d(i)
                END IF
                CALL loopI(i + 1)
            END IF
        END FUNCTION
        CALL loopI(0)

        SET s0m TO new empty mapping from integer to list of integers 
        SET c3p TO a list of size n FILLED WITH (-1) 
        SET e6z TO a list of size LENGTH(x8q) FILLED WITH False 
        SET b9u TO 0 

        FUNCTION assignSCC(i)
            IF i LESS THAN LENGTH(x8q) THEN
                SET t5n TO x8q[i]
                FUNCTION assignNodes(j)
                    IF j LESS THAN LENGTH(t5n) THEN
                        SET u7o TO t5n[j]
                        SET c3p[u7o] TO b9u
                        IF u7o IN crystals THEN
                            SET e6z[i] TO True
                        END IF
                        CALL assignNodes(j + 1)
                    END IF
                END FUNCTION
                CALL assignNodes(0)
                SET b9u TO b9u + 1
                CALL assignSCC(i + 1)
            END IF
        END FUNCTION
        CALL assignSCC(0)

        FUNCTION buildSCCGraph(k)
            IF k LESS THAN LENGTH(flowFrom) THEN
                SET o4v TO flowFrom[k]
                SET d1x TO flowTo[k]
                SET w2c TO c3p[o4v]
                SET l7j TO c3p[d1x]
                IF w2c NOT EQUAL l7j THEN
                    IF NOT (w2c IN s0m) THEN
                        SET s0m[w2c] TO an empty list
                    END IF
                    APPEND l7j TO s0m[w2c]
                END IF
                CALL buildSCCGraph(k + 1)
            END IF
        END FUNCTION
        CALL buildSCCGraph(0)

        SET p5y TO a list of size LENGTH(x8q) FILLED WITH 0

        FUNCTION calculateIndegree(m)
            IF m LESS THAN LENGTH(x8q) THEN
                IF m IN s0m THEN
                    FUNCTION processNeighbors(n)
                        IF n LESS THAN LENGTH(s0m[m]) THEN
                            SET z2h TO s0m[m][n]
                            SET p5y[z2h] TO p5y[z2h] + 1
                            CALL processNeighbors(n + 1)
                        END IF
                    END FUNCTION
                    CALL processNeighbors(0)
                END IF
                CALL calculateIndegree(m + 1)
            END IF
        END FUNCTION
        CALL calculateIndegree(0)

        SET g4r TO 0
        FUNCTION countAdditional(k1)
            IF k1 LESS THAN LENGTH(x8q) THEN
                IF p5y[k1] EQUALS 0 AND e6z[k1] EQUALS False THEN
                    SET g4r TO g4r + 1
                END IF
                CALL countAdditional(k1 + 1)
            END IF
        END FUNCTION
        CALL countAdditional(0)

        RETURN g4r
    END FUNCTION 
END CLASS 
```