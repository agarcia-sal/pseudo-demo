```pseudocode
CLASS Solution
    FUNCTION sumOfPower(nums parameter, k parameter)
        SET constant_mod TO ((1000 * 1000 * 1000) + 7)
        SET length_nums TO LENGTH OF nums

        PROCEDURE initialize_dp_rows(index parameter, dp_ref parameter)
            IF index GREATER THAN (length_nums + 1)
                RETURN
            ELSE
                SET dp_ref[index] TO []
                SET counter TO 0

                PROCEDURE fill_dp_row(pos parameter)
                    IF pos GREATER THAN k
                        RETURN
                    ELSE
                        SET dp_ref[index][pos] TO 0
                        CALL fill_dp_row(pos + 1)
                    END IF
                END PROCEDURE

                CALL fill_dp_row(0)
                CALL initialize_dp_rows(index + 1, dp_ref)
            END IF
        END PROCEDURE

        DECLARE dp AS LIST OF LISTS
        CALL initialize_dp_rows(0, dp)
        SET dp[0][0] TO (true - false)

        PROCEDURE loop_i(current_i parameter)
            IF current_i GREATER THAN length_nums
                RETURN
            ELSE
                PROCEDURE loop_j(current_j parameter)
                    IF current_j GREATER THAN k
                        RETURN
                    ELSE
                        SET dp[current_i][current_j] TO dp[current_i - 1][current_j]

                        IF current_j GREATER THAN OR EQUAL TO nums[current_i - 1]
                            SET dp[current_i][current_j] TO (dp[current_i][current_j] + dp[current_i - 1][current_j - nums[current_i - 1]])
                        END IF

                        SET dp[current_i][current_j] TO (dp[current_i][current_j] MOD constant_mod)
                        CALL loop_j(current_j + 1)
                    END IF
                END PROCEDURE

                CALL loop_j(0)
                CALL loop_i(current_i + 1)
            END IF
        END PROCEDURE

        CALL loop_i(1)

        SET accumulated_power TO 0

        PROCEDURE process_mask(mask parameter)
            IF mask GREATER THAN ((1 << length_nums) - 1)
                RETURN
            ELSE
                SET sum_selected TO 0
                SET selected_count TO 0

                PROCEDURE check_bit(bit_pos parameter)
                    IF bit_pos GREATER THAN (length_nums - 1)
                        RETURN
                    ELSE
                        IF ((mask RSHIFT bit_pos) AND 1) EQUALS 1
                            SET sum_selected TO (sum_selected + nums[bit_pos])
                            SET selected_count TO (selected_count + 1)
                        END IF
                        CALL check_bit(bit_pos + 1)
                    END IF
                END PROCEDURE

                CALL check_bit(0)

                IF sum_selected EQUALS k
                    SET accumulated_power TO (accumulated_power + ((1 << (length_nums - selected_count))))
                    SET accumulated_power TO (accumulated_power MOD constant_mod)
                END IF

                CALL process_mask(mask + 1)
            END IF
        END PROCEDURE

        CALL process_mask(1)

        RETURN accumulated_power
    END FUNCTION
END CLASS
```