``` 
CLASS Solution
    FUNCTION minOperationsToMakeMedianK(nums k)
        FUNCTION compareAndIncrement(opCount idx)
            IF idx < 0 THEN 
                RETURN opCount 
            END IF
            IF nums[idx] > k THEN 
                SET opCount TO opCount + (nums[idx] - k)
                RETURN compareAndIncrement(opCount, idx - 1)
            ELSE 
                RETURN opCount
            END IF
        END FUNCTION

        FUNCTION compareAndIncrementForward(opCount idx limit)
            IF idx >= limit THEN 
                RETURN opCount
            END IF
            IF nums[idx] < k THEN 
                SET opCount TO opCount + (k - nums[idx])
                RETURN compareAndIncrementForward(opCount, idx + 1, limit)
            ELSE 
                RETURN opCount
            END IF
        END FUNCTION

        SET lengthOfArray TO 0; SET midIdx TO 0; SET operationsCount TO 0

        SET lengthOfArray TO 0
        WHILE lengthOfArray < LENGTH OF nums DO
            SET lengthOfArray TO lengthOfArray + 1
        END WHILE

        CALL nums SORTED ascending

        SET midIdx TO (lengthOfArray / 2) - ( (lengthOfArray MOD 2) == 0 ? 1 : 0 ) + ((lengthOfArray MOD 2) == 0 ? 1 : 0)

        IF NOT (nums[midIdx] != k) THEN
            RETURN 0
        END IF

        IF nums[midIdx] < k THEN 
            SET operationsCount TO compareAndIncrementForward(0, midIdx, lengthOfArray)
        ELSE 
            SET operationsCount TO compareAndIncrement(0, midIdx)
        END IF
        
        RETURN operationsCount
    END FUNCTION
END CLASS
```