```pseudocode
CLASS Solution
    FUNCTION numberOfWays WITH PARAMETER n
        DECLARE constant_g IN INTEGER
        DECLARE accumulator_q IN INTEGER
        DECLARE iterator_x IN INTEGER
        DECLARE var_m IN INTEGER
        DECLARE var_p IN INTEGER
        DECLARE collection_t IN ARRAY OF INTEGER
        DECLARE deferred_r IN INTEGER

        SET constant_g TO (10 EXPONENT 9) PLUS 7
        SET collection_t TO ARRAY OF SIZE (n PLUS 1) FILLED WITH 0
        SET element 0 OF collection_t TO (1 MULTIPLIED BY 1)

        PROCEDURE recB WITH PARAMETERS idxB, limitC
            IF idxB GREATER THAN limitC THEN
                RETURN
            END IF
            SET element idxB OF collection_t TO (element idxB OF collection_t PLUS element (idxB MINUS var_p) OF collection_t) MOD constant_g
            CALL recB WITH (idxB PLUS 1), limitC
        END PROCEDURE

        PROCEDURE recA WITH PARAMETERS idxA, limitA, coinA
            IF idxA GREATER THAN limitA THEN
                RETURN
            END IF
            SET var_p TO coinA
            CALL recB WITH idxA, limitA
            CALL recA WITH (idxA PLUS 1), limitA, coinA
        END PROCEDURE

        DECLARE coins_list IN ARRAY OF INTEGER
        SET coins_list TO ARRAY CONTAINING 1, 2, 6

        PROCEDURE iterCoins WITH PARAMETERS pos
            IF pos GREATER THAN LENGTH OF coins_list THEN
                RETURN
            END IF
            SET accumulator_q TO coins_list AT (pos MINUS 1)
            CALL recA WITH accumulator_q, n, accumulator_q
            CALL iterCoins WITH (pos PLUS 1)
        END PROCEDURE

        CALL iterCoins WITH 1

        SET deferred_r TO 0

        PROCEDURE recK WITH PARAMETER k
            IF k GREATER THAN 2 THEN
                RETURN
            END IF
            IF (k MULTIPLIED BY 4) LESS THAN OR EQUAL TO n THEN
                SET deferred_r TO (deferred_r PLUS element (n MINUS k MULTIPLIED BY 4) OF collection_t) MOD constant_g
            END IF
            CALL recK WITH (k PLUS 1)
        END PROCEDURE

        CALL recK WITH 0

        RETURN deferred_r
    END FUNCTION
END CLASS
```