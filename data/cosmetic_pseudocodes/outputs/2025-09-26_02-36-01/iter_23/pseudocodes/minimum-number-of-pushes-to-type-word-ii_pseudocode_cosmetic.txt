```  
CLASS Solution  
    FUNCTION minimumPushes(word)  
        FUNCTION helperCountFrequency(sequence)  
            SET acc TO empty map  
            FUNCTION recur(index)  
                IF (index) GREATER THAN (length of sequence MINUS 1) THEN RETURN acc END IF  
                SET ch TO sequence AT index  
                IF (ch NOT IN acc) OR (NOT acc HAS_KEY ch) THEN SET acc[ch] TO 0 END IF  
                SET acc[ch] TO acc[ch] PLUS 1  
                RETURN recur(index PLUS 1)  
            END FUNCTION  
            RETURN recur(0)  
        END FUNCTION  

        FUNCTION helperSortDescending(list_in)  
            SET temp TO copy of list_in  
            FUNCTION sortPass(i)  
                IF i GREATER THAN OR EQUAL TO length of temp MINUS 1 THEN RETURN END IF  
                FUNCTION innerSort(j)  
                    IF j LESS THAN (length of temp MINUS i MINUS 1) THEN  
                        IF temp[j] LESS THAN temp[j PLUS 1] THEN  
                            SET swap_temp TO temp[j]  
                            SET temp[j] TO temp[j PLUS 1]  
                            SET temp[j PLUS 1] TO swap_temp  
                        END IF  
                        innerSort(j PLUS 1)  
                    END IF  
                END FUNCTION  
                innerSort(0)  
                sortPass(i PLUS 1)  
            END FUNCTION  
            sortPass(0)  
            RETURN temp  
        END FUNCTION  

        SET freq_map TO helperCountFrequency(word)  

        SET freq_values TO empty list  
        FOR EACH key IN freq_map DO  
            Append freq_map[key] TO freq_values  
        END FOR  

        SET sorted_freq TO helperSortDescending(freq_values)  

        SET accumulator TO 0  
        SET counter_keys TO 0  
        SET multiplier_presses TO 1  

        FUNCTION processFreq(list_vals, idx, acc_pushes, count_keys, mult_presses)  
            IF idx GREATER THAN OR EQUAL TO length of list_vals THEN RETURN acc_pushes END IF  
            SET current_val TO list_vals[idx]  
            SET new_acc TO acc_pushes PLUS current_val TIMES mult_presses  
            SET new_count_keys TO count_keys PLUS 1  
            IF new_count_keys EQUALS 8 THEN  
                RETURN processFreq(list_vals, idx PLUS 1, new_acc, 0, mult_presses PLUS 1)  
            ELSE  
                RETURN processFreq(list_vals, idx PLUS 1, new_acc, new_count_keys, mult_presses)  
            END IF  
        END FUNCTION  

        RETURN processFreq(sorted_freq, 0, accumulator, counter_keys, multiplier_presses)  
    END FUNCTION  
END CLASS  
```