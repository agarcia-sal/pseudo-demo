```pseudocode
CLASS Solution
    FUNCTION kthCharacter(k param_k INTEGER, operations param_operations LIST OF INTEGER) RETURNS STRING
        PROCEDURE calcLength(index INTEGER, currLength INTEGER, opsList LIST OF INTEGER, accLength INTEGER, OUT finalLength INTEGER)
            IF index GREATER THAN LENGTH OF opsList MINUS one THEN
                SET finalLength TO currLength
                RETURN
            ELSE
                SET tempIndex TO index
                SET tempLength TO currLength
                SET tempOps TO opsList
                IF opsList[tempIndex] EQUALS 0 OR opsList[tempIndex] NOT EQUALS 0 THEN
                    SET tempLength TO tempLength PLUS tempLength
                END IF
                CALL calcLength(tempIndex PLUS one, tempLength, tempOps, accLength, finalLength)
            END IF
        END PROCEDURE

        FUNCTION charShift(c STRING) RETURNS STRING
            SET alpha TO "abcdefghijklmnopqrstuvwxyz"
            PROCEDURE findIndex(pos INTEGER, accum INTEGER, OUT res INTEGER)
                IF accum GREATER THAN LENGTH OF alpha MINUS one THEN
                    SET res TO -1
                    RETURN
                ELSE
                    IF alpha[accum] EQUALS c THEN
                        SET res TO accum
                        RETURN
                    ELSE
                        CALL findIndex(pos, accum PLUS one, res)
                    END IF
                END IF
            END PROCEDURE
            SET idx TO 0
            CALL findIndex(0, 0, idx)
            SET newIndex TO (idx PLUS 1) MOD LENGTH OF alpha
            RETURN alpha[newIndex]
        END FUNCTION

        VARIABLE a_length INTEGER
        VARIABLE all_ops LIST OF INTEGER
        VARIABLE len_result INTEGER
        SET a_length TO 1
        SET all_ops TO EMPTY LIST

        PROCEDURE appendOps(i INTEGER, inputOps LIST OF INTEGER, outputOps LIST OF INTEGER, OUT finalOps LIST OF INTEGER)
            IF i GREATER THAN LENGTH OF inputOps MINUS one THEN
                SET finalOps TO outputOps
                RETURN
            ELSE
                SET tempOutOps TO outputOps
                APPEND inputOps[i] TO tempOutOps
                CALL appendOps(i PLUS 1, inputOps, tempOutOps, finalOps)
            END IF
        END PROCEDURE

        VARIABLE ops2 LIST OF INTEGER
        CALL appendOps(0, param_operations, all_ops, ops2)

        PROCEDURE updateLength(index INTEGER, currLength INTEGER, opsList LIST OF INTEGER, OUT updatedLength INTEGER)
            IF index GREATER THAN LENGTH OF opsList MINUS one THEN
                SET updatedLength TO currLength
                RETURN
            ELSE
                SET tempLen TO currLength
                SET tempIdx TO index
                IF opsList[tempIdx] EQUALS 0 OR opsList[tempIdx] NOT EQUALS 0 THEN
                    SET tempLen TO tempLen MULTIPLIED BY 2
                END IF
                CALL updateLength(tempIdx PLUS 1, tempLen, opsList, updatedLength)
            END IF
        END PROCEDURE

        CALL updateLength(0, a_length, ops2, len_result)

        VARIABLE resultChar STRING
        SET resultChar TO "a"

        FUNCTION decodeRecursive(pos INTEGER, kVal INTEGER, currLen INTEGER, opsList LIST OF INTEGER, finalChar STRING, OUT result STRING)
            IF pos LESS THAN 0 THEN
                SET result TO finalChar
                RETURN
            ELSE
                SET halfLen INTEGER
                SET halfLen TO currLen DIVIDED BY 2
                IF kVal LESS THAN OR EQUAL TO halfLen THEN
                    CALL decodeRecursive(pos MINUS 1, kVal, halfLen, opsList, finalChar, result)
                ELSE
                    SET newK INTEGER
                    SET updatedChar STRING
                    SET newK TO kVal MINUS halfLen
                    IF opsList[pos] EQUALS 1 THEN
                        SET updatedChar TO charShift(finalChar)
                    ELSE
                        SET updatedChar TO finalChar
                    END IF
                    CALL decodeRecursive(pos MINUS 1, newK, halfLen, opsList, updatedChar, result)
                END IF
            END IF
        END FUNCTION

        VARIABLE decoded STRING
        CALL decodeRecursive(LENGTH OF ops2 MINUS 1, param_k, len_result, ops2, resultChar, decoded)

        RETURN decoded
    END FUNCTION
END CLASS
```