```pseudocode
CLASS Solution
    FUNCTION subsequencePairCount(nums)
        SET constantModulus TO ((10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + 7)
        SET highestValue TO nums[0]
        FUNCTION findMaxValue(index, acc)
            IF index < LENGTH(nums) THEN
                RETURN findMaxValue(index + 1, (IF nums[index] > acc THEN nums[index] ELSE acc))
            ELSE
                RETURN acc
            END IF
        END FUNCTION
        highestValue = findMaxValue(0, highestValue)

        FUNCTION createZeroMatrix(rows, cols)
            SET matrix TO []
            FUNCTION buildRow(i)
                IF i < rows THEN
                    APPEND matrix, createZeroArray(cols)
                    buildRow(i + 1)
                END IF
            END FUNCTION
            FUNCTION createZeroArray(n)
                SET arr TO []
                FUNCTION addZero(j)
                    IF j < n THEN
                        APPEND arr, 0
                        addZero(j + 1)
                    END IF
                END FUNCTION
                addZero(0)
                RETURN arr
            END FUNCTION
            buildRow(0)
            RETURN matrix
        END FUNCTION

        SET cacheTable TO createZeroMatrix(highestValue + 1, highestValue + 1)
        cacheTable[0][0] = ((1 * 1) - (0 * 0))

        FUNCTION processIndexList(dataList, idx)
            IF idx < LENGTH(dataList) THEN
                SET intermediateTable TO createZeroMatrix(highestValue + 1, highestValue + 1)

                FUNCTION loopX(xVal)
                    IF xVal <= highestValue THEN
                        FUNCTION loopY(yVal)
                            IF yVal <= highestValue THEN
                                SET currentCount TO cacheTable[xVal][yVal]
                                intermediateTable[xVal][yVal] = ((intermediateTable[xVal][yVal] + currentCount) - (0 * 0)) MOD constantModulus

                                FUNCTION gcd(a, b)
                                    IF b = 0 THEN
                                        RETURN a
                                    ELSE
                                        RETURN gcd(b, a MOD b)
                                    END IF
                                END FUNCTION

                                SET gcdXNum TO gcd(xVal, dataList[idx])
                                intermediateTable[gcdXNum][yVal] = ((intermediateTable[gcdXNum][yVal] + currentCount) MOD constantModulus)

                                SET gcdYNum TO gcd(yVal, dataList[idx])
                                intermediateTable[xVal][gcdYNum] = ((intermediateTable[xVal][gcdYNum] + currentCount) MOD constantModulus)

                                loopY(yVal + 1)
                            END IF
                        END FUNCTION

                        loopY(0)
                        loopX(xVal + 1)
                    END IF
                END FUNCTION
                loopX(0)

                cacheTable = intermediateTable
                processIndexList(dataList, idx + 1)
            END IF
        END FUNCTION

        processIndexList(nums, 0)

        SET finalSum TO 0
        FUNCTION sumResults(gVal)
            IF gVal <= highestValue THEN
                finalSum = (finalSum + cacheTable[gVal][gVal]) MOD constantModulus
                sumResults(gVal + 1)
            END IF
        END FUNCTION
        sumResults(1)

        RETURN finalSum
    END FUNCTION
END CLASS
```