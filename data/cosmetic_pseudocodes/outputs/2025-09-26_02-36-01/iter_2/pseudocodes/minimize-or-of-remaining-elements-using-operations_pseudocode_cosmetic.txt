CLASS Solution  
    FUNCTION minOrAfterOperations(nums k)  
        FUNCTION canAchieve(test_or k)  
            LET bitwise_accumulator BE -1  
            LET steps_count BE 0  
            LET idx BE 0  
            WHILE idx < LENGTH(nums)  
                LET current_val BE nums[idx]  
                IF bitwise_accumulator = -1 THEN  
                    bitwise_accumulator := current_val  
                ELSE  
                    bitwise_accumulator := bitwise_accumulator BITWISE_AND current_val  
                END IF  
                IF (bitwise_accumulator BITWISE_AND test_or) = 0 THEN  
                    bitwise_accumulator := -1  
                ELSE  
                    steps_count := steps_count + 1  
                    IF steps_count > k THEN  
                        RETURN false  
                    END IF  
                END IF  
                idx := idx + 1  
            END WHILE  
            RETURN true  
        END FUNCTION  

        LET upper_limit BE (2 TO_POWER 30) - 1  
        LET answer BE upper_limit  
        LET position BE 0  
        WHILE position < 30  
            LET bit_value BE 2 TO_POWER position  
            IF (answer BITWISE_AND bit_value) = 0 THEN  
                position := position + 1  
                CONTINUE  
            END IF  
            LET toggled_result BE (NOT answer) XOR bit_value  
            IF canAchieve(toggled_result k) THEN  
                answer := answer BITWISE_AND (NOT bit_value)  
            END IF  
            position := position + 1  
        END WHILE  
        RETURN answer  
    END FUNCTION  
END CLASS