CLASS Solution  
    FUNCTION nonSpecialCount(leftBound rightBound)  
        FUNCTION is_prime(candidate)  
            DECLARE threshold_one AS 1  
            DECLARE threshold_three AS 3  
            IF candidate <= threshold_one THEN  
                RETURN false  
            END IF  
            IF candidate <= threshold_three THEN  
                RETURN true  
            END IF  
            IF (candidate MOD 2 = 0) OR (candidate MOD 3 = 0) THEN  
                RETURN false  
            END IF  
            DECLARE iterator AS 5  
            WHILE (iterator * iterator) <= candidate DO  
                IF (candidate MOD iterator = 0) OR (candidate MOD (iterator + 2) = 0) THEN  
                    RETURN false  
                END IF  
                iterator = iterator + 6  
            END WHILE  
            RETURN true  
        END FUNCTION  

        DECLARE prime_start AS CEIL(SQRT(leftBound))  
        DECLARE prime_end AS FLOOR(SQRT(rightBound))  

        DECLARE count_special AS 0  
        DECLARE currentPrime AS prime_start  
        WHILE currentPrime <= prime_end DO  
            IF is_prime(currentPrime) THEN  
                count_special = count_special + 1  
            END IF  
            currentPrime = currentPrime + 1  
        END WHILE  

        DECLARE range_length AS rightBound - leftBound + 1  
        DECLARE non_special_count AS range_length - count_special  

        RETURN non_special_count  
    END FUNCTION  
END CLASS