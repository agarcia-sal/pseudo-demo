CLASS Solution  
    FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer  
        FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer and integer  
            LET even_bit_tally BE 0  
            LET idx BE 0  
            WHILE idx < LENGTH(arr)  
                LET item BE arr[idx]  
                LET one_bits_counter BE 0  
                LET temp_val BE item  
                WHILE temp_val > 0  
                    one_bits_counter = one_bits_counter + (temp_val AND 1)  
                    temp_val = temp_val DIV 2  
                END WHILE  
                IF (one_bits_counter MOD 2) = 0 THEN  
                    even_bit_tally = even_bit_tally + 1  
                END IF  
                idx = idx + 1  
            END WHILE  
            LET odd_bit_tally BE LENGTH(arr) - even_bit_tally  
            RETURN even_bit_tally, odd_bit_tally  
        END FUNCTION  
        
        LET even_count_a, odd_count_a BE count_even_odd_bits(a)  
        LET even_count_b, odd_count_b BE count_even_odd_bits(b)  
        LET even_count_c, odd_count_c BE count_even_odd_bits(c)  
        
        LET product_case_one BE even_count_a * even_count_b * even_count_c  
        LET product_case_two_part1 BE even_count_a * odd_count_b * odd_count_c  
        LET product_case_two_part2 BE odd_count_a * even_count_b * odd_count_c  
        LET product_case_two_part3 BE odd_count_a * odd_count_b * even_count_c  
        LET product_case_two BE product_case_two_part1 + product_case_two_part2 + product_case_two_part3  
        
        LET final_result BE product_case_one + product_case_two  
        RETURN final_result  
    END FUNCTION  
END CLASS