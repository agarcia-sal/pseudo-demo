CLASS Solution
    FUNCTION largestSquareArea(bottomLeft, topRight)
        FUNCTION intersecting_square_area(bl1, tr1, bl2, tr2)
            left_bound := IF bl1[0] > bl2[0] THEN bl1[0] ELSE bl2[0]
            right_bound := IF tr1[0] < tr2[0] THEN tr1[0] ELSE tr2[0]
            bottom_bound := IF bl1[1] > bl2[1] THEN bl1[1] ELSE bl2[1]
            top_bound := IF tr1[1] < tr2[1] THEN tr1[1] ELSE tr2[1]

            IF NOT (left_bound < right_bound AND bottom_bound < top_bound)
                RETURN 0
            END IF

            width := right_bound - left_bound
            height := top_bound - bottom_bound
            edge_length := IF width < height THEN width ELSE height

            RETURN edge_length * edge_length
        END FUNCTION

        maximum_area <- 0
        total_squares <- LENGTH(bottomLeft)
        current_index1 <- 0
        WHILE current_index1 < total_squares
            current_index2 <- current_index1 + 1
            WHILE current_index2 < total_squares
                area_candidate <- intersecting_square_area(bottomLeft[current_index1], topRight[current_index1], bottomLeft[current_index2], topRight[current_index2])
                IF area_candidate > maximum_area
                    maximum_area <- area_candidate
                END IF
                current_index2 <- current_index2 + 1
            END WHILE
            current_index1 <- current_index1 + 1
        END WHILE
        RETURN maximum_area
    END FUNCTION
END CLASS