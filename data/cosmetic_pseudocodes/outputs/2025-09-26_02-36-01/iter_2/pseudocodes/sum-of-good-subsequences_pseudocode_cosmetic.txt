CLASS Solution
    FUNCTION sumOfGoodSubsequences(nums)
        LET modulus BE 10**9 + 7
        INITIALIZE freqMap AS map with default 0
        INITIALIZE sumMap AS map with default 0

        LET index BE 0
        WHILE index < LENGTH OF nums
            LET element BE nums[index]

            LET freqMap[element] BE freqMap[element] + 1
            LET sumMap[element] BE sumMap[element] + element

            LET prevKey BE element - 1
            LET tempSum1 BE sumMap[prevKey]
            LET tempFreq1 BE freqMap[prevKey]

            LET updatedSum1 BE sumMap[element] + tempSum1 + (tempFreq1 * element)
            LET normalizedSum1 BE updatedSum1 MOD modulus
            sumMap[element] = normalizedSum1

            LET updatedFreq1 BE freqMap[element] + tempFreq1
            LET normalizedFreq1 BE updatedFreq1 MOD modulus
            freqMap[element] = normalizedFreq1

            LET nextKey BE element + 1
            LET tempSum2 BE sumMap[nextKey]
            LET tempFreq2 BE freqMap[nextKey]

            LET updatedSum2 BE sumMap[element] + tempSum2 + (tempFreq2 * element)
            LET normalizedSum2 BE updatedSum2 MOD modulus
            sumMap[element] = normalizedSum2

            LET updatedFreq2 BE freqMap[element] + tempFreq2
            LET normalizedFreq2 BE updatedFreq2 MOD modulus
            freqMap[element] = normalizedFreq2

            index = index + 1
        END WHILE

        LET accumulatedSum BE 0
        FOR EACH val IN VALUES OF sumMap
            accumulatedSum = accumulatedSum + val
        END FOR

        LET answer BE accumulatedSum MOD modulus
        RETURN answer
    END FUNCTION
END CLASS