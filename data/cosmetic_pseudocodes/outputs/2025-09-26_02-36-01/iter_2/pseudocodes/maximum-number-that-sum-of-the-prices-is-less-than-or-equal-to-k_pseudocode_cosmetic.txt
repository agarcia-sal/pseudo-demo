CLASS Solution  
    FUNCTION findMaximumNumber(k, x)  
        FUNCTION count_set_bits(n, pos)  
            DECLARE total AS INTEGER = 0  
            DECLARE segment_length AS INTEGER = 2 ** pos  
            DECLARE complete_segments AS INTEGER = FLOOR(n / segment_length)  
            total = (complete_segments // 2) * segment_length  
            IF (complete_segments % 2) != 0 THEN  
                total = total + ((n % segment_length) + 1)  
            END IF  
            RETURN total  
        END FUNCTION  

        FUNCTION accumulated_price(n)  
            DECLARE sum_price AS INTEGER = 0  
            DECLARE index AS INTEGER = 1  
            WHILE (2 ** (index * x - 1)) <= n DO  
                sum_price = sum_price + count_set_bits(n, index * x - 1)  
                index = index + 1  
            END WHILE  
            RETURN sum_price  
        END FUNCTION  

        DECLARE left_bound AS INTEGER = 1  
        DECLARE right_bound AS INTEGER = 2 ** 60  
        WHILE left_bound <= right_bound DO  
            DECLARE middle AS INTEGER = left_bound + (right_bound - left_bound) // 2  
            IF accumulated_price(middle) <= k THEN  
                left_bound = middle + 1  
            ELSE  
                right_bound = middle - 1  
            END IF  
        END WHILE  
        RETURN right_bound  
    END FUNCTION  
END CLASS