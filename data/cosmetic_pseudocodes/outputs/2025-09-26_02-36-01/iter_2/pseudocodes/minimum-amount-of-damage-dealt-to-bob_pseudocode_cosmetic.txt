CLASS Enemy  
    FUNCTION __init__(self, dmg, downTime)  
        self.damage = dmg  
        self.timeTakenDown = downTime  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION minDamage(self, power, damage, health)  
        totalDamageAccrued = 0  
        damageSum = 0  
        idx = 0  
        WHILE idx < LENGTH(damage) DO  
            damageSum = damageSum + damage[idx]  
            idx = idx + 1  
        END WHILE  
        
        foes = []  
        count = 0  
        WHILE count < LENGTH(damage) DO  
            enemyDmg = damage[count]  
            enemyHealth = health[count]  
            divResult = enemyHealth + power - 1  
            stepsNeeded = divResult // power  
            newEnemy = Enemy(enemyDmg, stepsNeeded)  
            foes.append(newEnemy)  
            count = count + 1  
        END WHILE  
        
        SORT foes BY (lambda e: e.damage / e.timeTakenDown), descending=True  
        
        foreach_foe_index = 0  
        WHILE foreach_foe_index < LENGTH(foes) DO  
            current_enemy = foes[foreach_foe_index]  
            totalDamageAccrued = totalDamageAccrued + damageSum * current_enemy.timeTakenDown  
            damageSum = damageSum - current_enemy.damage  
            foreach_foe_index = foreach_foe_index + 1  
        END WHILE  
        
        RETURN totalDamageAccrued  
    END FUNCTION  
END CLASS