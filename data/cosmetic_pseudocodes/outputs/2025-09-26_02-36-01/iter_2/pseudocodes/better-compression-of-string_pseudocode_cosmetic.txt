CLASS Solution
    FUNCTION betterCompression(compressed)
        DEFINE charFrequency AS dictionary with default 0
        ASSIGN letterHolder TO empty string
        ASSIGN digitAccumulator TO 0
        ASSIGN index TO 0
        WHILE index LESS THAN length of compressed
            ASSIGN symbol TO compressed[index]
            IF symbol matches pattern [a-zA-Z] THEN
                IF letterHolder NOT EQUAL TO empty string THEN
                    charFrequency[letterHolder] = charFrequency[letterHolder] + digitAccumulator
                END IF
                letterHolder = symbol
                digitAccumulator = 0
            ELSE
                tempVal = digitAccumulator TIMES 10
                digitAccumulator = tempVal PLUS integer value of symbol
            END IF
            INCREMENT index BY 1
        END WHILE
        IF letterHolder NOT EQUAL TO empty string THEN
            charFrequency[letterHolder] = charFrequency[letterHolder] + digitAccumulator
        END IF
        DEFINE partsList AS empty list
        SORTED_KEYS = list of keys of charFrequency sorted alphabetically
        FOR idx FROM 0 TO length of SORTED_KEYS MINUS 1
            currentKey = SORTED_KEYS[idx]
            partStr = currentKey CONCAT string of charFrequency[currentKey]
            APPEND partStr TO partsList
        END FOR
        resultString = JOIN all elements in partsList with empty string as delimiter
        RETURN resultString
    END FUNCTION
END CLASS