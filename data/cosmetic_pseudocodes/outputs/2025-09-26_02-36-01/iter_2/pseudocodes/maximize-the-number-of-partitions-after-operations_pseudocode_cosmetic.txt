CLASS Solution  
    FUNCTION maxPartitionsAfterOperations(s parameter k parameter)  
        FUNCTION max_partitions(s parameter k parameter)  
            INITIALIZE partition_count TO 0  
            INITIALIZE unique_chars TO empty set  
            SET idx TO 0  
            WHILE idx < LENGTH(s parameter) DO  
                current_char ASSIGN s parameter[idx]  
                IF COUNT(unique_chars) < k parameter THEN  
                    INSERT current_char INTO unique_chars  
                ELSE  
                    IF current_char IN unique_chars THEN  
                        idx INCREASE BY 1  
                        CONTINUE  
                    ELSE  
                        partition_count ADD 1  
                        unique_chars REASSIGN TO set with current_char  
                    END IF  
                END IF  
                idx INCREASE BY 1  
            END WHILE  
            IF unique_chars IS NOT empty THEN  
                partition_count SET partition_count PLUS 1  
            END IF  
            RETURN partition_count  
        END FUNCTION  
        
        ASSIGN max_result TO max_partitions(s parameter k parameter)  
        SET i TO 0  
        WHILE i <= LENGTH(s parameter) - 1 DO  
            FOR letter IN 'abcdefghijklmnopqrstuvwxyz' DO  
                IF letter == s parameter[i] THEN  
                    CONTINUE  
                END IF  
                PREFIX substring ASSIGN s parameter[0 TO i - 1]  
                SUFFIX substring ASSIGN s parameter[i + 1 TO END]  
                NEW_STRING ASSIGN CONCATENATE(prefix substring, letter, suffix substring)  
                max_result ASSIGN MAX(max_result, max_partitions(NEW_STRING k parameter))  
            END FOR  
            i ADD 1  
        END WHILE  
        RETURN max_result  
    END FUNCTION  
END CLASS