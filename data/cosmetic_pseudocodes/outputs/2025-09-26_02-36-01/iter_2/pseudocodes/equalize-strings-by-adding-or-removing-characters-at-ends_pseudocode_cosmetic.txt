CLASS Solution  
    FUNCTION minOperations(source STRING, destination STRING) RETURNS INTEGER  
        LET length_source BE LEN(source)  
        LET length_destination BE LEN(destination)  
        LET table BE A MATRIX OF SIZE (length_source + 1) BY (length_destination + 1) FILLED WITH 0  
        LET longest_common_subsequence BE 0  
        LET idx_source BE 1  
        WHILE idx_source <= length_source  
            LET idx_destination BE 1  
            WHILE idx_destination <= length_destination  
                IF source[idx_source - 1] IS EQUAL TO destination[idx_destination - 1] THEN  
                    LET previous_value BE table[idx_source - 1][idx_destination - 1]  
                    SET table[idx_source][idx_destination] TO previous_value + 1  
                    IF longest_common_subsequence < table[idx_source][idx_destination] THEN  
                        SET longest_common_subsequence TO table[idx_source][idx_destination]  
                    END IF  
                END IF  
                SET idx_destination TO idx_destination + 1  
            END WHILE  
            SET idx_source TO idx_source + 1  
        END WHILE  
        LET total_length BE length_source + length_destination  
        LET result BE total_length - 2 * longest_common_subsequence  
        RETURN result  
    END FUNCTION  
END CLASS