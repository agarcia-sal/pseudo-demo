CLASS Solution
    FUNCTION valueAfterKSeconds(n k)
        SET modulus TO 1000000000 + 7
        FUNCTION updateArray(currentList currentIndex endIndex)
            IF currentIndex >= endIndex THEN
                RETURN currentList
            END IF
            LET previousVal = currentList[currentIndex - (1)]
            LET currentVal = currentList[currentIndex]
            LET newVal = (currentVal + previousVal)
            LET wrappedVal = newVal - ( (newVal / modulus) * modulus )
            LET updatedList = currentList
            updatedList[currentIndex] = wrappedVal
            RETURN updateArray(updatedList, currentIndex + 1, endIndex)
        END FUNCTION
        FUNCTION iterateKTimes(currentArr remainingIterations nSize)
            IF remainingIterations <= 0 THEN
                RETURN currentArr
            END IF
            LET updatedArr = updateArray(currentArr, 1, nSize)
            RETURN iterateKTimes(updatedArr, remainingIterations - 1, nSize)
        END FUNCTION
        LET initialArr = []
        LET count = 0
        WHILE count < n DO
            initialArr[count] = 1
            count = count + 1
        END WHILE
        LET finalArr = iterateKTimes(initialArr, k, n)
        LET resultFallback = 0
        IF n - 1 >= 0 AND n - 1 < LENGTH(finalArr) THEN
            resultFallback = finalArr[n - 1]
        END IF
        RETURN resultFallback
    END FUNCTION
END CLASS