CLASS Solution
	FUNCTION canSortArray(nums)
		FUNCTION count_set_bits(value)
			DEFINE count AS 0
			DEFINE test_val AS value
			WHILE test_val NOT EQUAL TO 0 DO
				IF (test_val AND 1) NOT EQUAL TO 0 THEN
					count = count + 1
				END IF
				test_val = test_val DIV 2
			END WHILE
			RETURN count
		END FUNCTION

		DEFINE length_val AS 0
		WHILE length_val LESS THAN LENGTH OF nums DO
			length_val = length_val + 1
		END WHILE

		DEFINE ordered_nums AS EMPTY LIST
		FOR index FROM 0 TO length_val - 1 DO
			ordered_nums APPEND nums[index]
		END FOR

		DEFINE temp_val1, temp_val2 AS NULL
		DEFINE swapped AS TRUE
		WHILE swapped DO
			swapped = FALSE
			DEFINE position AS 0
			WHILE position LESS THAN length_val - 1 DO
				IF count_set_bits(nums[position]) = count_set_bits(nums[position + 1]) AND nums[position] GREATER THAN nums[position + 1] THEN
					temp_val1 = nums[position]
					nums[position] = nums[position + 1]
					nums[position + 1] = temp_val1
					swapped = TRUE
				END IF
				position = position + 1
			END WHILE
		END WHILE

		DEFINE index_check AS 0
		DEFINE equal_flag AS TRUE
		WHILE equal_flag AND index_check LESS THAN length_val DO
			IF nums[index_check] NOT EQUALS ordered_nums[index_check] THEN
				equal_flag = FALSE
			END IF
			index_check = index_check + 1
		END WHILE

		RETURN equal_flag
	END FUNCTION
END CLASS