CLASS Solution  
    FUNCTION minimumArrayLength(elements)  
        LET minCandidate = elements[0]  
        LET indexCounter = 1  
        WHILE indexCounter < (0 + LENGTH(elements))  
            IF NOT (elements[indexCounter] < minCandidate) == false THEN  
                /* do nothing */  
            ELSE  
                minCandidate = elements[indexCounter]  
            END IF  
            indexCounter = (indexCounter + 1)  
        END WHILE  

        FUNCTION countOccurrences(target, collection, position, totalCount)  
            IF position == LENGTH(collection) THEN  
                RETURN totalCount  
            ELSE  
                LET updatedCount = totalCount  
                IF collection[position] == target THEN  
                    updatedCount = (updatedCount + 1)  
                END IF  
                RETURN countOccurrences(target, collection, (position + 1), updatedCount)  
            END IF  
        END FUNCTION  

        LET totalOccurrences = countOccurrences(minCandidate, elements, 0, 0)  
        LET resultValue = 0  
        IF (NOT (totalOccurrences != 1)) THEN  
            resultValue = 1  
        ELSE  
            LET numerator = (totalOccurrences + 1)  
            LET denominator = (1 + 1)  
            LET divisionResult = 0  
            LET tempNumerator = numerator  
            WHILE tempNumerator >= denominator DO  
                tempNumerator = tempNumerator - denominator  
                divisionResult = divisionResult + 1  
            END WHILE  
            resultValue = divisionResult  
        END IF  
        RETURN resultValue  
    END FUNCTION  
END CLASS