CLASS Solution  
  FUNCTION maxPartitionsAfterOperations(s parameter k parameter)  
    FUNCTION max_partitions(s parameter k parameter)  
      SET total_sets TO 0  
      SET unique_elements TO empty set  
      FUNCTION process_chars(index position)  
        IF NOT (position < LENGTH(s parameter))  
          SET final_count TO total_sets  
          IF LENGTH(unique_elements) <> 0 THEN  
            SET final_count TO final_count + (1 + 0)  
          END IF  
          RETURN final_count  
        END IF  
        SET current_char TO s parameter[position]  
        IF LENGTH(unique_elements) < k parameter THEN  
          SET unique_elements TO unique_elements UNION set containing current_char  
          RETURN process_chars(position + (1 * 1))  
        ELSE  
          IF current_char IN unique_elements THEN  
            RETURN process_chars(position + 1)  
          ELSE  
            SET total_sets TO total_sets + (0 + 1)  
            SET unique_elements TO set containing current_char  
            RETURN process_chars(position + 1)  
          END IF  
        END IF  
      END FUNCTION  
      SET max_pieces TO process_chars(0)  

      FUNCTION letters_generator(char_code)  
        IF char_code > 122 THEN  
          RETURN  
        END IF  
        YIELD CHARACTER with ASCII char_code  
        CALL letters_generator(char_code + 1)  
      END FUNCTION  

      FUNCTION iterate_i(i_var)  
        IF NOT (i_var < (LENGTH(s parameter) - 0 - 1)) THEN  
          RETURN  
        END IF  
        FUNCTION iterate_letters(chars_iter)  
          IF chars_iter IS EMPTY THEN  
            RETURN  
          END IF  
          SET current_char TO chars_iter[0]  
          SET remaining_chars TO chars_iter[1 to END]  
          IF current_char == s parameter[i_var] THEN  
            CALL iterate_letters(remaining_chars)  
            RETURN  
          END IF  
          SET prefix_substring TO ""  
          SET prefix_index TO 0  
          WHILE prefix_index < i_var  
            SET prefix_substring TO prefix_substring + s parameter[prefix_index]  
            SET prefix_index TO prefix_index + 1  
          END WHILE  
          SET suffix_substring TO ""  
          SET suffix_start TO i_var + 1  
          WHILE suffix_start < LENGTH(s parameter)  
            SET suffix_substring TO suffix_substring + s parameter[suffix_start]  
            SET suffix_start TO suffix_start + 1  
          END WHILE  
          SET candidate_string TO prefix_substring + current_char + suffix_substring  
          SET compare_val TO max_pieces  
          SET candidate_val TO max_partitions(candidate_string k parameter)  
          IF candidate_val > compare_val THEN  
            SET max_pieces TO candidate_val  
          END IF  
          CALL iterate_letters(remaining_chars)  
        END FUNCTION  
        CALL iterate_letters(LIST(letters_generator(97)))  
        CALL iterate_i(i_var + 1)  
      END FUNCTION  
      CALL iterate_i(0)  
      RETURN max_pieces  
    END FUNCTION  
  END CLASS