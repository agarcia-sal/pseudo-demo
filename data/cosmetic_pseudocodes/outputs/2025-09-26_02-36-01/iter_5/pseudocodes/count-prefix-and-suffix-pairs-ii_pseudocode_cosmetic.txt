CLASS Solution
	FUNCTION countPrefixSuffixPairs(words)
		LET totalPairs ASSIGN 0
		LET occurrences ASSIGN a mapping defaulting to 0
		DEFINE FUNCTION loopWordsReverse(index)
			IF index < 0 THEN
				RETURN
			END IF
			LET currentWord ASSIGN words[index]
			DEFINE FUNCTION loopKeys(keysList, pos)
				IF pos >= LENGTH(keysList) THEN
					RETURN
				END IF
				LET key ASSIGN keysList[pos]
				LET lenWord ASSIGN LENGTH(currentWord)
				LET prefixSlice ASSIGN SUBSTRING(key, 0, lenWord)
				LET suffixSlice ASSIGN SUBSTRING(key, LENGTH(key) - lenWord, LENGTH(key))
				IF NOT (currentWord != prefixSlice OR currentWord != suffixSlice) THEN
					SET totalPairs TO totalPairs + occurrences[key]
				END IF
				CALL loopKeys(keysList, pos + 1)
			END FUNCTION
			CALL loopKeys(KEYS(occurrences), 0)
			SET occurrences[currentWord] TO occurrences[currentWord] + 1
			CALL loopWordsReverse(index - 1)
		END FUNCTION
		CALL loopWordsReverse(LENGTH(words) - 1)
		RETURN totalPairs
	END FUNCTION
END CLASS