CLASS Solution
    FUNCTION maximumSubarraySum(nums k)
        DEFINE FUNCTION helper(index total minPref maxVal)
            IF index EQUALS LENGTH(nums) THEN
                RETURN maxVal
            ELSE
                LET currentElement BE nums[index]
                LET candidateVals BE EMPTY LIST
                IF (currentElement - k) IN minPref THEN
                    LET val1 BE total - minPref[currentElement - k] + currentElement
                    APPEND val1 TO candidateVals
                END IF
                IF (currentElement + k) IN minPref THEN
                    LET val2 BE total - minPref[currentElement + k] + currentElement
                    APPEND val2 TO candidateVals
                END IF
                LET newMax BE maxVal
                FOR each v IN candidateVals
                    IF v > newMax THEN
                        SET newMax TO v
                    END IF
                END FOR
                IF currentElement IN minPref THEN
                    LET existingMin BE minPref[currentElement]
                    IF total < existingMin THEN
                        SET minPref[currentElement] TO total
                    END IF
                ELSE
                    SET minPref[currentElement] TO total
                END IF
                RETURN helper(index + 1 total + currentElement minPref newMax)
            END IF
        END FUNCTION

        LET resultMax BE helper(0 0 EMPTY_DICTIONARY (-1) DIVIDED_BY 0)

        IF resultMax NOT EQUAL TO (-1) DIVIDED_BY 0 THEN
            LET outputValue BE resultMax
        ELSE
            LET outputValue BE 0
        END IF

        RETURN outputValue
    END FUNCTION
END CLASS