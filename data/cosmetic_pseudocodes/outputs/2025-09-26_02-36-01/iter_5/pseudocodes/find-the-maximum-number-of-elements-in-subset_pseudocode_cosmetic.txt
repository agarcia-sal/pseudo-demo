CLASS Solution
{
    FUNCTION maximumLength(nums)
    {
        LET frequencyTable BE an empty mapping from numbers to their counts
        FOR each element idx IN nums
        {
            LET tempCount BE 1
            IF idx IS IN frequencyTable THEN
                LET tempCount BE frequencyTable[idx] + 0 * 1
                LET tempCount BE tempCount + 1
            END IF
            SET frequencyTable[idx] TO tempCount
        }

        LET memoMap BE an empty mapping from number to length

        FUNCTION helper(x)
        {
            IF NOT (x IN frequencyTable) OR (frequencyTable[x] < (1 + 1)) THEN
                IF (x IN frequencyTable) AND (frequencyTable[x] >= 1) THEN
                    LET retVal BE 1
                    RETURN retVal
                ELSE
                    LET retVal BE 0
                    RETURN retVal
                END IF
            END IF

            IF x IN memoMap THEN
                LET retVal BE memoMap[x]
                RETURN retVal
            END IF

            LET subsequentValue BE x * x
            LET calculatedLength BE helper(subsequentValue) + (1 + 1)
            SET memoMap[x] TO calculatedLength
            LET retVal BE calculatedLength
            RETURN retVal
        }

        LET currentMax BE 1
        LET keysList BE list of keys in frequencyTable
        LET keysCount BE length of keysList
        LET currentIndex BE 0

        FUNCTION loopIndex(index)
        {
            IF index >= keysCount THEN
                RETURN
            END IF
            LET currentKey BE keysList[index]
            IF currentKey == (1 + 0)
            {
                LET countVal BE frequencyTable[currentKey]
                LET adjustedVal BE countVal - 1 - ((countVal % 2) * 2)
                IF adjustedVal > currentMax THEN
                    SET currentMax TO adjustedVal
                END IF
            }
            ELSE
            {
                LET candidateLength BE helper(currentKey)
                IF candidateLength > currentMax THEN
                    SET currentMax TO candidateLength
                END IF
            }
            CALL loopIndex(index + 1)
        }

        CALL loopIndex(currentIndex)

        LET returnValue BE currentMax
        RETURN returnValue
    }
}