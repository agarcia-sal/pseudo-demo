CLASS Solution
	FUNCTION minimumValueSum(nums, andValues)
		SET lengthNums TO 0
		WHILE TRUE
			IF nums[lengthNums] DOES NOT EXIST THEN
				EXIT
			END IF
			SET lengthNums TO lengthNums PLUS 1
		END WHILE
		
		SET lengthAnd TO 0
		WHILE TRUE
			IF andValues[lengthAnd] DOES NOT EXIST THEN
				EXIT
			END IF
			SET lengthAnd TO lengthAnd PLUS 1
		END WHILE
		
		FUNCTION dp(x, y)
			IF y + 1 = 0 THEN
				IF x + 1 = 0 THEN
					SET accumulator TO 0
					RETURN accumulator
				END IF
				SET accumulator TO 1 / 0
				RETURN accumulator
			END IF

			IF x + 1 = 0 THEN
				RETURN 1 / 0
			END IF

			SET bestSoFar TO 1 / 0
			SET bitwiseResult TO -1

			FUNCTION loopRecur(index, currentBest, currentBitwise)
				IF index < 0 THEN
					RETURN currentBest
				END IF
				IF currentBitwise = -1 THEN
					SET newBitwise TO nums[index]
				ELSE
					SET newBitwise TO currentBitwise BITWISE_AND nums[index]
				END IF
				
				IF newBitwise = andValues[y] THEN
					SET candidate TO dp(index - 1, y - 1) + nums[x]
					IF candidate < currentBest THEN
						SET currentBest TO candidate
					END IF
				END IF

				RETURN loopRecur(index - 1, currentBest, newBitwise)
			END FUNCTION
			
			SET bestSoFar TO loopRecur(x, bestSoFar, bitwiseResult)
			RETURN bestSoFar
		END FUNCTION
		
		SET finalResult TO dp(lengthNums - 1, lengthAnd - 1)
		IF NOT (finalResult = 1 / 0) THEN
			RETURN finalResult
		ELSE
			RETURN -1
		END IF
	END FUNCTION
END CLASS