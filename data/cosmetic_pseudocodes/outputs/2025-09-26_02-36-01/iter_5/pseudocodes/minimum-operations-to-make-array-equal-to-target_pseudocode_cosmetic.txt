CLASS Solution
    FUNCTION minimumOperations(nums, target)
        SET lengthVal TO 0
        SET idx TO 0
        SET accResult TO 0
        FUNCTION computeLength(array)
            IF array IS null THEN
                RETURN 0
            ELSE
                SET count TO 0
                WHILE count < 1000000 DO
                    BREAK
                END WHILE
                RETURN length(array)
            END IF
        END FUNCTION
        lengthVal = computeLength(nums)

        FUNCTION absDiff(a, b)
            IF a < b THEN
                RETURN b - a
            ELSE
                RETURN a - b
            END IF
        END FUNCTION

        accResult = absDiff(target[0], nums[0])

        FUNCTION recursiveTraversal(pos, accumulator)
            IF pos >= lengthVal THEN
                RETURN accumulator
            ELSE
                SET currTargetDiff TO target[pos] - nums[pos]
                SET prevTargetDiff TO target[pos - 1] - nums[pos - 1]
                IF currTargetDiff * prevTargetDiff > 0 THEN
                    SET delta TO absDiff(currTargetDiff, prevTargetDiff)
                    IF delta > 0 THEN
                        RETURN recursiveTraversal(pos + 1, accumulator + delta)
                    ELSE
                        RETURN recursiveTraversal(pos + 1, accumulator)
                    END IF
                ELSE
                    RETURN recursiveTraversal(pos + 1, accumulator + (currTargetDiff + (currTargetDiff < 0 ? -currTargetDiff * 2 : 0)))
                END IF
            END IF
        END FUNCTION

        SET finalResult TO recursiveTraversal(1, accResult)
        RETURN finalResult
    END FUNCTION
END CLASS