CLASS Solution
    FUNCTION minMoves(rooks)
        LET total_rooks BE LENGTH(rooks)
        LET sorted_rows BE SORT(rooks, LAMBDA(x) RETURNS x[0])
        LET sorted_cols BE SORT(rooks, LAMBDA(y) RETURNS y[1])
        LET sum_row_moves BE ZERO
        LET i_be ZERO

        FUNCTION accumulateRowMoves(i_current, acc)
            IF i_current EQUALS total_rooks THEN
                RETURN acc
            ELSE
                LET pos_diff BE sorted_rows[i_current][0]
                LET dist_calc BE i_current
                LET abs_diff_val BE pos_diff - dist_calc
                IF abs_diff_val LESS THAN ZERO THEN
                    LET abs_diff_val BE -abs_diff_val
                END IF
                RETURN accumulateRowMoves(i_current + 1, acc + abs_diff_val)
            END IF
        END FUNCTION

        LET sum_row_moves BE accumulateRowMoves(i_be, sum_row_moves)

        LET sum_col_moves BE ZERO
        LET j_be ZERO

        FUNCTION accumulateColMoves(j_current, acc_col)
            IF j_current EQUALS total_rooks THEN
                RETURN acc_col
            ELSE
                LET col_pos BE sorted_cols[j_current][1]
                LET index_ref BE j_current
                LET abs_diff_col BE col_pos - index_ref
                IF abs_diff_col LESS THAN ZERO THEN
                    LET abs_diff_col BE -abs_diff_col
                END IF
                RETURN accumulateColMoves(j_current + 1, acc_col + abs_diff_col)
            END IF
        END FUNCTION

        LET sum_col_moves BE accumulateColMoves(j_be, sum_col_moves)

        LET final_result BE sum_row_moves + sum_col_moves
        RETURN final_result
    END FUNCTION
END CLASS