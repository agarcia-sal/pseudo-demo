CLASS Solution  
    FUNCTION minimumLength(s)  
        DEFINE FUNCTION sumValuesRecursively(elements, idx, oddCount, evenCount)  
            IF idx >= LENGTH(elements)  
                RETURN oddCount + evenCount  
            END IF  
            LET currentVal BE elements[idx]  
            LET isOdd BE NOT ((currentVal % 2) = 0)  
            LET oddNext BE oddCount  
            LET evenNext BE evenCount  
            IF isOdd = true  
                LET oddNext BE oddCount + 1  
            ELSE  
                IF (currentVal % 2 = 0) AND NOT (currentVal = 0)  
                    LET evenNext BE evenCount + 2  
                END IF  
            END IF  
            RETURN sumValuesRecursively(elements, idx + 1, oddNext, evenNext)  
        END FUNCTION  

        LET frequencyMap BE Counter(s)  
        LET valueList BE LIST of VALUES from frequencyMap  
        LET finalResult BE sumValuesRecursively(valueList, 0, 0, 0)  
        RETURN finalResult  
    END FUNCTION  
END CLASS