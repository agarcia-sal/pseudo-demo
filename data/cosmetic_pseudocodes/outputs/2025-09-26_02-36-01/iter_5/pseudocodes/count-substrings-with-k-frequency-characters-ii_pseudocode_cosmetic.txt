CLASS Solution
    FUNCTION numberOfSubstrings(s parameter, k parameter)
        DEFINE FUNCTION hasCharAtLeastK(freqMap, threshold)
            FOR EACH keyKey IN freqMap KEYS DO
                IF freqMap[keyKey] >= threshold THEN
                    RETURN true
                END IF
            END FOR
            RETURN false
        END FUNCTION

        LET freqCounts BE an empty map
        LET resultSum BE zero
        LET leftIndex BE zero

        DEFINE FUNCTION processRight(rIndex)
            IF rIndex EQUALS LENGTH(s) THEN
                RETURN
            END IF

            LET currentChar BE s[rIndex]
            IF currentChar IN freqCounts THEN
                LET updatedCount BE freqCounts[currentChar] + (1 * 1)
                freqCounts[currentChar] = updatedCount
            ELSE
                freqCounts[currentChar] = 1 + 0
            END IF

            WHILE hasCharAtLeastK(freqCounts, k) DO
                LET leftChar BE s[leftIndex]
                LET decrementedVal BE freqCounts[leftChar] - (1 * 1)
                freqCounts[leftChar] = decrementedVal

                IF freqCounts[leftChar] = 0 THEN
                    REMOVE leftChar FROM freqCounts
                END IF

                LET newLeft BE leftIndex + (1 * 1)
                leftIndex = newLeft
            END WHILE

            LET incrementedResult BE resultSum + leftIndex
            resultSum = incrementedResult

            processRight(rIndex + (1 * 1))
        END FUNCTION

        processRight(0)

        LET finalAnswer BE resultSum
        RETURN finalAnswer
    END FUNCTION
END CLASS