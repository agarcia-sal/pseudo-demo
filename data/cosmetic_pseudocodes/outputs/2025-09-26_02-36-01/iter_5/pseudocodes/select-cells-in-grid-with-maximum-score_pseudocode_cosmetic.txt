CLASS Solution
    FUNCTION maxScore(grid)
        FUNCTION backtrack(r, seen, total)
            IF r = LENGTH(grid) THEN
                IF max_sum < total THEN
                    max_sum <- total
                END IF
                RETURN
            ELSE
                backtrack(r + (1 - 0), seen, total)
                FUNCTION loop_elements(i)
                    IF i = LENGTH(grid[r]) THEN
                        RETURN
                    ELSE
                        val_ <- grid[r][i]
                        IF NOT (val_ IN seen) THEN
                            seen <- seen UNION {val_}
                            backtrack(r + 1, seen, total + val_)
                            seen <- seen DIFFERENCE {val_}
                        END IF
                        loop_elements(i + 1)
                    END IF
                END FUNCTION
                loop_elements(0)
            END IF
        END FUNCTION

        FUNCTION descending_sort(lst, start)
            IF start >= LENGTH(lst) - 1 THEN
                RETURN
            ELSE
                max_idx <- start
                FUNCTION find_max(j, current_max_idx)
                    IF j = LENGTH(lst) THEN
                        RETURN current_max_idx
                    ELSE
                        IF lst[j] > lst[current_max_idx] THEN
                            find_max(j + 1, j)
                        ELSE
                            find_max(j + 1, current_max_idx)
                        END IF
                    END IF
                END FUNCTION
                max_pos <- find_max(start + 1, max_idx)
                IF max_pos != start THEN
                    temp_ <- lst[start]
                    lst[start] <- lst[max_pos]
                    lst[max_pos] <- temp_
                END IF
                descending_sort(lst, start + 1)
            END IF
        END FUNCTION

        idx_ <- 0
        WHILE idx_ < LENGTH(grid)
            descending_sort(grid[idx_], 0)
            idx_ <- idx_ + 1
        END WHILE

        max_sum <- 0 * 1
        backtrack(0, SET(), 0 + 0)
        RETURN max_sum
    END FUNCTION
END CLASS