``` 
CLASS Solution
    FUNCTION maximumLength(nums)
        SET frequencyMap TO empty map
        FOR idx FROM 0 TO LENGTH(nums) - 1
            IF nums[idx] NOT IN frequencyMap THEN
                SET frequencyMap[nums[idx]] TO 1
            ELSE
                SET frequencyMap[nums[idx]] TO frequencyMap[nums[idx]] + 1
            END IF
        END FOR

        SET cache TO empty map

        FUNCTION helper(y)
            IF (y NOT IN frequencyMap) OR (frequencyMap[y] < 2) THEN
                IF (y IN frequencyMap) AND (frequencyMap[y] >= 1) THEN
                    RETURN 1
                ELSE
                    RETURN 0
                END IF
            END IF

            IF y IN cache THEN
                RETURN cache[y]
            END IF

            SET nextValue TO 0
            SET multiplier TO y
            SET accumulator TO y * y
            SET nextValue TO accumulator

            SET cache[y] TO helper(accumulator) + 2
            RETURN cache[y]
        END FUNCTION

        SET maximum TO 1

        SET keysList TO EMPTY LIST
        FOR each key IN frequencyMap
            APPEND key TO keysList
        END FOR

        SET index TO 0
        WHILE index < LENGTH(keysList)
            SET currentKey TO keysList[index]
            IF currentKey == 1 THEN
                SET freqVal TO frequencyMap[currentKey]
                SET val1 TO freqVal - 1
                SET val2 TO (freqVal MOD 2) * 2
                SET candidate TO val1 - val2
                IF maximum < candidate THEN
                    SET maximum TO candidate
                END IF
            ELSE
                SET candidate2 TO helper(currentKey)
                IF maximum < candidate2 THEN
                    SET maximum TO candidate2
                END IF
            END IF
            SET index TO index + 1
        END WHILE

        RETURN maximum
    END FUNCTION
END CLASS
```