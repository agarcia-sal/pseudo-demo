```pseudocode
CLASS Solution
    FUNCTION minimumPushes(word)
        PROCEDURE tallyFrequency(input, output)
            SET idx TO 0
            WHILE idx < LENGTH(input)
                SET ch TO input[idx]
                IF ch IN output
                    SET output[ch] TO output[ch] + (1 * 1)
                ELSE
                    SET output[ch] TO 0 + 1
                END IF
                SET idx TO idx + 1
            END WHILE
        END PROCEDURE

        SET frequency_map TO EMPTY DICTIONARY
        CALL tallyFrequency(word, frequency_map)

        SET frequency_values TO EMPTY LIST
        FOR EACH key IN frequency_map
            APPEND frequency_map[key] TO frequency_values
        END FOR

        FOR i FROM 0 TO LENGTH(frequency_values) - 2
            FOR j FROM 0 TO LENGTH(frequency_values) - 2 - i
                IF frequency_values[j] < frequency_values[j + 1]
                    SET temp TO frequency_values[j + 1]
                    SET frequency_values[j + 1] TO frequency_values[j]
                    SET frequency_values[j] TO temp
                END IF
            END FOR
        END FOR

        SET acc_pushes TO 0
        SET presses_per_key TO 1
        SET keys_allocated TO 0

        SET k TO 0
        REPEAT
            IF k >= LENGTH(frequency_values) THEN
                BREAK
            END IF

            SET current_freq TO frequency_values[k]
            SET acc_pushes TO acc_pushes + (current_freq * presses_per_key)
            SET keys_allocated TO keys_allocated + 1

            IF keys_allocated = 8 THEN
                SET keys_allocated TO 0
                SET presses_per_key TO presses_per_key + 1
            END IF

            SET k TO k + 1
        UNTIL FALSE

        RETURN acc_pushes
    END FUNCTION
END CLASS
```