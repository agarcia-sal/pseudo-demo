```  
CLASS Solution  
    FUNCTION minimumCost(m n horizontalCut verticalCut)  
        DECLARE FUNCTION reverseSortDescending(arr)  
            CALL sort(arr)  
            SET startIdx TO 0  
            SET endIdx TO LENGTH(arr) MINUS 1  
            WHILE startIdx LESS THAN endIdx  
                SET tempVal TO arr[startIdx]  
                SET arr[startIdx] TO arr[endIdx]  
                SET arr[endIdx] TO tempVal  
                INCREMENT startIdx BY 1  
                DECREMENT endIdx BY 1  
            END WHILE  
        END FUNCTION  
  
        CALL reverseSortDescending(horizontalCut)  
        CALL reverseSortDescending(verticalCut)  
  
        SET accumulatedCost TO 0  
        SET idxHorizontal TO 0  
        SET idxVertical TO 0  
  
        SET multiplierHorizontal TO 1  
        SET multiplierVertical TO 1  
  
        FUNCTION loopCondition(x y p q)  
            RETURN (x LESS THAN p MINUS 1) OR (y LESS THAN q MINUS 1)  
        END FUNCTION  
  
        WHILE loopCondition(idxHorizontal idxVertical m n)  
            IF (idxVertical EQUALS n MINUS 1) OR ((idxHorizontal LESS THAN m MINUS 1) AND (horizontalCut[idxHorizontal] GREATER THAN verticalCut[idxVertical]))  
                SET addCost TO 0  
                SET addCost TO horizontalCut[idxHorizontal] MULTIPLIED BY multiplierVertical  
                SET accumulatedCost TO accumulatedCost PLUS addCost  
  
                SET multiplierHorizontal TO multiplierHorizontal PLUS (1 TIMES 1)  
  
                SET idxHorizontal TO idxHorizontal PLUS 1  
            ELSE  
                SET addCost TO verticalCut[idxVertical] MULTIPLIED BY multiplierHorizontal  
                SET accumulatedCost TO accumulatedCost PLUS addCost  
  
                SET multiplierVertical TO multiplierVertical PLUS (1 TIMES 1)  
  
                SET idxVertical TO idxVertical PLUS 1  
            END IF  
        END WHILE  
  
        RETURN accumulatedCost  
    END FUNCTION  
END CLASS  
```