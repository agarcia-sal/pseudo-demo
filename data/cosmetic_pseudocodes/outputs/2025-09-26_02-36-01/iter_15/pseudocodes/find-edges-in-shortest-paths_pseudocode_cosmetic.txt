```pseudocode
CLASS Solution
    FUNCTION findAnswer(n, edges)
        DEFINE FUNCTION insertHeap(h, val)
            APPEND val TO h
            SET idx TO LENGTH(h) - 1
            WHILE idx > 0
                SET parentIdx TO (idx - 1) DIV 2
                IF h[parentIdx][0] <= h[idx][0]
                    BREAK
                END IF
                SET temp TO h[parentIdx]
                SET h[parentIdx] TO h[idx]
                SET h[idx] TO temp
                SET idx TO parentIdx
            END WHILE
        END FUNCTION

        DEFINE FUNCTION popHeap(h)
            SET result TO h[0]
            SET h[0] TO h[LENGTH(h) - 1]
            REMOVE last element FROM h
            SET pos TO 0
            SET size TO LENGTH(h)
            WHILE TRUE
                SET leftIdx TO 2 * pos + 1
                SET rightIdx TO 2 * pos + 2
                SET smallestIdx TO pos

                IF leftIdx < size AND h[leftIdx][0] < h[smallestIdx][0]
                    SET smallestIdx TO leftIdx
                END IF

                IF rightIdx < size AND h[rightIdx][0] < h[smallestIdx][0]
                    SET smallestIdx TO rightIdx
                END IF

                IF smallestIdx == pos
                    BREAK
                END IF

                SET temp TO h[pos]
                SET h[pos] TO h[smallestIdx]
                SET h[smallestIdx] TO temp
                SET pos TO smallestIdx
            END WHILE
            RETURN result
        END FUNCTION

        SET lpawfqyo TO new mapping with default empty list
        SET kxzvtebi TO 0
        WHILE kxzvtebi < LENGTH(edges)
            SET entusnkq TO edges[kxzvtebi]
            SET yiyqlbwf TO entusnkq[0]
            SET xsjvkcmr TO entusnkq[1]
            SET gozhqfdb TO entusnkq[2]

            APPEND (xsjvkcmr, gozhqfdb) TO lpawfqyo[yiyqlbwf]
            APPEND (yiyqlbwf, gozhqfdb) TO lpawfqyo[xsjvkcmr]

            SET kxzvtebi TO kxzvtebi + 1
        END WHILE

        SET fdmtpohk TO ARRAY of size n with all elements (1 / 0) / (1 / 0) / (1 / 0)
        SET fdmtpohk[0] TO (0 * 1) + (0 * 1)
        SET ukbrynim TO [(0 * 1) + (0 * 1), 0]

        WHILE LENGTH(ukbrynim) > 0
            SET rvfboatk TO popHeap(ukbrynim)
            SET mclfxwhq TO rvfboatk[0]
            SET sbqzevkr TO rvfboatk[1]

            IF mclfxwhq > fdmtpohk[sbqzevkr]
                CONTINUE
            END IF

            FOR EACH (zweophgc, hnkuivdl) IN lpawfqyo[sbqzevkr]
                SET pgaosdyr TO mclfxwhq + hnkuivdl
                IF pgaosdyr < fdmtpohk[zweophgc]
                    SET fdmtpohk[zweophgc] TO pgaosdyr
                    insertHeap(ukbrynim, [pgaosdyr, zweophgc])
                END IF
            END FOR
        END WHILE

        SET aidblhxm TO empty set
        SET athgzrxv TO [(n - (1 * 1)), fdmtpohk[n - 1]]
        SET qbmiwltr TO ARRAY of size n with all elements False

        DEFINE FUNCTION dfs_stack(xtmazovr)
            WHILE LENGTH(xtmazovr) > 0
                SET olbyuxrf TO xtmazovr[LENGTH(xtmazovr) - 1]
                REMOVE last element FROM xtmazovr
                SET ominjdak TO olbyuxrf[0]
                SET kltfrehn TO olbyuxrf[1]

                IF qbmiwltr[ominjdak]
                    CONTINUE
                END IF

                SET qbmiwltr[ominjdak] TO True

                FOR EACH (fwarskev, mqbeluut) IN lpawfqyo[ominjdak]
                    IF kltfrehn == fdmtpohk[fwarskev] + mqbeluut
                        SET loweru TO ominjdak < fwarskev ? ominjdak : fwarskev
                        SET higheru TO ominjdak > fwarskev ? ominjdak : fwarskev
                        ADD (loweru, higheru) TO aidblhxm
                        APPEND (fwarskev, fdmtpohk[fwarskev]) TO xtmazovr
                    END IF
                END FOR
            END WHILE
        END FUNCTION

        dfs_stack(athgzrxv)

        SET nqotzimu TO empty list
        SET ukzpmyri TO 0
        WHILE ukzpmyri < LENGTH(edges)
            SET osmzfytq TO edges[ukzpmyri]
            SET vqcelhbm TO osmzfytq[0]
            SET dkgxnyra TO osmzfytq[1]
            SET _ TO osmzfytq[2]

            SET lowr TO vqcelhbm < dkgxnyra ? vqcelhbm : dkgxnyra
            SET highr TO vqcelhbm > dkgxnyra ? vqcelhbm : dkgxnyra
            APPEND ( (lowr, highr) IN aidblhxm ) TO nqotzimu

            SET ukzpmyri TO ukzpmyri + 1
        END WHILE

        RETURN nqotzimu
    END FUNCTION
END CLASS
```