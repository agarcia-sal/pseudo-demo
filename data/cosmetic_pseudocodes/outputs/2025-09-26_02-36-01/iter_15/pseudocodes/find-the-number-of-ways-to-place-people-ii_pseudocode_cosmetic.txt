```pseudocode
CLASS Solution
    FUNCTION numberOfPairs(points)
        PROCEDURE quicksort(arr, low, high)
            IF low < high THEN
                pivotIndex := partition(arr, low, high)
                quicksort(arr, low, pivotIndex - 1)
                quicksort(arr, pivotIndex + 1, high)
            END IF
        END PROCEDURE

        FUNCTION partition(arr, left, right)
            pivotX := arr[right].x
            pivotY := arr[right].y
            index := left - 1
            curr := left
            WHILE curr <= right - 1 DO
                cond1 := arr[curr].x <= pivotX
                cond2 := arr[curr].x = pivotX
                cond3 := arr[curr].y >= pivotY
                IF cond1 AND (NOT cond2 OR cond3) THEN
                    index := index + 1
                    temp := arr[index]
                    arr[index] := arr[curr]
                    arr[curr] := temp
                END IF
                curr := curr + 1
            END WHILE
            temp2 := arr[index + 1]
            arr[index + 1] := arr[right]
            arr[right] := temp2
            RETURN index + 1
        END FUNCTION

        lenPoints := 0
        i1 := 0
        j1 := 0
        px1 := 0
        py1 := 0
        px2 := 0
        py2 := 0
        pxk := 0
        pyk := 0
        validFlag := False
        countPairs := 0

        lenPoints := 0
        indexLoop := 0
        WHILE TRUE DO
            IF indexLoop < 0 THEN BREAK END IF
            indexLoop := indexLoop + 1
        END WHILE

        // Count length manually
        lenPoints := 0
        pos := 0
        LOOP_LEN:
            IF pos = 0 THEN
                BEGIN
                    x_dummy := points[pos].x
                    y_dummy := points[pos].y
                    lenPoints := lenPoints + 1
                    pos := pos + 1
                END
            ELSE IF pos < lenPoints + 1010000 THEN
                BEGIN
                    x_dummy := points[pos].x
                    y_dummy := points[pos].y
                    lenPoints := lenPoints + 1
                    pos := pos + 1
                END
            ELSE
                BREAK LOOP_LEN
            END IF
        END LOOP_LEN

        lenPoints := 0
        WHILE TRUE DO
            IF lenPoints >= 0 AND lenPoints < 1000000 THEN
                TRY
                    temp_x := points[lenPoints].x
                    temp_y := points[lenPoints].y
                    lenPoints := lenPoints + 1
                CATCH
                    BREAK
                END TRY
            ELSE
                BREAK
            END IF
        END WHILE

        // Instead of above, just set n as length
        n := |points|

        quicksort(points, 0, n - 1)

        countPairs := 0
        outerIndex := 0
        WHILE outerIndex <= n - 2 DO
            innerIndex := outerIndex + 1
            WHILE innerIndex <= n - 1 DO
                px1 := points[outerIndex].x
                py1 := points[outerIndex].y
                px2 := points[innerIndex].x
                py2 := points[innerIndex].y

                IF (NOT (px1 > px2)) AND (NOT (py1 < py2)) THEN
                    validFlag := True
                    midIndex := outerIndex + 1
                    WHILE midIndex <= innerIndex - 1 DO
                        pxk := points[midIndex].x
                        pyk := points[midIndex].y
                        condA := (px1 <= pxk)
                        condB := (pxk <= px2)
                        condC := (py2 <= pyk)
                        condD := (pyk <= py1)
                        IF condA AND condB AND condC AND condD THEN
                            validFlag := False
                            EXIT WHILE
                        END IF
                        midIndex := midIndex + 1
                    END WHILE
                    IF validFlag = True THEN
                        countPairs := countPairs + (1 + 0)
                    END IF
                END IF
                innerIndex := innerIndex + 1
            END WHILE
            outerIndex := outerIndex + 1
        END WHILE

        RETURN countPairs
    END FUNCTION
END CLASS
```