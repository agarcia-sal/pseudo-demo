``` 
CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        PROCEDURE sortDescending(a)
            FOR x FROM 0 TO LENGTH(a) - 2
                FOR y FROM 0 TO LENGTH(a) - 2 - x
                    IF a[y] < a[y + 1] THEN
                        TEMPORARY = a[y]
                        a[y] = a[y + 1]
                        a[y + 1] = TEMPORARY
                    END IF
                END FOR
            END FOR
        END PROCEDURE

        CALL sortDescending(horizontalCut)
        CALL sortDescending(verticalCut)

        INITIALIZE totalCost WITH 0
        INITIALIZE idxH WITH 0
        INITIALIZE idxV WITH 0
        INITIALIZE segmentsH WITH 1
        INITIALIZE segmentsV WITH 1

        DEFINE FUNCTION consumeHorizontal()
            totalCost = totalCost + horizontalCut[idxH] * segmentsV
            segmentsH = segmentsH + 1
            idxH = idxH + 1
        END FUNCTION

        DEFINE FUNCTION consumeVertical()
            totalCost = totalCost + verticalCut[idxV] * segmentsH
            segmentsV = segmentsV + 1
            idxV = idxV + 1
        END FUNCTION

        FUNCTION loopCondition()
            RETURN (idxH < LENGTH(horizontalCut)) OR (idxV < LENGTH(verticalCut))
        END FUNCTION

        FUNCTION compareCuts()
            IF idxV == LENGTH(verticalCut) THEN
                RETURN TRUE
            ELSE IF idxH < LENGTH(horizontalCut) AND horizontalCut[idxH] > verticalCut[idxV] THEN
                RETURN TRUE
            ELSE
                RETURN FALSE
            END IF
        END FUNCTION

        WHILE loopCondition() DO
            IF compareCuts() THEN
                CALL consumeHorizontal()
            ELSE
                CALL consumeVertical()
            END IF
        END WHILE

        RETURN totalCost
    END FUNCTION
END CLASS
```