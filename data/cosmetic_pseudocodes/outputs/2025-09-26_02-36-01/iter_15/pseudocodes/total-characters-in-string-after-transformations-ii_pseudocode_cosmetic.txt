``` 
CLASS Solution
    FUNCTION lengthAfterTransformations(s parameter s IS string t parameter t IS integer nums parameter nums IS list of integers) RETURNS integer
        SET Upsilon TO 10 EXP 9 PLUS 1 

        SET Wx TO list WITH 26 ELEMENTS, EACH BEING a list WITH 26 ZEROES
        SET a TO 0
        WHILE a <= 25
            SET b TO 0
            WHILE b < nums at position a
                SET c TO (a + b + 1) MOD 26
                Wx at position a at position c TO Wx at position a at position c PLUS 1
                SET b TO b PLUS 1
            END WHILE
            SET a TO a PLUS 1
        END WHILE

        FUNCTION matrix_multiply(A parameter A IS list of lists of integers B parameter B IS list of lists of integers) RETURNS list of lists of integers
            SET OY TO list WITH 26 ELEMENTS, EACH BEING a list WITH 26 ZEROES
            SET e TO 0
            WHILE e <= 25
                SET m TO 0
                WHILE m <= 25
                    SET q TO 0
                    SET S_val TO 0
                    REPEAT
                        IF q > 25 THEN BREAK
                        SET n_val TO (OY at position e at position m PLUS ((A at position e at position q) TIMES (B at position q at position m)) MOD Upsilon) MOD Upsilon
                        SET S_val TO n_val
                        SET q TO q PLUS 1
                    UNTIL false
                    SET OY at position e at position m TO S_val
                    SET m TO m PLUS 1
                END WHILE
                SET e TO e PLUS 1
            END WHILE
            RETURN OY
        END FUNCTION

        FUNCTION matrix_power(matrix parameter matrix IS list of lists of integers power parameter power IS integer) RETURNS list of lists of integers
            SET Z TO list WITH 26 ELEMENTS EACH a list WITH 26 ZEROES
            SET h TO 0
            WHILE h <= 25
                SET k TO 0
                WHILE k <= 25
                    IF h = k THEN
                        SET Z at position h at position k TO 1
                    ELSE
                        SET Z at position h at position k TO 0
                    END IF
                    SET k TO k PLUS 1
                END WHILE
                SET h TO h PLUS 1
            END WHILE
            
            SET base_M TO matrix
            SET powVal TO power
            WHILE powVal > 0
                IF (powVal MOD 2) EQUALS 1 THEN
                    SET Z TO matrix_multiply(Z, base_M)
                END IF
                SET base_M TO matrix_multiply(base_M, base_M)
                SET powVal TO powVal DIV 2
            END WHILE
            RETURN Z
        END FUNCTION

        SET Final_Matrix TO matrix_power(Wx, t)

        SET Current_Count TO list of 26 ZEROES
        SET idx_1 TO 0
        WHILE idx_1 < LENGTH s
            SET ch TO s at position idx_1
            SET indChar TO ORD(ch) MINUS ORD('a')
            SET Current_Count at indChar TO Current_Count at indChar PLUS 1
            SET idx_1 TO idx_1 PLUS 1
        END WHILE

        SET Final_Count TO list of 26 ZEROES

        SET iX TO 0
        REPEAT
            IF iX > 25 THEN BREAK
            SET jX TO 0
            REPEAT
                IF jX > 25 THEN BREAK
                SET val_calculated TO (Final_Count at jX PLUS (Current_Count at iX TIMES Final_Matrix at iX at jX) MOD Upsilon) MOD Upsilon
                SET Final_Count at jX TO val_calculated
                SET jX TO jX PLUS 1
            UNTIL false
            SET iX TO iX PLUS 1
        UNTIL false

        SET total_sum TO 0
        SET xY TO 0
        WHILE xY <= 25
            SET total_sum TO (total_sum PLUS Final_Count at xY) MOD Upsilon
            SET xY TO xY PLUS 1
        END WHILE

        RETURN total_sum
    END FUNCTION
END CLASS
```