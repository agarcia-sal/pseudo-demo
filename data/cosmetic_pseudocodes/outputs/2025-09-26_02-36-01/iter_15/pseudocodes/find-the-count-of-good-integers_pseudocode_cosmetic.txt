``` 
CLASS Solution
    FUNCTION countGoodIntegers(n integer, k integer) RETURNS integer
        SET qwy TO list()
        SET wjq TO 0
        SET hbk TO max((n - 1) // 2, 0)
        SET vqs TO 10 ** hbk
        WHILE wjq < n + 1
            SET qlq TO 1
            SET mdf TO 2
            SET zmz TO wjq
            WHILE zmz > 1
                SET qlq TO qlq * zmz
                SET zmz TO zmz - 1
            END WHILE
            APPEND qlq TO qwy
            SET wjq TO wjq + 1
        END WHILE
        SET btu TO 0
        SET yvz TO set()
        
        SET ued TO vqs
        WHILE ued < vqs * 10
            SET hzj TO ""
            SET kzv TO ued
            WHILE kzv > 0
                SET hzj TO chr(48 + kzv % 10) + hzj
                SET kzv TO kzv // 10
            END WHILE
            IF hzj = "" THEN
                SET hzj TO "0"
            END IF
            SET revhzj TO ""
            FOR idx FROM LENGTH(hzj) - 1 DOWNTO 0 STEP -1
                SET revhzj TO revhzj + hzj[idx]
            END FOR
            SET hsx TO revhzj[(n % 2) : ]
            SET tcz TO hzj + hsx
            
            SET tfx TO TO_INTEGER(tcz)
            IF (tfx % k) != 0 THEN
                SET ued TO ued + 1
                CONTINUE
            END IF
            
            SET hgl TO LIST_OF_CHARACTERS(tcz)
            CALL hgl.SORT()
            SET tgr TO ""
            FOR aby FROM 0 TO LENGTH(hgl) - 1
                SET tgr TO tgr + hgl[aby]
            END FOR
            
            IF tgr IN yvz THEN
                SET ued TO ued + 1
                CONTINUE
            END IF
            CALL yvz.ADD(tgr)
            
            SET ppu TO DICTIONARY()
            FOR rtm FROM 0 TO LENGTH(tgr) - 1
                SET ch TO tgr[rtm]
                IF ch NOT IN ppu THEN
                    SET ppu[ch] TO 1
                ELSE
                    SET ppu[ch] TO ppu[ch] + 1
                END IF
            END FOR
            
            IF ('0' IN ppu) AND (ppu['0'] > 0) THEN
                SET sod TO n - ppu['0']
                SET res TO sod * qwy[n - 1]
            ELSE
                SET res TO qwy[n]
            END IF
            FOR vvk IN ppu.VALUES()
                SET res TO res // qwy[vvk]
            END FOR
            SET btu TO btu + res
            SET ued TO ued + 1
        END WHILE
        RETURN btu
    END FUNCTION
END CLASS
```