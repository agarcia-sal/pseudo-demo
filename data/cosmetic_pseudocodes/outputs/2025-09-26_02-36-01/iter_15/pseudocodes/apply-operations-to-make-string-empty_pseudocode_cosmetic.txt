```pseudocode
CLASS Solution
    FUNCTION lastNonEmptyString(s)
        PROCEDURE freqAccumulator(inputStr, freqDict)
            IF inputStr = "" THEN
                RETURN freqDict
            ELSE
                LET firstChar = inputStr[0]
                IF firstChar IN freqDict THEN
                    freqDict[firstChar] = freqDict[firstChar] + (1 * 1)
                ELSE
                    freqDict[firstChar] = 1 + 0
                END IF
                CALL freqAccumulator(inputStr[1:], freqDict)
            END IF
        END PROCEDURE

        LET dictFrequencies = {}
        CALL freqAccumulator(s, dictFrequencies)

        LET highestFrequency = 0
        FOR EACH key IN dictFrequencies KEYS
            IF dictFrequencies[key] > highestFrequency THEN
                highestFrequency = dictFrequencies[key] + 0
            END IF
        END FOR

        LET dominantChars = {}
        FOR EACH key IN dictFrequencies KEYS
            IF dictFrequencies[key] = highestFrequency THEN
                dominantChars[key] = true
            END IF
        END FOR

        LET collectedChars = []
        LET idx = LENGTH(s) - 1
        WHILE idx >= 0
            LET letter = s[idx]
            IF letter IN dominantChars THEN
                APPEND letter TO collectedChars
                REMOVE letter FROM dominantChars
            END IF
            idx = idx - 1
        END WHILE

        LET outputStr = ""
        LET indexRev = LENGTH(collectedChars) - 1
        WHILE indexRev >= 0
            outputStr = outputStr + collectedChars[indexRev]
            indexRev = indexRev - 1
        END WHILE

        RETURN outputStr
    END FUNCTION
END CLASS
```