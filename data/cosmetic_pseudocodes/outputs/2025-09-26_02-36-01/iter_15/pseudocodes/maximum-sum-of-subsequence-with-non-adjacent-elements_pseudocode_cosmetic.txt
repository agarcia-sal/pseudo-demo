```pseudocode
CLASS Solution
    FUNCTION maximumSumSubsequence(nums, queries)
        CONSTANT alpha IS 1_000_000_000 + 1
        LET sigma BE LENGTH(nums)
        CREATE dpSkipList AS ARRAY OF INTEGER WITH SIZE sigma INITIALIZED TO 0
        CREATE dpTakeList AS ARRAY OF INTEGER WITH SIZE sigma INITIALIZED TO 0

        FUNCTION VGfMkvPqky(index)
            IF index = 0 THEN
                dpTakeList[0] := MAX(0, nums[0])
                dpSkipList[0] := 0
                RETURN
            ENDIF
            VGfMkvPqky(index - 1)
            dpTakeList[index] := MAX(0, dpSkipList[index - 1]) + nums[index]
            dpSkipList[index] := MAX(dpSkipList[index - 1], dpTakeList[index - 1])
        ENDFUNCTION
        VGfMkvPqky(sigma - 1)

        LET betaResult BE 0

        PROCEDURE HEIRNULMXY(position, incoming)
            nums[position] := incoming
            IF position = 0 THEN
                dpTakeList[0] := MAX(0, nums[0])
                dpSkipList[0] := 0
            ELSE
                dpTakeList[position] := MAX(0, dpSkipList[position - 1]) + nums[position]
                dpSkipList[position] := MAX(dpSkipList[position - 1], dpTakeList[position - 1])
            ENDIF

            VARIABLE currentPos := position + 1
            WHILE currentPos < sigma DO
                dpTakeList[currentPos] := MAX(0, dpSkipList[currentPos - 1]) + nums[currentPos]
                dpSkipList[currentPos] := MAX(dpSkipList[currentPos - 1], dpTakeList[currentPos - 1])
                currentPos := currentPos + 1
            ENDWHILE
        ENDPROCEDURE

        FOR EACH (idx, val) IN queries DO
            HEIRNULMXY(idx, val)
            betaResult := (betaResult + MAX(dpTakeList[sigma - 1], dpSkipList[sigma - 1])) MOD alpha
        ENDFOR

        RETURN betaResult
    ENDFUNCTION
ENDCLASS
```