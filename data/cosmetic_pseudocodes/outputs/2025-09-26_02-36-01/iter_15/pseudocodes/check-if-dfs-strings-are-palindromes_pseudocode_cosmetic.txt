``` 
CLASS Hashing  
    FUNCTION __init__(self, s, base, mod)  
        SET xg TO mod  
        SET qb TO a list initialized with zero repeated LENGTH OF s PLUS one times  
        SET mrl TO a list initialized with one repeated LENGTH OF s PLUS one times  
        SET uj TO 1  
        WHILE uj LESS THAN OR EQUAL TO LENGTH OF s  
            SET hd TO (qb[uj - 1] * base + UNICODE code point of s[uj - 1]) % xg  
            SET qb[uj] TO hd  
            SET mrl[uj] TO (mrl[uj - 1] * base) % xg  
            INCREMENT uj BY 1  
        END WHILE  
        SET self.mod TO xg  
        SET self.h TO qb  
        SET self.p TO mrl  
    END FUNCTION  

    FUNCTION query(self, l, r)  
        SET rt TO (self.h[r] - self.h[l - 1] * self.p[r - l + 1]) % self.mod  
        RETURN rt  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION findAnswer(self, parent, s)  
        SET ag TO LENGTH OF s  
        SET nx TO a list containing ag empty lists  
        SET zp TO 1  
        WHILE zp LESS THAN ag  
            APPEND zp TO nx[parent[zp]]  
            INCREMENT zp BY 1  
        END WHILE  

        SET bk TO empty list  
        SET ox TO empty dictionary  

        FUNCTION dfs(i)  
            SET ct TO LENGTH OF bk + 1  
            SET wk TO 0  
            WHILE wk LESS THAN LENGTH OF nx[i]  
                CALL dfs(nx[i][wk])  
                INCREMENT wk BY 1  
            END WHILE  
            APPEND s[i] TO bk  
            SET ys TO LENGTH OF bk  
            SET ox[i] TO PAIR(ct, ys)  
        END FUNCTION  

        CALL dfs(0)  

        SET base TO 33331  
        SET modulus TO 998244353  
        SET qk TO new Hashing(bk, base, modulus)  

        SET reversedBk TO empty list  
        FOR vj FROM LENGTH OF bk - 1 DOWNTO 0 STEP -1  
            APPEND bk[vj] TO reversedBk  
        END FOR
        SET wt TO new Hashing(reversedBk, base, modulus)  

        SET ji TO empty list  
        SET uv TO 0  
        WHILE uv LESS THAN ag  
            SET l TO ox[uv][0]  
            SET r TO ox[uv][1]  
            SET fz TO r - l + 1  
            IF (fz % 2) EQUALS 0  
                SET mn TO qk.query(l, l + (fz // 2) - 1)  
                SET dz TO wt.query(ag - r + 1, ag - r + 1 + (fz // 2) - 1)  
            ELSE  
                SET mn TO qk.query(l, l + (fz // 2) - 1)  
                SET dz TO wt.query(ag - r + 1, ag - r + 1 + (fz // 2) - 1)  
            END IF  
            APPEND (mn = dz) TO ji  
            INCREMENT uv BY 1  
        END WHILE  
        RETURN ji  
    END FUNCTION  
END CLASS  
```