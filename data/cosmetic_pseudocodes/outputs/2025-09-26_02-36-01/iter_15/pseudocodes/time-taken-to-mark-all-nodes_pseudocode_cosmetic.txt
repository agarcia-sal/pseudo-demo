```pseudocode
CLASS Solution
    FUNCTION timeTaken(edges)
        LET w = LENGTH(edges) + 1
        PROCEDURE buildAdjacencyList(e, result)
            SET result TO an empty map from integer to list of integers
            SET x TO 0
            LOOP
                EXIT WHEN x >= LENGTH(e)
                IF NOT result CONTAINS KEY e[x][0] THEN
                    SET result[e[x][0]] TO empty list
                END IF
                APPEND e[x][1] TO result[e[x][0]]
                IF NOT result CONTAINS KEY e[x][1] THEN
                    SET result[e[x][1]] TO empty list
                END IF
                APPEND e[x][0] TO result[e[x][1]]
                SET x TO x + 1
            END LOOP
        END PROCEDURE
        LET r
        CALL buildAdjacencyList(edges, r)
        
        FUNCTION bfs(start)
            PROCEDURE enqueue(q, val)
                APPEND val TO q
            END PROCEDURE
            PROCEDURE dequeue(q)
                LET v = q[0]
                REMOVE q[0]
                RETURN v
            END PROCEDURE
            LET d = new list of size w FILLED WITH FALSE
            LET queue = []
            CALL enqueue(queue, (start, 0))
            SET d[start] TO TRUE
            LET peak = 0
            
            WHILE LENGTH(queue) > 0
                LET (u, t) = dequeue(queue)
                IF peak < t THEN
                    SET peak = t
                END IF
                
                FOR each v IN r[u]
                    IF d[v] == FALSE THEN
                        SET d[v] = TRUE
                        IF (v % 2) == 0 THEN
                            CALL enqueue(queue, (v, t + 2))
                        ELSE
                            CALL enqueue(queue, (v, t + 1))
                        END IF
                    END IF
                END FOR
            END WHILE
            
            RETURN peak
        END FUNCTION
        
        LET counts = []
        FOR z = 0 TO w - 1
            SET counts[z] = bfs(z)
        END FOR
        
        RETURN counts
    END FUNCTION
END CLASS
```