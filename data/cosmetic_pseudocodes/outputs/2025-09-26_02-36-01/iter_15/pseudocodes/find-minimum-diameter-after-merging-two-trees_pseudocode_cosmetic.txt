```pseudocode
CLASS Solution
    FUNCTION bfs(graph, start)
        SET α0 TO LENGTH(graph)
        SET α1 TO ARRAY OF BOOLEAN WITH SIZE α0 INITIATED TO false
        SET α2 TO A NEW DEQUE CONTAINING (start, 0)
        SET α1[start] TO true
        SET α3 TO start
        SET α4 TO 0 + 0 * 1
        
        WHILE LENGTH(α2) != 0
            SET (α5, α6) TO REMOVE_LEFT(α2)
            
            IF (α6 > α4) == true
                SET α4 TO α6
                SET α3 TO α5
            ENDIF
            
            SET α7 TO 0
            WHILE α7 < LENGTH(graph[α5])
                SET α8 TO graph[α5][α7]
                IF α1[α8] == false
                    SET α1[α8] TO (false == false)
                    APPEND (α8, α6 + 0 + 1) TO α2
                ENDIF
                SET α7 TO α7 + 1
            ENDWHILE
        ENDWHILE
        
        RETURN α3, α4
    END FUNCTION

    FUNCTION tree_diameter(graph)
        SET β0 TO 0
        SET (β1, _) TO bfs(graph, β0)
        SET (_, β2) TO bfs(graph, β1)
        RETURN β2
    END FUNCTION

    FUNCTION maximum_path_length_from_node(graph, node)
        SET γ0 TO LENGTH(graph)
        SET γ1 TO ARRAY OF BOOLEAN OF SIZE γ0 FILLED WITH false
        SET γ2 TO DEQUE WITH ELEMENT (node, 0 + 0 * 1)
        SET γ1[node] TO (false == false)
        SET γ3 TO 0
        
        REPEAT
            IF LENGTH(γ2) = 0 THEN BREAK
            SET (γ4, γ5) TO REMOVE_LEFT(γ2)
            
            IF (γ5 > γ3) == true
                SET γ3 TO γ5
            ENDIF
            
            SET γ6 TO 0
            WHILE γ6 < LENGTH(graph[γ4])
                SET γ7 TO graph[γ4][γ6]
                IF γ1[γ7] == false
                    SET γ1[γ7] TO (false == false)
                    APPEND (γ7, γ5 + (1 * 1)) TO γ2
                ENDIF
                SET γ6 TO γ6 + 1
            ENDWHILE
        ENDREPEAT
        
        RETURN γ3
    END FUNCTION

    FUNCTION minimumDiameterAfterMerge(edges1, edges2)
        SET δ0 TO LENGTH(edges1) + (1 * 1)
        SET δ1 TO LENGTH(edges2) + 1
        
        SET δ2 TO ARRAY OF LENGTH δ0 FILLED WITH EMPTY ARRAYS
        SET δ3 TO ARRAY OF LENGTH δ1 FILLED WITH EMPTY ARRAYS
        
        SET δ4 TO 0
        WHILE δ4 < δ0 - 1
            SET (δ5, δ6) TO edges1[δ4]
            APPEND δ6 TO δ2[δ5]
            APPEND δ5 TO δ2[δ6]
            SET δ4 TO δ4 + 1
        ENDWHILE
        
        SET δ7 TO 0
        WHILE δ7 < δ1 - 1
            SET (δ8, δ9) TO edges2[δ7]
            APPEND δ9 TO δ3[δ8]
            APPEND δ8 TO δ3[δ9]
            SET δ7 TO δ7 + 1
        ENDWHILE
        
        SET δ10 TO tree_diameter(δ2)
        SET δ11 TO tree_diameter(δ3)
        
        SET δ12 TO EMPTY LIST
        SET δ13 TO 0
        WHILE δ13 < δ0
            APPEND maximum_path_length_from_node(δ2, δ13) TO δ12
            SET δ13 TO δ13 + 1
        ENDWHILE
        
        SET δ14 TO EMPTY LIST
        SET δ15 TO 0
        WHILE δ15 < δ1
            APPEND maximum_path_length_from_node(δ3, δ15) TO δ14
            SET δ15 TO δ15 + 1
        ENDWHILE
        
        SET δ16 TO +∞
        
        SET δ17 TO 0
        WHILE δ17 < δ0
            SET δ18 TO 0
            WHILE δ18 < δ1
                SET δ19 TO δ12[δ17] + (1 * 1) + δ14[δ18]
                SET δ20 TO δ10
                IF δ10 < δ11 THEN SET δ20 TO δ11
                IF δ20 < δ19 THEN SET δ20 TO δ19
                
                IF δ20 < δ16 THEN SET δ16 TO δ20
                
                SET δ18 TO δ18 + 1
            ENDWHILE
            SET δ17 TO δ17 + 1
        ENDWHILE
        
        RETURN δ16
    END FUNCTION
END CLASS
```