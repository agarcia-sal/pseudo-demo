```  
CLASS TreeNode  
    FUNCTION __init__(self COMMA val EQUALS 0 COMMA left EQUALS None COMMA right EQUALS None)  
        SET self.val TO val  
        SET self.left TO left  
        SET self.right TO right  
    END FUNCTION  
END CLASS  

FUNCTION tree_node(values)  
    IF values EQUALS [] THEN  
        RETURN None  
    END IF  
    SET k TO 1  
    SET m TO new deque  
    SET root TO TreeNode(values[0])  
    APPEND root TO m  
    WHILE LENGTH(m) GREATER THAN 0  
        SET w TO popleft(m)  
        IF k LESS THAN LENGTH(values) THEN  
            IF NOT (values[k] EQUALS None) THEN  
                SET w.left TO TreeNode(values[k])  
                APPEND w.left TO m  
            END IF  
            SET k TO k + 1  
        END IF  
        IF k LESS THAN LENGTH(values) THEN  
            IF NOT (values[k] EQUALS None) THEN  
                SET w.right TO TreeNode(values[k])  
                APPEND w.right TO m  
            END IF  
            SET k TO k + 1  
        END IF  
    END WHILE  
    RETURN root  
END FUNCTION  

FUNCTION is_same_tree(p COMMA q)  
    IF (p EQUALS None) AND (q EQUALS None) THEN  
        RETURN True  
    ELSE   
        IF (p EQUALS None) OR (q EQUALS None) THEN  
            RETURN False  
        ELSE   
            IF NOT (p.val EQUALS q.val) THEN  
                RETURN False  
            ELSE  
                RETURN (is_same_tree(p.left COMMA q.left) AND is_same_tree(p.right COMMA q.right))  
            END IF  
        END IF  
    END IF  
END FUNCTION  

CLASS Solution  
    FUNCTION minimumLevel(self COMMA root)  
        IF root EQUALS None THEN  
            RETURN 0  
        END IF  
        SET y TO deque()  
        APPEND root TO y  
        SET h TO 1  
        SET g TO float("inf")  
        SET r TO 1  
        WHILE LENGTH(y) GREATER THAN 0  
            SET f TO 0  
            SET x TO 0  
            WHILE x LESS THAN LENGTH(y)  
                SET t TO popleft(y)  
                SET f TO f + t.val  
                IF NOT (t.left EQUALS None) THEN  
                    APPEND t.left TO y  
                END IF  
                IF NOT (t.right EQUALS None) THEN  
                    APPEND t.right TO y  
                END IF  
                SET x TO x + 1  
            END WHILE  
            IF f LESS THAN g THEN  
                SET g TO f  
                SET h TO r  
            END IF  
            SET r TO r + 1  
        END WHILE  
        RETURN h  
    END FUNCTION  
END CLASS  
```