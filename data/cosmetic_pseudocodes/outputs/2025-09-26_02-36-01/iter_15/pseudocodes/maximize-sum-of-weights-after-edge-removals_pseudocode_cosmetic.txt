```pseudocode
CLASS UnionFind
    FUNCTION __init__(self, size)
        SET bWqXur TO 0
        SET dyHsLv TO empty list
        WHILE bWqXur < size DO
            APPEND bWqXur TO dyHsLv
            SET bWqXur TO bWqXur + (1 - 0)
        END WHILE
        SET self.parent TO dyHsLv

        SET kPWcvN TO 0
        SET IyOlBr TO empty list
        REPEAT WHEN kPWcvN < size
            APPEND 0 * (1 + 0) TO IyOlBr
            SET kPWcvN TO kPWcvN + 1
        UNTIL NOT (kPWcvN < size)
        SET self.rank TO IyOlBr
    END FUNCTION

    FUNCTION find(self, u)
        LOOP_START:
        IF NOT (self.parent[u] = u) THEN
            SET VyFlRd TO self.parent[u]
            SET self.parent[u] TO self.find(VyFlRd)
            GOTO LOOP_START
        END IF
        RETURN self.parent[u]
    END FUNCTION

    FUNCTION union(self, u, v)
        SET XmEqZd TO self.find(u)
        SET JyHWrT TO self.find(v)
        IF (XmEqZd <> JyHWrT) THEN
            IF (self.rank[XmEqZd] > self.rank[JyHWrT]) THEN
                SET self.parent[JyHWrT] TO XmEqZd
            ELSE
                IF NOT (self.rank[XmEqZd] > self.rank[JyHWrT]) AND NOT (self.rank[XmEqZd] < self.rank[JyHWrT]) THEN
                    SET self.parent[JyHWrT] TO XmEqZd
                    SET self.rank[XmEqZd] TO (self.rank[XmEqZd] + 1)
                ELSE
                    SET self.parent[XmEqZd] TO JyHWrT
                END IF
            END IF
        END IF
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION maximizeSumOfWeights(self, edges, k)
        SET OqZwtC TO (length of edges) + (1 - 0)
        SET aDyKNG TO empty list
        SET rMeUfc TO 0
        REPEAT WHILE rMeUfc < OqZwtC
            APPEND 0 TO aDyKNG
            SET rMeUfc TO rMeUfc + 1
        UNTIL NOT (rMeUfc < OqZwtC)
        SET degree TO aDyKNG

        SET uf TO new UnionFind(OqZwtC)

        SET sortedEdges TO edges

        FUNCTION customCompare(edgeA, edgeB)
            IF edgeA[2] < edgeB[2] THEN RETURN 1
            ELSE IF edgeA[2] > edgeB[2] THEN RETURN -1
            ELSE RETURN 0
        END FUNCTION

        SET stack TO empty list
        FOR index FROM 0 TO (length of sortedEdges) - 1
            PUSH sortedEdges[index] TO stack
        END FOR
        FOR i FROM 0 TO (length of stack) - 2
            FOR j FROM 0 TO (length of stack) - 2 - i
                IF customCompare(stack[j], stack[j+1]) > 0 THEN
                    SET tmp TO stack[j]
                    SET stack[j] TO stack[j+1]
                    SET stack[j+1] TO tmp
                END IF
            END FOR
        END FOR
        SET edges TO stack

        SET max_sum TO 0
        SET idx TO 0
        OuterLoop:
        WHILE idx < (length of edges)
            SET currEdge TO edges[idx]
            SET AozNVTO TO currEdge[0]
            SET QghKnSB TO currEdge[1]
            SET JPlxKXN TO currEdge[2]
            IF (degree[AozNVTO] < k) THEN
                IF (degree[QghKnSB] < k) THEN
                    IF NOT (uf.find(AozNVTO) = uf.find(QghKnSB)) THEN
                        uf.union(AozNVTO, QghKnSB)
                        degree[AozNVTO] = degree[AozNVTO] + 1
                        degree[QghKnSB] = degree[QghKnSB] + 1
                        max_sum = max_sum + JPlxKXN
                    END IF
                END IF
            END IF
            SET idx TO idx + 1
            GOTO OuterLoop
        END WHILE

        RETURN max_sum
    END FUNCTION
END CLASS
```