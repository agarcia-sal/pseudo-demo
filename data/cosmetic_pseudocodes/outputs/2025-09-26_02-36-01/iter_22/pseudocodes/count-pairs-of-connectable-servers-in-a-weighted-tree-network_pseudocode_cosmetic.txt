CLASS Solution
    FUNCTION countPairsOfConnectableServers(edges, signalSpeed)
        SET adjacency TO a map with default value empty list
        SET iteratorEdges TO 0
        WHILE iteratorEdges < LENGTH(edges)
            SET edgeTriple TO edges[iteratorEdges]
            SET nodeA TO edgeTriple[0]
            SET nodeB TO edgeTriple[1]
            SET edgeWeight TO edgeTriple[2]

            APPEND [nodeB, edgeWeight] TO adjacency[nodeA]
            APPEND [nodeA, edgeWeight] TO adjacency[nodeB]

            SET iteratorEdges TO iteratorEdges + 1
        END WHILE

        SET nodeCount TO SIZE_OF_KEYS(adjacency)
        SET answerArray TO a list filled with zeroes of length nodeCount

        FUNCTION traverseGraph(currentVertex, cameFrom, accumulatedDist, visitedNodes)
            IF (accumulatedDist MODULO signalSpeed) EQUALS 0 THEN
                APPEND currentVertex TO visitedNodes
            END IF
            SET subtotal TO 0
            FOR EACH pairInAdjacency IN adjacency[currentVertex]
                SET connectedVertex TO pairInAdjacency[0]
                SET edgeLen TO pairInAdjacency[1]
                IF connectedVertex NOT EQUALS cameFrom THEN
                    SET subtotal TO subtotal + traverseGraph(connectedVertex, currentVertex, accumulatedDist + edgeLen, visitedNodes)
                END IF
            END FOR
            IF (accumulatedDist MODULO signalSpeed) EQUALS 0 THEN
                RETURN subtotal + 1
            ELSE
                RETURN subtotal
            END IF
        END FUNCTION

        FUNCTION pairsViaCenter(centerNode)
            SET collectedPaths TO empty list
            SET indexNeighbors TO 0
            WHILE indexNeighbors < LENGTH(adjacency[centerNode])
                SET adjPair TO adjacency[centerNode][indexNeighbors]
                SET nextNode TO adjPair[0]
                SET edgeValue TO adjPair[1]
                SET tempPath TO empty list
                CALL traverseGraph(nextNode, centerNode, edgeValue, tempPath)
                APPEND tempPath TO collectedPaths
                SET indexNeighbors TO indexNeighbors + 1
            END WHILE

            SET combinedPairs TO 0
            FOR iIndex FROM 0 TO LENGTH(collectedPaths) - 2
                FOR jIndex FROM iIndex + 1 TO LENGTH(collectedPaths) - 1
                    SET lengthI TO LENGTH(collectedPaths[iIndex])
                    SET lengthJ TO LENGTH(collectedPaths[jIndex])
                    SET productPairs TO lengthI * lengthJ
                    SET combinedPairs TO combinedPairs + productPairs
                END FOR
            END FOR
            RETURN combinedPairs
        END FUNCTION

        SET nodeIterator TO 0
        LOOP
            IF nodeIterator >= nodeCount THEN BREAK END IF
            SET answerArray[nodeIterator] TO pairsViaCenter(nodeIterator)
            SET nodeIterator TO nodeIterator + 1
        END LOOP
        RETURN answerArray
    END FUNCTION
END CLASS