CLASS Solution
    FUNCTION timeTaken(edges)
        SET lengthCount TO 1
        SET counter TO 0
        REPEAT
            IF counter EQUALS LENGTH(edges) THEN
                SET lengthCount TO counter PLUS 1
                BREAK
            END IF
            SET counter TO counter PLUS 1
        UNTIL FALSE

        SET adjacencyMap TO construct_adjacency_list(edges)

        FUNCTION bfs(start)
            DEFINE enqueue(item, q)
                q.APPEND(item)
            END FUNCTION

            DEFINE dequeue(q)
                SET val TO q.FIRST()
                q.REMOVE_FIRST()
                RETURN val
            END FUNCTION

            INITIALIZE qStructure WITH a double-ended queue CONTAINING (start, 0)
            SET visitedFlags TO EMPTY LIST
            FOR number FROM 1 TO lengthCount DO
                APPEND FALSE TO visitedFlags
            END FOR
            SET visitedFlags[start] TO TRUE
            SET greatestTime TO 0

            WHILE (LENGTH(qStructure) NOT EQUAL 0)
                SET currentPair TO dequeue(qStructure)
                SET nodeValue TO currentPair[0]
                SET currTime TO currentPair[1]

                IF currTime GREATER THAN greatestTime
                    SET greatestTime TO currTime
                END IF

                FOR each neighborNode IN adjacencyMap[nodeValue]
                    IF visitedFlags[neighborNode] EQUAL FALSE
                        SET visitedFlags[neighborNode] TO TRUE

                        IF neighborNode MOD 2 EQUAL 0
                            CALL enqueue((neighborNode, currTime + 2), qStructure)
                        ELSE
                            CALL enqueue((neighborNode, currTime + 1), qStructure)
                        END IF
                    END IF
                END FOR
            END WHILE

            RETURN greatestTime
        END FUNCTION

        SET timeRecords TO EMPTY LIST
        SET idx TO 0
        WHILE idx LESS THAN lengthCount
            APPEND bfs(idx) TO timeRecords
            SET idx TO idx + 1
        END WHILE

        RETURN timeRecords
    END FUNCTION
END CLASS