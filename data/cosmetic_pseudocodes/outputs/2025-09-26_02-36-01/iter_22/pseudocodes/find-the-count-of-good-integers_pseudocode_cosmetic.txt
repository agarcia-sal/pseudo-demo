CLASS Solution
    FUNCTION countGoodIntegers(n integer, k integer) RETURNS integer
        SET alpha TO 1
        SET beta TO n - 1
        SET omega TO 10
        SET gamma TO empty list

        PROCEDURE computeFactorials(limit integer)
            SET zeta TO 1
            SET y TO 0
            WHILE y < limit DO
                APPEND zeta TO gamma
                SET zeta TO zeta * (y + 1)
                SET y TO y + 1
            END WHILE
        END PROCEDURE

        CALL computeFactorials(n + 1)

        SET delta TO 0
        SET epsilon TO empty set

        SET iota TO omega ^ ((n - 1) \ 2)
        SET lambda TO iota * omega

        SET mu TO iota

        WHILE mu < lambda DO
            SET sigma TO STRING(mu)
            SET varkappa TO LENGTH(sigma)
            SET rho TO (n % 2)
            SET chi TO EMPTY STRING

            SET jeta TO varkappa - 1
            SET omega2 TO varkappa - rho
            SET psi TO SUBSTRING(REVERSE(sigma), rho, omega2)
            SET chi TO sigma + psi

            SET nu TO INTEGER(chi)
            IF (nu % k) != 0 THEN
                SET mu TO mu + 1
                CONTINUE
            END IF

            SET upsilon TO LIST(chi)
            SORT upsilon IN ASCENDING ORDER
            SET phi TO STRING_CONCAT(upsilon)

            IF phi IN epsilon THEN
                SET mu TO mu + 1
                CONTINUE
            END IF

            ADD phi TO epsilon

            SET tally TO EMPTY MAP
            FOR EACH c IN phi DO
                IF c IN tally THEN
                    tally[c] = tally[c] + 1
                ELSE
                    tally[c] = 1
                END IF
            END FOR

            IF ('0' IN tally) AND (tally['0'] > 0) THEN
                SET res TO (n - tally['0']) * gamma[n - 1]
            ELSE
                SET res TO gamma[n]
            END IF

            FOR EACH val IN VALUES(tally) DO
                SET res TO res \ gamma[val]
            END FOR

            SET delta TO delta + res
            SET mu TO mu + 1
        END WHILE

        RETURN delta
    END FUNCTION
END CLASS