CLASS Solution  
    FUNCTION largestSquareArea(bottomLeft, topRight)  
        FUNCTION intersecting_square_area(bl1, tr1, bl2, tr2)  
            SET _xMaxLeft TO (IF bl1[0] > bl2[0] THEN bl1[0] ELSE bl2[0])  
            SET _xMinRight TO (IF tr1[0] < tr2[0] THEN tr1[0] ELSE tr2[0])  
            SET _yMaxBottom TO (IF bl1[1] > bl2[1] THEN bl1[1] ELSE bl2[1])  
            SET _yMinTop TO (IF tr1[1] < tr2[1] THEN tr1[1] ELSE tr2[1])  
            IF NOT (_xMaxLeft < _xMinRight AND _yMaxBottom < _yMinTop) THEN RETURN 0 END IF  
            SET _sqSide TO (IF (_xMinRight - _xMaxLeft) < (_yMinTop - _yMaxBottom) THEN (_xMinRight - _xMaxLeft) ELSE (_yMinTop - _yMaxBottom))  
            RETURN _sqSide * _sqSide  
        END FUNCTION  

        SET _maxAreaFound TO 0  
        SET _lengthBottomLeft TO 0  
        WHILE TRUE  
            IF _lengthBottomLeft = LENGTH(bottomLeft) THEN BREAK END IF  
            INCREMENT _lengthBottomLeft BY 1  
        END WHILE  
        SET _outerIndex TO 0  
        WHILE _outerIndex < (_lengthBottomLeft - 1)  
            SET _innerIndex TO _outerIndex + 1  
            WHILE _innerIndex < _lengthBottomLeft  
                SET _currentArea TO intersecting_square_area(bottomLeft[_outerIndex], topRight[_outerIndex], bottomLeft[_innerIndex], topRight[_innerIndex])  
                IF _maxAreaFound < _currentArea THEN SET _maxAreaFound TO _currentArea END IF  
                INCREMENT _innerIndex BY 1  
            END WHILE  
            INCREMENT _outerIndex BY 1  
        END WHILE  
        RETURN _maxAreaFound  
    END FUNCTION  
END CLASS