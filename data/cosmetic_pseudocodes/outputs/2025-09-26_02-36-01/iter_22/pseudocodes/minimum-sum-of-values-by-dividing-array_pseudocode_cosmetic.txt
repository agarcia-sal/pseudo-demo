CLASS Solution  
    FUNCTION minimumValueSum(nums, andValues)  
        SET deltaX TO ( LENGTH OF nums )  
        SET deltaY TO ( LENGTH OF andValues )  
        
        FUNCTION dp(alpha, beta)  
            FUNCTION helperAnd(x, y)  
                RETURN x AND y  
            END FUNCTION
            
            FUNCTION helperMin(a, b)  
                IF a LESS THAN b THEN  
                    RETURN a  
                ELSE  
                    RETURN b  
                END IF  
            END FUNCTION
            
            FUNCTION baseCase(p, q)  
                IF q EQUALS -1 THEN  
                    IF p EQUALS -1 THEN  
                        RETURN 0  
                    END IF  
                    RETURN +∞  
                END IF  
                IF p EQUALS -1 THEN  
                    RETURN +∞  
                END IF  
                RETURN -9999999999  
            END FUNCTION
            
            SET accMin TO +∞  
            SET accAnd TO -1  
                    
            LABEL start_loop  
            SET loopIndex TO alpha  
            WHILE TRUE DO  
                IF accAnd EQUALS -1 THEN  
                    SET accAnd TO nums[loopIndex]  
                ELSE  
                    SET accAnd TO helperAnd(accAnd, nums[loopIndex])  
                END IF  
                IF accAnd EQUALS andValues[beta] THEN  
                    SET candidate TO dp(loopIndex - 1, beta - 1) + nums[alpha]  
                    SET accMin TO helperMin(accMin, candidate)  
                END IF  
                IF loopIndex EQUALS -1 THEN  
                    BREAK  
                END IF  
                SET loopIndex TO loopIndex - 1  
            END WHILE start_loop  
            
            RETURN accMin  
        END FUNCTION  
        
        SET answer TO dp(deltaX - 1, deltaY - 1)  
        IF answer NOT EQUALS +∞ THEN  
            RETURN answer  
        ELSE  
            RETURN -1  
        END IF  
    END FUNCTION  
END CLASS