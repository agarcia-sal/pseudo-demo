FUNCTION is_prime(n)  
    IF NOT (n GREATER THAN one)  
        RETURN false  
    END IF  
    IF n GREATER THAN OR EQUAL TO two AND n LESS THAN OR EQUAL TO three  
        RETURN true  
    END IF  
    IF (n MODULO two) EQUALS zero OR (n MODULO three) EQUALS zero  
        RETURN false  
    END IF  
    SET h TO 5  
    LOOP WHILE (h * h) LESS THAN OR EQUAL TO n  
        IF (n MODULO h) EQUALS zero OR (n MODULO (h + 2)) EQUALS zero  
            RETURN false  
        END IF  
        SET h TO h + 6  
    END LOOP  
    RETURN true  
END FUNCTION  

CLASS Solution  
    FUNCTION mostFrequentPrime(mat)  
        SET p TO LENGTH OF mat  
        SET q TO LENGTH OF mat AT INDEX zero  
        SET moves TO [(-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1)]  
        DECLARE prime_count AS empty map from elements to integers  
        
        FUNCTION traverse(a, b, dx, dy, val)  
            SET x_next TO a + dx  
            SET y_next TO b + dy  
            IF x_next GREATER THAN OR EQUAL TO zero AND x_next LESS THAN p AND y_next GREATER THAN OR EQUAL TO zero AND y_next LESS THAN q THEN  
                SET value_new TO val * 10 + mat[x_next][y_next]  
                IF value_new GREATER THAN 10 AND is_prime(value_new) THEN  
                    IF value_new IN prime_count THEN  
                        SET prime_count[value_new] TO prime_count[value_new] + 1  
                    ELSE  
                        SET prime_count[value_new] TO 1  
                    END IF  
                END IF  
                CALL traverse(x_next, y_next, dx, dy, value_new)  
            END IF  
        END FUNCTION  
        
        FOR row FROM 0 TO p - 1  
            FOR col FROM 0 TO q - 1  
                FOR EACH (dx, dy) IN moves  
                    CALL traverse(row, col, dx, dy, mat[row][col])  
                END FOR  
            END FOR  
        END FOR  
        
        IF prime_count IS empty THEN  
            RETURN -1  
        END IF  
        
        SET max_pair TO (-1, -1)  
        SET result TO -1  
        FOR key IN prime_count KEYS  
            SET candidate TO (prime_count[key], key)  
            IF candidate GREATER THAN max_pair THEN  
                SET max_pair TO candidate  
                SET result TO key  
            END IF  
        END FOR  
        RETURN result  
    END FUNCTION  
END CLASS