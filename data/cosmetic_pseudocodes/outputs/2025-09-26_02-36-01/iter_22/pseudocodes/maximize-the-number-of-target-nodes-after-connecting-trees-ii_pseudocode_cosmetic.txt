CLASS Solution  
    FUNCTION maxTargetNodes(edges1, edges2)  
        SET connection_map_1 TO new dictionary with default value []  
        SET connection_map_2 TO new dictionary with default value []  
  
        PROCEDURE build_connections(edge_list, connection_map)  
            SET idx TO 0  
            REPEAT  
                IF idx EQUALS LENGTH(edge_list) THEN EXIT LOOP  
                SET src_dest TO edge_list[idx]  
                SET node_x TO src_dest[0]  
                SET node_y TO src_dest[1]  
                APPEND node_y TO connection_map[node_x]  
                APPEND node_x TO connection_map[node_y]  
                SET idx TO idx PLUS 1  
            UNTIL FALSE  
        END PROCEDURE  
  
        CALL build_connections(edges1, connection_map_1)  
        CALL build_connections(edges2, connection_map_2)  
  
        SET size_1 TO COUNT_KEYS(connection_map_1)  
        SET size_2 TO COUNT_KEYS(connection_map_2)  
  
        FUNCTION bfs(tree_structure, origin_node)  
            SET count_even_dist TO 0  
            SET count_odd_dist TO 0  
            SET deque_nodes TO new deque containing (origin_node, 0)  
            SET visited_nodes TO new set containing origin_node  
  
            WHILE LENGTH(deque_nodes) NOT EQUAL TO 0  
                SET current_pair TO POP_FRONT(deque_nodes)  
                SET current_node TO current_pair[0]  
                SET current_distance TO current_pair[1]  
  
                IF current_distance MOD 2 EQUALS 0 THEN  
                    SET count_even_dist TO count_even_dist PLUS 1  
                ELSE  
                    SET count_odd_dist TO count_odd_dist PLUS 1  
                END IF  
  
                FOR each adj_node IN tree_structure[current_node]  
                    IF NOT (adj_node IN visited_nodes) THEN  
                        ADD adj_node TO visited_nodes  
                        APPEND (adj_node, current_distance PLUS 1) TO deque_nodes  
                    END IF  
                END FOR  
            END WHILE  
  
            RETURN count_even_dist, count_odd_dist  
        END FUNCTION  
  
        SET list_even_odd_1 TO []  
        SET index_1 TO 0  
        WHILE index_1 LESS THAN size_1  
            SET result_pair TO bfs(connection_map_1, index_1)  
            APPEND result_pair TO list_even_odd_1  
            SET index_1 TO index_1 PLUS 1  
        END WHILE  
  
        SET list_even_odd_2 TO []  
        SET index_2 TO 0  
        WHILE index_2 LESS THAN size_2  
            SET result_pair TO bfs(connection_map_2, index_2)  
            APPEND result_pair TO list_even_odd_2  
            SET index_2 TO index_2 PLUS 1  
        END WHILE  
  
        SET output_accum TO []  
  
        FOR outer_idx FROM 0 TO size_1 MINUS 1  
            SET counts_1 TO list_even_odd_1[outer_idx]  
            SET even_1 TO counts_1[0]  
            SET odd_1 TO counts_1[1]  
  
            SET max_found_targets TO 0  
  
            SET inner_idx TO 0  
            WHILE inner_idx LESS THAN size_2  
                SET counts_2 TO list_even_odd_2[inner_idx]  
                SET even_2 TO counts_2[0]  
                SET odd_2 TO counts_2[1]  
  
                SET condition1 TO (outer_idx EQUALS inner_idx)  
                SET condition2 TO ((outer_idx MOD 2) EQUALS (inner_idx MOD 2))  
  
                IF condition1 OR condition2 THEN  
                    SET candidate_targets TO even_2  
                ELSE  
                    SET candidate_targets TO odd_2  
                END IF  
  
                IF candidate_targets GREATER THAN max_found_targets THEN  
                    SET max_found_targets TO candidate_targets  
                END IF  
  
                SET inner_idx TO inner_idx PLUS 1  
            END WHILE  
  
            APPEND (even_1 PLUS max_found_targets) TO output_accum  
        END FOR  
  
        RETURN output_accum  
    END FUNCTION  
END CLASS