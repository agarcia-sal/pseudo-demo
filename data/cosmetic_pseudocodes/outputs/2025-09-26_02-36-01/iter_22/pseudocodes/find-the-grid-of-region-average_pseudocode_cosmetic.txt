CLASS Solution
    FUNCTION resultGrid(image WITH TYPE List OF List OF integer threshold WITH TYPE integer) WITH RETURN TYPE List OF List OF integer
        FUNCTION is_valid_region(x WITH TYPE integer y WITH TYPE integer) WITH RETURN TYPE boolean
            SET idx1 TO 0
            SET limit1 TO 3
            REPEAT
                IF NOT (idx1 < limit1) THEN BREAK END IF
                SET idx2 TO 0
                SET limit2 TO 3
                REPEAT
                    IF NOT (idx2 < limit2) THEN BREAK END IF
                    SET delta_pairs TO [(−1,0),(1,0),(0,−1),(0,1)]
                    SET dp_index TO 0
                    SET dp_limit TO LENGTH OF delta_pairs
                    REPEAT
                        IF NOT (dp_index < dp_limit) THEN BREAK END IF
                        SET dx TO delta_pairs[dp_index][0]
                        SET dy TO delta_pairs[dp_index][1]
                        SET nx TO x + idx1 + dx
                        SET ny TO y + idx2 + dy
                        IF nx >= x AND nx < x + 3 AND ny >= y AND ny < y + 3 THEN
                            SET val1 TO image[x + idx1][y + idx2]
                            SET val2 TO image[nx][ny]
                            SET diff TO val1 - val2
                            IF (diff * diff) > (threshold * threshold) THEN
                                RETURN False
                            END IF
                        END IF
                        SET dp_index TO dp_index + 1
                    UNTIL FALSE
                    SET idx2 TO idx2 + 1
                UNTIL FALSE
                SET idx1 TO idx1 + 1
            UNTIL FALSE
            RETURN True
        END FUNCTION

        FUNCTION calculate_average(x WITH TYPE integer y WITH TYPE integer) WITH RETURN TYPE integer
            SET sum_accumulator TO 0
            SET row_counter TO 0
            WHILE row_counter < 3
                SET col_counter TO 0
                WHILE col_counter < 3
                    SET sum_accumulator TO sum_accumulator + image[x + row_counter][y + col_counter]
                    SET col_counter TO col_counter + 1
                END WHILE
                SET row_counter TO row_counter + 1
            END WHILE
            SET result_avg TO sum_accumulator / 9
            RETURN result_avg
        END FUNCTION

        SET rows TO LENGTH OF image
        SET cols TO LENGTH OF image[0]
        SET matrix_accum TO []
        SET matrix_counters TO []
        SET outer_idx TO 0
        WHILE outer_idx < rows
            SET inner_list_accum TO []
            SET inner_list_count TO []
            SET inner_idx TO 0
            WHILE inner_idx < cols
                inner_list_accum = inner_list_accum + [0]
                inner_list_count = inner_list_count + [0]
                SET inner_idx TO inner_idx + 1
            END WHILE
            matrix_accum = matrix_accum + [inner_list_accum]
            matrix_counters = matrix_counters + [inner_list_count]
            SET outer_idx TO outer_idx + 1
        END WHILE

        SET i_outer TO 0
        WHILE i_outer < rows - 2
            SET j_outer TO 0
            WHILE j_outer < cols - 2
                IF is_valid_region(i_outer j_outer) THEN
                    SET temp_avg TO calculate_average(i_outer j_outer)
                    SET xi TO 0
                    WHILE xi < 3
                        SET yj TO 0
                        WHILE yj < 3
                            SET pos_x TO i_outer + xi
                            SET pos_y TO j_outer + yj
                            matrix_accum[pos_x][pos_y] = matrix_accum[pos_x][pos_y] + temp_avg
                            matrix_counters[pos_x][pos_y] = matrix_counters[pos_x][pos_y] + 1
                            SET yj TO yj + 1
                        END WHILE
                        SET xi TO xi + 1
                    END WHILE
                END IF
                SET j_outer TO j_outer + 1
            END WHILE
            SET i_outer TO i_outer + 1
        END WHILE

        SET index_a TO 0
        WHILE index_a < rows
            SET index_b TO 0
            WHILE index_b < cols
                IF matrix_counters[index_a][index_b] > 0 THEN
                    matrix_accum[index_a][index_b] = matrix_accum[index_a][index_b] / matrix_counters[index_a][index_b]
                ELSE
                    matrix_accum[index_a][index_b] = image[index_a][index_b]
                END IF
                SET index_b TO index_b + 1
            END WHILE
            SET index_a TO index_a + 1
        END WHILE

        RETURN matrix_accum
    END FUNCTION
END CLASS