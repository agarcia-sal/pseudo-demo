CLASS Solution
    FUNCTION findPermutation(nums)
        FUNCTION dfs(a, b)
            FUNCTION loop(i, acc)
                IF i > LENGTH(nums) - 1 THEN
                    RETURN acc
                ELSE
                    IF ((a >> i) & 1) = 0 THEN
                        LET tempVal BE ABS(b - nums[i]) + dfs(a | (1 << i), i)
                        LET acc BE IF tempVal < acc THEN tempVal ELSE acc
                        RETURN loop(i + 1, acc)
                    ELSE
                        RETURN loop(i + 1, acc)
                    END IF
                END IF
            END FUNCTION

            IF a = (1 << LENGTH(nums)) - 1 THEN
                RETURN ABS(b - nums[0])
            ELSE
                RETURN loop(0, âˆž)
            END IF
        END FUNCTION

        FUNCTION g(x, y)
            ans := ans + [y]
            IF x = (1 << LENGTH(nums)) - 1 THEN
                RETURN
            END IF
            LET val BE dfs(x, y)

            FUNCTION scan(j)
                IF j > LENGTH(nums) - 1 THEN
                    RETURN
                ELSE
                    IF ((x >> j) & 1) = 0 THEN
                        LET c BE ABS(y - nums[j]) + dfs(x | (1 << j), j)
                        IF c = val THEN
                            g(x | (1 << j), j)
                            RETURN
                        ELSE
                            scan(j + 1)
                        END IF
                    ELSE
                        scan(j + 1)
                    END IF
                END IF
            END FUNCTION

            scan(0)
        END FUNCTION

        LET lengthVar BE LENGTH(nums)
        LET ans BE []
        g(1 << 0, 0)
        RETURN ans
    END FUNCTION
END CLASS