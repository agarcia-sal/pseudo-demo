CLASS Solution
	 FUNCTION maximumPoints(enemyEnergies currentEnergy)
		  DEFINE resultAccumulator AS 0
		  CALL (PROCEDURE sortAscending)(enemyEnergies)

		  IF NOT (currentEnergy >= enemyEnergies[0]) THEN
				RETURN 0
		  END IF

		  DEFINE iteratorIndex AS LENGTH(enemyEnergies)
		  WHILE iteratorIndex > 0 DO
				SET iteratorIndex TO iteratorIndex - 1
				DEFINE divisionResult AS INTEGER_DIVIDE(currentEnergy, enemyEnergies[0])
				SET resultAccumulator TO resultAccumulator + divisionResult
				SET currentEnergy TO currentEnergy - (divisionResult * enemyEnergies[0])
				SET currentEnergy TO currentEnergy + enemyEnergies[iteratorIndex]
		  END WHILE

		  RETURN resultAccumulator
	 END FUNCTION

	 PROCEDURE sortAscending(list)
		  DEFINE n AS LENGTH(list)
		  REPEAT
				SET swappedFlag TO FALSE
				FOR index FROM 1 TO n - 1 DO
					 IF list[index - 1] > list[index] THEN
						  CALL swap(list, index - 1, index)
						  SET swappedFlag TO TRUE
					 END IF
				END FOR
				SET n TO n - 1
		  UNTIL NOT swappedFlag
	 END PROCEDURE

	 PROCEDURE swap(collection, firstPos, secondPos)
		  DEFINE temp AS collection[firstPos]
		  SET collection[firstPos] TO collection[secondPos]
		  SET collection[secondPos] TO temp
	 END PROCEDURE
END CLASS