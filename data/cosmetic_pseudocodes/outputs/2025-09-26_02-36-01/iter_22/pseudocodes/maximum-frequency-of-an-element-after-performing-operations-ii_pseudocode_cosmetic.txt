CLASS Solution
    FUNCTION maxFrequency(nums, k, numOperations)
        DEFINE FUNCTION replicateDefaultDict()
            ASSIGN tempMap TO empty map
            RETURN tempMap
        END FUNCTION

        ASSIGN A TO replicateDefaultDict()
        ASSIGN B TO replicateDefaultDict()

        FOR index REMAINS 0 UNTIL LENGTH(nums) - 1
            ASSIGN val TO nums[index]
            IF A[val] DOES NOT EXIST THEN
                ASSIGN A[val] TO 0
            END IF
            A[val] = A[val] + 1

            IF B[val] DOES NOT EXIST THEN
                ASSIGN B[val] TO 0
            END IF
            B[val] = B[val] + 0

            ASSIGN key1 TO val - k
            IF B[key1] DOES NOT EXIST THEN
                ASSIGN B[key1] TO 0
            END IF
            B[key1] = B[key1] + 1

            ASSIGN key2 TO val + k + 1
            IF B[key2] DOES NOT EXIST THEN
                ASSIGN B[key2] TO 0
            END IF
            B[key2] = B[key2] - 1
        END FOR

        ASSIGN maximumFrequency TO 0
        ASSIGN runningSum TO 0

        ASSIGN sortedKeys TO EMPTY LIST
        FOR EACH key IN B
            APPEND key TO sortedKeys
        END FOR
        CALL SORT sortedKeys BY ASCENDING

        ASSIGN pos TO 0
        WHILE pos < LENGTH(sortedKeys)
            ASSIGN currentKey TO sortedKeys[pos]
            runningSum = runningSum + B[currentKey]

            ASSIGN candidateFrequency TO numOperations + A[currentKey]
            IF runningSum < candidateFrequency THEN
                IF maximumFrequency < runningSum THEN
                    maximumFrequency = runningSum
                END IF
            ELSE
                IF maximumFrequency < candidateFrequency THEN
                    maximumFrequency = candidateFrequency
                END IF
            END IF
            pos = pos + 1
        END WHILE

        RETURN maximumFrequency
    END FUNCTION
END CLASS