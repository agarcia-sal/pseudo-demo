CLASS Solution
    FUNCTION unmarkedSumArray(nums FUNCTION PARAMETER, queries FUNCTION PARAMETER) RETURNS list
        DECLARE heap_list AS list INITIALIZED TO empty
        DECLARE visited_set AS set INITIALIZED TO empty
        DECLARE cumulative_sum AS integer INITIALIZED TO 0
        DECLARE output_list AS list INITIALIZED TO empty

        SET i_aux TO 0
        WHILE i_aux LESS THAN LENGTH(nums)
            SET pair_elem TO (nums[i_aux], i_aux)
            APPEND pair_elem TO heap_list
            INCREMENT i_aux BY 1
        END WHILE

        CALL heapify ON heap_list

        SET cumulative_sum TO 0
        SET idx_var TO 0
        WHILE idx_var LESS THAN LENGTH(nums)
            SET cumulative_sum TO cumulative_sum + nums[idx_var]
            INCREMENT idx_var BY 1
        END WHILE

        SET j_ptr TO 0
        WHILE j_ptr LESS THAN LENGTH(queries)
            SET pos_x TO queries[j_ptr][0]
            SET limit_y TO queries[j_ptr][1]

            IF NOT (pos_x IN visited_set) THEN
                INSERT pos_x INTO visited_set
                SET cumulative_sum TO cumulative_sum - nums[pos_x]
            END IF

            DECLARE remove_count AS integer INITIALIZED TO 0

            WHILE (remove_count < limit_y) AND (NOT heap_list IS empty)
                DECLARE pair_k AS tuple ASSIGNED TO heappop(heap_list)
                DECLARE val_k AS integer ASSIGNED TO pair_k[0]
                DECLARE idx_k AS integer ASSIGNED TO pair_k[1]

                IF NOT (idx_k IN visited_set) THEN
                    INSERT idx_k INTO visited_set
                    SET cumulative_sum TO cumulative_sum - val_k
                    SET remove_count TO remove_count + 1
                END IF
            END WHILE

            APPEND cumulative_sum TO output_list
            SET j_ptr TO j_ptr + 1
        END WHILE

        RETURN output_list
    END FUNCTION
END CLASS