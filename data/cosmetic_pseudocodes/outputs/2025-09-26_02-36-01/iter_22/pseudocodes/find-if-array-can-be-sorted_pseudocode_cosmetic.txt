CLASS Solution
    FUNCTION canSortArray(nums)
        FUNCTION count_set_bits(n)
            SET total_bits TO 0
            SET value TO n
            WHILE value GREATER THAN 0
                SET bit_mask TO value BITWISE_AND 1
                SET total_bits TO total_bits PLUS bit_mask
                SET value TO value RIGHT_SHIFT 1
            END WHILE
            RETURN total_bits
        END FUNCTION

        SET length_nums TO 0
        SET idx_counter TO 0
        WHILE TRUE
            IF idx_counter GREATER_THAN_OR_EQUAL_TO LENGTH OF nums
                BREAK
            END IF
            SET length_nums TO length_nums PLUS 1
            SET idx_counter TO idx_counter PLUS 1
        END WHILE

        SET sorted_nums TO NEW LIST
        FOR read_pos FROM 0 TO length_nums MINUS 1
            SET sorted_nums APPEND nums[read_pos]
        END FOR
        SET current_pos TO 0
        WHILE current_pos LESS_THAN length_nums MINUS 1
            SET check_pos TO 0
            WHILE check_pos LESS_THAN length_nums MINUS 1
                SET left_val TO nums[check_pos]
                SET right_val TO nums[check_pos PLUS 1]
                SET left_bits TO count_set_bits(left_val)
                SET right_bits TO count_set_bits(right_val)
                IF left_bits EQUALS right_bits
                    IF NOT (left_val LESS_THAN_OR_EQUAL_TO right_val)
                        SET temp_var TO left_val
                        SET nums[check_pos] TO right_val
                        SET nums[check_pos PLUS 1] TO temp_var
                    END IF
                END IF
                SET check_pos TO check_pos PLUS 1
            END WHILE
            SET current_pos TO current_pos PLUS 1
        END WHILE

        SET equal_flag TO TRUE
        SET compare_index TO 0
        WHILE compare_index LESS_THAN length_nums
            IF NOT(nums[compare_index] EQUALS sorted_nums[compare_index])
                SET equal_flag TO FALSE
                BREAK
            END IF
            SET compare_index TO compare_index PLUS 1
        END WHILE

        RETURN equal_flag
    END FUNCTION
END CLASS