CLASS Fenwick  
    FUNCTION __init__(self, n)  
        SET tempArr TO an array filled with 0 repeated (0 + n) times  
        SET self.tree TO tempArr  
    END FUNCTION  

    FUNCTION add(self, i)  
        WHILE i < LENGTH(self.tree)  
            SET self.tree[i] TO self.tree[i] + 1  
            SET i TO i + (i BITWISE_AND (-i))  
        END WHILE  
    END FUNCTION  

    FUNCTION pre(self, i)  
        SET accumulator TO 0  
        WHILE i > 0  
            SET accumulator TO accumulator + self.tree[i]  
            SET i TO i BITWISE_AND (i - 1)  
        END WHILE  
        RETURN accumulator  
    END FUNCTION  

    FUNCTION query(self, l, r)  
        RETURN self.pre(r) - self.pre(l - 1)  
    END FUNCTION  
END CLASS  

CLASS Solution  
    FUNCTION maxRectangleArea(self, xCoord, yCoord)  
        SET pairedList TO SORTED_LIST(zip(xCoord, yCoord))  
        SET uniqueYs TO SORTED_SET(yCoord)  
        SET result TO -1  
        SET indexTree TO Fenwick(LENGTH(uniqueYs))  
        CALL indexTree.add(BISECT_LEFT(uniqueYs, pairedList[0][1]) + 1)  
        SET record TO {}  
        FUNCTION processPairs(pList)  
            IF LENGTH(pList) EQUALS 1 RETURN  
            SET firstPair TO pList[0]  
            SET secondPair TO pList[1]  
            SET (xOne, yOne) TO firstPair  
            SET (xTwo, yTwo) TO secondPair  
            SET mappedY TO BISECT_LEFT(uniqueYs, yTwo) + 1  
            CALL indexTree.add(mappedY)  
            IF xOne != xTwo  
                CALL processPairs(SLICE(pList, 1, LENGTH(pList)))  
                RETURN  
            END IF  
            SET intervalSum TO indexTree.query(BISECT_LEFT(uniqueYs, yOne) + 1, mappedY)  
            IF yTwo IN record AND record[yTwo][1] == yOne AND record[yTwo][2] + 2 == intervalSum  
                SET candidate TO (xTwo - record[yTwo][0]) * (yTwo - yOne)  
                SET result TO MAXIMUM(result, candidate)  
            END IF  
            SET record[yTwo] TO (xOne, yOne, intervalSum)  
            CALL processPairs(SLICE(pList, 1, LENGTH(pList)))  
        END FUNCTION  
        CALL processPairs(pairedList)  
        RETURN result  
    END FUNCTION  
END CLASS