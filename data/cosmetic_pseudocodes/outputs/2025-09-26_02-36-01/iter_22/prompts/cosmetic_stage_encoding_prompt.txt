Given any input pseudocode, generate a fully rewritten version that fulfills all the following stringent criteria:

1. **Semantic Equivalence**: The output pseudocode must preserve the exact logical behavior, outputs, side effects, and algorithmic steps of the input. The program’s functionality cannot be altered, removed, optimized away, or abstracted.

2. **Invariant Interface Elements**:  
   - Keep all class names, method and function names, their full signatures (names, parameter order, parameter types if present, and return types if declared), class inheritance hierarchies, and declared object layouts strictly unchanged, maintaining original spelling and casing exactly.  
   - Do not rename, reorder, or restructure any interface elements, class hierarchies, or APIs that define the program’s external contract or data structures.

3. **Maximal Internal Variability**:  
   For **all other** code parts — including local variables, parameter local usage, control flow constructs, expressions, literals, data traversal patterns, helper routines or inline code blocks, temporary variables, and all formatting and presentation details — perform **exhaustively layered, orthogonal**, and **deeply structural rewrites** to maximize divergence from the original pseudocode’s syntax and form, including but not limited to:

   - **Control Flow Rewriting**: Convert loops among all logically equivalent forms (for ↔ while ↔ repeat-until ↔ recursion ↔ tail recursion), including unrolling, rearranging exit conditions, early vs late returns, loop inversion, and nesting reshaping; reorder safe, independent statements and control blocks; split or merge conditionals and logical operators with the same net effect.

   - **Identifier Renaming**: Replace all local, temporary, and parameter variable names with freshly generated, unrelated names with no semantic hints from original identifiers, ensuring no collisions; keep interface and API identifiers intact.

   - **Expression Transformation**: Rewrite all expressions and conditions by applying logical equivalences (De Morgan’s laws, contrapositives), arithmetic identities, expanding/contracting compound assignments, substituting constants with equivalent expressions, introducing or removing intermediate variables, factoring or distributing terms, and encoding literals via expressions.

   - **Data Traversal and Algorithmic Steps**: Restructure iterations and data access patterns without changing output or side effects, e.g., invert or re-sequence traversals, replace direct index-based access with traversals via iterators or helper routines, or vice versa.

   - **Helper Routines and Calls**: Inline helper functions fully or extract code into newly formed helper functions equivalently; replace standard library or built-in operations with locally defined helper procedures that replicate identical behavior, or conversely fold locals into built-ins where it preserves semantics.

   - **Formatting and Stylistic Variation**: Vary all whitespace, indentation styles, line breaks, code block delimiters, keyword casing and spelling variants consistently (e.g., use `END FUNCTION` vs `end function` or `EndFunction`), ordering of logically commutable operations, and comment presence (omit all comments in output).

4. **No Semantic Leakage**:  
   The final output must give the strong impression of a wholly independently implemented pseudocode, exhibiting minimal lexical, syntactic, or structural resemblance to the original other than the **strictly preserved interface names and program structure** defined above.

5. **Universality and Compliance**:  
   This prompt applies universally and identically to any pseudocode input across all domains and problem contexts. Assume no problem-specific knowledge or assumptions.

6. **Output Requirements**:  
   - Output only the fully transformed pseudocode.  
   - Do not include explanations, comments, annotations, or any supplementary text.

**Summary**: Rigidly preserve all interface identifiers and program semantics while delivering a deeply orthogonal, structurally rewritten pseudocode that differs maximally on every internal dimension—control flow, identifiers, expressions, algorithms, helper routines, and formatting.

**Strict output format**: only the transformed pseudocode text with classes and functions in the same place as in the input.