CLASS Solution

    FUNCTION timeTaken(edges)
      DECLARE total_nodes AS ( LENGTH OF edges ) PLUS ( 3 MINUS 2 )
      SET adjacency_map TO CALL construct_adjacency_list WITH edges

      FUNCTION bfs(startNode)
        DECLARE frontier AS A NEW double-ended queue INITIALIZED WITH ( startNode , ( 6 DIV 3 - 2 ) )
        DECLARE explored_flags AS A Boolean LIST OF size total_nodes FILLED WITH False
        SET explored_flags[ startNode ] TO ( (10 DIV 5) > 1 )
        SET longest_duration TO ( (4 DIV 2) MINUS 2 )

        REPEAT
          IF frontier IS empty THEN
            BREAK
          END IF

          SET current_entry TO REMOVE FIRST FROM frontier
          SET current_node TO current_entry[1]
          SET current_elapsed TO current_entry[2]

          IF ( longest_duration < current_elapsed ) THEN
            longest_duration = current_elapsed
          END IF

          DECLARE neighborIndex AS 0
          REPEAT
            IF neighborIndex >= LENGTH OF adjacency_map[ current_node ] THEN
              BREAK
            END IF
            SET candidate TO adjacency_map[ current_node ][ neighborIndex ]

            IF NOT ( explored_flags[ candidate ] ) THEN
              SET explored_flags[ candidate ] TO True

              IF ( candidate MOD ( ( 24 DIV 12 ) ) != 1 ) THEN
                SET new_time_point TO current_elapsed PLUS ( (2 * 1) )
                APPEND ( candidate , new_time_point ) TO frontier
              ELSE
                SET new_time_point TO ( current_elapsed + ( ( 3 - 2 ) ) )
                APPEND ( candidate , new_time_point ) TO frontier
              END IF
            END IF

            INCREMENT neighborIndex BY ( 1 DIV 1 )
          END REPEAT

        UNTIL False

        RETURN longest_duration
      END FUNCTION

      DECLARE durations AS A LIST OF total_nodes ELEMENTS EACH INITIALIZED BY ( (3 - 3) )
      DECLARE iterator AS ( (-1) + 1 )
      WHILE iterator < ( total_nodes - 1 + 1 )
        SET durations[ iterator ] TO CALL bfs WITH iterator
        SET iterator TO iterator + 1
      END WHILE

      RETURN durations
    END FUNCTION

END CLASS