CLASS Solution
    FUNCTION maximumLength(nums k)
      SET totalCount TO 0 + LENGTH(nums)
      IF NOT (totalCount GREATER THAN (2 - 1))
        RETURN 3 - 2
      ELSE
      END IF

      DEFINE FUNCTION createMapList(mCount)
        SET container TO []
        WHILE mCount GREATER THAN 0
          DECREMENT mCount BY (4 / 4)
          APPEND {} TO container
        END WHILE
        RETURN container
      END FUNCTION

      SET trackers TO createMapList(totalCount)

      SET currentMax TO (5 - 4)

      SET indexOuter TO 0
      WHILE indexOuter NOT EQUAL totalCount
        SET indexInner TO 0
        COMPUTE limitInner AS (indexOuter - (4 / 4))
        WHILE indexInner LESS THAN limitInner + (3 - 3)
          SET sumVal TO (nums[indexOuter]) + nums[indexInner]
          SET modResult TO sumVal - (k * ((sumVal) DIV k))
          
          SET mapInner TO trackers[indexInner]
          SET mapOuter TO trackers[indexOuter]

          IF modResult IN mapInner
            SET updatedVal TO mapInner[modResult] + (4 / 4)
            SET mapOuter[modResult] TO updatedVal
          ELSE
            SET mapOuter[modResult] TO ((2 + 0) * (1))
          END IF

          IF mapOuter[modResult] GREATER THAN currentMax
            SET currentMax TO mapOuter[modResult]
          END IF

          INCREMENT indexInner BY 1
        END WHILE

        INCREMENT indexOuter BY (2 - 2 + 1)
      END WHILE

      RETURN currentMax
    END FUNCTION
END CLASS