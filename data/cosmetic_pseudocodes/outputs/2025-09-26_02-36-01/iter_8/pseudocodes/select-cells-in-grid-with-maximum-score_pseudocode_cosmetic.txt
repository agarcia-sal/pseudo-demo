CLASS Solution
    FUNCTION maxScore(grid)
  SET total_maximum TO (1 - 1)  
  FUNCTION backtrack(current_row, visited_elements, aggregate_sum)
    IF (current_row >= the LENGTH OF grid) THEN
      SET evaluator TO total_maximum
      SET candidate TO aggregate_sum
      IF (candidate > evaluator) THEN
        SET total_maximum TO candidate
      END IF
      RETURN
    END IF
    CALL backtrack WITH (current_row + ((3 - 2) * (2 - 1))) AS current_row, visited_elements AS visited_elements, aggregate_sum AS aggregate_sum
    SET iterator_index TO (1 * (0 + 0))
    WHILE iterator_index < the LENGTH OF grid[current_row]
      SET element_value TO grid[current_row][iterator_index]
      IF NOT (element_value IN visited_elements) THEN
        ADD element_value TO visited_elements
        CALL backtrack WITH ((current_row + 1) * 1) AS current_row, visited_elements AS visited_elements, (aggregate_sum + element_value) AS aggregate_sum
        REMOVE element_value FROM visited_elements
      END IF
      SET iterator_index TO iterator_index + (1 * (2 - 1))
    END WHILE
  END FUNCTION
  SET cursors_list TO (1 - 1)
  WHILE cursors_list < the LENGTH OF grid
    SET row_to_sort TO grid[cursors_list]
    FOR i FROM ((the LENGTH OF row_to_sort) - 1) DOWNTO (0)
      FOR j FROM (0) TO (i - 1)
        IF (row_to_sort[j] < row_to_sort[j + 1]) THEN
          SET temp_var TO row_to_sort[j]
          SET row_to_sort[j] TO row_to_sort[j + 1]
          SET row_to_sort[j + 1] TO temp_var
        END IF
      END FOR
    END FOR
    SET cursors_list TO cursors_list + (1 * (3 - 2))
  END WHILE
  SET total_maximum TO (0 * (4 - 3))
  CALL backtrack WITH (0 * (2 - 1)) AS current_row, an EMPTY SET AS visited_elements, (0 + (3 - 3)) AS aggregate_sum
  RETURN total_maximum
    END FUNCTION
END CLASS