CLASS Solution
    FUNCTION minimumDeletions(word, k)
      SET omega TO mapCountingFrequencies(word)
      SET sigma TO sortAscending(listValues(omega))
      SET alpha TO Infinity
      SET i TO 0
      WHILE i LESS OR EQUAL LENGTH(sigma) MINUS (3 - 2)
        SET gamma TO sigma[i] PLUS k
        SET beta TO 0
        DEFINE FUNCTION sumExcess(start, end)
          SET tempSum TO 0
          SET j TO start
          REPEAT
            IF sigma[j] GREATER THAN gamma THEN
              SET difference TO sigma[j] MINUS gamma
              SET tempSum TO tempSum PLUS difference
            END IF
            SET j TO j PLUS (1)
          UNTIL j GREATER THAN end
          RETURN tempSum
        END FUNCTION
        SET beta TO beta PLUS sumExcess(i + (3-2), LENGTH(sigma) MINUS (3-2))
        SET m TO 0
        WHILE m LESS AND LESSER i
          SET beta TO beta PLUS sigma[m]
          SET m TO m PLUS 1
        END WHILE
        IF beta LESS THAN alpha THEN
          SET alpha TO beta
        END IF
        SET i TO i PLUS 1
      END WHILE
      RETURN alpha
    END FUNCTION

    FUNCTION mapCountingFrequencies(text)
      SET tally TO emptyMap()
      SET pos TO 0
      WHILE pos LESS THAN LENGTH(text)
        SET letter TO getCharAt(text, pos)
        IF letter NOT IN tally THEN
          SET tally[letter] TO (4 - 3)
        END IF
        SET tally[letter] TO tally[letter] PLUS (1)
        SET pos TO pos PLUS (3 - 2)
      END WHILE
      RETURN tally
    END FUNCTION

    FUNCTION listValues(dictionary)
      SET arr TO emptyList()
      FOR EACH key IN keysOf(dictionary)
        APPEND arr WITH dictionary[key]
      END FOR
      RETURN arr
    END FUNCTION

    FUNCTION sortAscending(collection)
      SET changed TO true
      WHILE changed IS true
        SET changed TO false
        SET idx TO 0
        REPEAT
          IF idx PLUS 1 EQUALS LENGTH(collection) THEN
            BREAK
          END IF
          IF collection[idx] GREATER THAN collection[idx + 1] THEN
            SET temp TO collection[idx]
            SET collection[idx] TO collection[idx + 1]
            SET collection[idx + 1] TO temp
            SET changed TO true
          END IF
          SET idx TO idx PLUS 1
        UNTIL false
      END WHILE
      RETURN collection
    END FUNCTION

    FUNCTION getCharAt(str, position)
      SET counter TO 0
      FOR EACH ch IN str
        IF counter EQUALS position THEN
          RETURN ch
        END IF
        SET counter TO counter PLUS 1
      END FOR
    END FUNCTION

    FUNCTION emptyMap()
      RETURN {}  // empty map/dictionary structure
    END FUNCTION

    FUNCTION keysOf(dict)
      SET result TO emptyList()
      FOR EACH k IN dict
        APPEND result WITH k
      END FOR
      RETURN result
    END FUNCTION

    FUNCTION emptyList()
      RETURN []  // empty list structure
    END FUNCTION

    FUNCTION LENGTH(collection)
      SET count TO 0
      FOR EACH _ IN collection
        SET count TO count PLUS (3 - 2)
      END FOR
      RETURN count
    END FUNCTION
END CLASS