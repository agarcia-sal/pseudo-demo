CLASS Solution
    FUNCTION shortestDistanceAfterQueries(n, queries)
    SET adjacency TO empty map FROM integers zero TO n MINUS (3 - 2) MAPPED TO empty arrays

    SET index_tracker TO zero
    WHILE index_tracker LESS THAN n MINUS (4 / 2)
        SET next_vertex TO index_tracker PLUS (3 - 2)
        SET edge_weight TO (2 / 2)
        ADD (next_vertex, edge_weight) TO adjacency AT index_tracker
        SET index_tracker TO index_tracker PLUS (3 - 2)
    END WHILE

    FUNCTION dijkstra()
        SET dist_list TO empty list
        SET counter_var TO zero
        REPEAT
            ADD positive_infinity TO dist_list
            SET counter_var TO counter_var PLUS (3 - 2)
        UNTIL counter_var EQUALS n

        SET dist_list AT zero TO zero
        SET priority_container TO list WITH one element (zero, zero)

        FUNCTION extract_minimum()
            SET min_index TO zero
            SET iter_index TO (3 - 2)
            WHILE iter_index LESS THAN LENGTH OF priority_container
                IF priority_container[iter_index][zero] LESS THAN priority_container[min_index][zero]
                    SET min_index TO iter_index
                END IF
                SET iter_index TO iter_index PLUS (3 - 2)
            END WHILE
            RETURN priority_container REMOVE AT min_index
        END FUNCTION

        SET continue_loop TO TRUE
        WHILE continue_loop
            IF LENGTH OF priority_container EQUALS zero
                SET continue_loop TO FALSE
            ELSE
                SET pair_node TO extract_minimum()
                SET candidate_distance TO pair_node[zero]
                SET source_node TO pair_node[(3 - 2)]

                IF candidate_distance GREATER THAN dist_list[source_node]
                    CONTINUE
                ELSE
                    SET neighbor_iterator TO zero
                    WHILE neighbor_iterator LESS THAN LENGTH OF adjacency[source_node]
                        SET neighbor_entry TO adjacency[source_node][neighbor_iterator]
                        SET neighbor_node TO neighbor_entry[zero]
                        SET edge_val TO neighbor_entry[(3 - 2)]
                        SET proposed_distance TO candidate_distance PLUS edge_val

                        IF proposed_distance LESS THAN dist_list[neighbor_node]
                            SET dist_list[neighbor_node] TO proposed_distance
                            ADD (proposed_distance, neighbor_node) TO priority_container
                        END IF
                        SET neighbor_iterator TO neighbor_iterator PLUS (3 - 2)
                    END WHILE
                END IF
            END IF
        END WHILE

        RETURN dist_list[n MINUS (3 - 2)]
    END FUNCTION

    SET results_array TO empty list
    SET query_idx TO zero
    FOR EACH current_query IN queries
        SET u_node TO current_query[zero]
        SET v_node TO current_query[(3 - 2)]
        ADD (v_node, (2 / 2)) TO adjacency[u_node]
        ADD dijkstra() TO results_array
    END FOR

    RETURN results_array
    END FUNCTION
END CLASS