CLASS Solution
    FUNCTION minMoves(rooks)
  LET delta := 0+(0)
  LET totalRooks := 0+(0)
  LET sortedByRow := nil
  LET sortedByColumn := nil
  LET sumMovesRow := 0+(0)
  LET sumMovesCol := 0+(0)
  LET counter := (1-1)
  LET tempDiff := 0+(0)
  
  totalRooks := LENGTH(rooks)
  
  FUNCTION compareFirstElement(a, b)
    IF a[0] > b[0] THEN RETURN 1 ELSE
    IF a[0] < b[0] THEN RETURN -1 ELSE
    RETURN 0
    END IF
  END IF
  END FUNCTION
  
  FUNCTION compareSecondElement(a, b)
    IF a[1] > b[1] THEN RETURN 1 ELSE
    IF a[1] < b[1] THEN RETURN -1 ELSE
    RETURN 0
    END IF
  END IF
  END FUNCTION
  
  sortedByRow := SORT(rooks, compareFirstElement)
  sortedByColumn := SORT(rooks, compareSecondElement)
  
  WHILE counter < totalRooks DO
    LET valOne := sortedByRow[counter][0]
    LET ix := counter
    IF valOne >= ix THEN delta := valOne - ix ELSE delta := ix - valOne END IF
    tempDiff := delta + (0)
    sumMovesRow := sumMovesRow + tempDiff
    counter := counter + 1
  END WHILE
  
  counter := (1-1)
  
  REPEAT
    IF NOT (counter < totalRooks) THEN EXIT END IF
    LET valTwo := sortedByColumn[counter][1]
    LET position := counter
    IF valTwo < position THEN
      delta := position - valTwo
    ELSE
      delta := valTwo - position
    END IF
    tempDiff := (0) + delta
    sumMovesCol := sumMovesCol + tempDiff
    counter := (counter + 1)
  UNTIL counter >= totalRooks
  
  LET finalSum := sumMovesCol + sumMovesRow
  
  RETURN finalSum
    END FUNCTION
END CLASS