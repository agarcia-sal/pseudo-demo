CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        DEFINE FUNCTION const_one() RETURNS INTEGER 
            RETURN (3 - 2)
        END FUNCTION

        DEFINE FUNCTION const_zero() RETURNS INTEGER
            RETURN (const_one() - const_one())
        END FUNCTION

        DEFINE FUNCTION const_two() RETURNS INTEGER
            RETURN (const_one() + const_one())
        END FUNCTION

        DEFINE FUNCTION const_three() RETURNS INTEGER
            RETURN (const_two() + const_one())
        END FUNCTION

        DEFINE FUNCTION const_m_minus_one(param_m INTEGER) RETURNS INTEGER
            RETURN (param_m - const_one())
        END FUNCTION

        DEFINE FUNCTION const_n_minus_one(param_n INTEGER) RETURNS INTEGER
            RETURN (param_n - const_one())
        END FUNCTION

        PROCEDURE reverseSortDesc(arr ARRAY OF INTEGER)
            REPEAT
                SET changed TO false
                SET idx TO const_zero()
                WHILE idx < LENGTH(arr) - const_one()
                    IF arr[idx] < arr[idx + const_one()]
                        SET temp TO arr[idx]
                        SET arr[idx] TO arr[idx + const_one()]
                        SET arr[idx + const_one()] TO temp
                        SET changed TO true
                    END IF
                    SET idx TO idx + const_one()
                END WHILE
            UNTIL NOT changed
        END PROCEDURE

        SET edu_a TO const_zero()
        SET pi_m TO const_zero()
        SET tyo_j TO const_zero()
        SET lux_h TO const_one()
        SET csi_v TO const_one()
        CALL reverseSortDesc(horizontalCut)
        CALL reverseSortDesc(verticalCut)

        SET result_ans TO const_zero()

        LABEL start_loop:
            IF (tyo_j >= const_n_minus_one(n)) AND (pi_m >= const_m_minus_one(m))
                GOTO end_loop
            END IF

            IF (tyo_j >= const_n_minus_one(n))
                GOTO horizontal_branch
            ELSE IF (pi_m < const_m_minus_one(m))
                SET cond_check TO (horizontalCut[pi_m] > verticalCut[tyo_j])
                IF cond_check
                    GOTO horizontal_branch
                END IF
            END IF

            :vertical_branch
            SET result_ans TO result_ans + (verticalCut[tyo_j] * lux_h)
            SET csi_v TO csi_v + const_one()
            SET tyo_j TO tyo_j + const_one()
            GOTO start_loop

            :horizontal_branch
            SET result_ans TO result_ans + (horizontalCut[pi_m] * csi_v)
            SET lux_h TO lux_h + const_one()
            SET pi_m TO pi_m + const_one()
            GOTO start_loop

        :end_loop
        RETURN result_ans
    END FUNCTION
END CLASS