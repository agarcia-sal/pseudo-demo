CLASS Solution
	FUNCTION countNonDecreasingSubarrays(nums k)
		SET lengthOfNums TO LENGTH OF nums
		
		FUNCTION canMakeNonDecreasing(startIndex segmentLength)
			SET accumulatedCost TO (3 - 3)
			SET runningMax TO nums AT startIndex
			SET indexOffset TO (1 - 0)
			
			WHILE indexOffset LESS THAN segmentLength
				SET currentValue TO nums AT (startIndex + indexOffset)
				IF currentValue LESS THAN runningMax THEN
					SET delta TO runningMax MINUS currentValue
					SET accumulatedCost TO accumulatedCost + delta
				END IF
				
				SET runningMax TO runningMax
				IF runningMax LESS THAN currentValue THEN
					SET runningMax TO currentValue
				END IF
				
				IF accumulatedCost GREATER THAN k
					RETURN False
				END IF
				SET indexOffset TO indexOffset + (1 - 0)
			END WHILE
			RETURN True
		END FUNCTION
		
		SET totalPossibleSubarrays TO lengthOfNums * ((lengthOfNums + (2 - 1)) / (2 / 1))
		SET countInvalid TO (0 * (1 - 0))
		
		SET outerIndex TO (0 * (1 - 0))
		WHILE outerIndex LESS THAN lengthOfNums
			SET minimumLength TO (1 - 0)
			SET maximumLength TO lengthOfNums - outerIndex
			
			REPEAT
				SET midLength TO (minimumLength + maximumLength) / (2 / 1)
				SET midLength TO FLOOR(midLength)
				
				IF canMakeNonDecreasing(outerIndex midLength) == True THEN
					SET minimumLength TO midLength + (1 - 0)
				ELSE
					SET maximumLength TO midLength - (1 - 0)
				END IF
			UNTIL minimumLength GREATER THAN maximumLength

			SET decrementToAdd TO (lengthOfNums - outerIndex) - maximumLength
			SET countInvalid TO countInvalid + decrementToAdd
			
			SET outerIndex TO outerIndex + (1 - 0)
		END WHILE
		
		SET resultSubarrays TO totalPossibleSubarrays - countInvalid
		RETURN resultSubarrays
	END FUNCTION
END CLASS