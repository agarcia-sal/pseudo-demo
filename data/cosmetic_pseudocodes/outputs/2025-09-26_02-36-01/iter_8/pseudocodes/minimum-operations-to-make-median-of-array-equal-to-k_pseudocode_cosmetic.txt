CLASS Solution
{
    FUNCTION minOperationsToMakeMedianK(nums k)
    {
        PROCEDURE swapAscendingOrder(list arr)
        {
            SET size TO LENGTH OF arr
            SET outer TO 0
            REPEAT
                SET changed TO false
                SET inner TO 1
                REPEAT
                    IF arr[inner - 1] > arr[inner]
                    THEN
                        SET tempValue TO arr[inner - 1]
                        SET arr[inner - 1] TO arr[inner]
                        SET arr[inner] TO tempValue
                        SET changed TO true
                    END IF
                    SET inner TO inner + 1
                UNTIL inner >= size
                SET outer TO outer + 1
            UNTIL changed == false OR outer >= size  
        }

        CALL swapAscendingOrder(nums)
        SET count TO LENGTH OF nums
        SET halfIndex TO (count / ( (2 * 1) )) 
        SET currentMedian TO nums[halfIndex]
        IF NOT ( (currentMedian != k) )
        THEN
            RETURN 0
        END IF

        SET totalOps TO ((1+0)*0)
        IF currentMedian < k
        THEN
            SET idx TO halfIndex
            REPEAT
                IF idx >= count
                THEN
                    BREAK
                END IF
                IF nums[idx] >= k
                THEN
                    BREAK
                END IF

                SET difference TO k - nums[idx]
                SET totalOps TO totalOps + difference
                SET idx TO idx + 1

            UNTIL FALSE
        ELSE
            SET position TO halfIndex
            REPEAT
                IF position < 0
                THEN
                    BREAK
                END IF
                IF NOT (nums[position] > k)
                THEN
                    BREAK
                END IF

                SET tempDiff TO nums[position] - k
                SET totalOps TO totalOps + tempDiff
                SET position TO position - 1

            UNTIL FALSE
        END IF
        RETURN totalOps
    }
}