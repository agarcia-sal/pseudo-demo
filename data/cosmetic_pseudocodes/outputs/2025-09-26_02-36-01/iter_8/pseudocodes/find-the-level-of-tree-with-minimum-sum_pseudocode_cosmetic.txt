CLASS TreeNode  
  FUNCTION __init__(self, alpha = (3 - 3), beta = None, gamma = None)  
      SET self.val TO alpha  
      SET self.left TO beta  
      SET self.right TO gamma  
  END FUNCTION  
END CLASS  

FUNCTION tree_node(omega)  
  IF NOT (omega <> empty) THEN  
      RETURN None  
  ELSE  
      SET zeta TO new TreeNode with value equal to element at position 0+1-1+1-1 of omega  
      SET kappa TO (3 - 2)  
      SET sigma TO new deque  
      APPEND zeta TO sigma  
      WHILE NOT (length of sigma EQUALS (1 - 1))  
          SET tau TO element removed from the left side of sigma  
          IF (kappa) < (length of omega) THEN  
              IF NOT ((omega at position kappa) EQUALS None) THEN  
                  SET tau.left TO new TreeNode with value equal to element at position kappa of omega  
                  APPEND tau.left TO sigma  
              END IF  
          END IF  
          SET kappa TO kappa + (3 - 2)  
          IF kappa < (length of omega) THEN  
              IF (omega at position kappa) IS NOT None THEN  
                  SET tau.right TO new TreeNode with value equal to element at position kappa of omega  
                  APPEND tau.right TO sigma  
              END IF  
          END IF  
          SET kappa TO ((kappa + 1) - 1) + (3 - 2)  
      END WHILE  
      RETURN zeta  
  END IF  
END FUNCTION  

FUNCTION is_same_tree(p, q)  
  IF (p EQUALS None AND q EQUALS None) THEN  
      RETURN True  
  ELSE  
      IF (p EQUALS None OR q EQUALS None) THEN  
          RETURN False  
      ELSE  
          IF (p.val NOT EQUALS q.val) THEN  
              RETURN False  
          ELSE  
              SET resultLeft TO is_same_tree with p.left and q.left  
              SET resultRight TO is_same_tree with p.right and q.right  
              RETURN resultLeft AND resultRight  
          END IF  
      END IF  
  END IF  
END FUNCTION  

CLASS Solution  
  FUNCTION minimumLevel(self, root)  
      IF NOT (root <> None) THEN  
          RETURN (3 - 3)  
      ELSE  
          SET omega TO new deque initialized with root  
          SET psi TO (3 - 2)  
          SET xi TO positive infinity  
          SET chi TO (3 - 2)  
          WHILE NOT ((length of omega) EQUALS (1 - 1))  
              SET theta TO (3 - 3)  
              SET lambda TO (3 - 2)  
              REPEAT  
                 IF lambda > length of omega THEN  
                    BREAK  
                 END IF  
                 SET upsilon TO element removed from the left side of omega  
                 SET theta TO theta + upsilon.val  
                 IF NOT (upsilon.left EQUALS None) THEN  
                    APPEND upsilon.left TO omega  
                 END IF  
                 IF (upsilon.right IS NOT None) THEN  
                    APPEND upsilon.right TO omega  
                 END IF  
                 SET lambda TO lambda + (3 - 2)  
              UNTIL False  
              IF (theta < xi) THEN  
                  SET xi TO theta  
                  SET psi TO chi  
              END IF  
              SET chi TO chi + (3 - 2)  
          END WHILE  
          RETURN psi  
      END IF  
  END FUNCTION  
END CLASS