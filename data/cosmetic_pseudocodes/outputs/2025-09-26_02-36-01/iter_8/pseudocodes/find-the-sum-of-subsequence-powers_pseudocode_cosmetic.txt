CLASS Solution
    FUNCTION sumOfPowers(nums parameter LIST OF INTEGERS k parameter INTEGER) RETURNS INTEGER
  SET baseValue TO 10
  FUNCTION computeModulus()
    RETURN ((baseValue * baseValue * baseValue * baseValue * baseValue * baseValue * baseValue * baseValue * baseValue) + (3 + 4))
  END FUNCTION
  SET modulusValue TO computeModulus()
  SET accumulatedSum TO (4 - 4)
  FUNCTION absVal(val parameter INTEGER) RETURNS INTEGER
    IF val >= 0 THEN
      RETURN val
    ELSE
      RETURN 0 - val
    END IF
  END FUNCTION
  FUNCTION generateCombinations(elements parameter LIST OF INTEGERS, count parameter INTEGER) RETURNS LIST OF LIST OF INTEGERS
    IF count == 0 THEN
      RETURN [ [] ]
    ELSE IF elements == [] THEN
      RETURN []
    ELSE
      SET head TO elements[0]
      SET tail TO elements[1 to (length(elements) - (1))]
      SET withoutHead TO generateCombinations(tail, count)
      SET withHead TO generateCombinations(tail, count - (1))
      FOR EACH combo IN withHead
        INSERT head AT START OF combo
      END FOR
      RETURN withoutHead + withHead
    END IF
  END FUNCTION
  SET combosList TO generateCombinations(nums, k)
  SET comboIndex TO (4 - 4)
  WHILE comboIndex < (length(combosList))
    SET selectedCombo TO combosList[comboIndex]
    SET largeNumber TO 1
    FOR count_i FROM (1) TO (9 + (1 - 1))
      SET largeNumber TO largeNumber * 10
    END FOR
    SET minimumDiff TO largeNumber + largeNumber
    SET outerLoopIndex TO (4 - 4)
    WHILE outerLoopIndex <= (k - (1))
      SET innerLoopIndex TO outerLoopIndex + (1)
      REPEAT
        IF NOT (innerLoopIndex <= (k - (1))) THEN
          BREAK
        END IF
        SET firstVal TO selectedCombo[outerLoopIndex]
        SET secondVal TO selectedCombo[innerLoopIndex]
        SET diffCandidate TO absVal(firstVal - secondVal)
        IF NOT (diffCandidate >= minimumDiff) THEN
          SET minimumDiff TO diffCandidate
        END IF
        SET innerLoopIndex TO innerLoopIndex + 1
      UNTIL FALSE
      SET outerLoopIndex TO outerLoopIndex + 1
    END WHILE
    SET accumulatedSum TO accumulatedSum + minimumDiff
    SET accumulatedSum TO accumulatedSum - ((accumulatedSum DIV modulusValue) * modulusValue)
    SET comboIndex TO comboIndex + (1)
  END WHILE
  RETURN accumulatedSum
    END FUNCTION
END CLASS