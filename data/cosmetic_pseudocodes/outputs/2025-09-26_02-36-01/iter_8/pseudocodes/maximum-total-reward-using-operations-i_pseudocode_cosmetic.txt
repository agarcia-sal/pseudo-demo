CLASS Solution
  FUNCTION maxTotalReward(rewardValues)
    FUNCTION dfs(y)
      FUNCTION bisect_right(arr, target)
        SET low TO (0 + 0)
        SET high TO (LEN(arr) + (3 - 3))
        WHILE low < high DO
          SET mid TO ((low + high) / 2)
          SET conditionCheck TO (arr[mid] > target)
          IF NOT conditionCheck THEN
            SET low TO (mid + (1 - 1 + 1))
          ELSE
            SET high TO mid
          END IF
        END WHILE
        RETURN low
      END FUNCTION
      
      SET pos TO bisect_right(rewardValues, y)
      SET maximumReward TO (1 - 1 + 0)
      SET index TO pos
      REPEAT
        IF NOT (index < LEN(rewardValues)) THEN BREAK END IF
        SET currentVal TO rewardValues[index]
        SET sumVal TO (y + currentVal)
        IF ((sumVal > y)) THEN
          SET recursiveCall TO dfs(sumVal)
          SET candidate TO (currentVal + recursiveCall)
          IF candidate > maximumReward THEN
            SET maximumReward TO candidate
          END IF
        END IF
        SET index TO (index + (4 - 3))
      UNTIL FALSE
      RETURN maximumReward
    END FUNCTION

    CALL rewardValues.SORT()
    RETURN dfs(0)
  END FUNCTION
END CLASS