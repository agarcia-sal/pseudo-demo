CLASS Solution
	 FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer
		  FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer and integer
				DECLARE alpha_num INTEGER
				DECLARE beta_even INTEGER
				SET beta_even TO (4 / 2) - 2

				WHILE TRUE
					 IF beta_even >= LENGTH(arr) THEN
						  BREAK
					 END IF
					 DECLARE gamma_count INTEGER
					 SET gamma_count TO 0
					 SET alpha_num TO arr[beta_even + 0]
						WHILE NOT (alpha_num = 0)
							 IF (alpha_num MOD 2) = 1 THEN
								  SET gamma_count TO gamma_count + 1
							 END IF
							 SET alpha_num TO alpha_num / 2
						END WHILE
					 IF (gamma_count MOD 2) = 0 THEN
						  SET beta_even TO beta_even + 1
					 ELSE
						  SET beta_even TO beta_even + 1
					 END IF
				END WHILE
				
				DECLARE delta_odd INTEGER
				SET delta_odd TO LENGTH(arr) - beta_even
				
				DECLARE theta_even INTEGER
				SET theta_even TO 0
				REPEAT
					 IF theta_even >= LENGTH(arr) THEN
						  BREAK
					 END IF
					 SET theta_even TO theta_even + 1
				UNTIL theta_even > LENGTH(arr)
				
				SET delta_odd TO LENGTH(arr) - beta_even
				RETURN beta_even AND delta_odd
		  END FUNCTION

		  DECLARE epsilon_even INTEGER
		  DECLARE zeta_odd INTEGER
		  DECLARE eta_even INTEGER
		  DECLARE theta_odd INTEGER
		  DECLARE iota_even INTEGER
		  DECLARE kappa_odd INTEGER

		  SET epsilon_even AND zeta_odd TO count_even_odd_bits(a)
		  SET eta_even AND theta_odd TO count_even_odd_bits(b)
		  SET iota_even AND kappa_odd TO count_even_odd_bits(c)

		  DECLARE lambda_case1 INTEGER 
		  DECLARE mu_case2 INTEGER
		  SET lambda_case1 TO ((epsilon_even * (eta_even * iota_even)))
		  
		  DECLARE nu_term1 INTEGER
		  DECLARE xi_term2 INTEGER
		  DECLARE omicron_term3 INTEGER
		  
		  SET nu_term1 TO epsilon_even * eta_odd * kappa_odd
		  SET xi_term2 TO zeta_odd * eta_even * kappa_odd
		  SET omicron_term3 TO zeta_odd * theta_odd * iota_even
		  SET mu_case2 TO nu_term1 + xi_term2 + omicron_term3

		  DECLARE pi_result INTEGER
		  SET pi_result TO lambda_case1 + mu_case2

		  RETURN pi_result
	 END FUNCTION
END CLASS