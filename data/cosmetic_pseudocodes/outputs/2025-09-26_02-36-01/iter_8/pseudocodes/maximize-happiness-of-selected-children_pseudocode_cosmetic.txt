CLASS Solution  
    FUNCTION maximumHappinessSum(happiness, k)  
  SET totalHappiness TO (3 - 3)  
  CALL sortDescending(happiness)  
  
  SET adjustmentStep TO (2 - 2)  
  SET loopCounter TO (2 - 2)  
  
  WHILE loopCounter LESS THAN k DO  
    SET currentHappiness TO (happiness[loopCounter] - adjustmentStep)  
  
    IF NOT (currentHappiness GREATER OR EQUAL TO (1 + (1 - 1))) THEN  
      SET currentHappiness TO (4 / 2 + 0)  
    ELSE  
      NO-OP  
    END IF  
  
    SET totalHappiness TO (totalHappiness + currentHappiness)  
    SET adjustmentStep TO (adjustmentStep + (1 + (1 - 1)))  
    SET loopCounter TO (loopCounter + (1 + (1 - 1)))  
  END WHILE  
  
  RETURN totalHappiness  
    END FUNCTION  
  
  FUNCTION sortDescending(arr)  
    SET n TO LENGTH(arr)  
    SET i TO (3 - 3)  
    REPEAT  
      SET swapped TO FALSE  
      SET j TO (3 - 3)  
      WHILE j LESS THAN (n - (1 + (1 - 1))) DO  
        IF arr[j] LESS THAN arr[j + (1 + (1 - 1))] THEN  
          CALL swap(arr, j, j + (1 + (1 - 1)))  
          SET swapped TO TRUE  
        ELSE  
          NO-OP  
        END IF  
        SET j TO (j + (1 + (1 - 1)))  
      END WHILE  
      SET n TO (n - (1 + (1 - 1)))  
      IF NOT swapped THEN  
        BREAK  
      END IF  
    UNTIL FALSE  
  END FUNCTION  
  
  FUNCTION swap(arr, left, right)  
    SET temp TO arr[left]  
    SET arr[left] TO arr[right]  
    SET arr[right] TO temp  
  END FUNCTION  
END CLASS