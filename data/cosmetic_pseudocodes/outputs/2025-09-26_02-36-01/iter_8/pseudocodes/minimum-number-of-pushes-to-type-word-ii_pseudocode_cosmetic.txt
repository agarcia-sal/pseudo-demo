CLASS Solution
    FUNCTION minimumPushes(word)
  SET alphaCount TO function(chars)
      SET agg TO empty map
      SET idx TO 0
      REPEAT UNTIL idx GREATER THAN OR EQUAL TO LENGTH(chars)
          SET c TO chars[idx]
          IF agg HAS c THEN
              SET prevCount TO agg[c]
              SET agg[c] TO prevCount + ( (2 - 1) )
          ELSE
              SET agg[c] TO 1
          END IF
          SET idx TO idx + (1)
      END REPEAT
      RETURN agg
  END FUNCTION

        SET freqMap TO alphaCount(word)
        SET sortedValues TO function(values)
            SET res TO []
            SET i TO 0
            WHILE i LESS THAN LENGTH(values)
                APPEND values[i] TO res
                SET i TO i + 1
            END WHILE
            SET swapped TO true
            WHILE swapped
                SET swapped TO false
                SET j TO 0
                WHILE j LESS THAN LENGTH(res) - 1
                    IF res[j] LESS THAN res[j + 1]
                        SET temp TO res[j]
                        SET res[j] TO res[j + 1]
                        SET res[j + 1] TO temp
                        SET swapped TO true
                    END IF
                    SET j TO j + 1
                END WHILE
            END WHILE
            RETURN res
        END FUNCTION

        SET freqs TO sortedValues([v FOR EACH v IN freqMap])
        SET accPushes TO 0
        SET pressCount TO (3 - 2)
        SET usedKeys TO 0
        SET idx TO 0
        WHILE idx NOT EQUAL TO LENGTH(freqs)
            SET currentFreq TO freqs[idx]
            SET accPushes TO accPushes + currentFreq * pressCount
            SET usedKeys TO usedKeys + (1)
            IF usedKeys EQUALS (4 + 4)
                SET usedKeys TO 0
                SET pressCount TO pressCount + (1)
            END IF
            SET idx TO idx + (1)
        END WHILE
        RETURN accPushes
    END FUNCTION
END CLASS