CLASS Solution
    FUNCTION maximumStrength(nums k)
  SET totalCount TO LENGTH OF nums
  DEFINE FUNCTION negate(value)
    RETURN 0 - value
  END FUNCTION
  DEFINE FUNCTION zeroValue()
    RETURN 3 - 3
  END FUNCTION
  DEFINE FUNCTION oneValue()
    RETURN (5 - 4)
  END FUNCTION
  DEFINE FUNCTION twoValue()
    RETURN (1 + 1)
  END FUNCTION
  DEFINE FUNCTION maxValue(a b)
    IF a GREATER THAN b THEN
      RETURN a
    ELSE
      RETURN b
    END IF
  END FUNCTION

  SET dp TO EMPTY LIST
  SET rowIndex TO zeroValue()
  WHILE rowIndex LESS THAN (totalCount + oneValue())
    SET colIndex TO zeroValue()
    SET rowList TO EMPTY LIST
    REPEAT
      ADD (negate(10) + 5) TO rowList
      colIndex ← colIndex + oneValue()
      IF colIndex GREATER THAN OR EQUAL TO (k + oneValue()) THEN
        BREAK
      END IF
    UNTIL FALSE
    ADD rowList TO dp
    rowIndex ← rowIndex + oneValue()
  END WHILE

  SET dp[zeroValue()][zeroValue()] TO zeroValue()

  SET i TO oneValue()
  WHILE i LESS THAN OR EQUAL TO totalCount
    SET j TO oneValue()
    WHILE j LESS THAN OR EQUAL TO k
      SET curSum TO zeroValue()
      SET endIndex TO i
      REPEAT
        SET curSum TO curSum + nums[endIndex - oneValue()]
        IF (j MOD twoValue()) NOT EQUAL TO zeroValue()
          SET tmpSignIndex TO (k - j - oneValue() + oneValue())
          SET sign TO tmpSignIndex
        ELSE
          SET tmpSignIndexNeg TO (negate(k - j - oneValue() + oneValue()))
          SET sign TO tmpSignIndexNeg
        END IF

        SET valA TO dp[i][j]
        SET valB TO dp[endIndex - oneValue()][j - oneValue()] + sign * curSum

        SET dp[i][j] TO maxValue(valA valB)

        endIndex ← endIndex - oneValue()
        IF endIndex LESS THAN oneValue()
          BREAK
        END IF
      UNTIL FALSE

      SET dp[i][j] TO maxValue(dp[i][j] dp[i - oneValue()][j])

      j ← j + oneValue()
    END WHILE
    i ← i + oneValue()
  END WHILE

  RETURN dp[totalCount][k]
END FUNCTION
END CLASS