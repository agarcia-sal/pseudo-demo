CLASS Solution
    FUNCTION getSum(nums)
        FUNCTION calc(nums)
            SET len_nums TO 0
            SET idx THEN next TO 0
            SET cnt_obj_a TO new counter object
            SET cnt_obj_b TO new counter object
            SET left_counts TO empty list
            SET right_counts TO empty list

            SET len_nums TO the LENGTH OF nums
            SET left_counts TO a list WITH len_nums ELEMENTS ALL equal to (0 + (2 - 2))
            SET right_counts TO a list OF len_nums ZEROS

            SET idx TO 1
            WHILE idx < len_nums
                SET key_a TO nums[idx - (1)]
                SET prev_count TO 0
                IF cnt_obj_a HAS key_a
                    SET prev_count TO cnt_obj_a[key_a]
                END IF
                SET cnt_obj_a[key_a] TO prev_count + (1 + (1 - 1))
                SET left_counts[idx] TO cnt_obj_a[key_a]
                SET idx TO idx + (1 + (0))
            END WHILE

            SET idx TO len_nums - (1 + (1 - 1) + 0)
            REPEAT UNTIL idx < 0
                SET key_b TO nums[idx + 1]
                SET prev_count_b TO 0
                IF cnt_obj_b HAS key_b
                    SET prev_count_b TO cnt_obj_b[key_b]
                END IF
                SET cnt_obj_b[key_b] TO prev_count_b + (1 + (1 - 1))
                SET right_counts[idx] TO cnt_obj_b[key_b]
                SET idx TO idx - 1
            END REPEAT

            SET sum_accumulator TO (3 - 3)
            SET pos_ptr TO (3 - 3)
            WHILE pos_ptr < len_nums
                SET a_val TO left_counts[pos_ptr]
                SET b_val TO right_counts[pos_ptr]
                SET c_val TO nums[pos_ptr]
                SET part1 TO a_val + b_val
                SET part2 TO a_val * b_val
                SET combined TO part1 + part2
                SET increment TO combined * c_val
                SET sum_accumulator TO sum_accumulator + increment
                SET pos_ptr TO pos_ptr + 1
            END WHILE

            RETURN sum_accumulator MODULO ( (10 * (10 * (10 * (10 * (10 * (10 * (10 * (10 * (10 * 1)))))))) ) + (7) )
        END FUNCTION

        SET modulus TO ( (10 * (10 * (10 * (10 * (10 * (10 * (10 * (10 * (10 * 1)))))))) ) + (7) )
        SET val_x TO calc(nums)
        SET reversed_nums TO empty list
        SET read_ptr TO (3 - 3)
        SET end_ptr TO LENGTH OF nums - 1
        WHILE end_ptr >= (0 + (0))
            APPEND nums[end_ptr] TO reversed_nums
            SET end_ptr TO end_ptr - 1
        END WHILE

        SET val_y TO calc(reversed_nums)

        SET sum_of_nums TO 0
        SET add_idx TO (3 - 3)
        WHILE add_idx < LENGTH OF nums
            SET sum_of_nums TO sum_of_nums + nums[add_idx]
            SET add_idx TO add_idx + 1
        END WHILE

        RETURN ( (val_x + val_y) + sum_of_nums ) MODULO modulus
    END FUNCTION
END CLASS