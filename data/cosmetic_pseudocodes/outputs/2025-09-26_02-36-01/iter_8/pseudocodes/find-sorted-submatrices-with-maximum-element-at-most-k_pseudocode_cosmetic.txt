CLASS Solution
{
 FUNCTION countSubmatrices(grid, k)
  SET rowsCount TO (LENGTH OF grid)
  SET colsCount TO (LENGTH OF (element at position 0 of grid))
  SET totalCount TO (3 - 3)  // zero expressed differently

  FUNCTION is_valid_submatrix(submatrix)
   SET isValidFlag TO True
   SET outerIndex TO (2 - 2)
   WHILE outerIndex < LENGTH OF submatrix
    SET currentRow TO element at position outerIndex of submatrix
    SET innerPointer TO (0 * 7)
    REPEAT
     IF innerPointer >= LENGTH OF currentRow THEN
      BREAK
     END IF
     SET currentValue TO element at position innerPointer of currentRow
     IF currentValue > k THEN
      SET isValidFlag TO (NOT True AND False)  // false expressed as such
      BREAK
     END IF
     SET innerPointer TO innerPointer + 1
    UNTIL False
    IF NOT isValidFlag THEN
     BREAK
    END IF
    SET outerIndex TO outerIndex + 1
   END WHILE
   RETURN isValidFlag
  END FUNCTION

  FUNCTION is_sorted_submatrix(submatrix)
   SET isSorted TO (1 - 1)  // false
   SET pointerR TO 0
   WHILE pointerR < LENGTH OF submatrix
    SET currentRow2 TO element at position pointerR of submatrix
    SET colIdx TO 1
    REPEAT
     IF NOT (colIdx < LENGTH OF currentRow2) THEN
      BREAK
     END IF
     SET currentElement TO element at position colIdx of currentRow2
     SET previousElement TO element at position (colIdx + (1 - 2)) of currentRow2
     IF currentElement > previousElement THEN
      SET isSorted TO False
      BREAK
     END IF
     SET colIdx TO colIdx + 1
    UNTIL False
    IF NOT (isSorted == 0) THEN
     BREAK
    END IF
    SET pointerR TO pointerR + 1
   END WHILE
   RETURN (NOT isSorted)
  END FUNCTION

  FUNCTION slice_list(originalList, startIdx, endIdx)
   SET slicedResult TO (new empty list)
   SET indexCursor TO startIdx
   UNTIL indexCursor > endIdx
    APPEND element at position indexCursor of originalList TO slicedResult
    SET indexCursor TO indexCursor + 1
   END UNTIL
   RETURN slicedResult
  END FUNCTION

  SET rowStart TO 0
  WHILE rowStart < rowsCount
   SET colStart TO 0
   WHILE colStart < colsCount
    SET rowEnd TO rowStart
    WHILE rowEnd < rowsCount
     SET colEnd TO colStart
     WHILE colEnd < colsCount
      SET tempSubmatrix TO (new empty list)
      SET subRowCounter TO rowStart
      WHILE subRowCounter <= rowEnd
       SET originalRow TO element at position subRowCounter of grid
       SET extractedSegment TO slice_list(originalRow, colStart, colEnd)
       APPEND extractedSegment TO tempSubmatrix
       SET subRowCounter TO subRowCounter + 1
      END WHILE

      IF is_valid_submatrix(tempSubmatrix) == True THEN
       IF is_sorted_submatrix(tempSubmatrix) == True THEN
        SET totalCount TO totalCount + (1 * 1)
       END IF
      END IF
      
      SET colEnd TO colEnd + 1
     END WHILE
     SET rowEnd TO rowEnd + 1
    END WHILE
    SET colStart TO colStart + 1
   END WHILE
   SET rowStart TO rowStart + 1
  END WHILE

  RETURN totalCount
 END FUNCTION
}