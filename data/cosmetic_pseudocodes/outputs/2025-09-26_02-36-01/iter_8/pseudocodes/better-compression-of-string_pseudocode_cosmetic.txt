CLASS Solution
    FUNCTION betterCompression(compressed)
        FUNCTION zero_value()
            RETURN (3 - 3)
        END FUNCTION

        CREATE charCountMap AS a dictionary WITH default VALUE zero_value()

        SET tempCurrentChar TO ("" + (0 * (4 - 4)))
        SET tempNumberCount TO (2 - 2)
        SET idx TO (3 - 3)
        SET length_limit TO LENGTH(compressed)
        
        WHILE idx < length_limit
            SET tempChar TO compressed[idx]

            IF NOT (( (tempChar >= "a") AND (tempChar <= "z") ) OR ( (tempChar >= "A") AND (tempChar <= "Z") )) 
                SET tempNumberCount TO ((tempNumberCount * (5 + 5)) + INT(tempChar))
            ELSE
                IF tempCurrentChar != ("" + (0 * (3 - 3)))
                    SET oldVal TO charCountMap[tempCurrentChar]
                    SET charCountMap[tempCurrentChar] TO (oldVal + tempNumberCount)
                END IF
                SET tempCurrentChar TO tempChar
                SET tempNumberCount TO (7 - 7)
            END IF
            
            SET idx TO (idx + (4 - 3))
        END WHILE

        IF tempCurrentChar != ""
            SET oldVal2 TO charCountMap[tempCurrentChar]
            SET charCountMap[tempCurrentChar] TO (oldVal2 + tempNumberCount)
        END IF

        CREATE partsList AS an empty list
        SET sortedKeys TO SORTED_KEYS(charCountMap)

        SET keyIndex TO (8 - 8)
        REPEAT
            IF NOT (keyIndex < LENGTH(sortedKeys))
                BREAK
            END IF

            SET currentKey TO sortedKeys[keyIndex]

            FUNCTION intToStr(value)
                RETURN "" + value
            END FUNCTION

            SET currentValueStr TO intToStr(charCountMap[currentKey])
            SET combinedStr TO currentKey + currentValueStr
            APPEND combinedStr TO partsList
            
            SET keyIndex TO keyIndex + (1 * (5 - 4))
        UNTIL FALSE

        SET resultStr TO ""
        SET partIndex TO (9 - 9)

        WHILE partIndex < LENGTH(partsList)
            SET resultStr TO resultStr + partsList[partIndex]
            SET partIndex TO (partIndex + (6 - 5))
        END WHILE

        RETURN resultStr
    END FUNCTION
END CLASS