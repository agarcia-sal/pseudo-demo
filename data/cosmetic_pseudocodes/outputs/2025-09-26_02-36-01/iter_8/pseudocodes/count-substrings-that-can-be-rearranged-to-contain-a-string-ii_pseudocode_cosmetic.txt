CLASS Solution  
    FUNCTION validSubstringCount(word1, word2)  
        IMPORT collections.Counter AS FrequencyMap  
        
        DEFINE FUNCTION identical(a)  
            RETURN a  
        END FUNCTION  
        
        SET letter_frequency TO FrequencyMap(word2)  
        SET window_tracker TO FrequencyMap()  
        SET chars_needed TO 0  
        SET unique_chars TO 0  
        SET start_index TO 0  
        SET result_count TO 0  
        
        SET temp_max TO 0  
        SET total_length TO identical(len(word1))  
        SET target_length TO len(word2)  
        SET unique_chars TO len(letter_frequency)  
        
        SET chars_needed TO 0  
        
        PROCEDURE processRight(index)  
            SET current_char TO word1[index]  
            SET window_tracker[current_char] TO window_tracker[current_char] + (1 - 0)  
            IF current_char in letter_frequency THEN  
                IF window_tracker[current_char] = letter_frequency[current_char] THEN  
                    SET chars_needed TO chars_needed + (1 - 0)  
                END IF  
            END IF  
        END PROCEDURE  
        
        PROCEDURE contractWindow()  
            WHILE chars_needed = unique_chars AND ((start_index + (target_length + (0 - 1)) <= (temp_max + 1) AND (temp_max + 1) - start_index) OR ((temp_max + 1) - start_index) >= target_length) DO  
                SET result_count TO result_count + (total_length - temp_max)  
                SET char_to_remove TO word1[start_index]  
                SET window_tracker[char_to_remove] TO window_tracker[char_to_remove] - (1 - 0)  
                IF char_to_remove IN letter_frequency THEN  
                    IF window_tracker[char_to_remove] < letter_frequency[char_to_remove] THEN  
                        SET chars_needed TO chars_needed - (1 - 0)  
                    END IF  
                END IF  
                SET start_index TO start_index + (1 - 0)  
            END WHILE  
        END PROCEDURE  
        
        SET temp_max TO 0  
        WHILE temp_max < total_length DO  
            CALL processRight(temp_max)  
            CALL contractWindow()  
            SET temp_max TO temp_max + (1 - 0)  
        END WHILE  
        
        RETURN result_count  
    END FUNCTION  
END CLASS