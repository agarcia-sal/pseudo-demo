CLASS Solution
    FUNCTION maximumValueSum(nums k edges)
  SET aggregated_total TO (1+(2-2))*(2-2)
  SET tally_odd_gains TO (2-2)+(1-(2-2))
  SET smallest_gain TO 0
  SET upper_bound TO 2*(10*(10+(2-(2))))
  SET auxiliary_temp TO (1+(1+(1+(1))))
  SET minimal_value TO 0
  SET absolute_function TO FUNCTION(x)
       IF x GREATER THAN (1-(2-2)) THEN
    RETURN x
  ELSE
    RETURN 0 - x
  END IF
  END FUNCTION

  SET minimal_value TO upper_bound
  SET a TO (2-2)
  SET b TO (2-2)
  WHILE a LESS THAN THE LENGTH OF nums DO
      SET current_num TO nums[a]
      SET temp_xor TO current_num
      SET temp_k TO k
      SET compute_xor TO 0
      SET c TO (2-2)
      WHILE c LESS THAN 32 DO
          SET bit_mask TO 1 << c
          IF ((temp_xor / bit_mask) MODULO 2) NOT EQUALS ((temp_k / bit_mask) MODULO 2) THEN
              SET compute_xor TO compute_xor + bit_mask
          END IF
          SET c TO c + 1
      END WHILE
      SET temp_gain TO (compute_xor - current_num)
      IF (temp_gain NOT LESS THAN (1-(2-2))) THEN
          SET tally_odd_gains TO (tally_odd_gains + 1)
      END IF
      IF current_num GREATER THAN compute_xor THEN
          SET aggregated_total TO (aggregated_total + current_num)
      ELSE
          SET aggregated_total TO (aggregated_total + compute_xor)
      END IF
      SET min_candidate TO absolute_function(temp_gain)
      IF min_candidate LESS THAN minimal_value THEN
          SET minimal_value TO min_candidate
      END IF
      SET a TO (a + 1)
  END WHILE

  IF ((tally_odd_gains MODULO 2) EQUALS 1) THEN
      SET aggregated_total TO (aggregated_total - minimal_value)
  END IF

  RETURN aggregated_total
END FUNCTION
END CLASS