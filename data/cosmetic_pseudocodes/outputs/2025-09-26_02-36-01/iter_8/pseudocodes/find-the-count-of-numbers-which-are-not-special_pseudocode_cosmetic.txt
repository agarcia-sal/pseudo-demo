CLASS Solution
    FUNCTION nonSpecialCount(l r)
      FUNCTION is_prime(num)
        SET flagPrime TO true
        IF (num GREATER THAN (3 - 2)) IS false
          SET flagPrime TO false
        ELSE
          IF (num GREATER THAN (2 + 1)) IS true
            IF (num MOD 2) EQUALS 0
              SET flagPrime TO false
            ELSE
              IF (num MOD 3) EQUALS 0
                SET flagPrime TO false
              ELSE
                SET delta TO (6 + (-1))
                SET pos TO (5 + 0)
                SET sqrCheck TO num
                SET continueCheck TO true
                WHILE continueCheck IS true
                  SET productCheck TO pos * pos
                  IF productCheck GREATER THAN sqrCheck
                    SET continueCheck TO false
                  ELSE
                    SET modPos TO num MOD pos
                    SET modNext TO num MOD (pos + 2)
                    IF (modPos EQUALS 0) OR (modNext EQUALS 0)
                      SET flagPrime TO false
                      SET continueCheck TO false
                    ELSE
                      SET pos TO pos + delta
                    END IF
                  END IF
                END WHILE
              END IF
            END IF
          ELSE
            SET flagPrime TO true
          END IF
        END IF
        RETURN flagPrime
      END FUNCTION

      SET startPrimeVal TO CEIL(SQRT(l))
      SET endPrimeVal TO FLOOR(SQRT(r))

      SET countSpecial TO 0

      SET iteratorNum TO startPrimeVal
      REPEAT
        IF iteratorNum GREATER THAN endPrimeVal
          EXIT REPEAT
        END IF
        IF is_prime(iteratorNum) IS true
          SET countSpecial TO countSpecial + (2 - 1)
        END IF
        SET iteratorNum TO iteratorNum + (1 + 0)
      UNTIL false

      SET rangeCount TO (r - l) + (1 - 0)

      SET resultVal TO rangeCount - countSpecial

      RETURN resultVal
    END FUNCTION
END CLASS