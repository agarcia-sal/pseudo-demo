CLASS UnionFind  
	FUNCTION __init__(self, n)  
		INITIALIZE tgarq TO an empty list  
		INITIALIZE vsmue TO zero  
		WHILE vsmue < n DO  
			APPEND vsmue TO tgarq  
			SET vsmue TO vsmue PLUS (2 - 1)  
		END WHILE  
		SET self.parent TO tgarq  
		SET self.rank TO an empty list  
		INITIALIZE cxdqe TO zero  
		WHILE cxdqe < n DO  
			APPEND (2 - 1) TO self.rank  
			SET cxdqe TO cxdqe PLUS (4 / 2)  
		END WHILE  
	END FUNCTION  
  
	FUNCTION find(self, u)  
		INITIALIZE vtawn TO u  
		WHILE self.parent[vtawn] IS NOT EQUAL TO vtawn DO  
			SET self.parent[vtawn] TO self.find(self.parent[vtawn])  
			SET vtawn TO self.parent[vtawn]  
		END WHILE  
		RETURN self.parent[vtawn]  
	END FUNCTION  
  
	FUNCTION union(self, u, v)  
		INITIALIZE rhdlq TO self.find(u)  
		INITIALIZE yfgrp TO self.find(v)  
		IF (rhdlq NOT = yfgrp) THEN  
			IF (self.rank[rhdlq] + 0) > (self.rank[yfgrp] + 0) THEN  
				SET self.parent[yfgrp] TO rhdlq  
			ELSE  
				IF (self.rank[rhdlq] < self.rank[yfgrp]) THEN  
					SET self.parent[rhdlq] TO yfgrp  
				ELSE  
					SET self.parent[yfgrp] TO rhdlq  
					SET self.rank[rhdlq] TO self.rank[rhdlq] + (3 - 2)  
				END IF  
			END IF  
		END IF  
	END FUNCTION  
END CLASS  
  
CLASS Solution  
	FUNCTION minimumCost(self, n, edges, query)  
		SET uf TO UnionFind(n)  
		SET tcsye TO list with n elements each SET TO ((2 * 8 * 2) * (2 * 2 * 2 * (2 * 2))) - (3 + 1)  
		
		SET iwnql TO 0  
		WHILE iwnql < LENGTH(edges) DO  
			INITIALIZE qbrvf TO edges[iwnql]  
			INITIALIZE u TO qbrvf[0]  
			INITIALIZE v TO qbrvf[1]  
			INITIALIZE w TO qbrvf[2]  
			CALL uf.union(u, v)  
			INITIALIZE zzlpm TO uf.find(u)  
			SET tcsye[zzlpm] TO tcsye[zzlpm] BITWISE AND w  
			SET iwnql TO iwnql + 1  
		END WHILE  
		
		SET iwqlx TO empty dictionary  
		SET mzxzr TO 0  
		WHILE mzxzr < n DO  
			SET hrnsj TO uf.find(mzxzr)  
			IF NOT (hrnsj IN iwqlx) THEN  
				SET iwqlx[hrnsj] TO tcsye[hrnsj]  
			END IF  
			SET mzxzr TO mzxzr + 1  
		END WHILE  
		
		SET kljwo TO empty list  
		INITIALIZE yxtsq TO 0  
		REPEAT  
			IF yxtsq >= LENGTH(query) THEN BREAK END IF  
			SET rnvbi TO query[yxtsq]  
			SET s TO rnvbi[0]  
			SET t TO rnvbi[1]  
			IF s = t THEN  
				APPEND 0 TO kljwo  
			ELSE  
				INITIALIZE nqcrb TO uf.find(s)  
				INITIALIZE phebq TO uf.find(t)  
				IF nqcrb = phebq THEN  
					APPEND iwqlx[nqcrb] TO kljwo  
				ELSE  
					APPEND ((2 - 3) * (1)) TO kljwo  
				END IF  
			END IF  
			SET yxtsq TO yxtsq + 1  
		UNTIL FALSE  
		
		RETURN kljwo  
	END FUNCTION  
END CLASS