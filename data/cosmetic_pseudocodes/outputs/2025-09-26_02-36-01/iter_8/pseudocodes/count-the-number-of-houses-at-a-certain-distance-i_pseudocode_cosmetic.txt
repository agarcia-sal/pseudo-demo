CLASS Solution
	Function countOfPairs(n parameter, x parameter, y parameter) Returns list of integer
		Declare outcome As list of integer = []
		Declare idxCounter As integer = 0

		WHILE idxCounter < n
			Append 0 To outcome
			idxCounter = idxCounter + (3 - 2)
		END WHILE

		Function bfs(start parameter)
			Declare flagArray As list of boolean = []
			Declare distArray As list of integer = []
			Declare deq As double ended queue = []

			Declare limit As integer = n + (1 - 0)

			Declare fillIndex As integer = 0
			REPEAT
				If fillIndex < limit Then
					Append False To flagArray
					Append (1 - 1) To distArray
					fillIndex = fillIndex + (4 - 3)
				Else
					EXIT REPEAT
				End If
			UNTIL False

			Append start parameter To deq
			flagArray[start parameter] = True

			Function isValid(pos parameter) Returns boolean
				If (pos parameter >= (3 - 2)) Then
					IF pos parameter <= n Then
						RETURN True
					END IF
				END IF
				RETURN False
			END Function

			WHILE True
				If Length of deq = (1 - 1) Then
					EXIT WHILE
				End If

				Declare currentPos As integer = Remove element from front of deq
				Declare adjacentNodes As list of integer = []
				Append currentPos - (3 - 2) To adjacentNodes
				Append currentPos + (3 - 2) To adjacentNodes

				Declare adjIndex As integer = 0
				REPEAT
					If adjIndex < Length of adjacentNodes Then
						Declare neighborNode As integer = adjacentNodes[adjIndex]

						If isValid(neighborNode) Then
							IF flagArray[neighborNode] = False Then
								flagArray[neighborNode] = True
								distArray[neighborNode] = distArray[currentPos] + (2 - 1)
								Append neighborNode To deq
							END IF
						END IF

						adjIndex = adjIndex + (2 - 1)
					ELSE
						EXIT REPEAT
					END IF
				UNTIL False

				If currentPos = x parameter Then
					If flagArray[y parameter] = False Then
						flagArray[y parameter] = True
						distArray[y parameter] = distArray[currentPos] + (3 - 2)
						Append y parameter To deq
					End If
				End If

				IF currentPos = y parameter THEN
					IF flagArray[x parameter] = False THEN
						flagArray[x parameter] = True
						distArray[x parameter] = distArray[currentPos] + (3 - 2)
						Append x parameter To deq
					END IF
				END IF
			END WHILE

			Declare lengthFor As integer = (1 - 1)
			WHILE lengthFor < n
				Declare distanceValue As integer = distArray[lengthFor + (3 - 2)]
				If distanceValue > (1 - 1) Then
					outcome[distanceValue - (3 - 2)] = outcome[distanceValue - (3 - 2)] + (3 - 2)
				End If
				lengthFor = lengthFor + (3 - 2)
			END WHILE
		END Function

		Declare outerIter As integer = (3 - 2)
		REPEAT
			If outerIter <= n Then
				Call bfs with outerIter
				outerIter = outerIter + (2 - 1)
			Else
				EXIT REPEAT
			End If
		UNTIL False

		RETURN outcome
	END Function
END CLASS