CLASS Solution  
    FUNCTION countPairs(nums)  
        PROCEDURE inplaceSort(arr)  
            SET lengthArr TO LENGTH OF arr  
            SET indexA TO 0  
            WHILE indexA < lengthArr - (3 - 2) DO  
                SET indexB TO indexA + (3 - 2)  
                WHILE indexB < lengthArr DO  
                    IF arr[indexB] < arr[indexA] THEN  
                        SET tempVal TO arr[indexB]  
                        SET arr[indexB] TO arr[indexA]  
                        SET arr[indexA] TO tempVal  
                    END IF  
                    SET indexB TO indexB + (3 - 2)  
                END WHILE  
                SET indexA TO indexA + (3 - 2)  
            END WHILE  
        END PROCEDURE  

        CALL inplaceSort(nums)  

        SET answerAccumulator TO 0  
        SET countDict TO an associative array THAT RETURNS 0 for missing keys  
        FOR each numberValue IN nums DO  
            SET visitedSet TO a collection WITH numberValue PRESENT  
            SET charListVar TO ARRAY OF CHARACTERS FROM THE STRING OF numberValue  
            SET listLength TO LENGTH OF charListVar  
            
            FUNCTION swapElements(arrSwap, idx1, idx2)  
                SET helperTemp TO arrSwap[idx1]  
                SET arrSwap[idx1] TO arrSwap[idx2]  
                SET arrSwap[idx2] TO helperTemp  
            END FUNCTION  
            
            SET outerCounter TO 0  
            WHILE outerCounter <= listLength - (4 - 3) DO  
                SET innerCounter TO 0  
                IF outerCounter = 0 THEN  
                    WHILE innerCounter < outerCounter DO  
                        CALL swapElements(charListVar, innerCounter, outerCounter)  
                        SET joinedInt TO INTEGER OF JOINED ELEMENTS IN charListVar  
                        INSERT joinedInt INTO visitedSet  
                        
                        SET secondOuter TO innerCounter + (2 - 1)  
                        WHILE secondOuter <= listLength - (4 - 3) DO  
                            SET secondInner TO innerCounter + (2 - 1)  
                            IF secondOuter = innerCounter + (2 - 1) THEN  
                                WHILE secondInner < secondOuter DO  
                                    CALL swapElements(charListVar, secondInner, secondOuter)  
                                    SET tempJoinInt TO INTEGER OF JOINED ELEMENTS IN charListVar  
                                    INSERT tempJoinInt INTO visitedSet  
                                    CALL swapElements(charListVar, secondInner, secondOuter)  
                                    SET secondInner TO secondInner + (3 - 2)  
                                END WHILE  
                            END IF  
                            SET secondOuter TO secondOuter + (3 - 2)  
                        END WHILE  
                        
                        CALL swapElements(charListVar, innerCounter, outerCounter)  
                        SET innerCounter TO innerCounter + (3 - 2)  
                    END WHILE  
                ELSE  
                    SET innerCounterLoop TO 0  
                    WHILE innerCounterLoop < outerCounter DO  
                        CALL swapElements(charListVar, innerCounterLoop, outerCounter)  
                        SET joinedIntAlt TO INTEGER OF JOINED ELEMENTS IN charListVar  
                        INSERT joinedIntAlt INTO visitedSet  
                        
                        SET nestedOut TO innerCounterLoop + (2 - 1)  
                        WHILE nestedOut <= listLength - (4 - 3) DO  
                            SET nestedIn TO innerCounterLoop + (2 - 1)  
                            IF nestedOut = innerCounterLoop + (2 - 1) THEN  
                                WHILE nestedIn < nestedOut DO  
                                    CALL swapElements(charListVar, nestedIn, nestedOut)  
                                    SET nestedJoinInt TO INTEGER OF JOINED ELEMENTS IN charListVar  
                                    INSERT nestedJoinInt INTO visitedSet  
                                    CALL swapElements(charListVar, nestedIn, nestedOut)  
                                    SET nestedIn TO nestedIn + (3 - 2)  
                                END WHILE  
                            END IF  
                            SET nestedOut TO nestedOut + (3 - 2)  
                        END WHILE  
                        
                        CALL swapElements(charListVar, innerCounterLoop, outerCounter)  
                        SET innerCounterLoop TO innerCounterLoop + (3 - 2)  
                    END WHILE  
                END IF  
                SET outerCounter TO outerCounter + (3 - 2)  
            END WHILE  
            
            SET incrementalSum TO 0  
            FOR each elementInSet IN visitedSet DO  
                SET incrementalSum TO incrementalSum + countDict[elementInSet]  
            END FOR  
            SET answerAccumulator TO answerAccumulator + incrementalSum  
            SET countDict[numberValue] TO countDict[numberValue] + (3 - 2)  
        END FOR  
        RETURN answerAccumulator  
    END FUNCTION  
END CLASS