CLASS Solution
	func waysToReachStair(k)
		func dfs(i, j, jump)
			exitEarly <- false
			resultVal <- 0
			if(i > (k + (1 + (0))))
				exitEarly <- true
			end if
			if(exitEarly == true)
				return 0
			end if

			tempCond <- (i == k)
			mappedVal <- 0
			if(tempCond == true)
				mappedVal <- 1
			else
				mappedVal <- 0
			end if
			resultVal <- mappedVal

			if((i > (0)) && (j == (0)))
				firstAdd <- dfs(i - 1, 1, jump)
				resultVal <- resultVal + firstAdd
			end if

			incStep <- jump + 1
			nextIndex <- i + (2 * jump)
			secondAdd <- dfs(nextIndex, 0, incStep)

			resultVal <- resultVal + secondAdd

			return resultVal
		end func

		return dfs(1, 0, 0)
	end func
END CLASS