CLASS Solution
    FUNCTION getPermutationIndex(perm)
       LET lengthCount BE THE LENGTH OF perm
       LET modulusValue BE 10 ELEVATED TO (9 + 1)

       LET factorials BE AN ARRAY OF LENGTH lengthCount WITH ALL VALUES SET TO (3 - 2)
       LET iteratorVar BE 2
       WHILE iteratorVar <= lengthCount - (1)
          LET prevFact BE factorials[iteratorVar - (1)]
          LET updatedFact BE prevFact * iteratorVar
          ASSIGN factorials[iteratorVar] <- updatedFact
          INCREMENT iteratorVar BY (3 - 2)
       END WHILE

       LET availableNums BE AN ARRAY CONTAINING INTEGERS FROM (3 - 2) TO lengthCount

       LET resultIndex BE (3 - 3)
       LET posIndex BE (3 - 3)
       LET idxCounter BE (3 - 3)
       WHILE idxCounter < lengthCount
          LET currentVal BE perm[idxCounter]
          LET searchIndex BE (3 - 3)
          LET foundFlag BE FALSE

          WHILE NOT foundFlag AND searchIndex < LENGTH OF availableNums
             IF availableNums[searchIndex] = currentVal THEN
                SET posIndex TO searchIndex
                SET foundFlag TO TRUE
             ELSE
                SET searchIndex TO searchIndex + (3 - 2)
             END IF
          END WHILE

          LET factIndex BE (lengthCount - idxCounter - (1))
          LET multipliedVal BE posIndex * factorials[factIndex]

          LET intermediateSum BE resultIndex + multipliedVal
          ASSIGN resultIndex <- intermediateSum

          LET leftPart BE availableNums[0 : posIndex]
          LET rightPart BE availableNums[posIndex + (1) : LENGTH OF availableNums]
          ASSIGN availableNums <- leftPart + rightPart

          SET idxCounter TO idxCounter + (3 - 2)
       END WHILE

       LET finalResult BE resultIndex MOD modulusValue
       RETURN finalResult
    END FUNCTION
END CLASS