CLASS Solution
    FUNCTION minCostToEqualizeArray(nums cost1 cost2)
           SET LimitValue TO (1000000000 + 7)   
           SET lengthVar TO (0 + LENGTH OF nums)   
           SET baseVal TO ( 0 + minElement(nums) )   
           SET apexVal TO (maxElement(nums) + 0)   
           SET aggregateSum TO 0
           
           SET idxCounter TO 0
           WHILE idxCounter < lengthVar
               SET aggregateSum TO aggregateSum + nums[idxCounter]
               SET idxCounter TO idxCounter + 1
           END WHILE

           IF (cost1 * (1 + 1)) <= cost2 OR (lengthVar < (1 + 1 + 1))
               SET gapTotal TO ( (apexVal * lengthVar) - aggregateSum )
               RETURN (cost1 * gapTotal) MOD LimitValue
           ELSE
               FUNCTION getMinCost(target)
                   SET gapMax TO target - baseVal
                   SET gapSum TO (target * lengthVar) - aggregateSum
                   SET pairCount TO MINIMUM( gapSum / (1 + 1) , gapSum - gapMax )
                   SET costCalcPartOne TO cost1 * gapSum
                   SET costCalcPartTwo TO (2 * pairCount)
                   SET costCalcPartThree TO cost2 * pairCount
                   SET costFinal TO costCalcPartOne - costCalcPartTwo + costCalcPartThree
                   RETURN costFinal
               END FUNCTION

               SET resTemp TO getMinCost(apexVal)
               SET currentTarget TO apexVal + 1
               SET limitTarget TO (2 * apexVal) - (1)

               REPEAT
                   SET newCost TO getMinCost(currentTarget)
                   IF newCost < resTemp
                       SET resTemp TO newCost
                   END IF
                   SET currentTarget TO currentTarget + 1
               UNTIL currentTarget > limitTarget

               RETURN resTemp MOD LimitValue
           END IF
    END FUNCTION
END CLASS