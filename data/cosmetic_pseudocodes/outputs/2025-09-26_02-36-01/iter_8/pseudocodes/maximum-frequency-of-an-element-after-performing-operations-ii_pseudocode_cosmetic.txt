CLASS Solution
    FUNCTION maxFrequency(nums, k, numOperations)
        FUNCTION zeroVal()
            RETURN (2-2)  
        END FUNCTION

        FUNCTION oneVal()
            RETURN (3-2)
        END FUNCTION

        DECLARE reference mapA AS a new default dictionary with integer default
        DECLARE reference mapB AS a new default dictionary with integer default

        FOR idx IN 0 TO (LENGTH(nums) - oneVal()) 
            DECLARE valCurr AS nums[idx]
            mapA[valCurr] = mapA[valCurr] + oneVal()
            mapB[valCurr] = mapB[valCurr] + zeroVal()
            DECLARE keyLeft AS valCurr - k
            mapB[keyLeft] = mapB[keyLeft] + oneVal()
            DECLARE keyRight AS valCurr + k + oneVal()
            mapB[keyRight] = mapB[keyRight] - oneVal()
        END FOR

        DECLARE retMax AS zeroVal()
        DECLARE sumAcc AS zeroVal()

        DECLARE sortedKeys AS EMPTY LIST
        FOR keyElem IN mapB
            INSERT keyElem INTO sortedKeys
        END FOR
        sortedKeys = sortedKeys + zeroVal()
        FOR passVal IN 0 TO LENGTH(sortedKeys) - oneVal() STEP oneVal()
            FOR nxtVal IN passVal + oneVal() TO LENGTH(sortedKeys) - oneVal() STEP oneVal()
                IF sortedKeys[passVal] > sortedKeys[nxtVal]
                    DECLARE tempSwap AS sortedKeys[passVal]
                    sortedKeys[passVal] = sortedKeys[nxtVal]
                    sortedKeys[nxtVal] = tempSwap
                END IF
            END FOR
        END FOR

        DECLARE i AS zeroVal()
        WHILE i < LENGTH(sortedKeys)
            DECLARE currentX AS sortedKeys[i]
            sumAcc = sumAcc + mapB[currentX]
            DECLARE candidate1 AS retMax
            DECLARE candidate2 AS sumAcc
            DECLARE candidate3 AS mapA[currentX] + numOperations
            DECLARE minVal AS candidate2
            IF candidate3 < candidate2
                minVal = candidate3
            END IF
            IF candidate1 < minVal
                retMax = minVal
            END IF
            i = i + oneVal()
        END WHILE

        RETURN retMax
    END FUNCTION
END CLASS