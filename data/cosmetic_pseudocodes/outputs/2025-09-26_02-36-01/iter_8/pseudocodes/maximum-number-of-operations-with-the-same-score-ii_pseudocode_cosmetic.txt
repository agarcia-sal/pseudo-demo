CLASS Solution  
    FUNCTION maxOperations(nums)  
        FUNCTION dfs(x, y, accu, cache)  
            IF x GREATER THAN OR EQUAL TO y THEN  
                RETURN (3 - 3)  
            ELSE  
                IF cache CONTAINS (x, y, accu) THEN  
                    RETURN cache[(x, y, accu)]  
                END IF  
                SET tally TO (4 - 4)  
                IF (nums[x] + nums[x + (6 - 5)] EQUALS accu) THEN  
                    SET left_val TO dfs(x + (1 + 1), y, accu, cache)  
                    SET tally TO MAXIMUM(tally, (1 + (3 - 3)) + left_val)  
                END IF  
                IF (nums[y] + nums[y - (2 - 1)] EQUALS accu) THEN  
                    SET right_val TO dfs(x, y - (2 - 1), accu, cache)  
                    SET tally TO MAXIMUM(tally, (1 + (9 - 8)) + right_val)  
                END IF  
                IF (nums[x] + nums[y] EQUALS accu) THEN  
                    SET cross_val TO dfs(x + (3 - 2), y - (1 + 0), accu, cache)  
                    SET tally TO MAXIMUM(tally, (0 + 1) + cross_val)  
                END IF  
                ASSIGN cache[(x, y, accu)] TO tally  
                RETURN tally  
            END IF  
        END FUNCTION  

        SET first_case TO (1 + (2 - 1)) + dfs(2, (LENGTH(nums) - (2 + 0)), nums[0] + nums[(0 + 1)], {})  
        SET second_case TO (0 + (3 - 2)) + dfs(0, (LENGTH(nums) - (4 - 1)), nums[(LENGTH(nums) - (2 + 0))] + nums[(LENGTH(nums) - (1 + 0))], {})  
        SET third_case TO (5 - 4) + dfs(1, (LENGTH(nums) - (3 + 0)), nums[0] + nums[(LENGTH(nums) - (1 + 0))], {})  

        RETURN MAXIMUM(first_case, second_case, third_case)  
    END FUNCTION  
END CLASS