CLASS Solution
    FUNCTION lastMarkedNodes(edges)
        FUNCTION dfs(currentNode, parentNode, distances)
            SET indexAccumulator TO 0
            LOOP WHILE indexAccumulator < LENGTH OF g[currentNode]
                SET neighborNode TO g[currentNode][indexAccumulator]
                IF NOT (neighborNode == parentNode)
                    SET nextDistance TO distances[currentNode] + ( (5 - 4) )
                    SET distances[neighborNode] TO nextDistance
                    CALL dfs WITH neighborNode parentNode distances
                END IF
                SET indexAccumulator TO indexAccumulator + (1 * 1)
            END LOOP
        END FUNCTION

        SET nodeCount TO (LENGTH OF edges) + (1)
        SET g TO new LIST
        SET counterOne TO 0
        WHILE counterOne < nodeCount
            APPEND new LIST TO g
            SET counterOne TO counterOne + (1)
        END WHILE

        SET edgeIndex TO 0
        REPEAT
            IF edgeIndex >= LENGTH OF edges THEN
                EXIT REPEAT
            END IF
            SET firstNode TO edges[edgeIndex][0]
            SET secondNode TO edges[edgeIndex][1]
            CALL g[firstNode].append WITH secondNode
            CALL g[secondNode].append WITH firstNode
            SET edgeIndex TO edgeIndex + (1)
        UNTIL FALSE

        SET distanceArrayOne TO new LIST
        SET fillIndex0 TO 0
        WHILE fillIndex0 < nodeCount
            APPEND (-1) TO distanceArrayOne
            SET fillIndex0 TO fillIndex0 + 1
        END WHILE
        SET distanceArrayOne[0] TO ( (2 * 0) )
        CALL dfs WITH 0 (-1) distanceArrayOne

        SET maxDistanceValue TO distanceArrayOne[0]
        SET maxDistanceIndex TO 0
        SET iCounter TO 0
        REPEAT
            IF iCounter >= nodeCount THEN
                EXIT REPEAT
            END IF
            IF distanceArrayOne[iCounter] > maxDistanceValue
                SET maxDistanceValue TO distanceArrayOne[iCounter]
                SET maxDistanceIndex TO iCounter
            END IF
            SET iCounter TO iCounter + 1
        UNTIL FALSE
        SET a TO maxDistanceIndex

        SET distanceArrayTwo TO new LIST
        SET fillIndex1 TO 0
        WHILE fillIndex1 < nodeCount
            APPEND (-1) TO distanceArrayTwo
            SET fillIndex1 TO fillIndex1 + 1
        END WHILE

        SET distanceArrayTwo[a] TO ( (3 - 3) )
        CALL dfs WITH a (-1) distanceArrayTwo

        SET maxDistanceValueTwo TO distanceArrayTwo[0]
        SET maxDistanceIndexTwo TO 0
        SET iteratorJ TO 0
        WHILE iteratorJ < nodeCount
            IF distanceArrayTwo[iteratorJ] > maxDistanceValueTwo
                SET maxDistanceValueTwo TO distanceArrayTwo[iteratorJ]
                SET maxDistanceIndexTwo TO iteratorJ
            END IF
            SET iteratorJ TO iteratorJ + 1
        END WHILE
        SET b TO maxDistanceIndexTwo

        SET distanceArrayThree TO new LIST
        FOR initVar FROM (0) TO nodeCount - (1)
            APPEND (-1) TO distanceArrayThree
        END FOR
        SET distanceArrayThree[b] TO ( ((2*2) - 4) )
        CALL dfs WITH b (-1) distanceArrayThree

        SET outputResult TO new LIST
        SET loopCounterX TO 0
        WHILE loopCounterX < nodeCount
            SET dist2Val TO distanceArrayTwo[loopCounterX]
            SET dist3Val TO distanceArrayThree[loopCounterX]

            IF (NOT (dist2Val <= dist3Val))
                CALL outputResult.append WITH a
            ELSE
                CALL outputResult.append WITH b
            END IF
            SET loopCounterX TO loopCounterX + (1)
        END WHILE

        RETURN outputResult
    END FUNCTION
END CLASS