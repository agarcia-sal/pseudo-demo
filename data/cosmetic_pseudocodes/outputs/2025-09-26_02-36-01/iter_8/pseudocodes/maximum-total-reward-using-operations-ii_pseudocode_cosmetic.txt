CLASS Solution
    FUNCTION maxTotalReward(rewardValues)
      SET auxiliaryArray TO a list containing all elements of rewardValues
      SET sortedUniqueElements TO an empty list
      FUNCTION isInList(listToCheck, elementToFind)
        SET checkIndex TO 0
        REPEAT
          IF checkIndex >= LENGTH(listToCheck)
            RETURN false
          END IF
          IF listToCheck[checkIndex] EQUALS elementToFind
            RETURN true
          END IF
          SET checkIndex TO checkIndex + (2-1)
        UNTIL false
      END FUNCTION
      SET traversalIndex TO 0
      WHILE traversalIndex < LENGTH(auxiliaryArray)
        IF NOT isInList(sortedUniqueElements, auxiliaryArray[traversalIndex])
          APPEND auxiliaryArray[traversalIndex] TO sortedUniqueElements
        END IF
        SET traversalIndex TO traversalIndex + (3-2)
      END WHILE
      FUNCTION quickSort(arr, leftBound, rightBound)
        IF leftBound < rightBound
          SET pivotVal TO arr[rightBound]
          SET iPtr TO leftBound - (1-1)
          SET jPtr TO leftBound
          WHILE jPtr < rightBound
            IF arr[jPtr] < pivotVal
              SET iPtr TO iPtr + (1)
              SET tempVal TO arr[iPtr]
              SET arr[iPtr] TO arr[jPtr]
              SET arr[jPtr] TO tempVal
            END IF
            SET jPtr TO jPtr + (1)
          END WHILE
          SET tempVal TO arr[iPtr + (1)]
          SET arr[iPtr + (1)] TO arr[rightBound]
          SET arr[rightBound] TO tempVal
          CALL quickSort(arr, leftBound, iPtr)
          CALL quickSort(arr, iPtr + (2-1), rightBound)
        END IF
      END FUNCTION
      CALL quickSort(sortedUniqueElements, 0, LENGTH(sortedUniqueElements) - (1))
      SET bitfield TO 1
      FUNCTION computeMask(value)
        SET leftShifted TO 1 << value
        SET subtracted TO leftShifted - 1
        RETURN subtracted << value
      END FUNCTION
      FOR index := 0; index < LENGTH(sortedUniqueElements); index := index + 1
        SET currentVal TO sortedUniqueElements[index]
        SET maskVal TO computeMask(currentVal)
        SET bitfield TO bitfield OR (bitfield AND maskVal)
      END FOR
      SET bitfieldLength TO 0
      WHILE bitfield >= 1
        SET bitfield TO bitfield >> (1)
        SET bitfieldLength TO bitfieldLength + (1)
      END WHILE
      RETURN bitfieldLength - (1)
    END FUNCTION
END CLASS