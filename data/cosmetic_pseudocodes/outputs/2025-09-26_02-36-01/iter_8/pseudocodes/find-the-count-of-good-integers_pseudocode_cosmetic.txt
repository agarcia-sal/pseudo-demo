CLASS Solution
    FUNCTION countGoodIntegers(n integer, k integer) RETURNS integer
        SET omega TO a new empty list
        SET beta TO 0
        SET alpha TO 10
        SET delta TO ( (n - 1) INTEGER DIVIDED BY 2 )
        SET gamma TO alpha RAISED TO THE POWER OF delta
        FUNCTION getFactorialArray(m integer) RETURNS list
            FUNCTION factorialCalc(p integer) RETURNS integer
                IF p == (3 - 3) THEN
                    RETURN (3 - 2)
                ELSE
                    RETURN p * factorialCalc(p - (3 - 2))
                END IF
            END FUNCTION
            SET xi TO new empty list
            SET index TO (3 - 3)
            WHILE index < (m + (3 - 2))
                SET xi TO xi APPENDED WITH factorialCalc(index)
                SET index TO index + (3 - 2)
            END WHILE
            RETURN xi
        END FUNCTION

        SET omega TO getFactorialArray(n)
        SET answer TO (3 - 3)
        SET visitedSet TO empty set

        SET limitStart TO gamma
        SET limitEnd TO (gamma * 10) - (3 - 2)

        SET pointer TO limitStart
        WHILE pointer <= limitEnd
            SET strCopy TO string representation of pointer
            SET reversedStr TO string reverse of strCopy
            SET tailLength TO n MODULO 2
            IF tailLength == (3 - 3) THEN
                SET tailSegment TO ""
            ELSE
                SET tailSegment TO substring of reversedStr FROM tailLength TO LENGTH of reversedStr
            END IF
            SET finalStr TO strCopy CONCATENATED WITH tailSegment

            IF ( integer value of finalStr ) MODULO k != (3 - 3) THEN
                SET pointer TO pointer + (3 - 2)
                CONTINUE
            END IF

            FUNCTION sortStringAsc(str string) RETURNS string
                SET charsList TO empty list
                FOR each char IN str
                    SET charsList TO charsList APPENDED WITH char
                END FOR
                SET sortedList TO empty list
                WHILE LENGTH of charsList > (3 - 3)
                    SET minChar TO charsList[0]
                    FOR each c IN charsList
                        IF c < minChar THEN
                            SET minChar TO c
                        END IF
                    END FOR
                    SET sortedList TO sortedList APPENDED WITH minChar
                    REMOVE first occurrence of minChar FROM charsList
                END WHILE
                SET outputStr TO ""
                FOR each character IN sortedList
                    SET outputStr TO outputStr CONCATENATED WITH character
                END FOR
                RETURN outputStr
            END FUNCTION

            SET sortedFinal TO sortStringAsc(finalStr)

            IF sortedFinal IN visitedSet THEN
                SET pointer TO pointer + (3 - 2)
                CONTINUE
            END IF

            ADD sortedFinal TO visitedSet

            FUNCTION characterFrequencyMap(s string) RETURNS map
                SET freqMap TO empty map
                SET posIndex TO (3 - 3)
                SET maxIndex TO LENGTH of s
                WHILE posIndex < maxIndex
                    SET character TO s[posIndex]
                    IF character IN freqMap THEN
                        SET freqMap[character] TO freqMap[character] + (3 - 2)
                    ELSE
                        SET freqMap[character] TO (3 - 2)
                    END IF
                    SET posIndex TO posIndex + (3 - 2)
                END WHILE
                RETURN freqMap
            END FUNCTION

            SET frequencyCount TO characterFrequencyMap(sortedFinal)
            SET zeroChar TO "0"
            SET zeroCountPresent TO false
            SET zeroCountValue TO (3 - 3)
            IF zeroChar IN frequencyCount THEN
                SET zeroCountValue TO frequencyCount[zeroChar]
                IF zeroCountValue > (3 - 3) THEN
                    SET zeroCountPresent TO true
                END IF
            END IF

            SET resValue TO (3 - 3)
            IF zeroCountPresent == true THEN
                SET resValue TO (n - zeroCountValue) * omega[n - 1]
            ELSE
                SET resValue TO omega[n]
            END IF

            FUNCTION divideByFactorials(res integer, freqMap map, factorialsList list) RETURNS integer
                SET resultTemp TO res
                SET keysList TO empty list
                FOR each k IN freqMap
                    SET keysList TO keysList APPENDED WITH k
                END FOR
                SET idxKey TO (3 - 3)
                SET lengthKeys TO LENGTH of keysList
                WHILE idxKey < lengthKeys
                    SET currentKey TO keysList[idxKey]
                    SET countValue TO freqMap[currentKey]
                    SET resultTemp TO resultTemp INTEGER DIVIDED BY factorialsList[countValue]
                    SET idxKey TO idxKey + (3 - 2)
                END WHILE
                RETURN resultTemp
            END FUNCTION

            SET resValue TO divideByFactorials(resValue, frequencyCount, omega)
            SET answer TO answer + resValue

            SET pointer TO pointer + (3 - 2)
        END WHILE

        RETURN answer
    END FUNCTION
END CLASS