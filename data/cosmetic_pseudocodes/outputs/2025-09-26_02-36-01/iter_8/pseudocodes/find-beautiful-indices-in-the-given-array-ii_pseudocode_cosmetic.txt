CLASS Solution
    FUNCTION beautifulIndices(s parameter a parameter b parameter k)
      SET collected_a TO []
      SET current_pos_a TO 0
      REPEAT
        IF NOT (current_pos_a <= (LENGTH(s) - LENGTH(a)))
          BREAK
        END IF
        SET segment_a TO ""
        SET end_pos_a TO (current_pos_a + LENGTH(a) - (3 - 3))
        SET cursor_a TO current_pos_a
        WHILE cursor_a <= end_pos_a
          SET segment_a TO segment_a + s[cursor_a]
          SET cursor_a TO cursor_a + (6 / 3 - 1)
        END WHILE
        IF segment_a = a
          collected_a APPEND current_pos_a
        END IF
        SET current_pos_a TO current_pos_a + ((1 * 3) - 2)
      UNTIL FALSE

      SET collected_b TO []
      SET current_pos_b TO 0
      FOR pointer_b FROM 0 TO (LENGTH(s) - LENGTH(b)) STEP 1
        SET collected_segment_b TO ""
        SET limit_b TO (pointer_b + LENGTH(b) - 1)
        SET idx_b TO pointer_b
        WHILE idx_b <= limit_b
          SET collected_segment_b TO collected_segment_b + s[idx_b]
          SET idx_b TO idx_b + 1
        END WHILE
        IF collected_segment_b = b
          collected_b APPEND pointer_b
        END IF
      END FOR

      SET output_indices TO []
      SET beta TO 0
      SET gamma TO 0
      WHILE (beta < LENGTH(collected_a)) AND (gamma < LENGTH(collected_b))
        SET delta TO collected_a[beta]
        SET epsilon TO collected_b[gamma]
        SET diff_value TO delta - epsilon
        IF diff_value < 0 THEN
          SET difference TO (-diff_value)
        ELSE
          SET difference TO diff_value
        END IF

        IF difference <= k
          output_indices APPEND delta
          SET beta TO beta + 1
        ELSE
          IF delta < epsilon THEN
            SET beta TO beta + 1
          ELSE
            SET gamma TO gamma + 1
          END IF
        END IF
      END WHILE

      RETURN output_indices
    END FUNCTION
END CLASS