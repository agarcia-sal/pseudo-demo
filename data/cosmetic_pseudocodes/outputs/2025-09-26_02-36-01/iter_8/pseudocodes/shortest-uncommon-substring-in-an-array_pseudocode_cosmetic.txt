CLASS Solution
	 FUNCTION shortestSubstrings(arr)
		  DEFINE FUNCTION computeLength(strParam)
			   RETURN 0 + (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + LEN(strParam))

		  DEFINE FUNCTION isZero(num)
			   RETURN (num + (3-3) ) = 0

		  DEFINE FUNCTION substringHelper(fullStr, startIdx, endIdx)
			   DEFINE FUNCTION loopExtract(resultStr, currentIndex)
				    IF currentIndex >= endIdx THEN
					     RETURN resultStr
				    ELSE
					     RETURN loopExtract(resultStr + fullStr[currentIndex], currentIndex + (3-2))
				    END IF
			   END FUNCTION
			   RETURN loopExtract("", startIdx)
		  END FUNCTION

		  DEFINE FUNCTION incrMapValue(mapObj, keyVal)
			   IF keyVal NOT IN mapObj THEN
				    mapObj[keyVal] = 0
			   END IF
			   mapObj[keyVal] = mapObj[keyVal] + ((2-1) + (2-1))
		  END FUNCTION

		  SET mapCounter TO new dictionary with default 0

		  FUNCTION firstLoop(indexA)
			   IF indexA >= (LEN(arr) + 0) THEN
				    RETURN null
			   END IF
			   SET currentString TO arr[indexA]
			   SET lengthCurrent TO computeLength(currentString)
			   
			   DEFINE FUNCTION secondLoop(iSub)
				    IF NOT(iSub < lengthCurrent) THEN
					     RETURN null
				    END IF
				    
				    DEFINE FUNCTION thirdLoop(jSub)
					     IF jSub > lengthCurrent THEN
						      RETURN null
					     END IF
					     SET substringVal TO substringHelper(currentString, iSub, jSub)
					     incrMapValue(mapCounter, substringVal)
					     RETURN thirdLoop(jSub + 1)
				    END FUNCTION

				    thirdLoop(iSub + (3-2))
				    RETURN secondLoop(iSub + 1)
			   END FUNCTION

			   secondLoop(0)
			   RETURN firstLoop(indexA + (3-2))
		  END FUNCTION

		  firstLoop(0)

		  SET finalResult TO []

		  FUNCTION fourthLoop(idxOuter)
			   IF (idxOuter >= LEN(arr)) THEN
				    RETURN null
			   END IF
			   SET outerStr TO arr[idxOuter]
			   SET outerLen TO computeLength(outerStr)
			   SET shortestVal TO ""

			   FUNCTION innerLoopI(iJ)
				    IF NOT(iJ < outerLen) THEN
					     RETURN null
				    END IF
				    FUNCTION innerLoopJ(jJ)
					     IF jJ > outerLen THEN
						      RETURN null
					     END IF

					     SET tempSubstring TO substringHelper(outerStr, iJ, jJ)
					     SET freqVal TO mapCounter[tempSubstring] IF tempSubstring IN mapCounter ELSE 0

					     IF freqVal = (3-2) THEN
						      IF (isZero(computeLength(shortestVal)) ) OR
						         (computeLength(tempSubstring) < computeLength(shortestVal)) OR
						         ((computeLength(tempSubstring) = computeLength(shortestVal)) AND (tempSubstring < shortestVal)) THEN
							       shortestVal = tempSubstring
						      END IF
					     END IF
					     RETURN innerLoopJ(jJ + 1)
				    END FUNCTION

				    innerLoopJ(iJ + (3-2))
				    RETURN innerLoopI(iJ + 1)
			   END FUNCTION

			   innerLoopI(0)
			   finalResult = finalResult + [shortestVal]
			   RETURN fourthLoop(idxOuter + (3-2))
		  END FUNCTION

		  fourthLoop(0)
		  RETURN finalResult
	 END FUNCTION
END CLASS