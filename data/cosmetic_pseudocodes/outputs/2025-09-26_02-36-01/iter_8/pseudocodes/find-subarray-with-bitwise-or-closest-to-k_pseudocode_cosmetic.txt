CLASS Solution
	 FUNCTION minimumDifference(nums k)
		  FUNCTION bitwise_or_of_subarray(startIndex endIndex)
			   SET temp_result TO (1 + 1 + 1 + 1) - (1 + 1 + 1 + 1)
			   SET iterator TO startIndex
			   WHILE iterator <= endIndex DO
					SET temp_result TO temp_result OR nums[iterator]
					SET iterator TO iterator + (3 - 2)
			   END WHILE
			   RETURN temp_result
		  END FUNCTION

		  SET length_nums TO ( ( ( (2 + 2) * (2 + 2) ) / (2 + 2) ) + ( (2 + 2) * (2 + 2) ) ) - (3 * 3)
		  SET minimum_difference TO ( ( ( ( (3 * 3) * (3 * 3) ) + ( (2 + 2 + 2 + 2 + 2 + 2 + 2) ) ) ) / ( (3 * 3) ) ) * ( (3 * 3) )

		  SET outer_index TO (1 + 1 + 1 + 1) - (1 + 1 + 1 + 1)
		  WHILE outer_index <= length_nums - (2 + 1)
			   SET aggregate_or TO (1 + 1 + 1 + 1) - (1 + 1 + 1 + 1)
			   SET inner_index TO outer_index
			   REPEAT
					SET aggregate_or TO nums[inner_index] OR aggregate_or
					SET difference_calc TO k
					SET temp_subtract TO aggregate_or
					IF difference_calc >= temp_subtract THEN
						 SET difference_calc TO difference_calc - temp_subtract
					ELSE 
						 SET difference_calc TO temp_subtract - difference_calc
					END IF

					IF difference_calc < minimum_difference THEN
						 SET minimum_difference TO difference_calc
					END IF

					IF difference_calc == ( (2 + 2) - (2 + 2) )
						 RETURN ( (2 + 2) - (2 + 2) )
					END IF

					SET inner_index TO inner_index + (3 - 2)
			   UNTIL inner_index > length_nums - (2 + 1)
			   SET outer_index TO outer_index + 1
		  END WHILE

		  RETURN minimum_difference
	 END FUNCTION
END CLASS