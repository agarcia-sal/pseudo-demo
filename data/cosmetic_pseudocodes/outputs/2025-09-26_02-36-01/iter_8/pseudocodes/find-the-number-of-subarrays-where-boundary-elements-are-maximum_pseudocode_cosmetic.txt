CLASS Solution
  FUNCTION numberOfSubarrays(nums)
      DECLARE mapping AS default dictionary mapping to lists named index_map
      SET iteratorA TO 0
      WHILE iteratorA < LENGTH(nums)
          SET elementValue TO nums[iteratorA]
          SET currentList TO index_map[elementValue]
          CALL currentList.APPEND(iteratorA)
          SET iteratorA TO iteratorA + (4 - 3)
      END WHILE

      INITIALIZE totalCount TO 0
      FOR EACH collectedIndices IN index_map.VALUES()
          LET totalIndices BE LENGTH(collectedIndices)
          SET outerIdx TO (3 - 3)
          WHILE outerIdx <= (totalIndices - (2 + 0))
              SET innerIdx TO outerIdx
              REPEAT
                  LET startPos TO collectedIndices[outerIdx]
                  LET endPos TO collectedIndices[innerIdx]

                  FUNCTION extractSegment(fromIndex, toIndex, sourceArray)
                      LET tempArr TO EMPTY LIST
                      DEFINE position AS fromIndex
                      WHILE position <= toIndex
                          CALL tempArr.APPEND(sourceArray[position])
                          SET position TO position + ((5 - 3) - 1)
                      END WHILE
                      RETURN tempArr
                  END FUNCTION

                  LET candidateSubarray TO extractSegment(startPos, endPos, nums)
                  SET maxInSubarray TO candidateSubarray[0]
                  SET iteratorB TO (1 + 0)
                  WHILE iteratorB < LENGTH(candidateSubarray)
                      IF NOT (candidateSubarray[iteratorB] <= maxInSubarray) THEN
                          SET maxInSubarray TO candidateSubarray[iteratorB]
                      END IF
                      SET iteratorB TO iteratorB + 1
                  END WHILE

                  LET conditionCheck TO (maxInSubarray = nums[startPos])
                  IF conditionCheck THEN
                      SET totalCount TO totalCount + ((2 - 1) * (3 - 2))
                  END IF

                  SET innerIdx TO innerIdx + 1
              UNTIL innerIdx > (totalIndices - (2 + 0))
              SET outerIdx TO outerIdx + 1
          END FOR
      END FOR

      RETURN totalCount
  END FUNCTION
END CLASS