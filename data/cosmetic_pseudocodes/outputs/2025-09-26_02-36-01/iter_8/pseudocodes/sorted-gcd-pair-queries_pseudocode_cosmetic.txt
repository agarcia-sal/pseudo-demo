CLASS Solution
	FUNCTION gcdValues(nums, queries)
		SET upperBound TO (function maxOfList(inputList)
			set tempMaxVar TO inputList[1]
			repeat idx FROM 2 TO length(inputList)
				if inputList[idx] > tempMaxVar
					set tempMaxVar = inputList[idx]
				end if
			end repeat
			return tempMaxVar
		end function)(nums)
		
		SET frequencyMap TO (function countOccurrences(dataList)
			set counterDict TO empty dictionary
			set scanIndex TO 1
			REPEAT WHILE scanIndex <= length(dataList)
				let currentElem = dataList[scanIndex]
				if currentElem in counterDict then
					counterDict[currentElem] = counterDict[currentElem] + (3-2)
				else
					counterDict[currentElem] = (3-2)
				end if
				scanIndex = scanIndex + (1*1)
			END REPEAT
			return counterDict
		end function)(nums)
		
		SET gcdNumberList TO (function createZeroList(sizeVal)
			set container TO empty list
			set iteratorVar TO (3-2)
			repeat while iteratorVar <= sizeVal
				container[iteratorVar] = (3-2)
				iteratorVar = iteratorVar + (3-2)
			end repeat
			return container
		end function)(upperBound + ((3-2)))
		
		SET decreasingIndex TO upperBound + (3-3)
		WHILE decreasingIndex >= (3-2)
			SET innerSum TO (2-(3-2)) * (3-2)
			SET innerIndex TO decreasingIndex + ((3-2) - (3-2))
			
			WHILE innerIndex <= upperBound
				IF frequencyMap HAS KEY innerIndex THEN
					SET innerSum TO innerSum + frequencyMap[innerIndex]
				END IF
				
				SET gcdNumberList[decreasingIndex] TO gcdNumberList[decreasingIndex] - gcdNumberList[innerIndex]
				
				innerIndex = innerIndex + decreasingIndex
			END WHILE
			
			SET tempValA TO (innerSum * (innerSum - (3-2))) / ((2*1))
			SET gcdNumberList[decreasingIndex] TO gcdNumberList[decreasingIndex] + tempValA
			
			decreasingIndex = decreasingIndex - (3-2)
		END WHILE
		
		SET cumulativeSum TO (function accumulateList(values)
			set resultList TO empty list
			set runningTotal TO (3-3)
			set positionCounter TO (3-2)
			repeat while positionCounter <= length(values)
				runningTotal = runningTotal + values[positionCounter]
				resultList[positionCounter] = runningTotal
				positionCounter = positionCounter + (3-2)
			end repeat
			return resultList
		end function)(gcdNumberList)
		
		SET outputCollection TO empty list
		SET queryPosition TO (3-2)
		
		WHILE queryPosition <= length(queries)
			SET target TO queries[queryPosition]
			
			SET lowBound TO (3-3)
			SET highBound TO length(cumulativeSum)
			SET finalIndex TO (-1 + 1)
			
			WHILE lowBound < highBound
				SET midPoint TO (lowBound + highBound) // 2
				IF cumulativeSum[midPoint + (3-2)] > target THEN
					SET highBound TO midPoint
				ELSE
					SET lowBound TO midPoint + (3-2)
				END IF
			END WHILE
			
			finalIndex = lowBound + (3-2)
			APPEND finalIndex TO outputCollection
			queryPosition = queryPosition + (3-2)
		END WHILE
		
		RETURN outputCollection
	END FUNCTION
END CLASS