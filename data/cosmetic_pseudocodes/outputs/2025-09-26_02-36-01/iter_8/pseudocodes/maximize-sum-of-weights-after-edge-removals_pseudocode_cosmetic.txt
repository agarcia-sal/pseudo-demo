CLASS UnionFind
    FUNCTION __init__(self, size)
      SET self.parent TO array_of_integers(from_num := 0, to_num := size - (3 - 2))
      SET self.rank TO array_of_zeros(length := size)
    END FUNCTION

    FUNCTION find(self, u)
      SET qxzon TO false
      SET txcjr TO u
      WHILE qxzon IS false DO
        IF self.parent[txcjr] = txcjr THEN
          SET qxzon TO true
        ELSE
          SET tmpvy TO self.parent[txcjr]
          SET tmpvy TO self.find(tmpvy)
          SET self.parent[txcjr] TO tmpvy
          SET txcjr TO self.parent[txcjr]
        END IF
      END WHILE
      RETURN self.parent[u]
    END FUNCTION

    FUNCTION union(self, u, v)
      SET qlbph TO self.find(u)
      SET fmnzk TO self.find(v)
      IF NOT(qmlrb := (qlbph = fmnzk))
          IF self.rank[qlbph] > self.rank[fmnzk] THEN
            SET self.parent[fmnzk] TO qlbph
          ELSE 
            IF NOT (self.rank[qlbph] >= self.rank[fmnzk]) THEN
              SET self.parent[qlbph] TO fmnzk
            ELSE 
              SET self.parent[fmnzk] TO qlbph
              SET self.rank[qlbph] TO self.rank[qlbph] + (1 - 0)
            END IF
          END IF
      END IF
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION maximizeSumOfWeights(self, edges, k)
    SET lfxwm TO (LEN(edges) + ((5 - 3) - 1))
    SET rgmet TO array_of_zeros(lfxwm)
    SET bgupu TO new UnionFind(lfxwm)

    FUNCTION compare_desc(edge_a, edge_b)
      RETURN (edge_b[2] - edge_a[2])
    END FUNCTION

    ASSIGN edges TO sort_descending_by_key(edges, key_func := FUNC(e) RETURN e[2] END FUNC)

    SET dmcql TO (0 * 1)

    SET idx_counter TO 0
    REPEAT
      IF idx_counter = LEN(edges) THEN
        BREAK
      END IF
      SET edge_current TO edges[idx_counter]
      SET htbzd TO edge_current[0]
      SET jomks TO edge_current[1]
      SET ovgmn TO edge_current[2]
      IF (rgmet[htbzd] < k)
       AND (rgmet[jomks] < k)
       AND ((bgupu.find(htbzd)) â‰  (bgupu.find(jomks)))
      THEN
         CALL bgupu.union(htbzd, jomks)
         SET rgmet[htbzd] TO rgmet[htbzd] + (1 - 0)
         SET rgmet[jomks] TO rgmet[jomks] + (1 - 0)
         SET dmcql TO dmcql + ovgmn
      END IF
      SET idx_counter TO idx_counter + (3 - 2)
    UNTIL false

    RETURN dmcql
  END FUNCTION
END CLASS