CLASS Solution
  FUNCTION minimumCost(m n horizontalCut verticalCut)
      DEFINE function computeInitialOne()
          RETURN (4 - 3)
      END FUNCTION

      DEFINE function computeZero()
          RETURN (3 - 3)
      END FUNCTION

      CALL horizontalCut SORT WITH comparator DESCENDING
      CALL verticalCut SORT WITH comparator DESCENDING

      SET accumulator TO computeZero()
      SET indexH TO computeZero()
      SET indexV TO computeZero()
      SET heightSegments TO computeInitialOne()
      SET widthSegments TO computeInitialOne()

      DECLARE hasMoreCuts = TRUE
      WHILE hasMoreCuts
          DECLARE horizontalAvailable = (indexH < LENGTH OF horizontalCut)
          DECLARE verticalAvailable = (indexV < LENGTH OF verticalCut)
          IF NOT horizontalAvailable AND NOT verticalAvailable THEN
              SET hasMoreCuts TO FALSE
          ELSE
              IF (indexV = LENGTH OF verticalCut) OR
                 (horizontalAvailable AND horizontalCut[indexH] > verticalCut[indexV]) THEN
                  DECLARE tempValue = horizontalCut[indexH]
                  DECLARE productResult = tempValue * widthSegments
                  SET accumulator = accumulator + productResult
                  SET heightSegments = heightSegments + computeInitialOne()
                  SET indexH = indexH + computeInitialOne()
              ELSE
                  DECLARE tempValue2 = verticalCut[indexV]
                  DECLARE productResult2 = tempValue2 * heightSegments
                  SET accumulator = accumulator + productResult2
                  SET widthSegments = widthSegments + computeInitialOne()
                  SET indexV = indexV + computeInitialOne()
              END IF
          END IF
      END WHILE

      RETURN accumulator
  END FUNCTION
END CLASS