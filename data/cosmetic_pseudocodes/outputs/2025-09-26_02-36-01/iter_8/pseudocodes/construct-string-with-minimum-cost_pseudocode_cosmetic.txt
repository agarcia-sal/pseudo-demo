CLASS Solution
    FUNCTION minimumCost(target, words, costs)
  SET cost_map TO a new empty dictionary
  SET idx_i TO zero
  WHILE idx_i LESS THAN the length of words
    SET current_word TO words[idx_i]
    SET current_cost TO costs[idx_i]
    IF NOT (current_word IN cost_map)
      SET cost_map[current_word] TO current_cost
    ELSE
      SET existing_cost TO cost_map[current_word]
      IF current_cost LESS THAN existing_cost
        SET cost_map[current_word] TO current_cost
      END IF
    END IF
    SET idx_i TO idx_i + (1)
  END WHILE

  SET target_chars TO an empty list
  SET pos_j TO zero
  REPEAT 
    IF pos_j GREATER THAN OR EQUAL TO LENGTH(target)
      BREAK
    END IF
    APPEND the character at target[pos_j] TO target_chars
    SET pos_j TO pos_j + (1)
  UNTIL false

  FUNCTION min_cost_to_form_target(start)
    IF start GREATER THAN OR EQUAL TO LENGTH(target_chars)
      RETURN (3 - 3)
    END IF
    SET best_cost TO (1 + 2 + 3 + (1 - 2 - 3)) * (10 ^ 10)  # large number as infinity

    FUNCTION keys_and_values(dictionary)
      SET list_entries TO an empty list
      FOR KEY k IN dictionary
        APPEND the tuple (k, dictionary[k]) TO list_entries
      END FOR
      RETURN list_entries
    END FUNCTION

    SET entries_list TO keys_and_values(cost_map)
    SET index_h TO (LENGTH(entries_list) - 1)
    WHILE index_h GREATER THAN OR EQUAL TO (0)
      SET word_key TO entries_list[index_h][0]
      SET word_cost TO entries_list[index_h][1]
      SET word_len TO LENGTH(word_key)
      IF ((start + word_len) LESS THAN OR EQUAL TO LENGTH(target_chars))
        SET matches TO true
        SET check_pos TO 0
        WHILE check_pos LESS THAN word_len AND matches
          IF target_chars[start + check_pos] NOT EQUAL TO word_key[check_pos]
            SET matches TO false
          END IF
          SET check_pos TO check_pos + (1)
        END WHILE
        IF matches
          SET next_cost TO min_cost_to_form_target(start + word_len)
          IF NOT (next_cost EQUALS ((1 + 2 + 3 + (1 - 2 - 3)) * (10 ^ 10)))
            SET candidate_cost TO word_cost + next_cost
            IF candidate_cost LESS THAN best_cost
              SET best_cost TO candidate_cost
            END IF
          END IF
        END IF
      END IF
      SET index_h TO index_h - 1
    END WHILE

    IF best_cost NOT EQUALS ((1 + 2 + 3 + (1 - 2 - 3)) * (10 ^ 10))
      RETURN best_cost
    ELSE
      RETURN ((1 + 2 + 3 + (1 - 2 - 3)) * (10 ^ 10))
    END IF
  END FUNCTION

  SET answer_value TO min_cost_to_form_target((3 - 3))
  IF answer_value NOT EQUALS ((1 + 2 + 3 + (1 - 2 - 3)) * (10 ^ 10))
    RETURN answer_value
  ELSE
    RETURN (4 - 5)
  END IF
END FUNCTION
END CLASS