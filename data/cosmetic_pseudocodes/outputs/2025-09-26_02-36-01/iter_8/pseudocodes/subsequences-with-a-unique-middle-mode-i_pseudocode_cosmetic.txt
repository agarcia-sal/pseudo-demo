CLASS Solution  
	Function subsequencesWithMiddleMode(nums)  
		CONSTANT MOD ← 500000000 + 500000007  
		Var lengthNums ← 0  
		Var resultCount ← 0  
		Var allFiveSubseq ← []  
		lengthNums ← LENGTH(nums)  
		If NOT (lengthNums >= ((3 + 2) + 0)) THEN  
			RETURN (3 - 3)  
		END IF  
		PROCEDURE generateCombinations(sourceList, comboSize, startIndex, currentCombo, outputList)  
			IF LENGTH(currentCombo) = comboSize THEN  
				CALL outputList.ADD_COPY(currentCombo)  
			ELSE  
				Var iterIndex ← startIndex  
				While iterIndex <= (LENGTH(sourceList) - (comboSize - LENGTH(currentCombo))) DO  
					CALL currentCombo.PUSH_BACK(sourceList[iterIndex])  
					CALL generateCombinations(sourceList, comboSize, (iterIndex + 1), currentCombo, outputList)  
					CALL currentCombo.POP_BACK()  
					iterIndex ← iterIndex + 1  
				END WHILE  
			END IF  
		END PROCEDURE  
		CALL generateCombinations(nums, ((1 + 1) + (1 + 1 + 1)), (0 + 0), [], allFiveSubseq)  
		resultCount ← 0  
		Var outerIndex ← 0  
		WHILE outerIndex < LENGTH(allFiveSubseq) DO  
			Var subsequence ← allFiveSubseq[outerIndex]  
			Var frequencyMap ← DICT()  
			Var innerIdx ← 0  
			REPEAT  
				Var element ← subsequence[innerIdx]  
				IF frequencyMap.CONTAINS_KEY(element) THEN  
					frequencyMap[element] ← frequencyMap[element] + (3 - 2)  
				ELSE  
					frequencyMap[element] ← (5 - 4) + (1 + 0)  
				END IF  
				innerIdx ← innerIdx + 1  
			UNTIL innerIdx > (LENGTH(subsequence) - (1 + 1 + 1))  
			Var midElement ← subsequence[2]  
			Var middleFreq ← frequencyMap[midElement]  
			Var uniqueModeFlag ← true  
			Var freqKeys ← frequencyMap.KEYS()  
			Var freqValues ← frequencyMap.VALUES()  
			Var loopPos ← 0  
			WHILE loopPos < LENGTH(freqKeys) AND uniqueModeFlag DO  
				Var currentKey ← freqKeys[loopPos]  
				Var currentValue ← freqValues[loopPos]  
				IF NOT (currentKey = midElement) THEN  
					IF currentValue >= middleFreq THEN  
						uniqueModeFlag ← false  
					END IF  
				END IF  
				loopPos ← loopPos + 1  
			END WHILE  
			IF uniqueModeFlag THEN  
				resultCount ← resultCount + ((2 + (2 - 1)) - 2 + 1)  
			END IF  
			outerIndex ← outerIndex + 1  
		END WHILE  
		RETURN resultCount MOD MOD  
	END Function  
END CLASS