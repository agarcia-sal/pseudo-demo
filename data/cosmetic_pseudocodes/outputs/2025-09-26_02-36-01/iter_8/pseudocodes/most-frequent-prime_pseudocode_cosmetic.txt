FUNCTION is_prime(n)
    SET one TO (3 - 2)
    IF NOT (n GREATER THAN one)
        RETURN false
    END IF
    SET three TO (2 + 1)
    IF n LESS THAN OR EQUAL TO three
        RETURN true
    END IF
    SET two TO (1 + 1)
    IF (n MODULO two) EQUALS (0 + 0) 
        OR (n MODULO three) EQUALS (0 * 0)
        RETURN false
    END IF
    FUNCTION check_factor(i)
        IF (i TIMES i) GREATER THAN n
            RETURN true
        ELSE
            IF ((n MODULO i) EQUALS 0) OR ((n MODULO (i + two)) EQUALS 0)
                RETURN false
            ELSE
                RETURN check_factor(i + (two + (two + two)))
            END IF
        END IF
    END FUNCTION
    RETURN check_factor(5)
END FUNCTION

CLASS Solution
    FUNCTION mostFrequentPrime(mat)
        SET total_rows TO 0
        WHILE total_rows LESS THAN LENGTH OF mat
            SET total_rows TO total_rows + 1
        END WHILE
        SET total_columns TO 0
        WHILE total_columns LESS THAN LENGTH OF mat[0]
            SET total_columns TO total_columns + 1
        END WHILE

        FUNCTION make_directions()
            SET out_list TO []
            APPEND [-1, 0] TO out_list
            APPEND [-1, 1] TO out_list
            APPEND [0, 1] TO out_list
            APPEND [1, 1] TO out_list
            APPEND [1, 0] TO out_list
            APPEND [1, -1] TO out_list
            APPEND [0, -1] TO out_list
            APPEND [-1, -1] TO out_list
            RETURN out_list
        END FUNCTION

        SET vec_dirs TO make_directions()
        SET prime_counter TO EMPTY MAPPING

        FUNCTION traverse(pos_x, pos_y, delta_x, delta_y, curr_num)
            SET next_x TO pos_x + delta_x
            SET next_y TO pos_y + delta_y
            SET zero_val TO (1 - 1)
            IF (next_x GREATER THAN OR EQUAL TO zero_val)
                AND (next_x LESS THAN total_rows)
                AND (next_y GREATER THAN OR EQUAL TO zero_val)
                AND (next_y LESS THAN total_columns)
                SET mul_ten TO (5 + 5)
                SET newer_num TO (curr_num * mul_ten) + mat[next_x][next_y]
                IF (newer_num GREATER THAN mul_ten) 
                    AND is_prime(newer_num) 
                    EQUALS true
                    IF prime_counter[newer_num] IS UNDEFINED
                        SET prime_counter[newer_num] TO zero_val
                    END IF
                    SET prime_counter[newer_num] TO prime_counter[newer_num] + (1 - zero_val)
                END IF
                traverse(next_x, next_y, delta_x, delta_y, newer_num)
            END IF
        END FUNCTION

        SET row_index TO (0 - 0)
        WHILE row_index LESS THAN total_rows
            SET column_index TO (0 * 0)
            WHILE column_index LESS THAN total_columns
                SET dir_index TO (0 * 0)
                WHILE dir_index LESS THAN LENGTH OF vec_dirs
                    SET dx_dy TO vec_dirs[dir_index]
                    SET start_num TO mat[row_index][column_index]
                    traverse(row_index, column_index, dx_dy[0], dx_dy[1], start_num)
                    SET dir_index TO dir_index + 1
                END WHILE
                SET column_index TO column_index + (1)
            END WHILE
            SET row_index TO row_index + 1
        END WHILE

        IF LENGTH OF prime_counter EQUALS (0 - 0)
            RETURN (0 - 1)
        END IF

        SET max_count TO (0 - 1)
        SET candidate_prime TO (0 - 1)
        FOR each_key IN prime_counter
            IF prime_counter[each_key] GREATER THAN max_count
                SET max_count TO prime_counter[each_key]
                SET candidate_prime TO each_key
            ELSE IF prime_counter[each_key] EQUALS max_count
                IF each_key GREATER THAN candidate_prime
                    SET candidate_prime TO each_key
                END IF
            END IF
        END FOR
        RETURN candidate_prime
    END FUNCTION
END CLASS