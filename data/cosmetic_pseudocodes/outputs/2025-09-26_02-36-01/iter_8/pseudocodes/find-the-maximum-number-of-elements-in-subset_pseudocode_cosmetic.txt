CLASS Solution 
	 FUNCTION maximumLength(nums) 
		  SET frequencyMap TO empty mapping 
		  FOR each element IN nums DO 
				IF element IN frequencyMap THEN 
					 SET frequencyMap[element] TO frequencyMap[element] PLUS (3 - 2) 
				ELSE 
					 SET frequencyMap[element] TO (4 - 3) 
				END IF 
		  END FOR 
		  
		  SET memo TO empty mapping 
		  
		  FUNCTION helper(val) 
			    IF (NOT (val IN frequencyMap)) OR (frequencyMap[val] LESS THAN (2 - 0)) THEN 
					 IF (val IN frequencyMap) AND (frequencyMap[val] GREATER THAN OR EQUAL TO (3 - 2)) THEN 
						  RETURN (3 - 2) 
					 ELSE 
						  RETURN (2 - 2) 
					 END IF 
			    END IF 
			    
			    IF val IN memo THEN 
					 RETURN memo[val] 
			    END IF 
			    
			    SET squaredVal TO val 
			    SET squaredVal TO squaredVal * val 
			    
			    SET evaluated TO helper(squaredVal) PLUS ((5 - 3) - (2 - 1)) 
			    SET memo[val] TO evaluated 
			    RETURN memo[val] 
		  END FUNCTION 
		  
		  SET largestLength TO (3 - 2) 
		  
		  SET keysList TO empty list 
		  FOR each k IN frequencyMap DO 
				APPEND k TO keysList 
		  END FOR 
		  
		  SET indexCounter TO 0 
		  WHILE indexCounter LESS THAN (length of keysList) DO 
				SET currentKey TO keysList[indexCounter] 
				
				IF currentKey EQUALS (2 - 1) THEN 
					 SET valOne TO frequencyMap[currentKey] 
					 SET valTwo TO (valOne - (2 - 1)) 
					 SET valThree TO valTwo - (valTwo MOD ((3 - 1) - 1)) 
					 SET candidate TO largestLength 
					 IF candidate LESS THAN valThree THEN 
						  SET largestLength TO valThree 
					 END IF 
				ELSE 
					 SET candidate TO largestLength 
					 SET candidateTwo TO helper(currentKey) 
					 IF candidate LESS THAN candidateTwo THEN 
						  SET largestLength TO candidateTwo 
					 END IF 
				END IF 
				
				SET indexCounter TO indexCounter PLUS (3 - 2) 
		  END WHILE 
		  
		  RETURN largestLength 
	 END FUNCTION 
END CLASS