CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
           DEFINE result AS 0
           DEFINE alpha AS 0
           DEFINE beta AS 0
           DEFINE heightCount AS 1
           DEFINE widthCount AS 1

           PROCEDURE DescSort(list)
               FOR x FROM 0 TO LENGTH(list) - 2
                   FOR y FROM x + 1 TO LENGTH(list) - 1
                       IF list[x] < list[y]
                           DEFINE temp AS list[x]
                           list[x] = list[y]
                           list[y] = temp
                       END IF
                   END FOR
               END FOR
           END PROCEDURE

           CALL DescSort(horizontalCut)
           CALL DescSort(verticalCut)

           LABEL loop_check:
               IF NOT (alpha < LENGTH(horizontalCut) OR beta < LENGTH(verticalCut)) THEN GOTO end_loop
               IF beta = LENGTH(verticalCut) OR (alpha < LENGTH(horizontalCut) AND horizontalCut[alpha] > verticalCut[beta])
                   LET incrementVal = horizontalCut[alpha]
                   LET addVal = incrementVal * widthCount
                   SET result = result + addVal
                   SET heightCount = heightCount + 1
                   SET alpha = alpha + 1
                   GOTO loop_check
               ELSE
                   LET incrementVal = verticalCut[beta]
                   LET addVal = incrementVal * heightCount
                   SET result = result + addVal
                   SET widthCount = widthCount + 1
                   SET beta = beta + 1
                   GOTO loop_check
               END IF
           end_loop:
           
           RETURN result
    END FUNCTION
END CLASS