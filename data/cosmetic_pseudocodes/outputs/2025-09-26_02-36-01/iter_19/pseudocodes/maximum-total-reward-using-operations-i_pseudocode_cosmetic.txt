CLASS Solution
	FUNCTION maxTotalReward(rewardValues)
		FUNCTION dfs(p)
			LET w BE bisect_right_sorted_position(rewardValues, p)
			LET h BE 0
			LET z BE w
			WHILE z < LENGTH(rewardValues)
				LET q BE rewardValues[z]
				IF NOT (p + q) <= p THEN
					LET m BE dfs(p + q)
					LET r BE q + m
					IF r > h THEN
						SET h TO r
					END IF
				END IF
				SET z TO z + 1
			END WHILE
			RETURN h
		END FUNCTION
		
		CALL sort_ascending(rewardValues)
		RETURN dfs(0)
	END FUNCTION
END CLASS

FUNCTION bisect_right_sorted_position(arr, val)
	LET leftBound BE 0
	LET rightBound BE LENGTH(arr)
	WHILE leftBound < rightBound
		LET middleIndex BE (leftBound + rightBound) / 2
		IF val < arr[middleIndex] OR val == arr[middleIndex] THEN
			SET leftBound TO middleIndex + 1
		ELSE
			SET rightBound TO middleIndex
		END IF
	END WHILE
	RETURN leftBound
END FUNCTION

FUNCTION sort_ascending(arr)
	// Simple insertion sort implementation
	LET x_idx BE 1
	WHILE x_idx < LENGTH(arr)
		LET y_val BE arr[x_idx]
		LET y_pos BE x_idx
		WHILE y_pos > 0 AND arr[y_pos - 1] > y_val
			SET arr[y_pos] TO arr[y_pos - 1]
			SET y_pos TO y_pos - 1
		END WHILE
		SET arr[y_pos] TO y_val
		SET x_idx TO x_idx + 1
	END WHILE
END FUNCTION