CLASS Solution
    FUNCTION maxPathLength(coordinates, k)
          SET omega TO (coordinates[k])[0]
              SET psi TO (coordinates[k])[1]
           SET beta TO []
        SET pi TO 0
      WHILE pi < LENGTH(coordinates)
           SET nu TO (coordinates[pi])[0]
              SET tau TO (coordinates[pi])[1]
               IF (nu < omega)
            IF (tau < psi)
       beta = beta + [(nu, tau)]
           END IF
                END IF
           SET pi TO pi + 1
           END WHILE
        SET sigma TO []
        SET chi TO 0
        REPEAT
             IF chi >= LENGTH(coordinates)
               BREAK
             END IF
             SET alpha TO (coordinates[chi])[0]
                SET gamma TO (coordinates[chi])[1]
            IF NOT ((alpha <= omega) OR (gamma <= psi))
          sigma APPEND (alpha, gamma)
             END IF
            SET chi TO chi + 1
        UNTIL FALSE
      SET delta TO self._lengthOfLIS(beta)
        SET epsilon TO self._lengthOfLIS(sigma)
        RETURN (1 + delta) + epsilon
    END FUNCTION

    FUNCTION _lengthOfLIS(coordinates)
        PROCEDURE _bisectLeft(arr, val)
            SET low TO 0
            SET high TO LENGTH(arr)
            WHILE low < high
                SET mid TO (low + high) / 2
                 IF NOT (arr[mid] < val)
                    SET high TO mid
                ELSE
                    SET low TO mid + 1
                END IF
             END WHILE
             RETURN low
         END PROCEDURE

        SET sortedCoords TO coordinates
        SORT sortedCoords BY (FIRST_ELEMENT(sortedCoords)) ASCENDING THEN BY (SECOND_ELEMENT(sortedCoords)) DESCENDING
        SET tau TO []
        SET kappa TO 0
        WHILE kappa < LENGTH(sortedCoords)
            SET unused TO (sortedCoords[kappa])[0]
            SET y_val TO (sortedCoords[kappa])[1]
            IF (LENGTH(tau) = 0) OR (tau[LENGTH(tau) - 1] < y_val)
                tau APPEND y_val
            ELSE
                SET pos TO _bisectLeft(tau, y_val)
                SET tau[pos] TO y_val
            END IF
            SET kappa TO kappa + 1
        END WHILE
        RETURN LENGTH(tau)
    END FUNCTION
END CLASS