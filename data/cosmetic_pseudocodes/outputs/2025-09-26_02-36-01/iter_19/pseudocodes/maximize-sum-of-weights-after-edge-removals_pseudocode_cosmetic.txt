CLASS UnionFind  
    FUNCTION __init__(self, size)  
          SET aleph TO size  
          SET gamma TO 0  
          SET xi TO aleph  
          SET jolt TO -1  
          SET self.parent TO empty list  
          WHILE gamma LESS THAN xi  
            APPEND gamma TO self.parent  
            SET gamma TO gamma PLUS 1  
          END WHILE  
          SET self.rank TO empty list  
          FOR psi FROM 0 TO aleph MINUS 1  
             APPEND 0 TO self.rank  
          END FOR  
    END FUNCTION  
  
    FUNCTION find(self, omega)  
        SET delta TO self.parent[omega]  
        WHILE delta NOT EQUALS omega  
            SET kappa TO self.parent[delta]  
            SET self.parent[omega] TO self.find(kappa)  
            SET delta TO self.parent[omega]  
            SET omega TO omega  
        END WHILE  
        RETURN delta  
    END FUNCTION  
  
    FUNCTION union(self, tau, sigma)  
        SET alpha TO self.find(tau)  
        SET beta TO self.find(sigma)  
        IF alpha NOT EQUALS beta THEN  
            IF self.rank[alpha] GREATER THAN self.rank[beta] THEN  
                SET self.parent[beta] TO alpha  
            ELSE  
                IF self.rank[alpha] LESS THAN self.rank[beta] THEN  
                    SET self.parent[alpha] TO beta  
                ELSE  
                    SET self.parent[beta] TO alpha  
                    SET self.rank[alpha] TO self.rank[alpha] PLUS 1  
                END IF  
            END IF  
        END IF  
    END FUNCTION  
END CLASS  
  
CLASS Solution  
    FUNCTION maximizeSumOfWeights(self, edges, k)  
          SET foxtrot TO LENGTH edges  
          SET delta TO foxtrot PLUS  1  
          SET degree TO empty list  
          SET idx TO 0  
          WHILE idx LESS THAN delta  
              APPEND 0 TO degree  
              SET idx TO idx PLUS 1  
          END WHILE  
          SET upf TO UnionFind(delta)  
  
          FUNCTION descendingSort(arr)  
              FUNCTION swap(i, j)  
                  SET temp TO arr[i]  
                  SET arr[i] TO arr[j]  
                  SET arr[j] TO temp  
              END FUNCTION  
              SET n TO LENGTH arr  
              SET m TO n MINUS 1  
              FOR x FROM 0 TO m  
                  FOR y FROM 0 TO m MINUS x  
                      IF arr[y][2] LESS THAN arr[y PLUS 1][2] THEN  
                          CALL swap(y, y PLUS 1)  
                      END IF  
                  END FOR  
              END FOR  
          END FUNCTION  
  
          CALL descendingSort(edges)  
  
          SET omega TO 0  
  
          FUNCTION processEdge(index)  
              IF index GREATER OR EQUAL TO LENGTH edges THEN  
                  RETURN  
              END IF  
              SET edge TO edges[index]  
              SET a TO edge[0]  
              SET b TO edge[1]  
              SET c TO edge[2]  
              IF (degree[a] LESS THAN k) AND (degree[b] LESS THAN k) THEN  
                  SET rootA TO upf.find(a)  
                  SET rootB TO upf.find(b)  
                  IF rootA NOT EQUALS rootB THEN  
                      CALL upf.union(a, b)  
                      SET degree[a] TO degree[a] PLUS 1  
                      SET degree[b] TO degree[b] PLUS 1  
                      SET omega TO omega PLUS c  
                  END IF  
              END IF  
              CALL processEdge(index PLUS 1)  
          END FUNCTION  
  
          CALL processEdge(0)  
  
          RETURN omega  
    END FUNCTION  
END CLASS