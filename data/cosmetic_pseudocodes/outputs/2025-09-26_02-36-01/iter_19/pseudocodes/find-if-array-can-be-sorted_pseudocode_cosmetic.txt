CLASS Solution
    FUNCTION canSortArray(nums)
        FUNCTION tally_bits(value)
            SET accumulator TO 0
            SET mask TO 1
            WHILE value NOT EQUAL TO 0
                IF (value BITWISE_AND mask) NOT EQUAL TO 0
                    SET accumulator TO accumulator PLUS 1
                END IF
                SET value TO value SHIFT_RIGHT 1
            END WHILE
            RETURN accumulator
        END FUNCTION
        
        SET total TO LENGTH OF nums
        SET ordered_list TO EMPTY LIST
        FOR index FROM 0 TO total MINUS 1
            APPEND element at index of nums TO ordered_list
        END FOR
        
        FUNCTION simple_sort(array)
            SET changed TO TRUE
            WHILE changed
                SET changed TO FALSE
                FOR k FROM 0 TO LENGTH OF array MINUS 2
                    IF (tally_bits(element at k of array) EQUALS tally_bits(element at k PLUS 1 of array)) AND (element at k of array GREATER THAN element at k PLUS 1 of array)
                        SET auxiliary TO element at k of array
                        SET element at k of array TO element at k PLUS 1 of array
                        SET element at k PLUS 1 of array TO auxiliary
                        SET changed TO TRUE
                    END IF
                END FOR
            END WHILE
            RETURN array
        END FUNCTION
        
        SET sorted_copy TO simple_sort(ordered_list)
        
        SET is_equal TO TRUE
        IF LENGTH OF nums NOT EQUAL TO LENGTH OF sorted_copy
            SET is_equal TO FALSE
        ELSE
            FOR pos FROM 0 TO total MINUS 1
                IF element at pos of nums NOT EQUAL TO element at pos of sorted_copy
                    SET is_equal TO FALSE
                    BREAK
                END IF
            END FOR
        END IF
        
        RETURN is_equal
    END FUNCTION
END CLASS