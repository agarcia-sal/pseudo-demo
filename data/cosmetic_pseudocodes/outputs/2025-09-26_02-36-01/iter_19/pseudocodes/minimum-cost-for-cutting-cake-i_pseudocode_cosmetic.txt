CLASS Solution
	FUNCTION minimumCost(m n horizontalCut verticalCut)
		PROCEDURE sortDescending(arr)
			DEFINE size TO LENGTH(arr)
			FOR idx FROM 0 TO size - 2
				FOR pos FROM 0 TO size - idx - 2
					IF arr[pos] LESS THAN arr[pos + 1]
						DEFINE tempNum TO arr[pos]
						SET arr[pos] TO arr[pos + 1]
						SET arr[pos + 1] TO tempNum
					END IF
				END FOR
			END FOR
		END PROCEDURE

        CALL sortDescending(horizontalCut)
        CALL sortDescending(verticalCut)

		SET aggregate TO 0
		SET firstIndex TO 0
		SET secondIndex TO 0
		SET firstCount TO 1
		SET secondCount TO 1

		WHILE NOT (firstIndex GREATER THAN OR EQUAL TO m - 1 AND secondIndex GREATER THAN OR EQUAL TO n - 1)
			IF secondIndex EQUAL TO n - 1
				SET aggregate TO aggregate + horizontalCut[firstIndex] * secondCount
				firstCount = firstCount + 1
				firstIndex = firstIndex + 1
			ELSE IF firstIndex LESS THAN m - 1 AND horizontalCut[firstIndex] GREATER THAN verticalCut[secondIndex]
				SET tempValue TO horizontalCut[firstIndex]
				SET product TO tempValue * secondCount
				SET aggregate TO aggregate + product
				firstCount = firstCount + 1
				firstIndex = firstIndex + 1
			ELSE
				SET multiplier TO verticalCut[secondIndex]
				SET result TO multiplier * firstCount
				aggregate = aggregate + result
				secondCount = secondCount + 1
				secondIndex = secondIndex + 1
			END IF
		END WHILE

		RETURN aggregate
	END FUNCTION
END CLASS