FUNCTION is_prime(alpha)  
  SET omega TO (1 + 0)  
  IF (alpha <= omega) THEN  
    RETURN false  
  END IF  
  SET beta TO (2 + 1)  
  IF (alpha <= beta) THEN  
    RETURN true  
  END IF  
  SET zeta TO 2  
  SET eta TO 3  
  IF ((alpha % zeta) = 0) OR ((alpha % eta) = 0) THEN  
    RETURN false  
  END IF  
  SET phi TO 5  
  REPEAT  
    IF (phi * phi) > alpha THEN  
      BREAK  
    END IF  
    IF ((alpha % phi) = 0) OR ((alpha % (phi + 2)) = 0) THEN  
      RETURN false  
    END IF  
    SET phi TO (phi + 6)  
  UNTIL false  
  RETURN true  
END FUNCTION  

CLASS Solution  
  FUNCTION mostFrequentPrime(rho)  
      SET xi TO LENGTH(rho)  
      SET psi TO LENGTH(rho[0])  
      SET delta TO [(-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1)]  
      DECLARE theta AS EMPTY MAP FROM ELEMENTS TO INTEGERS  

      FUNCTION traverse(kappa, lambda, mu, nu, sigma)  
          SET upsilon TO (kappa + mu)  
          SET tau TO (lambda + nu)  
          IF (upsilon >= 0) AND (upsilon < xi) AND (tau >= 0) AND (tau < psi) THEN  
              SET chi TO ((sigma * 10) + rho[upsilon][tau])  
              IF (chi > 10) AND (is_prime(chi) = true) THEN  
                  IF theta.CONTAINS_KEY(chi) THEN  
                      SET theta[chi] TO (theta[chi] + 1)  
                  ELSE  
                      SET theta[chi] TO 1  
                  END IF  
              END IF  
              CALL traverse(upsilon, tau, mu, nu, chi)  
          END IF  
      END FUNCTION  

      SET kappa TO 0  
      WHILE kappa < xi DO  
          SET lambda TO 0  
          WHILE lambda < psi DO  
              SET mu_nu_ITERATOR TO 0  
              WHILE mu_nu_ITERATOR < LENGTH(delta) DO  
                  SET mu TO delta[mu_nu_ITERATOR][0]  
                  SET nu TO delta[mu_nu_ITERATOR][1]  
                  CALL traverse(kappa, lambda, mu, nu, rho[kappa][lambda])  
                  SET mu_nu_ITERATOR TO (mu_nu_ITERATOR + 1)  
              END WHILE  
              SET lambda TO (lambda + 1)  
          END WHILE  
          SET kappa TO (kappa + 1)  
      END WHILE  

      IF LENGTH(theta) = 0 THEN  
          RETURN -1  
      END IF  

      SET omega_prime TO -1  
      SET gamma_prime TO -1  
      FOR EACH key IN KEYS(theta) DO  
          IF (theta[key] > omega_prime) OR ((theta[key] = omega_prime) AND (key > gamma_prime)) THEN  
              SET omega_prime TO theta[key]  
              SET gamma_prime TO key  
          END IF  
      END FOR  
      RETURN gamma_prime  
  END FUNCTION  
END CLASS