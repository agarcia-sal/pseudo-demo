CLASS Solution
    FUNCTION unmarkedSumArray(nums FUNCTION PARAMETER, queries FUNCTION PARAMETER) RETURNS list
      SET helperHeap TO []
      PROCEDURE buildHeap(arr)
          LET n TO LENGTH arr
          LET p TO (n DIV 2) - 1
          LOOP WHILE p >= 0
              CALL siftDown(arr, p, n)
              SET p TO p - 1
          END LOOP
      END PROCEDURE
      PROCEDURE siftDown(heapArray, startIdx, heapSize)
          SET parent TO startIdx
          LOOP WHILE TRUE
              SET leftChild TO (2 * parent) + 1
              SET rightChild TO (2 * parent) + 2
              SET smallest TO parent
              IF leftChild < heapSize AND heapArray[leftChild][0] < heapArray[smallest][0] THEN
                  SET smallest TO leftChild
              END IF
              IF rightChild < heapSize AND heapArray[rightChild][0] < heapArray[smallest][0] THEN
                  SET smallest TO rightChild
              END IF
              IF smallest = parent THEN RETURN END IF
              SWAP heapArray[parent], heapArray[smallest]
              SET parent TO smallest
          END LOOP
      END PROCEDURE
      PROCEDURE extractMin(heapArray)
          IF LENGTH heapArray = 0 THEN RETURN NULL END IF
          LET root TO heapArray[0]
          SET heapArray[0] TO heapArray[LENGTH heapArray - 1]
          REMOVE last element from heapArray
          CALL siftDown(heapArray, 0, LENGTH heapArray)
          RETURN root
      END PROCEDURE

      FOR each idxElem AND valElem IN ENUMERATE(nums)
          APPEND [valElem, idxElem] TO helperHeap
      END FOR
      CALL buildHeap(helperHeap)

      SET flaggedIndices TO EMPTY SET
      LET cumulativeSum TO 0
      FOR each itemNum IN nums
          SET cumulativeSum TO cumulativeSum + itemNum
      END FOR
      LET answerList TO []

      LET queryIterator TO 0
      LOOP WHILE queryIterator < LENGTH queries
          LET iterIdx TO queries[queryIterator][0]
          LET iterK TO queries[queryIterator][1]
          IF NOT flaggedIndices CONTAINS iterIdx THEN
              INSERT iterIdx INTO flaggedIndices
              SET cumulativeSum TO cumulativeSum - nums[iterIdx]
          END IF

          LET loopCount TO 0
          LOOP WHILE loopCount < iterK
              IF LENGTH helperHeap = 0 THEN BREAK END IF
              LET candidate TO extractMin(helperHeap)
              IF candidate IS NULL THEN BREAK END IF
              LET candidateVal TO candidate[0]
              LET candidateIdx TO candidate[1]
              IF NOT flaggedIndices CONTAINS candidateIdx THEN
                  INSERT candidateIdx INTO flaggedIndices
                  SET cumulativeSum TO cumulativeSum - candidateVal
                  SET loopCount TO loopCount + 1
              END IF
          END LOOP

          APPEND cumulativeSum TO answerList
          SET queryIterator TO queryIterator + 1
      END LOOP

      RETURN answerList
    END FUNCTION
END CLASS