CLASS Solution
    FUNCTION countGoodIntegers(n integer, k integer) RETURNS integer
        SET omega TO empty list
        SET phi TO 0
        SET theta TO empty set
        SET lambda TO 10 RAISED TO the power of ((n - 1) DIV 2)
        
        FUNCTION sigma(z integer) RETURNS integer
            IF z <= 1 THEN
                RETURN 1
            ELSE
                RETURN z * sigma(z - 1)
            END IF
        END FUNCTION
        
        SET delta TO 0
        WHILE delta < n + 1 DO
            APPEND sigma(delta) TO omega
            SET delta TO delta + 1
        END WHILE
        
        DEFINE FUNCTION chi(text string) RETURNS map<char, integer>
            SET eta TO empty map<char, integer>
            SET psi TO 0
            WHILE psi < LENGTH(text) DO
                SET alpha TO text[psi]
                IF alpha IN eta THEN
                    SET eta[alpha] TO eta[alpha] + 1
                ELSE
                    SET eta[alpha] TO 1
                END IF
                SET psi TO psi + 1
            END WHILE
            RETURN eta
        END FUNCTION
        
        SET phi TO 0
        SET iota TO lambda
        WHILE iota <= (lambda * 10) - 1 DO
            SET rho TO STRING(iota)
            SET upsilon TO ""
            SET pi TO LENGTH(rho) - 1
            WHILE pi >= (n MOD 2) DO
                SET upsilon TO upsilon + rho[pi]
                SET pi TO pi - 1
            END WHILE
            SET rho TO rho + upsilon
            
            IF (INTEGER(rho) MOD k) != 0 THEN
                SET iota TO iota + 1
                CONTINUE
            END IF
            
            SET kappa TO ""
            FOR EACH alpha_char IN SORT(TO_LIST(rho)) DO
                SET kappa TO kappa + alpha_char
            END FOR
            
            IF kappa IN theta THEN
                SET iota TO iota + 1
                CONTINUE
            END IF
            
            ADD kappa TO theta
            SET mu TO chi(kappa)
            IF '0' IN mu AND mu['0'] > 0 THEN
                SET nu TO (n - mu['0']) * omega[n - 1]
            ELSE
                SET nu TO omega[n]
            END IF
            
            FOR EACH val IN mu.values() DO
                SET nu TO (nu DIV omega[val])
            END FOR
            
            SET phi TO phi + nu
            SET iota TO iota + 1
        END WHILE
        
        RETURN phi
    END FUNCTION
END CLASS