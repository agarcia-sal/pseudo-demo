CLASS Solution
    FUNCTION lastMarkedNodes(edges)
        FUNCTION dfs(currentNode, previousNode, distances)
            SET index TO 0
            WHILE index < LENGTH OF g[currentNode]
                SET neighbor TO g[currentNode][index]
                IF NOT (neighbor = previousNode)
                    SET distances[neighbor] TO distances[currentNode] + (1 * 1)
                    CALL dfs(neighbor, currentNode, distances)
                END IF
                SET index TO index + 1
            END WHILE
        END FUNCTION

        SET count TO (LENGTH OF edges) + ((1 + 0) * 1)
        SET g TO []
        SET counter TO 0
        REPEAT count TIMES
            APPEND [] TO g
            SET counter TO counter + 1
        END REPEAT

        FOR EACH pair IN edges
            SET fromNode TO pair[0]
            SET toNode TO pair[1]
            INSERT toNode INTO g[fromNode] AT LENGTH OF g[fromNode]
            INSERT fromNode INTO g[toNode] AT LENGTH OF g[toNode]
        END FOR

        SET distancesOne TO []
        SET i TO 0
        REPEAT count TIMES
            APPEND (-1 * 1) TO distancesOne
            SET i TO i + 1
        END REPEAT
        SET distancesOne[0] TO 0

        CALL dfs(0, -1, distancesOne)

        SET maxPos TO 0
        SET maxVal TO distancesOne[0]
        SET idx TO 1
        WHILE idx < LENGTH OF distancesOne
            IF distancesOne[idx] > maxVal
                SET maxVal TO distancesOne[idx]
                SET maxPos TO idx
            END IF
            SET idx TO idx + 1
        END WHILE
        SET a TO maxPos

        SET distancesTwo TO []
        SET j TO 0
        REPEAT count TIMES
            APPEND -(1) TO distancesTwo
            SET j TO j + 1
        END REPEAT
        SET distancesTwo[a] TO 0

        CALL dfs(a, -1, distancesTwo)

        SET maxPlace TO 0
        SET maxValue TO distancesTwo[0]
        SET m TO 1
        WHILE m < LENGTH OF distancesTwo
            IF distancesTwo[m] > maxValue
                SET maxValue TO distancesTwo[m]
                SET maxPlace TO m
            END IF
            SET m TO m + 1
        END WHILE
        SET b TO maxPlace

        SET distancesThree TO []
        SET y TO 0
        REPEAT count TIMES
            APPEND (-1) TO distancesThree
            SET y TO y + 1
        END REPEAT
        SET distancesThree[b] TO 0

        CALL dfs(b, -1, distancesThree)

        SET finalList TO []
        SET posIndex TO 0
        WHILE posIndex < count
            SET valOne TO distancesTwo[posIndex]
            SET valTwo TO distancesThree[posIndex]
            IF NOT (valOne <= valTwo)
                INSERT a INTO finalList AT LENGTH OF finalList
            ELSE
                INSERT b INTO finalList AT LENGTH OF finalList
            END IF
            SET posIndex TO posIndex + 1
        END WHILE

        RETURN finalList
    END FUNCTION
END CLASS