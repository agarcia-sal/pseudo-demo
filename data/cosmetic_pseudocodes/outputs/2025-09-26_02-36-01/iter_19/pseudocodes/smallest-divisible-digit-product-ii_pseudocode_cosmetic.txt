CLASS Solution
    FUNCTION smallestNumber(num, t)
    LET omega, zeta TO self._getPrimeCount(t)
    LET xi TO FALSE
    IF NOT zeta
        LET xi TO TRUE
    END IF
    IF xi
        RETURN "-1"
    END IF
    LET chi TO self._getFactorCount(omega)
    LET phi TO 0
    FOR EACH tau IN chi.values()
        LET phi TO phi + tau
    END FOR
    IF phi > LENGTH(num)
        LET psi TO ""
        FOR EACH kappa, lambda IN chi.items()
            LET psi TO psi + kappa * lambda
        END FOR
        RETURN psi
    END IF
    LET rho TO _emptyCounter()
    FOR EACH psi IN num
        LET mue TO _toInt(psi)
        LET sigma TO FACTOR_COUNTS(mue)
        FOR EACH eta, theta IN sigma.items()
            LET rho[eta] TO rho.get(eta, 0) + theta
        END FOR
    END FOR
    LET upsilon TO LENGTH(num)
    FOR iota FROM 0 TO LENGTH(num) - 1
        IF num[iota] == "0"
            LET upsilon TO iota
            BREAK
        END IF
    END FOR
    IF upsilon == LENGTH(num) AND omega <= rho
        RETURN num
    END IF
    LET gamma TO LENGTH(num)
    FOR i, delta IN ENUMERATE_REVERSE(num)
        LET epsilon TO _toInt(delta)
        LET rho TO _dictSubtract(rho, FACTOR_COUNTS(epsilon))
        LET kappa TO LENGTH(num) - 1 - i
        IF i <= upsilon
            FOR z FROM epsilon + 1 TO 9
                LET chi TO self._getFactorCount(_dictSubtract(omega, _dictAdd(rho, FACTOR_COUNTS(z))))
                LET summa TO 0
                FOR value IN chi.values()
                    LET summa TO summa + value
                END FOR
                IF summa <= kappa
                    LET xi TO kappa - summa
                    LET delta1 TO ""
                    IF i > 0
                        LET delta1 TO SUBSTRING(num, 0, i)
                    END IF
                    LET chi_str TO ""
                    FOR key, val IN chi.items()
                        LET chi_str TO chi_str + key * val
                    END FOR
                    RETURN delta1 + _toString(z) + "1" * xi + chi_str
                END IF
            END FOR
        END IF
    END FOR
    LET chi TO self._getFactorCount(omega)
    LET total TO 0
    FOR val IN chi.values()
        LET total TO total + val
    END FOR
    LET part1 TO "1" * (LENGTH(num) + 1 - total)
    LET part2 TO ""
    FOR key, val IN chi.items()
        LET part2 TO part2 + key * val
    END FOR
    RETURN part1 + part2
    END FUNCTION

    FUNCTION _getPrimeCount(t)
    LET alpha TO _emptyCounter()
    LET primes TO [2, 3, 5, 7]
    FOR each prime IN primes
        WHILE t MOD prime == 0
            LET t TO t DIV prime
            LET alpha[prime] TO alpha.get(prime, 0) + 1
        END WHILE
    END FOR
    LET valid TO (t == 1)
    RETURN alpha, valid
    END FUNCTION

    FUNCTION _getFactorCount(count)
    LET n2 TO count.get(2, 0)
    LET n3 TO count.get(3, 0)
    LET n5 TO count.get(5, 0)
    LET n7 TO count.get(7, 0)
    LET q8 TO n2 DIV 3
    LET r2 TO n2 MOD 3
    LET q9 TO n3 DIV 2
    LET r3 TO n3 MOD 2
    LET q4 TO r2 DIV 2
    LET r4 TO r2 MOD 2
    LET s2 TO r4
    LET s3 TO r3
    LET s6 TO 0
    IF s2 == 1 AND s3 == 1
        LET s2 TO 0
        LET s3 TO 0
        LET s6 TO 1
    END IF
    IF s3 == 1 AND q4 == 1
        LET s2 TO 1
        LET s6 TO 1
        LET s3 TO 0
        LET q4 TO 0
    END IF
    RETURN _counterFromDict({
        "2": s2,
        "3": s3,
        "4": q4,
        "5": n5,
        "6": s6,
        "7": n7,
        "8": q8,
        "9": q9
    })
    END FUNCTION
END CLASS