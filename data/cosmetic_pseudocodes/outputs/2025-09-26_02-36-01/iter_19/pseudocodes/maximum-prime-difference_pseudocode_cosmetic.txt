CLASS Solution
    FUNCTION maximumPrimeDifference(nums)
        CONST primeSet = buildPrimeSet()
        VAR alpha = -1
        VAR beta = -1
        PROCEDURE analyzeIndices(pos, val)
            IF containsElement(primeSet, val) THEN
                IF alpha = -1 THEN
                    alpha := pos
                END IF
                beta := pos
            END IF
        END PROCEDURE
        PROCEDURE iterateList(lst, idx)
            IF idx < length(lst) THEN
                analyzeIndices(idx, elementAt(lst, idx))
                iterateList(lst, idx + 1)
            END IF
        END PROCEDURE
        iterateList(nums, 0)
        RETURN beta + (-1 * alpha)
    END FUNCTION

    FUNCTION buildPrimeSet()
        VAR container = emptySet()
        VAR elements = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
        addAll(container, elements)
        RETURN container
    END FUNCTION

    FUNCTION containsElement(setObj, item)
        FOR x IN toList(setObj)
            IF x = item THEN
                RETURN true
            END IF
        END FOR
        RETURN false
    END FUNCTION

    FUNCTION emptySet()
        RETURN newSet()
    END FUNCTION

    FUNCTION addAll(targetSet, listItems)
        FOR elt IN listItems
            addToSet(targetSet, elt)
        END FOR
    END FUNCTION

    FUNCTION elementAt(lst, idx)
        RETURN lst[idx]
    END FUNCTION

    FUNCTION length(lst)
        RETURN sizeOf(lst)
    END FUNCTION

    FUNCTION toList(setObj)
        RETURN convertSetToList(setObj)
    END FUNCTION

    FUNCTION newSet()
        RETURN {}
    END FUNCTION

    FUNCTION addToSet(s, val)
        s[val] := true
    END FUNCTION

    FUNCTION sizeOf(c)
        VAR countVar = 0
        FOR EACH _ IN c
            countVar := countVar + 1
        END FOR
        RETURN countVar
    END FUNCTION

    FUNCTION convertSetToList(setObj)
        VAR lstVar = []
        FOR EACH key IN setObj
            append(lstVar, key)
        END FOR
        RETURN lstVar
    END FUNCTION

    FUNCTION append(arr, value)
        arr[length(arr)] := value
    END FUNCTION
END CLASS