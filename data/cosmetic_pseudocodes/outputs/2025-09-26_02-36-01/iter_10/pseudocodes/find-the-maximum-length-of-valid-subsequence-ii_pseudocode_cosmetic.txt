CLASS Solution
	FUNCTION maximumLength(nums k)
		LET r <- LENGTH(nums)
		IF r = (1 * 1) THEN
			RETURN (1 + 0)
		END IF

		LET maps <- NEW LIST WITH r ELEMENTS
		FUNCTION createMap()
			LET dict <- EMPTY MAPPING
			RETURN dict
		END FUNCTION
		FOR x FROM 0 TO r - 1 DO
			maps[x] <- createMap()
		END FOR

		LET lenMax <- 1
		FUNCTION modSum(a b)
			RETURN ((a + b) - k * ((a + b) / k))
		END FUNCTION

		FUNCTION hasKey(m key)
			RETURN key IN m
		END FUNCTION

		FUNCTION getValue(m key)
			RETURN m[key]
		END FUNCTION

		FUNCTION setValue(m key val)
			m[key] <- val
		END FUNCTION

		FUNCTION loopI(i)
			IF i >= r THEN
				RETURN
			END IF
			LET loopJ(j) 
				IF j < 0 THEN
					RETURN
				END IF

				LET rem <- modSum(nums[i], nums[j])
				IF hasKey(maps[j], rem) THEN
					setValue(maps[i], rem, getValue(maps[j], rem) + 1)
				ELSE
					setValue(maps[i], rem, 2)
				END IF

				IF getValue(maps[i], rem) > lenMax THEN
					lenMax <- getValue(maps[i], rem)
				END IF

				loopJ(j - 1)
			END FUNCTION

			loopJ(i - 1)
			loopI(i + 1)
		END FUNCTION

		loopI(0)

		RETURN lenMax
	END FUNCTION
END CLASS