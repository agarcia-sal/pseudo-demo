CLASS Solution  
    FUNCTION numberOfPairs(points)  
        PROCEDURE loopK(xiVal, yiVal, xjVal, yjVal, nLen, si, sj, RESULT validFlag)  
            IF si GREATER THAN OR EQUAL TO nLen THEN
                SET validFlag TO true
                RETURN
            END IF
            IF si EQUALS sj OR si EQUALS sj THEN
                CALL loopK(xiVal, yiVal, xjVal, yjVal, nLen, si + 1, sj, validFlag)
                RETURN
            END IF
            SET tempx TO points[si][0]
            SET tempy TO points[si][1]
            IF (tempx GREATER THAN OR EQUAL TO xiVal AND tempx LESS THAN OR EQUAL TO xjVal) AND (tempy LESS THAN OR EQUAL TO yiVal AND tempy GREATER THAN OR EQUAL TO yjVal) THEN
                SET validFlag TO false
                RETURN
            END IF
            CALL loopK(xiVal, yiVal, xjVal, yjVal, nLen, si + 1, sj, validFlag)
        END PROCEDURE

        SET acc TO 0
        SET lengthPoints TO LENGTH OF points
        SET outerIdx TO 0
        WHILE outerIdx LESS THAN lengthPoints DO
            SET innerIdx TO 0
            WHILE innerIdx LESS THAN lengthPoints DO
                IF outerIdx NOT EQUAL innerIdx THEN
                    SET px TO points[outerIdx][0]
                    SET py TO points[outerIdx][1]
                    SET qx TO points[innerIdx][0]
                    SET qy TO points[innerIdx][1]
                    IF (px LESS THAN OR EQUAL TO qx) AND (py GREATER THAN OR EQUAL TO qy) THEN
                        SET isValid TO false
                        CALL loopK(px, py, qx, qy, lengthPoints, 0, innerIdx, isValid)
                        IF isValid THEN
                            SET acc TO acc + 1
                        END IF
                    END IF
                END IF
                SET innerIdx TO innerIdx + 1
            END WHILE
            SET outerIdx TO outerIdx + 1
        END WHILE
        RETURN acc
    END FUNCTION  
END CLASS