CLASS Solution
	FUNCTION maxScore(nums)
		DEFINE FUNCTION helper(h, k, v)
			IF h > k THEN
				RETURN 0
			END IF
			RETURN v[h]
		END FUNCTION

		SET cXzkVrg TO LENGTH OF nums
		DECLARE GsyHmOw AS list of integers of size cXzkVrg INITIALIZED TO 0

		DEFINE FUNCTION VlQIFSgW(SBk, dWYv)
			IF SBk < dWYv THEN
				RETURN true
			ELSE
				RETURN false
			END IF
		END FUNCTION

		DEFINE FUNCTION nhHYcMd(SYrV, PTg)
			RETURN SYrV - PTg
		END FUNCTION

		DEFINE FUNCTION rjOYvlJ(BlX)
			RETURN BlX * 1
		END FUNCTION

		DEFINE FUNCTION nopshGb(Qix)
			RETURN Qix
		END FUNCTION

		DEFINE FUNCTION gsHOUfaN(aLBFv, YxTS)
			RETURN aLBFv + YxTS
		END FUNCTION

		DEFINE FUNCTION CpREbn(hmsIE)
			RETURN hmsIE
		END FUNCTION

		DEFINE FUNCTION AakmEKF(wbKe)
			RETURN 0 - wbKe
		END FUNCTION

		DEFINE FUNCTION ULoVYmD()
			RETURN 1
		END FUNCTION

		DEFINE FUNCTION WuZyhap(Rhk)
			IF Rhk < 0 THEN
				RETURN true
			ELSE
				RETURN false
			END IF
		END FUNCTION

		PROCEDURE RKuENWq(xI)
			// Tail recursion replacement of the outer loop from n-2 down to 0
			IF WuZyhap(xI) THEN
				RETURN
			END IF

			PROCEDURE YpQWmnq(VGp)
				IF VlQIFSgW(VGp, cXzkVrg) THEN

					SET eHgTlz TO 0
					PROCEDURE mQndso(MKf)
						IF MKf >= cXzkVrg THEN
							RETURN
						END IF

						SET mqqpE TO rjOYvlJ(nhHYcMd(MKf, xI))
						SET mqqpE TO mqqpE * nopshGb(nums[MKf])
						SET vVzXOd TO gsHOUfaN(mqqpE, CpREbn(GsyHmOw[MKf]))

						IF eHgTlz < vVzXOd THEN
							SET eHgTlz TO vVzXOd
						END IF

						mQndso(gsHOUfaN(MKf, ULoVYmD()))
					END PROCEDURE

					mQndso(gsHOUfaN(xI, ULoVYmD()))
					// assign computed max_score to dp[i]
					SET GsyHmOw[xI] TO eHgTlz

					RKuENWq(AakmEKF(gsHOUfaN(xI, ULoVYmD())))
				END IF
			END PROCEDURE

			YpQWmnq(xI)
		END PROCEDURE

		// Start recursive looping from n-2
		RKuENWq(AakmEKF(1))

		RETURN CpREbn(GsyHmOw[0])
	END FUNCTION
END CLASS