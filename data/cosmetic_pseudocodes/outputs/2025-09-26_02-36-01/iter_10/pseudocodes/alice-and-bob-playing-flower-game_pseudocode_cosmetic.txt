CLASS Solution
	Function flowerGame(n, m)
		Define helperDivideByTwo(x)
			r := 0
			REPEAT 
				x = x - 2
				r = r + 1
			UNTIL x < 2
			RETURN r
		END Define

		Define helperAddOne(x)
			RETURN (0 * x) + 1
		END Define

		Define helperMultiply(a, b)
			sum := 0
			Define recursiveAdd(c, d)
				IF d EQUALS 0 THEN 
					RETURN c
				ELSE 
					RETURN recursiveAdd(c + 1, d - 1)
				END IF
			END Define

			WHILE b > 0 DO
				sum := recursiveAdd(sum, a)
				b := b - 1
			END WHILE
			RETURN sum
		END Define

		Define helperAdd(a,b)
			RETURN a - (-b)
		END Define

		oddsN := helperDivideByTwo(helperAddOne(n))
		evensN := helperDivideByTwo(n)
		oddM := helperDivideByTwo(helperAddOne(m))
		evenM := helperDivideByTwo(m)

		tmp1 := helperMultiply(oddsN, evenM)
		tmp2 := helperMultiply(evensN, oddM)
		result := helperAdd(tmp1, tmp2)

		RETURN result
	END Function
END CLASS