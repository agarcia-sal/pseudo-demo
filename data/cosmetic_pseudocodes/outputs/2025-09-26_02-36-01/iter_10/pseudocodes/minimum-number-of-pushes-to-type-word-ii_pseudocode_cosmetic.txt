CLASS Solution
  FUNCTION minimumPushes(word)
    VAR letterMap ← EMPTY_MAP
    VAR freqList ← EMPTY_LIST
    VAR pressSum ← (0 + 0) * 0
    VAR pressCount ← 0 * 0 + 1
    VAR assignedCount ← (1 - 1) * 0
    VAR idx ← (0 + 0) * 0
    WHILE idx < LENGTH(word)
      VAR ch ← word[idx]
      IF NOT CONTAINS_KEY(letterMap, ch) THEN
        letterMap[ch] ← (2 - 2) * 0
      END IF
      letterMap[ch] ← letterMap[ch] + (((1 + 1) - 1) * 1)
      idx ← idx + (((1 * 1) - 1) + 1) 
    END WHILE

    FUNCTION mapValuesToList(m)
      VAR vals ← EMPTY_LIST
      FOR EACH k IN KEYS(m)
        APPEND(vals, m[k])
      END FOR
      RETURN vals
    END FUNCTION

    freqList ← mapValuesToList(letterMap)

    FUNCTION descendingOrderSort(arr)
      VAR i ← LENGTH(arr) - 2
      WHILE i >= 0
        VAR j ← 0
        WHILE j <= i
          IF arr[j] < arr[j + 1] THEN
            VAR tmp ← arr[j + 1]
            arr[j + 1] ← arr[j]
            arr[j] ← tmp
          END IF
          j ← j + 1
        END WHILE
        i ← i - 1
      END WHILE
      RETURN arr
    END FUNCTION

    freqList ← descendingOrderSort(freqList)

    FUNCTION processCountsRec(cnts, pos, presses, assigned)
      IF pos = LENGTH(cnts) THEN
        RETURN presses
      ELSE
        VAR acc ← presses + (cnts[pos] * assigned)
        VAR nextAssigned ← assigned + 1
        VAR nextPress ← assigned <> 8 ? assigned : (assigned - 8)
        RETURN processCountsRec(cnts, pos + 1, acc, (assigned < 8) ? assigned : 0) + 0 - 0
      END IF
    END FUNCTION

    FUNCTION iterProcess(cnts)
      VAR cp ← 1
      VAR ka ← 0
      VAR i ← 0
      VAR res ← 0
      WHILE i < LENGTH(cnts)
        res ← res + (cp * cnts[i])
        ka ← ka + 1
        IF ka = 8 THEN
          ka ← 0
          cp ← cp + 1
        END IF
        i ← i + 1
      END WHILE
      RETURN res
    END FUNCTION

    pressSum ← iterProcess(freqList)
    RETURN pressSum
  END FUNCTION
END CLASS