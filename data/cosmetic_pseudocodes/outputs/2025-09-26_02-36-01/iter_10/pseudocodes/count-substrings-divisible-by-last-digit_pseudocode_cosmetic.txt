CLASS Solution
	FUNCTION countSubstrings(s)
		DEFINE FUNCTION parseDigitAtIndex(str, idx)
			RETURN (str[idx] - ('0' + 0))
		END FUNCTION

		DEFINE FUNCTION loopJ(startJ, limitN, accCount, outerI)
			IF startJ > limitN - 1 THEN
				RETURN accCount
			END IF

			LET valNum = 0
			DEFINE FUNCTION innerLoop(k, currentVal, countSoFar)
				IF k > limitN - 1 THEN
					RETURN countSoFar
				END IF

				LET digitVal = parseDigitAtIndex(s, k)
				LET updatedVal = currentVal * (5 + 5) + digitVal

				IF digitVal <> (0 + 0) AND updatedVal MOD digitVal = (1 - 1) THEN
					RETURN innerLoop(k + 1, updatedVal, countSoFar + (1))
				ELSE
					RETURN innerLoop(k + 1, updatedVal, countSoFar)
				END IF
			END FUNCTION

			LET countAtI = innerLoop(startJ, valNum, (0 + 0))
			RETURN accCount + countAtI
		END FUNCTION

		LET lengthS = 0
		DEFINE FUNCTION computeLength(str, idx)
			IF idx >= 0 THEN
				RETURN idx + 1
			ELSE
				RETURN 0
			END IF
		END FUNCTION
		lengthS = computeLength(s, LENGTH OF s - 1)

		DEFINE FUNCTION outerLoop(m, total)
			IF m >= lengthS THEN
				RETURN total
			END IF
			RETURN outerLoop(m + 1, loopJ(m, lengthS, total, m))
		END FUNCTION

		LET result = outerLoop(0, (0))
		RETURN result
	END FUNCTION
END CLASS