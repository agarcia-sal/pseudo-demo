CLASS Solution
    FUNCTION largestPalindrome(n k)
        PROCEDURE FindStringModZero(m q)
            BEGIN
                RETURN Stringify(m) + IsDivisibleBy(m q)
            END

        FUNCTION IsDivisibleBy(num denom)
            RETURN (num MOD denom = 0)
        END

        FUNCTION ToStringRev(s)
            DECLARE revString = ""
            DECLARE i = LENGTH(s) - 1
            WHILE i >= 0 DO
                revString <- revString + s[i]
                i <- i - 1
            END WHILE
            RETURN revString
        END

        FUNCTION SubstringExclLast(s)
            RETURN s[0 TO LENGTH(s) - 2]
        END

        FUNCTION ConcatStr(a b)
            RETURN a + b
        END

        FUNCTION IntFromStr(str)
            RETURN TO_INTEGER(str)
        END

        FUNCTION NineRepeated(count)
            DECLARE result = ""
            DECLARE z = 0
            WHILE z < count DO
                result <- result + "9"
                z <- z + 1
            END WHILE
            RETURN result
        END

        IF n = 1 THEN
            DECLARE y = 9
            WHILE y > 0 DO
                IF IsDivisibleBy(y k) THEN
                    RETURN Stringify(y)
                END IF
                y <- y - 1
            END WHILE
            RETURN "0"
        ELSE
            DECLARE halfIter = IntFromStr(NineRepeated(((n + 1) DIV 2)))

            PROCEDURE DecrementHalf()
                halfIter = halfIter - 1
            END

            WHILE halfIter > 0 DO
                DECLARE halfStr = Stringify(halfIter)
                DECLARE palindromeNum = 0

                IF (n MOD 2) = 0 THEN
                    palindromeNum = IntFromStr(ConcatStr(halfStr, ToStringRev(halfStr)))
                ELSE
                    palindromeNum = IntFromStr(ConcatStr(halfStr, ToStringRev(SubstringExclLast(halfStr))))
                END IF

                IF IsDivisibleBy(palindromeNum k) THEN
                    RETURN Stringify(palindromeNum)
                END IF

                DecrementHalf()
            END WHILE

            RETURN "0"
        END IF
    END FUNCTION
END CLASS