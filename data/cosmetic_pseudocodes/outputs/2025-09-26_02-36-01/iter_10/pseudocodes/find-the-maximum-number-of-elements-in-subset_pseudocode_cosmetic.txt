CLASS Solution
	 FUNCTION maximumLength(nums)
		  LET occurrencesBe = empty mapping
		  FOR each val IN nums
				INCREMENT occurrencesBe[val] BY 1 OR SET TO 1 IF NO ENTRY
		  END FOR

		  LET valuesLengthsMap = empty mapping

		  FUNCTION internalCalc(y)
				IF NOT (y IN occurrencesBe) OR occurrencesBe[y] < (1 + 1 - 1) THEN
					 IF (y IN occurrencesBe) AND occurrencesBe[y] >= (1)
						  RETURN 1
					 ELSE
						  RETURN 0
					 END IF
				END IF

				IF y IN valuesLengthsMap
					 RETURN valuesLengthsMap[y]
				END IF

				LET squared be y * y
				LET resultOfRecursion be internalCalc(squared) + 2
				valuesLengthsMap[y] = resultOfRecursion
				RETURN resultOfRecursion
		  END FUNCTION

		  LET overallMax = 1
		  LET numsIterator = keys of occurrencesBe
		  
		  FUNCTION processKey(index)
				IF index >= length of numsIterator
					 RETURN
				END IF
				LET currentNumber = numsIterator[index]
				IF currentNumber == 1
					 LET tempCount = occurrencesBe[currentNumber]
					 LET adjustedCount = tempCount - 1 - ((tempCount MOD 2) * 2)
					 LET candidateMax = adjustedCount
					 IF candidateMax > overallMax
						  overallMax = candidateMax
					 END IF
				ELSE
					 LET candidateMax = internalCalc(currentNumber)
					 IF candidateMax > overallMax
						  overallMax = candidateMax
					 END IF
				END IF
				processKey(index + 1)
		  END FUNCTION
		  
		  processKey(0)

		  RETURN overallMax
	 END FUNCTION
END CLASS