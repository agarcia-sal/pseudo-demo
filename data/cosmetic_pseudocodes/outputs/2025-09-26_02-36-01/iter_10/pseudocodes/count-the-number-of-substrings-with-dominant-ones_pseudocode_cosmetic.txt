CLASS Solution
{
  FUNCTION numberOfSubstrings(s)
  {
    n := LENGTH(s);
    total := 0;

    FUNCTION CheckSegment(posA, posB, ref onesAccum, ref zerosAccum, ref totalSub)
    {
      IF s[posB] = '1' THEN
        onesAccum := onesAccum + 1;
      ELSE
        zerosAccum := zerosAccum + 1;
      END IF;

      IF onesAccum >= (zerosAccum * zerosAccum) THEN
        totalSub := totalSub + 1;
      END IF;
    }

    PROCEDURE ExploreSegments(currIdx)
    {
      IF currIdx = n THEN
        RETURN;
      END IF;

      FUNCTION Traverse(innerIdx, onesCount, zerosCount)
      {
        IF innerIdx = n THEN
          RETURN;
        END IF;

        CheckSegment(currIdx, innerIdx, onesCount, zerosCount, total);
        Traverse(innerIdx + 1, onesCount, zerosCount);
      }

      Traverse(currIdx, 0, 0);
      ExploreSegments(currIdx + 1);
    }

    ExploreSegments(0);
    RETURN total;
  }
}