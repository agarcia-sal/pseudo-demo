CLASS Solution
{
    FUNCTION maximumValueSum(nums, k, edges)
    {
        SET accumulator TO 0
        SET counter_positive_diff TO 0
        SET smallest_delta TO +âˆž

        FUNCTION compute_xor(a, b)
        {
            RETURN a XOR b
        }

        FUNCTION absolute_val(val)
        {
            IF val < 0
                RETURN 0 - val
            ELSE
                RETURN val
        }

        FUNCTION max_val(a, b)
        {
            IF a > b
                RETURN a
            ELSE
                RETURN b
        }

        FUNCTION min_val(a, b)
        {
            IF a < b
                RETURN a
            ELSE
                RETURN b
        }

        FUNCTION iterate_index(index)
        {
            IF index >= LENGTH(nums)
                RETURN
            ELSE
                VAR current_num <- nums[index]
                VAR computed_xor <- compute_xor(current_num, k)
                VAR difference <- computed_xor - current_num

                IF difference > 0
                    SET counter_positive_diff TO counter_positive_diff + 1
                ENDIF

                SET accumulator TO accumulator + max_val(current_num, computed_xor)
                SET smallest_delta TO min_val(smallest_delta, absolute_val(difference))
                
                iterate_index(index + 1)
        }
        
        iterate_index(0)

        IF (counter_positive_diff MOD 2) != 0
            SET accumulator TO accumulator - smallest_delta
        ENDIF

        RETURN accumulator
    }
}