CLASS Solution
	FUNCTION nonSpecialCount(l r)
		FUNCTION is_prime(num)
			PROCEDURE check_divisibility(x y)
				IF (y MOD x) = 0 OR (y MOD (x + 2)) = 0 THEN
					RETURN false
				END IF
				RETURN true
			END PROCEDURE

			IF num <= 1 THEN
				RETURN false
			END IF
			IF num <= 3 THEN
				RETURN true
			END IF
			IF (num MOD 2) = 0 OR (num MOD 3) = 0 THEN
				RETURN false
			END IF

			VAR probe := 5
			WHILE probe * probe <= num
				IF check_divisibility(probe, num) = false THEN
					RETURN false
				END IF
				probe := probe + 6
			END WHILE

			RETURN true
		END FUNCTION

		FUNCTION count_primes_in_range(a b)
			VAR counter := 0
			VAR current := a
			WHILE current <= b
				IF is_prime(current) = true THEN
					counter := counter + 1
				END IF
				current := current + 1
			END WHILE
			RETURN counter
		END FUNCTION

		FUNCTION ceil_sqrt(x)
			VAR guess := 0
			WHILE guess * guess < x
				guess := guess + 1
			END WHILE
			RETURN guess
		END FUNCTION

		FUNCTION floor_sqrt(x)
			VAR guess := 0
			REPEAT
				guess := guess + 1
			UNTIL guess * guess > x
			RETURN guess - 1
		END FUNCTION

		VAR lower_bound := ceil_sqrt(l)
		VAR upper_bound := floor_sqrt(r)

		VAR num_special := count_primes_in_range(lower_bound, upper_bound)
		VAR range_size := (r - l) + 1

		RETURN range_size - num_special
	END FUNCTION
END CLASS