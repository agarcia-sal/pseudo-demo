CLASS Solution  
    FUNCTION numberOfSubmatrices(grid)  
  IF grid = [] OR grid[0] = [] THEN RETURN 0 END IF  
  LET alpha = LENGTH(grid)  
  LET beta = LENGTH(grid[0])  
  LET gamma = LIST()  
  FOR k FROM 0 TO alpha+1 DO  
    APPEND gamma A LIST()  
    FOR m FROM 0 TO beta+1 DO  
      APPEND gamma[k] A LIST([0,0])  
    END FOR  
  END FOR  
  PROCEDURE zeta(r, c)  
    RETURN gamma[r-1][c][0] + gamma[r][c-1][0] - gamma[r-1][c-1][0]  
  END PROCEDURE  
  PROCEDURE eta(r, c)  
    RETURN gamma[r-1][c][1] + gamma[r][c-1][1] - gamma[r-1][c-1][1]  
  END PROCEDURE  
  PROCEDURE increment_counts(r, c)  
    IF grid[r-1][c-1] = 'X' THEN gamma[r][c][0] = gamma[r][c][0] + 1  
    ELSE IF grid[r-1][c-1] = 'Y' THEN gamma[r][c][1] = gamma[r][c][1] + 1  
    END IF  
  END PROCEDURE  
  LET m = 1  
  WHILE m <= alpha DO  
    LET n = 1  
    WHILE n <= beta DO  
      gamma[m][n][0] = zeta(m,n)  
      gamma[m][n][1] = eta(m,n)  
      increment_counts(m,n)  
      n = n + 1  
    END WHILE  
    m = m + 1  
  END WHILE  
  LET total = 0  
  LET q = 1  
  WHILE q <= alpha DO  
    LET w = 1  
    WHILE w <= beta DO  
      LET u = gamma[q][w][0]  
      LET v = gamma[q][w][1]  
      IF (u > 0) AND (u = v) THEN total = total + 1 END IF  
      w = w + 1  
    END WHILE  
    q = q + 1  
  END WHILE  
  RETURN total  
    END FUNCTION  
END CLASS