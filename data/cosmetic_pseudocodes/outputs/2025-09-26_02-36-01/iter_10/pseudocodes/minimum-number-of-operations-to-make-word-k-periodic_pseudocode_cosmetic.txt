CLASS Solution
	Function minimumOperationsToMakeKPeriodic(word, k)
		Procedure substringExtractor(s, startIdx, endIdx)
			Var acc, idx
			acc ← ""
			idx ← startIdx
			Loop while idx ≤ endIdx
				acc ← acc + s[idx]
				idx ← idx + 1
			EndLoop
			Return acc
		EndProcedure

		Procedure countElements(arr, outMap)
			Var pos
			pos ← 0
			Loop while pos < LENGTH(arr)
				Var el
				el ← arr[pos]
				If el IN outMap Then
					outMap[el] ← outMap[el] + 1
				Else
					outMap[el] ← 1
				EndIf
				pos ← pos + 1
			EndLoop
		EndProcedure

		Var totalLength, sliceSegments : List, iterationCounter, tempSegment : String
		Var countingMap : Map(Of String->Integer), highestFreq, diffResult
		totalLength ← LENGTH(word)
		sliceSegments ← []
		iterationCounter ← 0

		Repeat
			If iterationCounter ≥ totalLength Then
				Exit Repeat
			EndIf
			tempSegment ← substringExtractor(word, iterationCounter, (iterationCounter + k) - 1)
			APPEND tempSegment TO sliceSegments
			iterationCounter ← iterationCounter + k
		Until False

		countingMap ← {}
		countElements(sliceSegments, countingMap)

		highestFreq ← 0
		ForEach eachKey IN countingMap.Keys()
			If countingMap[eachKey] > highestFreq Then
				highestFreq ← countingMap[eachKey]
			EndIf
		EndForEach

		diffResult ← LENGTH(sliceSegments) - highestFreq

		Return diffResult
	EndFunction
END CLASS