CLASS Solution
    FUNCTION sumDigitDifferences(nums)
        FUNCTION digit_difference(num1, num2)
            PROCEDURE incrementer(ref x)
                x ← x + 1
            END PROCEDURE

            VAR acc ← 0
            VAR p ← 0
            VAR len1 ← LENGTH(num1)
            VAR len2 ← LENGTH(num2)
            VAR limit ← IF len1 < len2 THEN len1 ELSE len2

            WHILE p < limit
                VAR chA ← num1[p]
                VAR chB ← num2[p]

                IF NOT (chA = chB) THEN
                    incrementer(acc)
                END IF

                p ← p + 1
            END WHILE

            RETURN acc
        END FUNCTION

        VAR sumAccumulator ← 0
        VAR size ← LENGTH(nums)
        VAR outer ← 0

        label_outer_loop:
        IF outer >= size THEN
            RETURN sumAccumulator
        END IF

        VAR inner ← outer + 1

        label_inner_loop:
        IF inner >= size THEN
            outer ← outer + 1
            GOTO label_outer_loop
        END IF

        VAR firstNum ← nums[outer]
        VAR secondNum ← nums[inner]
        VAR diff ← digit_difference(firstNum, secondNum)

        sumAccumulator ← sumAccumulator + diff

        inner ← inner + 1
        GOTO label_inner_loop
    END FUNCTION
END CLASS