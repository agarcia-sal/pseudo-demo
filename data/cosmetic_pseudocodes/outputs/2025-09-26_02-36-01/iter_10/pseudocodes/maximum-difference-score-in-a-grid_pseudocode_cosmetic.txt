CLASS Solution
	Function maxScore(grid)
		Declare uH as Integer = LENGTH(grid)
		Declare uW as Integer = LENGTH(grid[0])
		Declare Rk as List = []
		Declare eT as List
		Declare Ho as Integer
		Declare Pw as Integer
		Declare bD As Integer
		Declare Ed as Integer
		Declare Zw As Integer
		Declare qr as Integer
		Declare Po As Integer
		Declare Bc As Integer
		Declare XL as Integer
		Declare cx as Integer

		Function rY(externalList)
			Function Rd(rq, Vx, Yb)
				IF rq < 0 OR rq >= LENGTH(Vx) THEN
					Return Yb
				END IF
				Return Vx[rq]
			End Function
			Declare Cs as List = []
			Declare JR as Integer = 0
			Repeat
				IF JR >= uW THEN
					Exit Repeat
				END IF
				Cs = Cs + [Rd(JR, externalList, 1e9)]
				JR = JR + 1
			Until False
			Return Cs
		End Function

		Function gZ(length1, length2, ValInit)
			Declare Gv as List = []
			Declare Xh as Integer = 0
			Repeat
				IF Xh >= length1 THEN
					Exit Repeat
				END IF
				Declare YF as List = []
				Declare JD as Integer = 0
				Repeat
					IF JD >= length2 THEN
						Exit Repeat
					END IF
					YF = YF + [ValInit]
					JD = JD + 1
				Until False
				Gv = Gv + [YF]
				Xh = Xh + 1
			Until False
			Return Gv
		End Function

		eT = gZ(uH, uW, +1/0)
		eT[0][0] = grid[0][0]
		Bc = -1/0

		Function Ol()
			Declare kM as Integer = 1
			Repeat
				IF kM >= uW THEN
					Exit Repeat
				END IF
				IF eT[0][kM - 1] < grid[0][kM] THEN
					eT[0][kM] = eT[0][kM - 1]
				ELSE
					eT[0][kM] = grid[0][kM]
				END IF
				kM = kM + 1
			Until False
		End Function

		Function Gq()
			Declare an as Integer = 1
			Repeat
				IF an >= uH THEN
					Exit Repeat
				END IF
				IF eT[an - 1][0] < grid[an][0] THEN
					eT[an][0] = eT[an - 1][0]
				ELSE
					eT[an][0] = grid[an][0]
				END IF
				an = an + 1
			Until False
		End Function

		Function Yw()
			Declare td as Integer = 1
			Repeat
				IF td >= uH THEN
					Exit Repeat
				END IF
				Declare bF as Integer = 1
				Repeat
					IF bF >= uW THEN
						Exit Repeat
					END IF
					IF eT[td - 1][bF] < eT[td][bF - 1] THEN
						eT[td][bF] = eT[td - 1][bF]
					ELSE
						eT[td][bF] = eT[td][bF - 1]
					END IF
					Declare sV as Integer = grid[td][bF] - eT[td][bF]
					IF sV > Bc THEN
						Bc = sV
					END IF
					bF = bF + 1
				Until False
				td = td + 1
			Until False
		End Function

		Ol()
		Gq()
		Yw()

		Return Bc
	End Function
END CLASS