CLASS Solution
    FUNCTION maximumLength(nums k)
        SET m TO 0
        SET c TO LENGTH(nums)
        SET tbl TO NEW 2D LIST with dimensions c by (k + 1)
        SET vi TO 0
        SET xg TO c - 1
        CALL InitializeToOne(tbl, c, k + 1)

        FUNCTION InitializeToOne(matrix rows cols)
            SET a TO 0
            WHILE a < rows
                SET b TO 0
                WHILE b < cols
                    SET matrix[a][b] TO 1
                    SET b TO b + 1
                END WHILE
                SET a TO a + 1
            END WHILE
        END FUNCTION

        FUNCTION maxValue(p q)
            IF p > q THEN
                RETURN p
            ELSE
                RETURN q
            END IF
        END FUNCTION

        PROCEDURE ProcessIndex(zi)
            SET hk TO 0
            WHILE hk <= k
                CALL InnerLoop(zi, hk)
                SET hk TO hk + 1
            END WHILE
        END PROCEDURE

        PROCEDURE InnerLoop(index_hh param_hl)
            SET jm TO 0
            WHILE jm < index_hh
                CALL UpdateTable(index_hh, param_hl, jm)
                SET jm TO jm + 1
            END WHILE
        END PROCEDURE

        PROCEDURE UpdateTable(pos_iq pos_hu pos_jw)
            IF nums[pos_iq] = nums[pos_jw] THEN
                SET tbl[pos_iq][pos_hu] TO maxValue(tbl[pos_iq][pos_hu], tbl[pos_jw][pos_hu] + 1)
            ELSE IF pos_hu > 0 THEN
                SET tbl[pos_iq][pos_hu] TO maxValue(tbl[pos_iq][pos_hu], tbl[pos_jw][pos_hu] - 1 + 1)
            END IF
        END PROCEDURE
        
        WHILE vi < c
            CALL ProcessIndex(vi)
            SET m TO maxValue(m, tbl[vi][k])
            SET vi TO vi + 1
        END WHILE

        RETURN m
    END FUNCTION
END CLASS