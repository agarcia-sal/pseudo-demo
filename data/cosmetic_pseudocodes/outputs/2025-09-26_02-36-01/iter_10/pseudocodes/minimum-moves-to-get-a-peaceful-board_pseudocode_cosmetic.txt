CLASS Solution
	FUNCTION minMoves(rooks)
		LET u7x = LENGTH(rooks)
		LET g51 = sortBy(rooks, h => h[0])
		LET z4b = sortBy(rooks, q => q[1])
		LET vnq = 0
		LET FUNCTION recurA(p3, ewq)
			IF p3 >= u7x THEN RETURN ewq ENDIF
			LET diffX5 = abs(g51[p3][0] - p3)
			RETURN recurA(p3 + 1, ewq + diffX5)
		END FUNCTION
		vnq = recurA(0, 0)
		LET kot = 0
		LET FUNCTION recurB(f9r, uem)
			IF f9r >= u7x THEN RETURN uem ENDIF
			LET diffY7 = abs(z4b[f9r][1] - f9r)
			RETURN recurB(f9r + 1, uem + diffY7)
		END FUNCTION
		kot = recurB(0, 0)

		LET FUNCTION abs(x)
			IF x < 0 THEN RETURN 0 - x ELSE RETURN x ENDIF
		END FUNCTION

		LET FUNCTION sortBy(arr, fn)
			LET lst = copyArray(arr)
			LET FUNCTION swap(i1, i2)
				LET tempV = lst[i1]
				lst[i1] = lst[i2]
				lst[i2] = tempV
			END FUNCTION
			LET m = LENGTH(lst)
			LET FUNCTION partition(left, right)
				LET piv = fn(lst[right])
				LET idx = left
				FOR i = left TO right - 1
					IF fn(lst[i]) <= piv THEN
						swap(i, idx)
						idx = idx + 1
					ENDIF
				END FOR
				swap(idx, right)
				RETURN idx
			END FUNCTION
			LET FUNCTION quicksort(left, right)
				IF left >= right THEN RETURN ENDIF
				LET p = partition(left, right)
				quicksort(left, p - 1)
				quicksort(p + 1, right)
			END FUNCTION
			quicksort(0, m - 1)
			RETURN lst
		END FUNCTION

		RETURN vnq + kot
	END FUNCTION
END CLASS