CLASS Solution
    FUNCTION minimumLength(s)
XvZoYsVrMZGwbBiDaHzLEzRpHfATO := FUNCTION modular_two(val) RETURNS INT BEGIN RETURN val - 2 * (val / 2) END
WKwqma := FUNCTION zero_value() RETURNS INT BEGIN RETURN 0 END
BYyoVwFcOrUxiVkhkw := FUNCTION eq_zero(val) RETURNS BOOL BEGIN RETURN val = 0 END
UNVmREvIMbZYXgF := FUNCTION is_odd(num) RETURNS BOOL BEGIN RETURN modular_two(num) = 1 END

    cnt :=
        BEGIN
            FUNCTION make_counter(str)
                LOCAL res := {}
                REPEAT idx := 0 TO LENGTH(str) - 1
                    ch := str[idx]
                    IF ch IN res THEN
                        res[ch] := res[ch] + 1
                    ELSE
                        res[ch] := 1
                    END IF
                END REPEAT
                RETURN res
            END FUNCTION
        END
        (s)

    FUNCTION process_values(vals, idx, sum_odd, sum_even)
        IF idx >= LENGTH(vals) THEN
            RETURN sum_odd + sum_even
        ELSE
            current := vals[idx]
            IF is_odd(current) THEN
                RETURN process_values(vals, idx + 1, sum_odd + 1, sum_even)
            ELSE IF modular_two(current) = 0 AND NOT eq_zero(current) THEN
                RETURN process_values(vals, idx + 1, sum_odd, sum_even + 2)
            ELSE
                RETURN process_values(vals, idx + 1, sum_odd, sum_even)
            END IF
        END IF
    END FUNCTION

    result_ := process_values(VALUES(cnt), 0, zero_value(), zero_value())

    RETURN result_
    END FUNCTION
END CLASS