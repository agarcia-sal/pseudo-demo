CLASS Solution
    FUNCTION minEnd(n x)
        FUNCTION canConstruct(max_val)
            FUNCTION increment(v)
                RETURN v + 1
            END FUNCTION

            FUNCTION binary_and(a, b)
                RETURN a & b
            END FUNCTION

            FUNCTION equals(a, b)
                RETURN NOT (a != b)
            END FUNCTION

            FUNCTION less_than(a, b)
                RETURN a < b
            END FUNCTION

            FUNCTION is_true(val)
                RETURN val = true
            END FUNCTION

            FUNCTION loop_until(cond, state1, state2)
                IF cond(state1, state2)
                    RETURN state2
                ELSE
                    RETURN loop_until(cond, increment(state1), state2)
                END IF
            END FUNCTION

            FUNCTION recurse_loop(c_val, cnt)
                IF less_than(c_val, max_val)
                    LET nxt_val = increment(c_val)
                    IF equals(binary_and(nxt_val, x), x)
                        LET nxt_cnt = cnt + 1
                    ELSE
                        LET nxt_cnt = cnt
                    END IF
                    IF equals(nxt_cnt, n)
                        RETURN true
                    END IF
                    RETURN recurse_loop(nxt_val, nxt_cnt)
                ELSE
                    RETURN equals(cnt, n)
                END IF
            END FUNCTION

            RETURN recurse_loop(x, 1)
        END FUNCTION

        FUNCTION multiply(base, times)
            FUNCTION recur_mul(b, t, acc)
                IF t = 0
                    RETURN acc
                ELSE
                    RETURN recur_mul(b, t - 1, acc * b)
                END IF
            END FUNCTION
            RETURN recur_mul(base, times, 1)
        END FUNCTION

        LET low_bound = x
        LET high_bound = multiply(2, 1) * multiply(10, 8)

        FUNCTION int_division_sum(a, b)
            RETURN (a + b) // 2
        END FUNCTION

        FUNCTION binary_search(lb, hb)
            IF lb >= hb
                RETURN lb
            ELSE
                LET md = int_division_sum(lb, hb)
                IF canConstruct(md)
                    RETURN binary_search(lb, md)
                ELSE
                    RETURN binary_search(lb + 1, hb)
                END IF
            END IF
        END FUNCTION

        RETURN binary_search(low_bound, high_bound)
    END FUNCTION
END CLASS