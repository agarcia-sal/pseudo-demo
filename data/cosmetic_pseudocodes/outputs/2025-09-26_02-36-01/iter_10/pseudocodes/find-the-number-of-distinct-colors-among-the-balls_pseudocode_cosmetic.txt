CLASS Solution
  FUNCTION queryResults(limit, queries)
      DEFINE ballMap AS dictionary
      DEFINE distinctColors AS set
      DEFINE outputList AS list

      FUNCTION processNext(index)
          IF NOT (index < limit) THEN
              RETURN
          END IF

          LET keyVar ← queries[index][0]
          LET valVar ← queries[index][1]

          FUNCTION hasKey(dict, k)
              RETURN k IN dict
          END FUNCTION

          IF hasKey(ballMap, keyVar) THEN
              LET prevColor ← ballMap[keyVar]
              FUNCTION contains(setVar, item)
                  FOR element IN setVar DO
                      IF element = item THEN RETURN TRUE END IF
                  END FOR
                  RETURN FALSE
              END FUNCTION

              IF contains(distinctColors, prevColor) THEN
                  FUNCTION removeItem(setVar, item)
                      DEFINE tempSet AS set
                      FOR element IN setVar DO
                          IF NOT (element = item) THEN
                              tempSet.ADD(element)
                          END IF
                      END FOR
                      RETURN tempSet
                  END FUNCTION
                  distinctColors ← removeItem(distinctColors, prevColor)
              END IF
          END IF

          FUNCTION assign(dict, k, v)
              dict[k] ← v
          END FUNCTION
          assign(ballMap, keyVar, valVar)

          distinctColors.ADD(valVar)

          FUNCTION countElements(setVar)
              LET counter ← 0
              FOR elem IN setVar DO
                  counter ← counter + 1
              END FOR
              RETURN counter
          END FUNCTION
          LET currentCount ← countElements(distinctColors)
          
          outputList.APPEND(currentCount)

          processNext(index + 1)
      END FUNCTION

      processNext(0)
      RETURN outputList
  END FUNCTION
END CLASS