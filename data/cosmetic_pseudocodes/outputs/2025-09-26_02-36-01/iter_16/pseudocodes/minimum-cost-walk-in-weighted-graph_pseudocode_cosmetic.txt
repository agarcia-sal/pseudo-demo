CLASS UnionFind  
    FUNCTION __init__(self, alpha)  
        SET self.parent TO an empty list  
        SET self.rank TO an empty list  
        SET beta TO zero  
        WHILE beta LESS THAN alpha DO  
            APPEND beta TO self.parent  
            APPEND 1 TO self.rank  
            SET beta TO beta PLUS 1  
        END WHILE  
    END FUNCTION  
  
    FUNCTION find(self, omega)  
        IF self.parent[omega] NOT EQUAL omega THEN  
            SET temp TO self.parent[omega]  
            SET self.parent[omega] TO self.find(temp)  
        END IF  
        RETURN self.parent[omega]  
    END FUNCTION  
  
    FUNCTION union(self, iota, kappa)  
        SET gamma TO self.find(iota)  
        SET delta TO self.find(kappa)  
        IF gamma NOT EQUAL delta THEN  
            IF self.rank[gamma] GREATER THAN self.rank[delta] THEN  
                SET self.parent[delta] TO gamma  
            ELSE  
                IF self.rank[gamma] LESS THAN self.rank[delta] THEN  
                    SET self.parent[gamma] TO delta  
                ELSE  
                    SET self.parent[delta] TO gamma  
                    SET self.rank[gamma] TO self.rank[gamma] PLUS (1 * 1)  
                END IF  
            END IF  
        END IF  
    END FUNCTION  
END CLASS  
  
CLASS Solution  
    FUNCTION minimumCost(self, lambda, theta, psi)  
        SET chi TO UnionFind(lambda)  
        SET phi TO empty list  
        SET idx TO zero  
        REPEAT  
            IF idx GREATER THAN OR EQUAL lambda THEN BREAK END IF  
            APPEND ((2 ^ 32) - 1) TO phi  
            SET idx TO idx PLUS 1  
        UNTIL false  
  
        FOR EACH trio IN theta DO  
            SET a TO trio[0]  
            SET b TO trio[1]  
            SET c TO trio[2]  
            CALL chi.union(a, b)  
            SET rootX TO chi.find(a)  
            SET gamma_val TO phi[rootX]  
            SET phi[rootX] TO gamma_val BITWISE AND (c)  
        END FOR  
  
        SET omega TO empty dictionary  
        SET zeta TO zero  
        WHILE zeta LESS THAN lambda DO  
            SET mu TO chi.find(zeta)  
            IF NOT (mu IN omega) THEN  
                SET omega[mu] TO phi[mu]  
            END IF  
            SET zeta TO zeta PLUS 1  
        END WHILE  
  
        SET epsilon TO empty list  
        FOR EACH pair IN psi DO  
            SET m TO pair[0]  
            SET n TO pair[1]  
            IF m EQUALS n THEN  
                APPEND 0 TO epsilon  
            ELSE  
                SET p TO chi.find(m)  
                SET q TO chi.find(n)  
                IF p EQUALS q THEN  
                    APPEND omega[p] TO epsilon  
                ELSE  
                    APPEND -1 TO epsilon  
                END IF  
            END IF  
        END FOR  
  
        RETURN epsilon  
    END FUNCTION  
END CLASS