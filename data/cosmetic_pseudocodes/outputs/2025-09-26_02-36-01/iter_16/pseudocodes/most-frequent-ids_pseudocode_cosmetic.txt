CLASS Solution
	 FUNCTION mostFrequentIDs(nums PARAMETER , freq PARAMETER ) 
		 DECLARE vfjxuwgu AS dictionary WITH default value 0
		 DECLARE bltrhpm AS empty list
		 DECLARE uzdimgdt AS empty list
		 DECLARE vnyryuki AS integer
		 DECLARE ycbhwlp AS integer
		 DECLARE njghreyj AS pair
		 DECLARE lrskvw AS integer
		 DECLARE hzyogqwd AS integer
		 DECLARE gptpload AS integer
		 DECLARE lzdjazfu AS integer
		 DECLARE frembgh AS boolean

		 DECLARE wxoljup AS integer
		 DECLARE kpdruzq AS integer
		 DECLARE cqhkvis AS integer
		 DECLARE fygxzreo AS integer

		 DECLARE ixkbfnmr AS integer
		 DECLARE szrvqgte AS integer
		 DECLARE abohmjvg AS integer
		 DECLARE xpdcirsh AS integer

		 DECLARE vstkeyf AS integer
		 DECLARE dpvlrazs AS integer
		 DECLARE mfypivjn AS integer
		 DECLARE uahqcdmz AS integer

		 DECLARE zmkbclwr AS integer

		 FUNCTION _expandValue(value PARAMETER )
			 RETURN 0 + value * 1
		 END FUNCTION

		 FUNCTION _negate(value PARAMETER )
			 RETURN 0 - value
		 END FUNCTION

		 FOR wxoljup = 0 ; wxoljup < length(nums); wxoljup = wxoljup + 1
			  vnyryuki = nums[wxoljup]
			  ycbhwlp = freq[wxoljup]

			  vfjxuwgu[vnyryuki] = _expandValue(vfjxuwgu[vnyryuki] + ycbhwlp)
			  lrskvw = vfjxuwgu[vnyryuki]
			  hzyogqwd = _negate(lrskvw)
			  njghreyj = (hzyogqwd, vnyryuki)
			  bltrhpm.append(njghreyj)

			  WHILE ( length(bltrhpm) > 0 )
				  fst = bltrhpm[0]
				  gptpload = fst[0]
				  lzdjazfu = fst[1]
				  frembgh = ( _negate(gptpload) != vfjxuwgu[lzdjazfu] )
				  IF frembgh
					  REMOVE bltrhpm[0]
				  ELSE
					  BREAK
				  END IF
			  END WHILE

			  IF length(bltrhpm) > 0
				  uzdimgdt.append( _negate(bltrhpm[0][0]) )
			  ELSE
				  uzdimgdt.append( (1-1) )
			  END IF
		 END FOR

		 RETURN uzdimgdt
	 END FUNCTION
END CLASS