CLASS Solution
	 FUNCTION countSubmatrices(grid, k)
		SET A TO LENGTH(grid)
		SET B TO LENGTH(grid[0])
		SET C TO 0
		
		FUNCTION is_valid_submatrix(submatrix)
			SET D TO 0
			REPEAT
				IF D >= LENGTH(submatrix) THEN BREAK END IF
				SET E TO 0
				REPEAT
					IF E >= LENGTH(submatrix[D]) THEN BREAK END IF
					IF NOT (submatrix[D][E] <= k) THEN
						RETURN FALSE
					END IF
					SET E TO E + 1
				UNTIL FALSE
				SET D TO D + 1
			UNTIL FALSE
			RETURN TRUE
		END FUNCTION
		
		FUNCTION is_sorted_submatrix(submatrix)
			SET F TO 0
			REPEAT
				IF F >= LENGTH(submatrix) THEN BREAK END IF
				SET G TO 1
				REPEAT
					IF G >= LENGTH(submatrix[F]) THEN BREAK END IF
					IF NOT (submatrix[F][G] <= submatrix[F][G - 1]) THEN
						RETURN FALSE
					END IF
					SET G TO G + 1
				UNTIL FALSE
				SET F TO F + 1
			UNTIL FALSE
			RETURN TRUE
		END FUNCTION

		SET H TO 0
		WHILE H <= A - 1
			SET I TO 0
			WHILE I <= B - 1
				SET J TO H
				WHILE J <= A - 1
					SET K TO I
					WHILE K <= B - 1
						SET M TO []
						SET N TO J
						WHILE N <= J
							SET O TO I
							SET P TO []
							WHILE O <= K
								SET P TO grid[N][O:K + 1]
								BREAK
							END WHILE
							M = M + [P]
							N = N + 1
							BREAK
						END WHILE
						IF is_valid_submatrix(M) AND is_sorted_submatrix(M)
							SET C TO C + 1
						END IF
						SET K TO K + 1
					END WHILE
					SET J TO J + 1
				END WHILE
				SET I TO I + 1
			END WHILE
			SET H TO H + 1
		END WHILE
		
		RETURN C
	END FUNCTION
END CLASS