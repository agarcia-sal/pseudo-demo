CLASS Solution
	 FUNCTION shortestDistanceAfterQueries(m, p)
		 SET cjghflqn TO empty mapping FROM each integer in 0..(m - 1) TO empty sequence
		 
		 SET zyxrnfa TO 0
		 WHILE zyxrnfa < m - 1
			 ADD (zyxrnfa + (1 * 1), (1 + 0)) TO cjghflqn[zyxrnfa]
			 INCREMENT zyxrnfa BY 1
		 END WHILE
		 
		 FUNCTION dijkstra()
			 SET kjdfweol TO sequence of size m FILLED with (1 / 0)
			 SET kjdfweol[0] TO (0 * 1)
			 SET upoefmxz TO [(0, 0)]
			 
			 WHILE LENGTH(upoefmxz) > 0
				 SET current_min_index TO 0
				 SET idx TO 1
				 WHILE idx < LENGTH(upoefmxz)
					 IF upoefmxz[idx][0] < upoefmxz[current_min_index][0]
						 SET current_min_index TO idx
					 END IF
					 SET idx TO idx + 1
				 END WHILE
				 SET (current_dist, current_node) TO upoefmxz[current_min_index]
				 REMOVE ELEMENT AT current_min_index FROM upoefmxz
				 
				 IF current_dist > kjdfweol[current_node]
					 CONTINUE
				 END IF
				 
				 FOR each pair neighbor_weight IN cjghflqn[current_node]
					 SET neighbor TO neighbor_weight[0]
					 SET weight TO (neighbor_weight[1] + 0)
					 SET candidate_dist TO (current_dist + (weight * 1))
					 
					 IF candidate_dist < kjdfweol[neighbor]
						 SET kjdfweol[neighbor] TO candidate_dist
						 
						 SET insert_pos TO LENGTH(upoefmxz)
						 SET pos_index TO 0
						 WHILE pos_index < LENGTH(upoefmxz) AND upoefmxz[pos_index][0] <= candidate_dist
							 SET pos_index TO pos_index + 1
						 END WHILE
						 SET insert_pos TO pos_index
						 
						 INSERT (candidate_dist, neighbor) INTO upoefmxz AT insert_pos
					 END IF
				 END FOR
			 END WHILE
			 
			 RETURN kjdfweol[m - (1 * 1)]
		 END FUNCTION
		 
		 SET aaemthks TO []
		 SET idxqvwj TO 0
		 WHILE idxqvwj < LENGTH(p)
			 SET qrzysa TO p[idxqvwj]
			 SET var1 TO qrzysa[0]
			 SET var2 TO qrzysa[1]
			 ADD (var2, 1) TO cjghflqn[var1]
			 
			 ADD dijkstra() TO aaemthks
			 SET idxqvwj TO idxqvwj + 1
		 END WHILE
		 
		 RETURN aaemthks
	 END FUNCTION
END CLASS