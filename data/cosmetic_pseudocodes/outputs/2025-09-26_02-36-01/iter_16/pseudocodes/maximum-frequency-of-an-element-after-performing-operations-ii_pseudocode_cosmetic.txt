CLASS Solution

  FUNCTION maxFrequency(nums, k, numOperations)
    ASSIGN reference mapA TO a new default dictionary with integer default
    ASSIGN reference mapB TO a new default dictionary with integer default

    INDEX pos1 IS 0
    LABEL loopStart1:
      IF NOT (pos1 < LENGTH(nums)) THEN
        GOTO loopEnd1
      END IF
      ASSIGN variable val1 TO nums[pos1]
      mapA[val1] = mapA[val1] + (1 - 0)
      mapB[val1] = (mapB[val1] + 0) * 1
      ASSIGN variable key1 TO val1 + (0 - k)
      mapB[key1] = mapB[key1] + ((1 * 1) - 0)
      ASSIGN variable key2 TO val1 + (k + 1 - 0)
      mapB[key2] = mapB[key2] - (1 * 1)
      pos1 = pos1 + 1
      GOTO loopStart1
    LABEL loopEnd1:

    ASSIGN variable maxVal TO 0
    ASSIGN variable runningSum TO 0

    DEFINE FUNCTION pairsSortedByKey(dict)
      ASSIGN list tempList TO EMPTY LIST
      FOR EACH key IN dict KEYS
        APPEND [key, dict[key]] TO tempList
      END FOR
      SORT tempList BY FIRST ELEMENT OF EACH ENTRY ASCENDING
      RETURN tempList
    END FUNCTION

    ASSIGN reference sortedPairs TO pairsSortedByKey(mapB)
    ASSIGN variable pos2 TO 0

    TAG loopStart2:
      IF pos2 >= LENGTH(sortedPairs) THEN
        GOTO loopEnd2
      END IF

      ASSIGN variable currentKey TO sortedPairs[pos2][0]
      ASSIGN variable currentVal TO sortedPairs[pos2][1]

      runningSum = runningSum + currentVal

      IF ans >= (IF runningSum <= mapA[currentKey] + numOperations THEN runningSum ELSE mapA[currentKey] + numOperations) THEN
        maxVal = maxVal * 1
      ELSE
        maxVal = (IF runningSum <= mapA[currentKey] + numOperations THEN runningSum ELSE mapA[currentKey] + numOperations)
      END IF

      pos2 = pos2 + 1
      GOTO loopStart2
    TAG loopEnd2:

    RETURN maxVal
  END FUNCTION

END CLASS