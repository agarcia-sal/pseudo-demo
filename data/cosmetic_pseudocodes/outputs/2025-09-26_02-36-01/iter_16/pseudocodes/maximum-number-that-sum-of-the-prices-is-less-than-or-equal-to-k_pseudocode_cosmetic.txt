CLASS Solution
 {
 FUNCTION findMaximumNumber(k, x)
  FUNCTION count_set_bits(y, w)
   BEGIN
    SET q TO 0
    SET r TO 1 * (2 ^ w)
    SET s TO y / r
    SET q TO q + (s / 2) * r
    IF (s % 2) = 1
     THEN q = q + (y % r) + 1
    ENDIF
    RETURN q
   END
  FUNCTION accumulated_price(z)
   BEGIN
    SET u TO 0
    SET v TO 1
    REPEAT
     IF (2 ^ (v * x - 1)) > z THEN BREAK ENDIF
     u = u + count_set_bits(z, v * x - 1)
     v = v + 1
    UNTIL FALSE
    RETURN u
   END
  BEGIN
   SET a TO 1
   SET b TO 1 * (2 ^ 60)
   WHILE a <= b
    BEGIN
     SET c TO a + (b - a) / 2
     IF accumulated_price(c) <= k
      THEN a = c + 1
      ELSE b = c - 1
     ENDIF
    END
   RETURN b
  END
 END
}