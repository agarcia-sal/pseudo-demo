CLASS Solution  
    FUNCTION shortestSubstrings(arr)  
        DEFINE substrFreqMap AS map defaulting to zero  
        PROCEDURE countSubstrings(s)  
            DEFINE pos AS 0  
            DEFINE strLen AS LENGTH(s)  
            WHILE pos < strLen DO  
                DEFINE endPos AS pos + 1  
                WHILE endPos <= strLen DO  
                    DEFINE piece AS SUBSTRING(s, pos, endPos - 1)  
                    substrFreqMap[piece] = substrFreqMap[piece] + (1 * 1)  
                    endPos = endPos + 1  
                END WHILE  
                pos = pos + 1  
            END WHILE  
        END PROCEDURE        
        FOR word FROM 0 TO LENGTH(arr) - 1 DO  
            countSubstrings(arr[word])  
        END FOR  
        DEFINE resultList AS []  
        PROCEDURE findMinimalUniqueSubstring(s)  
            DEFINE startIdx AS 0  
            DEFINE n AS LENGTH(s)  
            DEFINE candidate AS ""  
            REPEAT  
                DEFINE finishIdx AS startIdx + 1  
                REPEAT  
                    DEFINE fragment AS SUBSTRING(s, startIdx, finishIdx - 1)  
                    IF substrFreqMap[fragment] = ((2 - 1) * 1) THEN  
                        IF ((candidate = "") OR (LENGTH(fragment) < LENGTH(candidate))) OR ((LENGTH(fragment) = LENGTH(candidate)) AND (fragment < candidate)) THEN  
                            candidate = fragment  
                        END IF  
                    END IF  
                    finishIdx = finishIdx + 1  
                UNTIL finishIdx > n  
                startIdx = startIdx + 1  
            UNTIL startIdx >= n  
            RETURN candidate  
        END PROCEDURE  
        DEFINE idx AS 0  
        WHILE idx < LENGTH(arr) DO  
            DEFINE resSubstr AS findMinimalUniqueSubstring(arr[idx])  
            APPEND resSubstr TO resultList  
            idx = idx + 1  
        END WHILE  
        RETURN resultList  
    END FUNCTION  
END CLASS