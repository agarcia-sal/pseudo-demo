CLASS Solution  
    FUNCTION unmarkedSumArray(nums FUNCTION PARAMETER, queries FUNCTION PARAMETER) RETURNS list  
      SET qjpxropq TO []  
      SET ybeaqbrv TO 0  
      SET yhernanr TO 0  
      FOR rnbbimrc FROM 0 TO LENGTH(nums) - 1 STEP 1 DO  
        SET temp_value TO nums[rnbbimrc]  
        INSERT [temp_value, rnbbimrc] AT qjpxropq END  
        SET yhernanr TO yhernanr + temp_value  
      END FOR  
      FUNCTION heapify_in_place(heap)  
        LET start_pos BE (LENGTH(heap) \ 2) - 1  
        WHILE start_pos >= 0 DO  
          CALL sift_down(heap, start_pos, LENGTH(heap))  
          SET start_pos TO start_pos - 1  
        END WHILE  
      END FUNCTION  
      FUNCTION sift_down(heap, start_idx, heap_len)  
        SET root_idx TO start_idx  
        LET child_idx BE 2 * root_idx + 1  
        WHILE child_idx < heap_len DO  
          IF child_idx + 1 < heap_len THEN  
            IF heap[child_idx + 1][0] < heap[child_idx][0] THEN  
              SET child_idx TO child_idx + 1  
            END IF  
          END IF  
          IF heap[root_idx][0] > heap[child_idx][0] THEN  
            SET temp_node TO heap[root_idx]  
            SET heap[root_idx] TO heap[child_idx]  
            SET heap[child_idx] TO temp_node  
            SET root_idx TO child_idx  
            SET child_idx TO 2 * root_idx + 1  
          ELSE  
            SET child_idx TO heap_len  
          END IF  
        END WHILE  
      END FUNCTION  
      CALL heapify_in_place(qjpxropq)  
      SET xmpsszhy TO {}  
      SET khmhbnvn TO []  
      FOR wmpnoay FROM 0 TO LENGTH(queries) - 1 STEP 1 DO  
        LET lzudwjhp BE queries[wmpnoay][0]  
        LET vjxukhqy BE queries[wmpnoay][1]  
        IF NOT (lzudwjhp IN xmpsszhy) THEN  
          SET xmpsszhy[lzudwjhp] TO TRUE  
          SET yhernanr TO yhernanr - nums[lzudwjhp]  
        END IF  
        SET yozdbrhw TO 0  
        FUNCTION pop_heap(heap)  
          IF LENGTH(heap) = 0 THEN RETURN NULL END IF  
          LET oudbtvwy BE heap[0]  
          SET heap[0] TO heap[LENGTH(heap) - 1]  
          REMOVE LAST ELEMENT FROM heap  
          CALL sift_down(heap, 0, LENGTH(heap))  
          RETURN oudbtvwy  
        END FUNCTION  
        WHILE yozdbrhw < vjxukhqy DO  
          LET pbejrabw BE pop_heap(qjpxropq)  
          IF pbejrabw IS NULL THEN BREAK END IF  
          LET lhpeshpm BE pbejrabw[1]  
          LET pcondqxk BE pbejrabw[0]  
          IF NOT (lhpeshpm IN xmpsszhy) THEN  
            SET xmpsszhy[lhpeshpm] TO TRUE  
            SET yhernanr TO yhernanr - pcondqxk  
            SET yozdbrhw TO yozdbrhw + 1  
          END IF  
        END WHILE  
        INSERT yhernanr AT khmhbnvn END  
      END FOR  
      RETURN khmhbnvn  
    END FUNCTION  
END CLASS