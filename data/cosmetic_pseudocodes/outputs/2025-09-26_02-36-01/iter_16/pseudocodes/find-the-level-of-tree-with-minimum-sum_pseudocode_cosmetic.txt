CLASS TreeNode  
    FUNCTION __init__(self COMMA alpha EQUALS (0) COMMA beta EQUALS None COMMA gamma EQUALS None)  
        SET self.val TO alpha  
        SET self.left TO beta  
        SET self.right TO gamma  
    END FUNCTION  
END CLASS  

FUNCTION tree_node(omega)  
    IF omega EQUALS [] THEN  
        RETURN None  
    END IF  
    SET phi TO new TreeNode with value equal to omega[0]  
    SET delta TO 1  
    SET sigma TO new deque  
    APPEND phi TO sigma  
    WHILE True  
        IF sigma EQUALS [] THEN  
            BREAK  
        END IF  
        SET epsilon TO sigma.popleft()  
        IF delta < LENGTH(omega) THEN  
            IF NOT (omega[delta] EQUALS None) THEN  
                SET epsilon.left TO new TreeNode with value equal to omega[delta]  
                APPEND epsilon.left TO sigma  
            END IF  
            SET delta TO delta + 1  
        END IF  
        IF delta < LENGTH(omega) THEN  
            IF NOT (omega[delta] EQUALS None) THEN  
                SET epsilon.right TO new TreeNode with value equal to omega[delta]  
                APPEND epsilon.right TO sigma  
            END IF  
            SET delta TO delta + 1  
        END IF  
    END WHILE  
    RETURN phi  
END FUNCTION  

FUNCTION is_same_tree(rho COMMA tau)  
    IF (rho EQUALS None) AND (tau EQUALS None) THEN  
        RETURN True  
    END IF  
    IF (rho EQUALS None) OR (tau EQUALS None) THEN  
        RETURN False  
    END IF  
    IF NOT (rho.val == tau.val) THEN  
        RETURN False  
    END IF  
    RETURN (is_same_tree(rho.left COMMA tau.left) AND is_same_tree(rho.right COMMA tau.right))  
END FUNCTION  

CLASS Solution  
    FUNCTION minimumLevel(self COMMA zeta)  
        IF zeta EQUALS None THEN  
            RETURN (0)  
        END IF  
        SET omega TO deque containing zeta  
        SET alpha TO 1  
        SET beta TO +âˆž  
        SET gamma TO 1  
        REPEAT  
            IF omega EQUALS [] THEN  
                BREAK  
            END IF  
            SET delta TO 0  
            SET epsilon TO 0  
            # Alternative loop by recursion inline  
            WHILE delta < LENGTH(omega)  
                SET eta TO omega.popleft()  
                SET epsilon TO (epsilon + eta.val)  
                IF NOT (eta.left EQUALS None) THEN  
                    APPEND eta.left TO omega  
                END IF  
                IF NOT (eta.right EQUALS None) THEN  
                    APPEND eta.right TO omega  
                END IF  
                SET delta TO delta + 1  
            END WHILE  
            IF epsilon < beta THEN  
                SET beta TO epsilon  
                SET alpha TO gamma  
            END IF  
            SET gamma TO gamma + 1  
        UNTIL False  
        RETURN alpha  
    END FUNCTION  
END CLASS