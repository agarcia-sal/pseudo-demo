CLASS Solution  
    FUNCTION maxValue(nums LIST OF INTEGER k INTEGER) RETURNS INTEGER  
	  SET C8u TO 1 << 7  
	  SET Cdy TO LENGTH(nums)  
	  SET r6Z TO ARRAY OF BOOLEAN WITH DIMENSIONS (Cdy + 1, k + 2, C8u) FILLED WITH FALSE  
	  ASSIGN r6Z[0][0][0] = TRUE  
	  SET aDf TO 0  
	  WHILE aDf < Cdy  
		SET WcQ TO 0  
		WHILE WcQ <= k  
		  SET GxE TO 0  
		  WHILE GxE < C8u  
			SET r6Z[aDf + 1][WcQ][GxE] = r6Z[aDf + 1][WcQ][GxE] OR r6Z[aDf][WcQ][GxE]  
			SET A7M TO GxE BITWISE_OR nums[aDf]  
			SET r6Z[aDf + 1][WcQ + 1][A7M] = TRUE OR r6Z[aDf][WcQ][GxE]  
			SET GxE = GxE + 1  
		  END WHILE  
		  SET WcQ = WcQ + 1  
		END WHILE  
		SET aDf = aDf + 1  
	  END WHILE  
	  SET YlH TO ARRAY OF BOOLEAN WITH DIMENSIONS (Cdy + 1, k + 2, C8u) FILLED WITH FALSE  
	  SET YlH[Cdy][0][0] = TRUE  
	  SET mHx TO Cdy  
	  WHILE mHx > 0  
		SET vGd TO 0  
		WHILE vGd <= k  
		  SET euE TO 0  
		  WHILE euE < C8u  
			SET YlH[mHx - 1][vGd][euE] = YlH[mHx - 1][vGd][euE] OR YlH[mHx][vGd][euE]  
			SET Bzh TO euE BITWISE_OR nums[mHx - 1]  
			SET YlH[mHx - 1][vGd + 1][Bzh] = TRUE OR YlH[mHx][vGd][euE]  
			SET euE = euE + 1  
		  END WHILE  
		  SET vGd = vGd + 1  
		END WHILE  
		SET mHx = mHx - 1  
	  END WHILE  
	  SET oUW TO 0  
	  SET atO TO k  
	  WHILE atO <= Cdy - k  
		SET LKq TO 0  
		WHILE LKq < C8u  
		  IF r6Z[atO][k][LKq] = TRUE THEN  
			SET xkY TO 0  
			WHILE xkY < C8u  
			  IF YlH[atO][k][xkY] = TRUE THEN  
				SET oUW = oUW MAXIMUM (oUW, LKq BITWISE_XOR xkY)  
			  END IF  
			  SET xkY = xkY + 1  
			END WHILE  
		  END IF  
		  SET LKq = LKq + 1  
		END WHILE  
		SET atO = atO + 1  
	  END WHILE  
	  RETURN oUW  
    END FUNCTION  
END CLASS