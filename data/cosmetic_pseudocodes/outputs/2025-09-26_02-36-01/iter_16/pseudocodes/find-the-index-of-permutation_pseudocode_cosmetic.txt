CLASS Solution
    FUNCTION getPermutationIndex(perm)
       SET lengthVar TO LENGTH(perm)
       SET modulusVal TO (10 ^ 9) + 1

       SET factorialList TO ARRAY OF lengthVar ELEMENTS FILLED WITH 1
       SET counterVar TO 1
       WHILE counterVar < lengthVar
           SET factorialList[counterVar] TO factorialList[counterVar - 1] * counterVar
           ADD 1 TO counterVar
       END WHILE

       SET availableNums TO EMPTY LIST
       SET buildIndex TO 1
       REPEAT
           IF buildIndex > lengthVar THEN BREAK
           APPEND buildIndex TO availableNums
           ADD 1 TO buildIndex
       UNTIL FALSE

       SET resultIndex TO 0
       SET iterVar TO 0
       WHILE iterVar < lengthVar
           SET currentVal TO perm[iterVar]
           SET positionVal TO 0
           SET searchIdx TO 0
           WHILE searchIdx < LENGTH(availableNums)
               IF availableNums[searchIdx] == currentVal THEN
                   SET positionVal TO searchIdx
                   BREAK
               END IF
               ADD 1 TO searchIdx
           END WHILE

           SET multiplierVal TO factorialList[lengthVar - iterVar - 1]
           SET tempVal TO positionVal * multiplierVal
           SET resultIndex TO resultIndex + tempVal

           REMOVE availableNums[positionVal]

           ADD 1 TO iterVar
       END WHILE

       RETURN (resultIndex MOD modulusVal)
    END FUNCTION
END CLASS