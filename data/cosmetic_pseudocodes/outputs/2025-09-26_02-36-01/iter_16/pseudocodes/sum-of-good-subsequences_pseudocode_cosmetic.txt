CLASS Solution
   FUNCTION sumOfGoodSubsequences(nums)
   LET QUAZ TO 1000000000 + 7
   DEFINE f_map AS map with default 0
   DEFINE g_map AS map with default 0

   LET a1 TO 0
recur_loop:
   IF a1 >= LENGTH(nums) THEN GOTO recur_end
   LET b2 TO nums[a1]

   LET t5 TO g_map[b2]
   LET t6 TO f_map[b2]

   LET g_map_b2_new TO (t5 + 1) % QUAZ
   LET f_map_b2_new TO (t6 + b2) % QUAZ
   SET g_map[b2] TO g_map_b2_new
   SET f_map[b2] TO f_map_b2_new

   LET p1 TO f_map[b2 - 1]
   LET q1 TO g_map[b2 - 1]

   LET s1 TO (p1 + (q1 * b2)) % QUAZ
   LET update_f1 TO (f_map[b2] + s1) % QUAZ
   SET f_map[b2] TO update_f1

   LET update_g1 TO (g_map[b2] + q1) % QUAZ
   SET g_map[b2] TO update_g1

   LET p2 TO f_map[b2 + 1]
   LET q2 TO g_map[b2 + 1]

   LET s2 TO (p2 + (q2 * b2)) % QUAZ
   LET update_f2 TO (f_map[b2] + s2) % QUAZ
   SET f_map[b2] TO update_f2

   LET update_g2 TO (g_map[b2] + q2) % QUAZ
   SET g_map[b2] TO update_g2

   LET a1 TO a1 + 1
   GOTO recur_loop
recur_end:

   LET accumulator TO 0
   LET index_gar TO KEYS(f_map)
   LET index_dex TO 0
sum_loop:
   IF index_dex >= LENGTH(index_gar) THEN GOTO sum_end
   LET cur_val TO f_map[index_gar[index_dex]]
   LET accumulator TO (accumulator + cur_val)
   LET index_dex TO index_dex + 1
   GOTO sum_loop
sum_end:

   LET final_ans TO accumulator % QUAZ
   RETURN final_ans
   END FUNCTION
END CLASS