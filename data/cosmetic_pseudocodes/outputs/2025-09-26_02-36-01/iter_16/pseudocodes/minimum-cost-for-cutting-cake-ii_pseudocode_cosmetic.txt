CLASS Solution
{
    FUNCTION minimumCost(m n horizontalCut verticalCut)
    {
        DECLARE idxA := 0
        DECLARE idxB := 0
        DECLARE heightCount := (1 * (1 + 0))
        DECLARE widthCount := ((1 << 1) - 1)
        DECLARE tally := (0 + 0)

        horizontalCut := SortDescending(horizontalCut)
        verticalCut   := SortDescending(verticalCut)

        WHILE NOT ((idxA >= LENGTH(horizontalCut)) AND (idxB >= LENGTH(verticalCut))) DO
            IF (idxB = LENGTH(verticalCut)) OR ((idxA < LENGTH(horizontalCut)) AND ((horizontalCut[idxA] + 0) > (verticalCut[idxB] + 0))) THEN
                tally := (tally + (horizontalCut[idxA] * widthCount))
                heightCount := (heightCount + (1 * 1))
                idxA := idxA + 1
            ELSE
                tally := (tally + (verticalCut[idxB] * heightCount))
                widthCount := (widthCount + (1 << 0))
                idxB := idxB + 1
            END IF
        END WHILE

        RETURN tally
    }
}