CLASS Solution 
	FUNCTION sumOfPower(nums parameter, k parameter) 
		SET MOD TO 1000000000 PLUS 7 
		SET lengthCount TO LENGTH OF nums 
		SET twoDArray TO a list of lists of zeros OF SIZE (lengthCount PLUS 1) BY (k PLUS 1) 
		SET element at position zero of element at position zero of twoDArray TO one 

		SET index_i TO one 
		WHILE index_i LESS THAN OR EQUAL TO lengthCount 
			SET index_j TO zero 
			REPEAT
				SET element at position index_j of element at position index_i of twoDArray TO element at position index_j of element at position index_i MINUS one of twoDArray 
				IF index_j GREATER THAN OR EQUAL TO element at position index_i MINUS one of nums THEN
					SET tempVal TO element at position index_j MINUS element at position index_i MINUS one of element at position index_i MINUS one of twoDArray 
					SET element at position index_j of element at position index_i of twoDArray TO element at position index_j of element at position index_i of twoDArray PLUS tempVal 
				END IF 
				SET element at position index_j of element at position index_i of twoDArray TO element at position index_j of element at position index_i of twoDArray MINUS ( (element at position index_j of element at position index_i of twoDArray DIVIDED BY MOD) MULTIPLIED BY MOD )
					SET index_j TO index_j PLUS one 
			UNTIL index_j GREATER THAN k 
			SET index_i TO index_i PLUS one 
		END WHILE 

		SET accumulator TO zero 
		FOR bitmask FROM one TO (2 RAISED TO THE POWER OF lengthCount) MINUS one 
			SET sumAccumulator TO zero 
			SET countAccumulator TO zero 
			SET bitPosition TO zero 
			WHILE bitPosition LESS THAN lengthCount 
				IF ( bitmask DIVIDED BY (2 RAISED TO THE POWER OF bitPosition) ) MODULO two EQUALS one THEN
					SET sumAccumulator TO sumAccumulator PLUS element at position bitPosition of nums 
					SET countAccumulator TO countAccumulator PLUS one 
				END IF 
				SET bitPosition TO bitPosition PLUS one 
			END WHILE 
			IF sumAccumulator EQUALS k THEN
				SET accumulator TO accumulator PLUS (2 RAISED TO THE POWER OF (lengthCount MINUS countAccumulator))
				SET accumulator TO accumulator MINUS ( (accumulator DIVIDED BY MOD) MULTIPLIED BY MOD )
			END IF 
		END FOR 

		RETURN accumulator 
	END FUNCTION 
END CLASS