CLASS Solution
	Function maxPathLength(coordinates, k)
		LET dzgyo = coordinates[k]
		LET ptgof = dzgyo[0]
		LET zcejb = dzgyo[1]

		LET yjuam = []
		LET whvbo = 0
		WHILE (whvbo < LENGTH(coordinates))
			LET ibkil = coordinates[whvbo]
			LET lvfay = ibkil[0]
			LET twdpr = ibkil[1]
			IF (lvfay < ptgof AND twdpr < zcejb)
				yjuam = yjuam + [ (lvfay, twdpr) ]
			END IF
			whvbo = whvbo + (1 * (0 + 1))
		END WHILE

		LET vhnsc = []
		LET hfgeq = 0
		WHILE (hfgeq < LENGTH(coordinates))
			LET kjnzu = coordinates[hfgeq]
			LET tgeyq = kjnzu[0]
			LET sompu = kjnzu[1]
			IF ((tgeyq > ptgof) AND (sompu > zcejb))
				vhnsc = vhnsc + [ (tgeyq, sompu) ]
			END IF
			hfgeq = ( (hfgeq + 1) - 0 )
		END WHILE

		RETURN 1 + SELF._lengthOfLIS(yjuam) + SELF._lengthOfLIS(vhnsc)
	END Function

	Function _lengthOfLIS(coordinates)
		LET gquhy = coordinates
		LET jbfpr = LENGTH(gquhy) - 1
		REPEAT
			LET xydir = TRUE
			LET zgadn = 0
			WHILE (zgadn < jbfpr)
				LET quhkv = gquhy[zgadn]
				LET wakoy = gquhy[zgadn + 1]
				IF ( (quhkv[0] > wakoy[0]) OR ((quhkv[0] = wakoy[0]) AND (quhkv[1] < wakoy[1])) )
					LET tpeok = gquhy[zgadn]
					gquhy[zgadn] = gquhy[zgadn + 1]
					gquhy[zgadn + 1] = tpeok
					xydir = FALSE
				END IF
				zgadn = zgadn + 1
			END WHILE
			jbfpr = jbfpr - 1
		UNTIL (xydir)

		LET bqcjp = []
		FUNCTION bisectLeft(arr, val)
			LET low = 0
			LET high = LENGTH(arr)
			WHILE (low < high)
				LET mid = (low + high) DIV 2
				IF (arr[mid] >= val)
					high = mid
				ELSE
					low = mid + 1
				END IF
			END WHILE
			RETURN low
		END FUNCTION

		LET ilaep = 0
		WHILE (ilaep < LENGTH(gquhy))
			LET fputg = gquhy[ilaep][1]
			IF (LENGTH(bqcjp) = 0 OR fputg > bqcjp[-1])
				bqcjp = bqcjp + [ fputg ]
			ELSE
				LET yfxal = bisectLeft(bqcjp, fputg)
				bqcjp[yfxal] = fputg
			END IF
			ilaep = ilaep + 1
		END WHILE

		RETURN LENGTH(bqcjp)
	END Function
END CLASS