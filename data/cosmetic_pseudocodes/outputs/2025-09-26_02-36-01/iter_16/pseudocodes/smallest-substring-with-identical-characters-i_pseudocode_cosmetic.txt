CLASS Solution
{
  FUNCTION minLength(s parameter, numOps parameter)
  {
    FUNCTION longest_uniform_substring(t parameter)
    {
      SET u0 TO 0
      SET u1 TO 1
      SET v3 TO u1
      SET w7 TO u0
      DO
      {
        IF t[v3] == t[(v3 + (1 * u0)) - u1]
        {
          SET w7 TO w7 + u1
        }
        ELSE
        {
          IF u0 < w7
          {
            SET u0 TO w7
          }
          SET w7 TO u1
        }
        SET v3 TO v3 + u1
      } WHILE v3 < LENGTH(t)
      IF u0 > w7
      {
        RETURN u0
      }
      RETURN w7
    }
    SET x2 TO LENGTH(s)
    SET y5 TO (1 << LENGTH(s))
    SET z9 TO 0
    WHILE z9 < y5
    {
      SET A8 TO 0
      FOR B4 FROM 0 TO LENGTH(s) - 1
      {
        IF ((z9 & (1 << B4)) != 0)
        {
          SET A8 TO A8 + 1
        }
      }
      IF A8 > numOps
      {
        z9 = z9 + 1
        CONTINUE
      }
      SET C6 TO []
      FOR D0 FROM 0 TO LENGTH(s) - 1
      {
        APPEND s[D0] TO C6
      }
      FOR E1 FROM 0 TO LENGTH(C6) - 1
      {
        IF ((z9 & (1 << E1)) != 0)
        {
          IF C6[E1] == '0'
          {
            SET C6[E1] TO '1'
          }
          ELSE
          {
            SET C6[E1] TO '0'
          }
        }
      }
      SET F7 TO longest_uniform_substring(C6)
      IF x2 > F7
      {
        SET x2 TO F7
      }
      SET z9 TO z9 + 1
    }
    RETURN x2
  }
}