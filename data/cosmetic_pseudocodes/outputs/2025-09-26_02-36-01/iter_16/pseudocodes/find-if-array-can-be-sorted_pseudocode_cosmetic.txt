CLASS Solution
{
    FUNCTION canSortArray(nums)
    {
        FUNCTION count_set_bits(x)
        {
            SET m TO x
            SET result TO 0
            WHILE m GREATER THAN 0
            {
                SET bit_flag TO m BITWISE_AND 1
                SET result TO result PLUS bit_flag
                SET m TO m RIGHT_SHIFT 1
            }
            RETURN result
        }

        SET k TO LENGTH OF nums
        SET temp_list TO an empty list
        FOR idx FROM 0 TO k MINUS 1
        {
            APPEND element idx of nums TO temp_list
        }
        SET target TO temp_list
        CALL target SORT_ASCENDING

        FOR outer_idx FROM 0 TO (k MINUS 1)
        {
            SET inner_idx TO 0
            WHILE inner_idx LESS THAN (k MINUS 1)
            {
                SET bits_current TO count_set_bits(element inner_idx of nums)
                SET bits_next TO count_set_bits(element (inner_idx PLUS 1) of nums)
                IF (bits_current EQUALS bits_next) AND (element inner_idx of nums GREATER THAN element (inner_idx PLUS 1) of nums)
                {
                    SET holder TO element inner_idx of nums
                    SET element inner_idx of nums TO element (inner_idx PLUS 1) of nums
                    SET element (inner_idx PLUS 1) of nums TO holder
                }
                SET inner_idx TO inner_idx PLUS 1
            }
        }

        SET eq_flag TO true
        SET d TO 0
        WHILE (d LESS THAN k) AND eq_flag
        {
            IF element d of nums NOT EQUAL target[d]
            {
                SET eq_flag TO false
            }
            SET d TO d PLUS 1
        }
        RETURN eq_flag
    }
}