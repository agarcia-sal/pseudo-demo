CLASS Solution
    FUNCTION maximumPoints(enemyEnergies currentEnergy)
        PROCEDURE ascendSort(arr)
            PROCEDURE swap(x, y)
                TEMP := arr[x]
                arr[x] := arr[y]
                arr[y] := TEMP
            END PROCEDURE

            INDEX_A := 0
            WHILE INDEX_A < LENGTH(arr) - 1
                INDEX_B := 0
                REPEAT
                    IF arr[INDEX_B] > arr[INDEX_B + 1]
                        CALL swap(INDEX_B, (INDEX_B + 1))
                    END IF
                    INDEX_B := INDEX_B + 1
                    IF NOT (INDEX_B < LENGTH(arr) - 1)
                        EXIT
                    END IF
                UNTIL FALSE
                INDEX_A := INDEX_A + 1
            END WHILE
        END PROCEDURE

        CALL ascendSort(enemyEnergies)
        OUTPUT_VALUE := 0
        TEMP_ENERGY := currentEnergy

        IF NOT (TEMP_ENERGY >= enemyEnergies[0])
            RETURN 0
        END IF

        FUNCTION getIntegerDivision(num, denom)
            QUOTIENT := 0
            REM := num
            WHILE REM >= denom
                REM := REM - denom
                QUOTIENT := QUOTIENT + 1
            END WHILE
            RETURN QUOTIENT
        END FUNCTION

        FUNCTION getModulo(num, denom)
            REM := num
            WHILE REM >= denom
                REM := REM - denom
            END WHILE
            RETURN REM
        END FUNCTION

        INDEX := LENGTH(enemyEnergies) - 1
        LOOP_CONTINUE := TRUE
        WHILE LOOP_CONTINUE
            INCREASE := CALL getIntegerDivision(TEMP_ENERGY, enemyEnergies[0])
            OUTPUT_VALUE := OUTPUT_VALUE + INCREASE

            REMAINDER := CALL getModulo(TEMP_ENERGY, enemyEnergies[0])
            TEMP_ENERGY := REMAINDER + enemyEnergies[INDEX]

            INDEX := INDEX - 1
            IF INDEX < 0
                LOOP_CONTINUE := FALSE
            END IF
        END WHILE

        RETURN OUTPUT_VALUE
    END FUNCTION
END CLASS