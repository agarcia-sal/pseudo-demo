CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        PROCEDURE customSortDecreasing(arr)
            PROCEDURE swapElements(x y)
                TEMP Q := arr[x]
                arr[x] := arr[y]
                arr[y] := Q
            END PROCEDURE
            VARIABLE R := 0
            VARIABLE S := LENGTH(arr) - 1
            REPEAT
                VARIABLE T := 0
                FOR U FROM R TO S - 1 DO
                    IF arr[U] < arr[U + 1] THEN
                        swapElements(U U + 1)
                        T := U
                    END IF
                END FOR
                S := T
            UNTIL S = 0
        END PROCEDURE

        customSortDecreasing(horizontalCut)
        customSortDecreasing(verticalCut)

        VARIABLE A := 0
        VARIABLE B := 0
        VARIABLE C := 0
        VARIABLE D := 0

        LABEL LoopStart
        IF (B >= LENGTH(horizontalCut)) AND (C >= LENGTH(verticalCut)) THEN
            GOTO LoopEnd
        END IF

        IF (C = LENGTH(verticalCut)) OR ((B < LENGTH(horizontalCut)) AND (horizontalCut[B] > verticalCut[C])) THEN
            VARIABLE E := horizontalCut[B] * D
            A := A + E
            C := C + 1
            B := B + 1
            D := D + 1
        ELSE
            VARIABLE F := verticalCut[C] * C
            A := A + F
            C := C + 1
            B := B
            D := D
            C := C + 1
        END IF

        IF C < LENGTH(verticalCut) OR B < LENGTH(horizontalCut) THEN
            GOTO LoopStart
        END IF
        LABEL LoopEnd

        RETURN A
    END FUNCTION
END CLASS