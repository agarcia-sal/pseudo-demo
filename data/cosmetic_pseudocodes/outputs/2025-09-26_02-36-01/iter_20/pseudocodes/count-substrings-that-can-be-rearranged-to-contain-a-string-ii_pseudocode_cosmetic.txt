CLASS Solution
    FUNCTION validSubstringCount(word1, word2)
        FUNCTION makeCounter(lst)
            SET xzc TO EMPTY MAP
            SET idx TO 0
            REPEAT
                IF idx IS GREATER OR EQUAL TO LENGTH(lst) THEN BREAK
                SET c ORF lst[idx]
                IF c NOT IN xzc THEN SET xzc[c] TO 0
                SET xzc[c] TO xzc[c] PLUS 1
                SET idx TO idx PLUS 1
            UNTIL FALSE
            RETURN xzc
        END FUNCTION

        FUNCTION containsKey(m, k)
            RETURN k IN m
        END FUNCTION

        FUNCTION getCount(m, k)
            IF k IN m THEN RETURN m[k] ELSE RETURN 0
        END FUNCTION

        SET fgj TO makeCounter(word2)
        SET hqr TO makeCounter(EMPTY LIST)
        SET tyv TO LENGTH(fgj)
        SET sxb TO 0
        SET ymw TO 0
        SET pji TO 0
        SET zkt TO 0

        FUNCTION incMap(m, k)
            IF k IN m THEN SET m[k] TO m[k] PLUS 1 ELSE SET m[k] TO 1
        END FUNCTION

        FUNCTION decMap(m, k)
            IF k IN m THEN SET m[k] TO m[k] MINUS 1 ELSE SET m[k] TO -1
        END FUNCTION

        FUNCTION loopRight(r, limit, acc)
            IF r GREATER OR EQUAL TO limit THEN RETURN acc
            SET qyl TO word1[r]
            incMap(hqr, qyl)
            IF containsKey(fgj, qyl) AND getCount(hqr, qyl) EQUALS getCount(fgj, qyl) THEN
                SET sxb TO sxb PLUS 1
            END IF

            FUNCTION innerWhile(lp, val_sub)
                IF NOT (sxb EQUALS tyv AND (r PLUS 1 MINUS lp) GREATER OR EQUAL TO LENGTH(word2)) THEN RETURN (lp, val_sub)
                SET val_sub TO val_sub PLUS (LENGTH(word1) MINUS r)
                SET ymd TO word1[lp]
                decMap(hqr, ymd)
                IF containsKey(fgj, ymd) AND getCount(hqr, ymd) LESS THAN getCount(fgj, ymd) THEN
                    SET sxb TO sxb MINUS 1
                END IF
                RETURN innerWhile(lp PLUS 1, val_sub)
            END FUNCTION

            SET (pji, zkt) TO innerWhile(pji, zkt)
            RETURN loopRight(r PLUS 1, limit, acc)
        END FUNCTION

        SET zkt TO loopRight(0, LENGTH(word1), zkt)
        RETURN zkt
    END FUNCTION
END CLASS