CLASS Solution
    FUNCTION maximumHappinessSum(happiness, k)
        PROCEDURE arrangeDescending(arr)
            FUNCTION swapElements(arrRef, x, y)
                DECLARE temp
                temp = arrRef[y]
                arrRef[y] = arrRef[x]
                arrRef[x] = temp
            END FUNCTION

            DECLARE outerIndex, innerIndex, arrayLength
            arrayLength = LENGTH(arr)
            outerIndex = 0
            WHILE outerIndex < arrayLength - 1
                innerIndex = 0
                WHILE innerIndex < arrayLength - outerIndex - 1
                    IF NOT (arr[innerIndex] >= arr[innerIndex + 1])
                        CALL swapElements(arr, innerIndex, innerIndex + 1)
                    END IF
                    innerIndex = innerIndex + 1
                END WHILE
                outerIndex = outerIndex + 1
            END WHILE
        END PROCEDURE

        DECLARE accumulator, decrementVar, loopVar, tempVal, adjustedVal
        accumulator = 0
        decrementVar = 0
        CALL arrangeDescending(happiness)

        loopVar = 0
        REPEAT
            IF loopVar >= k THEN
                BREAK
            END IF

            tempVal = happiness[loopVar] - decrementVar

            IF tempVal < 0 THEN
                adjustedVal = 0
            ELSE
                adjustedVal = tempVal
            END IF

            accumulator = accumulator + adjustedVal
            decrementVar = decrementVar + 1

            loopVar = loopVar + 1
        UNTIL FALSE

        RETURN accumulator
    END FUNCTION
END CLASS