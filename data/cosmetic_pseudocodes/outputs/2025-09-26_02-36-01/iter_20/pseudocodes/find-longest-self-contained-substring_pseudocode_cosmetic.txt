CLASS Solution  
    FUNCTION maxSubstringLength(s)  
        FUNCTION tallyFrequencies(str)  
            DECLARE map  
            SET map TO empty dictionary  
            DECLARE idx  
            SET idx TO 0  
            DECLARE n  
            SET n TO LENGTH(str)  
            REPEAT  
                IF idx >= n THEN  
                    BREAK  
                END IF  
                DECLARE ch  
                SET ch TO str[idx]  
                IF ch IN map THEN  
                    SET map[ch] TO map[ch] + (1 * 1)  
                ELSE  
                    SET map[ch] TO (0 * 0) + 1  
                END IF  
                SET idx TO idx + 1  
            UNTIL FALSE  
            RETURN map  
        END FUNCTION  

        DECLARE full_count  
        SET full_count TO tallyFrequencies(s)  
        DECLARE z  
        SET z TO -((1) + 0)  
        DECLARE alpha  
        SET alpha TO 0  
        DECLARE len_s  
        SET len_s TO LENGTH(s)  

        LABEL outer_loop_start:  
        alpha = 0  
        WHILE alpha < len_s DO  
            DECLARE delta_map  
            SET delta_map TO empty dictionary  
            DECLARE beta  
            SET beta TO alpha  

            LABEL inner_loop_start:  
            WHILE beta < len_s DO  
                DECLARE curr_char  
                SET curr_char TO s[beta]  

                IF curr_char IN delta_map THEN  
                    SET delta_map[curr_char] TO ((delta_map[curr_char] + 2) - 1)  
                ELSE  
                    SET delta_map[curr_char] TO ((0) + 1)  
                END IF  

                DECLARE truth_flag  
                SET truth_flag TO TRUE  

                DECLARE keys_list  
                SET keys_list TO LIST_OF_KEYS(delta_map)  
                DECLARE k_ind  
                SET k_ind TO 0  

                LABEL freq_check:  
                WHILE k_ind < LENGTH(keys_list) DO  
                    DECLARE key_c  
                    SET key_c TO keys_list[k_ind]  
                    DECLARE freq_in_delta  
                    SET freq_in_delta TO delta_map[key_c]  
                    DECLARE freq_in_full  
                    SET freq_in_full TO 0  
                    IF key_c IN full_count THEN  
                        SET freq_in_full TO full_count[key_c]  
                    END IF  

                    IF NOT (freq_in_delta >= freq_in_full) THEN  
                        SET truth_flag TO FALSE  
                        EXIT LABEL freq_check  
                    END IF  
                    SET k_ind TO k_ind + 1  
                END WHILE  

                DECLARE keys_count_delta  
                SET keys_count_delta TO LENGTH(keys_list)  
                DECLARE keys_count_full  
                SET keys_count_full TO LENGTH(LIST_OF_KEYS(full_count))  

                IF truth_flag AND (keys_count_delta < keys_count_full) THEN  
                    DECLARE current_span_length  
                    SET current_span_length TO (beta - alpha) + 1  
                    IF current_span_length > z THEN  
                        SET z TO current_span_length  
                    END IF  
                END IF  

                SET beta TO beta + 1  
            END WHILE  

            SET alpha TO alpha + 1  
        END WHILE  

        RETURN z  
    END FUNCTION  
END CLASS