CLASS Solution  
    FUNCTION minimumLength(s)  
        FUNCTION customCounter(inputStr)  
            DECLARE dictCounts AS empty map  
            DECLARE idx AS zero  
            WHILE idx LESS THAN LENGTH(inputStr)  
                DECLARE charAtIdx AS inputStr[idx]  
                IF charAtIdx NOT IN dictCounts  
                    dictCounts[charAtIdx] = 1  
                ELSE  
                    dictCounts[charAtIdx] = dictCounts[charAtIdx] + 1  
                END IF  
                idx = idx + 1  
            END WHILE  
            RETURN dictCounts  
        END FUNCTION

        DECLARE dictFreqs AS customCounter(s)  
        DECLARE accOdd AS 0  
        DECLARE accEven AS 0  

        DECLARE keysList AS LIST OF ALL KEYS IN dictFreqs  
        DECLARE pos AS 0

        REPEAT  
            IF pos >= LENGTH(keysList) THEN  
                BREAK  
            END IF  

            DECLARE keyCurr AS keysList[pos]  
            DECLARE valCurr AS dictFreqs[keyCurr]  
            DECLARE modVal AS valCurr - (2 * (valCurr / 2))  // equivalent to valCurr MOD 2

            IF modVal EQUAL 1 THEN  
                accOdd = accOdd + 1  
            ELSE  
                DECLARE isZeroCheck AS (valCurr + 0) EQUAL 0  
                IF NOT isZeroCheck THEN  
                    accEven = accEven + 2  
                END IF  
            END IF  

            pos = pos + 1  
        UNTIL FALSE  

        DECLARE finalSum AS accOdd + accEven  
        RETURN finalSum  
    END FUNCTION  
END CLASS