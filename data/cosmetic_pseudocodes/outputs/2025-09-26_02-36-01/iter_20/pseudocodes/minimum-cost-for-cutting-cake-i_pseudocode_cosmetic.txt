CLASS Solution  
    FUNCTION minimumCost(m n horizontalCut verticalCut)  
        PROCEDURE sortDescending(array)  
            PROCEDURE swap(a b)  
                SET temp TO a  
                SET a TO b  
                SET b TO temp  
            END PROCEDURE  
            SET length TO length_of(array)  
            SET indexOuter TO 0  
            WHILE indexOuter LESS THAN length MINUS 1  
                SET indexInner TO 0  
                WHILE indexInner LESS THAN length MINUS indexOuter MINUS 1  
                    IF element at indexInner of array LESS THAN element at indexInner PLUS 1 of array  
                        CALL swap(element at indexInner of array, element at indexInner PLUS 1 of array)  
                    END IF  
                    INCREMENT indexInner BY 1  
                END WHILE  
                INCREMENT indexOuter BY 1  
            END WHILE  
        END PROCEDURE

        CALL sortDescending(horizontalCut)  
        CALL sortDescending(verticalCut)  

        SET omega TO 0  
        SET alpha TO 0  
        SET beta TO 0  
        SET gamma TO 1  
        SET delta TO 1  

        SET continueFlag TO TRUE  
        WHILE continueFlag  
            SET conditionOne TO (alpha LESS THAN m MINUS 1)  
            SET conditionTwo TO (beta LESS THAN n MINUS 1)  
            SET continueFlag TO (conditionOne OR conditionTwo)  

            IF (beta EQUALS n MINUS 1) OR (conditionOne AND (element at alpha of horizontalCut GREATER THAN element at beta of verticalCut))  
                SET omega TO omega PLUS (element at alpha of horizontalCut MULTIPLIED BY delta)  
                SET gamma TO gamma PLUS 1  
                SET alpha TO alpha PLUS 1  
            ELSE  
                SET omega TO omega PLUS (element at beta of verticalCut MULTIPLIED BY gamma)  
                SET delta TO delta PLUS 1  
                SET beta TO beta PLUS 1  
            END IF  
        END WHILE  

        RETURN omega  
    END FUNCTION  
END CLASS