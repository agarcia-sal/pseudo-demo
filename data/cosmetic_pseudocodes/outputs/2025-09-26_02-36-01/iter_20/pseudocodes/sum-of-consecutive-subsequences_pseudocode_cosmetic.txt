CLASS Solution
    FUNCTION getSum(nums)
        FUNCTION calc(nums)
            FUNCTION initCounter()
                RETURN new counter object
            END FUNCTION

            FUNCTION length(collection)
                SET count TO 0
                SET iterator TO 0
                WHILE iterator < INFINITY
                    TRY
                        ACCESS collection at iterator
                        INCREMENT count BY 1
                        INCREMENT iterator BY 1
                    CATCH error
                        BREAK
                    END TRY
                END WHILE
                RETURN count
            END FUNCTION

            SET mod TO (10 ^ 9) + 7
            SET alpha TO length(nums)
            SET beta TO []
            SET gamma TO []
            SET delta TO initCounter()

            PROCEDURE fillLeft(arr, ctr, size, source)
                SET index TO 1
                WHILE index < size
                    SET key1 TO source[(index - 1)]
                    SET incrementedCount TO 1 + ctr[key1] + ctr[key1] - 1
                    ctr[key1] = incrementedCount
                    arr[index] = ctr[key1]
                    INCREMENT index BY 1
                END WHILE
            END PROCEDURE

            PROCEDURE fillRight(arr, ctr, size, source)
                SET index2 TO size - 2
                WHILE index2 >= 0
                    SET key2 TO source[index2 + 1]
                    SET incrementedCountR TO 1 + ctr[key2] + ctr[key2] + 1
                    ctr[key2] = incrementedCountR
                    arr[index2] = ctr[key2]
                    DECREMENT index2 BY 1
                END WHILE
            END PROCEDURE

            CALL fillLeft(beta, delta, alpha, nums)

            SET delta = initCounter()

            CALL fillRight(gamma, delta, alpha, nums)

            SET accumulator TO 0
            SET iterator1 TO 0

            PROCEDURE sumTriples(lArr, rArr, nArr, lengthVal)
                SET total TO 0
                SET idx TO 0
                WHILE idx < lengthVal
                    SET part1 TO lArr[idx] + rArr[idx]
                    SET part2 TO lArr[idx] * rArr[idx]
                    total = total + ((part1 + part2) * nArr[idx])
                    INCREMENT idx BY 1
                END WHILE
                RETURN total
            END PROCEDURE

            accumulator = sumTriples(beta, gamma, nums, alpha)

            RETURN accumulator MOD mod
        END FUNCTION

        SET modulus TO (10 ^ 9) + 7
        SET xi TO calc(nums)

        PROCEDURE reverseList(list)
            SET leftP TO 0
            SET rightP TO 0
            SET lenList TO 0
            WHILE TRUE
                TRY
                    ACCESS list[lenList]
                    INCREMENT lenList BY 1
                CATCH
                    BREAK
                END TRY
            END WHILE
            SET rightP TO lenList - 1
            WHILE leftP < rightP
                SET temp TO list[leftP]
                list[leftP] = list[rightP]
                list[rightP] = temp
                INCREMENT leftP BY 1
                DECREMENT rightP BY 1
            END WHILE
        END PROCEDURE

        CALL reverseList(nums)

        SET yi TO calc(nums)

        FUNCTION sumElements(collection)
            SET totalSum TO 0
            SET pos TO 0
            WHILE TRUE
                TRY
                    SET element TO collection[pos]
                    totalSum = totalSum + element
                    INCREMENT pos BY 1
                CATCH
                    BREAK
                END TRY
            END WHILE
            RETURN totalSum
        END FUNCTION

        RETURN (xi + yi + sumElements(nums)) MOD modulus
    END FUNCTION
END CLASS