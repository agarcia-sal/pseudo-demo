CLASS Solution
    FUNCTION minimumSum(grid)
      DEFINE FUNCTION alpha(beta)
        FUNCTION gamma(delta)
          r = LENGTH(grid)
          w = LENGTH(grid[0])
          upsilon = []
          xi = 0
          WHILE xi < r
            kappa = 0
            REPEAT
              IF grid[xi] == 1 AND grid[xi][kappa] == 1 THEN
                upsilon APPEND (xi, kappa)
              END IF
              kappa = kappa + 1
              IF NOT (kappa < w) THEN BREAK END IF
            UNTIL FALSE
            xi = xi + 1
          END WHILE
          RETURN upsilon
        END FUNCTION

        DEFINE FUNCTION theta(I)
          FUNCTION lambda(sigma)
            epsilon = LENGTH(I)
            IF epsilon == 0 THEN RETURN 0 END IF
            mu = I[0][0]
            nu = I[0][0]
            psi = I[0][1]
            omega = I[0][1]
            zeta = 1
            rho = 0
            WHILE rho < epsilon
              IF I[rho][0] < mu THEN mu = I[rho][0] END IF
              IF I[rho][0] > nu THEN nu = I[rho][0] END IF
              IF I[rho][1] < psi THEN psi = I[rho][1] END IF
              IF I[rho][1] > omega THEN omega = I[rho][1] END IF
              rho = rho + zeta
            END WHILE
            alpha_ = (nu - mu) + 1
            beta_ = (omega - psi) + 1
            RETURN alpha_ * beta_
          END FUNCTION
          RETURN lambda(I)
        END FUNCTION

        upsilon = alpha(grid)

        SET DI = upsilon
        SET pi = LENGTH(DI)
        zet = +âˆž

        DEFINE FUNCTION sigma(k)
          IF k == 0 THEN
            RETURN [[]]
          END IF
          DEFINE FUNCTION tau(arr, size, start)
            IF size == 0 THEN
              RETURN [[]]
            END IF
            res = []
            i = start
            WHILE i < LENGTH(arr)
              e = arr[i]
              sub = tau(arr, size - 1, i + 1)
              j = 0
              WHILE j < LENGTH(sub)
                merged = [e] + sub[j]
                res APPEND merged
                j = j + 1
              END WHILE
              i = i + 1
            END WHILE
            RETURN res
          END FUNCTION
          RETURN tau(DI, k, 0)
        END FUNCTION

        i_ = 1
        WHILE i_ < pi - 1
          j_ = i_ + 1
          WHILE j_ < pi
            k_ = j_ + 1
            WHILE k_ <= pi
              psi_ = sigma(i_)
              FOR each strat IN psi_
                set_w = SET(DI)
                set_s = SET(strat)
                rem_1 = []
                FOR e1 IN set_w
                  cont = FALSE
                  for e2 in set_s
                    IF e1 == e2 THEN cont = TRUE END IF
                  END FOR
                  IF NOT cont THEN rem_1 APPEND e1 END IF
                END FOR
                rem_set_1 = rem_1
                diff = j_ - i_
                psi_2 = []
                DEFINE FUNCTION combos(arr, sz, st)
                  IF sz == 0 THEN RETURN [[]] END IF
                  res = []
                  m = st
                  WHILE m < LENGTH(arr)
                    curr = arr[m]
                    tail = combos(arr, sz - 1, m + 1)
                    n = 0
                    WHILE n < LENGTH(tail)
                      res APPEND [curr] + tail[n]
                      n = n + 1
                    END WHILE
                    m = m + 1
                  END WHILE
                  RETURN res
                END FUNCTION
                psi_2 = combos(rem_set_1, diff, 0)
                FOR each strat_2 IN psi_2
                  set_s_2 = SET(strat_2)
                  rem_2 = []
                  FOR e3 IN rem_set_1
                    found = FALSE
                    FOR e4 IN set_s_2
                      IF e3 == e4 THEN found = TRUE END IF
                    END FOR
                    IF NOT found THEN rem_2 APPEND e3 END IF
                  END FOR
                  strat_3 = rem_2
                  areaA = theta(strat)
                  areaB = theta(strat_2)
                  areaC = theta(strat_3)
                  IF (areaA > 0) AND (areaB > 0) AND (areaC > 0) THEN
                    cs = areaA + areaB + areaC
                    IF cs < zet THEN zet = cs END IF
                  END IF
                END FOR
              END FOR
              k_ = k_ + 1
            END WHILE
            j_ = j_ + 1
          END WHILE
          i_ = i_ + 1
        END WHILE

        RETURN zet
      END FUNCTION
      RETURN alpha(grid)
    END FUNCTION
END CLASS