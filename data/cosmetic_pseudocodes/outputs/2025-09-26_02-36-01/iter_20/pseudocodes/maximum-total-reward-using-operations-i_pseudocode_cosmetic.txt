CLASS Solution
    FUNCTION maxTotalReward(rewardValues)
        
        FUNCTION computeDepth(flag)
            FUNCTION binarySearchRight(target, arr)
                SET start TO 0
                SET end TO length(arr)
                WHILE start < end
                    SET mid TO (start + end) DIV 2
                    IF arr[mid] <= target
                        SET start TO mid + 1
                    ELSE
                        SET end TO mid
                    END IF
                END WHILE
                RETURN start
            END FUNCTION

            SET idx TO binarySearchRight(flag, rewardValues)
            SET cumulativeMax TO 0
            SET counter TO idx
            WHILE counter < length(rewardValues)
                SET currentVal TO rewardValues[counter]
                IF (flag + currentVal) > flag
                    SET candidate TO currentVal + computeDepth(flag + currentVal)
                    IF candidate > cumulativeMax
                        SET cumulativeMax TO candidate
                    END IF
                END IF
                SET counter TO counter + 1
            END WHILE
            RETURN cumulativeMax
        END FUNCTION

        FUNCTION quickSortAsc(array, left, right)
            IF left >= right
                RETURN
            END IF
            SET pivot TO array[right]
            SET i TO left - 1
            SET j TO left
            WHILE j < right
                IF array[j] < pivot
                    SET i TO i + 1
                    SWAP array[i], array[j]
                END IF
                SET j TO j + 1
            END WHILE
            SWAP array[i + 1], array[right]
            quickSortAsc(array, left, i)
            quickSortAsc(array, i + 2, right)
        END FUNCTION

        quickSortAsc(rewardValues, 0, length(rewardValues) - 1)
        RETURN computeDepth(0)
    END FUNCTION
END CLASS