CLASS Solution
    FUNCTION maxTotalReward(rewardValues)
        FUNCTION localSort(list)
            FUNCTION insertSorted(elem, sortedList)
                IF sortedList IS EMPTY THEN
                    RETURN [elem]
                ELSE IF elem < sortedList[0] THEN
                    RETURN [elem] + sortedList
                ELSE
                    RETURN [sortedList[0]] + insertSorted(elem, sortedList[1:])
                END IF
            END FUNCTION

            FUNCTION sorter(unsorted, sortedAcc)
                IF unsorted IS EMPTY THEN
                    RETURN sortedAcc
                ELSE
                    RETURN sorter(unsorted[1:], insertSorted(unsorted[0], sortedAcc))
                END IF
            END FUNCTION

            RETURN sorter(list, [])
        END FUNCTION

        SET alpha TO localSort(rewardValues)
        SET beta TO 1

        FUNCTION computeBeta(lst, acc)
            IF lst IS EMPTY THEN
                RETURN acc
            ELSE
                SET x TO lst[0]
                SET mask1 TO 1 << x
                SET mask2 TO ((acc AND (mask1 - 1)) << x)
                SET newAcc TO acc OR mask2
                RETURN computeBeta(lst[1:], newAcc)
            END IF
        END FUNCTION

        SET beta TO computeBeta(alpha, beta)
        SET gamma TO 0

        WHILE (1 << gamma) <= beta DO
            SET gamma TO gamma + 1
        END WHILE

        RETURN gamma - 1
    END FUNCTION
END CLASS