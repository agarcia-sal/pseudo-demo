CLASS Solution  
    FUNCTION minimumLevels(possible)  
        PROCEDURE add(x, y)  
            RETURN x + y  
        END PROCEDURE

        PROCEDURE subtract(x, y)  
            RETURN x - y  
        END PROCEDURE

        PROCEDURE multiply(x, y)  
            RETURN x * y  
        END PROCEDURE

        PROCEDURE length_of(lst)  
            SET count TO 0  
            SET pos TO 0  
            WHILE TRUE  
                IF pos = count_of_elements(lst) THEN  
                    BREAK  
                END IF  
                INCREMENT pos BY 1  
                INCREMENT count BY 1  
            END WHILE  
            RETURN count  
        END PROCEDURE

        SET Alpha TO 0  
        SET Beta TO 0  

        PROCEDURE process_sum(arr)  
            SET XZ TO 0  
            SET CY TO 0  
            WHILE TRUE  
                IF CY = length_of(arr) THEN  
                    BREAK  
                END IF  
                SET temp_val TO multiply(2, subtract(arr[CY], 1))  
                SET XZ TO add(XZ, temp_val)  
                INCREMENT CY BY 1  
            END WHILE  
            RETURN XZ  
        END PROCEDURE

        SET Alpha TO process_sum(possible)  

        PROCEDURE check_condition(arr)  
            SET Ix TO 0  
            SET QZ TO 0  
            REPEAT  
                IF Ix = subtract(subtract(length_of(arr), 1), 0) THEN  
                    EXIT REPEAT  
                END IF  
                SET val1 TO multiply(2, subtract(arr[Ix], 1))  
                SET QZ TO add(QZ, val1)  
                SET Alpha TO subtract(Alpha, val1)  
                IF QZ > Alpha THEN  
                    RETURN add(Ix, 1)  
                END IF  
                INCREMENT Ix BY 1  
            UNTIL FALSE  
            RETURN -1  
        END PROCEDURE

        RETURN check_condition(possible)  
    END FUNCTION  
END CLASS