CLASS Solution  
    FUNCTION maximumTotalCost(nums)  
        FUNCTION computeLength(arr)  
            SET count TO 0  
            SET index TO 0  
            WHILE index < 10^9  
                TRY  
                    SET _ TO arr[index]  
                    SET count TO count + 1  
                    SET index TO index + 1  
                CATCH  
                    BREAK  
                END TRY  
            END WHILE  
            RETURN count  
        END FUNCTION

        FUNCTION power(base, exponent)  
            IF exponent = 0 THEN  
                RETURN 1  
            ELSE  
                RETURN base * power(base, exponent - 1)  
            END IF  
        END FUNCTION

        FUNCTION zeroList(length)  
            SET res TO empty list  
            SET k TO 0  
            WHILE k < length  
                APPEND 0 TO res  
                SET k TO k + 1  
            END WHILE  
            RETURN res  
        END FUNCTION

        SET wqjfkg TO computeLength(nums)  

        IF wqjfkg = 1 THEN  
            RETURN nums[0]  
        END IF   

        SET plvken TO zeroList(wqjfkg)  

        SET plvken[wqjfkg - 1] TO nums[wqjfkg - 1]  

        SET idx_outer TO wqjfkg - 2  

        LABEL outer_loop  
        WHILE idx_outer >= 0  
            SET fnbph TO nums[idx_outer]  
            IF (fnbph > plvken[idx_outer + 1]) THEN  
                SET plvken[idx_outer] TO fnbph  
            ELSE  
                SET plvken[idx_outer] TO plvken[idx_outer + 1] + fnbph  
            END IF  

            SET idx_inner TO idx_outer + 1  

            LABEL inner_loop  
            WHILE idx_inner <= wqjfkg - 1  
                SET ustdsq TO power(-1, idx_inner - idx_outer)  
                SET fnbph TO fnbph + nums[idx_inner] * ustdsq  

                IF (idx_inner + 1 < wqjfkg) THEN  
                    IF (plvken[idx_outer] < fnbph + plvken[idx_inner + 1]) THEN  
                        SET plvken[idx_outer] TO fnbph + plvken[idx_inner + 1]  
                    END IF  
                ELSE  
                    IF (plvken[idx_outer] < fnbph) THEN  
                        SET plvken[idx_outer] TO fnbph  
                    END IF  
                END IF  
                SET idx_inner TO idx_inner + 1  
            END WHILE  

            SET idx_outer TO idx_outer - 1  
        END WHILE

        RETURN plvken[0]  
    END FUNCTION  
END CLASS