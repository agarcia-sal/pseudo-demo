CLASS Solution
    FUNCTION tripletCount(a AS List OF integer, b AS List OF integer, c AS List OF integer) RETURNS integer
        FUNCTION count_even_odd_bits(arr AS List OF integer) RETURNS tuple OF integer and integer
            FUNCTION bit_count(x AS integer) RETURNS integer
                SET u TO 0
                SET v TO x
                WHILE v > 0
                    SET u TO u + (v AND 1)
                    SET v TO v DIV 2
                END WHILE
                RETURN u
            END FUNCTION

            SET xi TO 0
            SET xj TO 0
            SET zk TO 0
            WHILE zk < LENGTH(arr)
                SET temp_val TO arr[zk]
                SET yq TO bit_count(temp_val)
                IF ((yq - ((yq DIV 2)*2)) = 0) THEN
                    SET xi TO xi + 1
                END IF
                SET zk TO zk + 1
            END WHILE

            SET count_of_even TO xi
            SET count_of_odd TO LENGTH(arr) - xi
            RETURN count_of_even AND count_of_odd
        END FUNCTION

        SET alfa TO 0
        SET beta TO 0
        SET gamma TO 0
        SET delta TO 0
        SET epsilon TO 0
        SET zeta TO 0

        LET (alfa, beta) BE count_even_odd_bits(a)
        LET (gamma, delta) BE count_even_odd_bits(b)
        LET (epsilon, zeta) BE count_even_odd_bits(c)

        FUNCTION mul_three(p AS integer, q AS integer, r AS integer) RETURNS integer
            RETURN p * q * r
        END FUNCTION

        SET p1 TO mul_three(alfa, gamma, epsilon)
        SET p2a TO mul_three(alfa, delta, zeta)
        SET p2b TO mul_three(beta, gamma, zeta)
        SET p2c TO mul_three(beta, delta, epsilon)

        SET final_result TO p1 + (p2a + p2b + p2c)
        RETURN final_result
    END FUNCTION
END CLASS