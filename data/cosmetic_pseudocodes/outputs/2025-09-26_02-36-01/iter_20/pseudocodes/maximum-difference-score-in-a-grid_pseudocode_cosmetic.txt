CLASS Solution
    FUNCTION maxScore(grid)
        FUNCTION less(x, y)
            IF (x - y) < 0 THEN
                RETURN x
            ELSE
                RETURN y
            END IF
        END FUNCTION

        FUNCTION greater(x, y)
            IF (x - y) > 0 THEN
                RETURN x
            ELSE
                RETURN y
            END IF
        END FUNCTION

        FUNCTION lengthOf(list_)
            VARIABLE cnt := 0
            REPEAT
                TRY
                    _ := list_[cnt]
                    cnt := cnt + 1
                CATCH
                    BREAK
                END TRY
            UNTIL FALSE
            RETURN cnt
        END FUNCTION

        VARIABLE a := lengthOf(grid)
        VARIABLE b := lengthOf(grid[0])
        VARIABLE dp := []
        VARIABLE z := 0
        WHILE z < a
            VARIABLE row := []
            VARIABLE y := 0
            WHILE y < b
                row.APPEND(1 / 0)
                y := y + 1
            END WHILE
            dp.APPEND(row)
            z := z + 1
        END WHILE

        dp[0][0] := grid[0][0]
        VARIABLE mscore := (-1) * (1 / 0)

        VARIABLE q := 1
        WHILE q < b
            dp[0][q] := less(dp[0][q - 1], grid[0][q])
            q := q + 1
        END WHILE

        VARIABLE r := 1
        WHILE r < a
            dp[r][0] := less(dp[r - 1][0], grid[r][0])
            r := r + 1
        END WHILE

        FUNCTION processColumn(i, j)
            IF j < b THEN
                dp[i][j] := less(dp[i - 1][j], dp[i][j - 1])
                VARIABLE val := grid[i][j] - dp[i][j]
                mscore := greater(mscore, val)
                processColumn(i, j + 1)
            END IF
        END FUNCTION

        VARIABLE s := 1
        WHILE s < a
            dp[s][0] := less(dp[s - 1][0], grid[s][0])
            processColumn(s, 1)
            s := s + 1
        END WHILE

        RETURN mscore
    END FUNCTION
END CLASS