CLASS Solution
    FUNCTION unmarkedSumArray(nums FUNCTION PARAMETER, queries FUNCTION PARAMETER) RETURNS list
        FUNCTION customHeapify(arr)
            SET n TO LENGTH(arr)
            FUNCTION siftDown(pos)
                SET left TO (pos * 2) + 1
                SET right TO (pos * 2) + 2
                SET smallest TO pos
                IF left < n AND arr[left][0] < arr[smallest][0] THEN
                    SET smallest TO left
                END IF
                IF right < n AND arr[right][0] < arr[smallest][0] THEN
                    SET smallest TO right
                END IF
                IF smallest != pos THEN
                    SET temp TO arr[pos]
                    SET arr[pos] TO arr[smallest]
                    SET arr[smallest] TO temp
                    CALL siftDown(smallest)
                END IF
            END FUNCTION
            SET idx TO (n // 2) - 1
            WHILE idx >= 0
                CALL siftDown(idx)
                SET idx TO idx - 1
            END WHILE
        END FUNCTION

        FUNCTION customHeappop(heap_arr)
            SET length_heap TO LENGTH(heap_arr)
            IF length_heap == 0 THEN RETURN null END IF
            SET root_elem TO heap_arr[0]
            SET heap_arr[0] TO heap_arr[length_heap - 1]
            REMOVE LAST ELEMENT FROM heap_arr
            CALL customHeapify(heap_arr)
            RETURN root_elem
        END FUNCTION

        SET alpha TO []
        SET beta TO 0
        SET gamma TO 0
        SET delta TO {}

        SET epsilon TO 0
        SET zeta TO 0
        SET eta TO 0

        SET theta TO 0
        SET iota TO 0
        SET kappa TO 0
        SET lambda TO 0
        SET mu TO 0
        SET nu TO 0

        SET xi TO []
        SET omicron TO 0

        SET pi TO 0
        SET rho TO 0
        SET sigma TO 0

        SET tau TO 0

        SET upsilon TO 0
        SET phi TO 0

        SET chi TO 0
        SET psi TO 0

        SET omega TO 0

        SET a1 TO 0
        SET b1 TO 0
        SET c1 TO 0
        SET d1 TO 0
        SET e1 TO 0
        SET f1 TO 0

        SET g1 TO LENGTH(nums) - 1
        SET h1 TO 0

        SET marked_indices TO {}
        SET total_sum TO 0
        SET result TO []

        FOR each position theta AND element iota IN ENUMERATE(nums)
            CALL lambda_func(iota, theta)
        END FOR

        FUNCTION lambda_func(val_param, pos_param)
            APPEND [val_param, pos_param] TO alpha
        END FUNCTION

        CALL customHeapify(alpha)

        FOR EACH idx_inquerie, k_inquerie IN ENUMERATE(queries)
            SET idx_val TO k_inquerie[0]
            SET k_val TO k_inquerie[1]

            IF NOT contains_key(marked_indices, idx_val) THEN
                insert_key(marked_indices, idx_val)
                SET total_sum TO sumNums(nums) - nums[idx_val]
            ELSE
                IF idx_inquerie == 0 THEN
                    SET total_sum TO sumNums(nums)
                END IF
            END IF

            SET count_iter TO 0

            WHILE count_iter < k_val AND LENGTH(alpha) != 0
                SET popped_elem TO customHeappop(alpha)
                SET val_heap TO popped_elem[0]
                SET idx_heap TO popped_elem[1]

                IF NOT contains_key(marked_indices, idx_heap) THEN
                    insert_key(marked_indices, idx_heap)
                    SET total_sum TO total_sum - val_heap
                    SET count_iter TO count_iter + 1
                END IF
            END WHILE

            APPEND total_sum TO result
        END FOR

        RETURN result
    END FUNCTION
END CLASS

FUNCTION contains_key(collection, key)
    RETURN key IN collection
END FUNCTION

FUNCTION insert_key(collection, key)
    ADD key TO collection
END FUNCTION

FUNCTION sumNums(nums_list)
    SET acc TO 0
    SET j TO 0
    WHILE j < LENGTH(nums_list)
        SET acc TO acc + nums_list[j]
        SET j TO j + 1
    END WHILE
    RETURN acc
END FUNCTION