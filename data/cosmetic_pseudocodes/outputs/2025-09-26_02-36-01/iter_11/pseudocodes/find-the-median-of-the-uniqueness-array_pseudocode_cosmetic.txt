CLASS Solution
    FUNCTION medianOfUniquenessArray(nums)
        FUNCTION helperLambda(k)
            SET accumulator TO 0
            SET startIndex TO 0
            ASSIGN frequencyMap TO an empty mapping with default zero
            SET uniqueCounter TO 0
            SET currentIndex TO 0
            WHILE currentIndex LESS THAN LENGTH(nums)
                IF frequencyMap[nums[currentIndex]] EQUALS 0 THEN
                    SET uniqueCounter TO uniqueCounter PLUS 1
                END IF
                INCREMENT frequencyMap[nums[currentIndex]] BY 1
                REPEAT
                    IF uniqueCounter GREATER THAN k THEN
                        DECREMENT frequencyMap[nums[startIndex]] BY 1
                        IF frequencyMap[nums[startIndex]] EQUALS 0 THEN
                            DECREMENT uniqueCounter BY 1
                        END IF
                        INCREMENT startIndex BY 1
                    ELSE
                        BREAK
                    END IF
                UNTIL FALSE
                SET accumulator TO accumulator PLUS (currentIndex MINUS startIndex PLUS 1)
                INCREMENT currentIndex BY 1
            END WHILE
            RETURN accumulator
        END FUNCTION

        SET nSquared TO LENGTH(nums) TIMES (LENGTH(nums) PLUS 1) DIVIDED BY 2
        SET targetRank TO (nSquared PLUS 1) DIVIDED BY 2
        SET lowBound TO 1
        SET highBound TO LENGTH(nums)
        REPEAT
            IF lowBound GREATER THAN OR EQUAL TO highBound THEN
                BREAK
            END IF
            SET midpoint TO lowBound PLUS (highBound MINUS lowBound) DIVIDED BY 2
            IF helperLambda(midpoint) LESS THAN targetRank THEN
                SET lowBound TO midpoint PLUS 1
            ELSE
                SET highBound TO midpoint
            END IF
        UNTIL FALSE
        RETURN lowBound
    END FUNCTION
END CLASS