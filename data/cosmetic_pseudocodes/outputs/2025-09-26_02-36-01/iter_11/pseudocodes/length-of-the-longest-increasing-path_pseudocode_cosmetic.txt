CLASS Solution
    FUNCTION maxPathLength(coordinates, k)
        SET zpm TO element at position 0 of element at position k of coordinates
        SET qvs TO element at position 1 of element at position k of coordinates
        SET oan TO empty list
        SET idx TO 0
        WHILE idx LESS THAN LENGTH of coordinates
            SET rht TO element at idx of coordinates
            SET mfa TO element at position 0 of rht
            SET ejp TO element at position 1 of rht
            IF mfa LESS THAN zpm
                IF ejp LESS THAN qvs
                    APPEND tuple of mfa, ejp TO oan
                END IF
            END IF
            SET idx TO idx PLUS 1
        END WHILE
        SET hdl TO empty list
        SET idx TO LENGTH of coordinates MINUS 1
        WHILE idx GREATER THAN OR EQUAL TO 0
            SET vgd TO element at idx of coordinates
            SET pdl TO element at position 0 of vgd
            SET tqm TO element at position 1 of vgd
            IF pdl GREATER THAN zpm AND tqm GREATER THAN qvs
                APPEND tuple of pdl, tqm TO hdl
            END IF
            SET idx TO idx MINUS 1
        END WHILE
        RETURN 1 PLUS self CALLS _lengthOfLIS WITH oan PLUS self CALLS _lengthOfLIS WITH hdl
    END FUNCTION

    FUNCTION _lengthOfLIS(coordinates)
        FUNCTION helperSort(lst)
            FOR i FROM 1 TO LENGTH of lst MINUS 1
                SET j TO i
                WHILE j GREATER THAN 0 AND (element at position 0 of element at position j of lst LESS THAN element at position 0 of element at position j MINUS 1 of lst OR (element at position 0 of element at position j EQUALS element at position 0 of element at position j MINUS 1 AND element at position 1 of element at position j GREATER THAN element at position 1 of element at position j MINUS 1))
                    SWAP element at position j of lst WITH element at position j MINUS 1 of lst
                    SET j TO j MINUS 1
                END WHILE
            END FOR
            RETURN lst
        END FUNCTION

        SET xpz TO helperSort(coordinates)
        SET wfy TO empty list

        FUNCTION bisectLeft(arr, val)
            SET b TO 0
            SET e TO LENGTH of arr
            WHILE b LESS THAN e
                SET mid TO (b PLUS e) DIV 2
                IF element at mid of arr GREATER THAN OR EQUAL TO val
                    SET e TO mid
                ELSE
                    SET b TO mid PLUS 1
                END IF
            END WHILE
            RETURN b
        END FUNCTION

        SET s TO 0
        WHILE s LESS THAN LENGTH of xpz
            SET __, numy TO element at position s of xpz
            IF LENGTH of wfy EQUALS 0
                APPEND numy TO wfy
            ELSE
                SET lzq TO element at LENGTH of wfy MINUS 1 of wfy
                IF numy GREATER THAN lzq
                    APPEND numy TO wfy
                ELSE
                    SET posx TO bisectLeft(wfy, numy)
                    SET element at posx of wfy TO numy
                END IF
            END IF
            SET s TO s PLUS 1
        END WHILE

        RETURN LENGTH of wfy
    END FUNCTION
END CLASS