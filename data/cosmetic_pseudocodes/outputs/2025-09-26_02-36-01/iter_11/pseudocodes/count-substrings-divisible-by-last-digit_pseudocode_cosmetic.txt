CLASS Solution
    FUNCTION countSubstrings(t)
        SET m TO LENGTH OF t
        SET sum_result TO 0

        PROCEDURE evaluateDivisibleSegment(startIdx)
            FUNCTION helper(idx, acc)
                IF idx GREATER THAN m MINUS 1 THEN
                    RETURN acc
                ELSE
                    SET digit_val TO (t[idx] - '0')
                    SET new_number TO acc * 10 + digit_val

                    PROCEDURE isDivisible(num, d)
                        RETURN (d NOT EQUAL 0 AND num MOD d EQUAL 0)
                    END PROCEDURE

                    IF isDivisible(new_number, digit_val) THEN
                        RETURN helper(idx + 1, new_number) + 1
                    ELSE
                        RETURN helper(idx + 1, new_number)
                    END IF
                END IF
            END FUNCTION

            RETURN helper(startIdx, 0)
        END PROCEDURE

        SET p TO 0
        WHILE p LESS THAN m
            SET sum_result TO sum_result + evaluateDivisibleSegment(p)
            SET p TO p + 1
        END WHILE

        RETURN sum_result
    END FUNCTION
END CLASS