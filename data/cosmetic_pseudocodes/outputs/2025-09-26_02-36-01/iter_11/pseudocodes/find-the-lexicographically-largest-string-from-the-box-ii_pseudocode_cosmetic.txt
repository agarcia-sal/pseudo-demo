CLASS Solution
    FUNCTION answerString(alpha, beta)
        IF beta = 1 THEN
            RETURN alpha
        ELSE
            FUNCTION computeLastSubstring(omega)
                FUNCTION equalChars(a, b, l)
                    RETURN Substring(omega, a + 1, a + l) = Substring(omega, b + 1, b + l)
                END FUNCTION
                
                FUNCTION greaterChars(a, b, l)
                    RETURN Substring(omega, a + 1, a + l) > Substring(omega, b + 1, b + l)
                END FUNCTION

                FUNCTION lastSub(idxB, idxC, countZ)
                    IF idxC + countZ >= Length(omega) THEN
                        RETURN idxB
                    ELSEIF Substring(omega, idxB + countZ + 1, idxB + countZ + 1) = Substring(omega, idxC + countZ + 1, idxC + countZ + 1) THEN
                        RETURN lastSub(idxB, idxC, countZ + 1)
                    ELSEIF Substring(omega, idxB + countZ + 1, idxB + countZ + 1) > Substring(omega, idxC + countZ + 1, idxC + countZ + 1) THEN
                        RETURN lastSub(idxB, idxC + countZ + 2, 0)
                    ELSE
                        VAR newB := Max(idxB + countZ + 1, idxC)
                        VAR newC := newB + 1
                        RETURN lastSub(newB, newC, 0)
                    END IF
                END FUNCTION

                RETURN Substring(omega, lastSub(0,1,0) + 1, Length(omega))
            END FUNCTION

            VAR subStr := computeLastSubstring(alpha)
            VAR limit := Length(alpha) - beta + 1
            VAR endPos := If(Length(subStr) < limit, Length(subStr), limit)
            RETURN Substring(subStr, 1, endPos)
        END IF
    END FUNCTION
END CLASS