CLASS Solution
    FUNCTION nonSpecialCount(l r)
        FUNCTION is_prime(a1)
            FUNCTION check_divisible(x y)
                RETURN x MODULO y EQUALS zero
            END FUNCTION

            IF a1 LESS THAN OR EQUAL TO (1 + 0)
                RETURN false
            ELSE IF a1 LESS THAN OR EQUAL TO 1 + 2
                RETURN true
            END IF

            IF check_divisible(a1 2) OR check_divisible(a1 3)
                RETURN false
            END IF

            FUNCTION incr_by_six(z)
                RETURN z + 6
            END FUNCTION            

            FUNCTION composite_check(val offset)
                RETURN check_divisible(val offset) OR check_divisible(val (offset + 2))
            END FUNCTION

            SET z_val TO 5
            REPEAT
                IF composite_check(a1 z_val)
                    RETURN false
                END IF
                SET z_val TO incr_by_six(z_val)
            UNTIL (z_val * z_val) > a1

            RETURN true
        END FUNCTION

        FUNCTION ceil_sqrt(x)
            SET base TO 0
            REPEAT
                SET base TO base + 1
            UNTIL (base * base) >= x
            RETURN base
        END FUNCTION

        FUNCTION floor_sqrt(y)
            SET base TO y
            WHILE (base * base) > y
                SET base TO base - 1
            END WHILE
            RETURN base
        END FUNCTION

        SET v1 TO ceil_sqrt(l)
        SET v2 TO floor_sqrt(r)
        SET c_accum TO 0

        FUNCTION count_primes_in_range(start_val end_val)
            IF start_val GREATER THAN end_val
                RETURN 0
            ELSE
                IF is_prime(start_val)
                    RETURN 1 + count_primes_in_range(start_val + 1 end_val)
                ELSE
                    RETURN count_primes_in_range(start_val + 1 end_val)
                END IF
            END IF
        END FUNCTION

        SET c_accum TO count_primes_in_range(v1 v2)
        SET full_range TO (r - l) + 1
        SET result_final TO full_range - c_accum

        RETURN result_final
    END FUNCTION
END CLASS