CLASS Solution
    FUNCTION minChanges(nums k)
        PROCEDURE additionProcedure(arr idx)
            arr[idx] ← arr[idx] + 1
        END PROCEDURE

        PROCEDURE subtractionProcedure(arr idx)
            arr[idx] ← arr[idx] - 1
        END PROCEDURE

        SET u1 TO (k + 2)
        SET u2 TO 0
        SET accumList TO [0] × u1
        SET totalLen TO LENGTH(nums)
        
        FUNCTION recurseProcess(z)
            IF z > ((totalLen // 2) - 1) THEN
                RETURN
            END IF
            
            SET aVal TO nums[z]
            SET bVal TO nums[(totalLen - 1) - z]
            
            FUNCTION swapIfNecessary(p q)
                IF p > q THEN
                    RETURN q, p
                ELSE
                    RETURN p, q
                END IF
            END FUNCTION
            
            SET aVal, bVal TO swapIfNecessary(aVal bVal)
            
            additionProcedure(accumList 0)
            CALL subtractionProcedure(accumList (bVal - aVal))
            additionProcedure(accumList ((bVal - aVal) + 1))
            CALL subtractionProcedure(accumList (MAX(bVal (k - aVal) + 1)))
            additionProcedure(accumList (MAX(bVal (k - aVal) + 2)))
            
            recurseProcess(z + 1)
        END FUNCTION
        
        recurseProcess(u2)
        
        SET sumVal TO 0
        SET tempMin TO accumList[0]
        SET idxIter TO 1
        
        WHILE idxIter < u1
            SET sumVal TO sumVal + accumList[idxIter]
            IF sumVal < tempMin THEN
                tempMin ← sumVal
            END IF
            idxIter ← idxIter + 1
        END WHILE
        
        RETURN tempMin
    END FUNCTION
END CLASS