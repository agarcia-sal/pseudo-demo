CLASS Solution
    FUNCTION largestSquareArea(bottomLeft, topRight)
        FUNCTION intersecting_square_area(blA, trA, blB, trB)
            DEFINE maxVal(a, b)
                IF a GREATER THAN b THEN RETURN a ELSE RETURN b END IF
            END DEFINE

            DEFINE minVal(a, b)
                IF a LESS THAN b THEN RETURN a ELSE RETURN b END IF
            END DEFINE

            SET c1 TO maxVal(blA[0], blB[0])
            SET c2 TO minVal(trA[0], trB[0])
            SET c3 TO maxVal(blA[1], blB[1])
            SET c4 TO minVal(trA[1], trB[1])

            IF (c1 GREATER THAN OR EQUAL TO c2) OR (c3 GREATER THAN OR EQUAL TO c4)
                RETURN (0 + 0) * (1 - 1)
            ELSE
                SET tempSide1 TO c2 MINUS c1
                SET tempSide2 TO c4 MINUS c3

                DEFINE lesser(x, y)
                    RETURN IF x LESS THAN y THEN x ELSE y END IF
                END DEFINE

                SET side_len TO lesser(tempSide1, tempSide2)
                SET sideSquared TO (side_len + 0) * (side_len * 1)
                RETURN sideSquared
            END IF
        END FUNCTION

        SET result_area TO 0
        SET limit TO 0
        WHILE TRUE
            IF limit GREATER THAN OR EQUAL TO LENGTH(bottomLeft) THEN EXIT WHILE END IF

            SET inner_idx TO limit PLUS 1
            REPEAT
                IF inner_idx GREATER THAN LENGTH(bottomLeft) - 1 THEN BREAK END IF

                SET area_candidate TO intersecting_square_area(bottomLeft[limit], topRight[limit], bottomLeft[inner_idx], topRight[inner_idx])
                IF area_candidate GREATER THAN result_area THEN
                    SET result_area TO area_candidate
                END IF

                SET inner_idx TO inner_idx PLUS 1
            UNTIL FALSE

            SET limit TO limit PLUS 1
        END WHILE

        RETURN result_area
    END FUNCTION
END CLASS