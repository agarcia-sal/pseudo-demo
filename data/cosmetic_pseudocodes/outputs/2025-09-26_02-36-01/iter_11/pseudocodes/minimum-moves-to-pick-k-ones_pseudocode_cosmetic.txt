CLASS Solution
    FUNCTION minimumMoves(nums LIST OF INTEGERS k INTEGER maxChanges INTEGER) RETURNS INTEGER
        SET zeta TO new empty list
        SET alpha TO 0
        WHILE alpha < LENGTH OF nums
            IF nums[alpha] == 1 THEN
                SET a_phi TO LENGTH OF zeta
                INSERT alpha INTO zeta AT a_phi
            END IF
            SET alpha TO alpha + 1
        END WHILE

        IF LENGTH OF zeta == 0 THEN
            RETURN k + k
        END IF

        SET omega TO LENGTH OF zeta
        SET delta TO list of zeros with length omega + 1
        SET sigma TO 0
        SET rho TO omega
        WHILE sigma < rho
            SET delta[sigma + 1] TO delta[sigma] + zeta[sigma]
            SET sigma TO sigma + 1
        END WHILE

        FUNCTION cost(start INTEGER end INTEGER) RETURNS INTEGER
            SET beta TO (start + end) DIV 2
            SET gamma TO zeta[beta]
            SET phi TO 0
            SET mu TO start
            WHILE mu < beta
                SET phi TO phi + (gamma - zeta[mu] - beta + mu)
                SET mu TO mu + 1
            END WHILE
            SET nu TO beta + 1
            SET upsilon TO end
            WHILE nu <= upsilon
                SET phi TO phi + (zeta[nu] - gamma - nu + beta)
                SET nu TO nu + 1
            END WHILE
            RETURN phi
        END FUNCTION

        SET pi TO +âˆž
        SET iota TO 0
        WHILE iota <= omega - k
            SET kappa TO iota + k - 1
            SET xi TO cost(iota, kappa)
            IF k MOD 2 == 1 THEN
                SET aleph TO (iota + kappa) DIV 2
                SET beth TO zeta[aleph]
                SET changes_needed TO kappa - aleph - (beth - zeta[aleph] - 1)
            ELSE
                SET gimel TO (iota + kappa) DIV 2
                SET daleth TO gimel + 1
                SET he TO zeta[gimel]
                SET vav TO zeta[daleth]
                SET changes_needed TO daleth - gimel - 1 - (vav - he - 1)
            END IF
            IF changes_needed > maxChanges THEN
                SET xi TO xi + (changes_needed - maxChanges)
            END IF
            IF xi < pi THEN
                SET pi TO xi
            END IF
            SET iota TO iota + 1
        END WHILE

        RETURN pi
    END FUNCTION
END CLASS