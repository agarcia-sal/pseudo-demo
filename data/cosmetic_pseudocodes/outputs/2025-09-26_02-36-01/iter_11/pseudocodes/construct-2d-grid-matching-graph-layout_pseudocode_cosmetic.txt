CLASS Solution
    FUNCTION constructGridLayout(n, edges)
        FUNCTION replicateAppend(listRef, elem)
            SET sz TO length of listRef
            SET tmp TO new list containing sz + 1 elements all set TO null
            FOR idx FROM 0 TO sz - 1 DO
                SET element at position idx of tmp TO element at position idx of listRef
            END FOR
            SET element at position sz of tmp TO elem
            RETURN tmp
        END FUNCTION

        SET alpha TO new list containing n empty lists
        SET beta TO 0
        FUNCTION inverseNegOneArray(length)
            SET arr TO new list containing length elements all set TO -1
            RETURN arr
        END FUNCTION
        FOR EACH pair m, p IN edges DO
            SET alpha[m] TO replicateAppend(alpha[m], p)
            SET alpha[p] TO replicateAppend(alpha[p], m)
        END FOR

        SET gamma TO inverseNegOneArray(5)
        SET i TO 0
        WHILE i < n DO
            SET delta TO length of element at position i of alpha
            SET element at position delta of gamma TO i
            SET i TO i + 1
        END WHILE

        FUNCTION equalToNegOne(val)
            RETURN val == -1
        END FUNCTION

        IF NOT equalToNegOne(element at position 1 of gamma) THEN
            SET sigma TO new list containing element at position 1 of gamma
        ELSE
            IF equalToNegOne(element at position 4 of gamma) THEN
                SET rho TO element at position 2 of gamma
                FUNCTION findPair(listRef)
                    SET k TO 0
                    REPEAT
                        SET v TO element at position k of listRef
                        IF length of element at position v of alpha == 2 THEN
                            RETURN new list containing rho, v
                        END IF
                        SET k TO k + 1
                    UNTIL k == length of listRef
                    RETURN new list
                END FUNCTION
                SET sigma TO findPair(element at position rho of alpha)
            ELSE
                SET psi TO element at position 2 of gamma
                SET sigma TO new list containing psi
                SET omega TO psi
                SET psi TO element at position 0 of element at position psi of alpha
                REPEAT
                    IF length of element at position psi of alpha <= 2 THEN
                        BREAK
                    END IF
                    SET sigma TO replicateAppend(sigma, psi)
                    SET zz TO 0
                    REPEAT
                        SET gammaElem TO element at position zz of element at position psi of alpha
                        IF gammaElem != omega AND length of element at position gammaElem of alpha < 4 THEN
                            SET omega TO psi
                            SET psi TO gammaElem
                            BREAK
                        END IF
                        SET zz TO zz + 1
                    UNTIL zz == length of element at position psi of alpha
                UNTIL FALSE
                SET sigma TO replicateAppend(sigma, psi)
            END IF
        END IF

        SET tau TO new list containing sigma
        SET upsilon TO new list containing n elements all set TO false
        SET alphaLength TO length of sigma
        SET eta TO 1
        WHILE eta <= (n / alphaLength) - 1 DO
            FOR EACH element zeta IN sigma DO
                SET element at position zeta of upsilon TO true
            END FOR
            SET vartheta TO new list
            FOR EACH element zeta IN sigma DO
                SET kappa TO 0
                WHILE kappa < length of element at position zeta of alpha DO
                    SET etaElem TO element at position kappa of element at position zeta of alpha
                    IF element at position etaElem of upsilon == false THEN
                        SET vartheta TO replicateAppend(vartheta, etaElem)
                        BREAK
                    END IF
                    SET kappa TO kappa + 1
                END WHILE
            END FOR
            SET tau TO replicateAppend(tau, vartheta)
            SET sigma TO vartheta
            SET eta TO eta + 1
        END WHILE

        RETURN tau
    END FUNCTION
END CLASS