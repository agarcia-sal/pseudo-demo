CLASS Solution
    FUNCTION minimumOperations(grid)
        SET beta TO LENGTH(grid)
        SET omega TO LENGTH(grid[0])
        SET delta TO 0

        DEFINE PROCEDURE check_and_update(x, y)
            IF grid[x][y] != grid[x + 1][y] THEN
                delta = delta + 1
                grid[x + 1][y] = grid[x][y]
            END IF
        END PROCEDURE

        PROCEDURE assign_different_value(x, y)
            FOR alpha FROM 0 TO 9
                IF alpha != grid[x][y] THEN
                    grid[x][y + 1] = alpha
                    EXIT FOR
                END IF
            END FOR
            delta = delta + 1
        END PROCEDURE

        SET kappa TO 0
        WHILE kappa < omega
            SET lambda TO 0
            WHILE lambda < beta - 1
                CALL check_and_update(lambda, kappa)
                lambda = lambda + 1
            END WHILE

            SET mu TO 0
            WHILE mu < beta
                IF (kappa < omega - 1) AND (grid[mu][kappa] = grid[mu][kappa + 1]) THEN
                    CALL assign_different_value(mu, kappa)
                END IF
                mu = mu + 1
            END WHILE

            kappa = kappa + 1
        END WHILE

        RETURN delta
    END FUNCTION
END CLASS