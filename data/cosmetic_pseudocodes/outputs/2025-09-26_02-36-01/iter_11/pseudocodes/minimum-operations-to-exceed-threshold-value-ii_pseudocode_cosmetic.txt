CLASS Solution
    FUNCTION minOperations(k parameter, nums parameter)
        PROCEDURE extractMin(collection parameter, OUT value)
            BEGIN
                SET value TO collection[0]
                SET lastIndex TO LENGTH(collection) - 1
                SET collection[0] TO collection[lastIndex]
                REMOVE element at lastIndex from collection
                SET current TO 0
                SET size TO LENGTH(collection)
                WHILE true
                    SET leftChild TO 2 * current + 1
                    SET rightChild TO 2 * current + 2
                    IF leftChild >= size THEN BREAK
                    SET smallestChild TO leftChild
                    IF rightChild < size AND collection[rightChild] < collection[leftChild]
                        SET smallestChild TO rightChild
                    END IF
                    IF collection[current] <= collection[smallestChild] THEN BREAK
                    SWAP collection[current], collection[smallestChild]
                    SET current TO smallestChild
                END WHILE
            END
        END PROCEDURE

        PROCEDURE insertHeap(collection parameter, value parameter)
            BEGIN
                ADD value TO END of collection
                SET idx TO LENGTH(collection) - 1
                WHILE idx > 0
                    SET parentIdx TO (idx - 1) // 2
                    IF collection[parentIdx] <= collection[idx] THEN BREAK
                    SWAP collection[parentIdx], collection[idx]
                    SET idx TO parentIdx
                END WHILE
            END
        END PROCEDURE

        PROCEDURE buildHeap(collection parameter)
            BEGIN
                SET start TO (LENGTH(collection) // 2) - 1
                REPEAT
                    IF start < 0 THEN BREAK
                    CALL siftDown(collection, start, LENGTH(collection))
                    SET start TO start - 1
                UNTIL false
            END
        END PROCEDURE

        PROCEDURE siftDown(collection parameter, startIndex parameter, heapSize parameter)
            BEGIN
                SET root TO startIndex
                WHILE true
                    SET child LEFT TO (2 * root) + 1
                    IF child LEFT >= heapSize THEN BREAK
                    SET swapIdx TO root
                    IF collection[swapIdx] > collection[child LEFT]
                        SET swapIdx TO child LEFT
                    END IF
                    SET child RIGHT TO child LEFT + 1
                    IF child RIGHT < heapSize AND collection[swapIdx] > collection[child RIGHT]
                        SET swapIdx TO child RIGHT
                    END IF
                    IF swapIdx == root THEN BREAK
                    SWAP collection[root], collection[swapIdx]
                    SET root TO swapIdx
                END WHILE
            END
        END PROCEDURE

        CALL buildHeap(nums)

        SET counter TO 0

        WHILE true
            IF LENGTH(nums) <= 1 THEN BREAK
            IF NOT(nums[0] < k) THEN BREAK

            DECLARE firstElem
            CALL extractMin(nums, OUTPUT firstElem)

            DECLARE secondElem
            CALL extractMin(nums, OUTPUT secondElem)

            SET partialMin TO firstElem
            IF partialMin > secondElem THEN SET partialMin TO secondElem

            SET partialMax TO firstElem
            IF partialMax < secondElem THEN SET partialMax TO secondElem

            DECLARE mergedVal TO (partialMin * 2) + partialMax

            CALL insertHeap(nums, mergedVal)

            SET counter TO counter + 1
        END WHILE

        RETURN counter
    END FUNCTION
END CLASS