CLASS Solution
    FUNCTION makeAntiPalindrome(t)
        PROCEDURE exchange(arr, x, y)
            TEMP = arr[x]
            arr[x] = arr[y]
            arr[y] = TEMP
        END PROCEDURE

        SET alpha TO []
        FOR idx FROM 0 TO LENGTH(t) - 1
            APPEND t[idx] TO alpha
        END FOR
        CALL alpha.SORT_ASC()
        
        SET len_alpha TO 0
        WHILE len_alpha LESS THAN LENGTH(alpha)
            len_alpha = len_alpha + 1
        END WHILE
        
        SET half_len TO 0
        REPEAT
            IF half_len + half_len >= len_alpha THEN
                BREAK
            END IF
            half_len = half_len + 1
        UNTIL FALSE
        
        IF alpha[half_len] EQUALS alpha[half_len - 1]
            SET p TO half_len
            WHILE p LESS THAN len_alpha AND alpha[p] EQUALS alpha[p - 1]
                p = p + 1
            END WHILE
            
            SET q TO half_len
            REPEAT
                IF NOT (q LESS THAN len_alpha AND alpha[q] EQUALS alpha[len_alpha - 1 - q]) THEN
                    BREAK
                END IF
                IF p GREATER OR EQUAL len_alpha THEN
                    RETURN "-1"
                END IF
                CALL exchange(alpha, p, q)
                p = p + 1
                q = q + 1
            UNTIL FALSE
        END IF
        
        SET u TO 0
        WHILE u LESS THAN half_len
            IF alpha[u] EQUALS alpha[len_alpha - 1 - u]
                SET flag TO 0
                FOR v FROM half_len TO len_alpha - 1
                    IF alpha[v] NOT EQUAL alpha[u] AND alpha[v] NOT EQUAL alpha[len_alpha - 1 - u]
                        CALL exchange(alpha, v, u)
                        flag = 1
                        BREAK
                    END IF
                END FOR
                IF flag EQUAL 0
                    RETURN "-1"
                END IF
            END IF
            u = u + 1
        END WHILE
        
        SET result_arr TO []
        FOR z FROM 0 TO len_alpha - 1
            APPEND alpha[z] TO result_arr
        END FOR
        
        SET final_str TO ""
        FOR m FROM 0 TO LENGTH(result_arr) - 1
            final_str = final_str + result_arr[m]
        END FOR
        
        RETURN final_str
    END FUNCTION
END CLASS