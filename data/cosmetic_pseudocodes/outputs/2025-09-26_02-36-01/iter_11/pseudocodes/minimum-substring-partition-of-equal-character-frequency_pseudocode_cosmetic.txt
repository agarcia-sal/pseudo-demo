CLASS Solution
    FUNCTION minimumSubstringsInPartition(s)
        FUNCTION dfs(Alpha)
            IF Alpha >= LENGTH(s) THEN
                RETURN 0
            END IF

            DECLARE MapOmega AS mapping from element to integer default 0
            DECLARE CountSigma AS mapping from integer to integer default 0
            DECLARE ResultPhi AS integer = LENGTH(s) - Alpha

            DECLARE FUNCTION recurseGamma(Beta, e)
                IF MapOmega CONTAINS_KEY e AND MapOmega[e] != 0 THEN
                    CountSigma[MapOmega[e]] = CountSigma[MapOmega[e]] - 1
                    IF CountSigma[MapOmega[e]] == 0 THEN
                        REMOVE CountSigma[MapOmega[e]]
                    END IF
                END IF
            END FUNCTION

            DECLARE FUNCTION augmentDelta(e)
                MapOmega[e] = MapOmega.get(e, 0) + 1
                CountSigma[MapOmega[e]] = CountSigma.get(MapOmega[e], 0) + 1
            END FUNCTION

            DECLARE VAR i AS integer = Alpha
            WHILE i <= LENGTH(s) - 1
                CALL recurseGamma(i, s[i])
                CALL augmentDelta(s[i])

                IF LENGTH(CountSigma.KEYS()) == 1 THEN
                    DECLARE TempKappa AS integer = 1 + dfs(i + 1)
                    IF TempKappa < ResultPhi THEN
                        ResultPhi = TempKappa
                    END IF
                END IF

                i = i + 1
            END WHILE

            RETURN ResultPhi
        END FUNCTION

        DECLARE LengthLambda INTEGER = LENGTH(s)
        RETURN dfs(0)
    END FUNCTION
END CLASS