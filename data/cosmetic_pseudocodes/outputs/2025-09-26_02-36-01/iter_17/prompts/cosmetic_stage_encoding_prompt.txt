Given any input pseudocode, produce a completely rewritten version that differs maximally in syntax, structure, identifiers (except those explicitly forbidden below), and style, while **maintaining perfect functional equivalence** inclusive of output values, side effects, control flow outcomes, and algorithmic steps.

**Mandatory preservation constraints:**

- DO NOT modify any **class names**, **function/method names**, **function signatures** (including parameter names, order, types, and return types), **class inheritance**, or any declared object layout or external interface elements that define the program’s public API or contract. These must appear exactly as in the input and retain their exact hierarchical and positional placement (e.g., within classes or modules).

- DO NOT add, remove, reorder, optimize away, consolidate, or abstract away any logical or algorithmic steps, data structures, or conceptual operations. The transformed pseudocode must follow the original logic and algorithm fully.

**For all other code elements inside function bodies and local scopes, apply aggressive, layered, and orthogonal transformations to maximize divergence from the source, including but not limited to:**

- **Rename all local, temporary, or parameter variables other than those in signatures**, uniformly to fresh, unrelated names without any semantic hints or resemblance to the originals; ensure no overlap between identifiers inside the new pseudocode.

- Replace **all loop constructs** with semantically equivalent alternatives chosen from different types or styles, e.g., for ↔ while ↔ repeat-until ↔ recursion (including tail recursion where applicable), altering loop termination conditions and control flow style accordingly.

- Flatten nested blocks where safe, or nest blocks deeper by introducing local scopes or artificial blocks, while preserving semantics.

- Thoroughly restructure conditionals by splitting complex conditions into simpler parts, merging nested if-else chains, applying De Morgan’s laws, rewriting comparisons and boolean expressions equivalently, and redistributing logic across helper variables or inline expressions.

- Systematically rewrite expressions at all layers: aggressively substitute arithmetic and logical identities, expand compound assignments (e.g. `x += y` → `x = x + y`), rewrite constants as calculations or defined constants, introduce or remove intermediate temporaries, reorder arguments of commutative operations, replace direct operators with helper procedures or inline expanded code, and optionally swap equivalent built-in function calls with user-defined helpers or vice versa.

- Modify data traversal orders or styles wherever output order or side effects are invariant—e.g., replace index-based loops with iterator style, use alternative traversal sequences, or employ recursive iteration.

- Inline or extract helper routines, vary early returns versus accumulating results in variables and returning later, change order of independent statements, and reorder code blocks within allowable semantic constraints.

- Alter formatting extensively and multidimensionally: change keyword casing, vary indentation style and width, shuffle line breaks within statements, substitute block delimiters (e.g., `BEGIN/END` vs indent style), reorder blank lines, and reorder comments or remove them entirely.

**Output requirements:**

- The output must be a syntactically valid, standalone pseudocode block implementing the exact original functionality and interfaces.

- The output must preserve all **class** and **function names and signatures verbatim**, in their original nesting and hierarchy.

- The output must contain **no explanations, annotations, comments**, or any text beyond the fully rewritten pseudocode itself.

**Summary:**  
Preserve the program’s external shape (classes, functions, signatures) exactly, but rewrite everything else deeply and systematically towards maximal, layered, and orthogonal syntactic and structural divergence across identifiers, control flow, expressions, helper routines, data traversal, constants, and formatting to yield a version of the pseudocode that looks and reads as distinctly different as possible while behaving identically.

Output **only** the transformed pseudocode.