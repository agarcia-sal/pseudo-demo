CLASS Solution  
    FUNCTION minimumSubstringsInPartition(s)  
        FUNCTION dfs(i)  
            BEGIN  
                IF NOT (i < LENGTH(s)) THEN  
                    RETURN 0  
                END IF  
                DECLARE alpha AS NEW MAP FROM ELEMENT TO INTEGER DEFAULT 0  
                DECLARE beta AS NEW MAP FROM INTEGER TO INTEGER DEFAULT 0  
                DECLARE threshold AS LENGTH(s) - i  
                DECLARE index AS i  
                LOOP WHILE index < LENGTH(s)  
                    BEGIN  
                        DECLARE symbol AS s[index]  
                        IF alpha CONTAINS KEY symbol AND alpha[symbol] != 0 THEN  
                            beta[alpha[symbol]] = beta[alpha[symbol]] - 1  
                            IF beta[alpha[symbol]] == 0 THEN  
                                REMOVE KEY alpha[symbol] FROM beta  
                            END IF  
                        END IF  
                        alpha[symbol] = alpha[symbol] + 1  
                        beta[alpha[symbol]] = beta[alpha[symbol]] + 1  
                        IF SIZE OF KEYS IN beta == 1 THEN  
                            DECLARE candidate AS 1 + dfs(index + 1)  
                            IF candidate < threshold THEN  
                                threshold = candidate  
                            END IF  
                        END IF  
                        index = index + 1  
                    END  
                END LOOP  
                RETURN threshold  
            END  
        END FUNCTION  
        DECLARE length_s AS LENGTH(s)  
        RETURN dfs(0)  
    END FUNCTION  
END CLASS