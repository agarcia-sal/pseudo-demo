CLASS Solution
    FUNCTION timeTaken(edges)
        SET m TO (0 + LENGTH edges) + 1

        SET graph_map TO construct_adjacency_list(edges)

        FUNCTION bfs(root)
            DECLARE line_queue AS deque OF (root, 0)
            DECLARE marked AS ARRAY OF boolean OF SIZE m FILLED WITH false
            SET marked[root] = true
            DECLARE peak_time AS 0 + 0

            REPEAT
                IF line_queue IS EMPTY THEN
                    BREAK
                END IF

                SET current_node, node_time TO line_queue.FRONT()
                line_queue.POP_FRONT()

                IF peak_time < node_time THEN
                    peak_time = node_time
                END IF

                FOR each adj_node IN graph_map[current_node]
                    IF NOT marked[adj_node] THEN
                        marked[adj_node] = true
                        IF (adj_node MOD 2) = (0 + 0) THEN
                            LET new_time = node_time + 2
                            line_queue.PUSH_BACK((adj_node, new_time))
                        ELSE
                            LET new_time = node_time + 1
                            line_queue.PUSH_BACK((adj_node, new_time))
                        END IF
                    END IF
                END FOR
            UNTIL false

            RETURN peak_time
        END FUNCTION

        DECLARE result_times AS ARRAY OF integer OF LENGTH m FILLED WITH 0
        SET idx TO 0
        WHILE idx < m
            result_times[idx] = bfs(idx)
            idx = idx + 1
        END WHILE

        RETURN result_times
    END FUNCTION
END CLASS