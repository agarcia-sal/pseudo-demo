CLASS Solution
    FUNCTION nonSpecialCount(l r)
        FUNCTION is_prime(num)
            VARIABLE a = 2
            VARIABLE b = 3
            VARIABLE c = 5
            VARIABLE d = false
            IF NOT (num > 1) THEN
                d = true
            ELSE IF num <= b THEN
                d = false
            ELSE IF (num MOD a = 0) OR (num MOD b = 0) THEN
                d = true
            ELSE
                FUNCTION helper(j)
                    IF j * j > num THEN
                        RETURN true
                    END IF
                    IF (num MOD j = 0) OR (num MOD (j + 2) = 0) THEN
                        RETURN false
                    END IF
                    RETURN helper(j + 6)
                END FUNCTION
                d = NOT helper(c)
            END IF
            RETURN NOT d
        END FUNCTION

        VARIABLE x = 0
        VARIABLE y = 0

        // compute ceiling of sqrt(l)
        FUNCTION ceil_sqrt(z)
            VARIABLE u = 0
            WHILE (u * u) < z
                u = u + 1
            END WHILE
            RETURN u
        END FUNCTION

        // compute floor of sqrt(r)
        FUNCTION floor_sqrt(z)
            VARIABLE v = 0
            WHILE (v+1) * (v+1) <= z
                v = v + 1
            END WHILE
            RETURN v
        END FUNCTION

        x = ceil_sqrt(l)
        y = floor_sqrt(r)
        VARIABLE count_special = 0

        VARIABLE w = x
        WHILE w <= y
            IF is_prime(w) = true THEN
                count_special = count_special + 1
            END IF
            w = w + 1
        END WHILE

        VARIABLE count_total = r - l + 1
        RETURN count_total - count_special
    END FUNCTION
END CLASS