CLASS Solution  
    FUNCTION sumOfGoodSubsequences(nums)  
        CONST MODULUS ← 1000000000 + 7  
        DECLARE freqMap ← map with default 0  
        DECLARE sumMap ← map with default 0  
        
        INDEX ← 0  
        LENGTH ← length of nums  
        WHILE INDEX < LENGTH DO  
            CURRENT ← nums[INDEX]  
            
            freqMap[CURRENT] ← freqMap[CURRENT] + 1  
            sumMap[CURRENT] ← sumMap[CURRENT] + CURRENT  
            
            TEMP1 ← sumMap[CURRENT] + sumMap[CURRENT - 1] + (freqMap[CURRENT - 1] * CURRENT)  
            sumMap[CURRENT] ← TEMP1 MOD MODULUS  
            
            TEMP2 ← freqMap[CURRENT] + freqMap[CURRENT - 1]  
            freqMap[CURRENT] ← TEMP2 MOD MODULUS  
            
            TEMP3 ← sumMap[CURRENT] + sumMap[CURRENT + 1] + (freqMap[CURRENT + 1] * CURRENT)  
            sumMap[CURRENT] ← TEMP3 MOD MODULUS  
            
            TEMP4 ← freqMap[CURRENT] + freqMap[CURRENT + 1]  
            freqMap[CURRENT] ← TEMP4 MOD MODULUS  
            
            INDEX ← INDEX + 1  
        END WHILE  
        
        SUM_ACCUMULATOR ← 0  
        KEYS ← all keys in sumMap  
        POS ← 0  
        NUM_KEYS ← length of KEYS  
        REPEAT  
            EXIT WHEN POS >= NUM_KEYS  
            VAL ← sumMap[KEYS[POS]]  
            SUM_ACCUMULATOR ← SUM_ACCUMULATOR + VAL  
            POS ← POS + 1  
        UNTIL POS >= NUM_KEYS  
        
        RETURN (SUM_ACCUMULATOR MOD MODULUS)  
    END FUNCTION  
END CLASS