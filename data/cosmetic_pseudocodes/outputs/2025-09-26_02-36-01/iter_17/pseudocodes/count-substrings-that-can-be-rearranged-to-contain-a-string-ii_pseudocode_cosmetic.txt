CLASS Solution
    FUNCTION validSubstringCount(word1, word2)
        IMPORT collections.Counter AS CounterX

        DEFINE FUNCTION add_count(mp, key)
            IF key IN mp THEN
                mp[key] = mp[key] + 1
            ELSE
                mp[key] = 1
            END IF
        END FUNCTION

        DEFINE FUNCTION sub_count(mp, key)
            IF key IN mp THEN
                mp[key] = mp[key] - 1
            END IF
        END FUNCTION

        DECLARE countB = CounterX(word2)
        DECLARE countA = CounterX()
        DECLARE needMet = 0
        DECLARE requiredKeys = 0
        DECLARE idxLeft = 0
        DECLARE substringsCount = 0

        DECLARE uniqueChars = 0
        FOR EACH xxxx IN countB KEYS DO
            uniqueChars = uniqueChars + 1
        END FOR
        SET requiredKeys = uniqueChars

        DECLARE idxRight = 0
        SET idxRight = 0

        LOOP_WHILE idxRight < LENGTH(word1)
            DECLARE pickChar = word1[idxRight]
            CALL add_count(countA, pickChar)

            IF pickChar IN countB THEN
                IF countA[pickChar] == countB[pickChar] THEN
                    needMet = needMet + 1
                END IF
            END IF

            WHILE needMet == requiredKeys AND (idxRight + 1 - idxLeft) >= LENGTH(word2) DO
                substringsCount = substringsCount + (LENGTH(word1) - idxRight)

                DECLARE dropChar = word1[idxLeft]
                CALL sub_count(countA, dropChar)

                IF dropChar IN countB THEN
                    IF countA[dropChar] < countB[dropChar] THEN
                        needMet = needMet - 1
                    END IF
                END IF

                idxLeft = idxLeft + 1
            END WHILE

            idxRight = idxRight + 1
        END LOOP_WHILE

        RETURN substringsCount
    END FUNCTION
END CLASS