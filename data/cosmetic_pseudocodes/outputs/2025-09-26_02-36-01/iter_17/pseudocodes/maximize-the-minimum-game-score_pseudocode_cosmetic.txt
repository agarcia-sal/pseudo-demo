CLASS Solution  
    FUNCTION maxScore(points, m)  
        FUNCTION isPossible(minVal, m)  
            DO  
                DECLARE counter_moves = 0  
                DECLARE last_taken = 0  
                DECLARE index_ptr = 0  
                DECLARE N_points = LENGTH(points)  
                DECLARE calc_req  
                DECLARE diff_val  
                WHILE index_ptr < N_points  
                    calc_req = CEIL((minVal + points[index_ptr] - 1) / points[index_ptr])  
                    diff_val = calc_req - last_taken  
                    IF diff_val < 0 THEN  
                        calc_req = 0  
                    ELSE  
                        calc_req = diff_val  
                    END IF  
                    IF calc_req > 0 THEN  
                        counter_moves = counter_moves + (2 * calc_req - 1)  
                        last_taken = calc_req - 1  
                    ELSE  
                        IF (index_ptr + 1) < N_points THEN  
                            counter_moves = counter_moves + 1  
                            last_taken = 0  
                        END IF  
                    END IF  
                    IF counter_moves > m THEN  
                        RETURN False  
                    END IF  
                    index_ptr = index_ptr + 1  
                END WHILE  
                RETURN True  
            UNTIL True  
        END FUNCTION  

        DECLARE left_bound = 0  
        DECLARE right_bound = ((m + 1) \ 2) * (points[0] + 1)  
        DECLARE mid_point  
        DECLARE loop_continue = True  
        WHILE loop_continue  
            mid_point = ((left_bound + right_bound + 1) \ 2)  
            IF isPossible(mid_point, m) THEN  
                left_bound = mid_point  
            ELSE  
                right_bound = mid_point - 1  
            END IF  
            IF left_bound >= right_bound THEN  
                loop_continue = False  
            END IF  
        END WHILE  

        RETURN left_bound  
    END FUNCTION  
END CLASS