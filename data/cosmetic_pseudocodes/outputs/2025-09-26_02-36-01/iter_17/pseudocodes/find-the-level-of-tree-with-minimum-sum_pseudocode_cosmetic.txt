CLASS TreeNode  
    FUNCTION __init__(self COMMA val EQUALS zero COMMA left EQUALS None COMMA right EQUALS None)  
        SET self.val TO val  
        SET self.left TO left  
        SET self.right TO right  
    END FUNCTION  
END CLASS  

FUNCTION tree_node(values)  
    IF values EQUALS empty THEN  
        RETURN None  
    END IF  

    SET h1 TO new TreeNode with val values at position one  
    SET h2 TO 1  
    SET h3 TO new deque  
    APPEND h1 TO h3  

    REPEAT  
        IF LENGTH(h3) EQUALS 0 THEN  
            BREAK  
        END IF  
        SET h4 TO popleft from h3  
        IF h2 LESS THAN LENGTH(values) THEN  
            SET h5 TO values at position h2  
            IF NOT (h5 EQUALS None) THEN  
                SET h4.left TO new TreeNode with val h5  
                APPEND h4.left TO h3  
            END IF  
            SET h2 TO h2 + 1  
        END IF  
        IF h2 LESS THAN LENGTH(values) THEN  
            SET h6 TO values at position h2  
            IF NOT (h6 EQUALS None) THEN  
                SET h4.right TO new TreeNode with val h6  
                APPEND h4.right TO h3  
            END IF  
            SET h2 TO h2 + 1  
        END IF  
    UNTIL False  

    RETURN h1  
END FUNCTION  

FUNCTION is_same_tree(p COMMA q)  
    IF (p EQUALS None) THEN  
        IF (q EQUALS None) THEN  
            RETURN True  
        ELSE  
            RETURN False  
        END IF  
    ELSE  
        IF (q EQUALS None) THEN  
            RETURN False  
        ELSE  
            IF (p.val EQUALS q.val) THEN  
                RETURN is_same_tree(p.left COMMA q.left) AND is_same_tree(p.right COMMA q.right)  
            ELSE  
                RETURN False  
            END IF  
        END IF  
    END IF  
END FUNCTION  

CLASS Solution  
    FUNCTION minimumLevel(self COMMA root)  
        IF root EQUALS None THEN  
            RETURN 0  
        END IF  

        SET q TO new deque  
        APPEND root TO q  
        SET lvl TO 1  
        SET mc TO positive infinity  
        SET ml TO 1  

        WHILE LENGTH(q) NOT EQUALS 0  
            SET sm TO 0  
            SET cnt TO LENGTH(q)  
            SET idx TO 0  

            WHILE idx LESS THAN cnt  
                SET x TO popleft from q  
                SET sm TO sm + x.val  

                IF NOT (x.left EQUALS None) THEN  
                    APPEND x.left TO q  
                END IF  
                IF NOT (x.right EQUALS None) THEN  
                    APPEND x.right TO q  
                END IF  

                SET idx TO idx + 1  
            END WHILE  

            IF sm LESS THAN mc THEN  
                SET mc TO sm  
                SET ml TO lvl  
            END IF  

            SET lvl TO lvl + 1  
        END WHILE  

        RETURN ml  
    END FUNCTION  
END CLASS