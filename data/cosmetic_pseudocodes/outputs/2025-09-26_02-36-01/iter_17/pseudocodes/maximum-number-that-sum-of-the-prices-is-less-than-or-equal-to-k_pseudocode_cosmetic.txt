CLASS Solution
    FUNCTION findMaximumNumber(k, x)
        FUNCTION count_set_bits(n, pos)
            DECLARE acc AS INTEGER
            DECLARE blk_len AS INTEGER
            DECLARE full_blk AS INTEGER
            SET acc = 0
            SET blk_len = 1 * POWER(2, pos)
            SET full_blk = n / blk_len
            SET acc = acc + (full_blk / 2) * blk_len
            IF (full_blk MOD 2) = 1 THEN
                SET acc = acc + (n MOD blk_len) + 1
            ENDIF
            RETURN acc
        END FUNCTION

        FUNCTION accumulated_price(n)
            DECLARE sm AS INTEGER
            DECLARE idx AS INTEGER
            SET sm = 0
            SET idx = 1
            REPEAT
                SET cond_chk = POWER(2, (idx * x) - 1)
                IF cond_chk > n THEN
                    EXIT REPEAT
                ENDIF
                SET sm = sm + count_set_bits(n, (idx * x) - 1)
                SET idx = idx + 1
            UNTIL FALSE
            RETURN sm
        END FUNCTION

        SET lower_bound = 1
        SET upper_bound = 1 * POWER(2, 60)
        WHILE lower_bound <= upper_bound DO
            SET middle = lower_bound + (upper_bound - lower_bound) / 2
            SET cur_price = accumulated_price(middle)
            IF cur_price <= k THEN
                SET lower_bound = middle + 1
            ELSE
                SET upper_bound = middle - 1
            ENDIF
        ENDWHILE
        RETURN upper_bound
    END FUNCTION
END CLASS