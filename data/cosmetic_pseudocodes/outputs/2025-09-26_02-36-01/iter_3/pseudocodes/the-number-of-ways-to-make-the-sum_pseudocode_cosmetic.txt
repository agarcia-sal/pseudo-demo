CLASS Solution
    FUNCTION numberOfWays WITH PARAMETER n
        ASSIGN modValue ← (1000000000 + 7)
        INITIALIZE ways ← ARRAY OF SIZE (n + 1) FILLED WITH 0
        SET ways[0] ← 1
        DEFINE denominations ← [1, 2, 6]
        INDEX coinIndex ← 0
        WHILE coinIndex < LENGTH(denominations)
            ASSIGN currentCoin ← denominations[coinIndex]
            ASSIGN idx ← currentCoin
            WHILE idx <= n
                LET prevSum ← ways[idx - currentCoin]
                LET currSum ← ways[idx]
                ways[idx] ← (currSum + prevSum) % modValue
                idx ← idx + 1
            END WHILE
            coinIndex ← coinIndex + 1
        END WHILE
        ASSIGN totalWays ← 0
        FOR multiplier ← 0 TO 2 BY 1
            LET product ← multiplier * 4
            IF product ≤ n THEN
                LET addition ← ways[n - product]
                LET totalWays ← (totalWays + addition) MOD modValue
            END IF
        END FOR
        RETURN totalWays
    END FUNCTION
END CLASS