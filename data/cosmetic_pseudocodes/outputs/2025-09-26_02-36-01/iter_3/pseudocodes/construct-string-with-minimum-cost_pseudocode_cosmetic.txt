CLASS Solution
    FUNCTION minimumCost(target, words, costs)
        SET mapping_cost TO empty dictionary
        SET idx TO 0
        WHILE idx LESS THAN length of words
            LET current_word BE element at index idx of words
            LET current_cost BE element at index idx of costs
            IF current_word NOT IN mapping_cost
                ASSIGN mapping_cost at key current_word TO current_cost
            ELSE
                LET stored_cost BE mapping_cost at key current_word
                IF current_cost LESS THAN stored_cost
                    REPLACE mapping_cost at key current_word WITH current_cost
                END IF
            END IF
            INCREMENT idx BY one
        END WHILE

        LET target_chars BE list containing each character of target

        FUNCTION min_cost_to_form_target(start)
            IF start EQUALS length of target_chars
                RETURN 0
            END IF

            LET lowest_cost BE positive infinity
            FOR EACH entry_key IN keys of mapping_cost
                LET entry_value BE mapping_cost at key entry_key
                LET segment_length BE length of entry_key
                LET end_pos BE start PLUS segment_length

                IF end_pos LESS THAN OR EQUAL TO length of target_chars
                    LET segment_match BE TRUE
                    LET char_pos TO 0
                    WHILE char_pos LESS THAN segment_length AND segment_match IS TRUE
                        IF element at index start PLUS char_pos of target_chars IS NOT EQUAL TO element at index char_pos of entry_key
                            ASSIGN segment_match TO FALSE
                        END IF
                        INCREMENT char_pos BY one
                    END WHILE

                    IF segment_match
                        LET recursive_result TO min_cost_to_form_target(end_pos)
                        LET is_infinite TO recursive_result EQUALS positive infinity
                        IF NOT is_infinite
                            LET candidate_cost TO entry_value PLUS recursive_result
                            IF candidate_cost LESS THAN lowest_cost
                                ASSIGN lowest_cost TO candidate_cost
                            END IF
                        END IF
                    END IF
                END IF
            END FOR

            IF lowest_cost NOT EQUAL positive infinity
                RETURN lowest_cost
            ELSE
                RETURN positive infinity
            END IF
        END FUNCTION

        LET final_answer TO min_cost_to_form_target(0)
        IF final_answer NOT EQUAL positive infinity
            RETURN final_answer
        ELSE
            RETURN -1
        END IF
    END FUNCTION
END CLASS