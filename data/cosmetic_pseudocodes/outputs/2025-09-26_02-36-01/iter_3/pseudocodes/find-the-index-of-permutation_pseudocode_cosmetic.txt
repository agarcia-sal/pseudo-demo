CLASS Solution
    FUNCTION getPermutationIndex(perm)
        LET length VARIES AS LENGTH(perm)
        LET modulus BE (10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + 7
        
        LET factorials BE ARRAY FILLED WITH 1 OF SIZE length
        LET counter BE 1
        WHILE counter < length
            factorials[counter] = factorials[counter - 1]
            factorials[counter] = factorials[counter] * counter
            counter = counter + 1
        END WHILE
        
        LET availableNums BE SEQUENCE FROM 1 TO length
        
        LET resultAcc BE 0
        LET idx BE 0
        WHILE idx < length
            LET currentVal BE perm[idx]
            LET posIndex BE 0
            WHILE availableNums[posIndex] != currentVal
                posIndex = posIndex + 1
            END WHILE
            
            LET factorIdx BE length - idx - 1
            LET incrementVal BE posIndex * factorials[factorIdx]
            resultAcc = resultAcc + incrementVal
            
            DELETE availableNums[posIndex]
            idx = idx + 1
        END WHILE
        
        LET finalResult BE resultAcc - (modulus * ((resultAcc) / modulus))
        RETURN finalResult
    END FUNCTION
END CLASS