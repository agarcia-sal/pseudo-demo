CLASS Solution  
    FUNCTION minimumSubstringsInPartition(s)  
        FUNCTION dfs(pos)  
            IF pos GREATER THAN OR EQUAL TO LENGTH(s) THEN  
                RETURN 0  
            END IF  
            SET charCount TO empty dictionary with default 0  
            SET frequencyCount TO empty dictionary with default 0  
            SET minimumParts TO LENGTH(s) - pos  
            SET index TO pos  
            WHILE index LESS THAN LENGTH(s)  
                SET currentChar TO s[index]  
                IF currentChar IN charCount AND charCount[currentChar] NOT EQUAL TO 0 THEN  
                    SET prevCount TO charCount[currentChar]  
                    frequencyCount[prevCount] = frequencyCount[prevCount] - 1  
                    IF frequencyCount[prevCount] EQUALS 0 THEN  
                        REMOVE frequencyCount[prevCount]  
                    END IF  
                END IF  
                charCount[currentChar] = charCount[currentChar] + 1  
                SET newCount TO charCount[currentChar]  
                frequencyCount[newCount] = frequencyCount[newCount] + 1  
                IF LENGTH(frequencyCount) EQUALS 1 THEN  
                    SET candidate TO 1 + dfs(index + 1)  
                    IF candidate LESS THAN minimumParts THEN  
                        minimumParts = candidate  
                    END IF  
                END IF  
                index = index + 1  
            END WHILE  
            RETURN minimumParts  
        END FUNCTION  
        SET length_s TO LENGTH(s)  
        RETURN dfs(0)  
    END FUNCTION  
END CLASS