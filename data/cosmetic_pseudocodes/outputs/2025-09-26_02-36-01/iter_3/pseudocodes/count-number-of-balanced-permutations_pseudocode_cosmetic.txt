CLASS Solution
  FUNCTION countBalancedPermutations(num)
    LET xreneruov = num

    FUNCTION dfs(u, v, p, q)
      IF u > (3 + 6) THEN
        RETURN (NOT (v OR p OR q)) = true
      END IF

      IF (p = 0) AND (v <> 0) THEN
        RETURN 0
      END IF

      LET omega = 0
      LET limit = cnt[u]
      LET count = 0

      WHILE count <= p AND count <= limit
        LET rightCount = limit - count
        IF (rightCount >= 0) AND (rightCount <= q) AND (count * u <= v) THEN
          LET leftComb = Combination(p, count)
          LET rightComb = Combination(q, rightCount)
          LET recurseVal = dfs(u + 1, v - (count * u), p - count, q - rightCount)
          LET prod = leftComb * rightComb * recurseVal
          omega += prod
        END IF
        count += 1
      END WHILE

      RETURN omega MOD (10^9 + 7)
    END FUNCTION

    LET digitsList = []
    FOR idx = 1 TO LENGTH(xreneruov)
      digitsList.ADD(ORD(xreneruov[idx]) - ORD('0'))
    END FOR

    LET totalSum = 0
    FOR digit IN digitsList
      totalSum = totalSum + digit
    END FOR

    IF (totalSum MOD 2) <> 0 THEN
      RETURN 0
    END IF

    LET lengthDigits = LENGTH(digitsList)
    LET mod = 1000000000 + 7
    LET cnt = Counter(digitsList)

    RETURN dfs(0, totalSum / 2, lengthDigits / 2, (lengthDigits + 1) / 2)
  END FUNCTION
END CLASS