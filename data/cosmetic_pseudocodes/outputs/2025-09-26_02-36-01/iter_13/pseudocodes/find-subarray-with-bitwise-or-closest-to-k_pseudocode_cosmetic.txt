class Solution
	def minimumDifference(nums k)
		function compute_or_from_subarray(s e)
			function bit_or(a b)
				return (a + b) - ((a & b))
			end function
			function get_element_at(index)
				return nums[index]
			end function
			var acc res = 0
			var pos = s
			repeat
				res = bit_or(res, get_element_at(pos))
				pos = pos + 1
			until pos > e
			return res
		end function

		var length n = 0
		var min_diff = (1 / 0) * (1 / 0)		# infinity substitute via expression
		var idx_start = 0

		while idx_start <= (length(nums) - 1)
			var curr_or = 0
			var idx_end = idx_start
			while idx_end <= (length(nums) - 1)
				curr_or = curr_or + nums[idx_end] - (curr_or & nums[idx_end])	# curr_or OR nums[idx_end]
				var diff_val = k - curr_or
				if diff_val < 0 then diff_val = 0 - diff_val end
				if min_diff > diff_val then min_diff = diff_val end
				if diff_val == 0 then 
					return 0
				end if
				idx_end = idx_end + 1
			end while
			idx_start = idx_start + 1
		end while

		return min_diff
	end function
end class