CLASS Solution
    FUNCTION largestPalindrome(n k)
        SET result_string TO "0"
        SET is_odd_length TO NOT ((n MOD 2) EQUALS 0)
        SET max_digit TO 9
        SET one_val TO 1
        SET nine_string TO "9"
        SET two_val TO 2
        IF (n EQUALS one_val) THEN
            SET current_num TO max_digit
            REPEAT
                IF (current_num MOD k EQUALS 0) THEN
                    SET result_string TO CONVERT_TO_STRING(current_num)
                    RETURN result_string
                END IF
                DECREMENT current_num BY one_val
            UNTIL (current_num LESS_THAN one_val)
            RETURN result_string
        END IF
        FUNCTION reverse_string(input_str)
            SET reversed TO ""
            SET index FORWARD TO LENGTH(input_str) MINUS one_val
            WHILE index GREATER_OR_EQUAL_TO zero
                SET reversed TO CONCAT(reversed, SUBSTRING(input_str, index, index))
                DECREMENT index BY one_val
            END WHILE
            RETURN reversed
        END FUNCTION
        FUNCTION substring(input_str, start_idx, end_idx)
            SET sub_str TO ""
            SET idx TO start_idx
            WHILE idx LESS_THAN_OR_EQUAL_TO end_idx
                SET sub_str TO CONCAT(sub_str, SUBSTRING(input_str, idx, idx))
                INCREMENT idx BY one_val
            END WHILE
            RETURN sub_str
        END FUNCTION
        FUNCTION concat_string_times(char_str, times)
            SET res TO ""
            SET counter TO 0
            WHILE counter LESS_THAN times
                SET res TO CONCAT(res, char_str)
                INCREMENT counter BY one_val
            END WHILE
            RETURN res
        END FUNCTION
        FUNCTION int_parse(str_val)
            RETURN INTEGER(str_val)
        END FUNCTION
        SET length_half TO (n + one_val) / two_val
        SET nine_repeated TO concat_string_times(nine_string, length_half)
        SET half_val TO int_parse(nine_repeated)
        WHILE half_val GREATER_THAN 0
            SET half_str TO CONVERT_TO_STRING(half_val)
            IF NOT is_odd_length THEN
                SET palindrome_str TO CONCAT(half_str, reverse_string(half_str))
            ELSE
                SET inner_substring TO substring(half_str, zero, LENGTH(half_str) MINUS two_val)
                SET palindrome_str TO CONCAT(half_str, reverse_string(inner_substring))
            END IF
            SET palindrome_num TO int_parse(palindrome_str)
            IF (palindrome_num MOD k EQUALS 0) THEN
                RETURN palindrome_str
            END IF
            DECREMENT half_val BY one_val
        END WHILE
        RETURN result_string
    END FUNCTION
END CLASS