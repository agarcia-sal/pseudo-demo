CLASS Solution
    FUNCTION maximumSumSubsequence(nums, queries)
        DEFINE POW_TEN AS 1000000000
        DEFINE MODULUS AS POW_TEN + 1
        DEFINE count AS LENGTH OF nums
        DEFINE carry_over_take AS ARRAY OF count ELEMENTS INITIALIZED TO 0
        DEFINE carry_over_skip AS ARRAY OF count ELEMENTS INITIALIZED TO 0

        PROCEDURE InitializeDP()
            SET carry_over_take[0] TO MAX(0, nums[0])
            SET carry_over_skip[0] TO 0
            DEFINE idx AS 1
            WHILE idx < count DO
                SET carry_over_take[idx] TO MAX(0, carry_over_skip[idx-1] + nums[idx])
                SET carry_over_skip[idx] TO MAX(carry_over_skip[idx-1], carry_over_take[idx-1])
                SET idx TO idx + 1
            END WHILE
        END PROCEDURE

        FUNCTION MaxFromTwo(a, b)
            IF a > b THEN RETURN a END IF
            RETURN b
        END FUNCTION

        PROCEDURE RefreshDPFrom(position)
            IF position = 0 THEN
                SET carry_over_take[0] TO MAX(0, nums[0])
                SET carry_over_skip[0] TO 0
            ELSE
                SET carry_over_take[position] TO MAX(0, carry_over_skip[position-1] + nums[position])
                SET carry_over_skip[position] TO MAX(carry_over_skip[position-1], carry_over_take[position-1])
            END IF
            PROCEDURE LoopFrom(idx)
                IF idx >= count THEN RETURN END IF
                SET carry_over_take[idx] TO MAX(0, carry_over_skip[idx-1] + nums[idx])
                SET carry_over_skip[idx] TO MAX(carry_over_skip[idx-1], carry_over_take[idx-1])
                CALL LoopFrom(idx + 1)
            END PROCEDURE
            CALL LoopFrom(position + 1)
        END PROCEDURE

        CALL InitializeDP()

        DEFINE answer_accumulator AS 0

        PROCEDURE ProcessQueriesRec(qs, index)
            IF index >= LENGTH OF qs THEN RETURN END IF
            DEFINE current_pos AS qs[index][0]
            DEFINE current_val AS qs[index][1]
            SET nums[current_pos] TO current_val
            CALL RefreshDPFrom(current_pos)
            SET answer_accumulator TO (answer_accumulator + MaxFromTwo(carry_over_take[count-1], carry_over_skip[count-1])) MOD MODULUS
            CALL ProcessQueriesRec(qs, index + 1)
        END PROCEDURE

        CALL ProcessQueriesRec(queries, 0)

        RETURN answer_accumulator
    END FUNCTION
END CLASS