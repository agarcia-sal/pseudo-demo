class Solution
    function minRunesToAdd(n flowFrom flowTo crystals)
        set p to new empty map<int, list<int>>
        set q to new empty map<int, list<int>>

        function u(x)
            set v[x] to w
            set z[x] to w
            set w to w + 1
            push x to y
            set a[x] to True

            function r(b)
                if v[b] = -1 then
                    call r(b)
                    set z[x] to min(z[x], z[b])
                else if a[b] = True then
                    set z[x] to min(z[x], v[b])
                end if
            end function

            for each c in get_list(p, x) do
                if v[c] = -1 then
                    call u(c)
                    set z[x] to (if z[x] < z[c] then z[x] else z[c])
                else if a[c] = True then
                    set z[x] to (if z[x] < v[c] then z[x] else v[c])
                end if
            end for

            if z[x] = v[x] then
                set k to empty list
                loop
                    set h to pop(y)
                    set a[h] to False
                    append h to k
                    if h = x then
                        exit loop
                    end if
                end loop
                append k to s
            end if
        end function

        set v to list of length n filled with -1
        set z to list of length n filled with 0
        set a to list of length n filled with False
        set y to empty list
        set w to 0
        set s to empty list

        let function tarjan be u

        set i to 0
        repeat while i < n
            if v[i] = -1 then
                call tarjan(i)
            end if
            set i to i + 1
        end repeat

        set m to new empty map<int,list<int>>
        set d to list of length n filled with -1
        set e to list of length length(s) filled with False
        set f to 0

        function g(j l)
            set d[l] to f
            if crystals contains l then
                set e[j] to True
            end if
        end function

        for j=0 to length(s)-1 do
            for each l in s[j] do
                set d[l] to f
                if crystals contains l then
                    set e[j] to True
                end if
            end for
            set f to f + 1
        end for

        repeat with o from 0 until length(flowFrom)
            set x to d[flowFrom[o]]
            set y to d[flowTo[o]]
            if x != y then
                append y to m[x]
            end if
        end repeat

        set c to list of length length(s) filled with 0

        for q from 0 to length(s)-1 do
            for each r in m[q] do
                set c[r] to c[r] + 1
            end for
        end for

        set b to 0
        set n_idx to 0
        repeat while n_idx < length(s)
            if c[n_idx] = 0 and e[n_idx] = False then
                set b to b + 1
            end if
            set n_idx to n_idx + 1
        end repeat

        return b
    end function
end class