CLASS Solution
    FUNCTION minimumCost(m n horizontalCut verticalCut)
        CALL sortDescending(horizontalCut)
        CALL sortDescending(verticalCut)
        SET totalCost TO 0
        SET idxH TO 0
        SET idxV TO 0
        SET countH TO 1
        SET countV TO 1

        FUNCTION sortDescending(arr)
            LET changed TO true
            WHILE changed
                SET changed TO false
                FOR k FROM 0 TO LENGTH(arr) - 2
                    IF arr[k] < arr[k + 1]
                        LET tmp TO arr[k]
                        SET arr[k] TO arr[k + 1]
                        SET arr[k + 1] TO tmp
                        SET changed TO true
                    END IF
                END FOR
            END WHILE
        END FUNCTION

        FUNCTION canContinue(hI vI)
            RETURN (NOT (hI >= m - 1)) OR (NOT (vI >= n - 1))
        END FUNCTION

        WHILE canContinue(idxH idxV)
            IF idxV = (n - 1) OR (idxH < (m - 1) AND horizontalCut[idxH] > verticalCut[idxV])
                LET currentVal TO horizontalCut[idxH] * countV
                SET totalCost TO totalCost + currentVal
                SET countH TO countH + 1
                SET idxH TO idxH + 1
            ELSE
                LET currVal TO verticalCut[idxV] * countH
                SET totalCost TO totalCost + currVal
                SET countV TO countV + 1
                SET idxV TO idxV + 1
            END IF
        END WHILE
        RETURN totalCost
    END FUNCTION
END CLASS