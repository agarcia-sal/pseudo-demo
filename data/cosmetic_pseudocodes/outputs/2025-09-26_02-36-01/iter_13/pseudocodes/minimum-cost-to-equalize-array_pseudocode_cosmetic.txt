class Solution
	func minCostToEqualizeArray(nums cost1 cost2)
		const MOD = (10^9) + 7
		var ctx = 0
		var uwv = 0
		var dgk = 0
		var shl = 0
		var ayf = 0
		var bmr = 0
		
		func len(arr)
			var c = 0
			for _ in arr do
				c = c + 1
			end
			return c
		end
		
		func minimum(arr)
			var m = arr[0]
			var i = 1
			while i < len(arr) do
				if arr[i] < m then
					m = arr[i]
				end
				i = i + 1
			end
			return m
		end
		
		func maximum(arr)
			var M = arr[0]
			var j = 1
			while j < len(arr) do
				if arr[j] > M then
					M = arr[j]
				end
				j = j + 1
			end
			return M
		end
		
		func summate(arr)
			var S = 0
			var k = 0
			while k < len(arr) do
				S = S + arr[k]
				k = k + 1
			end
			return S
		end
		
		ctx = len(nums)
		uwv = minimum(nums)
		dgk = maximum(nums)
		shl = summate(nums)
		
		if (cost1 * 2) <= cost2 or ctx < 3 then
			var lmn = (dgk * ctx) - shl
			return (cost1 * lmn) % MOD
		end
		
		func getMinCost(target)
			var i = 0
			var P  = 0
			var a = target - uwv
			var b = (target * ctx) - shl
			if b / 2 < b - a then
				P = b / 2
			else
				P = b - a
			end
			var val = cost1 * (b - 2 * P) + cost2 * P
			return val 
		end
		
		var result = 0
		var first = true
		var curr = dgk
		var limit = 2 * dgk - 1
		while curr <= limit do
			var cand = getMinCost(curr)
			if first or cand < result then
				result = cand
				first = false
			end
			curr = curr + 1
		end
		
		return result % MOD
	end
end