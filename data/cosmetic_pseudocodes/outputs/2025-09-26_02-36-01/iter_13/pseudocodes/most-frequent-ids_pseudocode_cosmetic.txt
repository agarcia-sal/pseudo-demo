CLASS Solution
    FUNCTION mostFrequentIDs(nums PARAMETER, freq PARAMETER)
        DEFINE FUNCTION heapPop(h)
            IF NOT isEmpty(h)
                SET lastIdx TO length(h) - 1
                SET topElem TO h[0]
                SET h[0] TO h[lastIdx]
                REMOVE h[lastIdx]
                CALL heapifyDown(h, 0)
                RETURN topElem
            END IF
            RETURN null
        END FUNCTION

        DEFINE FUNCTION heapPush(h, elem)
            APPEND elem TO h
            SET idx TO length(h) - 1
            CALL heapifyUp(h, idx)
        END FUNCTION

        DEFINE FUNCTION heapifyUp(h, idx)
            WHILE idx > 0
                SET parent TO (idx - 1) // 2
                IF h[parent][0] <= h[idx][0]
                    BREAK
                END IF
                SWAP h[parent], h[idx]
                SET idx TO parent
            END WHILE
        END FUNCTION

        DEFINE FUNCTION heapifyDown(h, idx)
            SET size TO length(h)
            WHILE True
                SET left TO 2 * idx + 1
                SET right TO 2 * idx + 2
                SET smallest TO idx
                IF left < size AND h[left][0] < h[smallest][0]
                    SET smallest TO left
                END IF
                IF right < size AND h[right][0] < h[smallest][0]
                    SET smallest TO right
                END IF
                IF smallest == idx
                    BREAK
                END IF
                SWAP h[smallest], h[idx]
                SET idx TO smallest
            END WHILE
        END FUNCTION

        SET dictCounter TO empty dictionary with default value 0
        SET heapStorage TO empty list
        SET outputResult TO empty list
        DEFINE FUNCTION processAtIndex(i)
            IF i >= length(nums)
                RETURN
            END IF
            SET currentNum TO nums[i]
            SET currentFreq TO freq[i]
            SET dictCounter[currentNum] TO dictCounter[currentNum] + currentFreq
            CALL heapPush(heapStorage, [-dictCounter[currentNum], currentNum])
            WHILE length(heapStorage) > 0
                SET topPair TO heapStorage[0]
                SET negCount TO -topPair[0]
                SET valNum TO topPair[1]
                IF negCount == dictCounter[valNum]
                    BREAK
                END IF
                CALL heapPop(heapStorage)
            END WHILE
            IF length(heapStorage) > 0
                APPEND -heapStorage[0][0] TO outputResult
            ELSE
                APPEND 0 TO outputResult
            END IF
            CALL processAtIndex(i + 1)
        END FUNCTION

        CALL processAtIndex(0)
        RETURN outputResult
    END FUNCTION
END CLASS