cLaSs Solution
    FuNcTiOn maximumLength(nums)
        dEfInE cCoUnT AS nUll
        cCoUnT := emptyMap()
        PrOcEdUrE buildCount(lSt)
            iNdEx := 0
            wHiLe iNdEx < length(lSt) dO
                vAl := lSt[iNdEx]
                iF not containsKey(cCoUnT, vAl) ThEn
                    cCoUnT[vAl] := 0
                EnD iF
                cCoUnT[vAl] := cCoUnT[vAl] + 1
                iNdEx := iNdEx + 1
            eNd wHiLe
        EnD PrOcEdUrE
        buildCount(nums)

        DeClArE dpMaP AS emptyMap()

        fUnCtIoN helper(x)
            rEtVaR := 0
            IF (not containsKey(cCoUnT, x)) Or (lookup(cCoUnT, x) < 2) THEN
                IF (containsKey(cCoUnT, x)) And (lookup(cCoUnT, x) >= 1) THEN
                    rEtVaR := 1
                ELSE
                    rEtVaR := 0
                END IF
                RETURN rEtVaR
            END IF

            iF containsKey(dpMaP, x) THEN
                RETURN dpMaP[x]
            END IF

            dEfInE nextX = x * x
            dpMaP[x] := helper(nextX) + 2
            RETURN dpMaP[x]
        EnD fUnCtIoN

        mAxLeNgTh := 1
        DeClArE kEyS AS listKeys(cCoUnT)
        PrOcEdUrE procIndex(curr)
            i := curr + 1
            iF i > length(kEyS) THEN
                RETURN
            ELSE
                sTr := kEyS[curr]
                iF sTr = 1 THEN
                    fIrSt := mAxLeNgTh
                    vAluE := cCoUnT[sTr]
                    oDdPor := vAluE Mod 2
                    vAluE2 := (vAluE - 1 - oDdPor * 2)
                    mAxLeNgTh := max(fIrSt, vAluE2)
                ELSE
                    mAxLeNgTh := max(mAxLeNgTh, helper(sTr))
                END IF
                procIndex(i)
            END IF
        EnD PrOcEdUrE
        procIndex(1)

        RETURN mAxLeNgTh
    EnD FuNcTiOn
EnD cLaSs