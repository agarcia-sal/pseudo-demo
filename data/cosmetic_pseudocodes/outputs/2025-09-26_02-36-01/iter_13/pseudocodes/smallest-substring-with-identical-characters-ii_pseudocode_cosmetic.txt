CLASS Solution  
  FUNCTION minLength(s parameter representing a string, numOps parameter representing an integer) RETURNS integer  
    FUNCTION check(m parameter representing an integer) RETURNS boolean  
      SET countAccum TO 0  
      SET segmentLen TO 0  

      FUNCTION helperLoop(index parameter representing integer) RETURNS boolean  
        IF index GREATER THAN OR EQUAL TO LENGTH of s THEN  
          IF countAccum GREATER THAN numOps THEN RETURN false END IF  
          RETURN true  
        END IF  

        SET segmentLen TO segmentLen + 1  
        IF (index EQUALS LENGTH of s MINUS 1) OR (s[index] NOT EQUAL s[index + 1]) THEN  
          SET countAccum TO countAccum + (segmentLen - 1) DIV m + 1  
          IF countAccum GREATER THAN numOps THEN RETURN false END IF  
          SET segmentLen TO 0  
        END IF  

        RETURN helperLoop(index + 1)  
      END FUNCTION  

      RETURN helperLoop(0)  
    END FUNCTION  

    SET lengthStr TO LENGTH of s  
    SET lowBound TO 1  
    SET highBound TO lengthStr  

    FUNCTION binarySearch(left parameter representing integer, right parameter representing integer) RETURNS integer  
      IF left GREATER THAN OR EQUAL TO right THEN RETURN left END IF  

      SET middle TO (left + right) DIV 2  
      IF check(middle) THEN  
        RETURN binarySearch(left, middle)  
      ELSE  
        RETURN binarySearch(middle + 1, right)  
      END IF  
    END FUNCTION  

    RETURN binarySearch(lowBound, highBound)  
  END FUNCTION  
END CLASS