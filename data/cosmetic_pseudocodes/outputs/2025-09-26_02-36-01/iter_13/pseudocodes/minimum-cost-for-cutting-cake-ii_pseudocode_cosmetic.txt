class Solution
	function minimumCost(m n horizontalCut verticalCut)
		define procedure sortDesc(arr)
			repeat
				set changed to false
				set k to 0
				repeat until k greater or equal length(arr) - 1
					if arr[k] less than arr[k + 1]
						set temp to arr[k]
						set arr[k] to arr[k + 1]
						set arr[k + 1] to temp
						set changed to true
					end if
					set k to k + 1
				end repeat
			until not changed
		end procedure

		call sortDesc(horizontalCut)
		call sortDesc(verticalCut)

		set resultValue to 0
		set idxH to 0
		set idxV to 0
		set countH to 1
		set countV to 1

		repeat until not (idxH less than length(horizontalCut) or idxV less than length(verticalCut))
			if not(idxV less than length(verticalCut)) or (idxH less than length(horizontalCut) and horizontalCut[idxH] greater than verticalCut[idxV])
				set addend to horizontalCut[idxH] * countV
				set resultValue to resultValue + addend
				set countH to countH + 1
				set idxH to idxH + 1
			else
				set addend to verticalCut[idxV] * countH
				set resultValue to resultValue + addend
				set countV to countV + 1
				set idxV to idxV + 1
			end if
		end repeat

		return resultValue
	end function
end class