CLASS Solution
    FUNCTION maximumPrimeDifference(nums)
        FUNCTION isPrimeCandidate(value)
            DEFINE primeSet AS createPrimeSet()
            RETURN containsElement(primeSet, value)
        END FUNCTION

        FUNCTION createPrimeSet()
            DEFINE primeNumbers AS [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]
            DEFINE primeMap AS emptyMap()
            DEFINE counter AS 0
            WHILE counter < length(primeNumbers)
                primeMap[primeNumbers[counter]] = true
                SET counter TO counter + 1
            END WHILE
            RETURN primeMap
        END FUNCTION

        FUNCTION containsElement(mapStructure, key)
            IF key IN mapStructure
                RETURN true
            ELSE
                RETURN false
            END IF
        END FUNCTION

        DEFINE firstOccurrence AS -1
        DEFINE lastOccurrence AS -1

        FUNCTION locatePrimes(startIndex, dataList)
            IF startIndex >= length(dataList)
                RETURN
            END IF

            IF isPrimeCandidate(dataList[startIndex]) = true
                IF firstOccurrence = -1 THEN
                    SET firstOccurrence TO startIndex
                END IF
                SET lastOccurrence TO startIndex
            END IF

            CALL locatePrimes(startIndex + 1, dataList)
        END FUNCTION

        CALL locatePrimes(0, nums)

        RETURN lastOccurrence - firstOccurrence
    END FUNCTION
END CLASS