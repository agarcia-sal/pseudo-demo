class Solution
	function maxHammingDistances(nums list of integer, m integer) returns list of integer
		var binList ← empty list
		recursive function binConvert(index integer)
			if index = length(nums) then return
			var numVal ← nums[index]
			var tempString ← ""
			repeat
				var bitChar ← if (numVal mod 2) = 0 then "0" else "1"
				tempString ← bitChar + tempString
				numVal ← numVal div 2
			until numVal = 0
			while length(tempString) < m do
				tempString ← "0" + tempString
			end while
			binList ← binList + [tempString]
			binConvert(index + 1)
		end function
		binConvert(0)

		var resultList ← empty list

		function computeDistance(a string, b string) returns integer
			var pos ← 0
			var count ← 0
			while pos < length(a) do
				if not (a[pos] = b[pos]) then
					count ← count + 1
				end if
				pos ← pos + 1
			end while
			return count
		end function

		var idxOuter ← 0
		loop
			if idxOuter = length(nums) then exit loop
			var maxFound ← 0
			var idxInner ← 0
			repeat
				if idxInner >= length(nums) then exit
				if not (idxOuter = idxInner) then
					var distVal ← computeDistance(binList[idxOuter], binList[idxInner])
					if distVal > maxFound then
						maxFound ← distVal
					end if
				end if
				idxInner ← idxInner + 1
			until false
			resultList ← resultList + [maxFound]
			idxOuter ← idxOuter + 1
		end loop

		return resultList
	end function
end class