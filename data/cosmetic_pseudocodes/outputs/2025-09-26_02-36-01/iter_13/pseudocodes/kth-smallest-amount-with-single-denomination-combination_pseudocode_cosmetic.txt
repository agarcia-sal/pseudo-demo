class Solution  
    function findKthSmallest(coins k)  
        function count_smaller_or_equal(x)  
            var total := 0  
            var mask := 1  
            var limit := (1 << length of coins) - 1  
            var iterator := 1  
            loop_until:  
                if iterator > limit then goto end_loop_until  
                var lcm_val := 1  
                var set_count := 0  
                var index := 0  
                while index < length of coins do  
                    if (iterator bitwise_and (1 left_shift index)) not_equals 0 then  
                        var gcd_val := function gcd(a b)  
                            if b equals 0 then return a else return gcd(b a modulo b)  
                        end function  
                        lcm_val := (lcm_val * coins[index]) integer_divided_by gcd_val(lcm_val coins[index])  
                        set_count := set_count plus 1  
                    end if  
                    index := index plus 1  
                end while  
                if (set_count modulo 2) equals 1 then  
                    total := total plus (x integer_divided_by lcm_val)  
                else  
                    total := total minus (x integer_divided_by lcm_val)  
                end if  
                iterator := iterator plus 1  
                goto loop_until  
            end_loop_until:  
            return total  
        end function  

        var left_bound := 1  
        var right_bound := k times minimum_of(coins)  
        while left_bound less_than right_bound do  
            var mid_point := (left_bound plus right_bound) integer_divided_by 2  
            if count_smaller_or_equal(mid_point) less_than k then  
                left_bound := mid_point plus 1  
            else  
                right_bound := mid_point  
            end if  
        end while  
        return left_bound  
    end function  
end class