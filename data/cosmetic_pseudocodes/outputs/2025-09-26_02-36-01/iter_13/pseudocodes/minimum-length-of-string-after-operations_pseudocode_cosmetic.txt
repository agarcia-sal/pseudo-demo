CLASS Solution
    FUNCTION minimumLength(s)
        FUNCTION mod_two(val)
            RETURN val - 2 * (val DIV 2)
        END FUNCTION

        FUNCTION count_values(str)
            DICT frequencyMap = {}
            FUNCTION recurse_index(i)
                IF i >= LENGTH(str)
                    RETURN
                END IF
                CHARACTER c = str[i]
                IF c IN frequencyMap
                    frequencyMap[c] = frequencyMap[c] + 1
                ELSE
                    frequencyMap[c] = 1
                END IF
                recurse_index(i + 1)
            END FUNCTION
            recurse_index(0)
            RETURN frequencyMap
        END FUNCTION

        DICT mapVar = count_values(s)
        INTEGER varOne = 0
        INTEGER varTwo = 0

        FUNCTION iterator(keysList, idx)
            IF idx >= LENGTH(keysList)
                RETURN
            END IF

            INTEGER currVal = mapVar[keysList[idx]]
            IF mod_two(currVal) = 1
                varOne = varOne + 1
            ELSE
                IF currVal <> 0 AND mod_two(currVal) = 0
                    varTwo = varTwo + 2
                END IF
            END IF
            iterator(keysList, idx + 1)
        END FUNCTION

        LIST keysCollection = []
        FOR EACH key IN mapVar
            keysCollection = keysCollection + [key]
        END FOR
        iterator(keysCollection, 0)

        INTEGER answer = varOne + varTwo
        RETURN answer
    END FUNCTION
END CLASS