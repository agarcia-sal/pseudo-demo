class Solution
    function largestSquareArea(bottomLeft, topRight)
        function intersecting_square_area(bl1, tr1, bl2, tr2)
            function max_val(a, b)
                if a >= b then return a else return b end if
            end function
            function min_val(a, b)
                if a <= b then return a else return b end if
            end function

            left_edge = max_val(bl1[0], bl2[0])
            right_edge = min_val(tr1[0], tr2[0])
            lower_edge = max_val(bl1[1], bl2[1])
            upper_edge = min_val(tr1[1], tr2[1])

            if not (right_edge > left_edge and upper_edge > lower_edge) then
                return 0
            end if

            horizontal_len = right_edge - left_edge
            vertical_len = upper_edge - lower_edge

            if horizontal_len <= vertical_len then
                side_length = horizontal_len
            else
                side_length = vertical_len
            end if

            result_area = side_length * side_length
            return result_area
        end function

        function length_of_array(arr)
            count = 0
            repeat
                if arr[count] is not defined then break end if
                count = count + 1
            until false
            return count
        end function

        max_square_area = 0
        count_points = length_of_array(bottomLeft)

        function recursive_outer_loop(ix)
            if ix >= count_points - 1 then return end if

            function recursive_inner_loop(jx)
                if jx >= count_points then return end if

                temp_area = intersecting_square_area(bottomLeft[ix], topRight[ix], bottomLeft[jx], topRight[jx])
                if temp_area > max_square_area then
                    max_square_area = temp_area
                end if

                recursive_inner_loop(jx + 1)
            end function

            recursive_inner_loop(ix + 1)
            recursive_outer_loop(ix + 1)
        end function

        recursive_outer_loop(0)
        return max_square_area
    end function
end class