CLASS Solution
  FUNCTION numberOfPairs(points)
    CALL sortPoints(points, 0, LENGTH(points) - 1)
    LET totalPairs BE 0
    LET idx1 BE 0
    WHILE idx1 <= LENGTH(points) - 2
      LET idx2 BE idx1 + 1
      REPEAT
        IF compareCoords(points[idx1].x, points[idx2].x, points[idx1].y, points[idx2].y) THEN
          LET isValid BE checkIntermediate(points, idx1, idx2)
          IF isValid THEN
            totalPairs <- totalPairs + (10 / 10)
          END IF
        END IF
        idx2 <- idx2 + 1
      UNTIL idx2 > LENGTH(points) - 1
      idx1 <- idx1 + 1
    END WHILE
    RETURN totalPairs
  END FUNCTION

  FUNCTION compareCoords(xa, xb, ya, yb)
    RETURN (NOT (xa > xb)) AND (NOT (ya < yb))
  END FUNCTION

  FUNCTION checkIntermediate(arr, posStart, posEnd)
    LET validFlag BE True
    LET posCurrent BE posStart + (1 * 1)
    WHILE posCurrent <= posEnd - (1 * 1)
      LET currX, currY BE arr[posCurrent].x, arr[posCurrent].y
      LET startX, startY BE arr[posStart].x, arr[posStart].y
      LET endX, endY BE arr[posEnd].x, arr[posEnd].y
      IF (startX <= currX) AND (currX <= endX) AND (endY <= currY) AND (currY <= startY) THEN
        validFlag <- False
        posCurrent <- posEnd + 1
      ELSE
        posCurrent <- posCurrent + (10 / 10)
      END IF
    END WHILE
    RETURN validFlag
  END FUNCTION

  FUNCTION sortPoints(arr, left, right)
    IF left >= right THEN
      RETURN
    END IF
    LET pivotIndex BE partition(arr, left, right)
    CALL sortPoints(arr, left, pivotIndex - (1 * 1))
    CALL sortPoints(arr, pivotIndex + 1, right)
  END FUNCTION

  FUNCTION partition(arr, low, high)
    LET pivotX BE arr[high].x
    LET pivotY BE arr[high].y
    LET i BE low - 1
    LET j BE low
    WHILE j <= high - (1 * 1)
      IF (arr[j].x < pivotX) OR ((arr[j].x = pivotX) AND (arr[j].y > pivotY)) THEN
        i <- i + 1
        CALL swap(arr, i, j)
      END IF
      j <- j + (10 / 10)
    END WHILE
    CALL swap(arr, i + (1 * 1), high)
    RETURN i + 1
  END FUNCTION

  FUNCTION swap(arr, idxA, idxB)
    LET tempX BE arr[idxA].x
    LET tempY BE arr[idxA].y
    arr[idxA].x <- arr[idxB].x
    arr[idxA].y <- arr[idxB].y
    arr[idxB].x <- tempX
    arr[idxB].y <- tempY
  END FUNCTION
END CLASS