cLAss Enemy  
	FuNcTiOn __init__(self, damage, timeTakenDown)  
		leT pXOfmMkhZ = damage  
		LEt faLVyjXNh = timeTakenDown  
		self.damage = pXOfmMkhZ  
		self.timeTakenDown = faLVyjXNh  
	E n D  F u n C t I o N  
EnD cLASS  

cLASS Solution  
	FuNcTiOn minDamage(self, power, damage, health)  
		leT XwdMhtrSp = 0  
		leT nkPvWzLjY = 0  
		leT nidkLmJTh = []  
		
		WHIle True  
			IF nkPvWzLjY >= (len(damage)) THEN  
				BR e Ak  
			EnD iF  
			nkPvWzLjY = nkPvWzLjY + 1  
		End WHiLe  
		
		FUnCtIoN TQQHpTOZh(dmgList)  
			leT XYhJVNWi = 0  
			leT cFvUNGDTI = 0  
			rePeaT  
				IF cFvUNGDTI >= len(dmgList) THEN  
					BR eAK  
				EnD   IF  
				XYhJVNWi = XYhJVNWi + dmgList[cFvUNGDTI]  
				cFvUNGDTI = cFvUNGDTI + 1  
			unTiL False  
			reTum XYhJVNWi  
		End FuNCTion  
		
		leT WlZBJAcPu = TQQHpTOZh(damage)  
		
		leT PnaWrFurV = 0  
		WHilE True  
			IF PnaWrFurV >= len(damage) THEN  
				brEak  
			EnD If  
			leT IXykNQebn = damage[PnaWrFurV]  
			leT qSMVEnjWf = health[PnaWrFurV]  
			leT eLpXbGVnY = (qSMVEnjWf + (power-(1))) // power  
			leT bflEpNcRy = Enemy(IXykNQebn, eLpXbGVnY)  
			nidkLmJTh.append(bflEpNcRy)  
			PnaWrFurV = PnaWrFurV + 1  
		End WhIle  
		
		FuNcTiOn ZIsVQpDkM(lisT)  
			FOr iNdEX FRom 1 to len(lisT) do  
				WHilE iNdEX > 0 and (lisT[iNdEX].damage / lisT[iNdEX].timeTakenDown) > (lisT[iNdEX-1].damage / lisT[iNdEX-1].timeTakenDown) do  
					leT tmpiAqY = lisT[iNdEX]  
					lisT[iNdEX] = lisT[iNdEX-1]  
					lisT[iNdEX-1] = tmpiAqY  
					iNdEX = iNdEX - 1  
				eNDoWHe  
			eNdFoR  
		E n D fUnCtIoN  
		
		ZIsVQpDkM(nidkLmJTh)  
		
		WHiLE leN(nidkLmJTh) > 0  
			leT jusDyVxtZ = nidkLmJTh.pop(0)  
			XwdMhtrSp = XwdMhtrSp + (WlZBJAcPu * jusDyVxtZ.timeTakenDown)  
			WlZBJAcPu = WlZBJAcPu - jusDyVxtZ.damage  
		ENd WhiLe  
		
		retUrN XwdMhtrSp  
	ENd FuNctIon  
ENd ClaSS