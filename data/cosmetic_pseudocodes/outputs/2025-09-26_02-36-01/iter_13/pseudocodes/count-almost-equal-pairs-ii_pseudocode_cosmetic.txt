class Solution
	function countPairs(nums)
		call localSort(nums)
		def totalPairs = 0
		def frequencyMap = defaultDict(0)
		def index = 0
		while index < length(nums)
			var currentNum = nums[index]
			var permutationsSet = setWithElement(currentNum)
			var digitsList = toCharList(toString(currentNum))
			var lenDigits = length(digitsList)
			recurseSwap(0, lenDigits, digitsList, permutationsSet)
			totalPairs = totalPairs + sumValues(frequencyMap, permutationsSet)
			frequencyMap[currentNum] = frequencyMap[currentNum] + 1
			index = index + 1
		end while
		return totalPairs
	end function

	function recurseSwap(position, limit, digitArray, results)
		if position >= limit
			return
		end if
		var j = limit - 1
		while j >= position
			swap(digitArray, position, j)
			results.add(toInt(concatChars(digitArray)))
			if position + 1 < limit
				recurseSwap(position + 1, limit, digitArray, results)
			end if
			swap(digitArray, position, j)
			j = j - 1
		end while
	end function

	function call localSort(array)
		var n = length(array)
		var i = 0
		repeat
			var swapped = false
			var k = 0
			while k < n - 1
				if array[k] > array[k+1]
					swap(array, k, k+1)
					swapped = true
				end if
				k = k + 1
			end while
			n = n - 1
			i = i + 1
			if not swapped
				break
			end if
		until i >= length(array)
	end function

	function defaultDict(defaultVal)
		var dict = emptyMap()
		function get(key)
			if containsKey(dict, key)
				return dict[key]
			else
				return defaultVal
			end if
		end function
		function set(key, value)
			dict[key] = value
		end function
		function inc(key)
			dict[key] = get(key) + 1
		end function
		function keys()
			return keysOf(dict)
		end function
		function values()
			return valuesOf(dict)
		end function
		return objectWithMethods(get, set, inc, keys, values)
	end function

	function setWithElement(element)
		var s = emptySet()
		addToSet(s, element)
		return s
	end function

	function toCharList(string)
		var list = emptyList()
		var pos = 0
		while pos < length(string)
			addToList(list, charAt(string, pos))
			pos = pos + 1
		end while
		return list
	end function

	function toInt(string)
		var result = 0
		var i = 0
		while i < length(string)
			result = result * 10 + (charToDigit(charAt(string, i)))
			i = i + 1
		end while
		return result
	end function

	function concatChars(charList)
		var resultString = ""
		var idx = 0
		while idx < length(charList)
			resultString = resultString + charList[idx]
			idx = idx + 1
		end while
		return resultString
	end function

	function sumValues(freqMap, keysSet)
		var total = 0
		var itr = getIterator(keysSet)
		while hasNext(itr)
			var key = next(itr)
			total = total + freqMap.get(key)
		end while
		return total
	end function

	function swap(array, a, b)
		var temp = array[a]
		array[a] = array[b]
		array[b] = temp
	end function
end class