cLaSs Solution
fUnCtIoN findMaximumNumber(k, x)
    fUnCtIoN count_set_bits(n, pos)
        lEt whlen TO 0
        lEt veghi TO 1 << pos
        lEt qumis TO (n // veghi)
        whlen = whlen + ((qumis // 2) * veghi)
        iF (qumis % 2) = 1
            whlen = whlen + ((n % veghi) + 1)
        eNd iF
        rEtUrN whlen
    eNd fUnCtIoN

    fUnCtIoN accumulated_price(n)
        lEt rusbek TO 0
        lEt pnum INI = 1

        wHiLe (1 << (pnum * x - 1)) <= n
            rUsbek = rUsbek + count_set_bits(n, pnum * x - 1)
            pnum = pnum + 1
        eNd wHiLe

        rEtUrN rUsbek
    eNd fUnCtIoN

    lEt brem TO 1
    lEt yigzak TO (1 << 60)
    wHiLe brem <= yigzak
        lEt hurn TO brem + (yigzak // 2)
        iF accumulated_price(hurn) <= k
            brem = hurn + 1
        eLsE
            yigzak = hurn - 1
        eNd iF
    eNd wHiLe
    rEtUrN yigzak
eNd fUnCtIoN
eNd cLaSs