class Solution  
	function minimumArrayLength(nums)  
		var tempA := 0  
		var tempB := 0  
		var tempC := 0  
		var tempD := 0  
		var tempE := 0  
		var tempF := 0  
		var tempG := 0  
		var tempH := 0  
		var tempI := 0  

		tempA := callFindMinimum(nums, 0, lengthOf(nums))  
		tempB := countOccurrences(nums, tempA)  

		if not (tempB <> 1) then  
			tempC := 1  
		else  
			tempD := tempB + 1  
			tempE := 2  
			tempF := integerDivision(tempD, tempE)  
			tempC := tempF  
		end if  
		return tempC  
	end function  

	function callFindMinimum(data, startIndex, endIndex)  
		if startIndex >= endIndex then  
			return infinityValue()  
		end if  
		var val1 := data[startIndex]  
		var val2 := callFindMinimum(data, startIndex + 1, endIndex)  
		if val1 < val2 then  
			return val1  
		else  
			return val2  
		end if  
	end function  

	function countOccurrences(collection, target)  
		var idx := 0  
		var cnt := 0  
		var len := lengthOf(collection)  
		while idx < len do  
			if not (collection[idx] <> target) then  
				cnt := cnt + 1  
			end if  
			idx := idx + 1  
		end while  
		return cnt  
	end function  

	function lengthOf(sequence)  
		var lengthCounter := 0  
		var pos := 0  
		repeat  
			if existsIndex(sequence, pos) then  
				lengthCounter := lengthCounter + 1  
				pos := pos + 1  
			else  
				break  
			end if  
		until false  
		return lengthCounter  
	end function  

	function integerDivision(x, y)  
		var q := 0  
		var sum := y  
		while sum <= x do  
			q := q + 1  
			sum := sum + y  
		end while  
		return q  
	end function  

	function existsIndex(sequence, index)  
		// Assuming sequence supports lengthOf function  
		return index >= 0 and index < lengthOf(sequence)  
	end function  

	function infinityValue()  
		return 1 / 0  
	end function  
end class