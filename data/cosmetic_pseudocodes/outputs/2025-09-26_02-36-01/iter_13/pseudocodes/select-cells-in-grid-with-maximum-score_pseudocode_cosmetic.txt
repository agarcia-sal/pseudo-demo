CLASS Solution
	 FUNCTION maxScore(grid)
		  FUNCTION backtrack(az, rm, fh)
				IF NOT (az < LENGTH(grid)) THEN
					 max_sum := (IF max_sum < fh THEN fh ELSE max_sum ENDIF)
					 RETURN
				END IF
				feed(az + 1, rm, fh)
				USE temp_index := 0
				REPEAT
					 EXIT WHEN temp_index >= LENGTH(grid[az])
					 USE v := grid[az][temp_index]
					 IF NOT contains(rm, v) THEN
						  addSet(rm, v)
						  feed(az + 1, rm, fh + v)
						  removeSet(rm, v)
					 END IF
					 temp_index := temp_index + 1
				UNTIL FALSE
		  END FUNCTION
		  FUNCTION contains(s, x)
				USE iterator := iter(s)
				WHILE hasNext(iterator) DO
					 IF next(iterator) = x THEN RETURN TRUE END IF
				END WHILE
				RETURN FALSE
		  END FUNCTION
		  PROCEDURE addSet(s, x)
				s := insert(s, x)
		  END PROCEDURE
		  PROCEDURE removeSet(s, x)
				s := delete(s, x)
		  END PROCEDURE
		  PROCEDURE feed(rd, ps, cs) IS backtrack(rd, ps, cs) END PROCEDURE
		  USE idx_1 := 0
		  WHILE idx_1 < LENGTH(grid)
				grid[idx_1] := sortDesc(grid[idx_1])
				idx_1 := idx_1 + 1
		  END WHILE
		  max_sum := 0
		  CALL backtrack(0, emptySet(), 0)
		  RETURN max_sum
	 END FUNCTION
END CLASS