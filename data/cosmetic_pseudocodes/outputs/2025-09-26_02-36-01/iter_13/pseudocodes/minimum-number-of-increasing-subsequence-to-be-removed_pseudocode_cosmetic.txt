class Solution
{
func minOperations(inputList)
{
var lengthValue;
var idxOuter;
var idxInner;
var tempMax;
var dpList;
var currentMax;
var iterIndex;

func maxValue(a,b)
{
if a>=b {
return a
} else {
return b
}
}
lengthValue=0
iterIndex=0
while iterIndex < len(inputList)
{
lengthValue+=1
iterIndex+=1
}
if lengthValue == 0
{
return 0
}
dpList=[]
idxOuter=0
repeat
dpList[idxOuter]=1
idxOuter+=1
until idxOuter >= lengthValue
func innerLoop(j,i,nums,dp)
{
if j<0 {
return
}
if nums[i] <= nums[j]
{
tempMax=maxValue(dp[i], dp[j]+1)
dp[i]=tempMax
}
innerLoop(j-1,i,nums,dp)
}
idxOuter=1
outerLoop:
while idxOuter < lengthValue
{
idxInner=idxOuter-1
innerLoop(idxInner,idxOuter,inputList,dpList)
idxOuter+=1
}
currentMax=dpList[0]
idxOuter=1
while idxOuter < lengthValue
{
currentMax=maxValue(currentMax, dpList[idxOuter])
idxOuter+=1
}
return currentMax
}
}