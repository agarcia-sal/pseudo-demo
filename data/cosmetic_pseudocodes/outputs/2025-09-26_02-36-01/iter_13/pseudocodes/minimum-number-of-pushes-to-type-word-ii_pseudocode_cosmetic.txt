class Solution
{
function minimumPushes(word)
{
  function charCount(str, idx, acc)
  {
    if (idx >= length(str)) 
      return acc;

    inc = 1;
    ch = str[idx];
    tempMap = acc;

    if (containsKey(tempMap, ch))
      tempMap[ch] = tempMap[ch] + inc;
    else
      tempMap[ch] = inc;

    return charCount(str, idx + 1, tempMap);
  }

  function containsKey(mapVar, keyVar)
  {
    keysList = keys(mapVar);
    idx = 0;
    loopResult = false;

    while (idx < length(keysList))
    {
      if (keysList[idx] == keyVar)
      {
        loopResult = true;
        idx = length(keysList);
      }
      else
        idx = idx + 1;
    }
    return loopResult;
  }

  function keys(mapVar)
  {
    result = [];
    idx2 = 0;
    mapVars = mapVar;
    forEachEntry = entries(mapVars);
    function entries(m)
    {
      tempList = [];
      for (k in m)
        tempList = append(tempList, k);
      return tempList;
    }
    return forEachEntry;
  }
  
  function length(coll)
  {
    counter = 0;
    for (elem in coll)
      counter = counter + 1;
    return counter;
  }

  function append(arr, val)
  {
    newArr = [];
    for (i in arr)
      newArr = concat(newArr, [i]);
    newArr = concat(newArr, [val]);
    return newArr;
  }

  function concat(a1, a2)
  {
    resArr = [];
    for (v in a1)
      resArr = appendInternal(resArr, v);
    for (v2 in a2)
      resArr = appendInternal(resArr, v2);
    return resArr;
  }

  function appendInternal(a, v)
  {
    size = 0;
    for (_ in a)
      size = size + 1;
    res = [];
    idx3 = 0;
    while (idx3 < size)
    {
      res = insertAt(res, idx3, a[idx3]);
      idx3 = idx3 + 1;
    }
    res = insertAt(res, size, v);
    return res;
  }

  function insertAt(arrayVar, pos, valueVar)
  {
    outArr = [];
    idx4 = 0;
    lenArr = length(arrayVar);
    while (idx4 < lenArr + 1)
    {
      if (idx4 < pos)
        outArr = appendInternal(outArr, arrayVar[idx4]);
      else if (idx4 == pos)
        outArr = appendInternal(outArr, valueVar);
      else
        outArr = appendInternal(outArr, arrayVar[idx4 - 1]);
      idx4 = idx4 + 1;
    }
    return outArr;
  }

  function sortDescending(lst)
  {
    resultList = lst;
    n = length(resultList);
    i = 0;
    repeat
    {
      swapped = false;
      j = 0;
      while (j < n - i - 1)
      {
        if (resultList[j] < resultList[j + 1])
        {
          tempVal = resultList[j];
          resultList[j] = resultList[j + 1];
          resultList[j + 1] = tempVal;
          swapped = true;
        }
        j = j + 1;
      }
      i = i + 1;
    } until swapped == false;
    return resultList;
  }

  function mapValues(m)
  {
    resultVals = [];
    mapEntries = [];
    for (k in m)
      mapEntries = appendInternal(mapEntries, m[k]);
    idx5 = 0;
    sz = length(mapEntries);
    while (idx5 < sz)
    {
      resultVals = appendInternal(resultVals, mapEntries[idx5]);
      idx5 = idx5 + 1;
    }
    return resultVals;
  }

  freqMap = charCount(word, 0, {});
  freqVals = mapValues(freqMap);
  descendingFreq = sortDescending(freqVals);

  accumPushes = 0;
  pressCount = 1;
  assignedCount = 0;
  idx6 = 0;
  totalElems = length(descendingFreq);

  while (idx6 < totalElems)
  {
    currVal = descendingFreq[idx6];
    accumPushes = accumPushes + (currVal * pressCount);
    assignedCount = assignedCount + 1;

    if (assignedCount == 8)
    {
      assignedCount = 0;
      pressCount = pressCount + 1;
    }
    idx6 = idx6 + 1;
  }

  return accumPushes;
}
}