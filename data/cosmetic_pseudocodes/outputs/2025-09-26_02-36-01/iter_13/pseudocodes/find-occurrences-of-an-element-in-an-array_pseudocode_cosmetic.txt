CLASS Solution
	Function occurrencesOfElement(numbers, requests, target)
		Define StoreOccurrences as empty list
		Define IndexTracker as 0

		Procedure TraverseList(list)
			If IndexTracker >= Length(list) Then Return EndTraversal()
			If IsEqual(GetElement(list, IndexTracker), target) Then
				RecordOccurrence(GetElement(list, IndexTracker), IndexTracker)
			End If
			IncrementIndex()
			TraverseList(list)
		End Procedure

		Procedure EndTraversal()
			Return
		End Procedure

		Procedure RecordOccurrence(value, idx)
			AppendToList(StoreOccurrences, idx)
		End Procedure

		Procedure IncrementIndex()
			Set IndexTracker = IndexTracker + 1
		End Procedure

		TraverseList(numbers)

		Define ResultAnswers as empty list
		Define CurrentQueryIndex as 0

		Procedure ProcessQueries(list)
			If CurrentQueryIndex >= Length(list) Then Return FinishProcessing()
			Define CurrentRequest as GetElement(list, CurrentQueryIndex)
			If LessEqual(CurrentRequest, Length(StoreOccurrences)) Then
				AppendToList(ResultAnswers, GetElement(StoreOccurrences, CurrentRequest - 1))
			Else
				AppendToList(ResultAnswers, ComputeMinusOne())
			End If
			IncrementQuery()
			ProcessQueries(list)
		End Procedure

		Procedure FinishProcessing()
			Return
		End Procedure

		Procedure IncrementQuery()
			Set CurrentQueryIndex = CurrentQueryIndex + 1
		End Procedure

		Function GetElement(container, pos)
			Return container[pos]
		End Function

		Function AppendToList(container, val)
			Add val to end of container
		End Function

		Function IsEqual(a, b)
			Return Not (a IsNotEqualTo b)
		End Function

		Function LessEqual(a, b)
			Return Not (a > b)
		End Function

		Function ComputeMinusOne()
			Return 0 - 1
		End Function

		ProcessQueries(requests)
		Return ResultAnswers
	End Function
END CLASS