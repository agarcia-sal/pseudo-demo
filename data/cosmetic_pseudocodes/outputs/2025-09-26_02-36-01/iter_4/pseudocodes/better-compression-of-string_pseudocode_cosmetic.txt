CLASS Solution  
    FUNCTION betterCompression(compressed)  
        DECLARE charTotals AS DICTIONARY WITH DEFAULT VALUE 0  
        ASSIGN activeChar TO ""  
        ASSIGN tally TO 0  
        DECLARE idx TO 0  
        WHILE idx < LENGTH(compressed)  
            ASSIGN symbol TO compressed[idx]  
            IF (symbol >= "a" AND symbol <= "z") OR (symbol >= "A" AND symbol <= "Z") THEN  
                IF activeChar != "" THEN  
                    charTotals[activeChar] = charTotals[activeChar] + tally  
                END IF  
                activeChar = symbol  
                tally = 0  
            ELSE  
                DECLARE numericValue TO INTEGER(symbol)  
                DECLARE interim TO tally * 10  
                tally = interim + numericValue  
            END IF  
            idx = idx + 1  
        END WHILE  
        IF activeChar != "" THEN  
            charTotals[activeChar] = charTotals[activeChar] + tally  
        END IF  
        DECLARE partsList AS EMPTY LIST  
        DECLARE sortedKeys AS LIST = SORTED(KEYS(charTotals))  
        DECLARE i TO 0  
        WHILE i < LENGTH(sortedKeys)  
            ASSIGN keyChar TO sortedKeys[i]  
            DECLARE countVal TO charTotals[keyChar]  
            DECLARE combinedString TO CONCATENATE(keyChar, TO_STRING(countVal))  
            APPEND combinedString TO partsList  
            i = i + 1  
        END WHILE  
        DECLARE finalResult TO ""  
        DECLARE j TO 0  
        WHILE j < LENGTH(partsList)  
            finalResult = finalResult + partsList[j]  
            j = j + 1  
        END WHILE  
        RETURN finalResult  
    END FUNCTION  
END CLASS