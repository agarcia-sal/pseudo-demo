CLASS Solution
    FUNCTION countBalancedPermutations(num)
        ASSIGN variable_x TO num

        FUNCTION dfs(idx, rem_sum, count_a, count_b)
            IF idx GREATER THAN 9 THEN
                LET condition_val = (rem_sum != 0 OR count_a != 0 OR count_b != 0)
                IF condition_val IS TRUE THEN
                    RETURN 0
                ELSE
                    RETURN 1
                END IF
            END IF
            IF count_a EQUALS 0 AND rem_sum NOT EQUAL 0 THEN
                RETURN 0
            END IF

            LET result_holder TO 0
            LET max_count_i TO cnt GET idx
            LET limit TO MINIMUM OF max_count_i AND count_a
            LET loop_var TO 0

            WHILE loop_var LESS THAN OR EQUAL TO limit DO
                LET left_count TO loop_var
                LET right_count TO max_count_i MINUS left_count

                IF right_count GREATER THAN OR EQUAL TO 0 AND right_count LESS THAN OR EQUAL TO count_b THEN
                    LET product_1 TO COMBINATION(count_a, left_count)
                    LET product_2 TO COMBINATION(count_b, right_count)

                    LET updated_rem_sum TO rem_sum MINUS (left_count MULTIPLIED BY idx)
                    LET updated_count_a TO count_a MINUS left_count
                    LET updated_count_b TO count_b MINUS right_count

                    LET dfs_result TO dfs(idx PLUS 1, updated_rem_sum, updated_count_a, updated_count_b)
                    LET intermediate TO product_1 MULTIPLIED BY product_2 MULTIPLIED BY dfs_result

                    LET result_holder TO result_holder PLUS intermediate
                END IF

                LET loop_var TO loop_var PLUS 1
            END WHILE

            RETURN result_holder MODULO mod
        END FUNCTION

        LET nums_list TO EMPTY LIST
        FOR EACH char IN num DO
            APPEND TO nums_list THE INTEGER VALUE OF char
        END FOR

        LET sum_val TO 0
        FOR EACH val IN nums_list DO
            LET sum_val TO sum_val PLUS val
        END FOR

        IF (sum_val MODULO 2) NOT EQUAL TO 0 THEN
            RETURN 0
        END IF

        LET n TO LENGTH OF nums_list
        LET mod TO (10 POWER 9) PLUS 7

        LET cnt TO COUNTER CREATED FROM nums_list

        LET half_sum TO sum_val DIVIDED BY 2
        LET half_n FLOOR_DIVIDED_BY_2 TO n DIVIDED BY 2
        LET half_n_rounded TO (n PLUS 1) DIVIDED BY 2

        RETURN dfs(0, half_sum, half_n_floor_divided_by_2, half_n_rounded)
    END FUNCTION
END CLASS