CLASS Solution  
    FUNCTION validStrings n  
        DECLARE valid_strings AS empty collection  
        
        FUNCTION backtrack current_string  
            DECLARE length_current AS LENGTH OF current_string  
            IF length_current IS EQUAL TO n THEN  
                INSERT current_string INTO valid_strings  
                EXIT FUNCTION  
            END IF  
            
            DECLARE last_char_index AS length_current MINUS one  
            DECLARE last_char AS character AT index last_char_index OF current_string  
            
            IF last_char IS EQUAL TO "1" THEN  
                DECLARE next_candidate_one AS current_string CONCATENATED WITH "0"  
                DECLARE next_candidate_two AS current_string CONCATENATED WITH "1"  
                CALL backtrack WITH next_candidate_one  
                CALL backtrack WITH next_candidate_two  
            ELSE  
                IF last_char IS EQUAL TO "0" THEN  
                    DECLARE next_candidate AS current_string CONCATENATED WITH "1"  
                    CALL backtrack WITH next_candidate  
                END IF  
            END IF  
        END FUNCTION  
        
        IF n IS EQUAL TO 1 THEN  
            RETURN ["0", "1"]  
        END IF  
        
        CALL backtrack WITH "0"  
        CALL backtrack WITH "1"  
        
        RETURN valid_strings  
    END FUNCTION  
END CLASS