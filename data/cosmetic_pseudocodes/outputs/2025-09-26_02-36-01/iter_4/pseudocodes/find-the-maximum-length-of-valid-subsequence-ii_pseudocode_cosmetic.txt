CLASS Solution  
    FUNCTION maximumLength(nums k)  
        DECLARE total_elements AS LENGTH(nums)  
        IF NOT (total_elements NOT EQUAL TO 1) THEN  
            RETURN 1  
        OTHERWISE  
        END IF  
        
        DECLARE dp_list AS AN EMPTY LIST  
        DECLARE idx_counter AS zero  
        WHILE idx_counter LESS THAN total_elements DO  
            APPEND AN EMPTY DICTIONARY TO dp_list  
            INCREMENT idx_counter BY 1  
        END WHILE  
        
        ASSIGN longest_seq TO 1  
        
        DECLARE outer_index AS 0  
        WHILE outer_index LESS THAN total_elements DO  
            DECLARE inner_index AS 0  
            WHILE inner_index LESS THAN outer_index DO  
                LET current_sum BE nums[outer_index] PLUS nums[inner_index]  
                LET remainder_val BE current_sum MINUS (k MULTIPLIED BY (current_sum DIVIDED BY k))  
                
                IF remainder_val EXISTS AS A KEY IN dp_list[inner_index] THEN  
                    LET previous_length BE dp_list[inner_index][remainder_val]  
                    LET dp_list[outer_index][remainder_val] TO previous_length PLUS 1  
                ELSE  
                    LET dp_list[outer_index][remainder_val] TO 2  
                END IF  
                
                IF dp_list[outer_index][remainder_val] IS GREATER THAN longest_seq THEN  
                    SET longest_seq TO dp_list[outer_index][remainder_val]  
                END IF  
                
                INCREMENT inner_index BY 1  
            END WHILE  
            
            INCREMENT outer_index BY 1  
        END WHILE  
        
        RETURN longest_seq  
    END FUNCTION  
END CLASS