CLASS Solution
    FUNCTION largestSquareArea(bottomLeft, topRight)
        FUNCTION intersecting_square_area(bl1, tr1, bl2, tr2)
            DECLARE x_start AS bl1[0]
            DECLARE x_alt AS bl2[0]
            IF x_start < x_alt THEN
                LET left_edge BE x_alt
            ELSE
                LET left_edge BE x_start
            END IF

            DECLARE x_end1 AS tr1[0]
            DECLARE x_end2 AS tr2[0]
            IF x_end1 <= x_end2 THEN
                LET right_edge BE x_end1
            ELSE
                LET right_edge BE x_end2
            END IF

            DECLARE y_start1 AS bl1[1]
            DECLARE y_start2 AS bl2[1]
            IF NOT (y_start1 > y_start2) THEN
                LET bottom_edge BE y_start1
            ELSE
                LET bottom_edge BE y_start2
            END IF
            
            LET top_candidate1 BE tr1[1]
            LET top_candidate2 BE tr2[1]
            IF top_candidate1 < top_candidate2 THEN
                LET top_edge BE top_candidate1
            ELSE
                LET top_edge BE top_candidate2
            END IF

            IF (left_edge >= right_edge) OR (bottom_edge >= top_edge) THEN
                RETURN 0
            END IF

            LET width AS right_edge - left_edge
            LET height AS top_edge - bottom_edge
            
            IF width < height THEN
                LET side_length AS width
            ELSE
                LET side_length AS height
            END IF

            DECLARE output_area AS side_length * side_length
            RETURN output_area
        END FUNCTION

        LET maximum_area_value BE 0
        LET total_points BE LENGTH(bottomLeft)
        LET outer_index BE 0
        WHILE outer_index < total_points - 1
            LET inner_index BE outer_index + 1
            WHILE inner_index < total_points
                LET first_bl BE bottomLeft[outer_index]
                LET first_tr BE topRight[outer_index]
                LET second_bl BE bottomLeft[inner_index]
                LET second_tr BE topRight[inner_index]

                LET current_area BE intersecting_square_area(first_bl, first_tr, second_bl, second_tr)
                IF maximum_area_value < current_area THEN
                    LET maximum_area_value BE current_area
                END IF

                LET inner_index BE inner_index + 1
            END WHILE
            LET outer_index BE outer_index + 1
        END WHILE
        RETURN maximum_area_value
    END FUNCTION
END CLASS