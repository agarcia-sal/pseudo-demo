CLASS Solution
    FUNCTION countPrefixSuffixPairs(words)
        DECLARE totalPairs AS 0
        DECLARE frequencyMap AS dictionary defaulting integer zero
        DECLARE index AS length(words) MINUS 1
        WHILE index IS GREATER THAN OR EQUAL TO 0
            DECLARE currentWord AS words[index]
            FOR EACH recordedWord IN keys of frequencyMap
                DECLARE wordLength AS length(currentWord)
                DECLARE prefixSegment AS substring(recordedWord, 0, wordLength)
                DECLARE suffixSegment AS substring(recordedWord, length(recordedWord) MINUS wordLength, length(recordedWord))
                DECLARE isPrefixMatch AS NOT (currentWord NOT EQUAL TO prefixSegment)
                DECLARE isSuffixMatch AS NOT (currentWord NOT EQUAL TO suffixSegment)
                IF isPrefixMatch AND isSuffixMatch THEN
                    totalPairs = totalPairs PLUS frequencyMap[recordedWord]
                END IF
            END FOR
            frequencyMap[currentWord] = frequencyMap[currentWord] PLUS 1
            index = index MINUS 1
        END WHILE
        RETURN totalPairs
    END FUNCTION
END CLASS