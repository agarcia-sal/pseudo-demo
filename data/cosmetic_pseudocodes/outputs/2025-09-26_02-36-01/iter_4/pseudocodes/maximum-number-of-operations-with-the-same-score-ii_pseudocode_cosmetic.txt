CLASS Solution
    FUNCTION maxOperations(nums)
        FUNCTION dfs(leftIdx, rightIdx, targetSum, cache)
            DECLARE result AS zero
            IF NOT (leftIdx LESS THAN rightIdx)
                RETURN zero
            END IF

            DECLARE key AS (leftIdx, rightIdx, targetSum)
            IF key IN cache
                RETURN cache[key]
            END IF

            IF (nums[leftIdx] PLUS nums[leftIdx PLUS one]) EQUALS targetSum
                DECLARE candidate1 AS one PLUS dfs(leftIdx PLUS two, rightIdx, targetSum, cache)
                IF candidate1 GREATER THAN result
                    SET result TO candidate1
                END IF
            END IF

            IF (nums[rightIdx] PLUS nums[rightIdx MINUS one]) EQUALS targetSum
                DECLARE candidate2 AS one PLUS dfs(leftIdx, rightIdx MINUS two, targetSum, cache)
                IF candidate2 GREATER THAN result
                    SET result TO candidate2
                END IF
            END IF

            IF (nums[leftIdx] PLUS nums[rightIdx]) EQUALS targetSum
                DECLARE candidate3 AS one PLUS dfs(leftIdx PLUS one, rightIdx MINUS one, targetSum, cache)
                IF candidate3 GREATER THAN result
                    SET result TO candidate3
                END IF
            END IF

            cache[key] = result
            RETURN result
        END FUNCTION

        DECLARE firstCall AS one PLUS dfs(two, (len(nums) MINUS one), (nums[zero] PLUS nums[one]), {})
        DECLARE secondCall AS one PLUS dfs(zero, (len(nums) MINUS three), (nums[len(nums) MINUS two] PLUS nums[len(nums) MINUS one]), {})
        DECLARE thirdCall AS one PLUS dfs(one, (len(nums) MINUS two), (nums[zero] PLUS nums[len(nums) MINUS one]), {})

        DECLARE maxResult AS firstCall
        IF secondCall GREATER THAN maxResult
            SET maxResult TO secondCall
        END IF
        IF thirdCall GREATER THAN maxResult
            SET maxResult TO thirdCall
        END IF

        RETURN maxResult
    END FUNCTION
END CLASS