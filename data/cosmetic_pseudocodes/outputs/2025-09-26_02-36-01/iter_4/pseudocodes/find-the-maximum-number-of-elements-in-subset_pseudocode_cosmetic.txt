CLASS Solution
    FUNCTION maximumLength(nums)
        DECLARE tally AS an empty map
        DECLARE idx AS zero
        WHILE idx LESS THAN length of nums
            IF nums[idx] IN tally THEN
                SET tally[nums[idx]] TO tally[nums[idx]] PLUS 1
            ELSE
                SET tally[nums[idx]] TO 1
            END IF
            INCREMENT idx BY 1
        END WHILE

        DECLARE memo AS empty map

        FUNCTION helper(x)
            IF NOT (x IN tally) OR tally[x] LESS THAN 2 THEN
                IF (x IN tally) AND tally[x] GREATER THAN OR EQUAL TO 1 THEN
                    RETURN 1
                ELSE
                    RETURN 0
                END IF
            END IF

            IF x IN memo THEN
                RETURN memo[x]
            END IF

            DECLARE next_val AS x MULTIPLIED BY x
            DECLARE res AS helper(next_val) PLUS 2
            SET memo[x] TO res
            RETURN res
        END FUNCTION

        DECLARE maximum AS 1
        DECLARE keys_list AS list of keys in tally
        DECLARE i AS 0
        WHILE i LESS THAN length of keys_list
            DECLARE current_num AS keys_list[i]
            IF current_num EQUALS 1 THEN
                DECLARE freq AS tally[1]
                DECLARE adjusted AS freq MINUS 1 MINUS ((freq MOD 2) TIMES 2)
                IF adjusted GREATER THAN maximum THEN
                    SET maximum TO adjusted
                END IF
            ELSE
                DECLARE candidate AS helper(current_num)
                IF candidate GREATER THAN maximum THEN
                    SET maximum TO candidate
                END IF
            END IF
            INCREMENT i BY 1
        END WHILE

        RETURN maximum
    END FUNCTION
END CLASS