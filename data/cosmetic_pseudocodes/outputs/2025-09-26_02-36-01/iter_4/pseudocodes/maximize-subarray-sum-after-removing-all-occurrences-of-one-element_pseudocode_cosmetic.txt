CLASS Solution  
    FUNCTION maxSubarraySum(nums)  
        FUNCTION kadane(arr)  
            DECLARE temp_max AS arr[1]  
            DECLARE global_max AS arr[1]  
            DECLARE idx AS 2  
            WHILE idx LESS THAN OR EQUAL TO LENGTH(arr)  
                DECLARE current_val AS arr[idx]  
                IF temp_max PLUS current_val LESS THAN current_val  
                    SET temp_max TO current_val  
                ELSE  
                    SET temp_max TO temp_max PLUS current_val  
                END IF  
                IF global_max LESS THAN temp_max  
                    SET global_max TO temp_max  
                END IF  
                INCREMENT idx BY 1  
            END WHILE  
            RETURN global_max  
        END FUNCTION  

        DECLARE max_sum_so_far AS kadane(nums)  
        DECLARE seen_elements AS empty collection  
        FOR each element IN nums  
            INSERT element INTO seen_elements  
        END FOR  
        DECLARE unique_vals AS list from seen_elements  
        DECLARE i AS 1  
        WHILE i LESS THAN OR EQUAL TO LENGTH(unique_vals)  
            DECLARE omitted_val AS unique_vals[i]  
            DECLARE filtered_numbers AS empty list  
            DECLARE j AS 1  
            WHILE j LESS THAN OR EQUAL TO LENGTH(nums)  
                DECLARE candidate AS nums[j]  
                IF candidate NOT EQUAL TO omitted_val  
                    ADD candidate TO filtered_numbers  
                END IF  
                ADD 1 TO j  
            END WHILE  
            IF LENGTH(filtered_numbers) GREATER THAN 0 THEN  
                DECLARE current_max AS kadane(filtered_numbers)  
                IF max_sum_so_far LESS THAN current_max  
                    SET max_sum_so_far TO current_max  
                END IF  
            END IF  
            SET i TO i PLUS 1  
        END WHILE  
        RETURN max_sum_so_far  
    END FUNCTION  
END CLASS