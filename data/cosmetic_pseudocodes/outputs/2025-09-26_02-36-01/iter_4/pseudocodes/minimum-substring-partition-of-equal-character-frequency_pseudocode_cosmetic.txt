CLASS Solution  
    FUNCTION minimumSubstringsInPartition(s)  
        FUNCTION dfs(index)  
            IF index NOT LESS THAN LENGTH(s) THEN  
                RETURN 0  
            END IF  
            DECLARE charCount AS new dictionary with default 0  
            DECLARE frequencyMap AS new dictionary with default 0  
            DECLARE minimumPartitions AS LENGTH(s) - index  
            LET currentPos TO index  
            WHILE currentPos LESS THAN LENGTH(s) DO  
                LET currentChar TO s[currentPos]  
                IF currentChar IN charCount AND charCount[currentChar] IS NOT 0 THEN  
                    LET oldCount TO charCount[currentChar]  
                    LET frequencyMap[oldCount] TO frequencyMap[oldCount] - 1  
                    IF frequencyMap[oldCount] EQUALS 0 THEN  
                        DELETE frequencyMap[oldCount]  
                    END IF  
                END IF  
                LET newCount TO charCount[currentChar] + 1  
                SET charCount[currentChar] TO newCount  
                INCREASE frequencyMap[newCount] BY 1  
                IF COUNT_KEYS(frequencyMap) EQUALS 1 THEN  
                    LET candidatePartitions TO 1 + dfs(currentPos + 1)  
                    IF candidatePartitions LESS THAN minimumPartitions THEN  
                        SET minimumPartitions TO candidatePartitions  
                    END IF  
                END IF  
                SET currentPos TO currentPos + 1  
            END WHILE  
            RETURN minimumPartitions  
        END FUNCTION  
        LET lengthOfString TO LENGTH(s)  
        RETURN dfs(0)  
    END FUNCTION  
END CLASS