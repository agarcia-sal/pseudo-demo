CLASS Solution
    FUNCTION minCostToEqualizeArray(nums cost1 cost2)
        DECLARE CONSTANT ModVal EQUAL 10^9 + 7
        LET lengthNums ASSIGN THE COUNT OF nums
        LET minimumNum ASSIGN THE SMALLEST NUMBER IN nums
        LET maximumNum ASSIGN THE LARGEST NUMBER IN nums
        LET totalSum ASSIGN THE AGGREGATE OF nums

        IF (cost1 TIMES 2) IS AT MOST cost2 OR lengthNums IS LESS THAN 3 THEN
            LET gapTotal ASSIGN (maximumNum TIMES lengthNums) MINUS totalSum
            RETURN (cost1 TIMES gapTotal) MODULO ModVal
        END IF

        FUNCTION getMinCost(targetVal)
            LET maxDifference ASSIGN targetVal MINUS minimumNum
            LET aggregateGap ASSIGN (targetVal TIMES lengthNums) MINUS totalSum

            LET pairedCount ASSIGN MINIMUM BETWEEN (aggregateGap DIVIDED BY 2) AND (aggregateGap MINUS maxDifference)
            LET costCalc ASSIGN (cost1 TIMES aggregateGap) MINUS (2 TIMES cost1 TIMES pairedCount) PLUS (cost2 TIMES pairedCount)

            RETURN costCalc
        END FUNCTION

        DECLARE lowestCost ASSIGN InfiniteValue
        LET startTarget ASSIGN maximumNum
        LET endTarget ASSIGN (2 TIMES maximumNum) MINUS 1

        LET currentTarget ASSIGN startTarget
        WHILE currentTarget IS BELOW OR EQUAL TO endTarget DO
            LET currentCost ASSIGN getMinCost(currentTarget)
            IF currentCost IS LESS THAN lowestCost THEN
                ASSIGN lowestCost TO currentCost
            END IF
            INCREMENT currentTarget BY 1
        END WHILE

        RETURN lowestCost MODULO ModVal
    END FUNCTION
END CLASS