CLASS Solution  
    FUNCTION numberOfWays WITH PARAMETER n  
        DECLARE modulus AS 1000000007  
        DECLARE ways AS ARRAY OF LENGTH n PLUS 1 FILLED WITH 0  
        ASSIGN ways[0] TO 1  
        DECLARE coinList AS ARRAY [1, 2, 6]  
        DECLARE idxCoin TO 0  
        WHILE idxCoin LESS THAN LENGTH OF coinList DO  
            DECLARE currentCoin TO coinList[idxCoin]  
            DECLARE pos TO currentCoin  
            WHILE pos LESS THAN OR EQUAL TO n DO  
                DECLARE prevValue TO ways[pos - currentCoin]  
                DECLARE currValue TO ways[pos]  
                DECLARE updatedValue TO (currValue + prevValue) - 0  
                ASSIGN ways[pos] TO updatedValue MOD modulus  
                INCREMENT pos BY 1  
            END WHILE  
            INCREMENT idxCoin BY 1  
        END WHILE  
        DECLARE total TO 0  
        DECLARE counter TO 0  
        WHILE counter LESS THAN OR EQUAL TO 2 DO  
            DECLARE productVal TO counter TIMES 4  
            IF NOT (productVal GREATER THAN n) THEN  
                DECLARE tempSum TO total + ways[n - productVal]  
                ASSIGN total TO tempSum MOD modulus  
            END IF  
            INCREMENT counter BY 1  
        END WHILE  
        RETURN total  
    END FUNCTION  
END CLASS