CLASS Solution  
    FUNCTION canSortArray(nums)  
        FUNCTION count_set_bits(number)  
            DECLARE bit_count AS 0  
            DECLARE temp_num AS number  
            WHILE temp_num IS GREATER THAN zero  
                SET remainder TO temp_num MODULO 2  
                INCREMENT bit_count BY remainder  
                UPDATE temp_num TO temp_num DIVIDED BY 2 (integer division)  
            END WHILE  
            RETURN bit_count  
        END FUNCTION  
        
        DECLARE length_nums AS SIZE OF nums  
        DECLARE sorted_list AS A NEW LIST CONTAINING ALL ELEMENTS OF nums  
        CALL sort sorted_list IN NON-DECREASING ORDER  
        
        DECLARE index_outer AS zero  
        WHILE index_outer LESS THAN length_nums  
            DECLARE index_inner AS zero  
            WHILE index_inner LESS THAN (length_nums MINUS 1)  
                DECLARE bits_current AS count_set_bits(nums[index_inner])  
                DECLARE bits_next AS count_set_bits(nums[index_inner PLUS 1])  
                IF (bits_current EQUALS bits_next) THEN  
                    IF NOT (nums[index_inner] LESS THAN OR EQUAL TO nums[index_inner PLUS 1]) THEN  
                        DECLARE swap_holder AS nums[index_inner]  
                        ASSIGN nums[index_inner] TO nums[index_inner PLUS 1]  
                        ASSIGN nums[index_inner PLUS 1] TO swap_holder  
                    END IF  
                END IF  
                INCREMENT index_inner BY one  
            END WHILE  
            INCREMENT index_outer BY one  
        END WHILE  
        
        DECLARE is_equal AS true  
        DECLARE check_index AS zero  
        WHILE (check_index LESS THAN length_nums) AND is_equal  
            IF nums[check_index] NOT EQUAL TO sorted_list[check_index] THEN  
                SET is_equal TO false  
            END IF  
            INCREMENT check_index BY one  
        END WHILE  
        
        RETURN is_equal  
    END FUNCTION  
END CLASS