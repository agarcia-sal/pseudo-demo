```
CLASS Solution
    FUNCTION maxPathLength(coordinates, k)
      SET qp TO element at position 0 of element at position k of coordinates
      SET hr TO element at position 1 of element at position k of coordinates
      SET mbq TO list with no elements
      SET kjy TO 0
      WHILE kjy LESS THAN length of coordinates
          SET az TO element at position kjy of coordinates
          SET fzi TO element at position 0 of az
          SET shl TO element at position 1 of az
          IF ( (qp GREATER THAN fzi) EQUALS FALSE ) OR ( (hr GREATER THAN shl) EQUALS FALSE ) THEN
             ; do nothing
          ELSE
             APPEND tuple of fzi, shl TO mbq
          END IF
          SET kjy TO kjy PLUS 1
      END WHILE
      SET wpu TO list with no elements
      SET ez TO 0
      REPEAT
          IF ez GREATER THAN length of coordinates MINUS 1 THEN
             BREAK
          END IF
          SET nyn TO element at position ez of coordinates
          SET vs TO element at position 0 of nyn
          SET om AS element at position 1 of nyn
          IF NOT ((vs GREATER THAN qp) AND (om GREATER THAN hr)) THEN
             ; skip
          ELSE
             APPEND tuple of vs, om TO wpu
          END IF
          SET ez TO ez PLUS 1
      UNTIL FALSE
      RETURN 1 PLUS self CALLS _lengthOfLIS WITH mbq PLUS self CALLS _lengthOfLIS WITH wpu
    END FUNCTION

    FUNCTION _lengthOfLIS(coordinates)
        CALL _sortCoordsWithCustomComparator PASSING coordinates INTO coordinates
        SET vaa TO list without members
        SET asy TO 0
        WHILE asy LESS THAN length of coordinates
            SET apq TO element at position asy of coordinates
            SET __ UNUSED variable TO element at position 0 of apq
            SET kps TO element at position 1 of apq
            IF ( (length of vaa EQUALS 0) OR (kps GREATER THAN element at position (length of vaa MINUS 1) of vaa) ) EQUALS TRUE THEN
                APPEND kps TO vaa
            ELSE
                SET kgl TO _findPositionInTail(vaa, kps)
                SET element at position kgl of vaa TO kps
            END IF
            SET asy TO asy PLUS 1
        END WHILE
        RETURN length of vaa
    END FUNCTION

    FUNCTION _sortCoordsWithCustomComparator(listOfPairs)
        ; Perform a stable sort by first element ascending and second element descending
        ; Using insertion sort to rewrite sort logic explicitly
        SET i TO 1
        WHILE i LESS THAN length of listOfPairs
            SET keyPair TO element at position i of listOfPairs
            SET j TO i MINUS 1
            WHILE j GREATER THAN OR EQUAL TO 0
                SET leftPair TO element at position j of listOfPairs
                SET cond1 TO (element at position 0 of leftPair) GREATER THAN (element at position 0 of keyPair)
                SET cond2 TO ( (element at position 0 of leftPair) EQUALS (element at position 0 of keyPair) ) AND 
                            ( (element at position 1 of leftPair) LESS THAN (element at position 1 of keyPair) )
                IF NOT (cond1 OR cond2) THEN
                    BREAK
                END IF
                SET element at position (j PLUS 1) of listOfPairs TO leftPair
                SET j TO j MINUS 1
            END WHILE
            SET element at position (j PLUS 1) of listOfPairs TO keyPair
            SET i TO i PLUS 1
        END WHILE
        RETURN
    END FUNCTION

    FUNCTION _findPositionInTail(tailList, key)
        SET low TO 0
        SET high TO length of tailList MINUS 1
        WHILE low LESS THAN OR EQUAL TO high
            SET mid TO (low PLUS high) DIVIDED BY 2
            IF element at position mid of tailList GREATER THAN OR EQUAL TO key THEN
                SET high TO mid MINUS 1
            ELSE
                SET low TO mid PLUS 1
            END IF
        END WHILE
        RETURN low
    END FUNCTION
END CLASS
```