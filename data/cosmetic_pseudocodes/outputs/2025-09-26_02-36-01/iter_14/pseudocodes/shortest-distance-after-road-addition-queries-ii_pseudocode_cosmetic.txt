CLASS Solution  
    FUNCTION shortestDistanceAfterQueries(n, queries)  
      SET WtoFjsa TO empty map FROM integer TO list  
      FOR hipm FROM 0 TO n - 2  
        GET wklr = WtoFjsa[hipm] OR empty list  
        SET WtoFjsa[hipm] TO wklr APPENDED WITH (hipm + 1, 1)  
      END FOR  
      
      FUNCTION dijkstra()  
        SET mpldret TO list WITH n copies OF (1.0 / 0.0)  
        SET mpldret[0] TO 0  
        SET pqhkxrz TO list OF [(0, 0)]  
        
        FUNCTION heap_extract_min(heap)  
          SET min_idx TO 0  
          FOR idx FROM 1 TO LENGTH(heap) - 1  
            IF heap[idx][0] < heap[min_idx][0] THEN  
              SET min_idx TO idx  
            END IF  
          END FOR  
          SET min_elem TO heap[min_idx]  
          SET heap[min_idx] TO heap[LENGTH(heap) - 1]  
          REMOVE last element FROM heap  
          RETURN min_elem  
        END FUNCTION  
        
        WHILE LENGTH(pqhkxrz) > 0  
          SET (curDst, curNode) TO heap_extract_min(pqhkxrz)  
          IF mpldret[curNode] < curDst THEN  
            CONTINUE  
          END IF  
          
          FOR each (nbNode, nbWeight) IN WtoFjsa[curNode]  
            SET newCalcDist TO curDst + nbWeight  
            IF newCalcDist < mpldret[nbNode] THEN  
              SET mpldret[nbNode] TO newCalcDist  
              APPEND (newCalcDist, nbNode) TO pqhkxrz  
            END IF  
          END FOR  
        END WHILE  
        
        RETURN mpldret[n - 1]  
      END FUNCTION  
      
      SET ztyqvr TO empty list  
      FOR each (xmn, dyr) IN queries  
        GET tempList = WtoFjsa[xmn] OR empty list  
        SET WtoFjsa[xmn] TO tempList APPENDED WITH (dyr, 1)  
        APPEND dijkstra() TO ztyqvr  
      END FOR  
      
      RETURN ztyqvr  
    END FUNCTION  
END CLASS