```pseudocode
CLASS UnionFind
	FUNCTION __init__(self, size)
		SET L1 TO []
		SET L2 TO []
		SET I0 TO 0
		REPEAT UNTIL I0 GREATER THAN size MINUS 1
			APPEND I0 TO L1
			SET I0 TO I0 PLUS 1
		END REPEAT
		SET self.parent TO L1
		SET I1 TO 0
		REPEAT UNTIL I1 GREATER THAN size MINUS 1
			APPEND 0 TO L2
			SET I1 TO I1 PLUS 1
		END REPEAT
		SET self.rank TO L2
	END FUNCTION

	FUNCTION find(self, u)
		IF NOT self.parent[u] EQUALS u THEN
			SET self.parent[u] TO self.find(self.parent[u])
		END IF
		RETURN self.parent[u]
	END FUNCTION

	FUNCTION union(self, u, v)
		SET A1 TO self.find(u)
		SET A2 TO self.find(v)
		IF NOT A1 EQUALS A2 THEN
			IF self.rank[A1] GREATER THAN self.rank[A2] THEN
				SET self.parent[A2] TO A1
			ELSE
				IF self.rank[A1] LESS THAN self.rank[A2] THEN
					SET self.parent[A1] TO A2
				ELSE
					SET self.parent[A2] TO A1
					SET self.rank[A1] TO self.rank[A1] PLUS 1
				END IF
			END IF
		END IF
	END FUNCTION
END CLASS

CLASS Solution
	FUNCTION maximizeSumOfWeights(self, edges, k)
		SET X0 TO edges
		SET X1 TO k
		SET X2 TO LENGTH(X0) PLUS 1
		SET D0 TO []
		SET J0 TO 0
		REPEAT UNTIL J0 GREATER THAN X2 MINUS 1
			APPEND 0 TO D0
			SET J0 TO J0 PLUS 1
		END REPEAT
		SET UF0 TO NEW UnionFind(X2)

		PROCEDURE comp_descending(Z0, Z1)
			RETURN Z1[2] MINUS Z0[2]
		END PROCEDURE

		CALL SORT with arguments X0, comp_descending

		SET S0 TO 0
		SET IDX0 TO 0
		REPEAT WHILE IDX0 LESS THAN LENGTH(X0)
			SET E0 TO X0[IDX0]
			SET N0 TO E0[0]
			SET N1 TO E0[1]
			SET N2 TO E0[2]
			IF NOT (D0[N0] GREATER OR EQUAL TO X1) AND NOT (D0[N1] GREATER OR EQUAL TO X1) THEN
				IF NOT UF0.find(N0) EQUALS UF0.find(N1) THEN
					CALL UF0.union(N0, N1)
					SET D0[N0] TO D0[N0] PLUS 1
					SET D0[N1] TO D0[N1] PLUS 1
					SET S0 TO S0 PLUS N2
				END IF
			END IF
			SET IDX0 TO IDX0 PLUS 1
		END REPEAT

		SET R0 TO S0
		RETURN R0
	END FUNCTION
END CLASS
```