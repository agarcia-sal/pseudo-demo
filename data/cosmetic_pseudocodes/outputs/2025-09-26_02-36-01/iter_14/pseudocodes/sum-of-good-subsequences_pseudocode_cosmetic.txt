```
CLASS Solution
    FUNCTION sumOfGoodSubsequences(nums)
        CONSTANT M ← 1000 * 1000 * 1000 + 7
        ASSIGN alpha TO empty map defaulting 0
        ASSIGN beta TO empty map defaulting 0

        INDEX i ← 0
        REPEAT
            IF i >= LENGTH(nums) THEN
                BREAK
            END IF
            VARIABLE curr ← nums[i]

            beta[curr] ← beta[curr] + 1
            alpha[curr] ← alpha[curr] + curr

            alpha[curr] ← ( alpha[curr]
                + alpha[curr - 1]
                + beta[curr - 1] * curr ) MOD M
            beta[curr] ← ( beta[curr] + beta[curr - 1] ) MOD M

            alpha[curr] ← ( alpha[curr]
                + alpha[curr + 1]
                + beta[curr + 1] * curr ) MOD M
            beta[curr] ← ( beta[curr] + beta[curr + 1] ) MOD M

            i ← i + 1
        UNTIL FALSE

        VARIABLE aggregate ← 0
        FOR EACH element IN alpha VALUES
            aggregate ← aggregate + element
        END FOR

        VARIABLE output ← aggregate MOD M
        RETURN output
    END FUNCTION
END CLASS
```