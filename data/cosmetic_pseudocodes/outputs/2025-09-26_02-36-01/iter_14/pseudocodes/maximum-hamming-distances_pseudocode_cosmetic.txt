CLASS Solution
    FUNCTION maxHammingDistances(nums LIST OF INTEGER m INTEGER) RETURNS LIST OF INTEGER
        SET eta TO []
        
        FUNCTION toBinaryString(val INTEGER length INTEGER) RETURNS STRING
            SET acc TO ""
            SET k TO 0
            WHILE k < length DO
                SET bitval TO (val DIV (2 ^ (length - 1 - k))) MOD 2
                SET acc TO acc + (IF bitval = 1 THEN "1" ELSE "0" END IF)
                SET k TO k + 1
            END WHILE
            RETURN acc
        END FUNCTION

        SET xi TO 0
        WHILE xi < LENGTH(nums) DO
            SET zed TO toBinaryString(nums[xi], m)
            INSERT zed INTO eta AT END
            SET xi TO xi + 1
        END WHILE
        
        SET psi TO []

        FUNCTION distHamming(a STRING b STRING) RETURNS INTEGER
            SET diffCount TO 0
            SET pos TO 0
            WHILE pos < LENGTH(a) DO
                IF NOT (a[pos] = b[pos]) THEN
                    SET diffCount TO diffCount + 1
                END IF
                SET pos TO pos + 1
            END WHILE
            RETURN diffCount
        END FUNCTION
        
        SET oup TO 0
        REPEAT
            IF oup >= LENGTH(nums) THEN BREAK END IF
            SET mx TO 0
            SET dup TO 0
            REPEAT
                IF dup >= LENGTH(nums) THEN BREAK END IF
                IF NOT (dup = oup) THEN
                    SET d TO distHamming(eta[oup], eta[dup])
                    IF d > mx THEN
                        SET mx TO d
                    END IF
                END IF
                SET dup TO dup + 1
            UNTIL FALSE
            INSERT mx INTO psi AT END
            SET oup TO oup + 1
        UNTIL FALSE

        RETURN psi
    END FUNCTION
END CLASS