CLASS Solution  
    FUNCTION maxOperations(nums)  
        
        FUNCTION probe(x, y, z, cache)  
            
            IF x GREATER THAN OR EQUAL TO y THEN  
                RETURN 0  
            END IF  
            
            KEY := (x, y, z)  
            IF KEY EXISTS IN cache THEN  
                RETURN cache[KEY]  
            END IF  
            
            greatest := 0  
            
            IF (nums[x] + nums[x + 1]) EQUALS z THEN  
                candidate := 1 + probe(x + 2, y, z, cache)  
                IF candidate GREATER THAN greatest THEN  
                    greatest := candidate  
                END IF  
            END IF  
            
            IF (nums[y] + nums[y - 1]) EQUALS z THEN  
                candidate := 1 + probe(x, y - 2, z, cache)  
                IF candidate GREATER THAN greatest THEN  
                    greatest := candidate  
                END IF  
            END IF  
            
            IF (nums[x] + nums[y]) EQUALS z THEN  
                candidate := 1 + probe(x + 1, y - 1, z, cache)  
                IF candidate GREATER THAN greatest THEN  
                    greatest := candidate  
                END IF  
            END IF  
            
            cache[KEY] := greatest  
            RETURN greatest  
            
        END FUNCTION  
        
        result1 := 1 + probe(2, LENGTH(nums) - 1, nums[0] + nums[1], { })  
        result2 := 1 + probe(0, LENGTH(nums) - 3, nums[LENGTH(nums) - 2] + nums[LENGTH(nums) - 1], { })  
        result3 := 1 + probe(1, LENGTH(nums) - 2, nums[0] + nums[LENGTH(nums) - 1], { })  
        
        RETURN MAXIMUM(result1, result2, result3)  
        
    END FUNCTION  
END CLASS