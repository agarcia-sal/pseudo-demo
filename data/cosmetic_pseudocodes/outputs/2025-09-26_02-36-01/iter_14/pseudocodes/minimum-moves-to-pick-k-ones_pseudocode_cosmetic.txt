CLASS Solution
    FUNCTION minimumMoves(nums LIST OF INTEGERS k INTEGER maxChanges INTEGER) RETURNS INTEGER
        SET beta TO an empty list
        
        SET gamma TO 0
        WHILE gamma LESS THAN LENGTH OF nums
            IF nums[gamma] EQUALS 1 THEN
                APPEND gamma TO beta
            END IF
            INCREMENT gamma BY 1
        END WHILE

        IF LENGTH OF beta EQUALS 0 THEN
            RETURN k * 2
        END IF

        SET omega TO LENGTH OF beta
        SET sigma TO a list initialized with zeros, size omega + 1
        
        SET delta TO 0
        LOOP
            IF delta GREATER THAN OR EQUAL TO omega THEN
                EXIT LOOP
            END IF
            sigma[delta + 1] = sigma[delta] + beta[delta]
            INCREMENT delta BY 1
        END LOOP
        
        FUNCTION cost(start INTEGER end INTEGER) RETURNS INTEGER
            SET mu TO (start + end) DIVIDED BY 2
            SET pi TO beta[mu]
            SET lambda TO 0
            SET epsilon TO start
            WHILE epsilon LESS THAN mu
                SET lambda TO lambda + (pi - beta[epsilon] - (mu - epsilon))
                INCREMENT epsilon BY 1
            END WHILE

            SET zeta TO mu + 1
            REPEAT
                IF zeta GREATER THAN end THEN
                    EXIT REPEAT
                END IF
                SET lambda TO lambda + (beta[zeta] - pi - (zeta - mu))
                INCREMENT zeta BY 1
            UNTIL FALSE

            RETURN lambda
        END FUNCTION

        SET theta TO +âˆž

        SET alpha TO 0
        WHILE alpha LESS THAN OR EQUAL TO omega - k
            SET psi TO alpha + k - 1
            SET rho TO cost(alpha, psi)

            IF k MODULO 2 EQUALS 1 THEN
                SET mu TO (alpha + psi) DIVIDED BY 2
                SET pi TO beta[mu]
                SET xi TO psi - mu - (pi - beta[mu] - 1)
            ELSE
                SET left_mu TO (alpha + psi) DIVIDED BY 2
                SET right_mu TO left_mu + 1
                SET left_pi TO beta[left_mu]
                SET right_pi TO beta[right_mu]
                SET xi TO right_mu - left_mu - 1 - (right_pi - left_pi - 1)
            END IF

            IF xi GREATER THAN maxChanges THEN
                SET rho TO rho + (xi - maxChanges)
            END IF

            IF rho LESS THAN theta THEN
                SET theta TO rho
            END IF

            INCREMENT alpha BY 1
        END WHILE

        RETURN theta
    END FUNCTION
END CLASS