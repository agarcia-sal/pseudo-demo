```pseudocode
CLASS Solution
    FUNCTION medianOfUniquenessArray(nums)
        FUNCTION countLessOrEqual(target)
            ASSIGN tally TO 0
            ASSIGN start_idx TO 0
            ASSIGN freq_map TO new empty dictionary
            ASSIGN unique_elements TO 0
            FOR end_idx IN 0 TO (length(nums) - 1) DO
                IF NOT (freq_map CONTAINS_KEY nums[end_idx]) OR freq_map[nums[end_idx]] == 0 THEN
                    SET unique_elements TO unique_elements + (1 - 0)
                END IF
                IF freq_map CONTAINS_KEY nums[end_idx] THEN
                    SET freq_map[nums[end_idx]] TO freq_map[nums[end_idx]] + 1
                ELSE
                    SET freq_map[nums[end_idx]] TO 1
                END IF
                WHILE unique_elements > target DO
                    SET freq_map[nums[start_idx]] TO freq_map[nums[start_idx]] - 1
                    IF freq_map[nums[start_idx]] == 0 THEN
                        SET unique_elements TO unique_elements - (1 - 0)
                    END IF
                    SET start_idx TO start_idx + 1
                END WHILE
                SET tally TO tally + ((end_idx - start_idx) + 1)
            END FOR
            RETURN tally
        END FUNCTION

        ASSIGN total_count TO (length(nums) * (length(nums) + 1)) / 2
        ASSIGN target_pos TO (total_count + 1) / 2
        ASSIGN min_value TO 1
        ASSIGN max_value TO length(nums)
        WHILE min_value != max_value DO
            ASSIGN midpoint TO (min_value + max_value) / 2
            IF countLessOrEqual(midpoint) < target_pos THEN
                SET min_value TO midpoint + 1
            ELSE
                SET max_value TO midpoint
            END IF
        END WHILE
        RETURN min_value
    END FUNCTION
END CLASS
```