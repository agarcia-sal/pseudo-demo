CLASS TreeNode  
    FUNCTION __init__(self COMMA val EQUALS zero COMMA left EQUALS None COMMA right EQUALS None)  
      BEGIN  
        LET alpha BE val  
        LET bravo BE left  
        LET charlie BE right  
        ASSIGN self.val TO alpha  
        ASSIGN self.left TO bravo  
        ASSIGN self.right TO charlie  
      END  
    END FUNCTION  
END CLASS  

FUNCTION tree_node(values)  
  BEGIN  
    IF NOT (values EQUALS empty) THEN  
      LET delta BE new TreeNode with value equal to element at position one of values  
      LET epsilon BE one  
      LET foxtrot BE new deque  
      INSERT delta AT the back of foxtrot  
      WHILE foxtrot NOT EQUALS empty DO  
        LET golf BE element removed from the front of foxtrot  
        IF (epsilon LESS THAN the length of values) AND NOT (element at position epsilon of values EQUALS None) THEN  
          ASSIGN golf.left TO new TreeNode with value equal to element at position epsilon of values  
          INSERT golf.left AT the back of foxtrot  
        END IF  
        LET epsilon BE epsilon PLUS one  
        IF (epsilon LESS THAN the length of values) AND NOT (element at position epsilon of values EQUALS None) THEN  
          ASSIGN golf.right TO new TreeNode with value equal to element at position epsilon of values  
          INSERT golf.right AT the back of foxtrot  
        END IF  
        LET epsilon BE epsilon PLUS one  
      END WHILE  
      RETURN delta  
    ELSE  
      RETURN None  
    END IF  
  END  
END FUNCTION  

FUNCTION is_same_tree(p COMMA q)  
  BEGIN  
    LET ht_j_1 BE false  
    IF NOT (p EQUALS None) THEN  
      LET ht_j_1 BE true  
    END IF  
    LET ht_j_2 BE false  
    IF NOT (q EQUALS None) THEN  
      LET ht_j_2 BE true  
    END IF  
    IF NOT (ht_j_1 OR ht_j_2) THEN  
      RETURN True  
    ELSE IF ht_j_1 XOR ht_j_2 THEN  
      RETURN False  
    ELSE IF NOT (p.val EQUALS q.val) THEN  
      RETURN False  
    ELSE  
      RETURN is_same_tree(p.left COMMA q.left) AND is_same_tree(p.right COMMA q.right)  
    END IF  
  END  
END FUNCTION  

CLASS Solution  
    FUNCTION minimumLevel(self COMMA root)  
      BEGIN  
        IF NOT (root EQUALS None) THEN  
          LET india_j_1 BE new deque  
          INSERT root AT the back of india_j_1  
          LET juliet_j_2 BE one  
          LET kilo_j_3 BE positive infinity  
          LET lima_j_4 BE one  
          WHILE NOT (india_j_1 EQUALS empty) DO  
            LET mike_j_5 BE zero  
            LET november_j_6 BE one  
            LET oscar_j_7 BE length of india_j_1  
            WHILE (november_j_6 LESS THAN OR EQUAL TO oscar_j_7) DO  
              LET papa_j_8 BE element removed from the front of india_j_1  
              LET mike_j_5 BE mike_j_5 PLUS papa_j_8.val  
              IF NOT (papa_j_8.left EQUALS None) THEN  
                INSERT papa_j_8.left AT the back of india_j_1  
              END IF  
              IF NOT (papa_j_8.right EQUALS None) THEN  
                INSERT papa_j_8.right AT the back of india_j_1  
              END IF  
              LET november_j_6 BE november_j_6 PLUS one  
            END WHILE  
            IF mike_j_5 LESS THAN kilo_j_3 THEN  
              LET kilo_j_3 BE mike_j_5  
              LET juliet_j_2 BE lima_j_4  
            END IF  
            LET lima_j_4 BE lima_j_4 PLUS one  
          END WHILE  
          RETURN juliet_j_2  
        ELSE  
          RETURN zero  
        END IF  
      END  
    END FUNCTION  
END CLASS