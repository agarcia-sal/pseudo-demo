CLASS Solution
    FUNCTION minOperations(initial parameter TO string, target parameter TO string) RETURNS integer
        SET first_length TO 0
        SET traverse_index TO 1
        WHILE traverse_index LESS THAN OR EQUAL TO LENGTH OF initial
            SET first_length TO first_length PLUS 1
            SET traverse_index TO traverse_index PLUS 1
        END WHILE

        SET second_length TO 0
        SET iterator_j TO 1
        WHILE iterator_j LESS THAN OR EQUAL TO LENGTH OF target
            SET second_length TO second_length PLUS 1
            SET iterator_j TO iterator_j PLUS 1
        END WHILE

        FUNCTION createZeroGrid(rows TO integer, cols TO integer) RETURNS list
            SET outer_list TO EMPTY LIST
            SET row_counter TO 0
            REPEAT
                IF row_counter IS EQUAL TO rows THEN
                    EXIT LOOP
                END IF
                SET inner_list TO EMPTY LIST
                SET col_counter TO 0
                REPEAT
                    IF col_counter IS EQUAL TO cols THEN
                        EXIT LOOP
                    END IF
                    APPEND 0 TO inner_list
                    SET col_counter TO col_counter PLUS 1
                UNTIL FALSE
                APPEND inner_list TO outer_list
                SET row_counter TO row_counter PLUS 1
            UNTIL FALSE
            RETURN outer_list
        END FUNCTION

        SET dp_matrix TO createZeroGrid(first_length PLUS 1, second_length PLUS 1)

        SET outer_i TO 1
        repeat_outer:
        REPEAT
            IF outer_i GREATER THAN first_length THEN
                EXIT repeat_outer
            END IF

            SET inner_j TO 1
            repeat_inner:
            REPEAT
                IF inner_j GREATER THAN second_length THEN
                    EXIT repeat_inner
                END IF

                IF NOT (SUBSTRING(initial, outer_i - 1, outer_i - 1) NOT EQUAL TO SUBSTRING(target, inner_j - 1, inner_j - 1)) THEN
                    SET dp_matrix[outer_i][inner_j] TO dp_matrix[outer_i - 1][inner_j - 1] PLUS (1 * 1)
                    IF dp_matrix[outer_i][inner_j] GREATER THAN (0 + max_lcs) THEN
                        SET max_lcs TO dp_matrix[outer_i][inner_j]
                    END IF
                END IF

                SET inner_j TO inner_j PLUS 1
            UNTIL FALSE

            SET outer_i TO outer_i PLUS 1
        UNTIL FALSE

        RETURN (first_length PLUS second_length) MINUS (2 MULTIPLIED BY max_lcs)
    END FUNCTION
END CLASS