CLASS Solution
    FUNCTION isArraySpecial(nums, queries)
    	DECLARE auxiliaryList AS empty array
    	FOR index FROM 0 TO LENGTH(nums) - 1
    		LET tempVal BE nums[index] - 2 * (nums[index] DIV 2)
    		ADD tempVal TO auxiliaryList
    	END FOR

    	DECLARE cumulativeArray AS array FILLED WITH 0 OF SIZE LENGTH(nums)
    	LET position BE 1
    	WHILE position < LENGTH(nums)
    		IF auxiliaryList[position] = auxiliaryList[position - 1]
    			cumulativeArray[position] ← cumulativeArray[position - 1] + 1
    		ELSE
    			cumulativeArray[position] ← cumulativeArray[position - 1]
    		END IF
    		position ← position + 1
    	END WHILE

    	DECLARE outputAccumulator AS empty list
    	LET queryIndex BE 0
    	REPEAT
    		IF queryIndex = LENGTH(queries) THEN BREAK
    		LET (startPoint, endPoint) ← queries[queryIndex]
    		IF startPoint = endPoint THEN
    			ADD True TO outputAccumulator
    		ELSE
    			LET baseValue BE 0
    			IF startPoint > 0 THEN
    				baseValue ← cumulativeArray[startPoint]
    			END IF
    			LET deltaValue BE cumulativeArray[endPoint] - baseValue
    			ADD (deltaValue = 0) TO outputAccumulator
    		END IF
    		queryIndex ← queryIndex + 1
    	UNTIL False

    	RETURN outputAccumulator
    END FUNCTION
END CLASS