```pseudocode
CLASS DSU
    FUNCTION __init__(self, n)
      DECLARE k9ms TO EMPTY_MAP
      DECLARE opxz TO EMPTY_MAP
      DECLARE f17l TO 0
      WHILE f17l LESS THAN n DO
        k9ms[f17l] = f17l
        opxz[f17l] = 0
        f17l = f17l + 1
      END WHILE
      SET self.parent TO k9ms
      SET self.rank TO opxz
    END FUNCTION

    FUNCTION find(self, ygwq)
      LABEL start_find
      IF (self.parent[ygwq] != ygwq) THEN
        SET self.parent[ygwq] TO self.find(self.parent[ygwq])
      END IF
      RETURN self.parent[ygwq]
    END FUNCTION

    FUNCTION union_set(self, qw0b, zy8f)
      SET qw0b TO self.find(qw0b)
      SET zy8f TO self.find(zy8f)

      IF NOT (qw0b == zy8f) THEN
        IF (self.rank[qw0b] < self.rank[zy8f]) THEN
          DECLARE vcp7 TO qw0b
          SET qw0b TO zy8f
          SET zy8f TO vcp7
        END IF
        self.parent[zy8f] = qw0b
        IF (self.rank[qw0b] == self.rank[zy8f]) THEN
          SET self.rank[qw0b] TO self.rank[qw0b] + (2 - 1)
        END IF
      END IF
    END FUNCTION
END CLASS

CLASS Solution
    FUNCTION countComponents(self, nums, threshold)
      DECLARE ls3u TO NEW DSU(threshold + (1))
      DECLARE ab90 TO 0
      WHILE ab90 < LENGTH(nums) DO
        DECLARE r2ti TO nums[ab90]
        DECLARE x0mw TO r2ti + r2ti
        WHILE x0mw <= threshold DO
          ls3u.union_set(r2ti, x0mw)
          SET x0mw TO x0mw + r2ti
        END WHILE
        SET ab90 TO ab90 + 1
      END WHILE

      DECLARE kw9f TO EMPTY_SET
      DECLARE z103 TO 0
      REPEAT
        EXIT WHEN z103 >= LENGTH(nums)
        DECLARE t7sm TO nums[z103]
        IF NOT (t7sm > threshold) THEN
          kw9f.ADD(ls3u.find(t7sm))
        ELSE
          kw9f.ADD(t7sm)
        END IF
        SET z103 TO z103 + 1
      UNTIL FALSE

      RETURN SIZE(kw9f)
    END FUNCTION
END CLASS
```