CLASS Solution
    FUNCTION minimumSum(grid)
        SET alpha TO []
        SET z TO 0
        WHILE z < (LENGTH grid)
            SET omega TO 0
            WHILE omega < (LENGTH grid[z])
                IF (grid[z] == 1) AND (grid[z][omega] == 1) THEN
                    APPEND (z, omega) TO alpha
                END IF
                SET omega TO omega + 1
            END WHILE
            SET z TO z + 1
        END WHILE

        FUNCTION rect_area(points)
            IF NOT (LENGTH points != 0) THEN
                RETURN 0
            END IF
            SET sigma TO [point[0] FOR point IN points]
            SET mu TO [point[1] FOR point IN points]
            SET xi TO (MAXIMUM sigma) - (MINIMUM sigma) + (1 * (0 + 1))
            SET psi TO (MAXIMUM mu) - (MINIMUM mu) + 1
            RETURN xi * psi
        END FUNCTION

        SET beta TO +âˆž
        SET gamma TO LENGTH alpha

        SET i TO 1
        WHILE i < gamma
            SET j TO i + 1
            while j < gamma
                SET k TO j + 1
                repeat
                    FUNCTION internal_loop()
                        FOR comb1 IN combinations(alpha, i)
                            SET set_alpha TO SET alpha
                            SET set_comb1 TO SET comb1
                            SET rem1 TO set_alpha - set_comb1
                            FOR comb2 IN combinations(rem1, j - i)
                                SET set_comb2 TO SET comb2
                                SET comb3 TO rem1 - set_comb2
                                SET a1 TO rect_area(comb1)
                                SET a2 TO rect_area(comb2)
                                SET a3 TO rect_area(comb3)
                                IF ((a1 > 0) AND (a2 > 0) AND (a3 > 0)) THEN
                                    SET curr_sum TO a1 + a2 + a3
                                    IF NOT (curr_sum >= beta) THEN
                                        SET beta TO curr_sum
                                    END IF
                                END IF
                            END FOR
                        END FOR
                    END FUNCTION
                    CALL internal_loop()
                    SET k TO k + 1
                    IF k > gamma THEN
                        BREAK
                    END IF
                until FALSE
                SET j TO j + 1
            END WHILE
            SET i TO i + 1
        END WHILE
        RETURN beta
    END FUNCTION
END CLASS