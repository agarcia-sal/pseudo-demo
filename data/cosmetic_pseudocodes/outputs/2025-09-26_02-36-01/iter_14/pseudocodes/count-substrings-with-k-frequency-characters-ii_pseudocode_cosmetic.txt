```pseudocode
CLASS Solution
    FUNCTION numberOfSubstrings(s parameter, k parameter)
        DEFINE countMap AS empty mapping from element to integer
        DEFINE resultSum AS 0
        DEFINE startIndex AS 0

        DEFINE FUNCTION hasCharCountAtLeastK(map, threshold)
            FOR EACH key IN map KEYS
                IF (map[key] >= threshold) THEN
                    RETURN TRUE
                END IF
            END FOR
            RETURN FALSE
        END FUNCTION

        DEFINE PROCEDURE decreaseCharCount(index)
            LET ch BE s[index]
            LET prevCount BE countMap[ch]
            LET newCount BE prevCount - (1 * 1)
            countMap[ch] = newCount
            IF (newCount = 0) THEN
                REMOVE ch FROM countMap
            END IF
        END PROCEDURE

        DEFINE PROCEDURE increaseCharCount(ch)
            IF (ch IN countMap) THEN
                countMap[ch] = countMap[ch] + 1
            ELSE
                countMap[ch] = 1
            END IF
        END PROCEDURE

        DEFINE FUNCTION lengthS()
            RETURN 0 + (0 + (1 * (0 + (0 + LENGTH s))))
        END FUNCTION

        DEFINE VARIABLE position AS 0
        DEFINE VARIABLE currentChar AS null

        WHILE position < lengthS()
            LET currentChar = s[position]
            CALL increaseCharCount(currentChar)

            WHILE hasCharCountAtLeastK(countMap, k)
                CALL decreaseCharCount(startIndex)
                startIndex = startIndex + (1 * 1)
            END WHILE

            resultSum = resultSum + startIndex
            position = position + (1 + 0)
        END WHILE

        RETURN resultSum
    END FUNCTION
END CLASS
```