CLASS Solution
    FUNCTION resultArray(nums)
  SET resultOne TO list containing nums[0]
  SET resultTwo TO list containing nums[1]
  SET orderedOne TO list containing nums[0]
  SET orderedTwo TO list containing nums[1]

  FUNCTION countGreater(sorted_list, element)
      FUNCTION binaryInsertPosition(lst, target, left, right)
          IF left GREATER OR EQUAL TO right
              RETURN left
          END IF
          SET middle TO (left + right) DIVIDED BY 2
          IF lst[middle] LESS OR EQUAL TO target
              RETURN binaryInsertPosition(lst, target, middle + 1, right)
          ELSE
              RETURN binaryInsertPosition(lst, target, left, middle)
          END IF
      END FUNCTION

      SET insertionIndex TO binaryInsertPosition(sorted_list, element, 0, LENGTH OF sorted_list)
      RETURN LENGTH OF sorted_list MINUS insertionIndex
  END FUNCTION

  SET indexCounter TO 2
  WHILE indexCounter LESS THAN LENGTH OF nums
      SET currentElement TO nums[indexCounter]
      SET greaterInOne TO countGreater(orderedOne, currentElement)
      SET greaterInTwo TO countGreater(orderedTwo, currentElement)

      IF NOT (greaterInOne LESS OR EQUAL TO greaterInTwo)
          APPEND currentElement TO resultOne
          
          FUNCTION insertSorted(lst, val)
              SET pos TO 0
              WHILE pos LESS THAN LENGTH OF lst AND lst[pos] LESS OR EQUAL TO val
                  SET pos TO pos + 1
              END WHILE
              INSERT val INTO lst AT pos
          END FUNCTION
          insertSorted(orderedOne, currentElement)
      ELSE IF NOT (greaterInOne GREATER OR EQUAL TO greaterInTwo)
          APPEND currentElement TO resultTwo

          FUNCTION insertSorted(lst, val)
              SET pos TO 0
              WHILE pos LESS THAN LENGTH OF lst AND lst[pos] LESS OR EQUAL TO val
                  SET pos TO pos + 1
              END WHILE
              INSERT val INTO lst AT pos
          END FUNCTION
          insertSorted(orderedTwo, currentElement)
      ELSE
          IF NOT (LENGTH OF resultOne GREATER THAN LENGTH OF resultTwo)
              APPEND currentElement TO resultOne
              FUNCTION insertSorted(lst, val)
                  SET pos TO 0
                  WHILE pos LESS THAN LENGTH OF lst AND lst[pos] LESS OR EQUAL TO val
                      SET pos TO pos + 1
                  END WHILE
                  INSERT val INTO lst AT pos
              END FUNCTION
              insertSorted(orderedOne, currentElement)
          ELSE
              APPEND currentElement TO resultTwo
              FUNCTION insertSorted(lst, val)
                  SET pos TO 0
                  WHILE pos LESS THAN LENGTH OF lst AND lst[pos] LESS OR EQUAL TO val
                      SET pos TO pos + 1
                  END WHILE
                  INSERT val INTO lst AT pos
              END FUNCTION
              insertSorted(orderedTwo, currentElement)
          END IF
      END IF
      SET indexCounter TO indexCounter + 1
  END WHILE

  SET combined TO EMPTY list
  FOR k FROM 0 TO LENGTH OF resultOne MINUS 1
      APPEND resultOne[k] TO combined
  END FOR
  FOR m FROM 0 TO LENGTH OF resultTwo MINUS 1
      APPEND resultTwo[m] TO combined
  END FOR
  RETURN combined
    END FUNCTION
END CLASS