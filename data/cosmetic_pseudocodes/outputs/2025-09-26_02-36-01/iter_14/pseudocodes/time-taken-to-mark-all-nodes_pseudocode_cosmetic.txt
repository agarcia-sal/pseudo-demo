CLASS Solution  
    FUNCTION timeTaken(edges)  
        SET totalVertices TO (LENGTH OF edges) PLUS 1  
        SET adjacencyMap TO construct_adjacency_list(edges)  
        
        FUNCTION bfs(startNode)  
            SET deq TO a double-ended queue containing (startNode, 0)  
            SET visitedFlags TO a list of totalVertices elements ALL False  
            SET visitedFlags[startNode] TO True  
            SET currentMax TO 0  
            
            WHILE LENGTH OF deq IS GREATER THAN 0  
                SET (nodeVal, elapsed) TO REMOVE FIRST ELEMENT FROM deq  
                
                IF currentMax LESS THAN elapsed THEN  
                    SET currentMax TO elapsed  
                END IF  
                
                FOR each adjacentNode IN adjacencyMap[nodeVal]  
                    IF NOT visitedFlags[adjacentNode] THEN  
                        SET visitedFlags[adjacentNode] TO True  
                        
                        IF (adjacentNode MOD 2) EQUALS 0 THEN  
                            APPEND (adjacentNode, elapsed + 2) TO deq  
                        ELSE  
                            APPEND (adjacentNode, elapsed + 1) TO deq  
                        END IF  
                    END IF  
                END FOR  
            END WHILE  
            
            RETURN currentMax  
        END FUNCTION  
        
        SET resultTimes TO a list WITH totalVertices elements ALL 0  
        SET idx TO 0  
        WHILE idx LESS THAN totalVertices  
            SET resultTimes[idx] TO bfs(idx)  
            INCREMENT idx BY 1  
        END WHILE  
        
        RETURN resultTimes  
    END FUNCTION  
END CLASS