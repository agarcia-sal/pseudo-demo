```  
CLASS Solution  
    FUNCTION largestSquareArea(bottomLeft, topRight)  
        FUNCTION intersecting_square_area(bl1, tr1, bl2, tr2)  
            FUNCTION maximum(a, b)  
                IF a GREATER THAN b THEN RETURN a ELSE RETURN b  
            END FUNCTION  

            FUNCTION minimum(a, b)  
                IF a LESS THAN b THEN RETURN a ELSE RETURN b  
            END FUNCTION  

            SET x_left TO maximum(bl1[0], bl2[0])  
            SET x_right TO minimum(tr1[0], tr2[0])  
            SET y_bottom TO maximum(bl1[1], bl2[1])  
            SET y_top TO minimum(tr1[1], tr2[1])  

            IF NOT (x_left LESS THAN x_right) OR (y_bottom GREATER THAN OR EQUAL TO y_top) THEN  
                RETURN 0  
            END IF  

            SET length_side TO minimum((x_right - x_left), (y_top - y_bottom))  
            RETURN length_side * length_side  
        END FUNCTION  

        SET highest_area TO 0  
        SET amount TO LENGTH(bottomLeft)  
        
        FUNCTION loop_outer(idx_outer)  
            IF idx_outer GREATER THAN OR EQUAL TO amount THEN RETURN END IF  
            FUNCTION loop_inner(idx_inner, current_max)  
                IF idx_inner GREATER THAN OR EQUAL TO amount THEN RETURN current_max END IF  
                SET area_calc TO intersecting_square_area(bottomLeft[idx_outer], topRight[idx_outer], bottomLeft[idx_inner], topRight[idx_inner])  
                SET updated_max TO area_calc  
                IF current_max GREATER THAN area_calc THEN SET updated_max TO current_max END IF  
                RETURN loop_inner(idx_inner + 1, updated_max)  
            END FUNCTION  
            SET inter_max TO loop_inner(idx_outer + 1, highest_area)  
            IF inter_max GREATER THAN highest_area THEN SET highest_area TO inter_max END IF  
            RETURN loop_outer(idx_outer + 1)  
        END FUNCTION  

        loop_outer(0)  
        RETURN highest_area  
    END FUNCTION  
END CLASS  
```