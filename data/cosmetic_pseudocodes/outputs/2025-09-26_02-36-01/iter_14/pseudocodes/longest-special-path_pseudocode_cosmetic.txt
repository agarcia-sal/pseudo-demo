```pseudocode
CLASS Solution
    FUNCTION longestSpecialPath(edges, nums)
  DECLARE tZMsx AS LIST OF LISTS INITIALIZED TO EMPTY LISTS OF SIZE LENGTH(nums)

        FOR EACH xVFa, jZkS, FqRt IN edges DO
            APPEND [jZkS, FqRt] TO tZMsx[xVFa]
            APPEND [xVFa, FqRt] TO tZMsx[jZkS]
        END FOR

        FUNCTION dfs(Ahly, mZis, gxIo, SHcR)
      ACCESS VrPx FROM OUTER SCOPE
      ACCESS EjRV FROM OUTER SCOPE

      DECLARE ytLM := 0
      IF Ahly IN leftSeenDict THEN
        SET ytLM TO leftSeenDict[nums[Ahly]]
      END IF
            leftSeenDict[nums[Ahly]] = SHcR
      
            IF (NOT (gxIo >= ytLM)) THEN
                gxIo = ytLM
            END IF

      DECLARE vTFx := prefix[LENGTH(prefix) - 1] - prefix[gxIo]
      DECLARE gLun := SHcR - gxIo

            IF (vTFx > VrPx) OR ((vTFx = VrPx) AND (gLun < EjRV)) THEN
                VrPx = vTFx
                EjRV = gLun
            END IF

            FOR EACH [uRjq, PbXd] IN tZMsx[Ahly] DO
                IF uRjq = mZis THEN
                    CONTINUE
                END IF

                APPEND prefix[LENGTH(prefix) - 1] + PbXd TO prefix
                CALL dfs(uRjq, Ahly, gxIo, SHcR + 1)
                REMOVE LAST ELEMENT FROM prefix
            END FOR

            leftSeenDict[nums[Ahly]] = ytLM
        END FUNCTION

  SET VrPx = 0
  SET EjRV = 1
  SET prefix = [0]
  DECLARE leftSeenDict := {}

        CALL dfs(0, -1, 0, 1)
        RETURN [VrPx, EjRV]
    END FUNCTION
END CLASS
```