```
CLASS Solution
    FUNCTION minMoves(rooks)
        SET total_rooks TO 0
        SET sorted_by_row TO Empty List
        SET sorted_by_col TO Empty List
        SET row_counter TO 0
        SET col_counter TO 0

        WHILE total_rooks < LENGTH(rooks)
            APPEND rooks[total_rooks] TO sorted_by_row
            SET total_rooks TO total_rooks + 1
        END WHILE

        DEFINE FUNCTION compare_rows(a, b)
            RETURN (a[0] > b[0])
        END FUNCTION

        DEFINE FUNCTION compare_cols(a, b)
            RETURN (a[1] > b[1])
        END FUNCTION

        CALL sort_list(sorted_by_row, compare_rows, ascending=True)

        SET total_rooks TO 0
        WHILE total_rooks < LENGTH(rooks)
            APPEND rooks[total_rooks] TO sorted_by_col
            SET total_rooks TO total_rooks + 1
        END WHILE

        CALL sort_list(sorted_by_col, compare_cols, ascending=True)

        SET accum_row_moves TO 0
        SET index_crawler TO 0

        REPEAT
            IF index_crawler >= LENGTH(sorted_by_row)
                BREAK
            END IF
            DEFINE temp_diff AS sorted_by_row[index_crawler][0] - index_crawler
            IF temp_diff < 0
                SET temp_diff TO -temp_diff
            END IF
            SET accum_row_moves TO accum_row_moves + temp_diff
            SET index_crawler TO index_crawler + 1
        UNTIL FALSE

        SET accum_col_moves TO 0
        SET iterator_var TO 0

        REPEAT
            IF iterator_var >= LENGTH(sorted_by_col)
                BREAK
            END IF
            DEFINE diff AS iterator_var - sorted_by_col[iterator_var][1]
            IF diff < 0
                SET diff TO -diff
            END IF
            SET accum_col_moves TO accum_col_moves + diff
            SET iterator_var TO iterator_var + 1
        UNTIL FALSE

        DEFINE result AS accum_row_moves + accum_col_moves

        RETURN result
    END FUNCTION
END CLASS
```