```
CLASS Solution
    FUNCTION countWinningSequences(s)
        FUNCTION compute(a, b)
            IF a NOT EQUAL b THEN
                IF NOT (a < b) THEN
                    IF a = 2 AND b = 0 THEN
                        RETURN -1
                    ELSE
                        RETURN 1
                    END IF
                ELSE
                    IF a = 0 AND b = 2 THEN
                        RETURN 1
                    ELSE
                        RETURN -1
                    END IF
                END IF
            ELSE
                RETURN 0
            END IF
        END FUNCTION

        FUNCTION explore(x, y, z)
            IF (LENGTH(s) - x) > y THEN
                CONTINUE_EXECUTION:  # label for clarity
            ELSE
                RETURN 0
            END IF

            IF x < LENGTH(s) THEN
                CONTINUE_EXECUTION:
            ELSE
                IF y < 0 THEN
                    RETURN 1
                ELSE
                    RETURN 0
                END IF
            END IF

            SET accumulator TO 0
            SET candidate TO 0
            SET indices TO [0,1,2]
            SET index_ptr TO 0
            WHILE index_ptr < LENGTH(indices)
                SET candidate TO indices[index_ptr]
                IF candidate = z THEN
                    SET index_ptr TO index_ptr + 1
                    CONTINUE
                END IF
                SET accumulator TO (accumulator + explore(x + 1, y + compute(d[s[x]], candidate), candidate)) % mod
                SET index_ptr TO index_ptr + 1
            END WHILE
            RETURN accumulator
        END FUNCTION

        SET mod TO (10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + 7
        SET d TO MAP with keys and values:
            'F' -> 0,
            'W' -> 1,
            'E' -> 2
        SET answer TO explore(0, 0, -1)
        CALL dfs cache clear method
        RETURN answer
    END FUNCTION
END CLASS
```