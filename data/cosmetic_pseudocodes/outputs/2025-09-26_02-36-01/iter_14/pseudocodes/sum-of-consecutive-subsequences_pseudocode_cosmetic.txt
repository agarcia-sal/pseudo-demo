CLASS Solution
    FUNCTION getSum(nums)
        FUNCTION calc(numbers)
            SET lengthVal TO the LENGTH OF numbers
            SET prefixCounts TO an array of zeros WITH the LENGTH OF lengthVal
            SET suffixCounts TO an array of zeros WITH the LENGTH OF lengthVal
            SET frequencyMap TO a new counter object
            SET indexA TO 1
            WHILE indexA < lengthVal
                SET prevNum TO element at position (indexA - 1) of numbers
                IF prevNum IS IN frequencyMap
                    SET freqBefore TO frequencyMap[prevNum]
                ELSE
                    SET freqBefore TO 0
                END IF
                SET frequencyMap[prevNum] TO freqBefore + 1
                SET element at position indexA of prefixCounts TO frequencyMap[prevNum]
                SET indexA TO indexA + 1
            END WHILE

            SET frequencyMap TO a new counter object
            SET indexB TO lengthVal - 2
            WHILE indexB >= 0
                SET nextNum TO element at position (indexB + 1) of numbers
                IF nextNum IS IN frequencyMap
                    SET freqAfter TO frequencyMap[nextNum]
                ELSE
                    SET freqAfter TO 0
                END IF
                SET frequencyMap[nextNum] TO freqAfter + 1
                SET element at position indexB of suffixCounts TO frequencyMap[nextNum]
                SET indexB TO indexB - 1
            END WHILE

            SET aggregateSum TO 0
            SET idxC TO 0
            REPEAT
                IF idxC >= lengthVal
                    BREAK
                END IF
                SET leftVal TO element at position idxC of prefixCounts
                SET rightVal TO element at position idxC of suffixCounts
                SET currentNum TO element at position idxC of numbers
                SET tempSum TO currentNum * (leftVal + rightVal + (leftVal * rightVal))
                SET aggregateSum TO aggregateSum + tempSum
                SET idxC TO idxC + 1
            UNTIL false

            RETURN aggregateSum MOD ( (10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10) + 7 )
        END FUNCTION

        SET MODULO_CONST TO ( ( ( ( ( ( ( ( ( (10 * 10) * 10) * 10) * 10) * 10) * 10) * 10) * 10) ) + 7 )
        SET firstCalc TO calc(nums)
        CALL reverseArray(nums)
        SET secondCalc TO calc(nums)
        SET sumVals TO 0
        SET iteratorPos TO 0
        REPEAT
            IF iteratorPos >= LENGTH OF nums
                BREAK
            END IF
            SET sumVals TO sumVals + element at position iteratorPos of nums
            SET iteratorPos TO iteratorPos + 1
        UNTIL false
        RETURN (firstCalc + secondCalc + sumVals) MOD MODULO_CONST
    END FUNCTION

    FUNCTION reverseArray(arr)
        SET startIdx TO 0
        SET endIdx TO LENGTH OF arr - 1
        WHILE startIdx < endIdx
            SET tempVal TO element at position startIdx of arr
            SET element at position startIdx of arr TO element at position endIdx of arr
            SET element at position endIdx of arr TO tempVal
            SET startIdx TO startIdx + 1
            SET endIdx TO endIdx - 1
        END WHILE
    END FUNCTION
END CLASS