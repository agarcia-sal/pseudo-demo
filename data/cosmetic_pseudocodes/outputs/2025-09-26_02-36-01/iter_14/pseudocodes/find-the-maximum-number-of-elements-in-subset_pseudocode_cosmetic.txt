```  
CLASS Solution  
    FUNCTION maximumLength(nums)  
        SET freqMap TO empty map  
        FOR each val IN nums DO  
            IF val NOT IN freqMap THEN  
                SET freqMap[val] TO 0  
            END IF  
            SET freqMap[val] TO freqMap[val] + 1  
        END FOR  

        SET storedLengths TO empty map  

        FUNCTION recurse(z)  
            IF (z NOT IN freqMap) OR (freqMap[z] < 2) THEN  
                IF (z IN freqMap) AND (freqMap[z] >= 1) THEN  
                    RETURN 1  
                ELSE  
                    RETURN 0  
                END IF  
            END IF  

            IF z IN storedLengths THEN  
                RETURN storedLengths[z]  
            END IF  

            # Compute for next element  
            SET squared TO z * z  
            SET storedLengths[z] TO recurse(squared) + 2  
            RETURN storedLengths[z]  
        END FUNCTION  

        SET result TO 1  
        SET keyCollection TO keys(freqMap)  
        SET index TO 0  

        WHILE index < length_of(keyCollection) DO  
            SET element TO keyCollection[index]  
            IF element = 1 THEN  
                SET times TO freqMap[element]  
                SET adjustment TO times - 1 - ((times MOD 2) * 2)  
                IF adjustment > result THEN  
                    SET result TO adjustment  
                END IF  
            ELSE  
                SET candidate TO recurse(element)  
                IF candidate > result THEN  
                    SET result TO candidate  
                END IF  
            END IF  
            SET index TO index + 1  
        END WHILE  

        RETURN result  
    END FUNCTION  
END CLASS  
```