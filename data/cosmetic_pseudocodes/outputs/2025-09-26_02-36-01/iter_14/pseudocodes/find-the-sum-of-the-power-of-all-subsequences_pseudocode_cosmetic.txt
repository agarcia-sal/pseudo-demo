CLASS Solution  
    FUNCTION sumOfPower(nums parameter, k parameter)  
        SET modulus TO 1000000000 PLUS 7  
        SET size TO LENGTH OF nums  
        SET table TO a list of lists each filled with 0, length k PLUS 1, repeated size PLUS 1 times  
        ASSIGN 1 TO element at index 0 of element at index 0 in table  
        
        SET index_outer TO 1  
        WHILE index_outer LESS THAN OR EQUAL TO size  
            SET index_inner TO 0  
            REPEAT  
                ASSIGN element at index_inner of element at index_outer MINUS 1 in table TO element at index_inner of element at index_outer in table  
                IF index_inner GREATER THAN OR EQUAL TO element at index_outer MINUS 1 of nums THEN  
                    ADD element at index_inner MINUS element at index_outer MINUS 1 of element at index_outer MINUS 1 in table TO element at index_inner of element at index_outer in table  
                END IF  
                ASSIGN element at index_inner of element at index_outer in table TO element at index_inner of element at index_outer in table MOD modulus  
                INCREMENT index_inner BY 1  
            UNTIL index_inner GREATER THAN k  
            INCREMENT index_outer BY 1  
        END WHILE  
        
        SET accumulated_power TO 0  
        SET iterator TO 1  
        SET limit TO (2 RAISED TO size) MINUS 1  
        WHILE iterator LESS THAN OR EQUAL TO limit  
            SET sum_elements TO 0  
            SET count_ones TO 0  
            SET pos TO 0  
            WHILE pos LESS THAN size  
                IF BITWISE AND OF iterator SHIFTED RIGHT BY pos AND 1 EQUALS 1 THEN  
                    ADD element at index pos of nums TO sum_elements  
                    INCREMENT count_ones BY 1  
                END IF  
                INCREMENT pos BY 1  
            END WHILE  
            IF sum_elements EQUALS k THEN  
                ADD (2 RAISED TO (size MINUS count_ones)) TO accumulated_power  
                SET accumulated_power TO accumulated_power MOD modulus  
            END IF  
            INCREMENT iterator BY 1  
        END WHILE  
        
        RETURN accumulated_power  
    END FUNCTION  
END CLASS