CLASS Solution  
    FUNCTION minChanges(nums k)  
        SET delta TO list of zeros with length (k + 2)  
        SET lengthNums TO LENGTH OF nums  
        FUNCTION accumulate(arr)  
            SET total TO zero  
            SET accumulation TO empty list  
            FOR each element val IN arr DO  
                SET total TO total + val  
                APPEND total TO accumulation  
            END FOR  
            RETURN accumulation  
        END FUNCTION  
        SET index TO zero  
        WHILE index <= (lengthNums DIV 2) - 1 DO  
            SET firstVal TO nums[index]  
            SET secondVal TO nums[lengthNums - index - 1]  
            IF NOT (secondVal >= firstVal) THEN  
                SET tempSwap TO firstVal  
                SET firstVal TO secondVal  
                SET secondVal TO tempSwap  
            END IF  
            SET delta[0] TO delta[0] + 1  
            SET delta[secondVal - firstVal] TO delta[secondVal - firstVal] - 1  
            SET delta[(secondVal - firstVal) + 1] TO delta[(secondVal - firstVal) + 1] + 1  
            SET maxVal TO (secondVal >= (k - firstVal)) ? secondVal : (k - firstVal)  
            SET delta[maxVal + 1] TO delta[maxVal + 1] - 1  
            SET delta[maxVal + 2] TO delta[maxVal + 2] + 1  
            SET index TO index + 1  
        END WHILE  
        SET prefixSum TO accumulate(delta)  
        RETURN MINIMUM VALUE IN prefixSum  
    END FUNCTION  
END CLASS