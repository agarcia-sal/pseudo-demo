CLASS Solution
    FUNCTION canReachCorner(xCorner yCorner circles)
        FUNCTION check_inside(px py cx cy radius)
            SET dx TO cx MINUS px
            SET dy TO cy MINUS py
            SET dist_sq TO dx MULTIPLIED BY dx PLUS dy MULTIPLIED BY dy
            RETURN dist_sq LESS THAN OR EQUAL TO radius MULTIPLIED BY radius
        END FUNCTION

        FUNCTION intersects_left_top(cx cy radius)
            SET cond1 TO (0 LESS THAN OR EQUAL TO cy) AND (cy LESS THAN OR EQUAL TO yCorner) AND (ABSOLUTE_VALUE(cx) LESS THAN OR EQUAL TO radius)
            SET dcy TO cy MINUS yCorner
            SET cond2 TO (0 LESS THAN OR EQUAL TO cx) AND (cx LESS THAN OR EQUAL TO xCorner) AND (ABSOLUTE_VALUE(dcy) LESS THAN OR EQUAL TO radius)
            RETURN cond1 OR cond2
        END FUNCTION

        FUNCTION intersects_right_bottom(cx cy radius)
            SET dct TO cx MINUS xCorner
            SET cond1 TO (0 LESS THAN OR EQUAL TO cy) AND (cy LESS THAN OR EQUAL TO yCorner) AND (ABSOLUTE_VALUE(dct) LESS THAN OR EQUAL TO radius)
            SET cond2 TO (0 LESS THAN OR EQUAL TO cx) AND (cx LESS THAN OR EQUAL TO xCorner) AND (ABSOLUTE_VALUE(cy) LESS THAN OR EQUAL TO radius)
            RETURN cond1 OR cond2
        END FUNCTION

        FUNCTION depth_search(index)
            SET c_x TO circles at position index at position zero
            SET c_y TO circles at position index at position one
            SET c_r TO circles at position index at position two

            IF intersects_right_bottom(c_x c_y c_r)
                RETURN True
            END IF

            SET vis at position index TO True

            FOR iterator idx AND tuple (p_x p_y p_r) IN enumeration(circles)
                IF vis at position idx EQUALS True
                    CONTINUE
                END IF

                SET delta_x TO c_x MINUS p_x
                SET delta_y TO c_y MINUS p_y
                SET sq_dist TO delta_x MULTIPLIED BY delta_x PLUS delta_y MULTIPLIED BY delta_y
                SET radius_sum TO c_r PLUS p_r

                IF sq_dist GREATER THAN radius_sum MULTIPLIED BY radius_sum
                    CONTINUE
                END IF

                SET left_expr TO (c_x MULTIPLIED BY p_r) PLUS (p_x MULTIPLIED BY c_r)
                SET right_bound_x TO radius_sum MULTIPLIED BY xCorner
                SET left_expr_y TO (c_y MULTIPLIED BY p_r) PLUS (p_y MULTIPLIED BY c_r)
                SET right_bound_y TO radius_sum MULTIPLIED BY yCorner

                IF (left_expr LESS THAN right_bound_x) AND (left_expr_y LESS THAN right_bound_y) AND depth_search(idx)
                    RETURN True
                END IF
            END FOR
            RETURN False
        END FUNCTION

        SET visited TO an empty list
        FOR counter FROM 1 TO LENGTH OF circles
            APPEND False TO visited
        END FOR

        FOR pos AND (cir_x cir_y cir_r) IN enumeration(circles)
            IF check_inside(zero zero cir_x cir_y cir_r) OR check_inside(xCorner yCorner cir_x cir_y cir_r)
                RETURN False
            END IF

            IF (visited at position pos EQUALS False) AND intersects_left_top(cir_x cir_y cir_r) AND depth_search(pos)
                RETURN False
            END IF
        END FOR

        RETURN True
    END FUNCTION
END CLASS