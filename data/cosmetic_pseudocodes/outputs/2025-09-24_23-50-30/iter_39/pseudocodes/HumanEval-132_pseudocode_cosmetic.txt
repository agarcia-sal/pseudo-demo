```
FUNCTION is_nested(input_string)
    FUNCTION traverse_positions(open_list, close_list, open_ptr, close_ptr, total_open, total_close, acc)
        IF open_ptr = total_open THEN
            RETURN acc >= 2
        ELSE
            SWITCH (open_ptr < total_open) AND (close_ptr < total_close) AND (open_list[open_ptr] < close_list[close_ptr])
                CASE TRUE:
                    RETURN traverse_positions(open_list, close_list, open_ptr + 1, close_ptr + 1, total_open, total_close, acc + 1)
                DEFAULT:
                    RETURN traverse_positions(open_list, close_list, open_ptr + 1, close_ptr, total_open, total_close, acc)
            END SWITCH
        END IF
    END FUNCTION

    SET idx_open_brackets TO new list
    SET idx_close_brackets TO empty list
    SET pos_counter TO 0
    WHILE pos_counter < LENGTH(input_string)
        SELECT input_string[pos_counter]
            CASE '[':
                ADD pos_counter TO idx_open_brackets
            DEFAULT:
                ADD pos_counter TO idx_close_brackets
        END SELECT
        INCREMENT pos_counter BY 1
    END WHILE

    SET idx_close_brackets TO reverse(idx_close_brackets)
    RETURN traverse_positions(idx_open_brackets, idx_close_brackets, 0, 0, LENGTH(idx_open_brackets), LENGTH(idx_close_brackets), 0)
END FUNCTION
```