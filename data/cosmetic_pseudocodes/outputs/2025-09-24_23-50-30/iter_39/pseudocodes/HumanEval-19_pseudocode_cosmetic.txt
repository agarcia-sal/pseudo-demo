```
FUNCTION sort_numbers(kappa)
	VALUE_MAP <- {
		'zero':0,
		'one':1,
		'two':2,
		'three':3,
		'four':4,
		'five':5,
		'six':6,
		'seven':7,
		'eight':8,
		'nine':9
	}

	FUNCTION recursive_filter(phi, psi, omega)
		IF phi == LENGTH(psi) THEN RETURN omega ENDIF
		IF psi[phi] != '' THEN
			omega <- APPEND omega WITH psi[phi]
		ENDIF
		RETURN recursive_filter(phi+1, psi, omega)
	END FUNCTION

	DELTA <- SPLIT kappa BY ' '
	GAMMA <- recursive_filter(0, DELTA, [])

	FUNCTION insertion_sort(lambda_list, mu)
		IF mu >= LENGTH(lambda_list) THEN RETURN lambda_list ENDIF
		CURRENT <- lambda_list[mu]
		NU <- mu-1
		WHILE NU >= 0 AND VALUE_MAP[lambda_list[NU]] > VALUE_MAP[CURRENT] DO
			lambda_list[NU+1] <- lambda_list[NU]
			NU <- NU-1
		ENDWHILE
		lambda_list[NU+1] <- CURRENT
		RETURN insertion_sort(lambda_list, mu+1)
	END FUNCTION

	CLEANED <- insertion_sort(GAMMA, 1)

	FUNCTION join_words(words, idx, acc)
		IF idx >= LENGTH(words) THEN RETURN acc ENDIF
		sep <- ' '
		prefix <- acc
		IF idx == 0 THEN sep <- '' ENDIF
		acc <- prefix + sep + words[idx]
		RETURN join_words(words, idx+1, acc)
	END FUNCTION

	RETURN join_words(CLEANED, 0, '')
END FUNCTION
```