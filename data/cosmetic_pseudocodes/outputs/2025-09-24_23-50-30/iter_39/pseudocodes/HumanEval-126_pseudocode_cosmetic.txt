```
FUNCTION is_sorted(collection_numbers)
    INITIALIZE dict_counts AS empty dictionary
    FOR element IN collection_numbers
        IF element NOT IN dict_counts THEN
            dict_counts[element] <- 0
    END FOR

    DEFINE PROCEDURE accumulate(index, dict_current)
        IF index = LENGTH(collection_numbers) THEN
            RETURN dict_current
        ELSE
            LET value_curr BE collection_numbers[index]
            LET updated_dict BE dict_current
            updated_dict[value_curr] <- dict_current[value_curr] + 1
            RETURN accumulate(index + 1, updated_dict)
        END IF
    END PROCEDURE

    LET dict_counts <- accumulate(0, dict_counts)

    FOR key IN collection_numbers
        IF NOT (dict_counts[key] <= 2) THEN
            RETURN False
    END FOR

    DEFINE PROCEDURE check_order(position)
        IF position = LENGTH(collection_numbers) THEN
            RETURN True
        ELSE
            IF NOT (collection_numbers[position - 1] <= collection_numbers[position]) THEN
                RETURN False
            ELSE
                RETURN check_order(position + 1)
            END IF
        END IF
    END PROCEDURE

    RETURN check_order(1)
END FUNCTION
```