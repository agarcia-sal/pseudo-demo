```
FUNCTION sort_even(omega)
  DEFINE FUNCTION extract_alternates(beta, zeta, idx, delta)
    IF idx >= delta THEN RETURN zeta END IF
    RETURN extract_alternates(beta, zeta + [beta[idx]], idx + 2, delta)
  END FUNCTION

  DEFINE FUNCTION merge_pairs(xi, psi, chi, upsilon)
    IF xi >= chi OR psi >= upsilon THEN RETURN [] END IF
    RETURN [xi[xi] , psi[psi]] + merge_pairs(xi, psi, xi + 1, psi + 1)
  END FUNCTION

  LET lambda_alpha = extract_alternates(omega, [], 0, |omega|)
  LET lambda_beta = extract_alternates(omega, [], 1, |omega|)
  LET lambda_alpha_sorted = lambda_alpha
  REPEAT
    LET epsilon = false
    FOR i FROM 0 TO |lambda_alpha_sorted| - 2
      IF lambda_alpha_sorted[i] > lambda_alpha_sorted[i + 1] THEN
        LET tau = lambda_alpha_sorted[i]
        LET lambda_alpha_sorted[i] = lambda_alpha_sorted[i + 1]
        LET lambda_alpha_sorted[i + 1] = tau
        LET epsilon = true
      END IF
    END FOR
  UNTIL NOT epsilon

  LET sigma = merge_pairs(lambda_alpha_sorted, lambda_beta, 0, 0)
  IF |lambda_alpha_sorted| > |lambda_beta| THEN
    LET sigma = sigma + [lambda_alpha_sorted[|lambda_alpha_sorted| - 1]]
  END IF
  RETURN sigma
END FUNCTION
```