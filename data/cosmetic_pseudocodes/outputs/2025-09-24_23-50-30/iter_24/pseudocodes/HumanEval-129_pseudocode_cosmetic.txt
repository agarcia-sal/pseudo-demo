```
FUNCTION minPath(array, delta)
  LET epsilon = (SIZE OF array) * (SIZE OF array) + 1
  PROCEDURE traverse(x, y)
    IF (x < 0) OR (y < 0) OR (x >= SIZE OF array) OR (y >= SIZE OF array) THEN RETURN []
    RETURN [array[x][y]]
  END PROCEDURE
  LET indexA = 0
  WHILE indexA < SIZE OF array DO
    LET indexB = 0
    WHILE indexB < SIZE OF array DO
      IF array[indexA][indexB] = 1 THEN
        LET collector = []
        IF NOT (indexA = 0) THEN collector = collector + traverse(indexA - 1, indexB) END
        IF NOT (indexB = 0) THEN collector = collector + traverse(indexA, indexB - 1) END
        IF NOT (indexA = SIZE OF array - 1) THEN collector = collector + traverse(indexA + 1, indexB) END
        IF NOT (indexB = SIZE OF array - 1) THEN collector = collector + traverse(indexA, indexB + 1) END
        LET minVal = collector[0]
        FOR counter FROM 1 TO (SIZE OF collector) - 1 DO
          IF collector[counter] < minVal THEN minVal = collector[counter] END
        END FOR
        epsilon = minVal
      END IF
      indexB = indexB + 1
    END WHILE
    indexA = indexA + 1
  END WHILE
  LET result = []
  LET step = 0
  WHILE step < delta DO
    IF (step MOD 2) <> 1 THEN result = result + [1] ELSE result = result + [epsilon] END
    step = step + 1
  END WHILE
  RETURN result
END FUNCTION
```