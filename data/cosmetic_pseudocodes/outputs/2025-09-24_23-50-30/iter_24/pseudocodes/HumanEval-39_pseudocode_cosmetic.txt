```
FUNCTION prime_fib(quant_x)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(test_m)
        IF NOT (test_m >= 2) THEN
            RETURN False
        ENDIF
        SET arr_iter TO []
        SET idx_s TO 2
        SET limit_u TO (INTEGER(SQRT(test_m)) + 1)
        SET high_a TO test_m - 1
        SET limit_v TO limit_u
        IF high_a < limit_u THEN
            SET limit_v TO high_a
        ENDIF
        WHILE idx_s <= limit_v
            APPEND idx_s TO arr_iter
            SET idx_s TO idx_s + 1
        ENDWHILE

        FUNCTION check_division(pos)
            IF pos >= LENGTH(arr_iter) THEN
                RETURN True
            ELSEIF test_m MOD arr_iter[pos] = 0 THEN
                RETURN False
            ELSE
                RETURN check_division(pos + 1)
            ENDIF
        END FUNCTION

        RETURN check_division(0)
    END FUNCTION

    SET seq_nums TO [0,1]

    FUNCTION continue_search(flag_y)
        SET len_arr TO LENGTH(seq_nums)
        SET elem_n TO seq_nums[len_arr - 1]
        SET elem_o TO seq_nums[len_arr - 2]
        APPEND (elem_o + elem_n) TO seq_nums
        IF is_prime(seq_nums[LENGTH(seq_nums) - 1]) THEN
            SET flag_y TO flag_y - 1
        ENDIF
        IF NOT (flag_y != 0) THEN
            RETURN seq_nums[LENGTH(seq_nums) - 1]
        ELSE
            RETURN continue_search(flag_y)
        ENDIF
    END FUNCTION

    RETURN continue_search(quant_x)
END FUNCTION
```