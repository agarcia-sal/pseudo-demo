```
FUNCTION find_closest_elements(array_of_vals)
    DECLARE pair_result AS None
    DECLARE dist_minimum AS None

    DECLARE i_outer AS 0
    WHILE i_outer < LENGTH(array_of_vals)
        DECLARE j_inner AS 0
        WHILE j_inner < LENGTH(array_of_vals)
            IF NOT (i_outer = j_inner)
                IF dist_minimum = None
                    SET dist_minimum TO (array_of_vals[j_inner] - array_of_vals[i_outer]) * SIGN(array_of_vals[j_inner] - array_of_vals[i_outer])
                    IF array_of_vals[i_outer] < array_of_vals[j_inner]
                        SET pair_result TO (array_of_vals[i_outer], array_of_vals[j_inner])
                    ELSE
                        SET pair_result TO (array_of_vals[j_inner], array_of_vals[i_outer])
                    END IF
                ELSE
                    DECLARE dist_candidate AS (array_of_vals[i_outer] - array_of_vals[j_inner]) * SIGN(array_of_vals[i_outer] - array_of_vals[j_inner])
                    IF dist_candidate < dist_minimum
                        SET dist_minimum TO dist_candidate
                        IF array_of_vals[i_outer] > array_of_vals[j_inner]
                            SET pair_result TO (array_of_vals[j_inner], array_of_vals[i_outer])
                        ELSE
                            SET pair_result TO (array_of_vals[i_outer], array_of_vals[j_inner])
                        END IF
                    END IF
                END IF
            END IF
            SET j_inner TO j_inner + 1
        END WHILE
        SET i_outer TO i_outer + 1
    END WHILE

    RETURN pair_result
END FUNCTION
```