```
FUNCTION encode(inputStr)
  CONST vowelCollection ← ["A","E","I","O","U","a","e","i","o","u"]
  FUNCTION shiftChar(c)
    RETURN CHAR(ASCII_CODE(c) + 2)
  END FUNCTION
  VAR shiftedVowelsMap ← EMPTY MAP
  VAR idx ← 0
  WHILE idx < LENGTH(vowelCollection)
    LET ch ← vowelCollection[idx]
    ASSIGN shiftedVowelsMap[ch] ← shiftChar(ch)
    idx ← idx + 1
  END WHILE
  VAR swappedStr ← EMPTY STRING
  VAR i ← 0
  WHILE i < LENGTH(inputStr)
    LET currChar ← inputStr[i]
    LET isUpper ← (currChar >= "A") AND (currChar <= "Z")
    LET isLower ← (currChar >= "a") AND (currChar <= "z")
    IF isUpper OR isLower THEN
      LET swappedChar ← IF isUpper THEN TO_LOWER(currChar) ELSE TO_UPPER(currChar)
    ELSE
      LET swappedChar ← currChar
    END IF
    swappedStr ← swappedStr + swappedChar
    i ← i + 1
  END WHILE
  VAR result ← EMPTY STRING
  VAR j ← 0
  WHILE j < LENGTH(swappedStr)
    LET symbol ← swappedStr[j]
    IF shiftedVowelsMap HAS_KEY symbol THEN
      result ← result + shiftedVowelsMap[symbol]
    ELSE
      result ← result + symbol
    END IF
    j ← j + 1
  END WHILE
  RETURN result
END FUNCTION
```