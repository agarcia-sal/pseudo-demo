```
FUNCTION even_odd_palindrome(m)
    FUNCTION palindrome_check(x)
        RETURN (CONVERT TO STRING x) == (REVERSE OF (CONVERT TO STRING x))
    END FUNCTION

    VAR alpha TO 0
    VAR beta TO 0

    FUNCTION loop_counter(z, alpha_acc, beta_acc)
        CASE (z > m)
            WHEN TRUE:
                RETURN (alpha_acc, beta_acc)
            OTHERWISE:
                SWITCH ( (z MOD 2 == 0) AND palindrome_check(z), (z MOD 2 == 1) AND palindrome_check(z) )
                    CASE (TRUE, FALSE):
                        RETURN loop_counter(z + 1, alpha_acc + 1, beta_acc)
                    CASE (FALSE, TRUE):
                        RETURN loop_counter(z + 1, alpha_acc, beta_acc + 1)
                    DEFAULT:
                        RETURN loop_counter(z + 1, alpha_acc, beta_acc)
                END SWITCH
        END CASE
    END FUNCTION

    RETURN loop_counter(1, alpha, beta)
END FUNCTION
```