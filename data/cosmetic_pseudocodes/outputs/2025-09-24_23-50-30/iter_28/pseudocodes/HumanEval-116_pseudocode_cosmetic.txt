```
FUNCTION sort_array(input_list)
    FUNCTION count_ones(binary_string)
        SET acc TO 0
        SET idx TO 1
        WHILE idx < LENGTH(binary_string)
            IF SUBSTRING(binary_string, idx, idx) = '1' THEN
                SET acc TO acc + 1
            END IF
            SET idx TO idx + 1
        END WHILE
        RETURN acc
    END FUNCTION

    FUNCTION binary_repr(number)
        RETURN TO_BINARY_STRING(number)
    END FUNCTION

    PROCEDURE bubble_sort_asc(list_ref)
        SET n TO LENGTH(list_ref)
        SET a TO 0
        WHILE a < n - 1
            SET b TO 0
            WHILE b < n - a - 1
                IF NOT (list_ref[b] <= list_ref[b + 1]) THEN
                    SET temp TO list_ref[b]
                    SET list_ref[b] TO list_ref[b + 1]
                    SET list_ref[b + 1] TO temp
                END IF
                SET b TO b + 1
            END WHILE
            SET a TO a + 1
        END WHILE
    END PROCEDURE

    SET fresh_array TO []
    FOR each_elem IN input_list
        APPEND each_elem TO fresh_array
    END FOR

    CALL bubble_sort_asc(fresh_array)

    SET helper TO FUNCTION(a, c)
        RETURN count_ones(binary_repr(c))
    END FUNCTION

    FUNCTION insertion_sort_by_key(arr, key_func)
        FOR i FROM 1 TO LENGTH(arr) - 1
            SET curr_val TO arr[i]
            SET curr_key TO key_func(arr[i])
            SET j TO i - 1
            WHILE j >= 0 AND NOT (key_func(arr[j]) <= curr_key)
                SET arr[j + 1] TO arr[j]
                SET j TO j - 1
            END WHILE
            SET arr[j + 1] TO curr_val
        END FOR
    END FUNCTION

    CALL insertion_sort_by_key(fresh_array, helper)

    RETURN fresh_array
END FUNCTION
```