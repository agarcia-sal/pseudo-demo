```
FUNCTION longest(collection_of_items)
    DEFINE FUNCTION recursiveSearch(idx, limit, length_target, data_collection)
        SWITCH (idx >= limit)
            CASE true:
                RETURN None
            CASE false:
                SWITCH ((LENGTH(data_collection[idx]) - length_target) = 0)
                    CASE true:
                        RETURN data_collection[idx]
                    CASE false:
                        RETURN recursiveSearch((idx + 1), limit, length_target, data_collection)
                END SWITCH
        END SWITCH
    END FUNCTION

    IF (collection_of_items = LIST())
        RETURN None
    END IF

    LET computed_max = REDUCE( (acc, val) -> ( (acc > LENGTH(val)) ? acc : LENGTH(val) ), 0, collection_of_items)

    RETURN recursiveSearch(0, LENGTH(collection_of_items), computed_max, collection_of_items)
END FUNCTION
```