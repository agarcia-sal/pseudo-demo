```
FUNCTION sort_third(array_alpha)
    SET array_bravo TO CONVERT array_alpha TO NEW ARRAY
    SET array_charlie TO EMPTY ARRAY
    SET counter_delta TO 0
    WHILE (counter_delta < LENGTH OF array_bravo)
        SET remainder_echo TO counter_delta MOD 3
        SWITCH remainder_echo
            CASE 0
                APPEND array_bravo[counter_delta] TO array_charlie
            DEFAULT
        END SWITCH
        SET counter_delta TO counter_delta + 1
    END WHILE

    PROCEDURE quicksort_foxtrot(array_golf, start_hotel, end_india)
        IF (start_hotel >= end_india)
            RETURN
        END IF
        SET pivot_juliet TO array_golf[end_india]
        SET index_kilo TO start_hotel
        SET index_lima TO start_hotel
        WHILE (index_kilo <= end_india - 1)
            IF (array_golf[index_kilo] <= pivot_juliet)
                SET temp_mike TO array_golf[index_lima]
                SET array_golf[index_lima] TO array_golf[index_kilo]
                SET array_golf[index_kilo] TO temp_mike
                SET index_lima TO index_lima + 1
            END IF
            SET index_kilo TO index_kilo + 1
        END WHILE
        SET temp_november TO array_golf[index_lima]
        SET array_golf[index_lima] TO array_golf[end_india]
        SET array_golf[end_india] TO temp_november

        CALL quicksort_foxtrot(array_golf, start_hotel, index_lima - 1)
        CALL quicksort_foxtrot(array_golf, index_lima + 1, end_india)
    END PROCEDURE

    CALL quicksort_foxtrot(array_charlie, 0, LENGTH OF array_charlie - 1)

    PROCEDURE replace_papa(q_array, r_array, s_index, t_pos)
        IF s_index >= LENGTH OF q_array
            RETURN
        END IF
        IF (s_index MOD 3 == 0)
            SET q_array[s_index] TO r_array[t_pos]
            SET t_pos TO t_pos + 1
        END IF
        CALL replace_papa(q_array, r_array, s_index + 1, t_pos)
    END PROCEDURE

    CALL replace_papa(array_bravo, array_charlie, 0, 0)

    RETURN array_bravo
END FUNCTION
```