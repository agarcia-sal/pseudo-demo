```
FUNCTION common(alpha, beta)
    FUNCTION recurse_outer(i, j, acc_h)
        IF i >= LENGTH(alpha)
            RETURN acc_h
        ELSE
            IF j >= LENGTH(beta)
                RETURN recurse_outer(i + 1, 0, acc_h)
            ELSE
                LET updated_acc_h = (alpha[i] = beta[j]) ? HASHELEMENT(acc_h, alpha[i]) : acc_h
                RETURN recurse_outer(i, j + 1, updated_acc_h)
            END IF
        END IF
    END FUNCTION

    FUNCTION hashelement(hs, val)
        LET new_hash = hs
        IF NOT CONTAINS(hs, val)
            INSERT val INTO new_hash
        END IF
        RETURN new_hash
    END FUNCTION

    FUNCTION to_sorted_array(hs)
        LET arr = []
        FOR key IN hs KEYS
            APPEND key TO arr
        END FOR
        FOR x FROM 0 TO LENGTH(arr) - 2
            FOR y FROM x + 1 TO LENGTH(arr) - 1
                IF arr[y] < arr[x]
                    LET tmp = arr[x]
                    SET arr[x] TO arr[y]
                    SET arr[y] TO tmp
                END IF
            END FOR
        END FOR
        RETURN arr
    END FUNCTION

    LET initial_hash = CREATE_EMPTY_HASH()
    LET intersection_hash = recurse_outer(0, 0, initial_hash)
    RETURN to_sorted_array(intersection_hash)
END FUNCTION
```