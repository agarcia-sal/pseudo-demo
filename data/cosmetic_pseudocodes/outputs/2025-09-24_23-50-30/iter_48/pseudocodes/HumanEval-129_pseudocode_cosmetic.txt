```
FUNCTION minPath(matrix, amount)
    LET length = LENGTH(matrix)
    LET value = (length * length) + 1
    LET rowIndex = 0
    WHILE rowIndex < length
        LET colIndex = 0
        WHILE colIndex < length
            CASE NOT (matrix[rowIndex][colIndex] <> 1) OF
                TRUE:
                    LET neighbors = []
                    LET condA = NOT (rowIndex = 0)
                    LET condB = NOT (colIndex = 0)
                    LET condC = NOT (rowIndex = (length - 1))
                    LET condD = NOT (colIndex = (length - 1))
                    IF condA THEN
                        neighbors = neighbors + [matrix[(rowIndex - 1)][colIndex]]
                    END IF
                    IF condB THEN
                        neighbors = neighbors + [matrix[rowIndex][(colIndex - 1)]]
                    END IF
                    IF condC THEN
                        neighbors = neighbors + [matrix[(rowIndex + 1)][colIndex]]
                    END IF
                    IF condD THEN
                        neighbors = neighbors + [matrix[rowIndex][(colIndex + 1)]]
                    END IF
                    LET value = (value < MIN(neighbors)) * value + (value >= MIN(neighbors)) * MIN(neighbors)
                FALSE:
                    SKIP
            END CASE
            LET colIndex = colIndex + 1
        END WHILE
        LET rowIndex = rowIndex + 1
    END WHILE
    LET result = []
    LET index = 0
    WHILE index < amount
        LET isEven = ((index % 2) = 0)
        LET toAppend = isEven * 1 + (1 - isEven) * value
        result = result + [toAppend]
        LET index = index + 1
    END WHILE
    RETURN result
END FUNCTION
```