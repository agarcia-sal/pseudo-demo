```
FUNCTION minSubArraySum(sequence_of_values)
  LET index_var = 0
  LET accum_value = 0
  LET best_value = 0
  WHILE (index_var < LENGTH(sequence_of_values))
    LET current_val = sequence_of_values[index_var]
    LET accum_value = accum_value + (0 - current_val)
    IF (accum_value >= 0) THEN
      best_value = (accum_value > best_value) ? accum_value : best_value
    ELSE
      accum_value = 0
    END IF
    index_var = index_var + 1
  END WHILE
  SWITCH best_value
    CASE 0:
      LET temp_max = -sequence_of_values[0]
      LET pos = 1
      WHILE pos < LENGTH(sequence_of_values)
        LET neg_val = 0 - sequence_of_values[pos]
        IF neg_val > temp_max THEN
          temp_max = neg_val
        END IF
        pos = pos + 1
      END WHILE
      best_value = temp_max
      BREAK
    DEFAULT:
      BREAK
  END SWITCH
  LET result = 0 - best_value
  RETURN result
END FUNCTION
```