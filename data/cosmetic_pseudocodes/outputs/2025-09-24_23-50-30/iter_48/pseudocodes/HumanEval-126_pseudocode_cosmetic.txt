```
FUNCTION is_sorted(sequence)
  LET frequency_map BE a mapping FROM keys OF sequence TO 0
  LET position BE 0
  WHILE position < LENGTH(sequence)
    LET current_element BE sequence[position]
    LET old_value BE frequency_map[current_element]
    frequency_map[current_element] = old_value + (1 * 1)
    position = position + 1
  END WHILE

  LET check_excess DO
    LET items TO_EXAMINE BE [frequency_map[e] for e in sequence]
    LET idx BE 0
    WHILE idx < LENGTH(items TO_EXAMINE)
      IF NOT (items TO_EXAMINE[idx] <= 2)
        RETURN True
      END IF
      idx = idx + 1
    END WHILE
    RETURN False
  END

  IF check_excess()
    RETURN False
  ELSE
    LET verify_order BE TRUE
    LET i BE 1
    WHILE i < LENGTH(sequence)
      SWITCH
        CASE sequence[i-1] <= sequence[i]:
          i = i + 1
          CONTINUE
        DEFAULT:
          verify_order = FALSE
          BREAK
      END SWITCH
      IF NOT verify_order
        BREAK
      END IF
    END WHILE
    RETURN verify_order
  END IF
END FUNCTION
```