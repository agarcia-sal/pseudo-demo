```
FUNCTION sort_array(list_of_numbers)
  SET intermediate_ordered_list TO list_of_numbers
  SET index_counter TO 0
  SET n TO LENGTH OF list_of_numbers
  WHILE index_counter < n - 1
      SET inner_counter TO 0
      WHILE inner_counter < n - index_counter - 1
          IF intermediate_ordered_list[inner_counter] > intermediate_ordered_list[inner_counter + 1]
              SET temp_var TO intermediate_ordered_list[inner_counter]
              SET intermediate_ordered_list[inner_counter] TO intermediate_ordered_list[inner_counter + 1]
              SET intermediate_ordered_list[inner_counter + 1] TO temp_var
          END IF
          SET inner_counter TO inner_counter + 1
      END WHILE
      SET index_counter TO index_counter + 1
  END WHILE

  SET counting_pairs TO EMPTY LIST
  SET position_index TO 0
  WHILE position_index < n
      SET current_num TO intermediate_ordered_list[position_index]
      SET binary_string TO CONVERT_TO_BINARY(current_num)
      SET count_ones TO 0
      SET char_index TO 3
      WHILE char_index <= LENGTH OF binary_string
          IF binary_string[char_index] = '1'
              SET count_ones TO count_ones + 1
          END IF
          SET char_index TO char_index + 1
      END WHILE
      APPEND PAIR(count_ones, current_num) TO counting_pairs
      SET position_index TO position_index + 1
  END WHILE

  SET m TO LENGTH OF counting_pairs
  SET outer_ix TO 0
  WHILE outer_ix < m - 1
      SET inner_ix TO 0
      WHILE inner_ix < m - outer_ix - 1
          IF counting_pairs[inner_ix].first > counting_pairs[inner_ix + 1].first OR 
             (counting_pairs[inner_ix].first = counting_pairs[inner_ix + 1].first AND 
              counting_pairs[inner_ix].second > counting_pairs[inner_ix + 1].second)
              SET swap_tmp TO counting_pairs[inner_ix]
              SET counting_pairs[inner_ix] TO counting_pairs[inner_ix + 1]
              SET counting_pairs[inner_ix + 1] TO swap_tmp
          END IF
          SET inner_ix TO inner_ix + 1
      END WHILE
      SET outer_ix TO outer_ix + 1
  END WHILE

  SET result_list TO EMPTY LIST
  SET gather_index TO 0
  WHILE gather_index < m
      APPEND counting_pairs[gather_index].second TO result_list
      SET gather_index TO gather_index + 1
  END WHILE

  RETURN result_list
END FUNCTION
```