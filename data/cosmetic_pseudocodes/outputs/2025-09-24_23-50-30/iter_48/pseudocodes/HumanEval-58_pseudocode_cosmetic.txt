```
FUNCTION common(beta, gamma)
    LET delta BE []
    LET epsilon BE 0
    WHILE epsilon < LENGTH(beta)
        LET zeta BE 0
        WHILE zeta < LENGTH(gamma)
            CASE NOT (beta[epsilon] = gamma[zeta]) OF
                TRUE: zeta <- zeta + 1
                FALSE:
                    IF NOT (beta[epsilon] IN delta) THEN
                        APPEND beta[epsilon] TO delta
                    END IF
                    zeta <- zeta + 1
            END CASE
        END WHILE
        epsilon <- epsilon + 1
    END WHILE
    LET eta BE delta
    FOR theta FROM 0 TO LENGTH(eta) - 2
        LET i BE 0
        WHILE i < LENGTH(eta) - 1 - theta
            IF eta[i] > eta[i + 1] THEN
                LET tempVar BE eta[i]
                eta[i] <- eta[i + 1]
                eta[i + 1] <- tempVar
            END IF
            i <- i + 1
        END WHILE
    END FOR
    RETURN eta
END FUNCTION
```