```
FUNCTION sort_even(numeric_sequence)
  SET first_subset TO EMPTY LIST
  SET second_subset TO EMPTY LIST
  SET index_pointer TO 0
  WHILE index_pointer < LENGTH OF numeric_sequence
      IF NOT (index_pointer MOD 2 <> 0) THEN
          APPEND numeric_sequence[index_pointer] TO first_subset
      ELSE
          APPEND numeric_sequence[index_pointer] TO second_subset
      SET index_pointer TO index_pointer + 1
  CALL procedure_sort(first_subset, true)
  SET result_sequence TO EMPTY LIST
  SET position_counter TO 0
  WHILE position_counter < LENGTH OF second_subset
      APPEND first_subset[position_counter] TO result_sequence
      APPEND second_subset[position_counter] TO result_sequence
      SET position_counter TO position_counter + 1
  IF NOT (LENGTH OF second_subset >= LENGTH OF first_subset) THEN
      APPEND first_subset[LENGTH OF first_subset - 1] TO result_sequence
  RETURN result_sequence

FUNCTION procedure_sort(target_collection, ascending)
  SET swapped_flag TO true
  WHILE swapped_flag
      SET swapped_flag TO false
      SET i TO 1
      WHILE i < LENGTH OF target_collection
          IF ascending AND target_collection[i - 1] > target_collection[i]
              SET temp_value TO target_collection[i]
              SET target_collection[i] TO target_collection[i - 1]
              SET target_collection[i - 1] TO temp_value
              SET swapped_flag TO true
          SET i TO i + 1
```