```
FUNCTION sort_numbers(input_str)
  DEFINE mapping AS DICTIONARY
    'zero' -> 0,
    'one' -> 1,
    'two' -> 2,
    'three' -> 3,
    'four' -> 4,
    'five' -> 5,
    'six' -> 6,
    'seven' -> 7,
    'eight' -> 8,
    'nine' -> 9

  FUNCTION comparator(a, b)
    RETURN (mapping[a] < mapping[b])

  PROCEDURE quicksort(arr, left, right)
    IF left >= right THEN
      RETURN
    SET pivot_index TO left
    SET low TO left + 1
    SET high TO right
    WHILE low <= high DO
      WHILE low <= right AND comparator(arr[low], arr[pivot_index]) DO
        SET low TO low + 1
      END WHILE
      WHILE high > left AND NOT comparator(arr[high], arr[pivot_index]) DO
        SET high TO high - 1
      END WHILE
      IF low < high THEN
        SWAP arr[low], arr[high]
      END IF
    END WHILE
    SWAP arr[pivot_index], arr[high]
    CALL quicksort(arr, left, high - 1)
    CALL quicksort(arr, high + 1, right)
  END PROCEDURE

  SET tokens TO []
  FOR EACH token IN input_str SPLIT BY ' ' DO
    IF NOT (token = '') THEN
      APPEND token TO tokens
    END IF
  END FOR

  CALL quicksort(tokens, 0, LENGTH(tokens) - 1)

  SET result TO ''
  FOR EACH word IN tokens DO
    IF LENGTH(result) = 0 THEN
      SET result TO word
    ELSE
      SET result TO result + ' ' + word
    END IF
  END FOR

  RETURN result
END FUNCTION
```