```
FUNCTION count_nums(array_of_integers)
    FUNCTION digits_sum(integer_input)
        SET modifier TO 1
        SWITCH TRUE
            CASE integer_input < 0:
                SET integer_input TO 0 - integer_input
                SET modifier TO 0 - modifier
                BREAK
            DEFAULT:
                BREAK
        END SWITCH
        SET digits_array TO SPLIT(STRING(integer_input)) INTO ARRAY OF NUMBERS
        SET digits_array[0] TO digits_array[0] * modifier
        RETURN REDUCE(digits_array, 0, LAMBDA (acc, val) -> acc + val)
    END FUNCTION

    SET sum_collection TO ARRAY()
    SET index_var TO 0
    WHILE index_var < LENGTH(array_of_integers)
        APPEND digits_sum(array_of_integers[index_var]) TO sum_collection
        SET index_var TO index_var + 1
    END WHILE

    SET positive_collection TO ARRAY()
    FOR EACH value IN sum_collection DO
        IF NOT (value <= 0) THEN
            APPEND value TO positive_collection
        END IF
    END FOR

    RETURN COUNT(positive_collection)
END FUNCTION
```