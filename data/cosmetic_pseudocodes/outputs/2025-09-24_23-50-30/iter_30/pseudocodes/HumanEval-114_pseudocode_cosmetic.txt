```
FUNCTION minSubArraySum(elements_array)
  LET acc_sum BE 0
  LET max_accumulator BE 0
  LET idx BE 0

  WHILE idx < LENGTH(elements_array)
    LET current_val BE elements_array[idx]
    LET acc_sum BE acc_sum + (0 - current_val)

    SWITCH (acc_sum < 0)
      CASE true:
        LET acc_sum BE 0
      CASE false:
        ; ; 
    END SWITCH

    LET max_accumulator BE (max_accumulator > acc_sum) ? max_accumulator : acc_sum
    LET idx BE idx + 1
  END WHILE

  SWITCH (max_accumulator == 0)
    CASE true:
      LET negated_elements BE []
      LET i BE 0

      LOOP
        IF i == LENGTH(elements_array)
          BREAK
        END IF
        negated_elements.APPEND(0 - elements_array[i])
        LET i BE i + 1
      END LOOP

      LET max_accumulator BE negated_elements[0]
      LET j BE 1
      WHILE j < LENGTH(negated_elements)
        LET max_accumulator BE (max_accumulator > negated_elements[j]) ? max_accumulator : negated_elements[j]
        LET j BE j + 1
      END WHILE
    CASE false:
      ; ;
  END SWITCH

  LET result_value BE 0 - max_accumulator
  RETURN result_value
END FUNCTION
```