```
FUNCTION is_nested(string)
    LET indexes_open = []
    LET indexes_close = []
    
    LET iterator = 0
    WHILE iterator < LENGTH(string)
        SWITCH string[iterator]
            CASE '[':
                indexes_open <- indexes_open + [iterator]
            DEFAULT:
                indexes_close <- indexes_close + [iterator]
        iterator <- iterator + 1
    
    indexes_close <- REVERSE(indexes_close)
    LET count_pairs = 0
    LET pointer = 0
    LET close_length = LENGTH(indexes_close)
    
    FOR EACH element IN indexes_open
        IF pointer >= close_length
            BREAK
        IF element < indexes_close[pointer]
            count_pairs <- count_pairs + 1
            pointer <- pointer + 1
    
    RETURN count_pairs >= 2
END FUNCTION
```