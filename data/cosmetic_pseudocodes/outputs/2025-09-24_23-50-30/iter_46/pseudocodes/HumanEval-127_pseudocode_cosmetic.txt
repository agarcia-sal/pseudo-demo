```
FUNCTION intersection(paramA, paramB)
    FUNCTION is_prime(paramX)
        MATCH (NOT (paramX = 0) AND NOT (paramX = 1))
            CASE False:
                RETURN False
            CASE True:
                MATCH paramX
                    CASE 2:
                        RETURN True
                    CASE _:
                        FUNCTION check_divisor(paramY)
                            IF paramY = paramX THEN
                                RETURN True
                            ELSE
                                IF NOT (paramX MOD paramY = 0) THEN
                                    RETURN check_divisor(paramY + 1)
                                ELSE
                                    RETURN False
                                END IF
                            END IF
                        END FUNCTION
                        RETURN check_divisor(2)
                END MATCH
        END MATCH
    END FUNCTION

    LET varA = paramA[1]
    LET varB = paramB[1]
    LET varC = paramA[0]
    LET varD = paramB[0]

    LET varE = ((varA < varB) * varA) + ((varB <= varA) * varB)
    LET varF = ((varC > varD) * varC) + ((varD >= varC) * varD)
    LET varG = varE - varF

    IF (varG > (1 - 2)) AND (is_prime(varG) = True)
        RETURN "YES"
    ELSE
        RETURN "NO"
    END IF
END FUNCTION
```