```
FUNCTION reverse_delete(string_s, string_c)
    FUNCTION filter_chars(list_x, set_y, integer_z)
        IF z >= LENGTH(list_x) THEN
            RETURN EMPTY LIST
        ELSE
            SET u TO list_x[z]
            SET v TO filter_chars(list_x, set_y, z + (1))
            IF NOT (u IN set_y) THEN
                RETURN LIST_PREPEND(u, v)
            ELSE
                RETURN v
            END IF
        END IF
    END FUNCTION

    SET temp_l TO filter_chars(TO_LIST(string_s), TO_SET(string_c), 0)
    SET new_s TO STRING_JOIN(temp_l)
    FUNCTION is_palindrome(list_p, integer_q, integer_r)
        IF q >= r THEN
            RETURN TRUE
        ELSE
            IF NOT (list_p[q] = list_p[r]) THEN
                RETURN FALSE
            ELSE
                RETURN is_palindrome(list_p, q + 1, r - 1)
            END IF
        END IF
    END FUNCTION

    RETURN (new_s, is_palindrome(TO_LIST(new_s), 0, LENGTH(new_s) - 1))
END FUNCTION
```