```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_q)
        FUNCTION check_divisor(integer_r)
            IF NOT (integer_r GREATER THAN EQUAL TO 2 AND integer_r LESS THAN (MIN((CAST_TO_INTEGER((mathematical_functions_module.square_root(integer_q))) + 1), integer_q - 1) + 1))
                RETURN True
            IF integer_q MODULO integer_r EQUALS 0
                RETURN False
            RETURN check_divisor(integer_r + 1)
        IF integer_q LESS THAN 2
            RETURN False
        RETURN check_divisor(2)
    END FUNCTION

    SET list_fibonacci TO [0, 1]

    FUNCTION loop(accumulator_n)
        SET new_value TO (list_fibonacci[LENGTH(list_fibonacci) - 1]) + (list_fibonacci[LENGTH(list_fibonacci) - 2])
        APPEND new_value TO list_fibonacci
        IF is_prime(new_value)
            SET accumulator_n TO accumulator_n - 1
        IF accumulator_n EQUALS 0
            RETURN new_value
        ELSE
            RETURN loop(accumulator_n)
    RETURN loop(integer_n)
END FUNCTION
```