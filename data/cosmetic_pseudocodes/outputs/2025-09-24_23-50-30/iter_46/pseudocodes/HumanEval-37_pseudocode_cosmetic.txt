```
FUNCTION sort_even(list_of_elements)
    PROCEDURE build_answer(accumulator, left_list, right_list)
        SWITCH (left_list, right_list)
            CASE (head_left :: tail_left, head_right :: tail_right):
                RETURN build_answer(accumulator CONCAT [head_left, head_right], tail_left, tail_right)
            CASE (head_left :: tail_left, []):
                RETURN accumulator CONCAT [head_left]
            CASE ([], []):
                RETURN accumulator
        END SWITCH
    END PROCEDURE

    SET step_count TO 2
    SET even_list TO []
    SET idx_even TO 0
    WHILE idx_even * step_count < LENGTH(list_of_elements)
        SET even_list TO even_list CONCAT [list_of_elements[idx_even * step_count]]
        SET idx_even TO idx_even + 1
    END WHILE

    SET odd_list TO []
    SET idx_odd TO 0
    WHILE idx_odd * step_count + 1 < LENGTH(list_of_elements)
        SET odd_list TO odd_list CONCAT [list_of_elements[idx_odd * step_count + 1]]
        SET idx_odd TO idx_odd + 1
    END WHILE

    SET sorted_even_list TO even_list
    CALL sorted_even_list.SORT()  // sorts in non-decreasing order

    RETURN build_answer([], sorted_even_list, odd_list)
END FUNCTION
```