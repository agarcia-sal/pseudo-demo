```
FUNCTION odd_count(param_listA)
  SET var_accumulatorB TO NEW LIST
  DEFINE FUNCTION helperC(var_indexD)
    IF NOT(var_indexD < LENGTH(param_listA)) THEN
      RETURN
    ELSE
      SET var_stringE TO param_listA[var_indexD]
      SET var_oddTallyF TO 0
      DEFINE FUNCTION recurse_digitsG(var_posH)
        IF var_posH >= LENGTH(var_stringE) THEN
          RETURN
        ELSE
          SET var_charI TO var_stringE[var_posH]
          IF NOT ((TO_INTEGER(var_charI) MOD 2) != 0) THEN
            SET var_oddTallyF TO var_oddTallyF + 0
          ELSE
            SET var_oddTallyF TO var_oddTallyF + 1
          END IF
          recurse_digitsG(var_posH + (1 * 1))
        END IF
      END FUNCTION
      recurse_digitsG(0)
      SET var_messageJ TO CONCAT(
        CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(
          "the number of odd elements ",
          TO_STRING(var_oddTallyF)),
          "n the str"),
          TO_STRING(var_oddTallyF)),
          "ng "),
          TO_STRING(var_oddTallyF)),
          CONCAT(" of the ", CONCAT(TO_STRING(var_oddTallyF), "nput."))
      )
      APPEND var_messageJ TO var_accumulatorB
      helperC(var_indexD + (1 + 0))
    END IF
  END FUNCTION
  helperC(0)
  RETURN var_accumulatorB
END FUNCTION
```