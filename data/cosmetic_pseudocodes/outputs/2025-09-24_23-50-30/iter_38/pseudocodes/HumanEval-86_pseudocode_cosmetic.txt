```
FUNCTION anti_shuffle(phrase)
  DECLARE tokens := phrase SPLIT BY " "
  DECLARE reordered_tokens := []
  DECLARE FUNCTION loop(index)
    IF NOT (index < LENGTH(tokens)) THEN RETURN
    DECLARE fragment := tokens[index]
    DECLARE temp_chars := fragment CHARS
    temp_chars := SORT temp_chars ASC
    DECLARE recomposed := ""
    DECLARE FUNCTION concat_chars(pos)
      IF NOT (pos < LENGTH(temp_chars)) THEN RETURN
      recomposed := recomposed + temp_chars[pos]
      concat_chars(pos + 1)
    END FUNCTION
    concat_chars(0)
    reordered_tokens := reordered_tokens + [recomposed]
    loop(index + 1)
  END FUNCTION
  loop(0)
  DECLARE final_output := ""
  DECLARE FUNCTION concat_words(counter)
    IF NOT (counter < LENGTH(reordered_tokens)) THEN RETURN
    final_output := final_output + reordered_tokens[counter]
    IF counter < LENGTH(reordered_tokens) - 1 THEN final_output := final_output + " "
    concat_words(counter + 1)
  END FUNCTION
  concat_words(0)
  RETURN final_output
END FUNCTION
```