```python
"""
You are given a piece of pseudocode describing one or more functions and/or classes.
Translate the entire pseudocode faithfully into fully working Python code according to these requirements:

- Preserve EXACTLY all function names, parameter names, class names, method names, and their structure.
- Keep class and object hierarchies identical to the pseudocode, with no renaming or restructuring.
- Provide precise Python type hints for all parameters and return types, inferred logically.
- Include all necessary imports *at the top* of the code block to ensure correctness and efficiency. Use only standard libraries or well-established, widely used packages if they meaningfully improve clarity, performance, or correctness.
- Handle all edge, boundary, or implicit cases robustly, preserving clarity without excess complexity.
- Write clean, idiomatic, and efficient Python code using language features suited to the task (e.g., comprehensions, built-ins, standard library modules).
- Add minimal, focused inline comments only to clarify nonobvious parts for an experienced Python reader.
- Do NOT include print statements, debugging code, test scaffolds, or any extraneous text outside the code block.
- Return ONLY a single Python code block with no additional text or explanation.
- Ensure the code runs correctly within 5 seconds on typical inputs.

Your output must be enclosed in a single Python code block formatted as:

```python
# your code here
```

The goal is a robust, clear, idiomatic, and fully functional Python translation that matches the pseudocode precisely, maximizes correctness and readability, and handles all cases gracefully.
"""
```