```
FUNCTION is_nested(string)
    INITIALIZE start_positions AS empty sequence
    INITIALIZE end_positions AS empty queue
    FOR pointer FROM 0 TO LENGTH(string) - 1 DO
        SWITCH string[pointer]
            CASE '[' THEN
                ENQUEUE pointer INTO start_positions
            DEFAULT
                ENQUEUE pointer INTO end_positions
    END FOR
    CONVERT end_positions TO stack_structure
    INITIALIZE matched_pairs TO 0
    INITIALIZE runner TO 0
    DEFINE end_length AS SIZE OF end_positions
    FOR each pos IN start_positions DO
        IF runner < end_length THEN
            IF pos < end_positions[runner] THEN
                matched_pairs := matched_pairs + 1
                runner := runner + 1
            END IF
        END IF
    END FOR
    RETURN matched_pairs >= 2
END FUNCTION
```