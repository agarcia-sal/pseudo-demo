```
FUNCTION encode(inputText)
    DECLARE vowelSet AS SET CONTAINING 'a','e','i','o','u','A','E','I','O','U'
    DECLARE replacementMap AS EMPTY MAP
    FOR EACH ch IN vowelSet
        SET replacementMap[ch] TO CHARACTER_WITH_ASCII(ch_ascii := ASCII_VALUE(ch) + 2)
    END FOR
    DECLARE swappedText AS EMPTY STRING
    FOR idx FROM 0 TO LENGTH(inputText) - 1
        LET currentChar BE CHARACTER_AT(inputText, idx)
        IF IS_LOWERCASE(currentChar)
            SET flippedChar TO TO_UPPERCASE(currentChar)
        ELSE IF IS_UPPERCASE(currentChar)
            SET flippedChar TO TO_LOWERCASE(currentChar)
        ELSE
            SET flippedChar TO currentChar
        END IF
        APPEND flippedChar TO swappedText
    END FOR
    DECLARE transformedText AS EMPTY STRING
    FOR EACH sym IN swappedText
        IF sym IN vowelSet
            APPEND replacementMap[sym] TO transformedText
        ELSE
            APPEND sym TO transformedText
        END IF
    END FOR
    RETURN transformedText
END FUNCTION
```