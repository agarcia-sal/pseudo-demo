```
FUNCTION sort_numbers(string_of_number_words)
    LET mapping_dictionary BE MAP OF
        'zero' => 0,
        'one' => 1,
        'two' => 2,
        'three' => 3,
        'four' => 4,
        'five' => 5,
        'six' => 6,
        'seven' => 7,
        'eight' => 8,
        'nine' => 9

    LET raw_tokens BE SPLIT string_of_number_words BY " "
    LET filtered_tokens BE EMPTY LIST
    LET index_counter BE 0
    WHILE index_counter < LENGTH(raw_tokens)
        IF LENGTH(raw_tokens[index_counter]) <> 0 THEN
            APPEND raw_tokens[index_counter] TO filtered_tokens
        END IF
        SET index_counter TO index_counter + 1
    END WHILE

    DEFINE FUNCTION comparison_key(word)
        RETURN mapping_dictionary[word]
    END FUNCTION

    LET position BE 1
    LET sorted_collection BE filtered_tokens
    WHILE position < LENGTH(sorted_collection)
        LET current_position BE position
        WHILE current_position > 0 AND comparison_key(sorted_collection[current_position - 1]) > comparison_key(sorted_collection[current_position])
            LET temp_word BE sorted_collection[current_position]
            SET sorted_collection[current_position] TO sorted_collection[current_position - 1]
            SET sorted_collection[current_position - 1] TO temp_word
            SET current_position TO current_position - 1
        END WHILE
        SET position TO position + 1
    END WHILE

    LET result_string BE ""
    LET joiner_index BE 0
    WHILE joiner_index < LENGTH(sorted_collection)
        SET result_string TO result_string + sorted_collection[joiner_index]
        IF joiner_index < LENGTH(sorted_collection) - 1 THEN
            SET result_string TO result_string + " "
        END IF
        SET joiner_index TO joiner_index + 1
    END WHILE

    RETURN result_string
END FUNCTION
```