```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_q)
        SWITCH
            CASE integer_q < 2:
                RETURN False
        END SWITCH

        FUNCTION prime_check_helper(integer_r, integer_s)
            IF integer_r > integer_s THEN
                RETURN True
            END IF

            IF (integer_q MOD integer_r) = 0 THEN
                RETURN False
            ELSE
                RETURN prime_check_helper(integer_r + 1, integer_s)
            END IF
        END FUNCTION

        RETURN prime_check_helper(2, MIN((FLOOR(SQRT(integer_q)) + 1), (integer_q - 1)))
    END FUNCTION

    SET array_fibonacci TO ARRAY OF [0, 1]

    LABEL generate_next:
        LET last_index := LENGTH(array_fibonacci) - 1
        LET new_value := array_fibonacci[last_index] + array_fibonacci[last_index - 1]
        APPEND new_value TO array_fibonacci

        IF is_prime(array_fibonacci[LENGTH(array_fibonacci) - 1]) THEN
            SET integer_n TO integer_n - 1
        END IF

        IF integer_n = 0 THEN
            RETURN array_fibonacci[LENGTH(array_fibonacci) - 1]
        END IF

        GOTO generate_next
END FUNCTION
```