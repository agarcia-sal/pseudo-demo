```
FUNCTION reverse_delete(string_s, string_c)
    FUNCTION filter_and_build(input_p, filter_q, output_r)
        IF input_p IS EMPTY THEN
            RETURN output_r
        ELSE
            IF NOT (HEAD OF input_p IS IN filter_q) THEN
                RETURN filter_and_build(TAIL OF input_p, filter_q, CONCAT(output_r, HEAD OF input_p))
            ELSE
                RETURN filter_and_build(TAIL OF input_p, filter_q, output_r)
            END IF
        END IF
    END FUNCTION

    SET cleaned_v TO filter_and_build(string_s, string_c, EMPTY_STRING)

    FUNCTION is_palindrome_check(seq_x, idx_y, idx_z)
        IF idx_y >= idx_z THEN
            RETURN TRUE
        ELSE
            IF seq_x[idx_y] != seq_x[idx_z] THEN
                RETURN FALSE
            ELSE
                RETURN is_palindrome_check(seq_x, idx_y + 1, idx_z - 1)
            END IF
        END IF
    END FUNCTION

    RETURN TUPLE OF (cleaned_v, is_palindrome_check(cleaned_v, 0, LENGTH(cleaned_v) - 1))
END FUNCTION
```