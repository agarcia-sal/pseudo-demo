```
FUNCTION max_fill(grid, capacity)
    IMPORT math
    FUNCTION inner_aggregate(blocks, quota)
        VAR total_accumulator := 0
        VAR marker := 0
        WHILE marker < LENGTH(blocks) DO
            total_accumulator := total_accumulator + blocks[marker]
            marker := marker + 1
        END WHILE
        RETURN total_accumulator
    END FUNCTION

    VAR accumulator_indices := 0
    VAR computed_results := NEW ARRAY OF LENGTH(grid)
    WHILE accumulator_indices < LENGTH(grid) DO
        VAR local_sum := inner_aggregate(grid[accumulator_indices], capacity)
        VAR local_quotient := local_sum / quota
        VAR local_ceil := 0
        IF local_quotient - FLOOR(local_quotient) > 0 THEN
            local_ceil := FLOOR(local_quotient) + 1
        ELSE
            local_ceil := FLOOR(local_quotient)
        END IF
        computed_results[accumulator_indices] := local_ceil
        accumulator_indices := accumulator_indices + 1
    END WHILE

    VAR index := 0
    VAR final_result := 0
    WHILE index < LENGTH(computed_results) DO
        final_result := final_result + computed_results[index]
        index := index + 1
    END WHILE

    RETURN final_result
END FUNCTION
```