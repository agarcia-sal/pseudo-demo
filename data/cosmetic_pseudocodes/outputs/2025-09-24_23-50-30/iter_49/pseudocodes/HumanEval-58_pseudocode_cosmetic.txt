```
FUNCTION common(collectionA, collectionB)
  FUNC seekIntersection(indexAlpha, indexBeta, accumulatorMap)
    IF NOT (indexAlpha < LENGTH(collectionA)) THEN
      RETURN accumulatorMap
    ELSE
      IF NOT (indexBeta < LENGTH(collectionB)) THEN
        RETURN seekIntersection(indexAlpha + 1, 0, accumulatorMap)
      ELSE
        SELECT CASE TRUE
          CASE (collectionA[indexAlpha] = collectionB[indexBeta])
            LET updatedMap = MAP_INSERT(accumulatorMap, collectionA[indexAlpha], TRUE)
            RETURN seekIntersection(indexAlpha, indexBeta + 1, updatedMap)
          DEFAULT
            RETURN seekIntersection(indexAlpha, indexBeta + 1, accumulatorMap)
        END SELECT
      END IF
    END IF
  END FUNC

  LET foundMap = seekIntersection(0, 0, EMPTY_MAP)
  LET keysList = MAP_KEYS(foundMap)
  RETURN SORTED(keysList)
END FUNCTION
```