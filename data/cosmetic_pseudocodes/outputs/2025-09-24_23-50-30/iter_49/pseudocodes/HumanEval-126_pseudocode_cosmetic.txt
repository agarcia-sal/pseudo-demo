```
FUNCTION is_sorted(list_of_numbers)
  FUNCTION accumulate_counts(index, tally)
    IF index >= LENGTH(list_of_numbers) THEN
      RETURN tally
    ELSE
      SET current_item TO list_of_numbers[index]
      IF current_item IN tally THEN
        SET tally[current_item] TO tally[current_item] + 1
      ELSE
        SET tally[current_item] TO 1
      ENDIF
      RETURN accumulate_counts(index + 1, tally)
    ENDIF
  END FUNCTION

  FUNCTION has_value_exceeding_two(keys, map)
    FOR idx FROM 0 TO LENGTH(keys) - 1 DO
      IF map[keys[idx]] > 2 THEN RETURN True
    ENDFOR
    RETURN False
  END FUNCTION

  FUNCTION non_decreasing_check(pos)
    IF pos >= LENGTH(list_of_numbers) THEN
      RETURN True
    ELSE IF list_of_numbers[pos - 1] <= list_of_numbers[pos] THEN
      RETURN non_decreasing_check(pos + 1)
    ELSE
      RETURN False
    ENDIF
  END FUNCTION

  SET accumulated_counts TO accumulate_counts(0, EMPTY_DICTIONARY)
  SET unique_keys TO NEW_ARRAY_FROM_KEYS(accumulated_counts)

  IF has_value_exceeding_two(unique_keys, accumulated_counts) THEN
    RETURN False
  ELSE
    RETURN non_decreasing_check(1)
  ENDIF
END FUNCTION
```