```
FUNCTION separate_paren_groups(string_of_parentheses)
    
    FUNCTION accumulate_groups(index_accumulator, accumulation_list, depth_counter, current_buffer)
        IF index_accumulator >= LENGTH(string_of_parentheses) THEN
            RETURN accumulation_list
        END IF

        LET current_char_alias BE string_of_parentheses[index_accumulator]

        SWITCH (TRUE)
            CASE current_char_alias = '(':
                LET incremented_depth BE depth_counter + 1
                LET extended_buffer BE current_buffer + current_char_alias
                RETURN accumulate_groups(index_accumulator + 1, accumulation_list, incremented_depth, extended_buffer)

            CASE current_char_alias = ')':
                LET decremented_depth BE depth_counter - 1
                LET extended_buffer BE current_buffer + current_char_alias
                IF decremented_depth = 0 THEN
                    LET appended_list BE accumulation_list + [extended_buffer]
                    RETURN accumulate_groups(index_accumulator + 1, appended_list, decremented_depth, "")
                ELSE
                    RETURN accumulate_groups(index_accumulator + 1, accumulation_list, decremented_depth, extended_buffer)
                END IF

            DEFAULT:
                RETURN accumulate_groups(index_accumulator + 1, accumulation_list, depth_counter, current_buffer)
        END SWITCH
    END FUNCTION

    RETURN accumulate_groups(0, [], 0, "")
END FUNCTION
```