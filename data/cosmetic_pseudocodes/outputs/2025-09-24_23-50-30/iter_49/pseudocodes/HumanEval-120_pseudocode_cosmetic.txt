```
FUNCTION maximum(collection_of_numbers, count_limit)
  LABEL start:
    IF NOT (count_limit != 0) THEN
      RETURN []
    END IF

    CALL sort_non_decreasing(collection_of_numbers)

    FUNCTION slice_from_end(data_source, slice_length)
      LABEL recur:
        IF slice_length <= 0 THEN
          RETURN []
        ELSE
          SET last_index TO LENGTH(data_source) - 1
          RETURN concatenation_of( [data_source[last_index]] , slice_from_end(subarray(data_source,0,last_index), slice_length - 1) )
        END IF
      END LABEL recur
    END FUNCTION

    RETURN slice_from_end(collection_of_numbers, count_limit)
END FUNCTION


FUNCTION sort_non_decreasing(input_array)
  LABEL outer_loop:
    SET outer_counter TO 0
    WHILE outer_counter < LENGTH(input_array) - 1 DO
      SET inner_counter TO 0
      WHILE inner_counter < LENGTH(input_array) - outer_counter - 1 DO
        IF input_array[inner_counter] > input_array[inner_counter + 1] THEN
          SET temp_var TO input_array[inner_counter]
          input_array[inner_counter] = input_array[inner_counter + 1]
          input_array[inner_counter + 1] = temp_var
        END IF
        SET inner_counter TO inner_counter + 1
      END WHILE
      SET outer_counter TO outer_counter + 1
    END WHILE
END FUNCTION
```