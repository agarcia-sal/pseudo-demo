```
FUNCTION sort_array(alpha_list)
	DEFINE count_ones_in_binary = FUNCTION(omega):
		DEFINE beta_list = []
		DEFINE gamma_val = STRINGIFY(omega, 2)
		DEFINE delta_index = 0
		WHILE delta_index < LENGTH(gamma_val):
			IF gamma_val[delta_index] == '1':
				beta_list = beta_list + ['x']
			ENDIF
			delta_index = delta_index + 1
		ENDWHILE
		RETURN LENGTH(beta_list)
	END FUNCTION
	
	DEFINE epsilon_sort = FUNCTION(input_seq):
		DEFINE zeta_stash = input_seq
		DEFINE eta_sorted = []
		WHILE LENGTH(zeta_stash) > 0:
			DEFINE theta_candidate = zeta_stash[0]
			FOR i FROM 1 TO LENGTH(zeta_stash) - 1:
				IF (zeta_stash[i] < theta_candidate):
					theta_candidate = zeta_stash[i]
				ENDIF
			ENDFOR
			eta_sorted = eta_sorted + [theta_candidate]
			DEFINE i_remove = 0
			WHILE i_remove < LENGTH(zeta_stash):
				IF zeta_stash[i_remove] == theta_candidate:
					REMOVE_ELEMENT_AT(zeta_stash, i_remove)
					BREAK
				ENDIF
				i_remove = i_remove + 1
			ENDWHILE
		ENDWHILE
		RETURN eta_sorted
	END FUNCTION

	DEFINE iota_sorted_decimal = epsilon_sort(alpha_list)

	DEFINE kappa_sorted_final = []
	DEFINE lambda_idx = 0
	WHILE lambda_idx < LENGTH(iota_sorted_decimal):
		DEFINE mu_current = iota_sorted_decimal[lambda_idx]
		DEFINE nu_insert_pos = 0
		WHILE nu_insert_pos < LENGTH(kappa_sorted_final):
			IF count_ones_in_binary(mu_current) < count_ones_in_binary(kappa_sorted_final[nu_insert_pos]):
				BREAK
			ENDIF
			nu_insert_pos = nu_insert_pos + 1
		ENDWHILE
		DEFINE xi_front = SLICE(kappa_sorted_final, 0, nu_insert_pos)
		DEFINE omicron_back = SLICE(kappa_sorted_final, nu_insert_pos, LENGTH(kappa_sorted_final))
		kappa_sorted_final = xi_front + [mu_current] + omicron_back
		lambda_idx = lambda_idx + 1
	ENDWHILE

	RETURN kappa_sorted_final
END FUNCTION
```