```
FUNCTION prod_signs(array_of_integers)
  DEFINE compute_sign(accumulator_flag, index_position)
    IF index_position = LENGTH(array_of_integers) THEN
      RETURN (accumulator_flag = 0) ? 0 : ((accumulator_flag MOD 2) = 0 ? 1 : -1)
    ELSE
      DEFINE current_val = array_of_integers[index_position]
      DEFINE updated_flag = 
        (current_val = 0) ? 0 :
        ( (current_val < 0) ? accumulator_flag + 1 : accumulator_flag )
      RETURN compute_sign(updated_flag, index_position + 1)
    END IF
  END DEFINE

  IF LENGTH(array_of_integers) = 0 THEN RETURN None END IF

  LET sign_indicator = compute_sign(0, 0)

  DEFINE recursive_sum(position, accumulator_sum)
    IF position = LENGTH(array_of_integers) THEN RETURN accumulator_sum
    ELSE
      RETURN recursive_sum(position + 1, accumulator_sum + (array_of_integers[position] < 0 ? -array_of_integers[position] : array_of_integers[position]))
    END IF
  END DEFINE

  LET magnitude_sum = recursive_sum(0, 0)

  RETURN sign_indicator * magnitude_sum
END FUNCTION
```