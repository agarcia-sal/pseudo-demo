```
FUNCTION by_length(obtained_array)
  SET alphanumeric_map TO {
    one_key: 1 => "One",
    two_key: 2 => "Two",
    three_key: 3 => "Three",
    four_key: 4 => "Four",
    five_key: 5 => "Five",
    six_key: 6 => "Six",
    seven_key: 7 => "Seven",
    eight_key: 8 => "Eight",
    nine_key: 9 => "Nine"
  }

  FUNCTION recursive_accumulate(descending_arr, counting_index, accumulated_arr)
    IF counting_index < 0 THEN
      RETURN accumulated_arr
    ELSE
      SET current_value TO descending_arr[counting_index]
      IF alphanumeric_map HAS_KEY current_value THEN
        SET updated_arr TO accumulated_arr + [ alphanumeric_map[current_value] ]
      ELSE
        SET updated_arr TO accumulated_arr
      END IF
      RETURN recursive_accumulate(descending_arr, counting_index - 1, updated_arr)
    END IF
  END FUNCTION

  SET descending_order_arr TO SORT(obtained_array) WITH COMPARATOR (x, y) => IF x >= y THEN -1 ELSE 1
  RETURN recursive_accumulate(descending_order_arr, LENGTH(descending_order_arr) - 1, [])
END FUNCTION
```