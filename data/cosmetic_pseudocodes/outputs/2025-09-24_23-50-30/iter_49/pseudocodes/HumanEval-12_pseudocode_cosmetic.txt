```
FUNCTION longest(array_of_texts)
    DEFINE FUNCTION find_maximum_length(index_pointer, current_max_length)
        IF NOT (index_pointer < LENGTH_OF(array_of_texts))
            RETURN current_max_length
        ELSE
            SET candidate_length TO LENGTH_OF(array_of_texts[index_pointer])
            SET updated_max TO (candidate_length > current_max_length) * candidate_length + (candidate_length <= current_max_length) * current_max_length
            RETURN find_maximum_length(index_pointer + 1, updated_max)
        END IF
    END FUNCTION

    DEFINE FUNCTION locate_longest_element(position_pointer, target_length)
        SWITCH position_pointer
            CASE IS_GREATER_OR_EQUAL_TO LENGTH_OF(array_of_texts):
                RETURN None
            DEFAULT:
                IF NOT (LENGTH_OF(array_of_texts[position_pointer]) - target_length)
                    RETURN array_of_texts[position_pointer]
                ELSE
                    RETURN locate_longest_element(position_pointer + 1, target_length)
                END IF
        END SWITCH
    END FUNCTION

    RETURN locate_longest_element(0, find_maximum_length(0, 0))
END FUNCTION
```