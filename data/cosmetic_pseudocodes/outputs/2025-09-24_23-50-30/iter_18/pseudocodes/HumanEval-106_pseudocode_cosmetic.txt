```
FUNCTION f(integer_n)
	result_list ← []
	integer_k ← 1
	WHILE integer_k ≤ integer_n DO
		IF NOT ((integer_k DIV 2) * 2 = integer_k) THEN
			accumulator_sum ← 0
			integer_m ← 1
			WHILE integer_m ≤ integer_k DO
				accumulator_sum ← accumulator_sum + integer_m
				integer_m ← integer_m + 1
			END WHILE
			result_list ← result_list + [accumulator_sum]
			integer_k ← integer_k + 1
			CONTINUE
		END IF
		accumulator_product ← 1
		integer_p ← 1
		WHILE integer_p ≤ integer_k DO
			accumulator_product ← accumulator_product * integer_p
			integer_p ← integer_p + 1
		END WHILE
		result_list ← result_list + [accumulator_product]
		integer_k ← integer_k + 1
	END WHILE
	RETURN result_list
END FUNCTION
```