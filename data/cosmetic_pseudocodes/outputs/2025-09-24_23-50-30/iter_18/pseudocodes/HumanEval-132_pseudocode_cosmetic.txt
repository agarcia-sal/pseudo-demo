```
FUNCTION is_nested(string)
    DEFINE find_indexes(current, limit, acc_open, acc_close)
        IF current EQUALS limit
            RETURN (acc_open, acc_close)
        LET ch BE string[current]
        IF ch NOT EQUAL TO '['
            SET acc_close TO acc_close + [current]
        ELSE
            SET acc_open TO acc_open + [current]
        RETURN find_indexes(current + 1, limit, acc_open, acc_close)
    ENDDEFINE

    LET (opens, closes_orig) BE find_indexes(0, LENGTH OF string, [], [])
    LET closes BE []
    WHILE LENGTH OF closes_orig GREATER THAN 0
        SET closes TO closes + [closes_orig[LENGTH OF closes_orig - 1]]
        SET closes_orig TO SLICE closes_orig FROM 0 TO LENGTH OF closes_orig - 1

    LET count_found TO 0
    LET pos_close TO 0
    LET close_len TO LENGTH OF closes
    FOR idx IN opens
        IF pos_close LESS THAN close_len
            IF NOT (idx GREATER OR EQUAL TO closes[pos_close])
                SET count_found TO count_found + 1
                SET pos_close TO pos_close + 1

    RETURN count_found GREATER OR EQUAL TO 2
END FUNCTION
```