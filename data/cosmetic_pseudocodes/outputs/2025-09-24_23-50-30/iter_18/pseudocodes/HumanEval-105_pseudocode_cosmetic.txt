```
FUNCTION by_length(quota)
    LET mapping := EMPTY DICTIONARY
    LET temp_val := 1
    WHILE temp_val <= 9
        IF temp_val = 1 THEN mapping[temp_val] := "One"
        IF temp_val = 2 THEN mapping[temp_val] := "Two"
        IF temp_val = 3 THEN mapping[temp_val] := "Three"
        IF temp_val = 4 THEN mapping[temp_val] := "Four"
        IF temp_val = 5 THEN mapping[temp_val] := "Five"
        IF temp_val = 6 THEN mapping[temp_val] := "Six"
        IF temp_val = 7 THEN mapping[temp_val] := "Seven"
        IF temp_val = 8 THEN mapping[temp_val] := "Eight"
        IF temp_val = 9 THEN mapping[temp_val] := "Nine"
        SET temp_val := temp_val + 1
    END WHILE

    LET descending_sorted := EMPTY ARRAY
    LET indices := 0
    WHILE indices < LENGTH OF quota
        LET j := indices + 1
        WHILE j < LENGTH OF quota
            IF quota[j] > quota[indices]
                LET tmp := quota[indices]
                SET quota[indices] := quota[j]
                SET quota[j] := tmp
            END IF
            SET j := j + 1
        END WHILE
        SET indices := indices + 1
    END WHILE

    LET results := EMPTY DICTIONARY
    LET counter := 0
    WHILE counter < LENGTH OF quota
        LET val := quota[counter]
        IF val IN mapping
            SET results[counter] := mapping[val]
        END IF
        SET counter := counter + 1
    END WHILE

    LET final_list := EMPTY ARRAY
    LET key := 0
    WHILE key < LENGTH OF quota
        IF key IN results
            APPEND results[key] TO final_list
        END IF
        SET key := key + 1
    END WHILE

    RETURN final_list
END FUNCTION
```