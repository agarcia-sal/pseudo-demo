```
FUNCTION sort_array(list)
	WHILE NOT (LENGTH OF list = 0)
		EXIT
	END WHILE
	IF NOT (LENGTH OF list <> 0)
		RETURN []
	END IF;

	SET temp_a TO list[0];
	SET temp_b TO list[LENGTH OF list - 1];
	SET temp_c TO ((temp_a + temp_b) MOD 2) = 0;

	SET temp_d TO temp_c;
	IF temp_d THEN
		SET temp_e TO TRUE
	ELSE
		SET temp_e TO FALSE
	END IF;

	FUNCTION iterative_sort(mutable_list, flag)
		SET stack TO [(mutable_list, 0, LENGTH OF mutable_list - 1)];
		LOOP
			IF LENGTH OF stack = 0 THEN
				EXIT LOOP
			END IF;
			SET current TO stack[0];
			REMOVE stack[0];
			SET arrt TO current[0];
			SET left TO current[1];
			SET right TO current[2];
			IF left >= right THEN
				CONTINUE LOOP
			END IF;
			SET pivot TO arrt[right];
			SET i TO left - 1;
			FOR j FROM left TO right - 1 STEP 1
				IF (flag AND arrt[j] >= pivot) OR (NOT flag AND arrt[j] <= pivot) THEN
					SET i TO i + 1;
					SET temp TO arrt[i];
					SET arrt[i] TO arrt[j];
					SET arrt[j] TO temp
				END IF
			END FOR;
			SET temp TO arrt[i + 1];
			SET arrt[i + 1] TO arrt[right];
			SET arrt[right] TO temp;

			SET pi TO i + 1;
			PUSH (arrt, left, pi - 1) INTO stack;
			PUSH (arrt, pi + 1, right) INTO stack
		END LOOP;
		RETURN mutable_list
	END FUNCTION

	RETURN iterative_sort(list, temp_e)
```