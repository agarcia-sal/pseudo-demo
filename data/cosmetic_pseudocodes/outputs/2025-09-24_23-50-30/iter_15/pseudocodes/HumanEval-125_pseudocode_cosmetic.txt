```
FUNCTION split_words(text)
  DECLARE temp_list AS empty list
  DECLARE idx AS INTEGER = 0
  LOOP
    IF idx >= LENGTH(text) THEN BREAK ENDIF
    IF text[idx] = ' ' THEN
      RETURN SPLIT(text, whitespace)
    ENDIF
    idx = idx + 1
  ENDLOOP

  idx = 0
  DECLARE temp_string AS EMPTY STRING
  LOOP
    IF idx >= LENGTH(text) THEN BREAK ENDIF
    IF text[idx] = ',' THEN
      temp_string = text
      BREAK
    ENDIF
    idx = idx + 1
  ENDLOOP

  IF LENGTH(temp_string) > 0 THEN
    DECLARE replaced_string AS EMPTY STRING
    DECLARE pos AS INTEGER = 0
    WHILE pos < LENGTH(temp_string)
      IF temp_string[pos] = ',' THEN
        replaced_string = CONCATENATE(replaced_string, ' ')
      ELSE
        replaced_string = CONCATENATE(replaced_string, temp_string[pos])
      ENDIF
      pos = pos + 1
    ENDWHILE
    
    DECLARE result_list AS LIST = SPLIT(replaced_string, whitespace)
    RETURN result_list
  ENDIF

  DECLARE count_var AS INTEGER = 0
  DECLARE pointer AS INTEGER = 0
  WHILE pointer < LENGTH(text)
    DECLARE curr_char AS CHARACTER = text[pointer]
    DECLARE ascii_val AS INTEGER = ASCII(curr_char)
    DECLARE is_lower AS BOOLEAN = (curr_char >= 'a') AND (curr_char <= 'z')
    DECLARE parity_check AS BOOLEAN = ((ascii_val MOD 2) = 0)
    IF is_lower AND parity_check THEN
      count_var = count_var + 1
    ENDIF
    pointer = pointer + 1
  ENDWHILE

  RETURN count_var
END FUNCTION
```