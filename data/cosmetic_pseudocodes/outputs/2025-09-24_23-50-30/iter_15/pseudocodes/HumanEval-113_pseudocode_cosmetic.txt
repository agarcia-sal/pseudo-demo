```
FUNCTION odd_count(list_of_strings)
  DECLARE accumulator_queue AS empty queue

  DECLARE idx_outer AS 0
  DECLARE total_outer AS LENGTH OF list_of_strings

  WHILE idx_outer < total_outer
    DECLARE current_str AS ELEMENT AT idx_outer FROM list_of_strings

    DECLARE iter_inner AS 0
    DECLARE length_inner AS LENGTH OF current_str
    DECLARE tally_odd_values AS 0

    WHILE iter_inner < length_inner
      DECLARE item_char AS ELEMENT AT iter_inner FROM current_str
      DECLARE numeric_val AS item_char CONVERTED TO integer

      IF NOT (numeric_val MOD 2 = 0)
        tally_odd_values ← tally_odd_values + 1
      END IF

      iter_inner ← iter_inner + 1
    END WHILE

    DECLARE part_a AS CONCATENATE("the number of odd elements ", tally_odd_values)
    DECLARE part_b AS CONCATENATE("n the str", tally_odd_values)
    DECLARE part_c AS CONCATENATE("ng ", tally_odd_values)
    DECLARE part_d AS CONCATENATE(" of the ", tally_odd_values)
    DECLARE part_e AS CONCATENATE("nput.", "")

    DECLARE combined_message AS part_a
    combined_message ← combined_message CONCATENATED WITH part_b
    combined_message ← combined_message CONCATENATED WITH part_c
    combined_message ← combined_message CONCATENATED WITH part_d
    combined_message ← combined_message CONCATENATED WITH part_e

    ENQUEUE combined_message INTO accumulator_queue

    idx_outer ← idx_outer + 1
  END WHILE

  DECLARE final_collection AS empty list
  WHILE LENGTH OF accumulator_queue > 0
    DECLARE temp_str AS DEQUEUE FROM accumulator_queue
    APPEND temp_str TO final_collection
  END WHILE

  RETURN final_collection
END FUNCTION
```