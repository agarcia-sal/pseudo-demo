``` 
FUNCTION encode(original)
    ASSIGN vowel_set ← LIST ['a','e','i','o','u','A','E','I','O','U']
    
    DECLARE shift_map ← EMPTY MAP
    FOR idx FROM 0 TO LENGTH(vowel_set) - 1 DO
        LET c ← vowel_set[idx]
        LET n ← ASCII_VALUE(c)
        LET shifted_char ← CHARACTER(n + 2)
        shift_map ADD KEY c WITH VALUE shifted_char
    END FOR

    DECLARE swapped ← EMPTY STRING
    FOR each_char IN original DO
        IF each_char IS LOWERCASE(each_char) THEN
            LET swapped_char ← UPPERCASE(each_char)
        ELSE IF each_char IS UPPERCASE(each_char) THEN
            LET swapped_char ← LOWERCASE(each_char)
        ELSE
            LET swapped_char ← each_char
        END IF
        swapped APPEND swapped_char
    END FOR

    DECLARE result ← EMPTY STRING
    FOR char IN swapped DO
        IF shift_map CONTAINS KEY char THEN
            LET replacement ← shift_map[char]
            result APPEND replacement
        ELSE
            result APPEND char
        END IF
    END FOR

    RETURN result
END FUNCTION
```