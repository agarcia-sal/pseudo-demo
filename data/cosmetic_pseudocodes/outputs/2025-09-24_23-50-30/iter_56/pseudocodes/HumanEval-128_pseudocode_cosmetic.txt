```
FUNCTION prod_signs(seq_integers)
    LABEL start_check_empty:
        CASE (LEN(seq_integers) == 0)
            OF true: RETURN None
            OF false: GOTO start_zero_check
        END CASE
    LABEL start_zero_check:
        VAR zero_detected = false
        FOR idx FROM 0 TO LEN(seq_integers) - 1 DO
            IF (seq_integers[idx] == 0) THEN
                zero_detected = true
                BREAK
            END IF
        END FOR
        VAR val_sign_product = 0 IF zero_detected ELSE 1
        IF NOT zero_detected THEN
            VAR neg_count = 0
            LABEL count_neg_loop:
                VAR i_iter = 0
                WHILE i_iter < LEN(seq_integers) DO
                    IF NOT (seq_integers[i_iter] >= 0) THEN
                        neg_count = neg_count + 1
                    END IF
                    i_iter = i_iter + 1
                END WHILE
            END LABEL
            val_sign_product = (-1) ^ neg_count
        END IF
    VAR val_sum_magnitudes = 0
    FOR index_var FROM 0 TO LEN(seq_integers) - 1 DO
        val_sum_magnitudes = val_sum_magnitudes + (IF seq_integers[index_var] < 0 THEN (-seq_integers[index_var]) ELSE seq_integers[index_var])
    END FOR
    RETURN val_sign_product * val_sum_magnitudes
END FUNCTION
```