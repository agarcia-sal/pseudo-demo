```
FUNCTION is_nested(alpha)
	opening_indexes <- []
	closing_indexes <- []
	
	INDEXER <- 0
	LOOP_LOOP: WHILE INDEXER != LENGTH(alpha) DO
		(CHAR_CURR := alpha[INDEXER]) == '['
			? (opening_indexes <- opening_indexes + [INDEXER])
			: (closing_indexes <- closing_indexes + [INDEXER])
		INDEXER <- INDEXER + 1
	END WHILE
	
	closing_indexes <- REVERSE(closing_indexes)
	
	VAR count_accumulation <- 0
	VAR pointer_closing <- 0
	VAR total_closing <- LENGTH(closing_indexes)

	FUNCTION loop_condition(opening_seq, closing_seq, idx_ptr, accum)
		RETURN (idx_ptr < total_closing) AND (opening_seq[idx_ptr] < closing_seq[accum])
	END FUNCTION

	FUNCTION walk_positions(pos_open, pos_close, idx_ptr, accum)
		IF idx_ptr >= LENGTH(pos_open) THEN
			RETURN (accum >= 2)
		ELSE
			IF (idx_ptr < total_closing) AND (pos_open[idx_ptr] < pos_close[accum]) THEN
				RETURN walk_positions(pos_open, pos_close, idx_ptr + 1, accum + 1)
			ELSE
				RETURN walk_positions(pos_open, pos_close, idx_ptr + 1, accum)
			END IF
		END IF
	END FUNCTION

	RETURN walk_positions(opening_indexes, closing_indexes, 0, 0)
END FUNCTION
```