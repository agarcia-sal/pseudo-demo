```
FUNCTION count_nums(array_of_integers)
    FUNCTION digits_sum(integer_value)
        SET sign_flag TO -1
        SET adjusted_number TO integer_value
        IF NOT (integer_value >= 0)
            SET adjusted_number TO -1 * integer_value
        ELSE
            SET sign_flag TO 1
        END IF
        SET digits_array TO [int_char FOR int_char IN STRING(adjusted_number)]
        SET digits_array[0] TO digits_array[0] * sign_flag
        RETURN REDUCE((lambda acc, val: acc + val), digits_array, 0)
    END FUNCTION

    FUNCTION accumulate_sums(index, collection, accumulator)
        IF index >= LENGTH(collection)
            RETURN accumulator
        ELSE
            RETURN accumulate_sums(index + 1, collection, accumulator + [digits_sum(collection[index])])
        END IF
    END FUNCTION

    SET digit_sums TO accumulate_sums(0, array_of_integers, [])

    FUNCTION filter_positive_items(source_list, position, collected)
        IF position >= LENGTH(source_list)
            RETURN collected
        ELSE
            RETURN filter_positive_items(
                position + 1, source_list,
                collected + ([source_list[position]] IF source_list[position] > 0 ELSE [])
            )
        END IF
    END FUNCTION

    SET positive_items TO filter_positive_items(digit_sums, 0, [])

    RETURN LENGTH(positive_items)
END FUNCTION
```