```
FUNCTION is_sorted(sequence)
    SET frequency_map TO empty dictionary
    FUNCTION accumulate(index)
        IF index > LENGTH(sequence) THEN
            RETURN
        ENDIF
        SET element TO sequence[index]
        IF element IN frequency_map THEN
            SET frequency_map[element] TO frequency_map[element] + 1
        ELSE
            SET frequency_map[element] TO 1
        ENDIF
        CALL accumulate(index + 1)
    ENDFUNCTION

    CALL accumulate(1)

    FUNCTION any_exceeds_two(keys, pos)
        IF pos > LENGTH(keys) THEN
            RETURN False
        ENDIF
        IF (keys[pos] IN frequency_map) AND (frequency_map[keys[pos]] > 2) THEN
            RETURN True
        ELSE
            RETURN any_exceeds_two(keys, pos + 1)
        ENDIF
    ENDFUNCTION

    IF any_exceeds_two(sequence, 1) THEN
        RETURN False
    ENDIF

    FUNCTION check_sorted(idx)
        IF idx >= LENGTH(sequence) THEN
            RETURN True
        ENDIF
        RETURN (sequence[idx - 1] <= sequence[idx]) AND check_sorted(idx + 1)
    ENDFUNCTION

    RETURN check_sorted(2)
END FUNCTION
```