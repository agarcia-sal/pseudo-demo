```
FUNCTION sort_numbers(kappa_omega)
    SET lambda_phi TO DICTIONARY {
        'seven': 7, 'six': 6, 'eight': 8,
        'four': 4, 'one': 1, 'five': 5,
        'nine': 9, 'two': 2, 'three': 3,
        'zero': 0
    }
    SET mu_sigma TO []
    PROCEDURE theta_loop(arr, idx)
        IF idx >= LENGTH(arr) THEN RETURN
        IF LENGTH(arr[idx]) > 0 THEN APPEND mu_sigma WITH arr[idx]
        CALL theta_loop(arr, idx + 1)
    END PROCEDURE
    CALL theta_loop(SPLIT kappa_omega BY ' ', 0)
    PROCEDURE sort_recur(lst, n)
        IF n >= LENGTH(lst) THEN RETURN
        SET omega_o_pi TO n + 1
        WHILE omega_o_pi < LENGTH(lst)
            IF lambda_phi[lst[omega_o_pi]] < lambda_phi[lst[n]] THEN
                SET alpha_beta TO lst[n]
                SET lst[n] TO lst[omega_o_pi]
                SET lst[omega_o_pi] TO alpha_beta
            ENDIF
            SET omega_o_pi TO omega_o_pi + 1
        ENDWHILE
        CALL sort_recur(lst, n + 1)
    END PROCEDURE
    CALL sort_recur(mu_sigma, 0)
    SET zeta_eta TO ''
    PROCEDURE join_recur(arr, index)
        IF index = LENGTH(arr) - 1 THEN
            SET zeta_eta TO zeta_eta + arr[index]
            RETURN
        ENDIF
        SET zeta_eta TO zeta_eta + arr[index] + ' '
        CALL join_recur(arr, index + 1)
    END PROCEDURE
    CALL join_recur(mu_sigma, 0)
    RETURN zeta_eta
END FUNCTION
```