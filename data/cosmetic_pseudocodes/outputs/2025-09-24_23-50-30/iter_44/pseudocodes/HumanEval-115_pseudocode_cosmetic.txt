```
FUNCTION max_fill(matrix, limit)
    IMPORT math
    DEFINE accumulate(index, total)
        IF index >= LENGTH(matrix)
            RETURN total
        ELSE
            RETURN accumulate(index + 1, total + matrix[index])
    END DEFINE

    DEFINE helper(pos, accumulated)
        IF pos == LENGTH(matrix)
            RETURN accumulated
        ELSE
            LET row_total = accumulate(0, 0)
            LET quotient = row_total / limit
            LET ceiling_val = math ceiling(quotient)
            RETURN helper(pos + 1, accumulated + ceiling_val)
    END DEFINE

    DEFINE row_sums(idx, acc)
        IF idx == LENGTH(matrix)
            RETURN acc
        ELSE
            LET sum_row = 0
            FOR EACH val IN matrix[idx]
                sum_row = sum_row + val
            END FOR
            LET ceil_div = math ceiling(sum_row / limit)
            RETURN row_sums(idx + 1, acc + ceil_div)
    END DEFINE

    RETURN row_sums(0, 0)
END FUNCTION
```