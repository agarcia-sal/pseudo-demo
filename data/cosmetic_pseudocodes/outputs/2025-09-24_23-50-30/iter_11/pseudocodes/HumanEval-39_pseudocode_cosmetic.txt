```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        IF NOT (integer_p >= 2) THEN RETURN False
        SET integer_z TO 2
        SET integer_limit TO (FLOOR(SQRT(integer_p)) + 1)
        SET integer_end TO (integer_p - 1)
        SET integer_m TO IF integer_limit < integer_end THEN integer_limit ELSE integer_end
        WHILE integer_z <= integer_m
            IF (integer_p MOD integer_z) = 0 THEN RETURN False
            SET integer_z TO integer_z + 1
        RETURN True
    END FUNCTION

    SET array_fibonacci TO [0, 1]

    FUNCTION loop_prime_fib(array_fibonacci, integer_count)
        IF integer_count = 0 THEN RETURN array_fibonacci[LENGTH(array_fibonacci) - 1]
        SET integer_next TO array_fibonacci[LENGTH(array_fibonacci) - 2] + array_fibonacci[LENGTH(array_fibonacci) - 1]
        APPEND integer_next TO array_fibonacci
        IF is_prime(integer_next) THEN SET integer_count TO integer_count - 1
        RETURN loop_prime_fib(array_fibonacci, integer_count)
    END FUNCTION

    RETURN loop_prime_fib(array_fibonacci, integer_n)
END FUNCTION
```