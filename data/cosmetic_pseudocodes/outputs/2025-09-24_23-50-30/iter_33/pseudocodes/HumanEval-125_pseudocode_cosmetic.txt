```
FUNCTION split_words(input_string)
    DEFINE helper_split(buffer)
        INITIALIZE output_list TO empty list
        INITIALIZE current_fragment TO empty string
        FOR EACH ch IN buffer
            IF ch EQUALS ' ' THEN
                IF current_fragment NOT EQUAL TO empty string THEN
                    APPEND current_fragment TO output_list
                    SET current_fragment TO empty string
                END IF
            ELSE
                SET current_fragment TO current_fragment + ch
            END IF
        END FOR
        IF current_fragment NOT EQUAL TO empty string THEN
            APPEND current_fragment TO output_list
        END IF
        RETURN output_list
    END DEFINE

    SWITCH
        CASE (FIND ' ' IN input_string) IS NOT -1:
            RETURN helper_split(input_string)
        CASE (FIND ',' IN input_string) IS NOT -1:
            DECLARE temp_buf AS empty string
            FOR EACH sym IN input_string
                SET temp_buf TO temp_buf + (sym == ',' ? ' ' : sym)
            END FOR
            RETURN helper_split(temp_buf)
        DEFAULT:
            INITIALIZE idx TO 0
            INITIALIZE cnt TO 0
            DECLARE n AS LENGTH OF input_string
            WHILE idx < n DO
                LET char_val BE input_string[idx]
                IF char_val >= 'a' AND char_val <= 'z' THEN
                    DECLARE ascii_val AS ORD(char_val)
                    IF (ascii_val MOD 2) == 0 THEN
                        SET cnt TO cnt + 1
                    END IF
                END IF
                SET idx TO idx + 1
            END WHILE
            RETURN cnt
    END SWITCH
END FUNCTION
```