```
FUNCTION is_palindrome(input_string)
    DECLARE left_index ← 0
    DECLARE right_index ← LENGTH(input_string) - 1
    WHILE left_index < right_index
        IF input_string[left_index] ≠ input_string[right_index]
            RETURN false
        END IF
        left_index ← left_index + 1
        right_index ← right_index - 1
    END WHILE
    RETURN true
END FUNCTION

FUNCTION make_palindrome(input_string)
    IF LENGTH(input_string) = 0 THEN RETURN "" END IF

    DECLARE position_map ← DICTIONARY()
    DECLARE offset ← 0

    LOOP
        IF is_palindrome(SUBSTRING(input_string, offset, LENGTH(input_string) - offset)) = true THEN
            EXIT LOOP
        END IF
        offset ← offset + 1
    END LOOP

    DECLARE prefix_substring ← SUBSTRING(input_string, 0, offset)
    DECLARE reversed_prefix ← ""
    FOR index ← LENGTH(prefix_substring) - 1 DOWNTO 0 STEP -1
        reversed_prefix ← reversed_prefix + prefix_substring[index]
    END FOR

    RETURN input_string + reversed_prefix
END FUNCTION
```