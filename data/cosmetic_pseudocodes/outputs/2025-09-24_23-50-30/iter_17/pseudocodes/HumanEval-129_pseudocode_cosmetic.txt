```
FUNCTION minPath(grid, k)
    LET size = LENGTH(grid)
    LET limit = size * size + 1
    LET idx = 0
    WHILE idx < size
        LET idy = 0
        WHILE idy < size
            IF grid[idx][idy] == 1 THEN
                LET neighbors = DICT()
                IF idx > 0 THEN neighbors = neighbors UNION {0: grid[idx-1][idy]} END IF
                IF idy > 0 THEN neighbors = neighbors UNION {1: grid[idx][idy-1]} END IF
                IF idx < size - 1 THEN neighbors = neighbors UNION {2: grid[idx+1][idy]} END IF
                IF idy < size - 1 THEN neighbors = neighbors UNION {3: grid[idx][idy+1]} END IF
                LET minv = limit
                FOR EACH key IN neighbors
                    IF neighbors[key] < minv THEN minv = neighbors[key] END IF
                END FOR
                limit = minv
            END IF
            idy = idy + 1
        END WHILE
        idx = idx + 1
    END WHILE
    LET output = []
    FOR n IN 0 TO k - 1
        IF (n MOD 2) == 0
            output = output + [1]
        ELSE
            output = output + [limit]
        END IF
    END FOR
    RETURN output
END FUNCTION
```