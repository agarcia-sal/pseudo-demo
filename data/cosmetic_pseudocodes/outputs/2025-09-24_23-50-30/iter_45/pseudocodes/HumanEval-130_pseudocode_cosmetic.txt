```
FUNCTION tri(integer_n)
    DEFINE FUNCTION build_sequence(position, sequence_accumulated)
        IF position GREATER THAN integer_n
            RETURN sequence_accumulated
        END IF
        DEFINE remainder AS position MOD 2
        DEFINE previous_idx1 AS position - 1
        DEFINE previous_idx2 AS position - 2
        DEFINE next_element AS IF (remainder EQUALS 0)
            THEN (position / 2) + 1
            ELSE (sequence_accumulated[previous_idx1] + sequence_accumulated[previous_idx2] + ((position + 3) / 2))
        END IF
        RETURN build_sequence(position + 1, sequence_accumulated + [next_element])
    END FUNCTION

    IF integer_n EQUALS 0
        RETURN [1]
    ELSE IF integer_n EQUALS 1
        RETURN [1, 3]
    ELSE
        RETURN build_sequence(2, [1, 3])
    END IF
END FUNCTION
```