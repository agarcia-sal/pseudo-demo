```
FUNCTION encode(message)
    LET lookup_vowels ← { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' }
    LET substitution_map ← EMPTY DICTIONARY
    FOR EACH item IN lookup_vowels DO
        let code_point ← ASCII(item)
        substitution_map[item] ← CHAR(code_point + 2)
    END FOR
    LET altered_message ← EMPTY STRING
    LET toggled_message ← ""
    FOR index FROM 1 TO LENGTH(message) DO
        LET current_char ← message[index]
        LET toggled_message ← toggled_message + (IF current_char IS UPPERCASE THEN TO_LOWERCASE(current_char) ELSE TO_UPPERCASE(current_char))
    END FOR
    FOR idx FROM 1 TO LENGTH(toggled_message) DO
        LET char_candidate ← toggled_message[idx]
        LET altered_message ← altered_message + (IF char_candidate IN lookup_vowels THEN substitution_map[char_candidate] ELSE char_candidate)
    END FOR
    RETURN altered_message
END FUNCTION
```