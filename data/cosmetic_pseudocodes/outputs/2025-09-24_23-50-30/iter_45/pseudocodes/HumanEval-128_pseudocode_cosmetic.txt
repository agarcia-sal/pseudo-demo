```
FUNCTION prod_signs(array_of_integers)
    DEFINE helper_contains_zero(lst, idx) AS
        IF idx = LENGTH(lst) THEN
            RETURN FALSE
        ELSE
            RETURN (lst[idx] = 0) OR helper_contains_zero(lst, idx + 1)
        END IF
    END DEFINE

    DEFINE helper_count_negatives(lst, idx, acc) AS
        IF idx = LENGTH(lst) THEN
            RETURN acc
        ELSE
            RETURN helper_count_negatives(lst, idx + 1, acc + IF lst[idx] < 0 THEN 1 ELSE 0)
        END IF
    END DEFINE
    
    DEFINE helper_sum_abs(lst, idx, acc) AS
        IF idx = LENGTH(lst) THEN
            RETURN acc
        ELSE
            RETURN helper_sum_abs(lst, idx + 1, acc + ABS(lst[idx]))
        END IF
    END DEFINE

    IF LENGTH(array_of_integers) = 0 THEN
        RETURN None
    ELSE
        IF helper_contains_zero(array_of_integers, 0) THEN
            SET sign_accumulator TO 0
        ELSE
            SET negative_count TO helper_count_negatives(array_of_integers, 0, 0)
            SET sign_accumulator TO POWER(-1, negative_count)
        END IF
        SET magnitude_sum TO helper_sum_abs(array_of_integers, 0, 0)
        RETURN sign_accumulator * magnitude_sum
    END IF
END FUNCTION
```