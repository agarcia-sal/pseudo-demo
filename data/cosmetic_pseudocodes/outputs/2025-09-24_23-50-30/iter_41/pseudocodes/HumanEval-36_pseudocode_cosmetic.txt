```
FUNCTION fizz_buzz(subject_p)
  LET accumulator_1 BE []
  LET function_loop = 
    FUNCTION (index_x)
      IF NOT (index_x < subject_p) THEN RETURN END IF
      SWITCH TRUE
        CASE index_x MOD 11 = 0: accumulator_1 <- accumulator_1 + [index_x] BREAK
        CASE index_x MOD 13 = 0: accumulator_1 <- accumulator_1 + [index_x] BREAK
        DEFAULT: 
      END SWITCH
      RETURN function_loop(index_x + 1)
    END FUNCTION
  CALL function_loop(0)

  LET accumulator_2 BE ""
  LET function_concat = 
    FUNCTION (lst_y, idx_z)
      IF idx_z >= LENGTH(lst_y) THEN RETURN END IF
      accumulator_2 <- accumulator_2 + TO_STRING(lst_y[idx_z])
      RETURN function_concat(lst_y, idx_z + 1)
    END FUNCTION
  CALL function_concat(accumulator_1, 0)

  LET counter_a BE 0
  LET function_count = 
    FUNCTION (string_b, idx_c)
      IF idx_c >= LENGTH(string_b) THEN RETURN END IF
      counter_a <- counter_a + CASE (string_b[idx_c] = '7') WHEN TRUE THEN 1 ELSE 0 END
      RETURN function_count(string_b, idx_c + 1)
    END FUNCTION
  CALL function_count(accumulator_2, 0)

  RETURN counter_a
END FUNCTION
```