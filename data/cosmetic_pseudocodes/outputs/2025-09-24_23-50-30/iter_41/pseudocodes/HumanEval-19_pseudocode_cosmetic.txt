```
FUNCTION sort_numbers(alpha_sequence)
    LET mapping_dictionary BE A DICTIONARY SUCH THAT
        mapping_dictionary['zero'] = 0
        mapping_dictionary['one'] = 1
        mapping_dictionary['two'] = 2
        mapping_dictionary['three'] = 3
        mapping_dictionary['four'] = 4
        mapping_dictionary['five'] = 5
        mapping_dictionary['six'] = 6
        mapping_dictionary['seven'] = 7
        mapping_dictionary['eight'] = 8
        mapping_dictionary['nine'] = 9
    LET processed_array BE EMPTY LIST
    FOR EACH token IN SPLIT alpha_sequence BY ' '
        IF token != ''
            APPEND token TO processed_array
    END FOR
    DEFINE FUNCTION merge_sort(arr)
        IF LENGTH(arr) <= 1
            RETURN arr
        LET mid_index = LENGTH(arr) // 2
        LET left_part = merge_sort(SLICE arr FROM 0 TO mid_index)
        LET right_part = merge_sort(SLICE arr FROM mid_index TO END)
        LET merged_list = EMPTY LIST
        LET left_cursor = 0
        LET right_cursor = 0
        WHILE left_cursor < LENGTH(left_part) OR right_cursor < LENGTH(right_part)
            IF right_cursor >= LENGTH(right_part) OR (left_cursor < LENGTH(left_part) AND mapping_dictionary[left_part[left_cursor]] <= mapping_dictionary[right_part[right_cursor]])
                APPEND left_part[left_cursor] TO merged_list
                INCREMENT left_cursor
            ELSE
                APPEND right_part[right_cursor] TO merged_list
                INCREMENT right_cursor
        END WHILE
        RETURN merged_list
    END FUNCTION
    LET ordered_list = merge_sort(processed_array)
    LET output_string = ''
    FOR index FROM 0 TO LENGTH(ordered_list) - 1
        APPEND ordered_list[index] TO output_string
        IF index < LENGTH(ordered_list) - 1
            APPEND ' ' TO output_string
    END FOR
    RETURN output_string
END FUNCTION
```