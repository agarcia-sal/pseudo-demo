```
FUNCTION encode(input)
	vowels_set ← { "a", "e", "i", "o", "u", "A", "E", "I", "O", "U" }
	trans_map ← EMPTY DICTIONARY
	FUNCTION build_map(idx, arr)
		IF idx ≥ LENGTH(arr) THEN RETURN
		LET ch ← arr[idx]
		trans_map[ch] ← CHAR(ASCII(ch) + 2)
		build_map(idx + 1, arr)
	END FUNCTION
	build_map(0, CONVERT STRING TO LIST "aeiouAEIOU")

	FUNCTION swap_case_rec(i, accum)
		IF i = LENGTH(input) THEN RETURN accum
		LET c ← input[i]
		accum2 ← accum + (IF c IN vowels_set THEN LOWERCASE(c) ELSE UPPERCASE(c))
		RETURN swap_case_rec(i + 1, accum2)
	END FUNCTION
	swapped_message ← swap_case_rec(0, "")

	FUNCTION transform_chars(lst, idx, acc)
		IF idx = LENGTH(lst) THEN RETURN acc
		LET current ← lst[idx]
		val ← (IF current IN trans_map THEN trans_map[current] ELSE current)
		RETURN transform_chars(lst, idx + 1, acc + val)
	END FUNCTION
	char_list ← CONVERT STRING TO LIST swapped_message
	RETURN transform_chars(char_list, 0, "")
END FUNCTION
```