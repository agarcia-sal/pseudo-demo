```
FUNCTION histogram(alternate_input)
  LET freq_map BE {}
  LET chars_list BE SPLIT alternate_input BY " "
  LET greatest_num BE 0

  PROCEDURE update_maximum(index)
    IF index >= LENGTH(chars_list) THEN RETURN
    LET current_char BE chars_list[index]
    LET char_count BE 0
    PROCEDURE count_occurrences(i)
      IF i >= LENGTH(chars_list) THEN RETURN char_count
      IF chars_list[i] EQUALS current_char THEN
        SET char_count TO char_count + 1
      CALL count_occurrences(i + 1)
      RETURN char_count
    END PROCEDURE
    SET count_val TO count_occurrences(0)
    IF current_char IS NOT "" THEN
      IF count_val > greatest_num THEN
        SET greatest_num TO count_val
    CALL update_maximum(index + 1)
  END PROCEDURE

  CALL update_maximum(0)

  PROCEDURE populate_map(idx)
    IF idx >= LENGTH(chars_list) THEN RETURN
    LET current_char BE chars_list[idx]
    LET char_total BE 0
    PROCEDURE count_occurrences(i)
      IF i >= LENGTH(chars_list) THEN RETURN char_total
      IF chars_list[i] EQUALS current_char THEN
        SET char_total TO char_total + 1
      CALL count_occurrences(i + 1)
      RETURN char_total
    END PROCEDURE
    SET cnt TO count_occurrences(0)
    IF cnt EQUALS greatest_num THEN
      SET freq_map[current_char] TO greatest_num
    CALL populate_map(idx + 1)
  END PROCEDURE

  IF greatest_num > 0 THEN CALL populate_map(0)

  RETURN freq_map
END FUNCTION
```