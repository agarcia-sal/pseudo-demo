```
FUNCTION f(integer_n)
	result_accumulator ← LinkedList()
	
	FUNCTION compute_accumulation(current_index, accumulator)
		IF current_index > integer_n THEN
			RETURN accumulator
		END IF
		
		SWITCH (current_index MOD 2)
			CASE 0:
				factorial_result ← 1
				counter ← current_index
				WHILE counter > 1 DO
					factorial_result ← factorial_result * counter
					counter ← counter - 1
				END WHILE
				accumulator.addLast(factorial_result)
			
			CASE 1:
				sum_result ← (current_index * (current_index + 1)) / 2
				accumulator.addLast(sum_result)
		END SWITCH
		
		RETURN compute_accumulation(current_index + 1, accumulator)
	END FUNCTION
	
	final_list ← compute_accumulation(1, result_accumulator)
	RETURN final_list
END FUNCTION
```