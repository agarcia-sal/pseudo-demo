```
FUNCTION unique_digits(sequence_of_positive_integers)
	DEFINE FUNCTION is_all_odd(number)
		DEFINE FUNCTION check_digits(index)
			IF index < 0 THEN
				RETURN true
			ELSE
				LET current_digit BE (number // (10 ^ index)) % 10
				IF (current_digit % 2) != 1 THEN
					RETURN false
				ELSE
					RETURN check_digits(index - 1)
				END IF
			END IF
		END FUNCTION

		LET digit_count BE 0
		LET temp_number BE number
		WHILE temp_number > 0 DO
			temp_number = temp_number // 10
			digit_count = digit_count + 1
		END WHILE
		RETURN check_digits(digit_count - 1)
	END FUNCTION

	LET filtered_set BE {}
	LET index_counter BE 0
	WHILE index_counter < LENGTH(sequence_of_positive_integers) DO
		LET candidate_element BE sequence_of_positive_integers[index_counter]
		IF is_all_odd(candidate_element) = true THEN
			filtered_set = filtered_set UNION {candidate_element}
		END IF
		index_counter = index_counter + 1
	END WHILE

	LET sorted_list BE sorted(filtered_set)
	RETURN sorted_list
END FUNCTION
```