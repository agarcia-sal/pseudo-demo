```
FUNCTION valid_date(delta_string)
    FUNCTION check_bounds(num, lower_bound, upper_bound)
        RETURN (num >= lower_bound) AND (num <= upper_bound)
    END FUNCTION

    PROCEDURE parse_components(drift)
        VAR parts_list := split(drift, '-')
        IF length(parts_list) â‰  3 THEN
            RAISE error
        END IF
        RETURN parts_list[0], parts_list[1], parts_list[2]
    END PROCEDURE

    VAR trimmed_str := delta_string
    trimmed_str := trim(trimmed_str)

    VAR m_str, d_str, y_str := [], [], []
    VAR month_val, day_val, year_val := 0, 0, 0

    TRY
        m_str, d_str, y_str := parse_components(trimmed_str)
        month_val := to_integer(m_str)
        day_val := to_integer(d_str)
        year_val := to_integer(y_str)
    EXCEPT error
        RETURN False
    END TRY

    SWITCH TRUE
        CASE NOT check_bounds(month_val, 1, 12):
            RETURN False
        CASE (month_val = 2) AND (NOT check_bounds(day_val, 1, 29)):
            RETURN False
        CASE (month_val IN [4, 6, 9, 11]) AND (NOT check_bounds(day_val, 1, 30)):
            RETURN False
        CASE (month_val IN [1, 3, 5, 7, 8, 10, 12]) AND (NOT check_bounds(day_val, 1, 31)):
            RETURN False
    END SWITCH

    RETURN True
END FUNCTION
```