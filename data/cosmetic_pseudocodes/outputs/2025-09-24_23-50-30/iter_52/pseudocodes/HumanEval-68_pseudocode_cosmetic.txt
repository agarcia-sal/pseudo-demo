```
FUNCTION pluck(collection)
  SWITCH LENGTH(collection) = 0
    CASE TRUE: 
      RETURN []
  END SWITCH

  PROCEDURE findEvens(source, acc, idx)
    IF idx = LENGTH(source)
      RETURN acc
    ELSE 
      IF (source[idx] - (2 * (source[idx] DIV 2))) = 0
        SET newAcc TO acc + [source[idx]]
      ELSE
        SET newAcc TO acc
      END IF
      RETURN findEvens(source, newAcc, idx + 1)
    END IF
  END PROCEDURE

  SET gatheredEvens TO findEvens(collection, [], 0)

  IF LENGTH(gatheredEvens) = 0 THEN
    RETURN []
  END IF

  PROCEDURE locateMinimum(items, currentMin, currentIdx, minIdx, pos)
    IF pos = LENGTH(items)
      RETURN (currentMin, minIdx)
    ELSEIF items[pos] < currentMin THEN
      RETURN locateMinimum(items, items[pos], pos, pos, pos + 1)
    ELSE
      RETURN locateMinimum(items, currentMin, currentIdx, minIdx, pos + 1)
    END IF
  END PROCEDURE

  SET minEntry TO locateMinimum(gatheredEvens, gatheredEvens[0], 0, 0, 1)
  SET minimumItem TO minEntry[0]
  SET minimumPosition TO minEntry[1]

  PROCEDURE findIndex(target, array, position)
    IF position = LENGTH(array) THEN
      RETURN -1
    ELSEIF array[position] = target THEN
      RETURN position
    ELSE
      RETURN findIndex(target, array, position +1)
    END IF
  END PROCEDURE

  SET originalIndex TO findIndex(minimumItem, collection, 0)

  RETURN [minimumItem, originalIndex]
END FUNCTION
```