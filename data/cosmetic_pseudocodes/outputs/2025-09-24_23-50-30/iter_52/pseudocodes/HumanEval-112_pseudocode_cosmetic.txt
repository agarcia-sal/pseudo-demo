```
FUNCTION reverse_delete(string_s, string_c)
    FUNCTION helper(index_p, accumulator_r)
        IF index_p = LENGTH(string_s) THEN
            RETURN accumulator_r
        ELSE
            VARIABLE char_x = string_s[index_p]
            VARIABLE accumulator_new = IF NOT (char_x IN string_c) THEN accumulator_r + char_x ELSE accumulator_r
            RETURN helper(index_p + 1, accumulator_new)
        END IF
    END FUNCTION

    VARIABLE filtered_t = helper(0, "")
    
    FUNCTION is_palindrome(seq_u, start_i, end_j)
        IF start_i >= end_j THEN
            RETURN TRUE
        ELSE IF seq_u[start_i] != seq_u[end_j] THEN
            RETURN FALSE
        ELSE
            RETURN is_palindrome(seq_u, start_i + 1, end_j - 1)
        END IF
    END FUNCTION
    
    VARIABLE palindrome_flag = is_palindrome(filtered_t, 0, LENGTH(filtered_t) - 1)
    RETURN (filtered_t, palindrome_flag)
END FUNCTION
```