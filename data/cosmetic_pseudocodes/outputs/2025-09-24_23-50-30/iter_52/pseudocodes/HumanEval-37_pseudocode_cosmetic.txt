```
FUNCTION sort_even(list_of_elements)
    SET P TO EMPTY LIST
    SET Q TO EMPTY LIST

    FUNCTION extract_elements_at_step(start_index, source_list, result, index)
        IF index >= LENGTH(source_list)
            RETURN
        ELSE
            APPEND source_list[index] TO result
            CALL extract_elements_at_step(start_index, source_list, result, index + 2)
        END IF
    END FUNCTION

    CALL extract_elements_at_step(0, list_of_elements, P, 0)
    CALL extract_elements_at_step(1, list_of_elements, Q, 1)

    FUNCTION bubble_sort(arr, n)
        IF n <= 1
            RETURN
        END IF
        FOR i FROM 0 TO n - 2
            IF arr[i] > arr[i + 1]
                SET temp TO arr[i]
                SET arr[i] TO arr[i + 1]
                SET arr[i + 1] TO temp
            END IF
        END FOR
        CALL bubble_sort(arr, n - 1)
    END FUNCTION

    CALL bubble_sort(P, LENGTH(P))

    SET R TO EMPTY LIST

    FUNCTION zip_and_extend(list1, list2, target, index)
        IF index >= LENGTH(list2)
            RETURN
        ELSE
            APPEND list1[index] TO target
            APPEND list2[index] TO target
            CALL zip_and_extend(list1, list2, target, index + 1)
        END IF
    END FUNCTION

    CALL zip_and_extend(P, Q, R, 0)

    SWITCH LENGTH(P) > LENGTH(Q)
        CASE TRUE:
            APPEND P[LENGTH(P) - 1] TO R
        CASE FALSE:
            SKIP
    END SWITCH

    RETURN R
END FUNCTION
```