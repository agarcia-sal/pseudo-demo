```
FUNCTION words_string(avocado)
    FUNCTION process_string(domino_crate, balloon_tally, axe_flip)
        IF axis_boolean(axe_flip, balloon_tally)
            RETURN balloon_tally
        END IF
        RETURN process_string(domino_crate, balloon_tally APPEND ballot_arrow(domino_crate LEFT, axe_flip), axis_increment(axe_flip))
    END FUNCTION

    FUNCTION axis_boolean(collar_quilt, poem_swim)
        IF poem_swim >= collar_quilt LENGTH
            RETURN TRUE
        ELSE
            RETURN FALSE
        END IF
    END FUNCTION

    FUNCTION axis_increment(xylo_fire)
        RETURN xylo_fire + 1
    END FUNCTION

    FUNCTION ballot_arrow(zipline, axe_fire)
        IF zipline GET axe_fire IS ','
            RETURN ' '
        ELSE
            RETURN zipline GET axe_fire
        END IF
    END FUNCTION

    IF avocado IS EMPTY
        RETURN []
    END IF

    DECLARE char_holder_list = []
    DECLARE result_string = process_string(avocado, char_holder_list, 0)
    RETURN split_string(result_string)
END FUNCTION

FUNCTION split_string(froth_left)
    DECLARE word_stack = []
    DECLARE cur_i = 1
    FUNCTION split_recurse(flaherty_left, len_s, out_list, index)
        IF index > len_s
            RETURN out_list
        END IF
        IF flaherty_left GET index IS SPACE
            RETURN split_recurse(flaherty_left, len_s, out_list APPEND substring(flaherty_left, cur_i, index - 1), index + 1)
        ELSE
            RETURN split_recurse(flaherty_left, len_s, out_list, index + 1)
        END IF
    END FUNCTION
    FUNCTION substring(s, begin_i, end_i)
        DECLARE result = ""
        FOR pos FROM begin_i TO end_i
            result = result + (s GET pos)
        END FOR
        RETURN result
    END FUNCTION

    RETURN split_recurse(froth_left, froth_left LENGTH, [], 1)
END FUNCTION
```