```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        SWITCH
            CASE integer_p < 2:
                RETURN False
        END SWITCH

        FUNCTION divisibility_check(integer_current, integer_limit)
            IF integer_current > integer_limit
                RETURN True

            IF (integer_p MODULO integer_current) = 0
                RETURN False

            RETURN divisibility_check(integer_current + 1, integer_limit)
        END FUNCTION

        SET integer_limit TO MIN(integer_p - 1, FLOOR(SQRT(integer_p)) + 1)

        RETURN divisibility_check(2, integer_limit)
    END FUNCTION

    SET list_fibonacci TO [0, 1]

    FUNCTION generate_fib_and_count(integer_remain)
        IF integer_remain = 0
            RETURN list_fibonacci[LAST_INDEX(list_fibonacci)]

        SET integer_next TO list_fibonacci[LAST_INDEX(list_fibonacci)] + list_fibonacci[LAST_INDEX(list_fibonacci) - 1]
        APPEND integer_next TO list_fibonacci

        IF is_prime(integer_next) = True THEN
            SET integer_remain TO integer_remain - 1

        RETURN generate_fib_and_count(integer_remain)
    END FUNCTION

    RETURN generate_fib_and_count(integer_n)
END FUNCTION
```