```
FUNCTION select_words(string_s, natural_number_n)
    SET result TO []
    
    FUNCTION count_consonants(word_arg, position_index, count_accum)
        IF position_index >= LENGTH(word_arg) THEN
            RETURN count_accum
        ELSE
            LET current_char TO LOWERCASE(word_arg[position_index])
            LET updated_count TO count_accum
            SWITCH current_char
                CASE "a":
                CASE "e":
                CASE "i":
                CASE "o":
                CASE "u":
                    BREAK
                DEFAULT:
                    SET updated_count TO count_accum + 1
            END SWITCH
            RETURN count_consonants(word_arg, position_index + 1, updated_count)
        END IF
    END FUNCTION
    
    LET word_list TO []
    LET temp_index TO 0
    
    WHILE TRUE
        LET space_pos TO INDEX_OF(string_s, " ", temp_index)
        IF space_pos = -1 THEN
            IF temp_index < LENGTH(string_s) THEN
                word_list.APPEND(SUBSTRING(string_s, temp_index, LENGTH(string_s) - temp_index))
            END IF
            BREAK
        ELSE
            LET next_word TO SUBSTRING(string_s, temp_index, space_pos - temp_index)
            word_list.APPEND(next_word)
            SET temp_index TO space_pos + 1
        END IF
    END WHILE

    FOR EACH each_word IN word_list
        LET consonant_amount TO count_consonants(each_word, 0, 0)
        IF consonant_amount = natural_number_n THEN
            result.APPEND(each_word)
        END IF
    END FOR
    
    RETURN result
END FUNCTION
```