```
FUNCTION common(collectionA, collectionB)
    FUNCTION recurse(indexA, accumulator)
        IF indexA >= LENGTH(collectionA)
            RETURN accumulator
        FUNCTION innerLoop(indexB, currentAccumulator)
            IF indexB >= LENGTH(collectionB)
                RETURN currentAccumulator
            IF NOT (collectionA[indexA] NOT EQUALS collectionB[indexB])
                RETURN innerLoop(indexB + 1, currentAccumulator UNION SET {collectionA[indexA]})
            ELSE
                RETURN innerLoop(indexB + 1, currentAccumulator)
        END FUNCTION
        RETURN recurse(indexA + 1, innerLoop(0, accumulator))
    END FUNCTION
    SET accumulatedSet TO recurse(0, EMPTY SET)
    SET sortedList TO LIST FROM accumulatedSet
    SORT sortedList IN ASCENDING ORDER USING COMPARISON(a, b) => a - b
    RETURN sortedList
END FUNCTION
```