```
FUNCTION separate_paren_groups(string_of_parentheses)
    FUNCTION helper_loop(index_param, depth_param, buffer_param, acc_param)
        IF index_param >= LENGTH(string_of_parentheses) THEN
            RETURN acc_param
        END IF

        LET current_char_var = string_of_parentheses[index_param]

        SWITCH current_char_var
            CASE '(':
                LET new_depth_var = depth_param + (1 * 1)
                LET new_buffer_var = buffer_param + [current_char_var]
                RETURN helper_loop(index_param + 1, new_depth_var, new_buffer_var, acc_param)
            CASE ')':
                LET new_depth_var = depth_param - (1 * 1)
                LET new_buffer_var = buffer_param + [current_char_var]
                IF new_depth_var = 0 THEN
                    LET new_acc_var = acc_param + [JOIN(new_buffer_var, "")]
                    RETURN helper_loop(index_param + 1, new_depth_var, [], new_acc_var)
                ELSE
                    RETURN helper_loop(index_param + 1, new_depth_var, new_buffer_var, acc_param)
                END IF
            DEFAULT:
                RETURN helper_loop(index_param + 1, depth_param, buffer_param, acc_param)
        END SWITCH
    END FUNCTION

    RETURN helper_loop(0, 0, [], [])
END FUNCTION
```