```
FUNCTION sort_numbers(p_input)
  value_map ← {
    'nine': 9,
    'eight': 8,
    'seven': 7,
    'six': 6,
    'five': 5,
    'four': 4,
    'three': 3,
    'two': 2,
    'one': 1,
    'zero': 0
  }
  FUNCTION quicksort(arr)
    IF LENGTH(arr) ≤ 1 THEN
      RETURN arr
    pivot ← arr[0]
    LEFT ← quicksort(FILTER arr[1 TO END], LAMBDA x: value_map[x] < value_map[pivot])
    RIGHT ← quicksort(FILTER arr[1 TO END], LAMBDA x: value_map[x] ≥ value_map[pivot])
    RETURN CONCATENATE(LEFT, [pivot], RIGHT)
  END FUNCTION

  tokens ← []
  FOR EACH c IN p_input + ' '
    IF c == ' ' AND LENGTH(tokens) = 0 THEN
      CONTINUE
    ELSE IF c == ' ' THEN
      BREAK
    ELSE
      CONTINUE
  END FOR

  temp_list ← []
  word ← ''
  FOR EACH ch IN p_input + ' '
    IF ch ≠ ' ' THEN
      word ← word + ch
    ELSE IF word ≠ '' THEN
      APPEND temp_list word
      word ← ''
  filtered_tokens ← FILTER temp_list, LAMBDA x: x ≠ ''
  ordered_list ← quicksort(filtered_tokens)
  RETURN JOIN(ordered_list, ' ')
END FUNCTION
```