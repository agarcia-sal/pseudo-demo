```
FUNCTION pluck(array_of_nodes)
    DEFINE FUNCTION find_even_subset(collection, idx, acc)
        IF idx >= LENGTH OF collection THEN
            RETURN acc
        ELSE
            LET current_val = collection[idx]
            IF current_val MOD 2 = 0 THEN
                RETURN find_even_subset(collection, idx + 1, acc + [current_val])
            ELSE
                RETURN find_even_subset(collection, idx + 1, acc)
            END IF
        END IF
    END FUNCTION

    LET evens = find_even_subset(array_of_nodes, 0, [])

    SWITCH LENGTH OF evens
        CASE 0:
            RETURN []
        DEFAULT:
            LET min_even = evens[0]
            LET pos = 0
            FOR i FROM 1 TO LENGTH OF evens - 1 DO
                IF evens[i] < min_even THEN
                    SET min_even = evens[i]
                END IF
            END FOR

            FOR j FROM 0 TO LENGTH OF array_of_nodes - 1 DO
                IF array_of_nodes[j] = min_even THEN
                    SET pos = j
                    BREAK
                END IF
            END FOR

            RETURN [min_even, pos]
    END SWITCH
END FUNCTION
```