```
FUNCTION intersection(alpha, beta)
    FUNCTION is_prime(z)
        IF NOT (z > 2) THEN
            SWITCH z
                CASE 0, 1: RETURN False
                CASE 2: RETURN True
                DEFAULT: RETURN False
            END SWITCH
        END IF

        FUNCTION check_divisor(w, counter)
            IF counter = w THEN
                RETURN True
            ELSE
                RETURN (w MOD counter) <> 0 AND check_divisor(w, counter + 1)
            END IF
        END FUNCTION
        
        RETURN check_divisor(z, 2)
    END FUNCTION

    LET m = alpha[0] < beta[0] ? beta[0] : alpha[0]
    LET n = alpha[1] > beta[1] ? beta[1] : alpha[1]
    LET diff = n - m

    RETURN (diff > 0 AND is_prime(diff)) ? "YES" : "NO"
END FUNCTION
```