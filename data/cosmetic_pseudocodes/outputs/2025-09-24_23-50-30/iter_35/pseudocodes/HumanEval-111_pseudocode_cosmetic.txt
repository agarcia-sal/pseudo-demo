```
FUNCTION histogram(wrapped_input)
    DECLARE running_map AS DICTIONARY INITIALIZED EMPTY
    DECLARE alpha_list AS LIST ASSIGNED SPLIT wrapped_input BY " "
    DECLARE peak_count AS INTEGER INITIALIZED 0

    FORIDX FROM 0 TO LENGTH(alpha_list) - 1 DO
        DECLARE curr_key AS STRING ASSIGNED alpha_list[FORIDX]
        DECLARE val_calc AS INTEGER ASSIGNED 0
        FORIDX2 FROM 0 TO LENGTH(alpha_list) - 1 DO
            IF alpha_list[FORIDX2] = curr_key THEN
                val_calc <- val_calc + 1
            ENDIF
        ENDFOR
        peak_count <- IF val_calc > peak_count AND curr_key â‰  "" THEN val_calc ELSE peak_count
    ENDFOR

    IF peak_count > 0 THEN
        DECLARE index_pos AS INTEGER INITIALIZED 0
        WHILE index_pos < LENGTH(alpha_list) DO
            DECLARE checking_val AS STRING ASSIGNED alpha_list[index_pos]
            DECLARE occurrence_count AS INTEGER INITIALIZED 0

            FORIDX3 FROM 0 TO LENGTH(alpha_list) -1 DO
                IF alpha_list[FORIDX3] = checking_val THEN
                    occurrence_count <- occurrence_count + 1
                ENDIF
            ENDFOR

            SWITCH TRUE
                CASE occurrence_count = peak_count:
                    running_map[checking_val] <- peak_count
                CASE ELSE:
                    // do nothing
            ENDSWITCH
            index_pos <- index_pos + 1
        ENDWHILE
    ENDIF

    RETURN running_map
END FUNCTION
```