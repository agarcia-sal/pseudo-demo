```
FUNCTION even_odd_palindrome(bravo)
	odd_palindrome_count := 0
	even_palindrome_count := 0

	FUNCTION is_palindrome(foxtrot)
		temp_str := STRING(foxtrot)
		reversed_temp := ""
		temp_idx := LENGTH(temp_str)
		WHILE temp_idx > 0
			reversed_temp := reversed_temp + CHARACTER_AT(temp_str, temp_idx)
			temp_idx := temp_idx - 1
		END WHILE
		RETURN NOT (temp_str NOT EQUAL reversed_temp)
	END FUNCTION

	integer_sequence := []
	iterator := 1
	WHILE iterator <= bravo
		integer_sequence := integer_sequence + [iterator]
		iterator := iterator + 1
	END WHILE

	INDEX := 1
	WHILE INDEX <= LENGTH(integer_sequence)
		current_element := integer_sequence[INDEX]
		switch(c_value := current_element MODULO 2)
			case 1:
				if is_palindrome(current_element)
					odd_palindrome_count := odd_palindrome_count + 1
				end if
			case 0:
				if is_palindrome(current_element)
					even_palindrome_count := even_palindrome_count + 1
				end if
		END SWITCH
		INDEX := INDEX + 1
	END WHILE

	RETURN (even_palindrome_count, odd_palindrome_count)
END FUNCTION
```