```
FUNCTION anti_shuffle(input_string)
    SET array_items TO []
    SET temp_index TO 0
    WHILE temp_index < LENGTH(SPLIT input_string BY " ")
        ADD SPLIT input_string BY " "[temp_index] TO array_items
        SET temp_index TO temp_index + 1
    END WHILE

    SET collected_results TO []
    SET idx_loop TO 0
    WHILE idx_loop < LENGTH(array_items)
        SET character_array TO []
        SET char_pos TO 0
        WHILE char_pos < LENGTH(array_items[idx_loop])
            ADD array_items[idx_loop][char_pos] TO character_array
            SET char_pos TO char_pos + 1
        END WHILE

        SET asc_sorted_chars TO []
        WHILE LENGTH(character_array) > 0
            SET min_char TO character_array[0]
            SET find_pos TO 0
            SET look_pos TO 1
            WHILE look_pos < LENGTH(character_array)
                IF character_array[look_pos] < min_char THEN
                    SET min_char TO character_array[look_pos]
                    SET find_pos TO look_pos
                END IF
                SET look_pos TO look_pos + 1
            END WHILE
            ADD min_char TO asc_sorted_chars
            REMOVE character_array[find_pos]
        END WHILE

        SET reconstructed_word TO ""
        SET assemble_index TO 0
        WHILE assemble_index < LENGTH(asc_sorted_chars)
            SET reconstructed_word TO reconstructed_word + asc_sorted_chars[assemble_index]
            SET assemble_index TO assemble_index + 1
        END WHILE

        ADD reconstructed_word TO collected_results
        SET idx_loop TO idx_loop + 1
    END WHILE

    SET final_output TO ""
    SET out_index TO 0
    WHILE out_index < LENGTH(collected_results)
        SET final_output TO final_output + collected_results[out_index]
        IF out_index < LENGTH(collected_results) - 1 THEN
            SET final_output TO final_output + " "
        END IF
        SET out_index TO out_index + 1
    END WHILE

    RETURN final_output
END FUNCTION
```