```
FUNCTION parse_nested_parens(parens_str)
    FUNCTION parse_paren_grouping(str_group)
        VAR tracker_counter = 0
        VAR highest_level = 0
        VAR idx = 0
        WHILE idx < LENGTH(str_group)
            VAR elem = str_group[idx]
            SWITCH true
                CASE elem = '(':
                    tracker_counter = tracker_counter + 1
                    highest_level = (highest_level + tracker_counter + ABS(highest_level - tracker_counter)) / 2
                CASE elem != '(':
                    tracker_counter = tracker_counter - 1
            END SWITCH
            idx = idx + 1
        END WHILE
        RETURN highest_level
    END FUNCTION

    VAR splitted_parts = []
    VAR temp_str = ""
    VAR pos = 0
    WHILE pos < LENGTH(parens_str)
        VAR ch = parens_str[pos]
        IF ch != ' '
            temp_str = temp_str + ch
        ELSE IF LENGTH(temp_str) > 0
            APPEND splitted_parts WITH temp_str
            temp_str = ""
        END IF
        pos = pos + 1
    END WHILE
    IF LENGTH(temp_str) > 0
        APPEND splitted_parts WITH temp_str
    END IF

    VAR results = []
    VAR n = 0
    WHILE n < LENGTH(splitted_parts)
        VAR part = splitted_parts[n]
        VAR is_not_empty = (LENGTH(part) != 0)
        IF is_not_empty
            APPEND results WITH parse_paren_grouping(part)
        END IF
        n = n + 1
    END WHILE
    RETURN results
END FUNCTION
```