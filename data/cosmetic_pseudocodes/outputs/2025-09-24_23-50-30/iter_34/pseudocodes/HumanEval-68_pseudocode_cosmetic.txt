```
FUNCTION pluck(qr)
	DEFINE recursively_filter(p, acc)
		IF LENGTH OF p IS 0 THEN
			RETURN acc
		END IF
		DEFINE head_element AS p[0]
		DEFINE tail_elements AS p[1 TO END]
		RETURN recursively_filter(tail_elements, IF (head_element MOD 2 = 0) THEN acc + [head_element] ELSE acc END IF)
	END DEFINE

	DEFINE find_minimum(lst)
		DEFINE helper(i, curr_min)
			IF i = LENGTH OF lst THEN
				RETURN curr_min
			END IF
			DEFINE val AS lst[i]
			RETURN helper(i + 1, IF val < curr_min THEN val ELSE curr_min END IF)
		END DEFINE
		IF LENGTH OF lst = 0 THEN RETURN NULL END IF
		RETURN helper(1, lst[0])
	END DEFINE

	DEFINE find_index(lst, val, idx)
		IF idx = LENGTH OF lst THEN
			RETURN -1
		END IF
		RETURN IF lst[idx] = val THEN idx ELSE find_index(lst, val, idx + 1) END IF
	END DEFINE

	IF LENGTH OF qr <> 0 THEN
		DEFINE filtered AS recursively_filter(qr, [])
		IF LENGTH OF filtered <> 0 THEN
			DEFINE minimal AS find_minimum(filtered)
			DEFINE position AS find_index(qr, minimal, 0)
			RETURN [minimal, position]
		END IF
	END IF

	RETURN []
END FUNCTION
```