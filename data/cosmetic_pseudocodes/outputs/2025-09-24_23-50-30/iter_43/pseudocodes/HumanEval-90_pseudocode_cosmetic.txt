```
FUNCTION next_smallest(arr_data)
    SET arr_temp TO []
    FOR i_idx FROM 0 TO LENGTH(arr_data) - 1 DO
        IF NOT CONTAINS(arr_temp, arr_data[i_idx]) THEN
            APPEND arr_data[i_idx] TO arr_temp
    END FOR
    CALL quicksort_iterative(arr_temp)
    IF LENGTH(arr_temp) < 2 THEN
        RETURN None
    ELSE
        RETURN arr_temp[1]
END FUNCTION

FUNCTION quicksort_iterative(lst_work)
    SET stack_work TO []
    PUSH (0, LENGTH(lst_work) - 1) ONTO stack_work
    WHILE LENGTH(stack_work) > 0 DO
        SET (start_idx, end_idx) TO POP(stack_work)
        IF start_idx < end_idx THEN
            SET pivot_idx TO partition(lst_work, start_idx, end_idx)
            PUSH (start_idx, pivot_idx - 1) ONTO stack_work
            PUSH (pivot_idx + 1, end_idx) ONTO stack_work
    END WHILE
END FUNCTION

FUNCTION partition(lst_part, left_idx, right_idx)
    SET pivot_val TO lst_part[right_idx]
    SET i_cursor TO left_idx - 1
    FOR j_cursor FROM left_idx TO right_idx - 1 DO
        IF lst_part[j_cursor] <= pivot_val THEN
            SET i_cursor TO i_cursor + 1
            SWAP lst_part[i_cursor], lst_part[j_cursor]
    SWAP lst_part[i_cursor + 1], lst_part[right_idx]
    RETURN i_cursor + 1
END FUNCTION
```