```
FUNCTION split_words(input_string)
	tail_recursive_function index result_string = 
		IF index >= LENGTH input_string THEN result_string
		ELSE tail_recursive_function (index + 1) (result_string + input_string[index])
	IF NOT(CONTAINS input_string ' ')
		IF NOT(CONTAINS input_string ',')
			SET filtered_chars TO []
			FOR pos FROM 0 TO LENGTH input_string - 1
				IF (input_string[pos] >= 'a') AND (input_string[pos] <= 'z') AND ((ASCII(input_string[pos]) MOD 2) = 0)
					APPEND input_string[pos] TO filtered_chars
			SET total_count TO LENGTH filtered_chars
			RETURN total_count
		ELSE
			SET replaced_string TO ""
			FOR each_char IN input_string
				IF each_char = ','
					replaced_string = replaced_string + ' '
				ELSE
					replaced_string = replaced_string + each_char
			SET split_result TO []
			SET word_buffer TO ""
			FOR char_index FROM 0 TO LENGTH replaced_string - 1
				IF replaced_string[char_index] != ' '
					word_buffer = word_buffer + replaced_string[char_index]
				ELSE IF LENGTH word_buffer > 0
					APPEND word_buffer TO split_result
					word_buffer = ""
			IF LENGTH word_buffer > 0
				APPEND word_buffer TO split_result
			RETURN split_result
	ELSE
		SET split_result TO []
		SET word_buffer TO ""
		FOR char_index FROM 0 TO LENGTH input_string - 1
			IF input_string[char_index] != ' '
				word_buffer = word_buffer + input_string[char_index]
			ELSE IF LENGTH word_buffer > 0
				APPEND word_buffer TO split_result
				word_buffer = ""
		IF LENGTH word_buffer > 0
			APPEND word_buffer TO split_result
		RETURN split_result
END FUNCTION
```