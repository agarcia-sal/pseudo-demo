```
FUNCTION sort_third(sequence_parameter)
    LET replica_sequence BE A NEW LIST FROM sequence_parameter
    LET filtered_collection BE []
    LET position_marker BE 0
    PROCEDURE extract_indices(input_sequence, output_collection, index_marker)
        IF index_marker >= LENGTH OF input_sequence THEN RETURN
        APPEND input_sequence[index_marker] TO output_collection
        CALL extract_indices(input_sequence, output_collection, index_marker + 3)
    END PROCEDURE
    CALL extract_indices(replica_sequence, filtered_collection, position_marker)
    LET ordered_subset BE filtered_collection
    LET ascending_order BE LENGTH(ordered_subset)
    PROCEDURE bubble_sort(collection, end_limit)
        IF end_limit <= 1 THEN RETURN
        LET step_counter BE 0
        PROCEDURE inner_loop(coll, idx)
            IF idx >= end_limit - 1 THEN RETURN
            IF coll[idx] > coll[idx + 1] THEN
                LET temporary_holder BE coll[idx]
                SET coll[idx] TO coll[idx + 1]
                SET coll[idx + 1] TO temporary_holder
            END IF
            CALL inner_loop(coll, idx + 1)
        END PROCEDURE
        CALL inner_loop(collection, 0)
        CALL bubble_sort(collection, end_limit - 1)
    END PROCEDURE
    CALL bubble_sort(ordered_subset, ascending_order)
    PROCEDURE substitute_indices(target_sequence, replacement_sequence, start_index)
        IF start_index >= LENGTH OF target_sequence THEN RETURN
        SET target_sequence[start_index] TO replacement_sequence[(start_index) DIV 3]
        CALL substitute_indices(target_sequence, replacement_sequence, start_index + 3)
    END PROCEDURE
    CALL substitute_indices(replica_sequence, ordered_subset, 0)
    RETURN replica_sequence
END FUNCTION
```