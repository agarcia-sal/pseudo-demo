```
FUNCTION pluck(collection)
    FUNCTION recursiveCheck(idx)
        IF idx = LENGTH OF collection THEN
            RETURN empty_list
        ELSE
            RETURN null
        END IF
    END FUNCTION

    SET checkResult TO recursiveCheck(0)
    IF checkResult != null THEN
        RETURN checkResult
    END IF

    FUNCTION gatherEvens(pos, acc)
        IF pos = LENGTH OF collection THEN
            RETURN acc
        ELSE
            SET currentElement TO collection[pos]
            SET updatedAcc TO (currentElement MOD 2 = 0) ? acc + [currentElement] : acc
            RETURN gatherEvens(pos + 1, updatedAcc)
        END IF
    END FUNCTION

    SET evensList TO gatherEvens(0, [])

    FUNCTION checkEvens(arr)
        IF LENGTH OF arr = 0 THEN
            RETURN empty_list
        ELSE
            RETURN null
        END IF
    END FUNCTION

    SET evensCheck TO checkEvens(evensList)
    IF evensCheck != null THEN
        RETURN evensCheck
    END IF

    FUNCTION findMinAndIndex(lst, idx, currentMin, currentIndex)
        IF idx = LENGTH OF lst THEN
            RETURN [currentMin, currentIndex]
        ELSE
            SET element TO lst[idx]
            IF element < currentMin THEN
                RETURN findMinAndIndex(lst, idx + 1, element, idx)
            ELSE
                RETURN findMinAndIndex(lst, idx + 1, currentMin, currentIndex)
            END IF
        END IF
    END FUNCTION

    SET initialMin TO evensList[0]
    SET resultPair TO findMinAndIndex(evensList, 1, initialMin, 0)

    FUNCTION locateIndex(collection, value, pos)
        IF pos = LENGTH OF collection THEN
            RETURN -1
        ELSE IF collection[pos] = value THEN
            RETURN pos
        ELSE
            RETURN locateIndex(collection, value, pos + 1)
        END IF
    END FUNCTION

    SET minVal TO resultPair[0]
    SET indexInOriginal TO locateIndex(collection, minVal, 0)

    RETURN [minVal, indexInOriginal]
END FUNCTION
```