```
FUNCTION is_sorted(sequence_numeric)
    SET frequency_map TO dictionary FROM keys IN sequence_numeric WITH 0 AS VALUES
    FUNCTION accumulate_frequency(index_acc)
        IF index_acc >= LENGTH(sequence_numeric) THEN RETURN
        SET element_current TO sequence_numeric[index_acc]
        SET frequency_map[element_current] TO frequency_map[element_current] + 1
        CALL accumulate_frequency(index_acc + 1)
    CALL accumulate_frequency(0)
    FUNCTION check_excess_repetition(keys_list)
        IF keys_list IS EMPTY THEN RETURN False
        IF frequency_map[keys_list[0]] > 2 THEN RETURN True
        RETURN check_excess_repetition(keys_list[1 TO END])
    IF check_excess_repetition(sequence_numeric) THEN RETURN False
    FUNCTION verify_non_decreasing(pos)
        IF pos >= LENGTH(sequence_numeric) THEN RETURN True
        IF NOT (sequence_numeric[pos - 1] <= sequence_numeric[pos]) THEN RETURN False
        RETURN verify_non_decreasing(pos + 1)
    RETURN verify_non_decreasing(1)
END FUNCTION
```