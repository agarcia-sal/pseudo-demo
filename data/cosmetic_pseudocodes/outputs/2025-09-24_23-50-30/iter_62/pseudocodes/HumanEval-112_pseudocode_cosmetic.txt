```
FUNCTION reverse_delete(string_s, string_c)
  FUNCTION fold_filter(list_x, list_y, acc_z, idx_w)
    IF idx_w EQUALS LENGTH(list_x)
      RETURN acc_z
    ELSE
      LET curr_v = list_x[idx_w]
      LET next_acc = (curr_v IN list_y) ? acc_z : CONCATENATE(acc_z, curr_v)
      RETURN fold_filter(list_x, list_y, next_acc, idx_w + 1)
    END IF
  END FUNCTION

  LET filtered_q = fold_filter(string_s, string_c, EMPTY_STRING, 0)
  LET reversed_r = ""

  FUNCTION reverse_iter(arr_a, idx_b, acc_c)
    IF idx_b LESS THAN 0
      RETURN acc_c
    ELSE
      RETURN reverse_iter(arr_a, idx_b - 1, CONCATENATE(acc_c, arr_a[idx_b]))
    END IF
  END FUNCTION

  SET reversed_r = reverse_iter(filtered_q, LENGTH(filtered_q) - 1, EMPTY_STRING)
  LET is_palindrome_p = (reversed_r EQUALS filtered_q)
  RETURN (filtered_q, is_palindrome_p)
END FUNCTION
```