Rewrite the given pseudocode to produce a new version that is **functionally identical** and **semantically equivalent** to the original with absolutely no change in behavior, correctness, side-effects, or termination conditions. Your output must consist **exclusively of valid, self-contained pseudocode**, with **no comments, explanations, or additional text**.

Strict constraints and transformation directives:

1. **Preserve all original function names, class names, and their exact nesting, inheritance, and object structures without any alteration**—do not rename or rearrange these entities.

2. For **all other identifiers** (local variables, parameters, temporaries, constants):
   - Rename them to fresh, unrelated, semantically neutral names.
   - Ensure zero name collisions within their scope.
   - Keep each renamed identifier consistent across the entire pseudocode.

3. Apply **aggressive, combined, multi-level transformations** to maximize structural and syntactic divergence while preserving semantics, including but not limited to:

   - **Control structures:** Replace iterative loops with recursive (tail-recursive if appropriate) forms, or vice versa; convert nested if-elses to switch/case, nested guards, ternaries, or logically equivalent rearrangements; transform boolean expressions using De Morgan’s laws, factoring, distribution, and introducing logically equivalent constructs.

   - **Data representations:** Change data structures to equivalent alternatives where valid (e.g., arrays ↔ lists, sets ↔ map-based sets), including changing linear traversals into comprehensions, filters, or folds; flatten nested blocks; split or merge code blocks and statements whenever behavioral equivalence is strictly maintained.

   - **Expression rewrites:** Reorder arithmetic operations without changing their result (leveraging associativity and commutativity), factor expressions differently, push negations inside or outside, unfold or fold constants, and rewrite condition predicates to logically equivalent but syntactically distinct forms.

   - **Control-flow restructuring:** Reorder independent statements, extract or inline expressions and sub-blocks, redesign short-circuits and early returns; replace tail recursion with iteration and vice versa, ensuring that deep recursion is avoided if possible.

   - **Formatting and layout:** Vary indentation styles, line breaks, whitespace usage, and statement groupings to maximize surface-level difference.

4. **Do not introduce any new features, paradigms, or functionalities beyond those already present.** Avoid adding or removing any functionality, except to safely remove truly unreachable or redundant code fragments without affecting external behavior.

5. Your final output must be **only the rewritten pseudocode** strictly adhering to the above constraints, resulting in the **maximally orthogonal variant** to the original input while guaranteeing complete semantic parity, correctness, and passing all equivalence checks.

Remember:  
- **Function/class names and their hierarchical organization must remain exactly as in the input.**  
- **Only rename internal identifiers and modify the structure inside these boundaries.**  
- **No prose, no comments, no explanation—just the transformed pseudocode.**

Produce the transformed pseudocode exclusively under these rigorous requirements.