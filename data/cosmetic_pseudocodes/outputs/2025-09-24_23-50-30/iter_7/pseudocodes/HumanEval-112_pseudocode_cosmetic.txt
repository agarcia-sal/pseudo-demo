```
FUNCTION reverse_delete(string_s, string_c)
    PROCEDURE remove_chars(index_i, acc_list)
        IF index_i IS GREATER OR EQUAL TO LENGTH OF string_s THEN
            RETURN acc_list
        END IF
        IF NOT (string_s[index_i] IN string_c) THEN
            CALL remove_chars(index_i + 1, acc_list + [string_s[index_i]])
        ELSE
            CALL remove_chars(index_i + 1, acc_list)
        END IF
    END PROCEDURE

    SET filtered_chars TO remove_chars(0, [])
    SET filtered_string TO JOIN filtered_chars INTO STRING
    SET is_palindrome TO TRUE
    SET left_index TO 0
    SET right_index TO LENGTH OF filtered_string MINUS 1
    WHILE left_index LESS OR EQUAL TO right_index DO
        IF filtered_string[left_index] IS NOT EQUAL TO filtered_string[right_index] THEN
            SET is_palindrome TO FALSE
            BREAK
        END IF
        SET left_index TO left_index + 1
        SET right_index TO right_index - 1
    END WHILE
    RETURN (filtered_string, is_palindrome)
END FUNCTION
```