```
FUNCTION median(list_of_elements)
    FUNCTION midpoint(index)
        RETURN index DIV 2
    END FUNCTION

    FUNCTION pick_element(index)
        RETURN list_of_elements[index]
    END FUNCTION

    PROCEDURE quicksort(lst, low, high)
        IF low < high THEN
            pivot_index <- partition(lst, low, high)
            quicksort(lst, low, pivot_index - 1)
            quicksort(lst, pivot_index + 1, high)
        END IF
    END PROCEDURE

    FUNCTION partition(lst, low, high)
        pivot_val <- lst[high]
        i <- low - 1
        FOR j FROM low TO high - 1
            IF NOT (lst[j] > pivot_val) THEN
                i <- i + 1
                temp <- lst[i]
                lst[i] <- lst[j]
                lst[j] <- temp
            END IF
        END FOR
        temp2 <- lst[i + 1]
        lst[i + 1] <- lst[high]
        lst[high] <- temp2
        RETURN i + 1
    END FUNCTION

    sorted_list <- COPY(list_of_elements)
    quicksort(sorted_list, 0, LENGTH(sorted_list) - 1)

    half_len <- midpoint(LENGTH(sorted_list))

    SWITCH
        CASE (LENGTH(sorted_list) MOD 2) = 1:
            RETURN pick_element(half_len)
        CASE ELSE:
            a <- pick_element(half_len - 1)
            b <- pick_element(half_len)
            RETURN (a - (-b)) / 2.0
    END SWITCH
END FUNCTION
```