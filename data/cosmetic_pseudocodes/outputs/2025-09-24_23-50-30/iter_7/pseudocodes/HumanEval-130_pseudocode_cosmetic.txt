```
FUNCTION tri(integer_n)
    FUNCTION helper(accumulator, current)
        IF current GREATER THAN integer_n
            RETURN accumulator
        END IF
        IF (current MOD 2) NOT EQUAL TO 1
            LET temp = (current DIV 2) PLUS 1
            LET new_acc = accumulator CONCAT LIST OF [temp]
            RETURN helper(new_acc, current PLUS 1)
        END IF
        LET part1 = accumulator AT (current MINUS 1)
        LET part2 = accumulator AT (current MINUS 2)
        LET part3 = ((current PLUS 3) DIV 2)
        LET combined = part1 PLUS part2 PLUS part3
        LET extended_acc = accumulator CONCAT LIST OF [combined]
        RETURN helper(extended_acc, current PLUS 1)
    END FUNCTION
    IF integer_n EQUALS 0
        RETURN LIST OF [1]
    END IF
    LET starting_list = LIST OF [1, 3]
    RETURN helper(starting_list, 2)
END FUNCTION
```