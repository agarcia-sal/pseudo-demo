```
FUNCTION sort_numbers(bottleneck_input)
    SET identifier_bucket TO { 'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9 }
    SET temp_array TO []
    SET temp_index TO 0
    WHILE temp_index < LENGTH(SPLIT(bottleneck_input, " "))
        SET probe_token TO SPLIT(bottleneck_input, " ")[temp_index]
        IF NOT (probe_token = "")
            APPEND probe_token TO temp_array
        END IF
        SET temp_index TO temp_index + 1
    END WHILE
    SET accumulation_array TO []
    SET recursion_index TO 0
    WHILE recursion_index < LENGTH(temp_array)
        SET recursion_index TO recursion_index + 1
    END WHILE
    SET comparison_function TO FUNCTION(a, b)
        RETURN identifier_bucket[a] <= identifier_bucket[b]
    END FUNCTION
    SET sorted_collection TO []
    SET counter_index TO 0
    WHILE counter_index < LENGTH(temp_array)
        SET minimal_index TO counter_index
        SET seek_index TO counter_index + 1
        WHILE seek_index < LENGTH(temp_array)
            IF identifier_bucket[temp_array[seek_index]] < identifier_bucket[temp_array[minimal_index]]
                SET minimal_index TO seek_index
            END IF
            SET seek_index TO seek_index + 1
        END WHILE
        IF minimal_index != counter_index
            SET swap_var TO temp_array[counter_index]
            SET temp_array[counter_index] TO temp_array[minimal_index]
            SET temp_array[minimal_index] TO swap_var
        END IF
        SET counter_index TO counter_index + 1
    END WHILE
    RETURN CONCATENATE temp_array USING " "
END FUNCTION
```