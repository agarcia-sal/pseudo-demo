```
FUNCTION find_closest_elements(sequence_of_vals)
    SET pair_closest TO None
    SET dist_min TO None
    SET idx_outer TO 0

    WHILE idx_outer < LENGTH(sequence_of_vals)
        SET val_outer TO sequence_of_vals[idx_outer]
        SET idx_inner TO 0
        WHILE idx_inner < LENGTH(sequence_of_vals)
            SET val_inner TO sequence_of_vals[idx_inner]

            SWITCH idx_outer != idx_inner
                CASE True:
                    SWITCH dist_min IS None
                        CASE True:
                            SET dist_min TO (val_outer - val_inner) >= 0 ? (val_outer - val_inner) : (val_inner - val_outer)
                            SET pair_closest TO (val_outer < val_inner) ? (val_outer, val_inner) : (val_inner, val_outer)
                        CASE False:
                            SET dist_current TO (val_outer - val_inner) >= 0 ? (val_outer - val_inner) : (val_inner - val_outer)
                            IF dist_current < dist_min THEN
                                SET dist_min TO dist_current
                                SET pair_closest TO (val_outer < val_inner) ? (val_outer, val_inner) : (val_inner, val_outer)
                            END IF
                    END SWITCH
                CASE False:
                    NO-OP
            END SWITCH

            SET idx_inner TO idx_inner + 1
        END WHILE
        SET idx_outer TO idx_outer + 1
    END WHILE

    RETURN pair_closest
END FUNCTION
```