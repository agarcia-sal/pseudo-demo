```
FUNCTION anti_shuffle(memo_text)
  SET tokens_sequence TO []
  SET idx_counter TO 1
  WHILE idx_counter <= LENGTH(memo_text)
    SET char_limiter TO CHAR_AT(memo_text, idx_counter)
    IF char_limiter == ' '
      ADD SUBSTRING(memo_text, 1, idx_counter - 1) TO tokens_sequence
      SET memo_text TO SUBSTRING(memo_text, idx_counter + 1)
      SET idx_counter TO 0
    END IF
    SET idx_counter TO idx_counter + 1
  END WHILE
  IF LENGTH(memo_text) > 0
    ADD memo_text TO tokens_sequence
  END IF

  SET processed_collection TO []
  SET position_marker TO 0
  WHILE position_marker < LENGTH(tokens_sequence)
    SET current_string TO ELEMENT_AT(tokens_sequence, position_marker + 1)
    SET character_array TO []
    SET pointer_kappa TO 1
    WHILE pointer_kappa <= LENGTH(current_string)
      ADD CHAR_AT(current_string, pointer_kappa) TO character_array
      SET pointer_kappa TO pointer_kappa + 1
    END WHILE

    SET sorted_character_array TO []
    WHILE LENGTH(character_array) > 0
      SET smallest_elem TO character_array[1]
      SET index_to_remove TO 1
      SET checker_iota TO 2
      WHILE checker_iota <= LENGTH(character_array)
        IF character_array[checker_iota] < smallest_elem
          SET smallest_elem TO character_array[checker_iota]
          SET index_to_remove TO checker_iota
        END IF
        SET checker_iota TO checker_iota + 1
      END WHILE
      ADD smallest_elem TO sorted_character_array
      REMOVE character_array[index_to_remove]
    END WHILE

    SET rebuilt_token TO ''
    SET iter_lamda TO 1
    WHILE iter_lamda <= LENGTH(sorted_character_array)
      SET rebuilt_token TO rebuilt_token + sorted_character_array[iter_lamda]
      SET iter_lamda TO iter_lamda + 1
    END WHILE

    ADD rebuilt_token TO processed_collection
    SET position_marker TO position_marker + 1
  END WHILE

  SET aggregated_result TO ''
  SET index_omega TO 1
  WHILE index_omega <= LENGTH(processed_collection)
    SET aggregated_result TO aggregated_result + ELEMENT_AT(processed_collection, index_omega)
    IF index_omega < LENGTH(processed_collection)
      SET aggregated_result TO aggregated_result + ' '
    END IF
    SET index_omega TO index_omega + 1
  END WHILE

  RETURN aggregated_result
END FUNCTION
```