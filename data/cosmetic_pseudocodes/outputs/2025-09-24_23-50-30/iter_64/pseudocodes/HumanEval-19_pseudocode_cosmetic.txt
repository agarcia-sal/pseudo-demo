```
FUNCTION sort_numbers(parameter_alpha)
    DECLARE map_beta AS MAP
    ASSIGN map_beta WITH MAP_LITERAL [
        ('zero', 0 + 0),
        ('one', 1 * 1),
        ('two', 1 + 1),
        ('three', 1 + 2),
        ('four', 2 + 2),
        ('five', 2 * 2 + 1),
        ('six', 3 * 2),
        ('seven', 3 * 2 + 1),
        ('eight', 4 * 2),
        ('nine', 4 * 2 + 1)
    ]

    DECLARE array_gamma AS ARRAY OF STRING
    ASSIGN array_gamma WITH []

    DECLARE index_delta AS INTEGER
    SET index_delta TO 0

    DECLARE length_epsilon AS INTEGER
    SET length_epsilon TO LENGTH(parameter_alpha)

    WHILE (index_delta < length_epsilon) LOOP
        DECLARE accumulator_theta AS STRING
        SET accumulator_theta TO ""

        :inner_loop_start:
        IF (index_delta >= length_epsilon) THEN 
            GOTO inner_loop_end
        ENDIF

        IF parameter_alpha[index_delta] = ' ' THEN
            IF accumulator_theta != "" THEN
                APPEND accumulator_theta TO array_gamma
                SET accumulator_theta TO ""
            ENDIF
            SET index_delta TO index_delta + 1
            GOTO inner_loop_start
        ELSE
            SET accumulator_theta TO accumulator_theta + parameter_alpha[index_delta]
            SET index_delta TO index_delta + 1
            GOTO inner_loop_start
        ENDIF

        :inner_loop_end:
        IF accumulator_theta != "" THEN
            APPEND accumulator_theta TO array_gamma
        ENDIF
    ENDWHILE

    DECLARE integer_zeta AS INTEGER
    DECLARE integer_eta AS INTEGER

    :outer_loop_start:
    SET integer_zeta TO 0
    WHILE (integer_zeta < LENGTH(array_gamma))
        SET integer_eta TO integer_zeta + 1
        WHILE (integer_eta < LENGTH(array_gamma))
            DECLARE bool_theta AS BOOLEAN
            SET bool_theta TO (map_beta[array_gamma[integer_zeta]] > map_beta[array_gamma[integer_eta]])
            IF bool_theta THEN
                DECLARE string_iota AS STRING
                SET string_iota TO array_gamma[integer_zeta]
                SET array_gamma[integer_zeta] TO array_gamma[integer_eta]
                SET array_gamma[integer_eta] TO string_iota
            ENDIF
            SET integer_eta TO integer_eta + 1
        ENDWHILE
        SET integer_zeta TO integer_zeta + 1
    ENDWHILE

    DECLARE string_final AS STRING
    SET string_final TO ""

    DECLARE integer_kappa AS INTEGER
    SET integer_kappa TO 0

    WHILE (integer_kappa < LENGTH(array_gamma)) DO
        IF integer_kappa = 0 THEN
            SET string_final TO array_gamma[integer_kappa]
        ELSE
            SET string_final TO string_final + " " + array_gamma[integer_kappa]
        ENDIF
        SET integer_kappa TO integer_kappa + 1
    ENDWHILE

    RETURN string_final
END FUNCTION
```