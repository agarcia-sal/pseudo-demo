```
FUNCTION split_words(input_string)
    BEGIN
        FUNCTION helper_contains_space(str_param)
            FOR each_element IN str_param
                IF each_element EQUALS " "
                    RETURN TRUE
            RETURN FALSE
        END FUNCTION

        FUNCTION helper_contains_comma(str_param)
            FOR element IN str_param
                IF element EQUALS ","
                    RETURN TRUE
            RETURN FALSE
        END FUNCTION

        FUNCTION helper_replace_commas_with_space(str_param)
            DECLARE temp_collection AS empty list
            FOR char_in_str IN str_param
                IF char_in_str EQUALS ","
                    APPEND " " TO temp_collection
                ELSE
                    APPEND char_in_str TO temp_collection
            RETURN concatenation of temp_collection as string
        END FUNCTION

        FUNCTION helper_split_whitespace(str_param)
            DECLARE words_collection AS empty list
            DECLARE current_word AS empty string
            DECLARE index_var AS 0
            WHILE index_var LESS THAN LENGTH OF str_param
                IF str_param[index_var] IS NOT " "
                    current_word <- current_word + str_param[index_var]
                ELSE IF current_word NOT EQUAL TO empty string
                    APPEND current_word TO words_collection
                    current_word <- empty string
                index_var <- index_var + 1
            IF current_word NOT EQUAL TO empty string
                APPEND current_word TO words_collection
            RETURN words_collection
        END FUNCTION

        FUNCTION helper_is_lowercase_character(char_param)
            RETURN char_param GREATER THAN OR EQUAL TO "a" AND char_param LESS THAN OR EQUAL TO "z"
        END FUNCTION

        FUNCTION helper_ascii_value(c)
            RETURN integer ASCII value of c
        END FUNCTION

        IF helper_contains_space(input_string) IS TRUE THEN DO
            RETURN helper_split_whitespace(input_string)
        ELSE
            IF helper_contains_comma(input_string) IS TRUE THEN DO
                DECLARE transformed_string AS helper_replace_commas_with_space(input_string)
                RETURN helper_split_whitespace(transformed_string)
            ELSE
                DECLARE accumulator_integer AS 0
                DECLARE iterator_index AS 0

                WHILE iterator_index LESS THAN LENGTH OF input_string DO
                    DECLARE current_character AS input_string[iterator_index]
                    IF helper_is_lowercase_character(current_character) IS TRUE AND (helper_ascii_value(current_character) MOD 2) EQUALS 0 THEN
                        accumulator_integer <- accumulator_integer + 1
                    iterator_index <- iterator_index + 1
                END WHILE

                RETURN accumulator_integer
            END IF
        END IF

    END
END FUNCTION
```