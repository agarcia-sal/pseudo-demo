```
FUNCTION sort_array(fresh_list)
    PROCEDURE helper_sort(index, fresh_accumulated)
        IF index IS EQUAL TO LENGTH(fresh_list) THEN
            RETURN fresh_accumulated
        ELSE
            SET min_pos TO index
            FOR iterator FROM index + 1 TO LENGTH(fresh_list) - 1 DO
                IF fresh_list[iterator] < fresh_list[min_pos] THEN
                    SET min_pos TO iterator
            END FOR
            SWAP fresh_list[index], fresh_list[min_pos]
            RETURN helper_sort(index + 1, fresh_accumulated)
        END IF
    END PROCEDURE

    SET fresh_sorted_decimal TO helper_sort(0, [])

    FUNCTION count_one_bits(number)
        SET fresh_count TO 0
        SET fresh_num TO number
        WHILE fresh_num > 0 DO
            SET fresh_count TO fresh_count + (fresh_num MOD 2)
            SET fresh_num TO fresh_num DIV 2
        END WHILE
        RETURN fresh_count
    END FUNCTION

    SET fresh_length TO LENGTH(fresh_sorted_decimal)
    SET fresh_index TO 0
    WHILE fresh_index < fresh_length - 1 DO
        IF count_one_bits(fresh_sorted_decimal[fresh_index]) > count_one_bits(fresh_sorted_decimal[fresh_index + 1]) THEN
            SWAP fresh_sorted_decimal[fresh_index], fresh_sorted_decimal[fresh_index + 1]
            SET fresh_index TO 0
        ELSE
            SET fresh_index TO fresh_index + 1
        END IF
    END WHILE

    RETURN fresh_sorted_decimal
END FUNCTION
```