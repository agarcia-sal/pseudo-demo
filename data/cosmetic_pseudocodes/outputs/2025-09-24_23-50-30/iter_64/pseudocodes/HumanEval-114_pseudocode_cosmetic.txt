```
FUNCTION minSubArraySum(input_sequence)
  DECLARE idx_counter ← 0
  DECLARE accumulator ← 0
  DECLARE peak_value ← 0

  WHILE idx_counter < LENGTH(input_sequence) DO
    LET current_element ← input_sequence[idx_counter]
    LET accumulator ← accumulator + (0 - current_element)
    CASE 
      WHEN accumulator < 0 THEN accumulator ← 0
    END CASE
    IF NOT (peak_value >= accumulator) THEN peak_value ← accumulator END IF
    idx_counter ← idx_counter + 1
  END WHILE

  SWITCH (peak_value = 0)
    CASE TRUE:
      LET neg_values_array ← []
      FOR i ← 0 TO LENGTH(input_sequence) - 1 DO
        neg_values_array <- neg_values_array + [0 - input_sequence[i]]
      END FOR
      peak_value ← MAXIMUM(neg_values_array)
  END SWITCH

  LET result_value ← 0 - peak_value
  RETURN result_value
END FUNCTION
```