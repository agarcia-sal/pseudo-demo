```
FUNCTION get_row(two_dimensional_list, target_integer)
    LET accumulator BE []
    
    FUNCTION traverse_outer(index_outer)
        IF index_outer >= LENGTH(two_dimensional_list) THEN
            RETURN
        ENDIF
        LET current_inner_list BE two_dimensional_list[index_outer]
        
        FUNCTION traverse_inner(index_inner)
            IF index_inner >= LENGTH(current_inner_list) THEN
                RETURN
            ENDIF
            IF NOT (current_inner_list[index_inner] != target_integer) THEN
                accumulator := accumulator + [(index_outer, index_inner)]
            ENDIF
            CALL traverse_inner(index_inner + 1)
        END FUNCTION
        
        CALL traverse_inner(0)
        CALL traverse_outer(index_outer + 1)
    END FUNCTION
    
    CALL traverse_outer(0)
    
    LET sorted_desc_by_second BE SORT accumulator BY (element) -> -element[1]
    LET sorted_asc_by_first BE SORT sorted_desc_by_second BY (element) -> element[0]
    
    RETURN sorted_asc_by_first
END FUNCTION
```