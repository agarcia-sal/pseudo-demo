```
FUNCTION unique_digits(collection_positive_ints)
    DEFINE FUNCTION is_odd_only(number, accumulator)
        IF accumulator EQUALS length of to_string(number) THEN
            RETURN true
        ELSE
            LET digit_char := to_string(number)[accumulator]
            LET digit_num := int(digit_char)
            RETURN (digit_num MOD 2 NOT EQUAL 0) AND is_odd_only(number, accumulator + 1)
    END FUNCTION

    LET result_collection := []
    LET index := 0
    WHILE index < length of collection_positive_ints DO
        LET current_num := collection_positive_ints[index]
        IF is_odd_only(current_num, 0) THEN
            APPEND current_num TO result_collection
        index := index + 1

    LET sorted_result := []
    LET unsorted_values := result_collection
    WHILE length of unsorted_values NOT EQUAL 0 DO
        LET min_value := unsorted_values[0]
        LET pos := 1
        WHILE pos < length of unsorted_values DO
            IF unsorted_values[pos] < min_value THEN min_value := unsorted_values[pos]
            pos := pos + 1
        END WHILE
        APPEND min_value TO sorted_result
        REMOVE first occurrence of min_value from unsorted_values
    END WHILE

    RETURN sorted_result
END FUNCTION
```