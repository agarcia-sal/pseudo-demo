```
FUNCTION minPath(grid, k)
    LET length_val BE LENGTH(grid)
    LET upper_bound BE length_val * length_val + 1
    LET row_idx BE 0
    WHILE row_idx < length_val
        LET col_idx BE 0
        WHILE col_idx < length_val
            IF NOT (grid[row_idx, col_idx] ≠ 1)
                LET neighbor_values BE map(
                    f = (r, c) → grid[r, c],
                    xs = filter(
                        p = (pos) → pos[0] ≥ 0 AND pos[0] < length_val AND pos[1] ≥ 0 AND pos[1] < length_val,
                        items = [
                            (row_idx - 1, col_idx),
                            (row_idx, col_idx - 1),
                            (row_idx + 1, col_idx),
                            (row_idx, col_idx + 1)
                        ]
                    )
                )
                upper_bound ← min(neighbor_values)
            END IF
            col_idx ← col_idx + 1
        END WHILE
        row_idx ← row_idx + 1
    END WHILE
    LET result_sequence BE empty_list()
    LET idx_iter BE 0
    WHILE idx_iter < k
        IF (idx_iter mod 2) ≠ 1
            append(1, result_sequence)
        ELSE
            append(upper_bound, result_sequence)
        END IF
        idx_iter ← idx_iter + 1
    END WHILE
    RETURN result_sequence
END FUNCTION
```