```
FUNCTION prod_signs(inputList)
    DEFINE FUNCTION containsZero(list, idx)
        IF idx >= LENGTH(list)
            RETURN FALSE
        ELSE IF (list[idx] = 0)
            RETURN TRUE
        ELSE
            RETURN containsZero(list, idx + 1)
        END IF
    END FUNCTION

    DEFINE FUNCTION countNegatives(list, idx, acc)
        IF idx >= LENGTH(list)
            RETURN acc
        ELSE IF (list[idx] < 0)
            RETURN countNegatives(list, idx + 1, acc + 1)
        ELSE
            RETURN countNegatives(list, idx + 1, acc)
        END IF
    END FUNCTION

    DEFINE FUNCTION sumMagnitudes(list, idx, acc)
        IF idx >= LENGTH(list)
            RETURN acc
        ELSE
            RETURN sumMagnitudes(list, idx + 1, acc + ABS(list[idx]))
        END IF
    END FUNCTION

    IF LENGTH(inputList) = 0
        RETURN None
    END IF

    IF containsZero(inputList, 0)
        LET productSign = 0
    ELSE
        LET negCount = countNegatives(inputList, 0, 0)
        LET productSign = 1
        WHILE negCount > 0
            productSign = productSign * (-1)
            negCount = negCount - 1
        END WHILE
    END IF

    LET totalMagnitude = sumMagnitudes(inputList, 0, 0)
    RETURN productSign * totalMagnitude
END FUNCTION
```