```
FUNCTION encode(message)
    LET swapCaseCharacters(INPUT) = 
        CONCATENATE(
            MAP(FUNCTION(ch)
                    IF (ch >= 'a' AND ch <= 'z')
                    THEN RETURN CHAR(ASCII(ch) - 32) 
                    ELSE IF (ch >= 'A' AND ch <= 'Z')
                         THEN RETURN CHAR(ASCII(ch) + 32)
                         ELSE RETURN ch
                ENDIF
            END, SPLIT(INPUT, ''))
        )
    END

    LET vowelCharacters = ['a','e','i','o','u','A','E','I','O','U']
    LET shiftedVowels = EMPTY_MAP
    LET idx = 0
    WHILE idx < LENGTH(vowelCharacters)
        LET currChar = vowelCharacters[idx]
        LET shiftedChar = CHAR(ASCII(currChar) + 2)
        shiftedVowels[currChar] = shiftedChar
        idx = idx + 1
    ENDWHILE

    LET transformedMessage = swapCaseCharacters(message)

    LET idx = 0
    LET resultCharacters = EMPTY_LIST
    WHILE idx < LENGTH(transformedMessage)
        LET currentChar = transformedMessage[idx]
        IF currentChar IN vowelCharacters THEN
            APPEND shiftedVowels[currentChar] TO resultCharacters
        ELSE
            APPEND currentChar TO resultCharacters
        ENDIF
        idx = idx + 1
    ENDWHILE

    RETURN CONCATENATE(resultCharacters)
END FUNCTION
```