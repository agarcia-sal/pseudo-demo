```
FUNCTION by_length(array_of_integers)
    LET mapping = {
        9: "Nine",
        8: "Eight",
        7: "Seven",
        6: "Six",
        5: "Five",
        4: "Four",
        3: "Three",
        2: "Two",
        1: "One"
    }
    LET descending = []
    LET idx = LENGTH(array_of_integers) - 1
    WHILE idx >= 0 DO
        LET max_val = array_of_integers[0]
        LET max_pos = 0
        FOR pos IN 1 TO idx DO
            IF NOT (array_of_integers[pos] < max_val) THEN
                max_val = array_of_integers[pos]
                max_pos = pos
            END IF
        END FOR
        SWAP array_of_integers[max_pos], array_of_integers[idx]
        idx = idx - 1
    END WHILE
    LET rev_pos = LENGTH(array_of_integers) - 1
    WHILE rev_pos >= 0 DO
        APPEND array_of_integers[rev_pos], descending
        rev_pos = rev_pos - 1
    END WHILE
    LET result = []
    LET w = 0
    WHILE w < LENGTH(descending) DO
        LET key = descending[w]
        LET exists = key IN mapping
        SWITCH exists
            CASE TRUE:
                APPEND mapping[key], result
            CASE FALSE:
                ; -- do nothing
        END SWITCH
        w = w + 1
    END WHILE
    RETURN result
END FUNCTION
```