```
FUNCTION tri(integer_n)
    DEFINE FUNCTION recurse(accum_list, current_index, limit)
        IF NOT(current_index <= limit) THEN RETURN accum_list
        END IF

        DEFINE boolean_evenness AS (current_index MOD 2 = 0)
        DEFINE updated_list

        SELECT boolean_evenness
          CASE TRUE:
            updated_list = accum_list CONCAT [(current_index DIV 2) + 1]
          CASE FALSE:
            DEFINE val1 AS accum_list AT (current_index - 1)
            DEFINE val2 AS accum_list AT (current_index - 2)
            DEFINE val3 AS ((current_index + 3) DIV 2)
            updated_list = accum_list CONCAT [val1 + val2 + val3]
        END SELECT

        RETURN recurse(updated_list, current_index + 1, limit)
    END FUNCTION

    IF integer_n = 0 THEN RETURN [1]
    ELSE
        RETURN recurse([1, 3], 2, integer_n)
    END IF
END FUNCTION
```