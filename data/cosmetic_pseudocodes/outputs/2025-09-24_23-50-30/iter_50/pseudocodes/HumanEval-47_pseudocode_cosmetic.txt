```
FUNCTION median(list_of_elements)
    PROCEDURE sortElements(seq_in, seq_out)
        SET seq_out TO EMPTY LIST
        FOR EACH item IN seq_in
            SET inserted TO FALSE
            FOR i FROM 0 TO LENGTH(seq_out) - 1
                IF item <= seq_out[i]
                    INSERT item AT POSITION i IN seq_out
                    SET inserted TO TRUE
                    BREAK
            IF NOT inserted
                APPEND item TO seq_out
    END PROCEDURE

    PROCEDURE getLength(lst, acc, result)
        IF acc = LENGTH(lst)
            SET result TO acc
        ELSE
            CALL getLength(lst, acc + 1, result)
    END PROCEDURE

    PROCEDURE isOdd(num, result)
        SET result TO (num MOD 2) <> 0
    END PROCEDURE

    VARIABLE sortedList INITIALLY EMPTY LIST
    CALL sortElements(list_of_elements, sortedList)

    VARIABLE lenVal INITIALLY 0
    CALL getLength(sortedList, 0, lenVal)

    VARIABLE oddFlag INITIALLY FALSE
    CALL isOdd(lenVal, oddFlag)

    VARIABLE halfIndex INITIALLY 0
    SET halfIndex TO (lenVal - (lenVal MOD 2)) / 2

    IF oddFlag
        RETURN sortedList[halfIndex]
    ELSE
        VARIABLE elemA, elemB, medianVal
        SET elemA TO sortedList[halfIndex - 1]
        SET elemB TO sortedList[halfIndex]
        SET medianVal TO (elemA + elemB) / 2.0
        RETURN medianVal
    END IF
END FUNCTION
```