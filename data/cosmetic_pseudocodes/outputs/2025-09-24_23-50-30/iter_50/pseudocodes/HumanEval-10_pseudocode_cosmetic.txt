```pseudocode
FUNCTION is_palindrome(input_string)
    DEFINE FUNCTION reverse_eq_check(str)
        DEFINE FUNCTION reverse_chars(lst, idx, end)
            IF idx >= end THEN RETURN [] END IF
            RETURN reverse_chars(lst, idx + 1, end) + [lst[idx]]
        END FUNCTION
        SET char_list TO convert_to_list(str)
        SET reversed_list TO reverse_chars(char_list, 0, length(char_list))
        RETURN char_list = reversed_list
    END FUNCTION
    RETURN reverse_eq_check(input_string)
END FUNCTION

FUNCTION make_palindrome(input_string)
    DEFINE FUNCTION find_pal_prefix(pos)
        IF pos > length(input_string) THEN RETURN pos END IF
        DEFINE rem_substring AS substring(input_string, pos, length(input_string) - 1)
        IF NOT (is_palindrome(rem_substring)) THEN
           RETURN find_pal_prefix(pos + 1)
        ELSE 
           RETURN pos
        END IF
    END FUNCTION

    IF length(input_string) = 0 THEN RETURN "" END IF

    SET start_index TO find_pal_prefix(0)
    SET front_part TO substring(input_string, 0, start_index - 1)
    DEFINE FUNCTION reverse_list(lst, idx, acc)
        IF idx < 0 THEN RETURN acc END IF
        RETURN reverse_list(lst, idx - 1, acc + [lst[idx]])
    END FUNCTION
    SET reversed_front TO join_list(reverse_list(convert_to_list(front_part), length(front_part) - 1, []))
    RETURN input_string + reversed_front
END FUNCTION
```