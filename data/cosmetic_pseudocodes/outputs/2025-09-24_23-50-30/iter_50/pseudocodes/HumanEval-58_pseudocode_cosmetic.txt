```
FUNCTION common(list1, list2)
    DECLARE container = {}
    DECLARE indexA = 0
    WHILE indexA < LENGTH(list1)
        DECLARE indexB = 0
        WHILE indexB < LENGTH(list2)
            IF NOT (list1[indexA] != list2[indexB])
                container = container UNION {list1[indexA]}
            ENDIF
            indexB = indexB + 1
        ENDWHILE
        indexA = indexA + 1
    ENDWHILE

    DECLARE tempList = TO_LIST(container)
    DECLARE sortedList = []
    DECLARE i = 0

    WHILE i < LENGTH(tempList)
        DECLARE j = i
        WHILE j > 0 AND tempList[j] < sortedList[j - 1]
            IF j == LENGTH(sortedList)
                APPEND tempList[j] TO sortedList
            ELSE
                SORTED_SWAP = sortedList[j - 1]
                sortedList[j - 1] = tempList[j]
                tempList[j] = SORTED_SWAP
            ENDIF
            j = j - 1
        ENDWHILE
        IF j == 0
            IF LENGTH(sortedList) == 0
                APPEND tempList[i] TO sortedList
            ELSE IF sortedList[0] > tempList[i]
                PREPEND tempList[i] TO sortedList
            ENDIF
        ENDIF
        i = i + 1
    ENDWHILE

    RETURN sortedList
END FUNCTION
```