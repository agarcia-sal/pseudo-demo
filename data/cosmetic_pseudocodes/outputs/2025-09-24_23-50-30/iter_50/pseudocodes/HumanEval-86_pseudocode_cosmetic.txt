```
FUNCTION anti_shuffle(input_string)
    DECLARE idx = 0
    DECLARE words = []
    DECLARE transformed = []

    PROCEDURE recursive_process()
        IF idx >= LENGTH(SPLIT input_string BY " ") THEN RETURN
        DECLARE token = SPLIT(input_string BY " ")[idx]
        DECLARE letters = CONVERT token TO LIST OF CHARACTERS
        DECLARE i, j, temp
        -- Simple insertion sort on letters --
        SET i = 1
        WHILE i < LENGTH(letters)
            SET j = i
            WHILE j > 0 AND letters[j-1] > letters[j]
                SET temp = letters[j-1]
                SET letters[j-1] = letters[j]
                SET letters[j] = temp
                SET j = j - 1
            END WHILE
            SET i = i + 1
        END WHILE
        DECLARE sorted_token = ""
        FOR ch IN letters
            SET sorted_token = sorted_token + ch
        END FOR
        APPEND sorted_token TO transformed
        SET idx = idx + 1
        CALL recursive_process()
    END PROCEDURE

    CALL recursive_process()
    DECLARE output_string = ""
    DECLARE p = 0
    WHILE p < LENGTH(transformed)
        SET output_string = output_string + transformed[p]
        IF p < LENGTH(transformed) - 1 THEN
            SET output_string = output_string + " "
        END IF
        SET p = p + 1
    END WHILE

    RETURN output_string
END FUNCTION
```