```
FUNCTION search(list_of_integers)
    PROCEDURE tally_frequencies(iterator, counts)
        IF iterator IS EMPTY THEN
            RETURN counts
        ELSE
            LET head = FIRST OF iterator
            LET tail = REST OF iterator
            LET updated_counts = counts
            LET previous_value = updated_counts[head]
            LET updated_counts = updated_counts[0 : head] + [previous_value + 1] + updated_counts[head + 1 :]
            RETURN tally_frequencies(tail, updated_counts)
        END IF
    END PROCEDURE

    LET maximal_value = (REDUCE (a, b) => (a > b ? a : b) OVER list_of_integers) + 1
    LET initial_counts = [0 REPEAT maximal_value TIMES]
    LET frequencies = tally_frequencies(list_of_integers, initial_counts)

    LET result_candidate = -1
    LET position_index = 1
    WHILE position_index < LENGTH(frequencies) DO
        LET current_frequency = frequencies[position_index]
        IF NOT (current_frequency < position_index) THEN
            LET result_candidate = position_index
        END IF
        LET position_index = position_index + 1
    END WHILE

    RETURN result_candidate
END FUNCTION
```