```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        DO
            IF NOT (integer_p >= 2) THEN RETURN False END IF
            BREAK
        LOOP WHILE FALSE

        SET integer_y TO 2
        SET integer_limit TO MIN((FLOOR(SQRT(integer_p)) + 1), (integer_p - 1))

        FUNCTION check_divisor(integer_y, integer_limit)
            IF integer_y > integer_limit THEN RETURN True END IF
            IF (integer_p MOD integer_y) = 0 THEN RETURN False END IF
            RETURN check_divisor(integer_y + 1, integer_limit)
        END FUNCTION

        RETURN check_divisor(integer_y, integer_limit)
    END FUNCTION

    SET sequence_fibs TO [0, 1]

    FUNCTION find_nth_prime_fib(remaining_counter, fibs_list)
        SET next_val TO fibs_list[-2] + fibs_list[-1]
        SET updated_list TO fibs_list + [next_val]
        SET updated_counter TO remaining_counter

        IF is_prime(next_val) = True THEN updated_counter := updated_counter - 1 END IF

        IF updated_counter = 0 THEN RETURN next_val END IF
        RETURN find_nth_prime_fib(updated_counter, updated_list)
    END FUNCTION

    RETURN find_nth_prime_fib(integer_n, sequence_fibs)
END FUNCTION
```