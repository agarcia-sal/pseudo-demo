```
FUNCTION intersection(interval1, interval2)
    FUNCTION is_prime(input_val)
        FUNCTION check_divisor_divisible(val, current)
            IF current >= val THEN
                RETURN True
            ELSEIF (val MOD current) = 0 THEN
                RETURN False
            ELSE
                RETURN check_divisor_divisible(val, current + 1)
            END IF
        END FUNCTION

        IF (input_val = 0) OR (input_val = 1) THEN RETURN False END IF
        IF input_val = 2 THEN RETURN True END IF
        RETURN check_divisor_divisible(input_val, 2)
    END FUNCTION

    SET lower_bound TO (interval1[0] >= interval2[0] ? interval1[0] : interval2[0])
    SET upper_bound TO (interval1[1] <= interval2[1] ? interval1[1] : interval2[1])
    SET length_of_intersection TO upper_bound + (-1 * lower_bound)

    IF (length_of_intersection > 0) AND (is_prime(length_of_intersection)) THEN
        RETURN "YES"
    ELSE
        RETURN "NO"
    END IF
END FUNCTION
```