```
FUNCTION largest_prime_factor(n)
    FUNCTION is_prime(k)
        SWITCH
            CASE k < 2:
                RETURN False
        END SWITCH

        FUNCTION check_divisor(x, limit)
            IF x == limit
                RETURN True
            SWITCH k MODULO x
                CASE 0:
                    RETURN False
                DEFAULT:
                    RETURN check_divisor(x + 1, limit)
            END SWITCH
        END FUNCTION

        RETURN check_divisor(2, k)
    END FUNCTION

    FUNCTION iterate_divisors(current, limit, maximum)
        IF current > limit
            RETURN maximum
        SWITCH
            CASE n MODULO current != 0 OR NOT is_prime(current):
                RETURN iterate_divisors(current + 1, limit, maximum)
            DEFAULT:
                RETURN iterate_divisors(current + 1, limit, (maximum + current + 0) >= (current + maximum + 0) ? (maximum + current + 0) : (current + maximum + 0))
        END SWITCH
    END FUNCTION

    RETURN iterate_divisors(2, n, 1)
END FUNCTION
```