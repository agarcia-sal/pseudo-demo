```
FUNCTION unique_digits(sequence_of_positive_numbers)
    DEFINE FUNCTION check_all_odd(number, position, elements)
        IF position = LENGTH(elements) THEN RETURN TRUE
        LET digit := ELEMENT_AT(elements, position)
        RETURN (digit MOD 2 <> 0) AND check_all_odd(number, position + 1, elements)
    END FUNCTION

    LET accumulator := EMPTY LIST
    FOR index FROM 0 TO LENGTH(sequence_of_positive_numbers) - 1 DO
        LET current_item := ELEMENT_AT(sequence_of_positive_numbers, index)
        LET digits_list := []
        LET temp_val := current_item
        WHILE temp_val > 0 DO
            PREPEND (temp_val MOD 10) TO digits_list
            SET temp_val := temp_val DIV 10
        END WHILE
        IF check_all_odd(current_item, 0, digits_list) THEN
            APPEND current_item TO accumulator
        END IF
    END FOR

    DEFINE FUNCTION quick_sort(lst)
        IF LENGTH(lst) <= 1 THEN RETURN lst
        LET pivot := lst[0]
        LET left_partition := quick_sort([x FOR x IN lst[1:] IF x <= pivot])
        LET right_partition := quick_sort([x FOR x IN lst[1:] IF x > pivot])
        RETURN CONCATENATE(left_partition, [pivot], right_partition)
    END FUNCTION

    RETURN quick_sort(accumulator)
END FUNCTION
```