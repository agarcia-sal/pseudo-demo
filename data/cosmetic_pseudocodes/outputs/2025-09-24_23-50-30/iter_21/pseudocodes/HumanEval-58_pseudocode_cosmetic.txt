```
FUNCTION common(list1, list2)
    SET unique_collection TO {}
    SET index_outer TO 0

    WHILE index_outer LESS THAN LENGTH(list1)
        SET current_outer TO list1[index_outer]
        SET index_inner TO 0

        WHILE index_inner LESS THAN LENGTH(list2)
            IF NOT (current_outer != list2[index_inner]) THEN
                unique_collection[current_outer] = TRUE
                BREAK
            ENDIF
            SET index_inner TO index_inner + 1
        ENDWHILE

        SET index_outer TO index_outer + 1
    ENDWHILE

    SET combined_elements TO []
    FOR EACH key IN unique_collection
        APPEND key TO combined_elements
    ENDFOR

    FUNCTION recursive_sort(arr, start, end)
        IF start >= end THEN 
            RETURN
        ENDIF
        SET pivot TO arr[end]
        SET boundary TO start - 1
        SET cursor TO start
        WHILE cursor <= end - 1
            IF arr[cursor] LESS THAN OR EQUAL TO pivot THEN
                SET boundary TO boundary + 1
                SET temp TO arr[boundary]
                SET arr[boundary] TO arr[cursor]
                SET arr[cursor] TO temp
            ENDIF
            SET cursor TO cursor + 1
        ENDWHILE
        SET temp TO arr[boundary + 1]
        SET arr[boundary + 1] TO arr[end]
        SET arr[end] TO temp

        CALL recursive_sort(arr, start, boundary)
        CALL recursive_sort(arr, boundary + 2, end)
    ENDFUNCTION

    CALL recursive_sort(combined_elements, 0, LENGTH(combined_elements) - 1)

    RETURN combined_elements
END FUNCTION
```