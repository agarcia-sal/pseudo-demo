```
FUNCTION pluck(nodes_collection)
  IF NOT (LENGTH(nodes_collection) > 0) THEN
    RETURN []
  ENDIF

  PROCEDURE collect_evens(src_nodes, evens_accum, pos)
    IF pos == LENGTH(src_nodes) THEN
      RETURN evens_accum
    ELSE
      IF (src_nodes[pos] MOD 2) == 0 THEN
        SET evens_accum TO evens_accum + [src_nodes[pos]]
      ENDIF
      RETURN collect_evens(src_nodes, evens_accum, pos + 1)
    ENDIF
  END PROCEDURE

  SET evens_list TO collect_evens(nodes_collection, [], 0)

  IF LENGTH(evens_list) == 0 THEN
    RETURN []
  ENDIF

  FUNCTION find_min_val(array, current_min, idx)
    IF idx == LENGTH(array) THEN
      RETURN current_min
    ELSE
      IF array[idx] < current_min THEN
        RETURN find_min_val(array, array[idx], idx + 1)
      ELSE
        RETURN find_min_val(array, current_min, idx + 1)
      ENDIF
    ENDIF
  END FUNCTION

  SET minimum_even TO find_min_val(evens_list, evens_list[0], 1)

  FUNCTION locate_index(arr, target, position)
    IF position == LENGTH(arr) THEN
      RETURN -1
    ELSE 
      IF (arr[position] == target) THEN
        RETURN position
      ELSE
        RETURN locate_index(arr, target, position + 1)
      ENDIF
    ENDIF
  END FUNCTION

  SET index_of_min TO locate_index(nodes_collection, minimum_even, 0)

  RETURN [minimum_even, index_of_min]
END FUNCTION
```