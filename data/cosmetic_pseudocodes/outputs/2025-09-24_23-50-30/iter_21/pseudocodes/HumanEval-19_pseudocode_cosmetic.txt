```
FUNCTION sort_numbers(input_str)
  DEFINE mapping AS DICTIONARY MAPPING
    key1 TO 0,
    key2 TO 1,
    key3 TO 2,
    key4 TO 3,
    key5 TO 4,
    key6 TO 5,
    key7 TO 6,
    key8 TO 7,
    key9 TO 8,
    key10 TO 9
  SET key1 TO 'zero'
  SET key2 TO 'one'
  SET key3 TO 'two'
  SET key4 TO 'three'
  SET key5 TO 'four'
  SET key6 TO 'five'
  SET key7 TO 'six'
  SET key8 TO 'seven'
  SET key9 TO 'eight'
  SET key10 TO 'nine'

  FUNCTION split_nonempty(str, delim, acc, idx)
    IF idx >= LENGTH(str) THEN
      IF LENGTH(acc) > 0 THEN RETURN [acc]
      ELSE RETURN []
    END IF
    IF str[idx] == delim THEN
      IF LENGTH(acc) > 0 THEN
        RETURN [acc] + split_nonempty(str, delim, "", idx + 1)
      ELSE
        RETURN split_nonempty(str, delim, "", idx + 1)
      END IF
    ELSE
      RETURN split_nonempty(str, delim, acc + str[idx], idx + 1)
    END IF
  END FUNCTION

  SET word_list TO split_nonempty(input_str, ' ', "", 0)

  FUNCTION insertion_sort(l, n)
    IF n <= 1 THEN RETURN
    insertion_sort(l, n - 1)
    SET last_element TO l[n - 1]
    SET pos TO n - 2
    WHILE pos >= 0 AND mapping[l[pos]] > mapping[last_element]
      l[pos + 1] = l[pos]
      pos = pos - 1
    END WHILE
    l[pos + 1] = last_element
  END FUNCTION

  insertion_sort(word_list, LENGTH(word_list))

  FUNCTION join_with_space(list_words, idx, res)
    IF idx == LENGTH(list_words) THEN RETURN res
    IF LENGTH(res) == 0 THEN
      RETURN join_with_space(list_words, idx + 1, list_words[idx])
    ELSE
      RETURN join_with_space(list_words, idx + 1, res + ' ' + list_words[idx])
    END IF
  END FUNCTION

  RETURN join_with_space(word_list, 0, "")
END FUNCTION
```