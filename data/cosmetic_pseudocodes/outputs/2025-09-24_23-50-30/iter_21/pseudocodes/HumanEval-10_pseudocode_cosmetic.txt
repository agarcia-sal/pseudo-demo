```
FUNCTION is_palindrome(input_string)
  DECLARE indexA TO 1
  DECLARE indexB TO LENGTH(input_string)
  WHILE indexA < indexB DO
    IF NOT (CHAR_AT(input_string, indexA) = CHAR_AT(input_string, indexB)) THEN
      RETURN FALSE
    END IF
    SET indexA TO indexA + 1
    SET indexB TO indexB - 1
  END WHILE
  RETURN TRUE
END FUNCTION

FUNCTION make_palindrome(input_string)
  IF LENGTH(input_string) = 0 THEN
    RETURN ""
  END IF

  FUNCTION find_suffix_start(current_index)
    IF current_index = LENGTH(input_string) THEN
      RETURN current_index
    ELSE IF is_palindrome(SUBSTRING(input_string, current_index, LENGTH(input_string))) THEN
      RETURN current_index
    ELSE
      RETURN find_suffix_start(current_index + 1)
    END IF
  END FUNCTION

  DECLARE split_point TO find_suffix_start(0)
  DECLARE prefix TO SUBSTRING(input_string, 0, split_point)
  DECLARE reversed_prefix TO ""
  
  DECLARE i TO LENGTH(prefix) - 1
  WHILE i >= 0 DO
    SET reversed_prefix TO reversed_prefix + CHAR_AT(prefix, i)
    SET i TO i - 1
  END WHILE

  RETURN input_string + reversed_prefix
END FUNCTION
```