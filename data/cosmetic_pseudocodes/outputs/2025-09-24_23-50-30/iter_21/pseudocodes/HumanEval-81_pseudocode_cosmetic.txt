```
FUNCTION numerical_letter_grade(input_grades)
    DECLARE result_letters AS empty queue
    DECLARE index_counter AS 0

    DEFINE FUNCTION process_grades(counter)
        IF counter EQUALS LENGTH(input_grades)
            RETURN
        LET current_value BE input_grades[counter]
        SWITCH TRUE
            CASE (current_value == 4.0):
                ENQUEUE "A+" INTO result_letters
                BREAK
            CASE (current_value > 3.7):
                ENQUEUE "A" INTO result_letters
                BREAK
            CASE (current_value > 3.3):
                ENQUEUE "A-" INTO result_letters
                BREAK
            CASE (current_value > 3.0):
                ENQUEUE "B+" INTO result_letters
                BREAK
            CASE (current_value > 2.7):
                ENQUEUE "B" INTO result_letters
                BREAK
            CASE (current_value > 2.3):
                ENQUEUE "B-" INTO result_letters
                BREAK
            CASE (current_value > 2.0):
                ENQUEUE "C+" INTO result_letters
                BREAK
            CASE (current_value > 1.7):
                ENQUEUE "C" INTO result_letters
                BREAK
            CASE (current_value > 1.3):
                ENQUEUE "C-" INTO result_letters
                BREAK
            CASE (current_value > 1.0):
                ENQUEUE "D+" INTO result_letters
                BREAK
            CASE (current_value > 0.7):
                ENQUEUE "D" INTO result_letters
                BREAK
            CASE (current_value > 0.0):
                ENQUEUE "D-" INTO result_letters
                BREAK
            DEFAULT:
                ENQUEUE "E" INTO result_letters
        CALL process_grades(counter + 1)
    END FUNCTION

    CALL process_grades(index_counter)
    RETURN CONVERT_QUEUE_TO_LIST(result_letters)
END FUNCTION
```