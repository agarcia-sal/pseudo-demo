```
FUNCTION is_multiply_prime(a_param)
    FUNCTION check_prime(value)
        SET candidate TO 2
        WHILE candidate < value
            IF (value MOD candidate) == 0 THEN RETURN False
            candidate <- candidate + 1
        END WHILE
        RETURN True
    END FUNCTION

    SET prime_i_list TO []
    SET index_i TO 2
    WHILE index_i <= 100
        IF check_prime(index_i) THEN prime_i_list.APPEND(index_i)
        index_i <- index_i + 1
    END WHILE

    SET prime_j_list TO []
    SET index_j TO 2
    WHILE index_j <= 100
        IF check_prime(index_j) THEN prime_j_list.APPEND(index_j)
        index_j <- index_j + 1
    END WHILE

    SET prime_k_list TO []
    SET index_k TO 2
    WHILE index_k <= 100
        IF check_prime(index_k) THEN prime_k_list.APPEND(index_k)
        index_k <- index_k + 1
    END WHILE

    SET found_flag TO False
    SET idx_i TO 0
    WHILE idx_i < LENGTH(prime_i_list) AND NOT found_flag
        SET current_i TO prime_i_list[idx_i]
        SET idx_j TO 0
        WHILE idx_j < LENGTH(prime_j_list) AND NOT found_flag
            SET current_j TO prime_j_list[idx_j]
            SET idx_k TO 0
            WHILE idx_k < LENGTH(prime_k_list) AND NOT found_flag
                SET current_k TO prime_k_list[idx_k]
                IF (current_i * current_j * current_k) == a_param THEN found_flag <- True
                idx_k <- idx_k + 1
            END WHILE
            idx_j <- idx_j + 1
        END WHILE
        idx_i <- idx_i + 1
    END WHILE

    RETURN found_flag
END FUNCTION
```