```
FUNCTION sort_array(input_sequence)
    FUNCTION count_ones_in_binary(number)
        SET binary_string TO EMPTY STRING
        SET count_ones TO 0
        SET temp_num TO number
        WHILE temp_num > 0
            IF (temp_num MOD 2) == 1 THEN
                SET count_ones TO count_ones + 1
            END IF
            SET temp_num TO temp_num DIV 2
        END WHILE
        RETURN count_ones
    END FUNCTION

    SET temp_sorted_sequence TO EMPTY LIST
    FOR EACH item IN input_sequence
        APPEND item TO temp_sorted_sequence
    END FOR

    FOR i FROM 0 TO LENGTH(temp_sorted_sequence) - 2
        FOR j FROM 0 TO LENGTH(temp_sorted_sequence) - 2 - i
            IF temp_sorted_sequence[j] > temp_sorted_sequence[j + 1] THEN
                SET holder TO temp_sorted_sequence[j]
                SET temp_sorted_sequence[j] TO temp_sorted_sequence[j + 1]
                SET temp_sorted_sequence[j + 1] TO holder
            END IF
        END FOR
    END FOR

    SET index_tracker TO 0
    WHILE index_tracker < LENGTH(temp_sorted_sequence)
        SET key_value TO count_ones_in_binary(temp_sorted_sequence[index_tracker])
        SET inner_index TO index_tracker + 1
        WHILE inner_index < LENGTH(temp_sorted_sequence)
            IF count_ones_in_binary(temp_sorted_sequence[inner_index]) < key_value THEN
                SET temp_storage TO temp_sorted_sequence[index_tracker]
                SET temp_sorted_sequence[index_tracker] TO temp_sorted_sequence[inner_index]
                SET temp_sorted_sequence[inner_index] TO temp_storage
                SET key_value TO count_ones_in_binary(temp_sorted_sequence[index_tracker])
            END IF
            SET inner_index TO inner_index + 1
        END WHILE
        SET index_tracker TO index_tracker + 1
    END WHILE

    RETURN temp_sorted_sequence
END FUNCTION
```