```
FUNCTION parse_nested_parens(parentheses_string)
    FUNCTION parse_paren_group(group_string)
        DECLARE depth_current <- 0
        DECLARE depth_maximum <- 0
        DECLARE idx <- 0
        DECLARE length_group <- LENGTH(group_string)
        
        WHILE idx < length_group DO
            DECLARE ch <- INDEX(group_string, idx)
            IF ch == '(' THEN
                depth_current <- depth_current + 1
                IF depth_current > depth_maximum THEN
                    depth_maximum <- depth_current
                END IF
            ELSE IF ch == ')'
                depth_current <- depth_current - 1
            END IF
            idx <- idx + 1
        END WHILE
        
        RETURN depth_maximum
    END FUNCTION

    DECLARE output_list <- EMPTY LIST
    DECLARE temp_index <- 0
    DECLARE input_length <- LENGTH(parentheses_string)
    DECLARE word_buffer <- EMPTY STRING
    
    WHILE temp_index <= input_length DO
        IF temp_index == input_length OR INDEX(parentheses_string, temp_index) == ' ' THEN
            IF LENGTH(word_buffer) > 0 THEN
                APPEND parse_paren_group(word_buffer) TO output_list
                word_buffer <- EMPTY STRING
            END IF
        ELSE
            word_buffer <- CONCATENATE(word_buffer, INDEX(parentheses_string, temp_index))
        END IF
        temp_index <- temp_index + 1
    END WHILE

    RETURN output_list
END FUNCTION
```