```
FUNCTION reverse_delete(input_string, chars_to_remove)
    DEFINE FUNCTION filter_chars(str_val, chars_val, index_val, acc_val)
        IF index_val EQUALS LENGTH(str_val) THEN
            RETURN acc_val
        ELSE
            IF NOT (str_val[index_val] IN chars_val) THEN
                RETURN filter_chars(str_val, chars_val, index_val + 1, acc_val + str_val[index_val])
            ELSE
                RETURN filter_chars(str_val, chars_val, index_val + 1, acc_val)
            END IF
        END IF
    END FUNCTION

    SET filtered_string TO filter_chars(input_string, chars_to_remove, 0, "")
    
    DEFINE FUNCTION is_palindrome(str_val, start_idx, end_idx)
        IF start_idx GREATER_OR_EQUAL end_idx THEN
            RETURN TRUE
        ELSE IF str_val[start_idx] NOT_EQUAL str_val[end_idx] THEN
            RETURN FALSE
        ELSE
            RETURN is_palindrome(str_val, start_idx + 1, end_idx - 1)
        END IF
    END FUNCTION

    SET palindrome_flag TO is_palindrome(filtered_string, 0, LENGTH(filtered_string) - 1)
    
    RETURN (filtered_string, palindrome_flag)
END FUNCTION
```