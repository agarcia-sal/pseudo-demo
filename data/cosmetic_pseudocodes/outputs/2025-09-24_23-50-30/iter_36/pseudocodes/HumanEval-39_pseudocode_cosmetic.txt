```pseudocode
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        IF NOT (integer_p >= 2) THEN
            RETURN False
        END IF

        PROCEDURE check_divisor(integer_curr, integer_limit, boolean_flag)
            IF boolean_flag = False THEN
                RETURN False
            ELSE IF integer_curr > integer_limit THEN
                RETURN True
            ELSE
                IF integer_p MOD integer_curr = 0 THEN
                    RETURN False
                ELSE
                    RETURN check_divisor(integer_curr + 1, integer_limit, True)
                END IF
            END IF
        END PROCEDURE

        SET integer_bound TO MIN(
            FLOOR(
                mathematical_functions_module.sqrt(integer_p)
            ) + 1,
            integer_p - 1
        )

        RETURN check_divisor(2, integer_bound, True)
    END FUNCTION

    SET queue_fib TO A QUEUE INITIALIZED WITH 0 FOLLOWED BY 1
    SET counter_n TO integer_n

    PROCEDURE iterate_fib(queue_fib, counter_n)
        SET integer_a TO queue_fib.dequeue()
        SET integer_b TO queue_fib.peek()
        SET integer_sum TO integer_a + integer_b
        queue_fib.enqueue(integer_sum)

        IF is_prime(integer_sum) THEN
            SET counter_n TO counter_n - 1
        END IF

        IF counter_n = 0 THEN
            RETURN integer_sum
        ELSE
            RETURN iterate_fib(queue_fib, counter_n)
        END IF
    END PROCEDURE

    RETURN iterate_fib(queue_fib, counter_n)
END FUNCTION
```