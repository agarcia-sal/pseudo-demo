```
FUNCTION pluck(collection_of_items)
    FUNCTION seek_even(items, position, accumulator)
        IF position >= LENGTH OF items THEN
            RETURN accumulator
        ELSE
            IF (items[position] MOD 2) <> 1 THEN
                accumulator.APPEND(items[position])
            END IF
            RETURN seek_even(items, position + 1, accumulator)
        END IF
    END FUNCTION

    FUNCTION find_minimum(numbers, current_index, min_val, min_pos)
        IF current_index >= LENGTH OF numbers THEN
            RETURN (min_val, min_pos)
        ELSE
            IF numbers[current_index] < min_val THEN
                RETURN find_minimum(numbers, current_index + 1, numbers[current_index], current_index)
            ELSE
                RETURN find_minimum(numbers, current_index + 1, min_val, min_pos)
            END IF
        END IF
    END FUNCTION

    SET filtered_evens TO seek_even(collection_of_items, 0, empty_list)
    IF LENGTH OF filtered_evens = 0 THEN
        RETURN empty_list
    END IF

    (min_even, min_index) = find_minimum(filtered_evens, 0, filtered_evens[0], 0)

    FUNCTION lookup_index(items, target, index)
        IF index >= LENGTH OF items THEN
            RETURN -1
        ELSE
            IF items[index] = target THEN
                RETURN index
            ELSE
                RETURN lookup_index(items, target, index + 1)
            END IF
        END IF
    END FUNCTION

    SET original_index TO lookup_index(collection_of_items, min_even, 0)

    RETURN [min_even, original_index]
END FUNCTION
```