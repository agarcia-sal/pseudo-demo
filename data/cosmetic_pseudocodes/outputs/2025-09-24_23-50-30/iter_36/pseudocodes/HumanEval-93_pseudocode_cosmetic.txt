```
FUNCTION encode(message)
    CONST vowelChars = "aeiouAEIOU"
    VAR mapping = EMPTY DICTIONARY
    VAR index = 0

    WHILE index < LENGTH(vowelChars) DO
        VAR currentChar = vowelChars[index]
        mapping[currentChar] = CHAR(ORD(currentChar) + 2)
        index = index + 1
    END WHILE

    VAR swappedMessage = ""
    VAR pos = 0

    WHILE pos < LENGTH(message) DO
        VAR ch = message[pos]
        IF ch IS UPPERCASE THEN
            swappedMessage = swappedMessage + LOWERCASE(ch)
        ELSE IF ch IS LOWERCASE THEN
            swappedMessage = swappedMessage + UPPERCASE(ch)
        ELSE
            swappedMessage = swappedMessage + ch
        END IF
        pos = pos + 1
    END WHILE

    VAR result = ""
    VAR cursor = 0

    WHILE cursor < LENGTH(swappedMessage) DO
        VAR character = swappedMessage[cursor]
        IF mapping CONTAINS KEY character THEN
            result = result + mapping[character]
        ELSE
            result = result + character
        END IF
        cursor = cursor + 1
    END WHILE

    RETURN result
END FUNCTION
```