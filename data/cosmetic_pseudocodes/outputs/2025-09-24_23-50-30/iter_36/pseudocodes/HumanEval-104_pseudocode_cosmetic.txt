```
FUNCTION unique_digits(input_sequence)
  LET accumulator_var BE an empty queue
  DEFINE process_element(position) AS
    IF position >= LENGTH(input_sequence) THEN
      RETURN
    ELSE
      LET current_candidate BE input_sequence[position]
      LET digit_index BE 0
      DEFINE check_all_digits_odd() AS
        IF digit_index >= LENGTH(STRINGIFY(current_candidate)) THEN
          ENQUEUE accumulator_var, current_candidate
          RETURN
        ELSE
          LET character_code BE ASCII_CODE(STRINGIFY(current_candidate)[digit_index])
          LET digit_value BE character_code - ASCII_CODE('0')
          IF NOT ((digit_value MOD 2) = 1) THEN
            RETURN
          ELSE
            digit_index <- digit_index + 1
            check_all_digits_odd()
          END IF
        END IF
      END DEFINE
      check_all_digits_odd()
      process_element(position + 1)
    END IF
  END DEFINE
  process_element(0)
  LET collected_list BE EMPTY_LIST()
  WHILE NOT(IS_EMPTY(accumulator_var)) DO
    APPEND collected_list, DEQUEUE(accumulator_var)
  END WHILE
  RETURN SORT(collected_list)
END FUNCTION
```