```
FUNCTION words_string(input_string)
  DEFINE result_tokens AS empty list
  IF NOT (input_string IS EMPTY) THEN
    DEFINE intermediate_chars AS empty queue
    DEFINE idx AS 0

    WHILE idx < LENGTH(input_string)
      DEFINE current_char AS input_string[idx]
      IF current_char = ',' THEN
        ENQUEUE ' ' INTO intermediate_chars
      ELSE
        ENQUEUE current_char INTO intermediate_chars
      END IF
      idx := idx + 1
    END WHILE

    DEFINE buffer AS empty string
    WHILE NOT IS_EMPTY(intermediate_chars)
      buffer := CONCAT(buffer, DEQUEUE(intermediate_chars))
    END WHILE

    DEFINE word_start AS 0
    DEFINE buffer_length AS LENGTH(buffer)

    WHILE word_start < buffer_length
      WHILE word_start < buffer_length AND buffer[word_start] = ' ' DO
        word_start := word_start + 1
      END WHILE

      IF word_start = buffer_length THEN
        BREAK
      END IF

      DEFINE word_end AS word_start
      WHILE word_end < buffer_length AND buffer[word_end] â‰  ' ' DO
        word_end := word_end + 1
      END WHILE

      APPEND SUBSTRING(buffer, word_start, word_end - word_start) TO result_tokens
      word_start := word_end
    END WHILE
  END IF
  RETURN result_tokens
END FUNCTION
```