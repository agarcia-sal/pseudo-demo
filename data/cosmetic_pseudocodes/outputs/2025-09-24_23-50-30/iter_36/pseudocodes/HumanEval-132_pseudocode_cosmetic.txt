```
FUNCTION is_nested(str)
  LET open_positions BE new queue
  LET close_positions BE new stack

  LET idx BE 0
  WHILE idx < LENGTH(str)
    IF str[idx] EQUALS '['
      ENQUEUE(idx, open_positions)
    ELSE
      PUSH(idx, close_positions)
    idx ← idx + 1
  END WHILE

  LET match_count ← 0
  LET close_index ← 0
  LET close_length ← SIZE(close_positions)

  FUNCTION process_matches(queue, stack, matched, pos)
    IF queue IS EMPTY OR pos >= close_length THEN
      RETURN matched
    LET current_open ← DEQUEUE(queue)
    LET current_close ← PEEK_AT(stack, pos)
    IF current_open < current_close THEN
      RETURN process_matches(queue, stack, matched + 1, pos + 1)
    ELSE
      RETURN process_matches(queue, stack, matched, pos)
  END FUNCTION

  LET total_matches ← process_matches(open_positions, close_positions, 0, 0)

  RETURN total_matches >= 2
END FUNCTION
```