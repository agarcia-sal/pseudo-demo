```
FUNCTION fizz_buzz(integer_n)
    DEFINE FUNCTION accumulate_divisible(pivot, accumulator)
        IF pivot == 0 THEN RETURN accumulator END IF
        LET candidate = pivot - 1
        IF (candidate MOD 11 == 0) OR (candidate MOD 13 == 0) THEN
            RETURN accumulate_divisible(candidate, accumulator + [candidate])
        ELSE
            RETURN accumulate_divisible(candidate, accumulator)
        END IF
    END FUNCTION

    LET collected_numbers = accumulate_divisible(integer_n, [])

    DEFINE FUNCTION concat_elements(elements)
        IF elements IS EMPTY THEN RETURN "" END IF
        RETURN TO_STRING(elements[0]) + concat_elements(elements[1:])
    END FUNCTION

    LET combined_text = concat_elements(collected_numbers)

    DEFINE FUNCTION count_char(target, text, index, tot)
        IF index == LENGTH(text) THEN RETURN tot END IF
        LET increment = IF text[index] == target THEN 1 ELSE 0 END IF
        RETURN count_char(target, text, index + 1, tot + increment)
    END FUNCTION

    RETURN count_char('7', combined_text, 0, 0)
END FUNCTION
```