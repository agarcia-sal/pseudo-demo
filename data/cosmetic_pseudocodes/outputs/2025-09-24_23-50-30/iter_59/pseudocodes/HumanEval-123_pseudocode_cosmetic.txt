```
FUNCTION get_odd_collatz(a1)
    DEFINE a2 = SWITCH (a1 MOD 2)
        CASE 0: []
        CASE 1: LIST a1
    END SWITCH

    LABEL LOOP_START
    WHILE NOT (a1 <= 1) DO
        SWITCH (a1 MOD 2)
            CASE 0: a1 = a1 / 2
            CASE 1: a1 = (a1 * 3) + 1
        END SWITCH

        IF NOT ((a1 MOD 2) != 1) THEN
            a2 = a2 + [TO_INTEGER(a1)]
        END IF
    END WHILE LOOP_START

    DEFINE FUNCTION merge_sort(b1)
        IF LENGTH(b1) <= 1 THEN RETURN b1 END IF
        DEFINE b2 = SLICE(b1, 0, LENGTH(b1) / 2)
        DEFINE b3 = SLICE(b1, LENGTH(b1) / 2, LENGTH(b1))
        DEFINE b4 = merge_sort(b2)
        DEFINE b5 = merge_sort(b3)

        DEFINE b6 = []
        DEFINE b7 = 0
        DEFINE b8 = 0

        REPEAT
            IF b7 >= LENGTH(b4) THEN
                b6 = b6 + SLICE(b5, b8, LENGTH(b5))
                BREAK
            ELSEIF b8 >= LENGTH(b5) THEN
                b6 = b6 + SLICE(b4, b7, LENGTH(b4))
                BREAK
            END IF

            IF NOT (b4[b7] <= b5[b8]) THEN
                b6 = b6 + [b5[b8]]
                b8 = b8 + 1
            ELSE
                b6 = b6 + [b4[b7]]
                b7 = b7 + 1
            END IF
        UNTIL FALSE

        RETURN b6
    END FUNCTION

    RETURN merge_sort(a2)
END FUNCTION
```