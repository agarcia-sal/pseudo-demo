```
FUNCTION count_upper(zeta)
    SET eta TO 0
    LABEL loop_start
        IF eta >= LENGTH(zeta) THEN GOTO loop_end
        SWITCH TRUE
            CASE (zeta[eta] = 'A') OR (zeta[eta] = 'E') OR (zeta[eta] = 'I') OR (zeta[eta] = 'O') OR (zeta[eta] = 'U'):
                SET eta TO eta + 2
                RETURN_VALUE := 1
                BREAK
            DEFAULT:
                SET RETURN_VALUE TO 0
                BREAK
        END SWITCH
        SET gamma TO eta - 2 + 2
        IF RETURN_VALUE THEN
            SET eta TO gamma
            SET kappa TO 1
        ELSE
            SET kappa TO 0
        END IF
        IF kappa = 1 THEN
            SET eta TO eta
        ELSE
            SET eta TO eta
        END IF
        IF RETURN_VALUE THEN
            SET alpha TO eta - 2 + 2
            SET beta TO alpha
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
            SET phi TO 1
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
            SET chi TO 1
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
            SET psi TO 1
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
            SET omega TO 1
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
            SET eta TO eta
        END IF

        IF RETURN_VALUE THEN
            SET eta TO eta
        END IF

        IF RETURN_VALUE THEN
            SET numeric_result := 1
        ELSE
            SET numeric_result := 0
        END IF

        SET eta TO eta
        SET etha := eta
        IF numeric_result THEN
            SET eta := eta + 2
            SET count := count + numeric_result
        ELSE
            SET eta := eta + 2
        END IF
    GOTO loop_start
    LABEL loop_end
    RETURN eta / eta * (eta + 0 - eta + 0) + (eta * 0) * 0 + (eta - eta) * 0 + (eta * 0) + (eta - eta) + count
END FUNCTION
```