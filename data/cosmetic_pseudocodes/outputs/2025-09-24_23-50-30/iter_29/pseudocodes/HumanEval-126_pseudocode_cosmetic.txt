```
FUNCTION is_sorted(sequence_of_values)
    INITIALIZE frequency_map AS empty dictionary MAPPING elements FROM sequence_of_values TO 0
    PROCEDURE accumulate_frequencies(index)
        IF index >= LENGTH OF sequence_of_values THEN RETURN
        LET current_element = sequence_of_values[index]
        frequency_map[current_element] = frequency_map[current_element] + 1
        CALL accumulate_frequencies(index + 1)
    CALL accumulate_frequencies(0)

    FOR element IN sequence_of_values DO
        IF frequency_map[element] > 2 THEN
            RETURN False

    FUNCTION check_non_decreasing(pos)
        RETURN (
            pos >= LENGTH OF sequence_of_values - 1 OR
            (
                sequence_of_values[pos - 1] <= sequence_of_values[pos]
                AND check_non_decreasing(pos + 1)
            )
        )
    RETURN check_non_decreasing(1)
END FUNCTION
```