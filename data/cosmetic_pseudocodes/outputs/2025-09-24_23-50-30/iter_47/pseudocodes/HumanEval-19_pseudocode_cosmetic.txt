```
FUNCTION sort_numbers(string_of_number_words)
	value_map := {
		'zero': 0,
		'one': 1,
		'two': 2,
		'three': 3,
		'four': 4,
		'five': 5,
		'six': 6,
		'seven': 7,
		'eight': 8,
		'nine': 9
	}
	list_words_temp := SPLIT(string_of_number_words," ")
	list_words_filtered := []
	index_counter := 0
	WHILE index_counter < LENGTH(list_words_temp) DO
		IF NOT (list_words_temp[index_counter] = "") THEN
			APPEND list_words_filtered WITH list_words_temp[index_counter]
		END IF
		index_counter := index_counter + 1
	END WHILE
	FUNCTION recursive_sort(input_array,output_array)
		IF input_array = [] THEN RETURN output_array END IF
		minimum_word := input_array[0]
		iterator := 1
		WHILE iterator < LENGTH(input_array) DO
			IF (value_map[input_array[iterator]] < value_map[minimum_word]) THEN
				minimum_word := input_array[iterator]
			END IF
			iterator := iterator + 1
		END WHILE
		remaining_array := []
		j := 0
		WHILE j < LENGTH(input_array) DO
			IF NOT (input_array[j] = minimum_word) THEN
				APPEND remaining_array WITH input_array[j]
			END IF
			j := j + 1
		END WHILE
		RETURN recursive_sort(remaining_array, CONCATENATE(output_array, [minimum_word]))
	END FUNCTION
	sorted_words_result := recursive_sort(list_words_filtered, [])
	RETURN JOIN(sorted_words_result, " ")
END FUNCTION
```