```
FUNCTION anti_shuffle(input_string)
    SET words_array TO []
    SET index_counter TO 0
    WHILE index_counter < LENGTH(input_string)
        SET current_start TO index_counter
        WHILE index_counter < LENGTH(input_string) AND input_string[index_counter] â‰  ' '
            SET index_counter TO index_counter + 1
        END WHILE
        ADD SUBSTRING(input_string, current_start, index_counter) TO words_array
        SET index_counter TO index_counter + 1
    END WHILE
    SET rearranged_words TO []
    SET position_marker TO 0
    WHILE position_marker < LENGTH(words_array)
        SET char_list TO []
        SET char_index TO 0
        WHILE char_index < LENGTH(words_array[position_marker])
            ADD words_array[position_marker][char_index] TO char_list
            SET char_index TO char_index + 1
        END WHILE
        SET char_count TO LENGTH(char_list)
        SET swap_idx TO 0
        WHILE swap_idx < char_count - 1
            SET check_idx TO swap_idx + 1
            WHILE check_idx < char_count
                IF char_list[swap_idx] > char_list[check_idx]
                    SET temp_char TO char_list[swap_idx]
                    SET char_list[swap_idx] TO char_list[check_idx]
                    SET char_list[check_idx] TO temp_char
                END IF
                SET check_idx TO check_idx + 1
            END WHILE
            SET swap_idx TO swap_idx + 1
        END WHILE
        SET reconstructed_word TO ""
        SET build_index TO 0
        WHILE build_index < char_count
            SET reconstructed_word TO reconstructed_word + char_list[build_index]
            SET build_index TO build_index + 1
        END WHILE
        ADD reconstructed_word TO rearranged_words
        SET position_marker TO position_marker + 1
    END WHILE
    SET output_string TO ""
    SET output_pos TO 0
    WHILE output_pos < LENGTH(rearranged_words)
        SET output_string TO output_string + rearranged_words[output_pos]
        IF output_pos < LENGTH(rearranged_words) - 1
            SET output_string TO output_string + " "
        END IF
        SET output_pos TO output_pos + 1
    END WHILE
    RETURN output_string
END FUNCTION
```