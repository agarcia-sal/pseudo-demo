```
FUNCTION is_nested(zeta)
    DEFINE recurse_fill(alpha, beta, xi)
        IF xi EQUALS LENGTH OF zeta THEN
            RETURN (alpha, beta)
        ELSE
            IF zeta[xi] EQUALS '[' THEN
                RETURN recurse_fill(alpha + [xi], beta, xi + 1)
            ELSE
                RETURN recurse_fill(alpha, beta + [xi], xi + 1)
            END IF
        END IF
    END DEFINE

    DEFINE check_pairs(delta, epsilon, mu, nu)
        IF mu EQUALS LENGTH OF epsilon THEN
            RETURN 0
        ELSE
            CASE
            WHEN delta[nu] LESS THAN epsilon[mu] THEN
                RETURN 1 + check_pairs(delta, epsilon, mu + 1, nu + 1)
            ELSE
                RETURN check_pairs(delta, epsilon, mu + 1, nu)
            END CASE
        END IF
    END DEFINE

    SET theta, iota TO recurse_fill([], [], 0)
    SET kappa TO LENGTH OF iota - 1
    DEFINE reversed_iota()
        IF kappa LESS THAN 0 THEN
            RETURN []
        ELSE
            RETURN [iota[kappa]] + reversed_iota_helper(kappa - 1)
        END IF
    END DEFINE

    DEFINE reversed_iota_helper(omega)
        IF omega LESS THAN 0 THEN
            RETURN []
        ELSE
            RETURN [iota[omega]] + reversed_iota_helper(omega - 1)
        END IF
    END DEFINE

    SET lambda TO reversed_iota()
    SET sigma TO check_pairs(theta, lambda, 0, 0)
    RETURN sigma GREATER THAN OR EQUAL TO 2
END FUNCTION
```