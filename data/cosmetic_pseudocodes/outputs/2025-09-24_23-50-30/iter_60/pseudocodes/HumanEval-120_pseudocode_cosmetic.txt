```
FUNCTION maximum(beta, theta)
  PROCEDURE aux(psi, omega, eta)
    IF omega = 0 THEN
      RETURN []
    ELSE
      DEFINE delta = LENGTH(psi) - omega
      RETURN SLICE(psi, delta, LENGTH(psi))
    END IF
  END PROCEDURE

  PROCEDURE insertion_sort(epsilon, zeta)
    PROCEDURE insert_item(iota, kappa)
      IF kappa <= 0 OR iota[kappa - 1] <= iota[kappa] THEN
        RETURN
      ELSE
        DEFINE lambda_temp = iota[kappa - 1]
        iota[kappa - 1] <- iota[kappa]
        iota[kappa] <- lambda_temp
        CALL insert_item(iota, kappa - 1)
      END IF
    END PROCEDURE

    PROCEDURE sort_index(nu)
      IF nu >= LENGTH(epsilon) THEN RETURN
      ELSE
        CALL insert_item(epsilon, nu)
        CALL sort_index(nu + 1)
      END IF
    END PROCEDURE

    CALL sort_index(1)
  END PROCEDURE

  CALL insertion_sort(beta, 0)
  RETURN aux(beta, beta, theta)
END FUNCTION
```