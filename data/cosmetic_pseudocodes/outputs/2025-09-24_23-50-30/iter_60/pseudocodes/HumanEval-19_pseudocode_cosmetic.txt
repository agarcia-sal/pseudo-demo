```
FUNCTION sort_numbers(gamma)
    SET delta TO DICTIONARY KEYED BY
        'seven' -> 7,
        'two' -> 2,
        'five' -> 5,
        'eight' -> 8,
        'three' -> 3,
        'six' -> 6,
        'one' -> 1,
        'four' -> 4,
        'nine' -> 9,
        'zero' -> 0

    FUNCTION local_filter(epsilon, zeta, eta)
        IF eta >= LENGTH(epsilon) THEN
            RETURN zeta
        ELSE
            IF epsilon[eta] != '' THEN
                SET sigma TO APPEND(zeta, epsilon[eta])
            ELSE
                SET sigma TO zeta
            END IF
            RETURN local_filter(epsilon, sigma, eta + 1)
        END IF
    END FUNCTION

    FUNCTION local_sort(theta, i)
        IF i >= LENGTH(theta) - 1 THEN
            RETURN theta
        ELSE 
            FUNCTION swap_pass(kappa, lambda, mu)
                IF mu >= LENGTH(kappa) - 1 THEN
                    RETURN lambda
                ELSE
                    IF delta[kappa[mu]] > delta[kappa[mu+1]] THEN
                        SET nu TO kappa
                        SET temp TO nu[mu]
                        SET nu[mu] TO nu[mu+1]
                        SET nu[mu+1] TO temp
                        RETURN swap_pass(nu, nu, mu + 1)
                    ELSE
                        RETURN swap_pass(kappa, lambda, mu + 1)
                    END IF
                END IF
            END FUNCTION
            RETURN local_sort(swap_pass(theta, theta, 0), i + 1)
        END IF
    END FUNCTION

    SET raw_list TO SPLIT(gamma, ' ')
    SET filtered_list TO local_filter(raw_list, [], 0)
    SET final_sorted TO local_sort(filtered_list, 0)

    FUNCTION joiner(p, q)
        IF p >= LENGTH(q) THEN
            RETURN ''
        ELSE
            IF p = LENGTH(q) - 1 THEN
                RETURN q[p]
            ELSE
                RETURN q[p] + ' ' + joiner(p + 1, q)
            END IF
        END IF
    END FUNCTION

    RETURN joiner(0, final_sorted)
END FUNCTION
```