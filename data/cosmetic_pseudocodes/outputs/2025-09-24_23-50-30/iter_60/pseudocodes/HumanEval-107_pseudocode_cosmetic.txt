```
FUNCTION even_odd_palindrome(p)
    FUNCTION is_palindrome(a)
        FUNCTION reverse_string(s, idx, acc)
            IF idx < 0 THEN
                RETURN acc
            ELSE
                RETURN reverse_string(s, idx - 1, acc + s[idx])
        END FUNCTION

        LET str_val BE TO_STRING(a)
        LET rev_val BE reverse_string(str_val, LENGTH(str_val) - 1, "")
        RETURN NOT (str_val != rev_val)
    END FUNCTION

    FUNCTION loop_counter(q, ev_cnt, od_cnt)
        IF q > p THEN
            RETURN (ev_cnt, od_cnt)
        ELSE
            LET remainder BE q - ((q / 2) * 2)
            SWITCH
                CASE remainder = 1 AND is_palindrome(q) = TRUE:
                    RETURN loop_counter(q + 1, ev_cnt, od_cnt + 1)
                CASE remainder = 0 AND is_palindrome(q) = TRUE:
                    RETURN loop_counter(q + 1, ev_cnt + 1, od_cnt)
                DEFAULT:
                    RETURN loop_counter(q + 1, ev_cnt, od_cnt)
            END SWITCH
    END FUNCTION

    RETURN loop_counter(1, 0, 0)
END FUNCTION
```