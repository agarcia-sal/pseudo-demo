```
FUNCTION sort_even(list_of_elements)
    DECLARE first_group AS EMPTY SEQUENCE
    DECLARE second_group AS EMPTY SEQUENCE
    DECLARE idx AS INTEGER = 0
    WHILE idx < LENGTH(list_of_elements)
        IF idx MODULO 2 EQUALS 0
            APPEND list_of_elements[idx] TO first_group
        ELSE
            APPEND list_of_elements[idx] TO second_group
        INCREMENT idx BY 1
    END WHILE

    CALL quicksort(first_group, 0, LENGTH(first_group) - 1)

    DECLARE reassembled AS EMPTY SEQUENCE
    DECLARE counter AS INTEGER = 0
    WHILE counter < LENGTH(second_group)
        APPEND first_group[counter] TO reassembled
        APPEND second_group[counter] TO reassembled
        INCREMENT counter BY 1
    END WHILE

    IF LENGTH(first_group) > LENGTH(second_group)
        APPEND first_group[LENGTH(first_group) - 1] TO reassembled
    END IF

    RETURN reassembled
END FUNCTION


FUNCTION quicksort(arr, low, high)
    IF low < high
        DECLARE partition_idx AS INTEGER = partition(arr, low, high)
        CALL quicksort(arr, low, partition_idx - 1)
        CALL quicksort(arr, partition_idx + 1, high)
    END IF
END FUNCTION


FUNCTION partition(arr, low, high)
    DECLARE pivot AS arr[high]
    DECLARE i AS low - 1
    DECLARE j AS low
    WHILE j <= high - 1
        IF arr[j] <= pivot
            INCREMENT i BY 1
            SWAP arr[i] WITH arr[j]
        END IF
        INCREMENT j BY 1
    END WHILE
    SWAP arr[i + 1] WITH arr[high]
    RETURN i + 1
END FUNCTION
```