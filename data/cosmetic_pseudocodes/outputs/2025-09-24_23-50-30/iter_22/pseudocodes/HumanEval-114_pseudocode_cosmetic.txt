```
FUNCTION minSubArraySum(sequence)
    DEFINE FUNCTION reduceSum(seq, idx, accSum, bestSum)
        IF idx >= LENGTH(seq) THEN
            RETURN bestSum
        END IF
        LET updatedAcc = accSum + (-seq[idx])
        LET constrainedAcc = (updatedAcc < 0) 
                             ? 0 
                             : updatedAcc
        LET newBest = (constrainedAcc > bestSum) 
                      ? constrainedAcc 
                      : bestSum
        RETURN reduceSum(seq, idx + 1, constrainedAcc, newBest)
    END FUNCTION

    LET maxSumCandidate = reduceSum(sequence, 0, 0, 0)

    IF maxSumCandidate == 0 THEN
        LET negations = []
        FOR i FROM 0 TO LENGTH(sequence) - 1 DO
            negations.ADD(-sequence[i])
        END FOR
        LET maxNegation = negations[0]
        FOR element IN negations DO
            IF element > maxNegation THEN
                maxNegation = element
            END IF
        END FOR
        maxSumCandidate = maxNegation
    END IF

    LET minimumResult = -maxSumCandidate

    RETURN minimumResult
END FUNCTION
```