```
FUNCTION is_palindrome(alpha)
	recur_is_palindrome(0, LENGTH OF alpha - 1, alpha)
END FUNCTION

FUNCTION recur_is_palindrome(left_idx, right_idx, alpha)
	LOOP
		IF left_idx >= right_idx THEN
			RETURN TRUE
		END IF
		IF NOT (alpha[left_idx] EQUALS alpha[right_idx]) THEN
			RETURN FALSE
		END IF
		left_idx <- left_idx + 1
		right_idx <- right_idx - 1
	END LOOP
END FUNCTION

FUNCTION make_palindrome(input_str)
	DEFINE FUNCTION search_prefix(idx, str) RETURNS INTEGER
		IF idx >= LENGTH OF str THEN
			RETURN idx
		END IF
		SWITCH is_palindrome(SUBSTRING OF str FROM idx TO LENGTH OF str - 1)
			CASE TRUE:
				RETURN idx
			CASE FALSE:
				RETURN search_prefix(idx + 1, str)
		END SWITCH
	END FUNCTION

	IF (LENGTH OF input_str EQUALS 0) THEN RETURN "" END IF

	SET prefix_marker TO search_prefix(0, input_str)

	RETURN CONCATENATE(input_str, REVERSE OF SUBSTRING OF input_str FROM 0 TO prefix_marker - 1)
END FUNCTION
```