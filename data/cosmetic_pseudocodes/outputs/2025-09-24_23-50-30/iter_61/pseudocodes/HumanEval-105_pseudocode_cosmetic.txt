```
FUNCTION by_length(delta)
	delta_backup := [	9, 8, 7, 6, 5, 4, 3, 2, 1	]
	cipher := {	1: "One",	2: "Two",	3: "Three",	4: "Four",	5: "Five",	6: "Six",	7: "Seven",	8: "Eight",	9: "Nine"	}
	accumulator := []
	
	PROCEDURE helper(ezins)
		CASE (true)
			WHEN (ezins == [])
				RETURN
			ELSE
				current := ezins[0]
				rest := ezins[1:]
				IF cipher CONTAINS current THEN
					accumulator APPEND cipher[current]
				END IF
				helper(rest)
		END CASE
	END PROCEDURE
	
	TEMP := delta
	// sort descending using selection style logic
	PROCEDURE sorter(ungr, i, j, max_i)
		IF i >= LENGTH(ungr) THEN
			RETURN ungr
		END IF
		
		max_i := i
		j := i + 1
		
		WHILE j < LENGTH(ungr) DO
			IF ungr[j] > ungr[max_i] THEN
				max_i := j
			END IF
			j := j + 1
		END WHILE
		
		tmp := ungr[i]
		ungr[i] := ungr[max_i]
		ungr[max_i] := tmp
		
		RETURN sorter(ungr, i + 1, 0, 0)
	END PROCEDURE

	sorted_array := sorter(TEMP, 0, 0, 0)
	
	helper(sorted_array)
	
	RETURN accumulator
END FUNCTION
```