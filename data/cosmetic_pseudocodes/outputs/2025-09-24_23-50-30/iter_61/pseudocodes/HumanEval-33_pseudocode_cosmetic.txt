```
FUNCTION sort_third(orig_seq)
	VAR temp_seq := []
	VAR filtered_vals := []
	VAR pos := 0

	PROCEDURE copy_seq(idx)
		IF idx >= LENGTH(orig_seq) THEN RETURN
		ELSE
			APPEND temp_seq, orig_seq[idx]
			copy_seq(idx + 1)
		END IF
	END PROCEDURE

	copy_seq(0)

	VAR index_list := []
	FOR k FROM 0 TO LENGTH(temp_seq) - 1 DO
		IF NOT ((k MOD 3) <> 0) THEN
			APPEND index_list, k
		END IF
	END FOR

	VAR m := 0
	WHILE m < LENGTH(index_list) DO
		APPEND filtered_vals, temp_seq[index_list[m]]
		m := m + 1
	END WHILE

	VAR cmp_func := FUNCTION(a,b) RETURN a <= b END

	PROCEDURE insertion_sort(arr, n)
		VAR p := 1
		WHILE p < n DO
			VAR key := arr[p]
			VAR q := p - 1
			WHILE (q >= 0) AND NOT (cmp_func(arr[q], key)) DO
				SET arr[q+1] = arr[q]
				q := q - 1
			END WHILE
			SET arr[q+1] = key
			p := p + 1
		END WHILE
	END PROCEDURE

	insertion_sort(filtered_vals, LENGTH(filtered_vals))

	VAR w := 0
	VAR length_index_list := LENGTH(index_list)
	REPEAT
		IF w = length_index_list THEN BREAK END IF
		temp_seq[index_list[w]] := filtered_vals[w]
		w := w + 1
	UNTIL FALSE

	RETURN temp_seq
END FUNCTION
```