```
FUNCTION search(collection)
	return helper(collection, create_frequency(create_zero_array(find_max(collection) + 1)), -1, 1)
END FUNCTION

FUNCTION create_zero_array(size)
	SET zeros TO empty_list
	SET counter TO 0
	WHILE counter IS LESS THAN size
		APPEND 0 TO zeros
		SET counter TO counter + 1
	END WHILE
	RETURN zeros
END FUNCTION

FUNCTION find_max(data)
	SET current_max TO -âˆž
	FOR EACH temp_element IN data
		IF temp_element > current_max
			SET current_max TO temp_element
		END IF
	END FOR
	RETURN current_max
END FUNCTION

FUNCTION create_frequency(numbers, freq)
	IF LENGTH(numbers) IS 0
		RETURN freq
	END IF
	SET head TO FIRST(numbers)
	SET tail TO SLICE(numbers, 1, LENGTH(numbers) - 1)
	SET updated_freq TO increment_position(freq, head)
	RETURN create_frequency(tail, updated_freq)
END FUNCTION

FUNCTION increment_position(array, pos)
	RETURN update_element(array, pos, fetch(array, pos) + 1)
END FUNCTION

FUNCTION fetch(array, idx)
	RETURN array[idx]
END FUNCTION

FUNCTION update_element(array, idx, val)
	SET updated_list TO empty_list
	SET i TO 0
	WHILE i IS LESS THAN LENGTH(array)
		IF i IS idx
			APPEND val TO updated_list
		ELSE
			APPEND array[i] TO updated_list
		END IF
		SET i TO i + 1
	END WHILE
	RETURN updated_list
END FUNCTION

FUNCTION helper(freq_array, freq_list, candidate, cursor)
	IF cursor > LENGTH(freq_list) - 1
		RETURN candidate
	END IF
	IF NOT (freq_list[cursor] < cursor)
		SET candidate TO cursor
	END IF
	RETURN helper(freq_array, freq_list, candidate, cursor + 1)
END FUNCTION
```