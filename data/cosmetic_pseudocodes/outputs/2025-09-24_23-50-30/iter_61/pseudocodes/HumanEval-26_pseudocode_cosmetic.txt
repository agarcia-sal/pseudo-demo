```
FUNCTION remove_duplicates(array_input)
	IMPORT collections_module

	PROCEDURE build_counts(idx, counts_map)
		IF idx EQUALS LENGTH(array_input) THEN
			RETURN counts_map
		ELSE
			SET element TO array_input[idx]
			IF element IN counts_map THEN
				SET counts_map[element] TO counts_map[element] PLUS 1
			ELSE
				SET counts_map[element] TO 1
			END IF
			CALL build_counts(idx PLUS 1, counts_map)
		END IF
	END PROCEDURE

	SET counts TO build_counts(0, collections_module.Counter())

	PROCEDURE filter_unique(idx, acc_list)
		IF idx EQUALS LENGTH(array_input) THEN
			RETURN acc_list
		ELSE
			SET current_element TO array_input[idx]
			SWITCH
				CASE counts[current_element] GREATER THAN 1
					CALL filter_unique(idx PLUS 1, acc_list)
				CASE counts[current_element] LESS THAN OR EQUAL TO 1
					CALL filter_unique(idx PLUS 1, acc_list PLUS [current_element])
			END SWITCH
		END IF
	END PROCEDURE

	RETURN filter_unique(0, [])
END FUNCTION
```