```
FUNCTION odd_count(sequence_of_words)
	DEFINE helper_process(words, accumulator, index)
		IF index EQUALS LENGTH(words) THEN
			RETURN accumulator
		ENDIF
		DEFINE word TO words[index]
		DEFINE iterator_position TO 0
		DEFINE count_odd TO 0
		WHILE iterator_position LESS THAN LENGTH(word) DO
			DEFINE symbol TO word[iterator_position]
			SWITCH (NOT ((INTEGER_VALUE(symbol) MODULO 2) EQUALS 0))
				CASE true:
					count_odd = count_odd + 1
				CASE false:
					: 
			ENDSWITCH
			iterator_position = iterator_position + 1
		ENDWHILE
		DEFINE formatted_string TO CONCATENATE(
			"the number of odd elements ",
			TO_STRING(count_odd),
			"n the str",
			TO_STRING(count_odd),
			"ng ",
			TO_STRING(count_odd),
			" of the ",
			TO_STRING(count_odd),
			"nput."
		)
		DEFINE new_accumulator TO accumulator
		APPEND formatted_string TO new_accumulator
		RETURN helper_process(words, new_accumulator, index + 1)
	ENDDEFINE

	RETURN helper_process(sequence_of_words, EMPTY_LIST, 0)
END FUNCTION
```