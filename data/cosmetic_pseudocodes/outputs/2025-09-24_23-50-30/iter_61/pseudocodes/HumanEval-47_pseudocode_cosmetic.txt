```
FUNCTION median(data_collection)
	DEFINE FUNCTION recursive_fetch(index, data_list)
		IF index = 0
			RETURN data_list[0]
		ELSE
			RETURN recursive_fetch(index - 1, data_list[1:])
	CALL sorted_list = [] 
	DEFINE i = 0
	WHILE i < LENGTH(data_collection)
		APPEND data_collection[i] TO sorted_list
		i = i + 1
	END WHILE
	sorted_list = SORT(sorted_list)
	DEFINE total_count = LENGTH(sorted_list)
	DEFINE is_even = (total_count MOD 2) = 0
	DEFINE HALF = total_count DIV 2
	DEFINE FUNCTION compute_median_even(pos1, pos2)
		RETURN (sorted_list[pos1] + sorted_list[pos2]) / 2.0
	IF is_even
		RETURN compute_median_even(HALF - 1, HALF)
	SWITCH TRUE
		CASE total_count MOD 2 <> 0:
			RETURN sorted_list[HALF]
	END SWITCH
END FUNCTION
```