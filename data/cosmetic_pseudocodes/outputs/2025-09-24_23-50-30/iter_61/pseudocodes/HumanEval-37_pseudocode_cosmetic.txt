```
FUNCTION sort_even(list_of_elements)
	DEFINE FUNCTION recursive_merge(even_list, odd_list, accumulator, position)
		CASE position
			WHEN 0 TO MINIMUM(LENGTH(even_list), LENGTH(odd_list)) - 1:
				APPEND even_list[position] TO accumulator
				APPEND odd_list[position] TO accumulator
				RETURN recursive_merge(even_list, odd_list, accumulator, position + 1)
			WHEN MINIMUM(LENGTH(even_list), LENGTH(odd_list)):
				IF LENGTH(even_list) > LENGTH(odd_list) THEN
					APPEND even_list[position] TO accumulator
				RETURN accumulator
		END CASE
	SET extracted_even TO []
	SET extracted_odd TO []
	DEFINE index_tracker TO 0
	WHILE index_tracker < LENGTH(list_of_elements)
		APPEND list_of_elements[index_tracker] TO extracted_even
		SET index_tracker TO index_tracker + 2
	SET index_tracker TO 1
	WHILE index_tracker < LENGTH(list_of_elements)
		APPEND list_of_elements[index_tracker] TO extracted_odd
		SET index_tracker TO index_tracker + 2
	SET sorted_even TO extracted_even
	CALL FUNCTION bubble_sort WITH sorted_even
	RETURN recursive_merge(sorted_even, extracted_odd, [], 0)

DEFINE FUNCTION bubble_sort(arr)
	DEFINE n TO LENGTH(arr)
	FOR i FROM 0 TO n - 2
		FOR j FROM 0 TO n - i - 2
			IF arr[j] > arr[j + 1] THEN
				SET temp_val TO arr[j]
				SET arr[j] TO arr[j + 1]
				SET arr[j + 1] TO temp_val
	END FOR
END FUNCTION
```