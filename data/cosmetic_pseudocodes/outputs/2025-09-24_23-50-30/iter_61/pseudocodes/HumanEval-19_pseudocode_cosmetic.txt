```
FUNCTION sort_numbers(string_of_number_words)
	dict_alpha TO MAP OF
		'zero' MAPPED TO 0,
		'one' MAPPED TO 1,
		'two' MAPPED TO 2,
		'three' MAPPED TO 3,
		'four' MAPPED TO 4,
		'five' MAPPED TO 5,
		'six' MAPPED TO 6,
		'seven' MAPPED TO 7,
		'eight' MAPPED TO 8,
		'nine' MAPPED TO 9
	words_list TO EMPTY LIST
	index_cursor TO 0
	temp_str TO EMPTY STRING
	
	WHILE index_cursor < LENGTH(string_of_number_words)
		CHARACTER current_char IS string_of_number_words[index_cursor]
		
		IF current_char IS NOT ' ' THEN
			temp_str = temp_str + current_char
		ELSE
			IF LENGTH(temp_str) > 0 THEN
				APPEND temp_str TO words_list
				temp_str = EMPTY STRING
			END IF
		END IF
		index_cursor = index_cursor + 1
	END WHILE
	IF LENGTH(temp_str) > 0 THEN
		APPEND temp_str TO words_list
	END IF
	
	FUNCTION insertion_sort(arr, length_n)
		counter_i TO 1
		WHILE counter_i < length_n
			key_value TO arr[counter_i]
			key_comparable TO dict_alpha[key_value]
			counter_j TO counter_i - 1
			
			LOOP
				IF counter_j < 0 THEN
					BREAK
				END IF
				IF dict_alpha[arr[counter_j]] > key_comparable THEN
					arr[counter_j + 1] = arr[counter_j]
					counter_j = counter_j - 1
				ELSE
					BREAK
				END IF
			END LOOP
			
			arr[counter_j + 1] = key_value
			counter_i = counter_i + 1
		END WHILE
	END FUNCTION
	
	insertion_sort(words_list, LENGTH(words_list))
	
	RESULT_STRING TO EMPTY STRING
	pos_i TO 0
	LENGTH_WORDS TO LENGTH(words_list)
	WHILE pos_i < LENGTH_WORDS
		RESULT_STRING = RESULT_STRING + words_list[pos_i]
		IF NOT (pos_i = LENGTH_WORDS - 1) THEN
			RESULT_STRING = RESULT_STRING + ' '
		END IF
		pos_i = pos_i + 1
	END WHILE
	
	RETURN RESULT_STRING
END FUNCTION
```