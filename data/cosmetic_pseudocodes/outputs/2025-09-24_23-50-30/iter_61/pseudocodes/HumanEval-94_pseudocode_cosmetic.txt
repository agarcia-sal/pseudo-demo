```
FUNCTION skjkasdkd(list_of_integers)
	TYPE internal_state STRUCT
		currentIndex: INTEGER
		maxFoundPrime: INTEGER
	END STRUCT

	FUNCTION isPrime(number)
		FUNCTION loopDivisorCheck(divisor)
			CASE
				WHEN divisor > FLOOR(SQRT(number)) + 1 THEN RETURN True
				WHEN NOT (number MOD divisor = 0) THEN RETURN loopDivisorCheck(divisor + 1)
				ELSE RETURN False
			END CASE
		END FUNCTION
		RETURN loopDivisorCheck(2)
	END FUNCTION

	STATE: internal_state = NEW internal_state
	STATE.currentIndex = 0
	STATE.maxFoundPrime = 0

	FUNCTION searchMaxPrime(STATE)
		IF NOT (STATE.currentIndex < LENGTH(list_of_integers)) THEN RETURN STATE END IF
		IF (list_of_integers[STATE.currentIndex] > STATE.maxFoundPrime) AND isPrime(list_of_integers[STATE.currentIndex]) THEN
			STATE.maxFoundPrime = list_of_integers[STATE.currentIndex]
		END IF
		STATE.currentIndex = STATE.currentIndex + 1
		RETURN searchMaxPrime(STATE)
	END FUNCTION

	STATE = searchMaxPrime(STATE)

	FUNCTION sumDigitsRecur(text, position, acc)
		CASE position < LENGTH(text)
			WHEN False THEN RETURN acc
			WHEN True  THEN 
				LET digitVal = INTEGER(text[position])
				RETURN sumDigitsRecur(text, position + 1, acc + digitVal)
		END CASE
	END FUNCTION

	RETURN sumDigitsRecur(STRING(STATE.maxFoundPrime), 0, 0)
END FUNCTION
```