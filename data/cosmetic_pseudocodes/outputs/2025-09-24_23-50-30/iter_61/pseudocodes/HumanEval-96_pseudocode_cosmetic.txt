```
FUNCTION count_up_to(alpha)
	primesList ← empty list
	PROCEDURE check_division(beta, gamma, delta)
		CASE TRUE OF
			(beta MOD gamma = 0) : RETURN FALSE
			((gamma + 1) < delta) : RETURN check_division(beta, gamma + 1, delta)
			DEFAULT : RETURN TRUE
		END CASE
	END PROCEDURE

	PROCEDURE iterate_candidates(epsilon, zeta, results)
		IF epsilon >= zeta THEN
			RETURN results
		ELSE 
			primeFlag ← check_division(epsilon, 2, epsilon)
			updatedResults ← (primeFlag = TRUE) ? (results APPEND epsilon) : results
			RETURN iterate_candidates(epsilon + 1, zeta, updatedResults)
		END IF
	END PROCEDURE

	RETURN iterate_candidates(2, alpha, primesList)
END FUNCTION
```