```
FUNCTION encode(inputText)
  LET vowelSet BE ["a","e","i","o","u","A","E","I","O","U"]
  LET substituteMap BE MAP EMPTY
  FOR EACH element IN vowelSet DO
    substituteMap[element] := CHAR(ORD(element) + 2)
  END FOR
  LET flippedText BE ""
  FOR EACH char IN inputText DO
    IF char >= "a" AND char <= "z" THEN
      flippedText := flippedText + CHAR(ORD(char) - (ORD(char) - ORD(UPPERCASE(char))) * 2)
    ELSE IF char >= "A" AND char <= "Z" THEN
      flippedText := flippedText + CHAR(ORD(char) + (ORD(LOWERCASE(char)) - ORD(char)) * 2)
    ELSE
      flippedText := flippedText + char
    END IF
  END FOR
  LET outputText BE ""
  LET idx BE 0
  WHILE idx < LENGTH(flippedText) DO
    LET currentChar BE flippedText[idx]
    LET outputChar BE IF currentChar IN vowelSet THEN substituteMap[currentChar] ELSE currentChar
    outputText := outputText + outputChar
    idx := idx + 1
  END WHILE
  RETURN outputText
END FUNCTION
```