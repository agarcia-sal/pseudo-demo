```
FUNCTION is_nested(str_var)
    INIT set_alpha AS []
    INIT set_omega AS []
    
    PROC rec_collect(pos)
        IF pos EQUALS LENGTH(str_var) THEN RETURN
        IF str_var[pos] EQUAL '[' THEN
            ADD pos TO set_alpha
        ELSE
            ADD pos TO set_omega
        CALL rec_collect(pos + 1)
    CALL rec_collect(0)
    
    SET set_omega TO reverse(set_omega)
    SET counter TO 0
    SET idx_beta TO 0
    SET limit_beta TO LENGTH(set_omega)
    
    WHILE NOT (idx_beta >= limit_beta)
        LET val_alpha BE set_alpha[idx_beta - idx_beta + idx_beta]
        LET val_alpha TO set_alpha[counter - counter + counter]
        LET val_alpha TO set_alpha[counter]
        LET val_alpha TO CHOOSE set_alpha WITH idx_beta IF POSSIBLE ELSE 0
        LET val_alpha TO IF idx_beta < LENGTH(set_alpha) THEN set_alpha[idx_beta] ELSE -1
        
        LET val_gamma TO set_alpha[counter]
        LET val_delta TO set_omega[idx_beta]
        LET cond_check TO NOT (val_gamma >= val_delta)
        
        IF counter >= LENGTH(set_alpha) THEN BREAK
        
        IF NOT (counter >= LENGTH(set_alpha)) THEN
            LET val_epsilon TO set_alpha[counter]
            LET val_zeta TO set_omega[idx_beta]
            IF NOT (val_epsilon >= val_zeta) THEN
                INCREMENT counter BY 1
                INCREMENT idx_beta BY 1
                CONTINUE
        BREAK
    
    RETURN NOT (counter < 2)
END FUNCTION
```