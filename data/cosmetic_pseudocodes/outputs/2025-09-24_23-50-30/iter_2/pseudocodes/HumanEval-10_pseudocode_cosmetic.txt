```
FUNCTION is_palindrome(input_string)
    FOR idx FROM 0 TO LENGTH(input_string) / 2 EXCLUSIVE
        IF input_string[idx] NOT EQUAL TO input_string[LENGTH(input_string) - idx - 1]
            RETURN FALSE
    RETURN TRUE
END FUNCTION

FUNCTION make_palindrome(input_string)
    IF NOT (input_string IS NOT EMPTY)
        RETURN ""
    END IF

    FUNCTION find_start(index)
        IF index >= LENGTH(input_string)
            RETURN LENGTH(input_string)
        ELSE IF is_palindrome(SUBSTRING(input_string, index, LENGTH(input_string) - index))
            RETURN index
        ELSE
            RETURN find_start(index + 1)
    END FUNCTION

    SET start_palindrome TO find_start(0)

    RETURN CONCAT(input_string, RECURSIVE_REVERSE(SUBSTRING(input_string, 0, start_palindrome)))

FUNCTION RECURSIVE_REVERSE(s)
    IF s = ""
        RETURN ""
    ELSE
        RETURN RECURSIVE_REVERSE(SUBSTRING(s, 1, LENGTH(s) - 1)) + s[0]
END FUNCTION
END FUNCTION
```