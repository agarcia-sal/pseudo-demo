```
FUNCTION sort_numbers(string_of_number_words)
    value_dictionary := {
        'nine':9, 'eight':8, 'seven':7,
        'six':6, 'five':5, 'four':4,
        'three':3, 'two':2, 'one':1,
        'zero':0
    }
    FUNCTION recursive_filter(words, index, acc)
        IF index >= LENGTH(words) THEN
            RETURN acc
        IF words[index] = '' THEN
            RETURN recursive_filter(words, index + 1, acc)
        RETURN recursive_filter(words, index + 1, acc + [words[index]])
    END FUNCTION
    tokens := recursive_filter(string_of_number_words.SPLIT(' '), 0, [])
    FUNCTION insertion_sort(arr, n)
        IF n <= 1 THEN
            RETURN
        insertion_sort(arr, n - 1)
        key_word := arr[n-1]
        key_val := value_dictionary[key_word]
        j := n - 2
        WHILE j >= 0 AND value_dictionary[arr[j]] > key_val DO
            arr[j+1] := arr[j]
            j := j - 1
        END WHILE
        arr[j+1] := key_word
    END FUNCTION
    insertion_sort(tokens, LENGTH(tokens))
    result_string := ''
    FOR i FROM 0 TO LENGTH(tokens) - 1 DO
        IF i = LENGTH(tokens) - 1 THEN
            result_string := result_string + tokens[i]
        ELSE
            result_string := result_string + tokens[i] + ' '
    RETURN result_string
END FUNCTION
```