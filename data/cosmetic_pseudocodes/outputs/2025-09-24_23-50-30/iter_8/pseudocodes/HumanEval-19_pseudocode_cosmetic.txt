```
FUNCTION sort_numbers(string_of_number_words)
    LET numeric_values BE NEW DICTIONARY
    numeric_values['nine'] = 9
    numeric_values['eight'] = 8
    numeric_values['seven'] = 7
    numeric_values['six'] = 6
    numeric_values['five'] = 5
    numeric_values['four'] = 4
    numeric_values['three'] = 3
    numeric_values['two'] = 2
    numeric_values['one'] = 1
    numeric_values['zero'] = 0

    LET raw_tokens BE []
    LET index BE 1
    LET length_counter BE LENGTH(string_of_number_words)
    WHILE index <= length_counter
        LET current_char BE CHARACTER_AT(string_of_number_words, index)
        IF current_char == ' '
            APPEND '' TO raw_tokens
        ELSE
            IF LENGTH(raw_tokens) == 0 THEN APPEND '' TO raw_tokens
            LET last_position BE LENGTH(raw_tokens)
            LET last_string BE raw_tokens[last_position]
            raw_tokens[last_position] = CONCAT(last_string, current_char)
        END IF
        index = index + 1
    END WHILE

    LET cleaned_tokens BE FILTER(raw_tokens, LAMBDA(item) RETURN item != '')

    FOR i FROM LENGTH(cleaned_tokens) - 1 DOWNTO 0
        FOR j FROM 1 TO i
            LET val_a BE numeric_values[cleaned_tokens[j - 1]]
            LET val_b BE numeric_values[cleaned_tokens[j]]
            IF val_a > val_b THEN
                LET temp_swap BE cleaned_tokens[j - 1]
                cleaned_tokens[j - 1] = cleaned_tokens[j]
                cleaned_tokens[j] = temp_swap
            END IF
        END FOR
    END FOR

    LET result_string BE ''
    FOR k FROM 0 TO LENGTH(cleaned_tokens) - 2
        result_string = CONCAT(result_string, cleaned_tokens[k], ' ')
    END FOR
    IF LENGTH(cleaned_tokens) > 0 THEN
        result_string = CONCAT(result_string, cleaned_tokens[LENGTH(cleaned_tokens) - 1])
    END IF
    
    RETURN result_string
END FUNCTION
```