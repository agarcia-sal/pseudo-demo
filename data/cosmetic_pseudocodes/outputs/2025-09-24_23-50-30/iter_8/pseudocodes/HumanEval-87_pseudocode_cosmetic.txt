```
FUNCTION get_row(two_dimensional_list, target_integer)
    DECLARE result_positions AS LIST ← []
    DECLARE outer_index AS INTEGER ← 0
    WHILE outer_index <= LENGTH(two_dimensional_list) - 1 DO
        DECLARE inner_index AS INTEGER ← 0
        WHILE inner_index <= LENGTH(two_dimensional_list[outer_index]) - 1 DO
            DECLARE current_value AS INTEGER ← two_dimensional_list[outer_index][inner_index]
            IF NOT (current_value ≠ target_integer) THEN
                result_positions APPEND (outer_index, inner_index)
            END IF
            inner_index ← inner_index + 1
        END WHILE
        outer_index ← outer_index + 1
    END WHILE
    PROCEDURE sort_by_first_element_ascending(L)
        FOR i FROM 0 TO LENGTH(L) - 2 DO
            FOR j FROM i + 1 TO LENGTH(L) - 1 DO
                IF L[i][0] > L[j][0] THEN
                    SET temp TO L[i]
                    L[i] ← L[j]
                    L[j] ← temp
                END IF
            END FOR
        END FOR
    END PROCEDURE
    PROCEDURE sort_by_second_element_descending(L)
        FOR p FROM 0 TO LENGTH(L) - 2 DO
            FOR q FROM p + 1 TO LENGTH(L) - 1 DO
                IF L[p][1] < L[q][1] THEN
                    SET temp_swap TO L[p]
                    L[p] ← L[q]
                    L[q] ← temp_swap
                END IF
            END FOR
        END FOR
    END PROCEDURE
    sort_by_second_element_descending(result_positions)
    sort_by_first_element_ascending(result_positions)
    RETURN result_positions
END FUNCTION
```