```
FUNCTION sort_numbers(string_of_number_words)
  value_map := EMPTY DICTIONARY
  ASSIGN value_map['zero'], value_map['one'], value_map['two'], value_map['three'], value_map['four'] := 0, 1, 2, 3, 4
  ASSIGN value_map['five'], value_map['six'], value_map['seven'], value_map['eight'], value_map['nine'] := 5, 6, 7, 8, 9

  FUNCTION filter_nonempty(words_list, index, acc)
    IF index >= LENGTH(words_list) THEN
      RETURN acc
    ELSE
      current_word := words_list[index]
      IF LENGTH(current_word) > 0 THEN
        RETURN filter_nonempty(words_list, index+1, acc + [current_word])
      ELSE
        RETURN filter_nonempty(words_list, index+1, acc)
      ENDIF
    ENDIF
  ENDFUNCTION

  words_array := SPLIT string_of_number_words BY ' '
  filtered_words := filter_nonempty(words_array, 0, [])

  FUNCTION insert_in_order(sorted_arr, element)
    IF LENGTH(sorted_arr) = 0 THEN
      RETURN [element]
    ELSE IF value_map[element] < value_map[sorted_arr[0]] THEN
      RETURN [element] + sorted_arr
    ELSE
      RETURN [sorted_arr[0]] + insert_in_order(SLICE sorted_arr FROM 1 TO END, element)
    ENDIF
  ENDFUNCTION

  FUNCTION sort_recursive(unsorted_arr, acc)
    IF LENGTH(unsorted_arr) = 0 THEN
      RETURN acc
    ELSE
      first_elem := unsorted_arr[0]
      remaining := SLICE unsorted_arr FROM 1 TO END
      RETURN sort_recursive(remaining, insert_in_order(acc, first_elem))
    ENDIF
  ENDFUNCTION

  sorted_list := sort_recursive(filtered_words, [])

  RETURN JOIN sorted_list WITH ' '
END FUNCTION
```