```
FUNCTION pluck(array_of_nodes)
    DEFINE recursive_find_minimum(items, current_min, current_min_idx, pos)
        IF pos >= LENGTH OF items THEN
            RETURN (current_min, current_min_idx)
        ELSE
            IF items[pos] < current_min THEN
                RETURN recursive_find_minimum(items, items[pos], pos, pos + 1)
            ELSE
                RETURN recursive_find_minimum(items, current_min, current_min_idx, pos + 1)
            END IF
        END IF
    END DEFINE

    IF NOT (LENGTH OF array_of_nodes > 0) THEN
        RETURN empty_list
    END IF

    DEFINE extract_even(elements, idx, acc)
        IF idx = LENGTH OF elements THEN
            RETURN acc
        ELSE
            IF elements[idx] MOD 2 = 0 THEN
                RETURN extract_even(elements, idx + 1, acc + [elements[idx]])
            ELSE
                RETURN extract_even(elements, idx + 1, acc)
            END IF
        END IF
    END DEFINE

    even_vals = extract_even(array_of_nodes, 0, [])

    IF LENGTH OF even_vals <= 0 THEN
        RETURN empty_list
    END IF

    (min_val, min_idx) = recursive_find_minimum(even_vals, even_vals[0], 0, 1)

    original_index = 0
    DEFINE find_original_index(arr, val, pos)
        IF pos >= LENGTH OF arr THEN
            RETURN -1
        ELSE IF arr[pos] = val THEN
            RETURN pos
        ELSE
            RETURN find_original_index(arr, val, pos + 1)
        END IF
    END DEFINE

    original_index = find_original_index(array_of_nodes, min_val, 0)

    RETURN [min_val, original_index]
END FUNCTION
```