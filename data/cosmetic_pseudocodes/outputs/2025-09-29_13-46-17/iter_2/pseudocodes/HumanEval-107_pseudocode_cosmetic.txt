```
FUNCTION even_odd_palindrome(n)
  FUNCTION is_palindrome(number)
    number_str ← CONVERT number TO STRING
    reversed_str ← ""
    
    PROCEDURE reverse_string(index)
      IF index < 0 THEN
        RETURN
      END IF
      reversed_str ← reversed_str + SUBSTRING(number_str, index, index)
      reverse_string(index - 1)
    END PROCEDURE
    
    reverse_string(LENGTH(number_str) - 1)
    RETURN number_str == reversed_str
  END FUNCTION

  FUNCTION count_palindromes(current, max_val, even_count, odd_count)
    IF current > max_val THEN
      RETURN (even_count, odd_count)
    END IF

    IF is_palindrome(current) THEN
      IF (current MOD 2) != 0 THEN
        odd_count ← odd_count + 1
      ELSE
        even_count ← even_count + 1
      END IF
    END IF

    RETURN count_palindromes(current + 1, max_val, even_count, odd_count)
  END FUNCTION

  RETURN count_palindromes(1, n, 0, 0)
END FUNCTION
```