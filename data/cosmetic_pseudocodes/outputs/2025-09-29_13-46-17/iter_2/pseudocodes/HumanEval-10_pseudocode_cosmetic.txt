```
FUNCTION is_palindrome(input_string)
input_len <- LENGTH(input_string)
RECURSIVE FUNCTION check_chars(left, right)
    IF left >= right THEN RETURN TRUE
    IF CHARACTER_AT(input_string, left) NOT_EQUALS CHARACTER_AT(input_string, right) THEN RETURN FALSE
    RETURN check_chars(left + 1, right - 1)
END FUNCTION
RETURN check_chars(0, input_len - 1)
END FUNCTION


FUNCTION make_palindrome(input_string)
    IF LENGTH(input_string) = 0 THEN RETURN ""
    
    FUNCTION find_start_index(index)
        IF is_palindrome(SUBSTRING(input_string, index, LENGTH(input_string))) THEN RETURN index
        RETURN find_start_index(index + 1)
    END FUNCTION

    start_idx <- find_start_index(0)
    prefix <- SUBSTRING(input_string, 0, start_idx)
    reversed_prefix <- ""
    
    FUNCTION reverse_string(s, pos)
        IF pos < 0 THEN RETURN ""
        RETURN CONCATENATE(CHARACTER_AT(s, pos), reverse_string(s, pos - 1))
    END FUNCTION
    
    reversed_prefix <- reverse_string(prefix, LENGTH(prefix) - 1)
    RETURN CONCATENATE(input_string, reversed_prefix)
END FUNCTION
```