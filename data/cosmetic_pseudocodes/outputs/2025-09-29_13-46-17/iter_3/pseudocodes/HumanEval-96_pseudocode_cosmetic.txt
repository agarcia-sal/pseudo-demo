```
FUNCTION count_up_to(n)
    FUNCTION check_prime(candidate, divisor)
        IF divisor * divisor > candidate THEN
            RETURN True
        ELSE IF candidate MODULO divisor = 0 THEN
            RETURN False
        ELSE
            RETURN check_prime(candidate, divisor + 1)
        END IF
    END FUNCTION

    FUNCTION accumulate_primes(current, limit, collected)
        IF current >= limit THEN
            RETURN collected
        ELSE IF check_prime(current, 2) THEN
            RETURN accumulate_primes(current + 1, limit, collected + [current])
        ELSE
            RETURN accumulate_primes(current + 1, limit, collected)
        END IF
    END FUNCTION

    RETURN accumulate_primes(2, n, [])
END FUNCTION
```