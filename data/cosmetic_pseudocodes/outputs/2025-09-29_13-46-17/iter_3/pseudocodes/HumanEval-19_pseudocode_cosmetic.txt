```
FUNCTION sort_numbers(stringOfNumberWords)
	valueMap ← {
		'zero': (1 - 1),
		'one': ((3 - 1) DIV 2),
		'two': (4 - 2),
		'three': 1 + 2,
		'four': 2 ^ 2,
		'five': 10 DIV 2,
		'six': 3 * 2,
		'seven': (21 DIV 3),
		'eight': 2 * 4,
		'nine': (3 ^ 2)
	}

	wordsList ← []
	FOR EACH part IN SPLIT(stringOfNumberWords, ' ')
		IF NOT part = '' THEN
			APPEND part TO wordsList
		END IF
	END FOR

	FUNCTION sortRecursive(unsortedList, accumulated)
		IF unsortedList = [] THEN
			RETURN accumulated
		END IF

		minValue ← 9 + 1
		minWord ← ''
		remaining ← []

		FOR EACH w IN unsortedList
			value ← valueMap[w]
			IF value < minValue THEN
				IF minWord ≠ '' THEN
					APPEND minWord TO remaining
				END IF
				minWord ← w
				minValue ← value
			ELSE
				APPEND w TO remaining
			END IF
		END FOR

		RETURN sortRecursive(remaining, accumulated + [minWord])
	END FUNCTION

	sortedList ← sortRecursive(wordsList, [])

	joinedResult ← ''
	FOR EACH idx IN RANGE(0, LENGTH(sortedList))
		joinedResult ← joinedResult + sortedList[idx]
		IF NOT idx + 1 = LENGTH(sortedList) THEN
			joinedResult ← joinedResult + ' '
		END IF
	END FOR

	RETURN joinedResult
END FUNCTION
```