```
FUNCTION prime_fib(integer_n)
  IMPORT mathematical_functions_module

  FUNCTION is_prime(integer_p)
    IF NOT (integer_p >= 2) THEN
      RETURN False
    END IF

    FUNCTION checkDivisor(currentDivisor, maxDivisor)
      IF currentDivisor > maxDivisor THEN
        RETURN True
      END IF
      IF (integer_p MODULO currentDivisor) = 0 THEN
        RETURN False
      END IF
      RETURN checkDivisor(currentDivisor + 1, maxDivisor)
    END FUNCTION

    SET sqrtLimit TO (INTEGER PART OF (mathematical_functions_module.SQUARE_ROOT(integer_p))) + 1
    SET maxCheck TO sqrtLimit
    IF integer_p - 1 < sqrtLimit THEN
      SET maxCheck TO integer_p - 1
    END IF

    RETURN checkDivisor(2, maxCheck)
  END FUNCTION

  SET fibonacciSequence TO [0, 1]

  FUNCTION primeFibHelper(primesRemaining)
    SET lastIndex TO (LENGTH OF fibonacciSequence) - 1
    SET nextVal TO fibonacciSequence[lastIndex] + fibonacciSequence[lastIndex - 1]

    APPEND nextVal TO fibonacciSequence

    IF is_prime(nextVal) THEN
      SET primesRemaining TO primesRemaining - 1
      IF primesRemaining = 0 THEN
        RETURN nextVal
      END IF
    END IF

    RETURN primeFibHelper(primesRemaining)
  END FUNCTION

  RETURN primeFibHelper(integer_n)
END FUNCTION
```