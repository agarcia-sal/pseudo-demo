```
FUNCTION f(nCamel)
	returnValues ← []
	
	DEFINE processNumber(k)
		IF NOT (k MOD 2 ≠ 0) THEN
			DEFINE computeFact(accumulator, num, limit)
				IF num > limit THEN
					RETURN accumulator
				END IF
				RETURN computeFact(accumulator * num, num + 1, limit)
			END DEFINE
			RETURN computeFact(1, 1, k)
		END IF
		
		IF (k MOD 2 ≠ 0) THEN
			DEFINE computeSum(accumulator, num, limit)
				IF num > limit THEN
					RETURN accumulator
				END IF
				RETURN computeSum(accumulator + num, num + 1, limit)
			END DEFINE
			RETURN computeSum(0, 1, k)
		END IF
	END DEFINE
	
	DEFINE iterate(m)
		IF m > nCamel THEN
			RETURN
		END IF
		APPEND processNumber(m) TO returnValues
		iterate(m + 1)
	END DEFINE
	
	iterate(1)
	RETURN returnValues
END FUNCTION
```