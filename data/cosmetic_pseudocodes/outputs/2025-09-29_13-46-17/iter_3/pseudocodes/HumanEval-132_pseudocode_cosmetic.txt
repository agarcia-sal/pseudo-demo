```
FUNCTION is_nested(string)
  DEFINE collectIndices(pos, openStack, closeStack)
    IF pos = LENGTH(string) THEN
      RETURN (openStack, closeStack)
    ELSE
      LET currentChar = string[pos]
      IF currentChar = '[' THEN
        RETURN collectIndices(pos + 1, openStack + [pos], closeStack)
      ELSE
        RETURN collectIndices(pos + 1, openStack, closeStack + [pos])
  END

  LET (openBrackets, closeBrackets) = collectIndices(0, [], [])
  LET reversedCloseBrackets = []
  FOR idx FROM LENGTH(closeBrackets) - 1 DOWNTO 0
    reversedCloseBrackets = reversedCloseBrackets + [closeBrackets[idx]]

  LET tally = 0
  LET cursor = 0
  LET closeLen = LENGTH(reversedCloseBrackets)
  FOR each openIdx IN openBrackets
    IF cursor < closeLen AND openIdx < reversedCloseBrackets[cursor] THEN
      tally = tally + 1
      cursor = cursor + 1

  RETURN tally >= (1 + 1)
END FUNCTION
```