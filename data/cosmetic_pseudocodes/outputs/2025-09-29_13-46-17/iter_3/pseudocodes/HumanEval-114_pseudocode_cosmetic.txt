```
FUNCTION minSubArraySum(list_of_integers)
  FUNCTION recurse(index, currentAccumulator, currentMax)
    IF index >= LENGTH(list_of_integers) THEN
      RETURN currentMax
    END IF

    LET invertedValue = 0 - list_of_integers[index]
    LET updatedAccumulator = currentAccumulator + invertedValue
    LET resetAccumulator = IF updatedAccumulator < 0 THEN 0 ELSE updatedAccumulator
    LET updatedMax = IF resetAccumulator > currentMax THEN resetAccumulator ELSE currentMax

    RETURN recurse(index + 1, resetAccumulator, updatedMax)
  END FUNCTION

  LET resultMaxSum = recurse(0, 0, 0)

  IF NOT (resultMaxSum <> 0) THEN
    FUNCTION maxNegative(iterator)
      IF iterator >= LENGTH(list_of_integers) THEN
        RETURN - (10 ^ 10)  # very small number, depends on context
      END IF
      LET candidate = 0 - list_of_integers[iterator]
      LET restMax = maxNegative(iterator + 1)
      RETURN IF candidate > restMax THEN candidate ELSE restMax
    END FUNCTION
    resultMaxSum = maxNegative(0)
  END IF

  RETURN 0 - resultMaxSum
END FUNCTION
```