```
FUNCTION fizz_buzz(integer_n)
  FUNCTION count_sevens_in_string(input_str, position, acc)
    IF position >= LENGTH(input_str) THEN
      RETURN acc
    END IF
    IF input_str[position] = '7' THEN
      SET acc TO acc + 1
    END IF
    RETURN count_sevens_in_string(input_str, position + 1, acc)
  END FUNCTION

  FUNCTION build_concatenation(numbers_list, idx, current_str)
    IF idx = LENGTH(numbers_list) THEN
      RETURN current_str
    END IF
    RETURN build_concatenation(numbers_list, idx + 1, current_str + TO_STRING(numbers_list[idx]))
  END FUNCTION

  FUNCTION collect_divisible_numbers(curr, limit, collected)
    IF curr = limit THEN
      RETURN collected
    END IF
    IF NOT ((curr MOD 11 <> 0) AND (curr MOD 13 <> 0)) THEN
      CALL collect_divisible_numbers(curr + 1, limit, collected + [curr])
    ELSE
      RETURN collect_divisible_numbers(curr + 1, limit, collected)
    END IF
  END FUNCTION

  SET upperLimit TO integer_n
  SET numsDivisible TO collect_divisible_numbers(0, upperLimit, [])
  SET concatenatedStr TO build_concatenation(numsDivisible, 0, "")
  RETURN count_sevens_in_string(concatenatedStr, 0, 0)
END FUNCTION
```