```
FUNCTION sort_even(list_of_elements)
    SET accumulator TO EMPTY LIST
    SET evens TO EMPTY LIST
    SET odds TO EMPTY LIST
    SET idx TO 0

    WHILE idx < LENGTH OF list_of_elements DO
        IF idx MOD 2 = 0 THEN
            APPEND list_of_elements[idx] TO evens
        ELSE
            APPEND list_of_elements[idx] TO odds
        END IF
        SET idx TO idx + 1
    END WHILE

    CALL sort_ascending(evens)

    FUNCTION assemble_result(evenElems, oddElems, accum, position)
        IF position = LENGTH OF oddElems THEN
            IF LENGTH OF evenElems > LENGTH OF oddElems THEN
                APPEND evenElems[LENGTH OF evenElems - 1] TO accum
            END IF
            RETURN accum
        ELSE
            APPEND evenElems[position] TO accum
            APPEND oddElems[position] TO accum
            RETURN assemble_result(evenElems, oddElems, accum, position + 1)
        END IF
    END FUNCTION

    RETURN assemble_result(evens, odds, accumulator, 0)
END FUNCTION


FUNCTION sort_ascending(arr)
    IF LENGTH OF arr <= 1 THEN
        RETURN arr
    END IF
    SET pivot TO arr[0]
    SET lowerPart TO EMPTY LIST
    SET greaterPart TO EMPTY LIST
    FOR element IN arr FROM INDEX 1 TO LENGTH-1 DO
        IF element <= pivot THEN
            APPEND element TO lowerPart
        ELSE
            APPEND element TO greaterPart
        END IF
    END FOR
    RETURN CONCATENATE(sort_ascending(lowerPart), [pivot], sort_ascending(greaterPart))
END FUNCTION
```