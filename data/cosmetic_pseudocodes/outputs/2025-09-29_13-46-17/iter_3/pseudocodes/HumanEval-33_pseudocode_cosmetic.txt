```
FUNCTION sort_third(listInput)
  DEFINE recursiveInsert(sortedArr, val)
    IF sortedArr IS EMPTY THEN
      RETURN [val]
    END IF
    IF val < sortedArr[0] THEN
      RETURN [val] + sortedArr
    ELSE
      RETURN [sortedArr[0]] + recursiveInsert(sortedArr[1..], val)
    END IF
  END DEFINE

  FUNCTION insertionSort(arr)
    IF arr IS EMPTY THEN
      RETURN []
    ELSE
      LET head = arr[0]
      LET tailSorted = insertionSort(arr[1..])
      RETURN recursiveInsert(tailSorted, head)
    END IF
  END FUNCTION

  LET copyList = []
  FOR EACH element IN listInput DO
    APPEND element TO copyList
  END FOR

  LET indicesDivByThree = []
  LET collectedVals = []
  
  LET i = 0
  WHILE i < LENGTH(copyList) DO
    IF NOT ((i % 3) <> 0) THEN
      APPEND i TO indicesDivByThree
      APPEND copyList[i] TO collectedVals
    END IF
    SET i = i + 1
  END WHILE

  LET sortedVals = insertionSort(collectedVals)

  DEFINE placeValues(indexList, vals, targetList, pos)
    IF pos >= LENGTH(indexList) THEN
      RETURN
    END IF
    targetList[indexList[pos]] = vals[pos]
    placeValues(indexList, vals, targetList, pos + 1)
  END DEFINE

  placeValues(indicesDivByThree, sortedVals, copyList, 0)

  RETURN copyList
END FUNCTION
```