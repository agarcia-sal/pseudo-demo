```
FUNCTION unique_digits(listOfPositiveIntegers)
    PROCEDURE checkOddDigitsRecursively(numbersList, accumulator)
        IF numbersList IS empty THEN
            RETURN accumulator
        ELSE
            LET currentNumber BE first element of numbersList
            LET remainingNumbers BE all elements of numbersList except the first

            PROCEDURE isDigitOdd(num)
                IF num = 0 THEN
                    RETURN TRUE
                ELSE IF (num MOD 10) MOD 2 = 0 THEN
                    RETURN FALSE
                ELSE
                    RETURN isDigitOdd(num DIV 10)
            END PROCEDURE

            IF NOT isDigitOdd(currentNumber) THEN
                RETURN checkOddDigitsRecursively(remainingNumbers, accumulator)
            ELSE
                RETURN checkOddDigitsRecursively(remainingNumbers, accumulator + [currentNumber])
        END IF
    END PROCEDURE

    LET collectedOddElements BE checkOddDigitsRecursively(listOfPositiveIntegers, [])
    PROCEDURE insertionSort(listToSort)
        IF listToSort IS empty OR length of listToSort = 1 THEN
            RETURN listToSort
        ELSE
            LET headElement BE first element of listToSort
            LET tailSorted BE insertionSort(all elements of listToSort except first)
            PROCEDURE insertSorted(element, sortedList)
                IF sortedList IS empty THEN
                    RETURN [element]
                ELSE IF element <= first element of sortedList THEN
                    RETURN [element] + sortedList
                ELSE
                    RETURN [first element of sortedList] + insertSorted(element, all elements of sortedList except first)
                END IF
            END PROCEDURE
            RETURN insertSorted(headElement, tailSorted)
        END IF
    END PROCEDURE

    RETURN insertionSort(collectedOddElements)
END FUNCTION
```