```
FUNCTION encode_cyclic(input_string)
groupsList ← []

FUNCTION processGroup(idx)
    IF idx = ((LENGTH(input_string) + 2) DIV 3) THEN
        RETURN
    ELSE
        startPos ← idx * 3
        endPos ← startPos + 3
        endPos ← IF endPos < LENGTH(input_string) THEN endPos ELSE LENGTH(input_string)
        groupsList APPEND SUBSTRING(input_string, startPos, endPos)
        processGroup(idx + 1)
    END IF
END FUNCTION

processGroup(0)

rotatedGroups ← []

FOR EACH grp IN groupsList DO
    IF NOT (LENGTH(grp) ≠ 3) THEN
        rotated ← CONCAT(SUBSTRING(grp, 1, LENGTH(grp)), SUBSTRING(grp, 0, 1))
        rotatedGroups APPEND rotated
    ELSE
        rotatedGroups APPEND grp
    END IF
END FOR

resultString ← ""
FOR EACH element IN rotatedGroups DO
    resultString ← resultString + element
END FOR

RETURN resultString
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```