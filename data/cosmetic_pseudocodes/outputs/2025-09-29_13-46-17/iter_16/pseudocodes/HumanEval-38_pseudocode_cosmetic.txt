```
FUNCTION encode_cyclic(input_string)
	LET 𝛼𝛿₁ ← {}
	LET Ḅ9𝑞ʘ ← 0
	WHILE NOT ((Ḅ9𝑞ʘ > ((LENGTH(input_string) + 2) DIV 3) - 1)) DO
		LET ෴ƛџݍ ← 3 * Ḅ9𝑞ʘ
		LET ۜɃₓ ← LENGTH(input_string)
		LET ʂǷ₁ ← IF ( ( (෴ƛџݍ + 3) < ۜɃₓ ) ) THEN (෴ƛџݍ + 3) ELSE ۜɃₓ
		LET ȹـٻ ← SUBSTRING(input_string, ෴ƛџݍ, ʂǷ₁)
		SET 𝛼𝛿₁ ← 𝛼𝛿₁ ∪ {ȹـٻ}
		SET Ḅ9𝑞ʘ ← Ḅ9𝑞ʘ + 1
	END WHILE
	LET κₓ₧ ← {}
	DEFINE FUNCTION 𝜑₌η₁(ɰ) RETURNS VOID
		IF NOT (LENGTH(ɰ) ≠ 3) THEN
			SET κₓ₧ ← κₓ₧ ∪ { CONCATENATE( SUBSTRING(ɰ, 1, LENGTH(ɰ) - 1), SUBSTRING(ɰ, 0, 1) ) }
		ELSE
			SET κₓ₧ ← κₓ₧ ∪ {ɰ}
		END IF
	END FUNCTION
	DEFINE FUNCTION 𝝣ₔ₂(𝓐) RETURNS VOID
		IF 𝓐 IS EMPTY THEN RETURN
		LET 𝓒 ⟵ FIRST(𝓐)
		LET 𝓡 ⟵ REST(𝓐)
		CALL 𝜑₌η₁(𝓒)
		CALL 𝝣ₔ₂(𝓡)
	END FUNCTION
	CALL 𝝣ₔ₂(𝛼𝛿₁)
	RETURN CONCATENATE(κₓ₧)
END FUNCTION

FUNCTION decode_cyclic(input_string)
	DEFINE FUNCTION ζȪṙ(Ϟ)
		RETURN CALL encode_cyclic(Ϟ)
	END FUNCTION
	RETURN ζȪṙ(ζȪṙ(input_string))
END FUNCTION
```