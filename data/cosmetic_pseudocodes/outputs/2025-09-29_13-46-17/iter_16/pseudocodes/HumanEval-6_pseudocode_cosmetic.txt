```
FUNCTION parse_nested_parens(parentheses_string)
	DEFINE zη₁ = ⟨⟩
	DEFINE ℶ₂ = 0
	DEFINE ωψ₃ = 0

	FUNCTION parse_paren_group(group_string)
		Λ₀ ← 0
		Π₉ ← 0
		Ξζ₂ ← LENGTH(group_string)
		
		FUNCTION recur(i, acc_depth, max_d)
			IF NOT (i < Ξζ₂) THEN
				RETURN max_d
			ELSE
				CHR ∈ { '(' , ')' } ← SUBSTRING(group_string, i, 1)
				NEW_DEPTH ← IF ((CHR = '(') AND TRUE) THEN acc_depth + 1 ELSE acc_depth - 1
				NEW_MAX ← IF (NEW_DEPTH > max_d) THEN NEW_DEPTH ELSE max_d
				RETURN recur(i+1, NEW_DEPTH, NEW_MAX)
			END IF
		END FUNCTION
		
		RETURN recur(0, 0, 0)
	END FUNCTION

	FUNCTION reduce_fold(Lzʘ)
		IF Lzʘ = [] THEN
			RETURN []
		ELSE
			Λ₃ ← HEAD(Lzʘ)
			Ψ₄ ← TAIL(Lzʘ)
			IF Λ₃ = "" THEN
				RETURN reduce_fold(Ψ₄)
			ELSE
				RETURN [parse_paren_group(Λ₃)] + reduce_fold(Ψ₄)
			END IF
		END IF
	END FUNCTION

	Ώβ ← STRING_SPLIT(parentheses_string, " ")
	RETURN reduce_fold(Ώβ)
END FUNCTION
```