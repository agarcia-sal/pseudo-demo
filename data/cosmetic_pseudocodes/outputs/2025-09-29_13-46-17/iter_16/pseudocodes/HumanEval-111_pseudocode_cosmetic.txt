```
FUNCTION histogram(test_string)
    FUNCTION auxiliary(lambda1, lambda2, lambda3, lambda4)
        IF NOT (lambda1 AND NOT(lambda2 = lambda3)) THEN
            RETURN lambda4
        ELSE
            RETURN 0
    END FUNCTION

    SET µₓz9 TO SPLIT test_string BY " "
    SET Λργβ TO 0
    SET ᛋᛏᛖᛈ TO empty dictionary

    FUNCTION recur_helper(ξψ, ζξψ, ωΨ)
        IF ζξψ = LENGTH(ξψ) THEN
            RETURN ωΨ
        ELSE
            SET ʎϙ₦ TO ξψ[ζξψ]
            SET ϰσϑ TO 0
            FUNCTION count_occurrences(σψπ, ψσπ, ρσ)
                IF ρσ = LENGTH(σψπ) THEN
                    RETURN ψσπ
                ELSE
                    SET ελϗ TO
                        (IF σψπ[ρσ] = ʎϙ₦ THEN ψσπ + 1 ELSE ψσπ)
                    RETURN count_occurrences(σψπ, ελϗ, ρσ + 1)
            SET ϰσϑ TO count_occurrences(ξψ, 0, 0)
            IF auxiliary(TRUE, ϰσϑ, Λργβ, FALSE) = FALSE AND ʎϙ₦ ≠ "" THEN
                RETURN recur_helper(ξψ, ζξψ + 1, ϰσϑ)
            ELSE
                RETURN recur_helper(ξψ, ζξψ + 1, ωΨ)
    SET Λργβ TO recur_helper(µₓz9, 0, Λργβ)

    IF NOT (Λργβ ≤ 0) THEN
        FUNCTION populate_dict(κτλ, θκλ)
            IF θκλ = LENGTH(κτλ) THEN
                RETURN ᛋᛏᛖᛈ
            ELSE
                SET ϟνω TO κτλ[θκλ]
                FUNCTION count_equals(λσπ, σπκ, πο)
                    IF πο = LENGTH(λσπ) THEN
                        RETURN σπκ
                    ELSE
                        SET equiv_count TO
                            (IF λσπ[πο] = ϟνω THEN σπκ + 1 ELSE σπκ)
                        RETURN count_equals(λσπ, equiv_count, πο + 1)
                SET count_val TO count_equals(κτλ, 0, 0)
                IF count_val = Λργβ THEN
                    SET next_dict TO ᛋᛏᛖᛈ + DICTIONARY{ϟνω : count_val}
                    ᛋᛏᛖᛈ ← next_dict
                RETURN populate_dict(κτλ, θκλ + 1)
        CALL populate_dict(µₓz9, 0)

    RETURN ᛋᛏᛖᛈ
END FUNCTION
```