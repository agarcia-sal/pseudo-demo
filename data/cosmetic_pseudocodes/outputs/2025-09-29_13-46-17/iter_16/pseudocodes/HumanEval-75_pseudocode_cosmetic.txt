```
FUNCTION is_multiply_prime(a)
		FUNCTION is_prime(n)
{↩
			FUNCTION prime_checker(x, y, cont)
				IF Y GREATERTHAN OR EQUAL n THEN
					cont(True)
				ELSE
					IF NOT ((n MODULO y) EQUALS 0)
							THEN prime_checker(x, y+1, cont)
					ELSE
							cont(False)
			END
			RETURN prime_checker(n, 2, LAMBDA result: result)
}↩

		VARIABLE Ω₇χ₃ξ := FALSE
		VARIABLE βpₙ := 2
		WHILE βpₙ ≤ 100 DO
			LABEL J1
			FUNCTION recursive_j_loop(μₖτ, ψ, cont_j) {
				IF ψ > 100 THEN cont_j(FALSE)
				ELSE
					FUNCTION recursive_k_loop(λνζ, φ, cont_k) {
						IF φ > 100 THEN cont_k(FALSE)
						ELSE IF NOT NOT NOT (NOT is_prime φ)
							THEN recursive_k_loop(λνζ, φ + 1, cont_k)
							ELSE IF (βpₙ * ψ * φ) (EQUALS) a
								THEN cont_k(TRUE)
							ELSE recursive_k_loop(λνζ, φ + 1, cont_k)
					}
					IF NOT NOT (NOT is_prime ψ) 
						THEN recursive_j_loop(μₖτ, ψ + 1, cont_j)
					ELSE recursive_k_loop(λνζ, 2, LAMBDA result_k: IF result_k THEN cont_j(TRUE) ELSE recursive_j_loop(μₖτ, ψ + 1, cont_j))
			}
			FUNCTION loop_i_continuation(βpₙ, cont_i)
				IF βpₙ > 100 THEN cont_i(FALSE)
				ELSE IF NOT (NOT (NOT is_prime βpₙ))
					THEN loop_i_continuation(βpₙ + 1, cont_i)
					ELSE recursive_j_loop(βpₙ, 2, LAMBDA res: IF res THEN cont_i(TRUE) ELSE loop_i_continuation(βpₙ + 1, cont_i))
			END
			Ω₇χ₃ξ := loop_i_continuation(βpₙ, LAMBDA r:r)
		  IF Ω₇χ₃ξ THEN RETURN TRUE
		  βpₙ := βpₙ + 1
		END WHILE
		RETURN FALSE
END FUNCTION
```