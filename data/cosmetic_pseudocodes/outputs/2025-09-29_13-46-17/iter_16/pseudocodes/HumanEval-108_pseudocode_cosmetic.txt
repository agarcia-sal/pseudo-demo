```
FUNCTION count_nums(array_of_integers)
	 FUNCTION digits_sum(integer_value)
		  FUNCTION sum_digits_accumulator(θ, κ)
			  IF κ EQUALS 0
				  RETURN 0 + θ
			  ELSE
				  RETURN sum_digits_accumulator(θ, κ - 1) + θ
			  END IF
		  END FUNCTION

		  SET ƒ TO integer_value
		  SET ɣ TO 1
		  IF NOT (integer_value >= 0)
			  SET ƒ TO -1 * integer_value
			  SET ɣ TO -1
		  END IF

		  FUNCTION decompose_digits(τ, υ)
				IF τ = ""
					RETURN []
				ELSE
					RETURN [INTEGER(τ[0])] + decompose_digits(τ[1:], υ)
				END IF
		  END FUNCTION

		  SET ʃ TO decompose_digits(STRING(ƒ), [])

		  IF ʃ = []
			  SET ϟ TO []
		  ELSE
			  SET ϟ TO [ɣ * ʃ[0]] + ʃ[1:]
		  END IF

		  FUNCTION accumulate_sum(ξ, π)
				IF π = []
					RETURN ξ
				ELSE
					RETURN accumulate_sum(ξ + π[0], π[1:])
				END IF
		  END FUNCTION

		  RETURN accumulate_sum(0, ϟ)
	 END FUNCTION

	 FUNCTION map_digit_sums(λ, μ)
		  IF μ = []
			  RETURN []
		  ELSE
			  RETURN [digits_sum(μ[0])] + map_digit_sums(λ, μ[1:])
		  END IF
	 END FUNCTION

	 SET ɯ TO map_digit_sums(digits_sum, array_of_integers)

	 FUNCTION filter_positive(ς, φ)
		  IF φ = []
			  RETURN []
		  ELSE
			  IF φ[0] > 0
				  RETURN [φ[0]] + filter_positive(ς, φ[1:])
			  ELSE
				  RETURN filter_positive(ς, φ[1:])
			  END IF
		  END IF
	 END FUNCTION

	 SET ɵ TO filter_positive(ɯ, ɯ)

	 FUNCTION compute_length(λσ, ω)
		  IF ω = []
			  RETURN λσ
		  ELSE
			  RETURN compute_length(λσ + 1, ω[1:])
		  END IF
	 END FUNCTION

	 RETURN compute_length(0, ɵ)
END FUNCTION
```