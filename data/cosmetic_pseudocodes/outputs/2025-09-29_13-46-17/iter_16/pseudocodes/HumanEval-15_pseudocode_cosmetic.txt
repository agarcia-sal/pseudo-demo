```
FUNCTION string_sequence(integer_n)
⟦ number_list ⇐ BuildList(0, integer_n) ⟧
⟦ strings_stream ⇐ MapEach(number_list, λ ς → ConvertToString(ς)) ⟧
⟦ output_string ⇐ ConcatenateWithSeparator(strings_stream, " ") ⟧
RETURN output_string
END FUNCTION

FUNCTION BuildList(start_ε, end_ν)
    IF start_ε > end_ν THEN RETURN EmptyList() ENDIF
    ⟦ head_h = start_ε ⟧
    ⟦ tail_t = BuildList(start_ε + 1, end_ν) ⟧
    RETURN Prepend(head_h, tail_t)
END FUNCTION

FUNCTION MapEach(seq_β, func_φ)
    IF IsEmpty(seq_β) THEN RETURN EmptyList() ENDIF
    ⟦ head_h = FirstElement(seq_β) ⟧
    ⟦ tail_t = RestElements(seq_β) ⟧
    ⟦ mapped_h = func_φ(head_h) ⟧
    ⟦ mapped_t = MapEach(tail_t, func_φ) ⟧
    RETURN Prepend(mapped_h, mapped_t)
END FUNCTION

FUNCTION ConvertToString(ξ)
    RETURN Stringify(ξ)
END FUNCTION

FUNCTION ConcatenateWithSeparator(collection_ω, sep_χ)
    FUNCTION AuxConcat(index_ι, coll_κ)
        IF index_ι >= Length(coll_κ) THEN RETURN "" ENDIF
        ⟦ current_val = ElementAt(coll_κ, index_ι) ⟧
        IF index_ι = Length(coll_κ) - 1 THEN
            RETURN current_val
        ELSE
            RETURN current_val + sep_χ + AuxConcat(index_ι + 1, coll_κ)
        ENDIF
    END FUNCTION
    RETURN AuxConcat(0, collection_ω)
END FUNCTION
```