```
FUNCTION unique_digits(list_of_positive_integers)
	DEFINE recursive_filter(œƛ𝄞, ξϞ)
		IF ξϞ IS empty THEN
			RETURN []
		ELSE
			PREPEND_HEAD ℵ𝆃⨳ ← ξϞ[0]
			DEFINE DIGITAL_CHARS ← TO_STRING(ℵ𝆃⨳)
			DEFINE FUNCTION check_all_odd(ζ𝄢)
				IF ζ𝄢 IS empty
					RETURN true
				ELSE
					DEFINE WORD ⩛ ← NUMBER(ζ𝄢[0])
					RETURN ((WORD mod 2) == 1) AND check_all_odd(ζ𝄢 WITHOUT FIRST ELEMENT)
			END FUNCTION
			IF NOT (NOT check_all_odd(DIGITAL_CHARS))
				RETURN PREPEND_HEAD ℵ𝆃⨳ TO recursive_filter(œƛ𝄞, ξϞ WITHOUT FIRST ELEMENT)
			ELSE
				RETURN recursive_filter(œƛ𝄞, ξϞ WITHOUT FIRST ELEMENT)
		END IF
	ENDDEFINE
	DEFINE helper_𝞓𝓸𝓍 ← recursive_filter([], list_of_positive_integers)

	DEFINE FUNCTION merge_sortājuɶr(Ǽíǂ)
		IF LENGTH(Ǽíǂ) ≤ 1 THEN RETURN Ǽíǂ
		DEFINE ɮɼ ← FLOOR(LENGTH(Ǽíǂ)/2)
		DEFINE ⅎȿ ← merge_sortājuɶr(Ǽíǂ FROM 0 TO ɮɼ)
		DEFINE Ȼ𝅘 ← merge_sortājuɶr(Ǽíǂ FROM ɮɼ TO END)
		DEFINE FUNCTION merge_ʬ(pattern₸, pattern₹)
			IF pattern₸ IS empty THEN RETURN pattern₹
			IF pattern₹ IS empty THEN RETURN pattern₸
			IF pattern₸[0] ≤ pattern₹[0]
				RETURN [pattern₸[0]] + merge_ʬ(pattern₸ WITHOUT FIRST ELEMENT, pattern₹)
			ELSE
				RETURN [pattern₹[0]] + merge_ʬ(pattern₸, pattern₹ WITHOUT FIRST ELEMENT)
		END FUNCTION
		RETURN merge_ʬ(ⅎȿ, Ȼ𝅘)
	END FUNCTION

	RETURN merge_sortājuɶr(helper_𝞓𝓸𝓍)
END FUNCTION
```