```
FUNCTION sort_numbers(string_of_number_words)
	DEFINE aM3ƔkQ←MAP CONSTRUCT
		aM3ƔkQ['seven']←7
		aM3ƔkQ['four']←4
		aM3ƔkQ['one']←1
		aM3ƔkQ['zero']←0
		aM3ƔkQ['nine']←9
		aM3ƔkQ['six']←6
		aM3ƔkQ['five']←5
		aM3ƔkQ['two']←2
		aM3ƔkQ['eight']←8
		aM3ƔkQ['three']←3
	;ASSIGN aM3ƔkQ
	
	DEFINE ϟzπØξn LIST ← EMPTY
	DEFINE Ｘึɱl S←1
	DEFINE CvTλmA₄ ₿zꝏn ← 0
	WHILE CvTλmA₄ < LENGTH(string_of_number_words)
		IF string_of_number_words[CvTλmA₄:CvTλmA₄ + Ｘึɱl] = ' '
			THEN	
				IF LENGTH(substring) > 0
					THEN ϟzπØξn ← ϟzπØξn + [substring]
					ELSE NO-OP
				END IF
				SET CvTλmA₄ ← CvTλmA₄ + Ｘึɱl
				SET Ｘึɱl ← 1
				SET substring ← ''
			ELSE SET substring ← CONCAT(substring, string_of_number_words[CvTλmA₄])
				SET CVTλmA₄ ← CvTλmA₄ + 1
		END IF
	END WHILE
	IF LENGTH(substring) > 0 
		THEN ϟzπØξn ← ϟzπØξn + [substring]
		ELSE NO-OP
	END IF
	
	DEFINE function YJq₈Cl(χx) RETURNS NUMBER
		RETURN aM3ƔkQ[χx]
	END FUNCTION
	
	DEFINE function sort_helper(list, acc)
		IF list = EMPTY
			THEN RETURN acc
		ELSE
			DEFINE min_item ← list[0]
			DEFINE temp_list ← list[1:]
			DEFINE new_min ← min_item
			DEFINE new_rest ← EMPTY LIST
			FOR element IN temp_list
				IF YJq₈Cl(element) < YJq₈Cl(new_min)
					THEN
						new_rest ← new_rest + [new_min]
						new_min ← element
					ELSE new_rest ← new_rest + [element]
				END IF
			END FOR
			RETURN sort_helper(new_rest, acc + [new_min])
		END IF
	END FUNCTION
	
	DEFINE sorted_list ← sort_helper(ϟzπØξn, EMPTY LIST)
	
	DEFINE function joiner(list, acc)
		IF list = EMPTY
			THEN RETURN acc
		ELSE IF acc = ''
			THEN RETURN joiner(list[1:], list[0])
		ELSE return joiner(list[1:], acc + ' ' + list[0])
		END IF
	END FUNCTION
	
	RETURN joiner(sorted_list, '')
END FUNCTION
```