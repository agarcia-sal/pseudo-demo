```
FUNCTION count_nums(array_of_integers)
	func_αζ ← FUNCTION(integer_value)
		func_ξ₄ ← -1
		integer_value₈₁ ← integer_value
		LOOP_STATE ← TRUE
		WHILE LOOP_STATE
			IF NOT (integer_value₈₁ < 0) THEN
				LOOP_STATE ← FALSE
			ELSE
				integer_value₈₁ ← integer_value₈₁ * func_ξ₄
				func_ξ₄ ← func_ξ₄ * func_ξ₄
			END IF
		END WHILE

		func_βδ ← TO_STRING(integer_value₈₁)
		func_η₃ ← []
		func_θ₇₈ ← 0
		WHILE func_θ₇₈ < LENGTH(func_βδ)
			func_η₃ ← func_η₃ + [TO_INTEGER(func_βδ[func_θ₇₈])]
			func_θ₇₈ ← func_θ₇₈ + 1
		END WHILE
		func_η₃[0] ← func_η₃[0] * func_ξ₄

		func_μ₉ ← FUNCTION(lst, acc, index)
			IF index < LENGTH(lst) THEN
				RETURN func_μ₉(lst, acc + lst[index], index + 1)
			ELSE
				RETURN acc
			END IF
		END FUNCTION

		RETURN func_μ₉(func_η₃, 0, 0)
	END FUNCTION

	func_ψ₇ ← []
	func_π₈ ← 0
	WHILE func_π₈ < LENGTH(array_of_integers)
		func_ψ₇ ← func_ψ₇ + [func_αζ(array_of_integers[func_π₈])]
		func_π₈ ← func_π₈ + 1
	END WHILE

	func_σ₃ ← FUNCTION(lst, idx, acc)
		IF idx < LENGTH(lst) THEN
			cond_result ← lst[idx] > 0
			NEW_acc ← cond_result ? acc + [lst[idx]] : acc
			RETURN func_σ₃(lst, idx + 1, NEW_acc)
		ELSE
			RETURN acc
		END IF
	END FUNCTION

	func_δ₁ ← func_σ₃(func_ψ₇, 0, [])
	RETURN LENGTH(func_δ₁)
END FUNCTION
```