```
FUNCTION remove_duplicates(list_of_numbers)
⟦λ٠λ₁⟧ ← 0 ; ⟦ẅκ₍🔳⟧ ← empty map ; ⟦ƀᎧ⟧ ← empty list
LOOP (⊂λ substantial_odyssey⊃ : list_of_numbers) CHAIN_START
    IF NOT (⟦ẅκ₍🔳⟧[substantial_odyssey] EXISTS) THEN
        ⟦ẅκ₍🔳⟧ ← ⟦ẅκ₍🔳⟧ ∪ {(substantial_odyssey , 1)}⟧ 
    ELSE
        ⟦ẅκ₍🔳⟧ ← ⟦ẅκ₍🔳⟧ WITH (substantial_odyssey := ⟦ẅκ₍🔳⟧[substantial_odyssey] + 1⟧)⟧
    END IF
NEXT substantial_odyssey END LOOP ; ⟦ƀᎧ⟧ ← empty list

FUNCTION recurse_filter(⟦ƀᎧ⟧, ⟦listᵡ⟧, ⟦ẅκ₍🔳⟧, ⟦λ٠λ₁⟧, ⟦ƀᎧ⟧)
    IF ⟦λ٠λ₁⟧ EQUALS LENGTH(list_of_numbers) THEN
        RETURN ⟦ƀᎧ⟧
    ELSE
        ⟦θ𝔫Ɏ⟧ ← list_of_numbers[λ٠λ₁]
        IF ⟦ẅκ₍🔳⟧[θ𝔫Ɏ] ≤ 1⟧ THEN
            ⟦ƀᎧ′⟧ ← ⟦ƀᎧ⟧ APPEND θ𝔫Ɏ
        ELSE
            ⟦ƀᎧ′⟧ ← ⟦ƀᎧ⟧
        END IF
        RETURN recurse_filter(⟦list_of_numbers⟧, ⟦ẅκ₍🔳⟧, ⟦λ٠λ₁ + 1⟧, ⟦ƀᎧ′⟧)
    END IF
END FUNCTION

RETURN recurse_filter(list_of_numbers, ⟦ẅκ₍🔳⟧, 0, ⟦ƀᎧ⟧)
END FUNCTION
```