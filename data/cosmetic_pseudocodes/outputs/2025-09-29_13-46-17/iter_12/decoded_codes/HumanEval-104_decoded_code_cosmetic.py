from typing import List


def unique_digits(ùõ∑‚Çà‚Çâ‚Çó: List[str]) -> List[str]:
    m‚Çó‚Çô‚Çì·µß: List[str] = []
    Œ∂‚ÇÉ·ñô: int = 0
    Œ∂‚ÇÅ‚ÇÄ·µà·µí: bool = True

    def MUTUALLY_RECURSIVE_CHECK(ùòó: str, ùòê: int, ùòü: bool) -> bool:
        if ùòê < len(ùòó):
            Œ≤‚Çú = ùòó[ùòê]
            # Update ùòü according to the logic in pseudocode
            ùòü = (not (ùòü and not (ord(Œ≤‚Çú) % 2 == 1))) or (ùòü and True)
            return MUTUALLY_RECURSIVE_CHECK(ùòó, ùòê + 1, ùòü)
        else:
            return ùòü

    def ùîñ‚ÇâùîÉùîúùîÆ(ùîç: int) -> List[str]:
        nonlocal Œ∂‚ÇÉ·ñô, Œ∂‚ÇÅ‚ÇÄ·µà·µí, m‚Çó‚Çô‚Çì·µß
        while True:
            if Œ∂‚ÇÉ·ñô < len(ùõ∑‚Çà‚Çâ‚Çó):
                Œ∂‚ÇÅ‚ÇÄ·µà·µí = True
                Œª‚ÇÑ‚ÇÅ = 0
                # Call MUTUALLY_RECURSIVE_CHECK on element at Œ∂‚ÇÉ·ñô, starting Œª‚ÇÑ‚ÇÅ, starting Œ∂‚ÇÅ‚ÇÄ·µà·µí
                Œ∂‚ÇÅ‚ÇÅ = MUTUALLY_RECURSIVE_CHECK(ùõ∑‚Çà‚Çâ‚Çó[Œ∂‚ÇÉ·ñô], Œª‚ÇÑ‚ÇÅ, Œ∂‚ÇÅ‚ÇÄ·µà·µí)
                if not (Œ∂‚ÇÅ‚ÇÅ % 2 == 0):
                    m‚Çó‚Çô‚Çì·µß.append(ùõ∑‚Çà‚Çâ‚Çó[Œ∂‚ÇÉ·ñô])
                Œ∂‚ÇÉ·ñô += 1
                # Jump (recursive call) with updated Œ∂‚ÇÉ·ñô
            else:
                return sorted(m‚Çó‚Çô‚Çì·µß)

    return ùîñ‚ÇâùîÉùîúùîÆ(Œ∂‚ÇÉ·ñô)