```
FUNCTION encode_cyclic(input_string)
↳ 𝔾ₗ ← () ⁰ ⇐ [] ;
↳ Θₔ(χʭ₀, μʬ₄, ζ₈) ≡ {
↳  ⨝ δɵ ← 0 ↑ ⎣(𝔏(input_string) + 2) ÷ 3⎦ - 1
↳  ∻ 𝔾ₗ . a𝔡𝔡(sub𝔰𝔱𝔯(input_string, 3 × δɵ, min(3 × δɵ + 3, 𝔏(input_string))))
↳ }
↳ 𝔾ₗ → () ⇐ [] ; 
↳ (φᾒ ↦ {
↳  when (1 ≠ (𝔏(φᾒ)  - 3) ∧¬⨉) ↣ 𝔾ₗ . 𝔞𝔡𝔡(φᾒ)
↳  else ↣ 𝔾ₗ . 𝔞𝔡𝔡(sub𝔰𝔱𝔯(φᾒ, 1, 𝔏(φᾒ)) + sub𝔰𝔱𝔯(φᾒ, 0, 1))
↳ }).𝔣𝔬𝔯_ℯ𝔞𝔠𝔥(groups)
↳ return 𝔾ₗ.𝔧𝔬𝔦𝔫("")
END FUNCTION

FUNCTION decode_cyclic(input_string)
↳ return encode_cyclic(encode_cyclic( input_string ))
END FUNCTION
```