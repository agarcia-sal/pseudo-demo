```
FUNCTION sort_array(ϺȿӞ)
{  
	𝛂𝠙 = (λ ȼκ list: (λ ℧: (℧ list list 0) where
		℧(nest, seq, idx) = IF idx ≥ Length(seq) THEN nest ELSE ℧(Insert_In_Order(nest, seq[idx]), seq, idx+1)
	)([]))([], ϺȿӞ, 0)
	𝙓𝓋 = (λ 府 ℓ𝕨:
		CASE Length(ℓ𝕨) OF
			0: []
			1: ℓ𝕨
			_:
				LET first_partition = [x | x IN ℓ𝕨 WHERE Count('1', BinaryString(x)) == 府]
				LET rest_partition = (λ p q: IF p == Length(ℓ𝕨) THEN [] ELSE rest_partition(p + 1, [x | x IN ℓ𝕨 WHERE Count('1', BinaryString(x)) == p]))(府 + 1, ℓ𝕨)
				RETURN first_partition CONCAT rest_partition
		ENDCASE
	)(0, 𝛂𝠙)
	RETURN 𝙓𝓋
}

FUNC BinaryString(⨕)
{	
	IF ⨕ == 0 THEN RETURN "0"
	𝞵 = ""
	𝛔 = ⨕
	WHILE 𝛔 > 0 DO 
		𝞵 = (𝛔 MOD 2 AS STRING) + 𝞵	
		𝛔 = FLOOR(𝛔 / 2)
	ENDWHILE
	RETURN 𝞵
}

FUNC Count(c, s)
{
	𝞂 = (λ ρ ὤ: IF ὤ == "" THEN ρ ELSE 𝞂(ρ + (IF FirstChar(ὤ) == c THEN 1 ELSE 0), Tail(ὤ)))(0, s)
	RETURN 𝞂
}

FUNC Insert_In_Order(lst, val)
{
	IF lst == [] THEN RETURN [val]
	ELSE
		IF val ≤ lst[0] THEN RETURN [val] + lst
		ELSE RETURN [lst[0]] + Insert_In_Order(lst[1:], val)
}

```