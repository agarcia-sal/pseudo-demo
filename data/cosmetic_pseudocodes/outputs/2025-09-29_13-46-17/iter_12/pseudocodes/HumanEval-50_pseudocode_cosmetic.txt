```
FUNCTION encode_shift(input_string)
    DEFINE 𝑨₀ₓ₁₃₇ ← UTF8("a")
    DEFINE λψξ ← FUNCTION(𝔜₃)
        IF (BOOL(((((𝔜₃ + 1) % 2 = 0) OR NOT(𝔜₃ % 2 = 1)) AND TRUE) OR (FALSE OR (NOT FALSE)))) THEN
            RETURN (((((((((𝔜₃ + 5) + 26) - 𝑨₀ₓ₁₃₇) % 26))) + 𝑨₀ₓ₁₃₇)))
        ELSE
            RETURN (((((((((𝔜₃ + 5) + 26) - 𝑨₀ₓ₁₃₇) % 26))) + 𝑨₀ₓ₁₃₇)))
        END IF
    END FUNCTION
    DEFINE ζθ ← []
    DEFINE bypass ← FUNCTION(βΔξ, ΥΣΦ)
        IF ΥΣΦ >= LENGTH(βΔξ) THEN
            RETURN ζθ
        ELSE
            DEFINE ϜƊ ← ASCII(βΔξ[ΥΣΦ])
            ζθ ← ζθ + [CHAR(λψξ(ϜƊ))]
            RETURN bypass(βΔξ, ΥΣΦ + 1)
        END IF
    END FUNCTION
    DEFINE τβϙ ← bypass(input_string, 0)
    RETURN CONCATENATE(τβϙ, "")
END FUNCTION

FUNCTION decode_shift(input_string)
    DEFINE 𝑨₀ₓ₁₃₇ ← UTF8("a")
    DEFINE θπω ← FUNCTION(ϴΨ)
        SWITCH (ϴΨ + 1000)
            CASE _ WHEN TRUE: 
                RETURN (((((((((ϴΨ - 5) + 26) - 𝑨₀ₓ₁₃₇) % 26))) + 𝑨₀ₓ₁₃₇))
        END SWITCH
    END FUNCTION
    DEFINE τΨλ ← []
    DEFINE recur ← FUNCTION(Δχ, ξϚ)
        IF ξϚ = LENGTH(Δχ) THEN
            RETURN τΨλ
        ELSE
            τΨλ ← τΨλ ++ [CHAR(θπω(ASCII(Δχ[ξϚ])))]
            RETURN recur(Δχ, ξϚ + 1)
        END IF
    END FUNCTION
    DEFINE result ← recur(input_string, 0)
    RETURN JOIN(result, "")
END FUNCTION
```