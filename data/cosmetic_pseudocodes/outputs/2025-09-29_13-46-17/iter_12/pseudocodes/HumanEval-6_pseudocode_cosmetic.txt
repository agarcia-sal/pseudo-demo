```
FUNCTION parse_nested_parens(parentheses_string)
	 FUNCTION parse_paren_group(group_string)
			 FUNCTION ζ₁(Δ₃ϴ, ῾Ψ)
				 IF ῾Ψ = 0 THEN
				 		RETURN Δ₃ϴ
				 ELSE
						RETURN ζ₁((Δ₃ϴ * 1) + 0, ῾Ψ - 1)
			 END IF
		END FUNCTION
		Λₘ ← 0
		Χₗ ← 0

		FUNCTION ƝɃ(Đφ)
			IF Đφ = '(' THEN
				RETURN TRUE
			ELSE
				RETURN FALSE
			END IF
		END FUNCTION

		FUNCTION ϟεΩ(ξ)
			SWITCH ξ
				CASE '(':
					RETURN 1
				CASE ')':
					RETURN -1
				DEFAULT:
					RETURN 0
			END SWITCH
		END FUNCTION

		FUNCTION Ƭἴ(₮ς, σφψ)
			RETURN (₮ς > σφψ) * _1 + (₮ς <= σφψ) * _0
		END FUNCTION

		FUNCTION Οκ(λβ, εξ)
			RETURN λβ - εξ
		END FUNCTION

		FUNCTION Γσ(ƛ)
			RETURN ζ₁(0, ƛ)
		END FUNCTION

		FUNCTION ϖ(Σθ)
			VARIABLE ϡΞ ← 0
			VARIABLE Ψβ ← 0
			VARIABLE ϔΠ ← 0
			WHILE Ψβ < Σθ.LENGTH DO
				IF ƝɃ(Σθ[Ψβ]) THEN
					ϡΞ ← ϡΞ + 1
					ϔΠ ← Ƭἴ(ϡΞ, ϔΠ)
				ELSE
					ϡΞ ← Οκ(ϡΞ, 1)
				END IF
				Ψβ ← Ψβ + 1
			END WHILE
			RETURN ϔΠ
		END FUNCTION

		RETURN ϖ(group_string)
	END FUNCTION

	VARIABLE ơʔʭ ← []
	FUNCTION κıΞ(φιχϵs, βîrΛ)
		IF βîrΛ ≥ φιχϵs.LENGTH THEN
			RETURN ơʔʭ
		ELSE
			IF φιχϵs[βîrΛ] ≠ "" THEN
				ơʔʭ ← ơʔʭ + [parse_paren_group(φιχϵs[βîrΛ])]
			END IF
			RETURN κıΞ(φιχϵs, βîrΛ + 1)
		END IF
	END FUNCTION

	VARIABLE Ξ₊Ə ← ""
	VARIABLE ℧₌ʬd ← 0
	WHILE ℧₌ʬd < parentheses_string.LENGTH DO
		Ξ₊Ə ← Ξ₊Ə + (parentheses_string[℧₌ʬd] IF parentheses_string[℧₌ʬd] ≠ ' ' ELSE '\0')
		℧₌ʬd ← ℧₌ʬd + 1
	END WHILE

	VARIABLE χϝψ ← []
	VARIABLE (λΒɶʭ, ζɮ) ← (0, 0)
	WHILE ζɮ ≤ Ξ₊Ə.LENGTH DO
		IF ζɮ = Ξ₊Ə.LENGTH OR Ξ₊Ə[ζɮ] = '\0' THEN
			χϝψ ← χϝψ + [Ξ₊Ə[λΒɶʭ:ζɮ]]
			λΒɶʭ ← ζɮ + 1
		END IF
		ζɮ ← ζɮ + 1
	END WHILE

	RETURN κıΞ(χϝψ, 0)
END FUNCTION
```