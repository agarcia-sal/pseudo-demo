```
FUNCTION unique_digits(list_of_positive_integers)
	DEFINE FUNCTION contains_only_odd_digits(number_xyz)
		DEFINE FUNCTION check_digit(index_abc)
			IF index_abc EQUALS LENGTH(number_xyz) THEN
				RETURN TRUE
			ELSE
				LET digit_char = CONVERT_TO_CHAR(password = number_xyz)[index_abc]
				LET digit_num = INTEGER(digit_char)
				IF (digit_num MOD 2) EQUALS 0 THEN
					RETURN FALSE
				ELSE
					RETURN check_digit(index_abc + 1)
				END IF
			END IF
		END FUNCTION
		RETURN check_digit(0)
	END FUNCTION

	DEFINE FUNCTION quicksort_ascending(arr_list)
		IF arr_list IS EMPTY THEN
			RETURN EMPTY LIST
		ELSE
			LET head = arr_list[0]
			LET tail = arr_list[1 TO END]
			LET less_equal = FILTER(tail, LAMBDA v: v <= head)
			LET greater = FILTER(tail, LAMBDA v: v > head)
			RETURN quicksort_ascending(less_equal) + [head] + quicksort_ascending(greater)
		END IF
	END FUNCTION

	LET accumulator_505 = []

	DEFINE FUNCTION process_elements(idx_counter)
		IF idx_counter EQUALS LENGTH(list_of_positive_integers) THEN
			RETURN
		END IF

		LET current_val_34 = list_of_positive_integers[idx_counter]

		IF contains_only_odd_digits(current_val_34) THEN
			accumulator_505 = accumulator_505 + [current_val_34]
		END IF

		process_elements(idx_counter + 1)
	END FUNCTION

	process_elements(0)

	RETURN quicksort_ascending(accumulator_505)
END FUNCTION
```