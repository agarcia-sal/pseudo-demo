```
FUNCTION mean_absolute_deviation(list_of_numbers)
	return _compute_MAD(0, 0, LENGTH(list_of_numbers), list_of_numbers)

FUNCTION _compute_MAD(idxCounter, accSum, n, numbersCollection)
	IF idxCounter == n THEN
		LET avgMean = accSum * (1 / n)
		RETURN _aggregate_abs_dev(0, 0, n, avgMean, numbersCollection) * (1 / n)
	END IF
	LET newSumAccum = accSum + numbersCollection[idxCounter]
	RETURN _compute_MAD(idxCounter + 1, newSumAccum, n, numbersCollection)

FUNCTION _aggregate_abs_dev(position, runningTotal, size, meanVal, elems)
	IF position >= size THEN
		RETURN runningTotal
	END IF
	LET currentElement = elems[position]
	LET absDifference = (currentElement - meanVal) >= 0 ? (currentElement - meanVal) : -(currentElement - meanVal)
	RETURN _aggregate_abs_dev(position + 1, runningTotal + absDifference, size, meanVal, elems)
```