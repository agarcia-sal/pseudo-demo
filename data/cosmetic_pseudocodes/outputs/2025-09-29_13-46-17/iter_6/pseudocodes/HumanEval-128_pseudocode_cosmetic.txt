```
FUNCTION prod_signs(arrInts)
	DEFINE compute_sign(currIndex accNegCount)
		IF NOT (currIndex < LENGTH(arrInts)) THEN
			RETURN POW(-1, accNegCount)
		LET elem = arrInts[currIndex]
		IF elem < 0 THEN
			RETURN compute_sign(currIndex + 1, accNegCount + 1)
		RETURN compute_sign(currIndex + 1, accNegCount)
	ENDIF
	END

	DEFINE accumulate_abs_total(idx accSum)
		IF NOT (idx < LENGTH(arrInts)) THEN
			RETURN accSum
		RETURN accumulate_abs_total(idx + 1, accSum + ABS(arrInts[idx]))
	END

	IF arrInts == [] THEN
		RETURN None
	ENDIF

	IF EXISTS i IN 0 TO LENGTH(arrInts) - 1 WHERE arrInts[i] == 0 THEN
		LET signProd = 0
	ELSE
		LET signProd = compute_sign(0, 0)
	ENDIF

	LET magnitudeSum = accumulate_abs_total(0, 0)

	RETURN signProd * magnitudeSum
END FUNCTION
```