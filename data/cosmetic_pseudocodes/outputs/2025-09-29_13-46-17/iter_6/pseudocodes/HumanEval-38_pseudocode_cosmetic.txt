```
FUNCTION encode_cyclic(input_string)
	return (FUNCTION process_groups_OldZ(input_string)
		LET accumulator = []
		LET total_chunks = FLOOR_DIVIDE((LENGTH(input_string)) + 2, 3)
		LET deflate_indices = FUNCTION XYZ123(vwx)
			IF vwx < total_chunks THEN 
				LET chunk_start = 3 * vwx
				LET chunk_end = IF (chunk_start + 3) < LENGTH(input_string) THEN (chunk_start + 3) ELSE LENGTH(input_string)
				CALL accumulator.APPEND(SUBSTRING(input_string, chunk_start, chunk_end))
				RETURN XYZ123(vwx + 1) 
			ENDIF
			RETURN NIL
		END FUNCTION
		CALL XYZ123(0)
		
		LET reformed_groups = []
		LET idx_reform = 0
		WHILE idx_reform < LENGTH(accumulator)
			LET Y9N = accumulator[idx_reform]
			IF (LENGTH(Y9N) != 3) THEN
				CALL reformed_groups.APPEND(Y9N)
			ELSE
				CALL reformed_groups.APPEND(CONCAT(SUBSTRING(Y9N, 1, LENGTH(Y9N)), SUBSTRING(Y9N, 0, 1)))
			ENDIF
			SET idx_reform = idx_reform + 1
		ENDWHILE
		RETURN CONCAT_ALL(reformed_groups)
	END FUNCTION)(input_string)
END FUNCTION

FUNCTION decode_cyclic(input_string)
	LET inter_result = encode_cyclic(input_string)
	LET final_result = encode_cyclic(inter_result)
	RETURN final_result
END FUNCTION
```