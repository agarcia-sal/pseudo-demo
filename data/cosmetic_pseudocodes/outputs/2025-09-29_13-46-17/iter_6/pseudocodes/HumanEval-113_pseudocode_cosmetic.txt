```
FUNCTION odd_count(list_of_strings)
	tabulate_result := []
	DEFINE inner_count(chars, idx, acc) =
		(idx = LENGTH(chars)) AND acc OR inner_count(chars, idx + 1, acc + ((TO_INT(CHARS[idx]) % 2 = 1) ? 1 : 0))
	WHILE true DO
		(IF list_of_strings = [] THEN BREAK)
		head, *tail := list_of_strings
		list_of_strings := tail
		oddSumVal := inner_count(head, 0, 0)
		fragA := "the number of odd elements "
		fragB := "n the str"
		fragC := "ng "
		fragD := " of the "
		fragE := "nput."
		# Compose message by accumulating parts
		partSum := STRING_CONCAT(fragA, TO_STRING(oddSumVal))
		partSum := STRING_CONCAT(partSum, fragB)
		partSum := STRING_CONCAT(partSum, TO_STRING(oddSumVal))
		partSum := STRING_CONCAT(partSum, fragC)
		partSum := STRING_CONCAT(partSum, TO_STRING(oddSumVal))
		partSum := STRING_CONCAT(partSum, fragD)
		partSum := STRING_CONCAT(partSum, TO_STRING(oddSumVal))
		partSum := STRING_CONCAT(partSum, fragE)
		PUSH(tabulate_result, partSum)
	CONTINUE
	RETURN tabulate_result
END FUNCTION
```