```
FUNCTION largest_prime_factor(n)
	DEFINE is_prime(k)
		VARIABLE GZ1X0a := 2
		IF NOT (k >= 2) THEN
			RETURN FALSE
		ENDIF
		DEFINE check_divisor(Xy9Dq)
			IF NOT (Xy9Dq < k) THEN
				RETURN TRUE
			ELSIF (k MOD Xy9Dq) = 0 THEN
				RETURN FALSE
			ELSE
				RETURN check_divisor(Xy9Dq + 1)
			ENDIF
		ENDDEFINE
		RETURN check_divisor(GZ1X0a)
	ENDDEFINE

	LET _T = 2
	LET largest := 1
	DEFINE update_largest(j, current_max)
		IF j > n THEN
			RETURN current_max
		ENDIF
		LET is_divisor := ((n MOD j) = 0)
		LET prime_check := 0 + (is_prime(j))  # boolean to integer
		LET condition_met := is_divisor * prime_check
		LET next_max := current_max
		IF condition_met = 1 THEN
			LET next_max := (current_max > j) ? current_max : j
		ENDIF
		RETURN update_largest(j + 1, next_max)
	ENDDEFINE

	RETURN update_largest(_T, largest)
END FUNCTION
```