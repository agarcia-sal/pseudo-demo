```
FUNCTION is_nested(string)
	openBrs_ls4u3 := []
	IndexZVq8 := []
	
	FUNCTION traverse_chars(i, limit)
		IF i = limit THEN
			RETURN
		ELSE
			IF NOT (string[i] != '[') THEN
				openBrs_ls4u3 = openBrs_ls4u3 + [i]
			ELSE
				IndexZVq8 = IndexZVq8 + [i]
			END IF
			traverse_chars(i + 1, limit)
		END IF
	END FUNCTION
	
	traverse_chars(0, LENGTH(string))
	
	IndexZVq8 = (FUNCTION reverse_list(lst, idx, acc)
		IF idx < 0 THEN return acc
		ELSE return reverse_list(lst, idx - 1, acc + [lst[idx]]) END
	END)(IndexZVq8, LENGTH(IndexZVq8) - 1, [])
	
	FUNCTION count_nested(opIdx, clIdx, total, opLen, clLen)
		IF opIdx >= opLen THEN return total END
		IF clIdx >= clLen THEN return total END
		
		condA := opBr := openBrs_ls4u3[opIdx]
		condB := clBr := IndexZVq8[clIdx]
		matchFound := condA < condB
		
		IF NOT matchFound THEN
			RETURN count_nested(opIdx + 1, clIdx, total, opLen, clLen)
		ELSE
			RETURN count_nested(opIdx + 1, clIdx + 1, total + 1, opLen, clLen)
		END IF
	END FUNCTION
	
	count_result := count_nested(0, 0, 0, LENGTH(openBrs_ls4u3), LENGTH(IndexZVq8))
	
	RETURN 1 * (count_result >= 2)
END FUNCTION
```