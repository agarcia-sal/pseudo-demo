```
FUNCTION by_length(array_of_integers)
	LET NumMap = Map()
	NumMap[1] = "One"
	NumMap[2] = "Two"
	NumMap[3] = "Three"
	NumMap[4] = "Four"
	NumMap[5] = "Five"
	NumMap[6] = "Six"
	NumMap[7] = "Seven"
	NumMap[8] = "Eight"
	NumMap[9] = "Nine"

	LET sortedList = (function descending_sort(inputList){
		IF inputList IS EMPTY THEN RETURN inputList ELSE
		LET pivot = inputList[0]
		LET lessThanPivot = []
		LET greaterOrEqualPivot = []
		FOR idx FROM 1 TO LENGTH(inputList)-1
			IF inputList[idx]>=pivot THEN
				APPEND inputList[idx] TO greaterOrEqualPivot
			ELSE
				APPEND inputList[idx] TO lessThanPivot
			END IF
		END FOR
		RETURN descending_sort(greaterOrEqualPivot) + [pivot] + descending_sort(lessThanPivot)
	})(array_of_integers)

	LET ResultAccumulator = []
	LET recursiveAppendIndexed = FUNC(i)
		IF i<0 THEN RETURN ResultAccumulator ELSE
		LET currentItem = sortedList[i]
		IF NumMap HAS currentItem THEN 
			ResultAccumulator = [NumMap[currentItem]] + ResultAccumulator
		END IF
		RETURN recursiveAppendIndexed(i-1)
	END FUNC

	RETURN recursiveAppendIndexed(LENGTH(sortedList)-1)
END FUNCTION
```