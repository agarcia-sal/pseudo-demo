```
FUNCTION histogram(test_string)
	DEFINE function _countOccurrences__aux__A(jackson_42, L) RETURNS integer
		IF j_otgq1ge < LENGTH(L) THEN
			RETURN ( (L[j_otgq1ge] = jackson_42) AS integer ) + _countOccurrences__aux__A(j_otgq1ge + 1, L)
		ELSE
			RETURN 0
		END IF
	END FUNCTION
	
	LET oMeqTvcn = {}
	LET PIVZTxcRq = SPLIT(test_string, " ")
	LET kXIJhUdq = 0
	
	DEFINE function _findMaxTail__HPQb(currentIndex_Np1sc, currentMax_yZX_2) RETURNS integer
		IF NOT (currentIndex_Np1sc < LENGTH(PIVZTxcRq)) THEN
			RETURN currentMax_yZX_2
		END IF
		LET element_lVBZh = PIVZTxcRq[currentIndex_Np1sc]
		LET occurrence_pW4JrIF = _countOccurrences__aux__A(currentIndex_Np1sc, PIVZTxcRq)
		LET numberOfTimes_bDWLu = _countOccurrences__aux__A(0, PIVZTxcRq)
		LET countOfCurrent = 0
		FOR idx IN 0 TO LENGTH(PIVZTxcRq) - 1
			IF PIVZTxcRq[idx] = element_lVBZh THEN
				countOfCurrent = countOfCurrent + 1
			END IF
		END FOR
		LET updatedMax = currentMax_yZX_2
		LET condition_check = ((countOfCurrent > currentMax_yZX_2) AND NOT (element_lVBZh = ""))
		IF condition_check THEN
			updatedMax = countOfCurrent
		END IF
		RETURN _findMaxTail__HPQb(currentIndex_Np1sc + 1, updatedMax)
	END FUNCTION
	
	LET maxCount_S33zD = _findMaxTail__HPQb(0, 0)

	DEFINE function _insertFreqs__rec(rr1_index_, rr2_map_) RETURNS dictionary
		IF rr1_index_ >= LENGTH(PIVZTxcRq) THEN
			RETURN rr2_map_
		END IF
		LET curVal = PIVZTxcRq[rr1_index_]
		LET countHere = 0
		FOR qq IN 0 TO LENGTH(PIVZTxcRq) - 1
			IF PIVZTxcRq[qq] = curVal THEN
				countHere = countHere + 1
			END IF
		END FOR
		LET updatedMap = rr2_map_
		IF (countHere = maxCount_S33zD) THEN
			updatedMap = MAP_SET(updatedMap, curVal, maxCount_S33zD)
		END IF
		RETURN _insertFreqs__rec(rr1_index_ + 1, updatedMap)
	END FUNCTION

	LET final_result = {}
	IF NOT (maxCount_S33zD <= 0) THEN
		final_result = _insertFreqs__rec(0, oMeqTvcn)
	END IF
	
	RETURN final_result
END FUNCTION
```