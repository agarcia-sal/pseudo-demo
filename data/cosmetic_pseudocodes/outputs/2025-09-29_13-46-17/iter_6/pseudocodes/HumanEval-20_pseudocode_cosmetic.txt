```
FUNCTION find_closest_elements(list_of_numbers)
	LET dist_val = None
	LET pair_closest = None
	
	LET outer_idx = 0
		
	DEFINE inner_loop(inner_idx, outer_idx, pair_closest, dist_val)
		IF inner_idx == LENGTH(list_of_numbers)
			RETURN pair_closest, dist_val
		LET val_inner = list_of_numbers[inner_idx]
		IF inner_idx != outer_idx
			LET new_dist = dist_val
			LET curr_pair = pair_closest
			IF dist_val == None
				new_dist = ABS(val_inner - list_of_numbers[outer_idx])
				curr_pair = (MIN(val_inner, list_of_numbers[outer_idx]), MAX(val_inner, list_of_numbers[outer_idx]))
			ELSE
				LET candidate_dist = ABS(val_inner - list_of_numbers[outer_idx])
				IF candidate_dist < dist_val
					new_dist = candidate_dist
					curr_pair = (MIN(val_inner, list_of_numbers[outer_idx]), MAX(val_inner, list_of_numbers[outer_idx]))
			RETURN inner_loop(inner_idx + 1, outer_idx, curr_pair, new_dist)
		ELSE
			RETURN inner_loop(inner_idx + 1, outer_idx, pair_closest, dist_val)
	
	DEFINE outer_loop(outer_idx, pair_closest, dist_val)
		IF outer_idx >= LENGTH(list_of_numbers)
			RETURN pair_closest
		LET result_pair, result_dist = inner_loop(0, outer_idx, pair_closest, dist_val)
		RETURN outer_loop(outer_idx + 1, result_pair, result_dist)
	
	RETURN outer_loop(0, pair_closest, dist_val)
END FUNCTION
```