```
FUNCTION even_odd_palindrome(n)
	is_palindrome := LAMBDA (num) ->
		original_str = TO_STRING(num)
		idx = LEN(original_str) - 1
		FUNCTION check_recur(pos)
			IF pos >= LEN(original_str) THEN
				TRUE
			ELSE IF original_str[pos] = original_str[idx - pos] THEN
				check_recur(pos + 1)
			ELSE
				FALSE
		END FUNCTION
		check_recur(0)
	
	fn_even_palindromes := 0
	___odd_palindromes_007 := 0

	FUNCTION traverse(index)
		IF index > n THEN
			(TUPLE (fn_even_palindromes, ___odd_palindromes_007))
		ELSE
			is_odd_val = (index MOD 2) = 1
			is_pal = is_palindrome(index)
			cond_0 = is_pal AND is_odd_val
			cond_1 = is_pal AND NOT is_odd_val
			updated_even_palindromes := fn_even_palindromes + IF cond_1 THEN 1 ELSE 0
			updated_odd_palindromes := ___odd_palindromes_007 + IF cond_0 THEN 1 ELSE 0
			fn_even_palindromes = updated_even_palindromes
			___odd_palindromes_007 = updated_odd_palindromes
			traverse(index + 1)
	END FUNCTION

	traverse(1)
END FUNCTION
```