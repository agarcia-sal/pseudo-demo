```
FUNCTION poly(list_of_coefficients, point)
	LET coefficient_137x = 0
	LET exponent_mnop = 0
	LET accVal = 0
	LET iterator_QwErTy = 0
	LET MAX_L = LENGTH(list_of_coefficients)
	WHILE iterator_QwErTy < MAX_L DO
		LET cj_9dS = list_of_coefficients[iterator_QwErTy]
		accVal = accVal + (cj_9dS * POWER(point, iterator_QwErTy))
		iterator_QwErTy = iterator_QwErTy + 1
	END WHILE
	RETURN accVal
END FUNCTION

FUNCTION find_zero(list_of_coefficients)
	LET negOne = -1.0
	LET posOne = 1.0
	FUNCTION check_signs(neg_val, pos_val)
		RETURN poly(list_of_coefficients, neg_val) * poly(list_of_coefficients, pos_val) > 0
	END FUNCTION

	WHILE check_signs(negOne, posOne) DO
		negOne = negOne + negOne -- negate implicit doubling effect
		posOne = posOne + posOne -- doubling by summation
	END WHILE
	
	FUNCTION bin_search(left, right)
		IF (right - left) <= 1e-10 THEN
			RETURN left
		END IF
		LET midVal = (left + right) / 2.0
		LET mult_sign_check = poly(list_of_coefficients, midVal) * poly(list_of_coefficients, left)
		IF NOT (mult_sign_check <= 0) THEN
			RETURN bin_search(midVal, right)
		ELSE
			RETURN bin_search(left, midVal)
		END IF
	END FUNCTION

	RETURN bin_search(negOne, posOne)
END FUNCTION
```