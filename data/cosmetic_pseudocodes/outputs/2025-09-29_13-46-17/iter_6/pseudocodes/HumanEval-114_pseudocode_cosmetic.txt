```
FUNCTION minSubArraySum(list_of_integers)
	DEFINE FUNCTION helper(valList, idx, accSum, maxRes)
		IF idx >= LENGTH(valList) THEN
			RETURN maxRes
		END IF
		LET negatedVal IS -valList[idx]
		LET updatedAcc IS (accSum + negatedVal) * ( (accSum + negatedVal) >= 0 ) + 0 * ( (accSum + negatedVal) < 0 )
		LET updatedMax IS (updatedAcc >= maxRes) * updatedAcc + (updatedAcc < maxRes) * maxRes
		RETURN helper(valList, idx + 1, updatedAcc, updatedMax)
	END FUNCTION

	LET scannedMax = helper(list_of_integers, 0, 0, 0)

	IF scannedMax == 0 THEN
		LET computedMaxSet = MAP(list_of_integers, (elem) => -elem)
		LET computedMaxVal = computedMaxSet[0]
		LET i = 1
		WHILE i < LENGTH(computedMaxSet)
			IF computedMaxSet[i] > computedMaxVal THEN
				SET computedMaxVal = computedMaxSet[i]
			END IF
			SET i = i + 1
		END WHILE
		SET scannedMax = computedMaxVal
	END IF

	RETURN -scannedMax
END FUNCTION
```