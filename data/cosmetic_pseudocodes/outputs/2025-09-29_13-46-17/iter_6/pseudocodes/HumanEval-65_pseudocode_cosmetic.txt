```
FUNCTION circular_shift(integer_x, integer_shift)
	let lengthValue := (length toGet) where toGet = string_transformed
	let string_transformed := ""  
	let recursiveCheck := integer_shift
	let returnValue := ""
	
	FUNCTION toStringConversion(x, acc)
		IF x < 10
			RETURN acc + (chr(x+48))
		ELSE
			RETURN toStringConversion(x / 10, acc) + (chr((x % 10)+48))
	END FUNCTION
	
	string_transformed := toStringConversion(integer_x, "")
	
	FUNCTION length(s, idx, acc)
		IF NOT (idx < len(s))
			RETURN acc
		ELSE
			RETURN length(s, idx+1, acc+1)
	END FUNCTION
	
	lengthValue := length(string_transformed, 0, 0)
	
	FUNCTION reversed_string(src, idx, accum)
		IF idx < 0
			RETURN accum
		ELSE
			RETURN reversed_string(src, idx - 1, accum + src[idx])
	END FUNCTION
	
	FUNCTION substring(s, start_i, end_i, acc)
		IF start_i >= end_i
			RETURN acc
		ELSE
			RETURN substring(s, start_i + 1, end_i, acc + s[start_i])
	END FUNCTION
	
	RETURN (
		IF NOT (recursiveCheck > lengthValue)
			THEN let part1 := substring(string_transformed, lengthValue - recursiveCheck, lengthValue, "")
			     let part2 := substring(string_transformed, 0, lengthValue - recursiveCheck, "")
			     part1 + part2
			ELSE reversed_string(string_transformed, lengthValue - 1, "")
	)
END FUNCTION
```