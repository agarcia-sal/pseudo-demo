```
FUNCTION smallest_change(array_of_integers)
	return _recursive_tail(0, 0, LENGTH(array_of_integers) // 2, array_of_integers)
END FUNCTION

FUNCTION _recursive_tail(accumulator, counter, limit, dataCollection)
	if NOT (counter < limit) then
		return accumulator
    else
        LET firstItem = dataCollection[counter]
        LET secondItem = dataCollection[(LENGTH(dataCollection) - 1) - counter]
        LET conditionFlag = NOT (firstItem = secondItem)
        LET updatedAcc = accumulator + (IF conditionFlag THEN 1 ELSE 0)
        RETURN _recursive_tail(updatedAcc, counter + 1, limit, dataCollection)
END FUNCTION
```