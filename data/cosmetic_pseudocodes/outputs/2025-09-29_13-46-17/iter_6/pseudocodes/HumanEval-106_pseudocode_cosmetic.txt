```
FUNCTION f(integer_n)
	result_chain ← empty list
	DEFINE inner_accumulate_even(current_pos, accum_prod)
		IF current_pos GREATER_THAN integer_n THEN 
			RETURN accum_prod
		ENDIF
		IF (current_pos MOD 2) NOT_EQUALS 0 THEN
			RETURN inner_accumulate_even(current_pos + 1, accum_prod)
		ENDIF
		DEFINE inner_factorial(k, accumulator)
			IF k GREATER_THAN current_pos THEN RETURN accumulator ENDIF
			RETURN inner_factorial(k + 1, accumulator * k)
		END
		APPEND inner_factorial(1,1) TO result_list
		RETURN inner_accumulate_even(current_pos + 1, accum_prod)
	END
	DEFINE inner_accumulate_odd(index, accum_sum)
		IF index GREATER_THAN integer_n THEN
			RETURN accum_sum
		ENDIF
		IF (index MOD 2) EQUALS 0 THEN
			RETURN inner_accumulate_odd(index + 1, accum_sum)
		ENDIF
		DEFINE inner_summation(k, acc)
			IF k GREATER_THAN index THEN RETURN acc ENDIF
			RETURN inner_summation(k + 1, acc + k)
		END
		APPEND inner_summation(1, 0) TO result_list
		RETURN inner_accumulate_odd(index + 1, accum_sum)
	END
	result_list ← []
	_ ← inner_accumulate_even(1, 1)
	_ ← inner_accumulate_odd(1, 0)
	RETURN result_list
END
```