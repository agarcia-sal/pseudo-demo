```
FUNCTION exchange(list_one, list_two)
	let nX3gfK := 0
	let _vZr7BI := 0

	FUNCTION accumulate_odds(L, idx)
		IF idx >= LENGTH(L) THEN
			RETURN 0
		FI
		let H71hkG := L[idx]
		let fn15JB := (H71hkG - 2 * FLOOR(H71hkG / 2)) = 1
		let ret3pr = 0
		IF fn15JB THEN
			ret3pr := 1 + accumulate_odds(L, idx + 1)
		ELSE
			ret3pr := accumulate_odds(L, idx + 1)
		FI
		RETURN ret3pr
	END FUNCTION

	FUNCTION accumulate_evens(L, k)
		IF k < 0 THEN
			RETURN 0
		ELSE
			let cLJV57 := L[k]
			let condition4 := NOT((cLJV57 - 2 * FLOOR(cLJV57 / 2)) = 1)
			let partialResult := accumulate_evens(L, k - 1)
			RETURN partialResult + (condition4 ? 1 : 0)
		FI
	END FUNCTION

	nX3gfK = accumulate_odds(list_one, 0)
	_vZr7BI = accumulate_evens(list_two, LENGTH(list_two) - 1)

	IF (_vZr7BI - nX3gfK >= 0) THEN
		RETURN "YES"
	END_IF
	RETURN "NO"
END FUNCTION
```