```
FUNCTION rolling_max(list_of_numbers)
    FUNCTION nested_accumulator(remaining_numbers, current_maximum, accumulated_results)
        IF NOT (remaining_numbers IS empty)
            LET headNumber = HEAD(remaining_numbers)
            LET tailNumbers = TAIL(remaining_numbers)
            LET freshMaxValue = current_maximum
            LET updatedMaxCheck = (current_maximum IS None) OR (headNumber > current_maximum)
            LET newMax = updatedMaxCheck ? headNumber : freshMaxValue
            LET refreshedResults = accumulated_results + [newMax]
            RETURN nested_accumulator(tailNumbers, newMax, refreshedResults)
        ELSE
            RETURN accumulated_results
        END IF
    END FUNCTION

    RETURN nested_accumulator(list_of_numbers, None, [])
END FUNCTION
```