```
FUNCTION get_odd_collatz(n)
	tail_recursive_compute <- FUNCTION(x, accumulator)
		IF NOT (x > 1) THEN 
			RETURN accumulator
		END IF
		updated_x <- IF x MOD 2 == 0 THEN x / 2 ELSE 3 * x + 1 END IF
		filtered_accumulator <- IF updated_x MOD 2 != 0 THEN accumulator UNION {INT(updated_x)} ELSE accumulator END IF
		RETURN tail_recursive_compute(updated_x, filtered_accumulator)
	END FUNCTION

	initial_collection <- IF (n MOD 2 == 0)
		THEN SET()
		ELSE {n}
	END IF

	ResultSet <- tail_recursive_compute(n, initial_collection)

	sorted_result <- FUNCTION(set_to_sort)
		list_form <- []
		iterate_items <- FUNCTION(to_sort, index)
			IF index == LENGTH(to_sort) THEN RETURN list_form END IF
			list_form APPEND to_sort[index]
			RETURN iterate_items(to_sort, index + 1)
		END FUNCTION

		unsorted_list <- iterate_items(set_to_sort, 0)
		i <- 0
		WHILE i < LENGTH(unsorted_list) - 1
			j <- 0
			WHILE j < LENGTH(unsorted_list) - i - 1
				condition_swap <- (unsorted_list[j] > unsorted_list[j + 1])
				unsorted_list[j], unsorted_list[j + 1] <- IF condition_swap THEN unsorted_list[j + 1], unsorted_list[j] ELSE unsorted_list[j], unsorted_list[j + 1] END IF
				j <- j + 1
			END WHILE
			i <- i + 1
		END WHILE
		RETURN unsorted_list
	END FUNCTION

	RETURN sorted_result(ResultSet)
END FUNCTION
```