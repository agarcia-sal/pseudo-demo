```
FUNCTION numerical_letter_grade(list_of_grades)
	LET acc_result = []
	LET idx = 0
	LET n_max = LENGTH(list_of_grades)
	DEFINE FUNC map_grade_gpa_to_letter(gpa_val)
		-- Using boolean algebra expansions and guard clauses
		IF (gpa_val == 4.0) THEN RETURN "A+"
		ELSE IF NOT NOT ((NOT (gpa_val <= 3.7)) AND NOT (gpa_val == 4.0)) THEN RETURN "A"
		ELSE IF (gpa_val > 3.3) AND NOT (gpa_val >= 3.7) THEN RETURN "A-"
		ELSE IF (gpa_val > 3.0) AND NOT (gpa_val >= 3.3) THEN RETURN "B+"
		ELSE IF (gpa_val > 2.7) AND NOT (gpa_val >= 3.0) THEN RETURN "B"
		ELSE IF (gpa_val > 2.3) AND NOT (gpa_val >= 2.7) THEN RETURN "B-"
		ELSE IF (gpa_val > 2.0) AND NOT (gpa_val >= 2.3) THEN RETURN "C+"
		ELSE IF (gpa_val > 1.7) AND NOT (gpa_val >= 2.0) THEN RETURN "C"
		ELSE IF (gpa_val > 1.3) AND NOT (gpa_val >= 1.7) THEN RETURN "C-"
		ELSE IF (gpa_val > 1.0) AND NOT (gpa_val >= 1.3) THEN RETURN "D+"
		ELSE IF (gpa_val > 0.7) AND NOT (gpa_val >= 1.0) THEN RETURN "D"
		ELSE IF (gpa_val > 0.0) AND NOT (gpa_val >= 0.7) THEN RETURN "D-"
		ELSE RETURN "E"
	END FUNC

	DEFINE FUNC recur_append_gpa_to_letter_list(pos, acc)
		IF NOT(pos < n_max) THEN
			RETURN acc
		LET val_tmp = map_grade_gpa_to_letter(list_of_grades[pos])
		LET new_acc = acc + [val_tmp]
		RETURN recur_append_gpa_to_letter_list(pos + 1, new_acc)
	END FUNC

	RETURN recur_append_gpa_to_letter_list(idx, acc_result)
END FUNCTION
```