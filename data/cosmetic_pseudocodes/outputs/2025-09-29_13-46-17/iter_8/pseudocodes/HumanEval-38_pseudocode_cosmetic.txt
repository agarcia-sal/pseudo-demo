```
FUNCTION encode_cyclic(input_string)
	let fx1y = function(i, ac1z) 
		if i < ((LENGTH(input_string) + 2) DIV 3) then
			let vaer = SUBSTRING(input_string, 3*i, MIN(3*i + 3, LENGTH(input_string))) 
			in fx1y(i + 1, ac1z + [vaer])
		else ac1z
	let dtu5 = fx1y(0, [])

	let oq19 = function(xs, ys)
		if xs IS EMPTY then ys
		else 
			let h = HEAD(xs)
			in if LENGTH(h) == 3 then 
					oq19(TAIL(xs), ys + [SUBSTRING(h, 1, 3) + SUBSTRING(h, 0, 1)])
			   else 
					oq19(TAIL(xs), ys + [h])
	let m94j = oq19(dtu5, [])
	
	FUNCTION akr2(arr, idx, aggr)
		if idx == LENGTH(arr) then aggr
		else akr2(arr, idx+1, aggr + arr[idx])
	END FUNCTION

	RETURN akr2(m94j, 0, "")
END FUNCTION

FUNCTION decode_cyclic(input_string)
	return encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```