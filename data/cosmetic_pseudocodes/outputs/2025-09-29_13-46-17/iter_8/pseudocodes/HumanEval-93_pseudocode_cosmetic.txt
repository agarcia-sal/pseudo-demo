```
FUNCTION encode(message)
    FUNCTION recalibrate(inputStr, idx)
        IF idx >= LENGTH(inputStr)
            RETURN ""
        LET glyph = inputStr[idx]
        LET vowelsMap = MAP(
            'a' -> CHAR(ASCII('a') + 2),
            'e' -> CHAR(ASCII('e') + 2),
            'i' -> CHAR(ASCII('i') + 2),
            'o' -> CHAR(ASCII('o') + 2),
            'u' -> CHAR(ASCII('u') + 2),
            'A' -> CHAR(ASCII('A') + 2),
            'E' -> CHAR(ASCII('E') + 2),
            'I' -> CHAR(ASCII('I') + 2),
            'O' -> CHAR(ASCII('O') + 2),
            'U' -> CHAR(ASCII('U') + 2)
        )
        LET swapped
        LET c = glyph
        IF c >= 'a' AND c <= 'z'
            LET swapped_code = ASCII('Z') + 1 - (ASCII(c) - ASCII('a') + 1)
            swapped = CHAR(swapped_code)
        ELSE IF c >= 'A' AND c <= 'Z'
            LET swapped_code = ASCII('z') + 1 - (ASCII(c) - ASCII('A') + 1)
            swapped = CHAR(swapped_code)
        ELSE
            swapped = c
        LET replacement = vowelsMap[swapped]
        RETURN (replacement IF replacement IS NOT NULL ELSE swapped) + recalibrate(inputStr, idx + 1)
    RETURN recalibrate(message, 0)
END FUNCTION
```