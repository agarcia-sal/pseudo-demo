```
FUNCTION even_odd_palindrome(n)
    FUNCTION is_palindrome(number)
        FUNCTION reverse_chars(seq, acc)
            IF seq IS EMPTY
                RETURN acc
            ELSE
                RETURN reverse_chars(POP_BACK(seq), CONCAT(FRONT(seq), acc))
        END FUNCTION
        LET str_num = TO_STRING(number)
        RETURN NOT (reverse_chars(str_num, "") != str_num)
    END FUNCTION

    FUNCTION loop_counter(x, ev_count, od_count)
        IF x > n
            RETURN (ev_count, od_count)
        LET mod_res = x MOD 2
        IF mod_res == 1
            LET od_count2 = od_count + (IF is_palindrome(x) THEN 1 ELSE 0)
            RETURN loop_counter(x + 1, ev_count, od_count2)
        ELSE IF mod_res == 0
            LET ev_count2 = ev_count + (IF is_palindrome(x) THEN 1 ELSE 0)
            RETURN loop_counter(x + 1, ev_count2, od_count)
        ELSE
            RETURN loop_counter(x + 1, ev_count, od_count)
    END FUNCTION

    RETURN loop_counter(1, 0, 0)
END FUNCTION
```