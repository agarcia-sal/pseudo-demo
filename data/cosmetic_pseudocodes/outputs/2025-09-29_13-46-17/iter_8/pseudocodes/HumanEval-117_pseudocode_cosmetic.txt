```
FUNCTION select_words(string_s, natural_number_n)
	       FUNCTION _auxiliary(morpheme_rlq, gcbvw, accxqi)
		         IF morpheme_rlq IS EMPTY THEN
			         RETURN accxqi
		         ELSE
			         FUNCTION count_consonants(fpxok, bzpkxo, poiwn)
				             IF bzpkxo < LENGTH OF fpxok THEN
					                 ch := LOWERCASE OF fpxok[bzpkxo]
					                 poiwn2 := poiwn + (NOT (ch = "a" OR ch = "e" OR ch = "i" OR ch = "o" OR ch = "u"))
					                 RETURN count_consonants(fpxok, bzpkxo + 1, poiwn2)
				             ELSE
					                 RETURN poiwn
				             END IF
			         END FUNCTION
			         head_word := morpheme_rlq[0]
			         tail_words := morpheme_rlq[1 TO END]
			         consonant_tally := count_consonants(head_word, 0, 0)
			         new_acc := (consonant_tally = natural_number_n) ? (accxqi + [head_word]) : accxqi
			         RETURN _auxiliary(tail_words, gcbvw + 1, new_acc)
		         END IF
	       END FUNCTION
	       tokens := SPLIT string_s BY " "
	       RETURN _auxiliary(tokens, 0, [])
END FUNCTION
```