```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        FUNCTION check_divisor(integer_q, integer_limit)
            IF integer_q GREATER THAN integer_limit
                RETURN True
            ELSE IF integer_p MODULO integer_q EQUALS 0
                RETURN False
            ELSE
                RETURN check_divisor(integer_q + 1, integer_limit)
        END FUNCTION

        IF integer_p LESS THAN 2
            RETURN False
        ELSE
            SET sqrt_limit TO MINIMUM OF (INTEGER PART OF (mathematical_functions_module.sqrt(integer_p)) + 1) AND (integer_p - 1)
            RETURN check_divisor(2, sqrt_limit)
    END FUNCTION

    FUNCTION add_next_fib(seq_accum)
        FUNCTION sum_last_two(lst)
            RETURN lst[SIZE(lst) - 1] + lst[SIZE(lst) - 2]
        END FUNCTION

        RETURN seq_accum + [sum_last_two(seq_accum)]
    END FUNCTION

    FUNCTION prime_fib_recursive(prime_count, fib_sequence)
        IF prime_count EQUALS 0
            RETURN fib_sequence[SIZE(fib_sequence) - 1]
        ELSE
            LET updated_seq BE add_next_fib(fib_sequence)
            LET last_val BE updated_seq[SIZE(updated_seq) - 1]
            LET new_prime_count BE prime_count - (IF is_prime(last_val) THEN 1 ELSE 0)
            RETURN prime_fib_recursive(new_prime_count, updated_seq)
    END FUNCTION

    RETURN prime_fib_recursive(integer_n, [0,1])
END FUNCTION
```