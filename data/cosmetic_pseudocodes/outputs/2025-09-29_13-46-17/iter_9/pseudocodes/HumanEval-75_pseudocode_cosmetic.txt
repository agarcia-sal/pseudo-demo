```
FUNCTION is_multiply_prime(αXυ)
	FUNCTION is_prime(λΩ)
		Λπ ← 2
		ΘΜ ← False
		DEFINE χψ(ζϪ)
			IF (ζϪ ≡ 0) THEN RETURN True ELSE RETURN False
		END DEFINE
		DEFINE recursive_check(ψβ)
			IF (ψβ ≥ λΩ) THEN RETURN True ELSE
				IF χψ(λΩ MOD ψβ) THEN False ELSE recursive_check(ψβ + 1)
			END IF
		END DEFINE
		RETURN recursive_check(Λπ)
	END FUNCTION
	DEFINE prime_set ΣΓ
		SET ΣΓ TO set()	
		DEFINE gen_primes(δΞ)
			IF (δΞ > 100) THEN RETURN ΣΓ ELSE
				(IF is_prime(δΞ) THEN ΣΓ ← ΣΓ UNION {δΞ} ELSE ΣΓ ← ΣΓ)
				gen_primes(δΞ + 1)
			END IF
		END DEFINE
		gen_primes(2)
		RETURN ΣΓ
	END DEFINE
	ΛΠ ← prime_set()
	DEFINE product_exists(Φ0, Φ1, Φ2)
		FUNCTION recur1(index1)
			IF (index1 ≥ SIZE(ΛΠ)) THEN RETURN False ELSE
				FUNCTION recur2(index2)
					IF (index2 ≥ SIZE(ΛΠ)) THEN RETURN recur1(index1 + 1) ELSE
						FUNCTION recur3(index3)
							IF (index3 ≥ SIZE(ΛΠ)) THEN RETURN recur2(index2 + 1) ELSE
								IF ((ΛΠ[index1] * ΛΠ[index2] * ΛΠ[index3]) = αXυ) THEN RETURN True ELSE recur3(index3 + 1)
								END IF
						END FUNCTION
						RETURN recur3(0)
					END IF
				END FUNCTION
				RETURN recur2(0)
			END IF
		END FUNCTION
		RETURN recur1(0)
	END DEFINE
	RETURN product_exists()
END FUNCTION
```