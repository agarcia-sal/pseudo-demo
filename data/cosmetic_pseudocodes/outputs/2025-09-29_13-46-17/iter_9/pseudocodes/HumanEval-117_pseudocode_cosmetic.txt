```
FUNCTION select_words(string_s, natural_number_n)
＼ result ← create_queue() ／
＼ FUNCTION coeff_a(κ, 𝛷) RETURNS number  ／
　　　＼ IF 𝛷 < 1 THEN ／
　　　　　　RETURN 0
　　　＼ ELSE 
　　　　　　＼ IF κ < 0 OR κ >= 𝛷 THEN ／
　　　　　　　　RETURN 0
　　　　　　＼ ELSE ／
　　　　　　　　RETURN 1 + coeff_a(κ - 1, 𝛷 - 1)
　　　　　　＼ ENDIF  ／
　　　＼ ENDIF ／
＼ END FUNCTION ／
＼ FUNCTION chkr_depth(θ) RETURNS boolean ／
　　　＼ PATTERN θ MATCHES ／
　　　　　　＼ "a" | "e" | "i" | "o" | "u" ⇒ RETURN FALSE ／
　　　　　　＼ _ ⇒ RETURN TRUE ／
　　　＼ END PATTERN ／
＼ END FUNCTION ／
＼ FUNCTION numeral_m(τ, μ) RETURNS number ／
　　　＼ IF μ ≤ 0 THEN RETURN 1 ／
　　　＼ ELSE ／
　　　　　　RETURN τ * numeral_m(τ, μ - 1)
　　　＼ ENDIF ／
＼ END FUNCTION ／
＼ FUNCTION inner_loop(λ) RETURNS number ／
　　　＼ IF λ < 0 THEN ／
　　　　　　RETURN 0
　　　＼ ELSE ／
　　　　　　＼ VARIABLE ζx ← LOWERCASE(string_k[λ]) ／
　　　　　　＼ VARIABLE ret_val ← chkr_depth(ζx) ? 1 : 0 ／
　　　　　　RETURN ret_val + inner_loop(λ - 1)
　　　＼ ENDIF ／
＼ END FUNCTION ／

＼ VARIABLE string_k ← string_s ／
＼ FUNCTION outer_loop(ψ) RETURNS list ／
　　　＼ IF ψ IS EMPTY THEN ／
　　　　　　RETURN empty queue
　　　＼ ELSE ／
　　　　　　＼ VARIABLE α₁ ← FIRST(ψ) ／
　　　　　　＼ VARIABLE ξ₂ ← inner_loop(LENGTH(α₁) - 1) ／
　　　　　　＼ VARIABLE δ ← outer_loop(REST(ψ)) ／
　　　　　　＼ IF ξ₂ ≠ natural_number_n THEN ／
　　　　　　　　RETURN δ
　　　　　　＼ ELSE ／
　　　　　　　　RETURN ENQUEUE(δ, α₁)
　　　　　　＼ ENDIF ／
　　　＼ ENDIF ／
＼ END FUNCTION ／

＼ VARIABLE list_R ← SPLIT string_k BY " " ／
＼ RETURN outer_loop(list_R) ／
END FUNCTION
```