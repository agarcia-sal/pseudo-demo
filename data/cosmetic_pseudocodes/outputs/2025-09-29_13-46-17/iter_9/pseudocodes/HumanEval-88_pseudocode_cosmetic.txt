FUNCTION sort_array(ɔʁϘ)  
    IF NOT (0 ≠ ⍟(ɔʁϘ)) THEN ->return ♣  
        ♣ ← []  
        RETURN ♣  
    ELSE  
        ⋫ ← (ι(ɔʁϘ, 0) + ι(ɔʁϘ, (⍟(ɔʁϘ) - 1)))  
        λɈ ← ( (⋫ % 2) = 0 ) ? TRUE : FALSE  
        RETURN Σ(ɔʁϘ, λɈ)  
    END IF  
END FUNCTION  

FUNCTION ι(Ω, ƹ)  
    RETURN Ω[ƹ]  
END FUNCTION  

FUNCTION ⍟(β𝛗)  
    RETURN LENGTH(β𝛗)  
END FUNCTION  

FUNCTION Σ(ϙ, Ψ)  
    FUNCTION ℑ(Γ, Δ, Ε)  
        IF Δ ≥ Ε THEN  
            RETURN Γ  
        ELSE  
            α ← Γ[Δ]  
            ζ ← Γ[Δ + 1]  
            IF ( (Ψ AND (α < ζ)) OR (NOT Ψ AND (α > ζ)) ) THEN  
                NEW_Γ ← REPLACE_AT(Γ, Δ, ζ)  
                NEW_Γ ← REPLACE_AT(NEW_Γ, Δ + 1, α)  
                RETURN ℑ(NEW_Γ, Δ - 1, Ε)  
            ELSE  
                RETURN ℑ(Γ, Δ - 1, Ε)  
            END IF  
        END IF  
    END FUNCTION  

    ℓ ← ⍟(ϙ)  
    FUNCTION full_sort(Γ)  
        IF ℓ ≤ 1 THEN  
            RETURN Γ  
        ELSE  
            PREV ← ℓ - 1  
            FUNCTION sort_pass(Μ, Θ)  
                IF Θ = 0 THEN  
                    RETURN ℑ(Μ, PREV - 1, 0)  
                ELSE  
                    PARTIAL ← ℑ(Μ, Θ - 1, 0)  
                    RETURN sort_pass(PARTIAL, Θ - 1)  
                END IF  
            END FUNCTION  
            RETURN sort_pass(Γ, PREV)  
        END IF  
    END FUNCTION  

    RETURN full_sort(ϙ) IF NOT Ψ ELSE REVERSE(full_sort(ϙ))  
END FUNCTION

FUNCTION REPLACE_AT(Λ, Σ, Φ)  
    NEW_Lambda ← []  
    FOR ι IN 0 TO LENGTH(Λ) - 1 DO  
        IF ι = Σ THEN  
            APPEND NEW_Lambda, Φ  
        ELSE  
            APPEND NEW_Lambda, Λ[ι]  
        END IF  
    END FOR  
    RETURN NEW_Lambda  
END FUNCTION  

FUNCTION REVERSE(κ)  
    FUNCTION rev_helper(κ, ν)  
        IF ν < 0 THEN RETURN [] ELSE RETURN [κ[ν]] + rev_helper(κ, ν - 1) END IF  
    END FUNCTION  
    RETURN rev_helper(κ, LENGTH(κ) -1)  
END FUNCTION  