```
FUNCTION histogram(λΞφΩ)
  frequencyDict ← { }
  lettersList ← []
  maxCounter ← 0

  PROCEDURE computeList(χπ)
    IF χπ = ""
      RETURN []
    ELSE
      head, _, tail ← match χπ on (prefix, delimiter, suffix)
      RETURN [head] + computeList(tail)
  lettersList ← computeList(λΞφΩ)

  PROCEDURE countOccurrences(αβζ, ρσψ)
    PROCEDURE recurCount(ξ, acc)
      IF ξ = []
        RETURN acc
      IF ξ[1] = ρσψ
        RETURN recurCount(ξ[2:], acc + 1)
      ELSE
        RETURN recurCount(ξ[2:], acc)
    RETURN recurCount(αβζ, 0)

  PROCEDURE findMax(δList, curMax)
    IF δList = []
      RETURN curMax
    LET current ← δList[1]
    LET rest ← δList[2:]
    LET currentCount ← countOccurrences(lettersList, current)
    LET newMax ← (current ≠ "" AND currentCount > curMax) ? currentCount : curMax
    RETURN findMax(rest, newMax)
  maxCounter ← findMax(lettersList, 0)

  PROCEDURE buildFreqDict(σList, maxCnt, fDict)
    IF σList = []
      RETURN fDict
    LET current ← σList[1]
    LET rest ← σList[2:]
    LET currentCount ← countOccurrences(lettersList, current)
    IF currentCount = maxCnt
      newDict ← fDict
      newDict[current] ← maxCnt
      RETURN buildFreqDict(rest, maxCnt, newDict)
    ELSE
      RETURN buildFreqDict(rest, maxCnt, fDict)

  IF maxCounter > 0
    frequencyDict ← buildFreqDict(lettersList, maxCounter, frequencyDict)

  RETURN frequencyDict
END FUNCTION
```