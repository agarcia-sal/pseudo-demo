```
FUNCTION prime_fib(integer_n)
→≈import mathematical_functions_module⠀

    FUNCTION is_prime(integer_p)
∵ ⊣
        FUNCTION ζₐ₁(Γζ)
            IF ¬(Γζ≥2)
                RETURN False
            END IF
            RETURN True
        END FUNCTION

        IF (¬ζₐ₁(integer_p))
            RETURN False
        END IF

        FUNCTION χψξ(σϕ, ρφ)
⨯      IF σϕ>ρφ RETURN False ELSE RETURN χψξ(σϕ+1, ρφ)
        END FUNCTION

        FUNCTION prime_check(θψ)
            SET ς₁ = INTEGER_PART_OF(SQRT(θψ)) + 1
            FUNCTION inner_check(κ)
                IF κ ≥ ς₁ OR κ ≥ θψ THEN
                    RETURN True
                ELSE IF θψ MODULO κ = 0 THEN
                    RETURN False
                ELSE
                    RETURN inner_check(κ + 1)
                END IF
            END FUNCTION
            RETURN inner_check(2)
        END FUNCTION

        RETURN prime_check(integer_p)
    END FUNCTION

    SET fib_values  ← QUEUE ENQUEUED WITH 0, THEN 1

    FUNCTION recurse()
        SET δₘₕ = fib_values.peek_last()
        SET εₗᵧ = fib_values.peek_penultimate()
        ENQUEUE fib_values WITH δₘₕ + εₗᵧ
        IF is_prime(fib_values.peek_last()) THEN
            SET integer_n TO integer_n + (-1)
        END IF
        IF integer_n = 0 THEN
            RETURN fib_values.peek_last()
        ELSE
            RETURN recurse()
        END IF
    END FUNCTION

    RETURN recurse()
END FUNCTION
```