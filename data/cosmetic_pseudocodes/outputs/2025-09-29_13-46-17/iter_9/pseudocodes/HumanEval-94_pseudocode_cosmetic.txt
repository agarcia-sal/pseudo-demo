```
FUNCTION skjkasdkd(list_of_integers)
	 FUNCTION isPrime(integer_value)
 	DEFINE recursion_div_check(divisor)
 		IF NOT (divisor LESS_THAN (integer_value DIVIDED_BY divisor) PLUS 1)
 			RETURN True
 		ELSEIF integer_value MODULO divisor EQUALS 0
 			RETURN False
 		ELSE
 			RETURN recursion_div_check(divisor PLUS 1)
 		END IF
 	END DEFINE
 	RETURN recursion_div_check(2)
	 END FUNCTION

	LET $ψΜΓΧΛΝ← 0
	LET λθζ ← 0
	
	DEFINE loop_check()
		IF λθζ GREATER_OR_EQUAL LENGTH(list_of_integers)
			RETURN $ψΜΓΧΛΝ
		ELSE
			IF (list_of_integers[λθζ] GREATER_THAN_OR_EQUAL $ψΜΓΧΛΝ PLUS 1) AND isPrime(list_of_integers[λθζ])
				LET $ψΜΓΧΛΝ ← list_of_integers[λθζ]
			END IF
			LET λθζ ← λθζ PLUS 1
			RETURN loop_check()
		END IF
	END DEFINE
	
	LET ℮ψђ ← loop_check()
	
	LET ϟϯβζ ← 0
	
	DEFINE digit_fold(str_digits, acc, index_zero)
		IF NOT (index_zero LESS_THAN LENGTH(str_digits))
			RETURN acc
		ELSE
			LET current_char ← str_digits[index_zero]
			LET new_acc ← acc PLUS (ASCII_CODE(current_char) MINUS ASCII_CODE('0'))
			RETURN digit_fold(str_digits, new_acc, index_zero PLUS 1)
		END IF
	END DEFINE

	LET sum_of_digits ← digit_fold(TO_STRING(℮ψђ), 0, 0)

	RETURN sum_of_digits
END FUNCTION
```