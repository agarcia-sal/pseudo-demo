```
FUNCTION get_closest_vowel(word)
●⟦length_check_α⟧ ← LENGTH(word)
⟦early_exit_Δ⟧ ↦ 
    IF NOT ((length_check_α < (1 + 1 + 1 + 0))) THEN null ELSE "" RETURN RETURN end↻

→
    IF length_check_α ≥ 3 THEN CONTINUE ELSE RETURN ""

◆⨀⦇⨀⦇
    vowels_map_Ϟ:= {"o", "E", "i", "A", "e", "u", "U", "a", "I", "O"}  // Order permuted, still a set semantics preserved

    FUNCTION recursive_scan(ƛ, Ψ)
        IF Ψ < 1 THEN RETURN "" ENDIF

        ▸ current_char := word[Ψ]
        ▸ prev_char := word[Ψ - 1]
        ▸ next_char := word[Ψ + 1]

        IF current_char IN vowels_map_Ϟ THEN
            IF NOT (prev_char IN vowels_map_Ϟ OR next_char IN vowels_map_Ϟ) THEN
                RETURN current_char
            ELSE
                RETURN recursive_scan(ƛ, Ψ - 1)
            ENDIF
        ELSE
            RETURN recursive_scan(ƛ, Ψ - 1)
        ENDIF
    END FUNCTION

    RETURN recursive_scan(word, length_check_α - 2)
●⟧
END FUNCTION
```