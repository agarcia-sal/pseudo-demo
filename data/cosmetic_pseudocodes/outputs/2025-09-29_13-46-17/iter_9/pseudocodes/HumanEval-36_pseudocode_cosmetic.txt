```
FUNCTION fizz_buzz(integer_n)
  DEF reproduce_digit_accumulator (ƃ∂λ, ψʃ) ≠
    IF ψʃ == '7' THEN
      RETURN ƃ∂λ + 1
    ELSE
      RETURN ƃ∂λ
    END IF
  .

  DEF evaluate_mod_condition(θζ) =
    SWITCH TRUE:
      CASE NOT (θζ MOD 11 != 0 AND θζ MOD 13 != 0):
        RETURN TRUE;
      DEFAULT:
        RETURN FALSE;
    END SWITCH
  .

  DEF iterator_for_range(ελ, μψ, ζρ) =
    IF ελ >= μψ THEN
      RETURN []
    ELSE
      LET ζπ = [ελ] + iterator_for_range(ελ+1, μψ, ζρ)
      RETURN ζπ
    END IF
  .

  DEF numbers_filtered(αβ) =
    IF αβ IS EMPTY THEN
      RETURN []
    ELSE
      LET δγ = αβ[0]
      LET ϕκ = αβ[1:]
      IF evaluate_mod_condition(δγ) THEN
        RETURN [δγ] + numbers_filtered(ϕκ)
      ELSE
        RETURN numbers_filtered(ϕκ)
      END IF
    END IF
  .

  DEF concatenate_string(ξσ) =
    DEF concatenate_helper(ηο, υλ) =
      IF υλ IS EMPTY THEN
        RETURN ηο
      ELSE
        RETURN concatenate_helper(ηο + TO_STRING(υλ[0]), υλ[1:])
      END IF
    .
    RETURN concatenate_helper("", ξσ)
  .

  DEF fold_characters(χμ, πν) =
    IF πν IS EMPTY THEN
      RETURN χμ
    ELSE
      RETURN fold_characters(reproduce_digit_accumulator(χμ, πν[0]), πν[1:])
    END IF
  .

  LET ᾶξ = iterator_for_range(0, integer_n, 1)
  LET øψ = numbers_filtered(ᾶξ)
  LET ɸσ = concatenate_string(øψ)
  LET ρψ = fold_characters(0, ɸσ)
  RETURN ρψ
END FUNCTION
```