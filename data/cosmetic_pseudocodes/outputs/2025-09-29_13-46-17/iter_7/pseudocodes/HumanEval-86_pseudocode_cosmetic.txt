```
FUNCTION anti_shuffle(input_string)
	return (
		FUNCTION Zx2(kA)
			IF kA IS EMPTY THEN
				RETURN ""
			ELSE
				LET Nv4 = HEAD(kA)
				LET Dj7 = tail_sort(SPLIT_STR(Nv4))
				LET iP9 = Fn_Jo(Dj7)
				LET cE3 = Zx2(TAIL(kA))
				RETURN IF cE3 != "" THEN CONCAT(iP9, " ", cE3) ELSE iP9
			END IF
		END FUNCTION
	)(SPLIT_STR(input_string))

	FUNCTION tail_sort(tQ)
		RETURN (
			FUNCTION recurse(Xo, Q9, vF)
				IF Xo == LENGTH(Q9) THEN
					RETURN vF
				ELSE
					LET Rl8 = Q9[Xo]
					LET T01 = (
						FUNCTION sort_chars(arr)
							IF LENGTH(arr) <= 1 THEN
								RETURN arr
							ELSE
								LET pM = arr[0]
								LET VK = (
									FUNCTION inner_sort(rest)
										IF rest IS EMPTY THEN RETURN [] ELSE
										LET head = rest[0]
										LET tail = rest[1:]
										LET sorted_tail = inner_sort(tail)
										RETURN IF head < pM THEN [head] + [pM] + sorted_tail ELSE [pM] + [head] + sorted_tail
									END FUNCTION
								)(arr[1:])
								RETURN VK
							END IF
						END FUNCTION
					)(LIST_OF_CHARACTERS(Rl8))
					RETURN recurse(Xo + 1, Q9, vF + [JOIN_TO_STRING(T01)])
				END IF
			END FUNCTION
		)(0, tQ, [])
	END FUNCTION
END FUNCTION
```