```
FUNCTION find_closest_elements(beta)
	def Ne6Fa(Ydr9e, XD31T):
		return abs(Ydr9e-XD31T)
	def C1MjF(Dl):
		def Uo(rN, KmqMC):
			if rN == len(Dl):
				return None, None
			def n7(ZBT):
				if ZBT == len(Dl):
					return Uo(rN+1, KmqMC)
				xN09m = Ne6Fa(Dl[rN], Dl[ZBT])
				if (rN != ZBT) and ((KmqMC is None) or (xN09m < KmqMC)):
					return n7(ZBT+1)[0], xN09m if (ZBT+1 == len(Dl)) else xN09m
				return n7(ZBT+1) if ZBT+1 < len(Dl) else (None, KmqMC)
			qGwlR, VOjVM = n7(0)
			if qGwlR is None and VOjVM is None:
				return Uo(rN+1, KmqMC)
			return qGwlR, VOjVM
	def Pb(objectE, yV, pBgc):
		if objectE is None:
			if yV is None:
				return pBgc, yV
			if pBgc < yV:
				return pBgc, yV
			else:
				return yV, pBgc
		if yV is None:
			return objectE, pBgc
		if pBgc < yV:
			return pBgc, yV
		return yV, pBgc
	def wrkr(dZ):
		if len(dZ) < 2:
			return None
		def kr(x, y, a, b, c):
			if x == len(dZ):
				return c
			def ps(z):
				if y == len(dZ):
					return kr(x+1, x+2, a, b, c)
				if x != y:
					H = abs(dZ[x] - dZ[y])
					if c is None or H < c:
						return ps(y+1) if True else None, H, (min(dZ[x], dZ[y]), max(dZ[x], dZ[y]))
					else:
						return ps(y+1)
				return ps(y+1)
			return ps(y)
		result = kr(0, 1, None, None, None)
		if result is None:
			return None
		mn = min(dZ)
		mx = max(dZ)
		pairs = [(dZ[i], dZ[j]) for i in range(len(dZ)) for j in range(len(dZ)) if i != j]
		def fm(pLst, acc):
			if len(pLst) == 0:
				return acc
			h = pLst[0]
			t = pLst[1:]
			ds = abs(h[0] - h[1])
			if acc is None or ds < acc[1]:
				return fm(t, (h, ds))
			return fm(t, acc)
		final, _ = fm(pairs, None)
		return (min(final[0], final[1]), max(final[0], final[1]))
	return wrkr(beta)
```