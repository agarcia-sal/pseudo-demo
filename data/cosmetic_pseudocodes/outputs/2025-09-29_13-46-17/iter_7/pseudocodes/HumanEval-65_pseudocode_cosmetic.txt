```
FUNCTION circular_shift(aZ7, pRt)
	l9q = (FUNCTION(jM)
		RETURN jM + ""
	end)(aZ7)
	
	DEFINE helper_V4(dx, zy)
		IF NOT (zy > dx)
			RETURN FALSE
		RETURN TRUE
	end
	
	IF helper_V4(LENGTH(l9q), pRt)
		FUNCTION reverseString(s)
			DEFINE revAccum(idx, acc)
				IF idx < 0
					RETURN acc
				RETURN revAccum(idx - 1, acc + SUBSTRING(s, idx, idx))
			end
			RETURN revAccum(LENGTH(s) - 1, "")
		end
		RETURN reverseString(l9q)
	ELSE
		DEFINE partitionIndices(L, shiftVal)
			BEGIN_IDX = L - shiftVal
			END_IDX = L - shiftVal
			RETURN BEGIN_IDX, END_IDX
		end
		
		START_IDX, IDX_BREAK = partitionIndices(LENGTH(l9q), pRt)
		
		DEFINE sliceString(strVal, startPos, endPos)
			DEFINE recurSlice(i, e, accS)
				IF i >= e
					RETURN accS
				RETURN recurSlice(i + 1, e, accS + SUBSTRING(strVal, i, i))
			end
			RETURN recurSlice(startPos, endPos, "")
		end
		
		LEFT_SUB = sliceString(l9q, START_IDX, LENGTH(l9q))
		RIGHT_SUB = sliceString(l9q, 0, START_IDX)
		
		RETURN LEFT_SUB + RIGHT_SUB
END FUNCTION
```