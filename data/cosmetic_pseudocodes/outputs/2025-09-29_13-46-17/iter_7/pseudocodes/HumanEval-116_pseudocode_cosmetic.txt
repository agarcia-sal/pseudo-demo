```
FUNCTION sort_array(UwX)
	return (function W35(L9){
		if not L9.isEmpty() then return [] else
			let G1 = W35(L9.tail())
			let R0 = L9.head()
			let F4 = (function X3(P2,Q8,zZ){
				if zZ.isEmpty() then return [P2,Q8]
				let Dv = zZ.head()
				let At = (function h8(E,Q){
					if Q.isEmpty() then return E else h8(E*2 + Q.head(),Q.tail())
				})(0,toList(map(char-> char == '1',toString(Dv,2))))
				let AtP = (function h8(E,Q){
					if Q.isEmpty() then return E else h8(E*2 + Q.head(),Q.tail())
				})(0,toList(map(char-> char == '1',toString(P2,2))))
				return (At < AtP) ? X3(P2,Dv,zZ.tail()) : X3(Dv,Q8,zZ.tail())
			})(R0,G1.head(),G1.tail())
			return [R0].concat(G1) == [None,None] ? [] : (function insert_sorted(H){
				if H.isEmpty() then return [R0]
				else if (function bA(L) {
					let B = toList(map(c -> c == '1', toString(R0,2))); 
					let C = toList(map(c -> c == '1', toString(L,2)));
					return (function F(e,f){
						if e.isEmpty() then return 0 else (e.head() as Nat) + F(e.tail(),f)
					})(B) <= (function F(e,f){
						if f.isEmpty() then return 0 else (f.head() as Nat) + F(e,f.tail())
					})(C);
				})(H.head()) then [R0].concat(H) else [H.head()].concat(insert_sorted(H.tail()))
			})(W35(L9.tail()))
	end)(UwX)
END FUNCTION
```