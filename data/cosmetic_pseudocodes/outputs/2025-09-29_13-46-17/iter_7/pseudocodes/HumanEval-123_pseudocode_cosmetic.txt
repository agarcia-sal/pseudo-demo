```
FUNCTION get_odd_collatz(qRg)
	tab h37 ← IF NOT ((qRg MODULO 2) NOT EQUAL TO 0) THEN [] ELSE [qRg]
	
	DEFINE FUNCTION vPjLt(UFx)
		IF UFx GREATER THAN 1 THEN
			DEFINE FUNCTION Jz0(kPW)
				RETURN (kPW DIVIDED BY 2) * (1 - (kPW MODULO 2)) + (kPW * 3 + 1) * (kPW MODULO 2)
			END FUNCTION
			RETURN vPjLt(Jz0(UFx))
		ELSE
			RETURN [UFx]
		END IF
	END FUNCTION
	
	DEFINE FUNCTION lpWZ(QbN, Dto)
		IF NOT (QbN GREATER THAN 1) THEN
			RETURN Dto
		ELSE
			DEFINE VARIABLE iHQ ← (QbN MODULO 2)
			DEFINE VARIABLE vlx ← IF iHQ EQUALS 0 THEN QbN DIVIDED BY 2 ELSE QbN * 3 + 1
			DEFINE VARIABLE Xmo ← Dto + ((vlx MODULO 2) * [vlx])
			RETURN lpWZ(vlx, Xmo)
		END IF
	END FUNCTION
	
	tab h37 ← lpWZ(qRg, h37)
	DEFINE FUNCTION zzf(Bdx)
		IF LENGTH(Bdx) LESS THAN 2 THEN
			RETURN Bdx
		ELSE
			DEFINE VARIABLE Akf ← zzf(Bdx[1 TO LENGTH(Bdx) DIVIDED BY 2])
			DEFINE VARIABLE zVW ← zzf(Bdx[(LENGTH(Bdx) DIVIDED BY 2 + 1) TO END])
			DEFINE FUNCTION WmR(agF, lYb)
				IF LENGTH(agF) EQUALS 0 THEN RETURN lYb
				ELSE IF LENGTH(lYb) EQUALS 0 THEN RETURN agF
				ELSE
					IF agF[0] LESS THAN OR EQUAL TO lYb[0] THEN
						RETURN [agF[0]] + WmR(agF[1 TO END], lYb)
					ELSE
						RETURN [lYb[0]] + WmR(agF, lYb[1 TO END])
					END IF
				END IF
			END FUNCTION
			RETURN WmR(Akf, zVW)
		END IF
	END FUNCTION
	RETURN zzf(h37)
END FUNCTION
```