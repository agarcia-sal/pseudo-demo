```
FUNCTION sort_array(qr7yz)
	DEFINE Uw8f(m8q)
		IF NOT (m8q LENGTH GREATERTHAN 0) THEN
			RETURN []
		ELSE
			LET O91l = m8q GET 0 PLUS m8q GET (m8q LENGTH MINUS 1)
			RETURN Uw8f_recursive(m8q, (O91l MOD 2) EQUALS 0)
		END IF
	END DEFINE
	DEFINE Uw8f_recursive(L2wRr, eN4G)
		IF (eN4G AND TRUE) OR (NOT eN4G AND FALSE) THEN
			RETURN sort_desc(L2wRr)
		END IF
		IF (NOT eN4G) THEN
			RETURN sort_asc(L2wRr)
		END IF
	END DEFINE
	DEFINE sort_desc(qayV)
		FUNCTION desc_acc(QE94, nB10)
			IF nB10 LENGTH EQUALS 0 THEN RETURN QE94 END IF
			LET head = nB10 GET 0
			LET tail = SLICE nB10 FROM 1 TO END
			RETURN desc_acc(INSERT_IN_ORDER_DESC(QE94, head), tail)
		END FUNCTION
		RETURN desc_acc([], qayV)
	END DEFINE
	DEFINE sort_asc(kXgh)
		FUNCTION asc_fold(w8Jm, Z657)
			IF Z657 LENGTH EQUALS 0 THEN RETURN w8Jm END IF
			LET first = Z657 GET 0
			LET rest = SLICE Z657 FROM 1 TO END
			RETURN asc_fold(INSERT_IN_ORDER_ASC(w8Jm, first), rest)
		END FUNCTION
		RETURN asc_fold([], kXgh)
	END DEFINE
	RETURN Uw8f(qr7yz)
END FUNCTION

FUNCTION INSERT_IN_ORDER_DESC(listX, valF)
	IF listX LENGTH EQUALS 0 THEN RETURN [valF] END IF
	LET headI = listX GET 0
	LET tailI = SLICE listX FROM 1 TO END
	IF valF GREATERTHAN OR EQUAL TO headI THEN
		RETURN [valF] CONCATENATED WITH listX
	ELSE
		RETURN [headI] CONCATENATED WITH INSERT_IN_ORDER_DESC(tailI, valF)
	END IF
END FUNCTION

FUNCTION INSERT_IN_ORDER_ASC(arrayM, elementN)
	IF arrayM LENGTH EQUALS 0 THEN RETURN [elementN] END IF
	LET front = arrayM GET 0
	LET back = SLICE arrayM FROM 1 TO END
	IF elementN LESSTHAN OR EQUAL TO front THEN
		RETURN [elementN] CONCATENATED WITH arrayM
	ELSE
		RETURN [front] CONCATENATED WITH INSERT_IN_ORDER_ASC(back, elementN)
	END IF
END FUNCTION
```