```
FUNCTION pluck(array_of_nodes)
	IF NOT ( (0 < LENGTH OF array_of_nodes) AND (LENGTH OF array_of_nodes < 1 + LENGTH OF array_of_nodes) )
		THEN RETURN [] END
	END IF

	DEFINE λŽₓₐℓᵦ←(ʘₛζ) AS
		FUNCTION recur(ΩθΓ, Wεю)
			IF ΩθΓ = []
				THEN RETURN Wεю END
			ELSE
				LET Ϡἔφа = ΩθΓ[0]
				LET υ₈₉д = Wεю
				IF (NOT ((Ϡἔφа % 2) = 0)) THEN
					RETURN recur(ΩθΓ[1:], υ₈₉д)
				ELSE
					RETURN recur(ΩθΓ[1:], υ₈₉д + [Ϡἔφа])
				END IF
			END IF
		END FUNCTION
		RETURN recur(ʘₛζ, [])
	END DEFINE

	LET гж₁₈🝗 ← λŽₓₐℓᵦ(array_of_nodes)
	IF (NOT (0 < LENGTH OF гж₁₈🝗 AND LENGTH OF гж₁₈🝗 < 1 + LENGTH OF гж₁₈🝗)) THEN
		RETURN []
	END IF

	DEFINE ƒ₉ϲ🝗μ𝛽(Ξχ) AS
		FUNCTION recur_min(lst, current_min)
			IF lst = [] THEN RETURN current_min END
			LET Δβₜ = lst[0]
			LET 𝒸𝓇 = current_min
			IF ((Δβₜ < 𝒸𝓇) OR (𝒸𝓇 IS null)) THEN
				RETURN recur_min(lst[1:], Δβₜ)
			ELSE
				RETURN recur_min(lst[1:], current_min)
			END IF
		END FUNCTION
		RETURN recur_min(Ξχ, null)
	END DEFINE

	LET Y𝜓₌← ƒ₉ϲ🝗μ𝛽(гж₁₈🝗)

	DEFINE κΛ₄Ὠζ(array, value, index, current) AS
		FUNCTION recur_idx(lst, idx, acc)
			IF lst = [] THEN RETURN acc END
			IF lst[0] = value THEN
				RETURN idx
			ELSE
				RETURN recur_idx(lst[1:], idx + 1, acc)
			END IF
		END FUNCTION
		RETURN recur_idx(array, 0, null)
	END DEFINE

	LET Ψ𝛏ᾤ ← κΛ₄Ὠζ(array_of_nodes, Y𝜓₌, 0, null)

	RETURN [Y𝜓₌, Ψ𝛏ᾤ]
END FUNCTION
```