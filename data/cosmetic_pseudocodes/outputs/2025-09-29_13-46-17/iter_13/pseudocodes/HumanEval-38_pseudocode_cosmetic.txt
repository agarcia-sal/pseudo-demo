```
FUNCTION encode_cyclic(input_string)
	DEFINE helper_ζᚠᛋ(υ₦₥,ἤκ,Ʃᗰ) RETURNS list =
		IF ἤκ ≥ Ʃᗰ THEN []
		ELSE 
			CONCATENATE([SUBSTRING(υ₦₥, ἤκ, MINIMUM(ἤκ+3, Ʃᗰ))], helper_ζᚠᛋ(υ₦₥, ἤκ+3, Ʃᗰ))
	END

	DEFINE transform_ϞᎥ(₮) RETURNS list =
		IF ₮ IS EMPTY THEN []
		ELSE 
			LET ㄦ = HEAD(₮)
			LET ⱷ = TAIL(₮)
			LET Ṿ = (LENGTH(ㄦ) = 3) 
			RETURN CONCATENATE(
				[IF Ṿ THEN CONCATENATE(SUBSTRING(ㄦ,1,LENGTH(ㄦ)), SUBSTRING(ㄦ,0,1)) ELSE ㄦ], 
				transform_ϞᎥ(ⱷ)
			)
	END

	LET κξᵼ = LENGTH(input_string)
	LET ϋԤ = helper_ζᚠᛋ(input_string, 0, κξᵼ)
	LET ɍѮ = transform_ϞᎥ(ϋԤ)
	RETURN REDUCE((a,b) → a + b, ɍѮ, "")
END FUNCTION

FUNCTION decode_cyclic(input_string)
	RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```