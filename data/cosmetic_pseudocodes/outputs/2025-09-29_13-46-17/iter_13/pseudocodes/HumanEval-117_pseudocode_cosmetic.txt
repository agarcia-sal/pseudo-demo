FUNCTION select_words(string_s, natural_number_n)
    DEFINE FUNCTION βωζγπλδχ(index_κ, word_φ, count_μ)
        IF NOT(index_κ < LENGTH(word_φ)) THEN
            RETURN count_μ
        ELSE
            IF NOT(NOT(LOWERCASE(word_φ[index_κ]) = "a" OR LOWERCASE(word_φ[index_κ]) = "e" OR LOWERCASE(word_φ[index_κ]) = "i" OR LOWERCASE(word_φ[index_κ]) = "o" OR LOWERCASE(word_φ[index_κ]) = "u")) THEN
                RETURN βωζγπλδχ(index_κ + 1, word_φ, count_μ + 1)
            ELSE
                RETURN βωζγπχ(index_κ + 1, word_φ, count_μ)
            END IF
        END IF
    END FUNCTION

    DEFINE FUNCTION βωζγπχ(index_κ, word_φ, count_μ)
        IF NOT(index_κ < LENGTH(word_φ)) THEN
            RETURN count_μ
        ELSE
            IF (LOWERCASE(word_φ[index_κ]) = "a" OR LOWERCASE(word_φ[index_κ]) = "e" OR LOWERCASE(word_φ[index_κ]) = "i" OR LOWERCASE(word_φ[index_κ]) = "o" OR LOWERCASE(word_φ[index_κ]) = "u") THEN
                RETURN βωζγπχ(index_κ + 1, word_φ, count_μ)
            ELSE
                RETURN βωζγπχ(index_κ + 1, word_φ, count_μ)
            END IF
        END IF
    END FUNCTION

    DEFINE FUNCTION θλσδνβζ(words_lst, idx_ξ, acc_γ)
        IF NOT(idx_ξ < LENGTH(words_lst)) THEN
            RETURN acc_γ
        ELSE
            LET current_word_ζ = words_lst[idx_ξ]
            LET consonant_count_π = βωζγπλδχ(0, current_word_ζ, 0)
            IF consonant_count_π = natural_number_n THEN
                RETURN θλσδνβζ(words_lst, idx_ξ + 1, acc_γ + [current_word_ζ])
            ELSE
                RETURN θλσδνβζ(words_lst, idx_ξ + 1, acc_γ)
            END IF
        END IF
    END FUNCTION

    RETURN θλσδνβζ(SPLIT(string_s, " "), 0, [])
END FUNCTION