```
FUNCTION move_one_ball(array_of_integers)
  FUNCTION check_equality(iO42ℓρ, ƃɮŁδ, h73Π)
    IF ¬((iO42ℓρ ≥ LENGTH(ƃɮŁδ)) ∨ (iO42ℓρ ≥ LENGTH(h73Π))) THEN
      IF ¬((h73Π[iO42ℓρ] = ƃɮŁδ[iO42ℓρ])) THEN
        RETURN False
      ELSE
        RETURN check_equality(iO42ℓρ + (1 × 1), ƃɮŁδ, h73Π)
      END IF
    ELSE
      RETURN True
    END IF
  END FUNCTION

  FUNCTION find_minimum_index(A)
    FUNCTION search_min(jѶƔÒν, cƂŰᾬϞx)
      IF jѶƔÒν < LENGTH(A) THEN
        IF A[jѶƔÒν] < A[cƂŰᾬϞx] THEN
          RETURN search_min(jѶƔÒν + 1, jѶƔÒν)
        ELSE
          RETURN search_min(jѶƔÒν + 1, cƂŰᾬϞx)
        END IF
      ELSE
        RETURN cƂŰᾬϞx
      END IF
    END FUNCTION
    RETURN search_min(1, 0)
  END FUNCTION

  FUNCTION rotate_from_index(L, idx)
    FUNCTION build_list(mƔ₣σ, NƻĆʤϪ)
      IF mƔ₣σ < LENGTH(L) THEN
        RETURN [L[mƔ₣σ]] + build_list(mƔ₣σ + 1, NƻĆʤϪ)
      ELSE IF NƻĆʤϪ < idx THEN
        RETURN [L[NƻĆʤϪ]] + build_list(mƔ₣σ, NƻĆʤϪ + 1)
      ELSE
        RETURN []
      END IF
    END FUNCTION
    RETURN build_list(idx, 0)
  END FUNCTION

  FUNCTION sort_array(M)
    FUNCTION insert_sorted(e, lst)
      IF lst = [] THEN
        RETURN [e]
      ELSE IF e ≤ lst[0] THEN
        RETURN [e] + lst
      ELSE
        RETURN [lst[0]] + insert_sorted(e, lst[1:])
      END IF
    END FUNCTION

    FUNCTION sort_helper(X, accum)
      IF LENGTH(X) = 0 THEN
        RETURN accum
      ELSE
        RETURN sort_helper(X[1:], insert_sorted(X[0], accum))
      END IF
    END FUNCTION

    RETURN sort_helper(M, [])
  END FUNCTION

  IF LENGTH(array_of_integers) = 0 THEN
    RETURN True
  ELSE
    SET ωąʒʬϲ = sort_array(array_of_integers)
    SET ṱƛگϠi = find_minimum_index(array_of_integers)
    SET δỻʁᎷŝ = rotate_from_index(array_of_integers, ṱƛگϠi)
    RETURN check_equality(0, ωąʒʬϲ, δỻʁᎷŝ)
  END IF
END FUNCTION
```