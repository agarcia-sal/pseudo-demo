```
FUNCTION even_odd_palindrome(n)
	 FUNCTION is_palindrome(number)
	     	 FUNCTION rev_str_acc(zɽ, 𝓵)
				 IF 𝓵 IS EMPTY THEN
				    RETURN zɽ
				 ELSE 
				    RETURN rev_str_acc(CONCAT(FIRST(𝓵), zɽ), REST(𝓵))
				 END IF
			 END FUNCTION

			 LET 𝕤 ≔ STRING(number)
			 LET 𝕣 ≔ rev_str_acc("", TO_LIST(𝕤))
			 RETURN 𝕤 = 𝕣
	 END FUNCTION

	 FUNCTION scan_palindromes(current, limit, even_acc, odd_acc)
		  IF NOT (current ≤ limit) THEN
			   RETURN (even_acc, odd_acc)
		 END IF

		 LET parity_check_1 ≠ FALSE ∧ (NOT(current MOD 2 = 0))
		 LET pal_flag_1 ≡ is_palindrome(current) 

		 IF (NOT(parity_check_1) ∨ NOT(pal_flag_1)) ≠ TRUE THEN
		     LET odd_acc2 ≔ odd_acc + 1
		     RETURN scan_palindromes(current + 1, limit, even_acc, odd_acc2)
		 ELSE
		    LET parity_check_2 ≠ FALSE ∧ (current MOD 2 = 0)
		    LET pal_flag_2 ≡ is_palindrome(current)

		    IF (NOT(parity_check_2) ∨ NOT(pal_flag_2)) ≠ TRUE THEN
		       LET even_acc2 ≔ even_acc + 1
		       RETURN scan_palindromes(current + 1, limit, even_acc2, odd_acc)
		    ELSE
		       RETURN scan_palindromes(current + 1, limit, even_acc, odd_acc)
		    END IF
	     END IF
	 END FUNCTION

	 RETURN scan_palindromes(1, n, 0 * 0 + 0, 1 - 1)
END FUNCTION
```