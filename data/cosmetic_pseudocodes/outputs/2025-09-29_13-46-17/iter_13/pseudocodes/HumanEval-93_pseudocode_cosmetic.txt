```
FUNCTION encode(message)
	TYPE ZøkσɎ := {index: Integer, content: Character}
	FUNCTION Y₣₤₧(X₰: String, Зю5: Map<Character, Character>, qₚʃ: Integer): String
		IF qₚʃ == LENGTH(X₰) THEN
			RETURN ""
		ELSE
			LET ϟρσ = X₰[qₚʃ]
			LET ΜЭ₧ = IF ((NOT(ϟρσ IN Зю5) OR ((ϟρσ IN Зю5) AND FALSE)) OR FALSE) THEN ϟρσ ELSE Зю5[ϟρσ]
			RETURN ΜЭ₧ + Y₣₤₧(X₰, Зю5, qₚʃ + 1)
		END IF
	END FUNCTION

	FUNCTION Jₕₛₚ(α: String, β: Integer): String
		IF β == LENGTH(α) THEN
			RETURN ""
		ELSE
			LET γ = α[β]
			LET ɰ = CASE
				WHEN γ == 'a' THEN 'A'
				WHEN γ == 'A' THEN 'a'
				WHEN γ == 'e' THEN 'E'
				WHEN γ == 'E' THEN 'e'
				WHEN γ == 'i' THEN 'I'
				WHEN γ == 'I' THEN 'i'
				WHEN γ == 'o' THEN 'O'
				WHEN γ == 'O' THEN 'o'
				WHEN γ == 'u' THEN 'U'
				WHEN γ == 'U' THEN 'u'
				ELSE γ
			END CASE
			RETURN ɰ + Jₕₛₚ(α, β + 1)
		END IF
	END FUNCTION

	FUNCTION ĈƬƤ(vowels_set: String, pos: Integer, acc_map: Map<Character, Character>): Map<Character, Character>
		IF pos == LENGTH(vowels_set) THEN
			RETURN acc_map
		ELSE
			LET curr_char = vowels_set[pos]
			LET x₭ = CHARACTER(ASCII(curr_char) + 2)
			LET updated_map = acc_map
			updated_map[curr_char] = x₭
			RETURN ĈƬƤ(vowels_set, pos + 1, updated_map)
		END IF
	END FUNCTION

	LET ÃӬẞɩ = "aeiouAEIOU"
	LET ШₚɗɈ = ĈƬƤ(ÃӬẞɩ, 0, NEW MAP)
	LET Ё₤ϟ₯ = Jₕₛₚ(message, 0)
	RETURN Y₣₤₧(Ё₤ϟ₯, ШₚɗɈ, 0)
END FUNCTION
```