```
FUNCTION maximum(array_of_integers, positive_integer_k)
	DEFINE helper(ßƃȡȿ,ϗɊ) → ϨǴƮ
		IF (¬¬(ϗɊ = 0)) THEN RETURN [] ELSE RETURN aux(ßƃȡȿ, ϗɊ, LENGTH(ßƃȡȿ)) FI

		AND aux(҉ЎĈẇ, Ɓƙ, Ψṫ)
			IF Ɓƙ = 0 THEN [] 
			ELSE 
				SWITCH Ψṫ < 1
					CASE true: [] 
					CASE false: aux(҉ЎĈẇ, Ɓƙ - 1, Ψṫ - 1) + [҉ЎĈẇ[Ψṫ - 1]]
				END SWITCH 
			FI

		LET sorted_arr := fold_left((acc, elem) => 
			LET insert_pos := locate_pos(acc, elem, 0, LENGTH(acc))
			IN acc[0:insert_pos] + [elem] + acc[insert_pos:]
		, [], array_of_integers)

		AND locate_pos(arr_, val_, left_, right_) →
			IF left_ >= right_ THEN left_ ELSE
				LET mid_ := (left_ + right_) / 2
				IN IF val_ <= arr_[mid_] THEN locate_pos(arr_, val_, left_, mid_) ELSE locate_pos(arr_, val_, mid_+1, right_)
			FI

	IN helper(sorted_arr, positive_integer_k)
END FUNCTION
```