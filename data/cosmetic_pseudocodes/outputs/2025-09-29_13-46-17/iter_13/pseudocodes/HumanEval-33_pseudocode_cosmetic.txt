```
FUNctiON sort_third(list_input)
	DEF _ʞəʞο(reεΰnιǝs, τμoƖ) = 
		CASE
			| ([], _) -> []
			| (x::xs, 0) -> x :: _ʞəʞο(xs, 2)
			| (_::xs, n) -> _ʞəʞο(xs, n-1)
		ENDCASE
	DEF _ƨϯϞϛϝ(sortedQ, origL, idx) =
		WHEN idx < 0 THEN origL
		ELSE
			LET updatedL = IF idx % 3 == 0 THEN
				let rec replaceAt(l, pos, rep, acc)=
					CASE l OF
					| [] -> acc
					| h::t -> IF pos==0 THEN
						acc @ rep @ t
						ELSE replaceAt(t, pos-1, rep, acc @ [h])
					END
				in replaceAt(origL, idx, [sortedQ[0]], [])
			ELSE origL
			IN _ƨϯϞϛϝ(
				IF idx % 3 == 0 THEN tail(sortedQ) ELSE sortedQ,
				updatedL,
				idx - 1
			)
	ENDWHEN

	LET Jȶȷςʝ$list = [e ∈ list_input : TRUE] 
	LET Õεŭ𝜀ξlistɤ = _ʞəʞο(Jȶȷςʝ$list, 0)
	LET ɳӥβϠɬsortαЯɩɬ = _ƨϯϞϛϝ(
		(
			FUN SORT(l):
				CASE l OF
					| [] -> []
					| x::xs -> INSERT_IN_ORDER(x, SORT(xs))
				ENDCASE
			AND 
			FUN INSERT_IN_ORDER(val, scl):
				CASE scl OF
					| [] -> [val]
					| y::ys -> IF val <= y THEN val :: y :: ys ELSE y :: INSERT_IN_ORDER(val, ys)
				ENDCASE
			END FUN SORT
		)(Õεŭ𝜀ξlistɤ),
		Jȶȷςʝ$list,
		(LENGTH(Jȶȷςʝ$list) - 1)
	)

	RETURN ɳӥβϠɬsortαЯɩɬ
END FUNctiON
```