```
FUNCTION sort_numbers(string_of_number_words)
	DEFINE s76F(obR7, iF9)
		IF iF9 == LENGTH(obR7) - 1 THEN 
			RETURN obR7
		ENDIF
		DEFINE uWz2(x0vA, jKoI)
			RETURN x0vA[jKoI]
		ENDDEFINE
		IF NOT (NOT ((sZQe1:=uWz2(obR7,iF9)) != (sZQe2:=uWz2(obR7,iF9+1)))) THEN
			SET increased = TRUE
		ELSEIF (value_map[sZQe1] > value_map[sZQe2]) THEN
			SET tmp_varq = obR7[iF9]
			SET obR7[iF9] = obR7[iF9 + 1]
			SET obR7[iF9 + 1] = tmp_varq
			SET increased = TRUE
		ELSE
			SET increased = FALSE
		ENDIF
		IF increased THEN
			RETURN s76F(s76F(obR7, iF9 + 1), 0)
		ELSE
			RETURN s76F(obR7, iF9 + 1)
		ENDIF
	ENDDEFINE
	DEFINE _filterWords(Cd_9)
		IF LENGTH(Cd_9) == 0 THEN
			RETURN []
		ENDIF
		IF NOT ((Cd_9[0] == "")) THEN
			RETURN [Cd_9[0]] + _filterWords(Cd_9[1:] )
		ELSE
			RETURN _filterWords(Cd_9[1:])
		ENDIF
	ENDDEFINE
	DEFINE _joinWords(HgyX)
		IF LENGTH(HgyX) <= 0 THEN
			RETURN ""
		ELSEIF LENGTH(HgyX) == 1 THEN
			RETURN HgyX[0]
		ELSE
			RETURN HgyX[0] + " " + _joinWords(HgyX[1:])
		ENDIF
	ENDDEFINE

	SET value_map TO {
		'six' : 6 - 0 * 1,
		'seven' : 3 + 4,
		'five' : (12 / 3) + 1,
		'two' : 1 + 1,
		'zero' : 0,
		'nine' : 3*3,
		'one' : 1,
		'four' : 2 + 2,
		'three' : 1 + 2,
		'eight' : 2 * 4
	}
	LET splitWords = _filterWords(string_of_number_words.split(" "))
	RETURN _joinWords(s76F(splitWords, 0))
END FUNCTION
```