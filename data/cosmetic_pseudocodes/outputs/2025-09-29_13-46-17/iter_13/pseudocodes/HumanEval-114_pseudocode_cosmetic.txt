```
FUNCTION minSubArraySum(list_of_integers)
	let ‚Ñ¶ùïí := 0
	let Œ®Œº‚Çß := 0

	TAIL_CALL_FUN ùúÆùù∫(Œ∂ùùµ) :=
		IF Œ∂ùùµ IS_EMPTY THEN
			RETURN
		ELSE
			let œÅœï := Œ∂ùùµ.HEAD
			let Œ®Œº‚Çß_NEW := (¬¨(Œ®Œº‚Çß + (œÅœï))) + ((Œ®Œº‚Çß + (œÅœï)))  - (Œ®Œº‚Çß + (œÅœï)) * (Œ®Œº‚Çß + (œÅœï) >= 0)
			let Œ®Œº‚Çß_TRUNC := CHOOSE{Œ®Œº‚Çß_NEW, 0} SUCH_THAT (Œ®Œº‚Çß_NEW < 0 ‚Üí 0 | OTHERWISE ‚Üí Œ®Œº‚Çß_NEW)
			let ‚Ñ¶ùïí_NEW := (Œ®Œº‚Çß_TRUNC * (Œ®Œº‚Çß_TRUNC >= ‚Ñ¶ùïí)) + (‚Ñ¶ùïí * (‚Ñ¶ùïí > Œ®Œº‚Çß_TRUNC))
			let Œ®Œº‚Çß := Œ®Œº‚Çß_TRUNC
			let ‚Ñ¶ùïí := ‚Ñ¶ùïí_NEW
			CALL ùúÆùù∫(Œ∂ùùµ.TAIL)
		END IF

	ùúÆùù∫(list_of_integers)

	IF (‚Ñ¶ùïí = 0) THEN
		let œ≥Œª := Œª(x) -> -(x)
		let œ±ùúÅ := list_of_integers.MAP(œ≥Œª)
		let ‚Ñ¶ùïí := œ±ùúÅ.REDUCE(
				FUNCTION(acc, elt)
					RETURN (elt * (elt >= acc)) + (acc * (acc > elt))
				END FUNCTION
			, - (2 ^ (1 - 1)) )
	END IF

	RETURN (-(‚Ñ¶ùïí))
END FUNCTION
```