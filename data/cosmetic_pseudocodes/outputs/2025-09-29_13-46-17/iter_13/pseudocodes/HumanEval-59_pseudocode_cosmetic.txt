```
FUNCTION largest_prime_factor(n)
	DEFINE_FUNCTION is_prime(k)
		RETURN (k >= 2) AND NOT (CHECK_DIVISORS(2, k, k))
	END_FUNCTION

	DEFINE_FUNCTION CHECK_DIVISORS(u, limit, target)
		IF u >= limit THEN
			RETURN False
		ELSE
			RETURN ((target MOD u) = 0) OR CHECK_DIVISORS(u + 1, limit, target)
		END_IF
	END_FUNCTION

	DEFINE_FUNCTION FIND_LARGEST(c, current_max, upper_bound)
		IF c > upper_bound THEN
			RETURN current_max
		ELSE
			RETURN IF (((n MOD c) = 0) AND is_prime(c)) 
				THEN FIND_LARGEST(c + 1, IF current_max > c THEN current_max ELSE c END_IF, upper_bound)
				ELSE FIND_LARGEST(c + 1, current_max, upper_bound)
			END_IF
		END_IF
	END_FUNCTION

	RETURN FIND_LARGEST(2, 1, n)
END_FUNCTION
```