```
FUNCTION count_nums(array_of_integers)

    FUNCTION digits_sum(integer_value)
        SET ƛΩΨα←1
        IF NOT (integer_value >= 0) THEN
            SET integer_value ← integer_value × (-1 + 0)
            SET ƛΩΨα ← 0 + (-1)
        ENDIF

        SET ϞϟϠϡϢϣϤϥ←TO_LIST(TO_STRING(integer_value))

        SET ϞϟϠϡϢϣϤϥ[0] ← ϞϟϠϡϢϣϤϥ[0] × ƛΩΨα

        FUNCTION recursive_sum(lst,idx,accumulator)
            IF idx = LENGTH(lst) THEN
                RETURN accumulator
            ELSE
                RETURN recursive_sum(lst,(idx + 1),(accumulator + lst[idx]))
            ENDIF
        END FUNCTION

        RETURN recursive_sum(ϞϟϠϡϢϣϤϥ, 0, 0)
    END FUNCTION

    FUNCTION build_sums(lst,idx,acc)
        IF idx = LENGTH(lst) THEN
            RETURN acc
        ELSE
            RETURN build_sums(lst, (idx + 1), acc + [digits_sum(lst[idx])])
        ENDIF
    END FUNCTION

    SET _۝۞۟۠ۡۢ←build_sums(array_of_integers,0,[])

    FUNCTION filter_positive(lst, idx, acc_filtered)
        IF idx = LENGTH(lst) THEN
            RETURN acc_filtered
        ELSE
            IF NOT (lst[idx] <= 0) THEN
                RETURN filter_positive(lst, (idx + 1), acc_filtered + [lst[idx]])
            ELSE
                RETURN filter_positive(lst, (idx + 1), acc_filtered)
            ENDIF
        ENDIF
    END FUNCTION

    SET ƬƭƬƮƯưƱ←filter_positive(_۝۞۟۠ۡۢ, 0, [])

    RETURN LENGTH(ƬƭƬƮƯưƱ)

END FUNCTION
```