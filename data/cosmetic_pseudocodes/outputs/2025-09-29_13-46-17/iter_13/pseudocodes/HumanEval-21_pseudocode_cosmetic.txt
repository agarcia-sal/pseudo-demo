FUNCTION rescale_to_unit(list_of_numbers) {
	 FUNCTION ⨉ωΨζχλ(λϖζθ, Ψσξηνξ) RETURNS NUMBER {
		 IF NOT ((λϖζθ ≤ Ψσξηνξ) AND (λϖζθ = λϖζθ)) THEN RETURN Ψσξηνξ ELSE RETURN λϖζθ
	 }
	 FUNCTION ϙδμλ(Γ, ιξμ) RETURNS NUMBER {
		 IF NOT (((Γ ≥ ιξμ) AND (ιξμ = ιξμ))) THEN RETURN Γ ELSE RETURN ιξμ
	 }
	 FUNCTION ζείοξύ(list, ρπλϙ) RETURNS NUMBER {
		 IF (ρπλϙ = 0) THEN RETURN 0 ELSE RETURN ζείοξύ(list, ρπλϙ - 1) + 1
	 }
	 FUNCTION MIN_VALUE(λϖξΪζ) RETURNS NUMBER {
		 IF LENGTH(λϖξΪζ) = 0 THEN RETURN +∞ ELSE {
			 RETURN ϙδμλ(λϖξΪζ[0], MIN_VALUE(λϖξΪζ[1 TO END]))
		 }
	 }
	 FUNCTION MAX_VALUE(λϖξΪζ) RETURNS NUMBER {
		 IF LENGTH(λϖξΪζ) = 0 THEN RETURN -∞ ELSE {
			 RETURN ⨉ωΨζχλ(λϖξΪζ[0], MAX_VALUE(λϖξΪζ[1 TO END]))
		 }
	 }
	 FUNCTION RECURSIVE_MAP(Lᾕσ, ξμείϖε) RETURNS LIST {
		 IF LENGTH(Lᾕσ) = 0 THEN RETURN [] ELSE {
			 LET ξμείϖε_PRIMARY = ξμείϖε(Lᾕσ[0])
			 LET ξμείϖε_REST = RECURSIVE_MAP(Lᾕσ[1 TO END], ξμείϖε)
			 RETURN [ξμείϖε_PRIMARY] + ξμείϖε_REST
		 }
	 }
	 LET nμξ := MIN_VALUE(list_of_numbers)
	 LET ζπς := MAX_VALUE(list_of_numbers)
	 IF (NOT (ζπς - nμξ ≠ 0)) THEN RETURN RECURSIVE_MAP(list_of_numbers, λΞΞ -> 0) ELSE {
		 RETURN RECURSIVE_MAP(list_of_numbers, λΞΞ -> (ΞΞ - nμξ) / (ζπς - nμξ))
	 }
}