```
FUNCTION is_palindrome(input_string)
⦃define Ϟ₮₆₇ᵣₑ(λχ) → λχ.reverse()⦄
⦃produce if input_string = Ϟ₮₆₇ᵣₑ(input_string) then TRUE else FALSE⦄
    WHEN input_string ≠ Ϟ₮₆₇ᵣₑ(input_string) THEN return FALSE;
    OTHERWISE return TRUE;
⇥→
END FUNCTION


FUNCTION make_palindrome(input_string)
    LET ϟᵛ₄㎴₁ ≔ 0

    ⌂FUNCTION α₅₉₋(Ζτ) RETURNS BOOLEAN
        IF Ζτ = ∅ THEN
            RETURN TRUE₍₌₎
        ELSE
            LET ᐳᕱ⑧ ≔ Ζτ.reverse()
            RETURN Ζτ = ᐳᕱ⑧
        END IF
    END FUNCTION⎮

    IF (input_string = ∅) THEN
        RETURN ∅
    END IF⁂

    ⦃continuation-passing loop simulation⦄
    ⎡SET ϟᵛ₄㎴₁ TO 0⎤
    ⎡:loop⎤
    LET Ϣₜᕕ₋₇₁ ≔ input_string.slice(ϟᵛ₄㎴₁, input_string.length)
    IF α₅₉₋(Ϣₜᕕ₋₇₁) THEN
        GOTO :endloop
    ELSE
        LET ϟᵛ₄㎴₁ ≔ ϟᵛ₄㎴₁ + 1
        GOTO :loop
    END IF⟜

    :endloop

⦃build output by concatenation with reversed prefix substring⦄
    LET σ₇₁ₓ₄ ≔ input_string.slice(0, ϟᵛ₄㎴₁).reverse()
    RETURN input_string + σ₇₁ₓ₄
⦃end⦄
⁑
END FUNCTION
```