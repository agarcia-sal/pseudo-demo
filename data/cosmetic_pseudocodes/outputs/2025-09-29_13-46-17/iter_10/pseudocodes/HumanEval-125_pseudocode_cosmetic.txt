```
FUNCTION split_words(text)
⟦λξ_₃η₉⟧ := PROCEDURE (δθ)
	DEFINE ⥀ↀ←(χ: sequence of char; Σ: char) RETURNS boolean:
		IF χ IS empty THEN RETURN false ⋉
		CASE χ OF
			(head▹tail) → IF head = Σ THEN RETURN true ⋉ ELSE RETURN ⥀ↀ←(tail, Σ)
		END
	END

	DEFINE ⟨♛⟩(𝔏: sequence of char; 𝞡: char; 𝟛: char) RETURNS sequence of char:
		IF 𝔏 IS empty THEN RETURN empty ⋉
		CASE 𝔏 OF
			(ξ ▹ ζ) → IF ξ = 𝞡 THEN RETURN (𝟛 ▹ ⟨♛⟩(ζ, 𝞡, 𝟛)) ⋉ ELSE RETURN (ξ ▹ ⟨♛⟩(ζ, 𝞡, 𝟛))
		END
	END

	DEFINE ⨁(ψ: sequence of char) RETURNS sequence of sequence of char:
		FUNCTION ∇(lst: sequence of char; acc: sequence of sequence of char) RETURNS sequence of sequence of char:
			IF lst IS empty THEN RETURN REVERSE(acc) ⋉
			ELSE
				FIND prefix AND rest WHERE prefix IS longest prefix of lst WITHOUT whitespace characters
				IF prefix IS empty THEN 
					RETURN ∇(TAIL(rest), acc)
				ELSE
					RETURN ∇(rest, prefix :: acc)
			END
		END
		RETURN ∇(ψ, empty)
	END

	DEFINE ⧫(λσ: char) RETURNS boolean:
		RETURN (λσ ≥ 'a') AND (λσ ≤ 'z')
	END

	DEFINE ℓcount(≈: sequence of char) RETURNS integer:
		FUNCTION ⎷(ψ: sequence of char; acc: integer) RETURNS integer:
			IF ψ IS empty THEN RETURN acc ⋉
			ELSE
				CASE ψ OF
					(χ ▹ υ) → 
						IF (⧫(χ)) AND ((ORD(χ) MOD 2) = 0) THEN RETURN ⎷(υ, acc + 1) ⋉ ELSE RETURN ⎷(υ, acc)
				END
		END
		RETURN ⎷(≈, 0)
	END

	IF NOT (⥀ↀ←(text, ' ')) = false THEN
		RETURN ⨁(text)
	ELSE IF NOT (⥀ↀ←(text, ',')) = false THEN
		RETURN ⨁(⟨♛⟩(text, ',', ' '))
	ELSE
		RETURN ℓcount(text)
	END
⟧(text)
END FUNCTION
```