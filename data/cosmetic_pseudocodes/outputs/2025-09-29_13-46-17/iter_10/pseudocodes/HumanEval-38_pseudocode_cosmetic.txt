```
FUNCTION encode_cyclic(input_string)
  PROCEDURE λaζ(ξ, 𝛀, Ϟ)
	IF ξ = Ϟ THEN RETURN 𝛀 END IF
	RETURN λaζ(ξ + 1, 𝛀 ⨁ SUBSTRING(input_string, 3 * ξ, MIN(3 * ξ + 3, LENGTH(input_string))), Ϟ)
  END PROCEDURE
  LET ϟɣ ← (LENGTH(input_string) + 2) DIV 3
  LET ƛ𝚣 ← λaζ(0, [], ϟɣ)

  FUNCTION υς(ϲη)
    IF LENGTH(ϲη) ≠ 3 THEN RETURN ϲη ELSE RETURN SUBSTRING(ϲη, 2, LENGTH(ϲη)) ⨁ SUBSTRING(ϲη, 0, 1) END IF
  END FUNCTION

  PROCEDURE Ϟṙ(𝛉, 𝛂)
	IF 𝛉 = LENGTH(ƛ𝚣) THEN RETURN 𝛂 END IF
	RETURN Ϟṙ(𝛉 + 1, 𝛂 ⨁ [υς(ƛ𝚣[𝛉])])
  END PROCEDURE
  LET ḟσ ← Ϟṙ(0, [])

  RETURN FOLD_LEFT(CONCATENATE, "", ḟσ)
END FUNCTION

FUNCTION decode_cyclic(input_string)
  RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```