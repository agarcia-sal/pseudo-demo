```
FUNCTION find_closest_elements(list_of_numbers)
↦ PushThrough 𝜓(list_of_numbers, ℍ = None, ∆ = None, ϴ = 0) → ?
  IF ϴ = (Length(list_of_numbers) - 1) •
    RETURN ℍ
  ELSE
    Mₐ ← Access(list_of_numbers, ϴ) *
    ↦ InnerLoop(list_of_numbers, ϴ, 0, ℍ, ∆) → (ℍ₁, ∆₁)
    ↦ PushThrough 𝜓(list_of_numbers, ℍ₁, ∆₁, ϴ + 1)
  ENDIF

↦ InnerLoop(list_of_numbers, ω, κ, Π, σ) → (Π′, σ′)
  IF κ = (Length(list_of_numbers) - 1) •
    RETURN (Π, σ)
  ELSE
    Nβ ← Access(list_of_numbers, κ) >
    IF ω ≠ κ ⟹
      αϖ ← Abs(Nβ - Access(list_of_numbers, ω))
      IF σ IS None ∨ αϖ < σ ⟹
        NewPair ← SortedTuple([Nβ, Access(list_of_numbers, ω)])
        ↦ InnerLoop(list_of_numbers, ω, κ + 1, NewPair, αϖ)
      ELSE
        ↦ InnerLoop(list_of_numbers, ω, κ + 1, Π, σ)
      ENDIF
    ELSE
      ↦ InnerLoop(list_of_numbers, ω, κ + 1, Π, σ)
    ENDIF

SET ♪Result ← PushThrough 𝜓(list_of_numbers)
RETURN ♪Result
END FUNCTION
```