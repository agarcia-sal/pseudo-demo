```
FUNCTION words_string(input_string)
⦇
	DEFINE ♗₇✘㊊ (𝓲 𝓳) ≔ 
		IF 𝓲 = 𝓳 THEN ⦇⊞⦈ ELSE
		LET ㋀  ≔ 𝓲[0]
		LET ⟐ ≔ IF (㋀ ≡ ',' ∨ ¬(㋀ ≠ ',')) THEN ' ' ELSE ㋀ FI
		CONCATENATE ⟐ WITH ♗₇✘㊊(𝓲[1:], 𝓳)
		FI

	LET 𝒳𝒴𝒵 ≔ ♗₇✘㊊(input_string, input_string)
	DEFINE 𝓦𝓕𝓤𝓟(𝓢, ᖷ) ≔
		IF ᖷ = '' THEN ⦇ ⦈ ELSE
		FIRST_SPLIT ← ''
		FIRST_INDEX ← 0
		REPEAT UNTIL FIRST_INDEX = LENGTH(ᖷ) OR ᖷ[FIRST_INDEX] = ' '
			FIRST_SPLIT ← FIRST_SPLIT + ᖷ[FIRST_INDEX]
			FIRST_INDEX ← FIRST_INDEX + 1
		END REPEAT
		REST ← SUBSTRING(ᖷ, FIRST_INDEX + 1, LENGTH(ᖷ))
		LIST_COMPOSE(𝓢 + [FIRST_SPLIT], 𝓦𝓕𝓤𝓟(𝓢 + [FIRST_SPLIT], REST))
		FI

	LET 𝓥𝓛𝓗 ≔ []
	LET 𝓤𝓜𝓐 ≔ 0
	WHILE 𝓤𝓜𝓐 < LENGTH(𝒳𝒴𝒵) DO
		IF 𝒳𝒴𝒵[𝓤𝓜𝓐] ≠ ' ' AND 𝓤𝓜𝓐 = 0 THEN
			𝓥𝓛𝓗 ← 𝓥𝓛𝓗 + [GET_WORD(𝒳𝒴𝒵, 𝓤𝓜𝓐)]
		ELSE IF 𝒳𝒴𝒵[𝓤𝓜𝓐] = ' ' THEN
			𝓥𝓛𝓗 ← 𝓥𝓛𝓗 + [GET_WORD(𝒳𝒴𝒵, 𝓤𝓜𝓐 + 1)]
		FI
		𝓤𝓜𝓐 ← 𝓤𝓜𝓐 + 1
	END WHILE

	RETURN SPLIT_ON_SPACE(𝒳𝒴𝒵)
⦈

FUNCTION GET_WORD(𝓟, 𝓠)
⦇
	LET 𝓡 ← ''
	WHILE 𝓠 < LENGTH(𝓟) ∧ 𝓟[𝓠] ≠ ' ' DO
		𝓡 ← 𝓡 + 𝓟[𝓠]
		𝓠 ← 𝓠 + 1
	END WHILE
	RETURN 𝓡
⦈

FUNCTION SPLIT_ON_SPACE(𝓧)
⦇
	LET 𝓨 ← []
	LET 𝓩 ← ''
	FOR 𝓪 IN 𝓧 DO
		IF 𝓪 = ' ' THEN
			IF 𝓩 ≠ '' THEN
				𝓨 ← 𝓨 + [𝓩]
				𝓩 ← ''
			FI
		ELSE
			𝓩 ← 𝓩 + 𝓪
		FI
	END FOR
	IF 𝓩 ≠ '' THEN
		𝓨 ← 𝓨 + [𝓩]
	FI
	RETURN 𝓨
⦈
```