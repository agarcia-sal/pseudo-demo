```
FUNCTION move_one_ball(array_of_integers)∎
	DEFINE 𐓘(𝜙, 𐊚, 🜏)→𝜙≡🜏:IF 🜏=0:RETURN TRUE∎ELSEIF 𝜙=(𐊚≠🜏):RETURN FALSE∎ELSE:RETURN 𐓘(𝜙, 𐊚+1, 🜏-1)∎
	DEFINE ƶu_iw(☌)→χ∷=∅∴
		FOR ⥣ IN ☌∰:χ∷=χ∷∪{⥣}∎
		RETURN χ∷∎
	END∷
	DEFINE 𝜅_℧(ↄ)→Ϟ:
		Ϟ←ↄ⪦ↄ∉ↄ⪦ↄ⊟ↄ⪦0⇷
		RETURN Ϟ∎
	END
	DEFINE ᴥ_ɲ₈(ɬ, ᴔ)→Ṣ:
		Ṣ←[]
		FOR ⨳₀ FROM ᴔ TO LENGTH(ɬ)-1∷
			Ặ₇=(ɬ[⨳₀])∷PUSH Ṣ(Ặ₇)∎
		FOR ⨳₁ FROM 0 TO ᴔ-1∷
			Ặ₈=ɬ[⨳₁]∷PUSH Ṣ(Ặ₈)∎
		RETURN Ṣ∎
	END
	DEFINE ⧬⩐(⃝, Ḻ, ⸎)→Ԁ:
		Ԁ←TRUE
		𝐉←0
		WHILE 𝐉≠LENGTH(⃝)∷
			IF 𐌀←⃝[𝐉]≠Ḻ[𝐉]∷
				Ԁ←FALSE∷BREAK∷
			𝐉←𝐉+1∎
		RETURN Ԁ∎
	END
	IF LENGTH(array_of_integers) = 0
		RETURN True∎
	ENDIF∎
	LET ʚʭ = array_of_integers
	DEFINE ᑎf(ψ)→σ:
		IF LENGTH(ψ) ≤ 1 RETURN ψ
		LET 𐫸= LENGTH(ψ) DIV 2
		LET lft=ᑎf(ψ[0 TO 𐫸-1])
		LET rgt=ᑎf(ψ[𐫸 TO LENGTH(ψ)-1])
		RETURN merge(lft, rgt)
	END
	DEFINE merge(A,B)→M:
		LET M=[]
		LET i=0, j=0
		WHILE i < LENGTH(A) AND j < LENGTH(B)
			IF A[i] ≤ B[j]
				APPEND A[i] TO M
				i ← i + 1
			ELSE
				APPEND B[j] TO M
				j ← j + 1
		WHILE i < LENGTH(A)
			APPEND A[i] TO M
			i ← i + 1
		WHILE j < LENGTH(B)
			APPEND B[j] TO M
			j ← j + 1
		RETURN M
	END
	LET sorted_array=ᑎf(ʚʭ)
	LET min_el=array_of_integers[0]
	LET min_idx=0
	DEFINE search_min(ξ, pos, best_val, best_pos)→res:
		IF pos = LENGTH(ξ) RETURN best_pos
		IF ξ[pos] < best_val RETURN search_min(ξ, pos+1, ξ[pos], pos)
		ELSE RETURN search_min(ξ, pos+1, best_val, best_pos)
	END
	LET minimum_index=search_min(array_of_integers, 1, min_el, min_idx)
	LET rotated_array=ᴥ_ɲ₈(array_of_integers, minimum_index)
	RETURN ⧬⩐(rotated_array, sorted_array, LENGTH(array_of_integers))
END FUNCTION
```