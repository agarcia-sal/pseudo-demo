```
FUNCTION separate_paren_groups(string_of_parentheses)
→ Ωƒᾭ ⇐ ∅
→ ϴɓζ ⇐ ∅
→ Ǥᵫ ⇐ 0

→ ╥ (λ Ϟ → 
    ⟦ Ϟ ≠ '(' ∧ Ϟ ≠ ')' ⟧ ? separate_paren_groups.sub1(Ωƒᾭ, ϴɓζ, Ǥᵫ, Ϟ) :
    (Ϟ = '(' ? separate_paren_groups.sub2(Ωƒᾭ, ϴɓζ, Ǥᵫ, Ϟ) : separate_paren_groups.sub3(Ωƒᾭ, ϴɓζ, Ǥᵫ, Ϟ))
  ) (fold_left(string_of_parentheses, Ωƒᾭ, ϴɓζ, Ǥᵫ))

↦ Ωƒᾭ

WHERE
sub1(Σ, Ξ, Δ, Ϟ) ≜ (Σ, Append(Ξ, Ϟ), Δ)
sub2(Σ, Ξ, Δ, Ϟ) ≜ 
  (Δ₁ ← Δ + 1;
   Ξ₁ ← Append(Ξ, Ϟ);
   (Σ, Ξ₁, Δ₁))
sub3(Σ, Ξ, Δ, Ϟ) ≜ 
   Δ₁ ← Δ - 1;
   Ξ₁ ← Append(Ξ, Ϟ);
   β₁ ← (Δ₁ = 0);
   γ ← (β₁ ? Append(Σ, StringJoin(Ξ₁)) : Σ);
   θ ← (β₁ ? [] : Ξ₁);
   (γ, θ, Δ₁)

fold_left(Σ, acc₁, acc₂, acc₃) ≜
   IF Σ = [] THEN (acc₁, acc₂, acc₃)
   ELSE 
       (hd, tl) ← (Head(Σ), Tail(Σ));
       (acc₁ₙ, acc₂ₙ, acc₃ₙ) ← separate_paren_groups.sub_dispatch(acc₁, acc₂, acc₃, hd);
       fold_left(tl, acc₁ₙ, acc₂ₙ, acc₃ₙ)

sub_dispatch(Σ, Ξ, Δ, Ϟ) ≜ 
    IF Ϟ = '(' THEN sub2(Σ, Ξ, Δ, Ϟ)
    ELSE IF Ϟ = ')' THEN sub3(Σ, Ξ, Δ, Ϟ)
    ELSE sub1(Σ, Ξ, Δ, Ϟ)
```