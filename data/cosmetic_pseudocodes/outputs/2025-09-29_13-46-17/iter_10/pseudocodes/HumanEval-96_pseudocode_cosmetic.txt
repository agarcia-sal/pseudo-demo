```
FUNCTION count_up_to(n)
  DEFINE ζ₈ᶻₗ₉(i:Int, x:Set) → Set
    IF i = 2 THEN
      RETURN x
    ELSE
      DEFINE recursive_check(k:Int, flag:Bool) → Bool
        IF k = 2 THEN
          RETURN flag
        ELSE
          IF NOT flag THEN
            RETURN False
          ELSE
            IF (i MOD (k - 1)) = 0 THEN
              RETURN False
            ELSE
              RETURN recursive_check(k - 1, flag)
            END IF
          END IF
        END IF
      END DEFINE
      LET updated_flag = recursive_check(i, True)
      IF updated_flag THEN
        RETURN ζ₈ᶻₗ₉(i - 1, x ∪ {i - 1})
      ELSE
        RETURN ζ₈ᶻₗ₉(i - 1, x)
      END IF
    END IF
  END DEFINE
  LET result_set = ζ₈ᶻₗ₉(n, {})
  LET primes_list = []
  DEFINE flatten_set(s:Set, acc:List) → List
    IF s IS EMPTY THEN
      RETURN acc
    ELSE
      LET elem = ANY_ELEMENT_FROM(s)
      RETURN flatten_set(s \ {elem}, acc + [elem])
    END IF
  END DEFINE
  RETURN flatten_set(result_set, primes_list)
ENDFUNCTION
```