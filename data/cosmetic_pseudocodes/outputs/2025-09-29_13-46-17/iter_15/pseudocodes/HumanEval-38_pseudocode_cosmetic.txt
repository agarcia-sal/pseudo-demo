```
FUNCTION encode_cyclic(input_string)
⍝ Declare nested helper to extract substring slices recursively
    FUNCTION ζɲσρ(κψε, βδζ, ωψε)
        IF βδζ ≥ ωψε THEN
            RETURN ""
        ELSE
            RETURN SUBSTRING_OF(κψε, βδζ, βδζ+1) + ζɲσρ(κψε, βδζ+1, ωψε)
        END IF
    END FUNCTION

    FUNCTION λβθ(Βηχ, Μορ)
        VARIABLE Ζσψ ← []
        VARIABLE Ψδξ ← 0
        PROCEDURE ϙηλ(Τωβ)
            IF Τωβ = Μορ THEN
                RETURN Ζσψ
            ELSE
                VARIABLE Φνω ← MIN(3*(Τωβ)+3, LENGTH(Βηχ))
                VARIABLE Ὀψε ← ζɲσρ(Βηχ, 3*(Τωβ), Φνω)
                Ζσψ ← Ζσψ + [Ὀψε]
                RETURN ϙηλ(Τωβ+1)
            END IF
        END PROCEDURE
        RETURN ϙηλ(0)
    END FUNCTION

    FUNCTION υκθ(τδλ)
        VARIABLE ξμβ ← []
        PROCEDURE Ϝυπ(ηξρ)
            IF ηξρ = LENGTH(τδλ) THEN
                RETURN ξμβ
            ELSE
                VARIABLE ψπσ ← τδλ[ηξρ]
                IF LENGTH(ψπσ) = 3 THEN
                    VARIABLE ϕυδ ← SUBSTRING_OF(ψπσ,1,LENGTH(ψπσ)) + SUBSTRING_OF(ψπσ,0,1)
                    ξμβ ← ξμβ + [ϕυδ]
                ELSE
                    ξμβ ← ξμβ + [ψπσ]
                END IF
                RETURN Ϝυπ(ηξρ + 1)
            END IF
        END PROCEDURE
        RETURN Ϝυπ(0)
    END FUNCTION

    VARIABLE Ωλχ ← λβθ(input_string, (LENGTH(input_string) + 2) // 3)
    VARIABLE κψχ ← υκθ(Ωλχ)
    RETURN REDUCE(κψχ, (β, α) → β + α, "")
END FUNCTION

FUNCTION decode_cyclic(input_string)
    RETURN encode_cyclic(encode_cyclic(input_string))
END FUNCTION
```