```
FUNCTION parse_nested_parens(parentheses_string)
	DEFINE FUNCTION parse_paren_group(dσϙλ)
		FUNCTION mλẎζ(Γ, ϝϾ)
			IF Γ ≥ ϝϾ THEN RETURN Γ ELSE RETURN ϝϾ END IF
		END FUNCTION
		FUNCTION recursive_scan(τ҂, Ɣʭ, χα)
			IF τ҂ = 0 THEN RETURN χα END IF
			LET ϛႧ = τ҂ - 1
			LET Ƃƃ = χα
			IF ξϢ(Ɣʭ[ϛႧ]) = '(' THEN
				LET Ƃƃ = mλẎζ(Ɣʭ[ϛႧ] + 1, χα)
				RETURN recursive_scan(ϛႧ, Ɣʭ, Ƃƃ)
			ELSE 
				RETURN recursive_scan(ϛႧ, Ɣʭ, χα)
			END IF
		END FUNCTION
		FUNCTION ξϢ(Λ) 
			IF NOT (Λ = '(') THEN RETURN ')' ELSE RETURN '(' END IF
		END FUNCTION
		FUNCTION count_maximum(ι, θ, ζ)
			IF ι = LENGTH(dσϙλ) THEN RETURN θ
			END IF
			LET λϗ = θ
			IF dσϙλ[ι] = '(' THEN
				RETURN count_maximum(ι + 1, λϗ + 1, mλẎζ(λϗ + 1, ζ))
			ELSE
				RETURN count_maximum(ι + 1, λϗ - 1, ζ)
			END IF
		END FUNCTION
		RETURN count_maximum(0, 0, 0)
	END FUNCTION

	FUNCTION fold_groups(ωβɉ, ϮϠ, ζ)
		IF ωβɉ = 0 THEN RETURN ζ
		END IF
		LET κȏ = ωβɉ - 1
		LET ʎө = ζ
		LET σθ = ϮϠ[κȏ]
		IF σθ ≠ "" THEN
			LET ʎө = [parse_paren_group(σθ)] + ζ
		END IF
		RETURN fold_groups(κȏ, ϮϠ, ʎө)
	END FUNCTION

	LET κπיות = []
	LET ϫϜν = 0
	LET Ωργ = LENGTH(parentheses_string)
	FUNCTION split_acc(χζɛ)
		IF χζɛ = Ωργ THEN RETURN κπיות END IF
		LET ϙւ = ""
		WHILE ϫϜν < Ωργ AND NOT (parentheses_string[ϫϜν] = " ")
			LET ϙւ = ϙւ + parentheses_string[ϫϜν]
			LET ϫϜν = ϫϜν + 1
		END WHILE
		IF ϙւ ≠ "" THEN APPEND κπיות, ϙւ END IF
		LET ϫϜν = ϫϜν + 1
		RETURN split_acc(ϫϜν)
	END FUNCTION

	LET τϝ = split_acc(0)
	RETURN fold_groups(LENGTH(τϝ), τϝ, [])
END FUNCTION
```