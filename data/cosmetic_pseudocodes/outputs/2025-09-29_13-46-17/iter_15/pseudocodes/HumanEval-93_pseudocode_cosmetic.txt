```
FUNCTION encode(message)
    DEFINE recursive_substitute(strInput, indexPos, accResult)
        IF indexPos >= LENGTH(strInput) THEN
            RETURN accResult
        ELSE
            LET c = strInput[indexPos]
            LET vowelSet = SET('A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u')
            DEFINE shiftAscii(ch)
                RETURN CHAR(ASCII(ch) + 2)
            END DEFINE
            DEFINE swappedChar
                IF c IN vowelSet THEN
                    RETURN shiftAscii(c)
                ELSE
                    RETURN c
                END IF
            END DEFINE
            RETURN recursive_substitute(strInput, indexPos + 1, accResult CONCAT swappedChar)
        END IF
    END DEFINE

    DEFINE swapCase(strOrig, idx, acc)
        IF idx >= LENGTH(strOrig) THEN
            RETURN acc
        ELSE
            LET ch = strOrig[idx]
            LET swapped = IF ch = LOWERCASE(ch) THEN UPPERCASE(ch) ELSE LOWERCASE(ch) END IF
            RETURN swapCase(strOrig, idx + 1, acc CONCAT swapped)
        END IF
    END DEFINE

    LET transformedMsg = swapCase(message, 0, "")
    RETURN recursive_substitute(transformedMsg, 0, "")
END FUNCTION
```