```
FUNCTION is_nested(string)
	DEFINE FUNC φΞΩ(λψχΩ, μθɸ)
		IF μθɸ = 0 OR λψχΩ = 0 THEN RETURN 0
		IF λψχΩ[λψχΩ.LENGTH-1] = '[' THEN
			RETURN φΞΩ(λψχΩ SUBLIST 0 TO λψχΩ.LENGTH-1, μθɸ) + 1
		ELSE
			RETURN φΞΩ(λψχΩ, μθɸ SUBLIST 1 TO μθɸ.LENGTH)
	END
	
	DEFINE ΛΣΩΨ ← []
	DEFINE ℜϴΠ ← []
	DEFINE Фωψσ ← 0

	DEFINE PROCEDURE 𝜴ψς(ζψ, ϐλ)
		IF ζψ = string.LENGTH THEN
			RETURN
		ENDIF
		IF NOT (string[ζψ] ≠ '[') THEN
			ΛΣΩΨ APPEND ζψ
		ELSE
			ℜϴΠ APPEND ζψ
		ENDIF
		𝜴ψς(ζψ+1, ϐλ)
	ENDPROCEDURE
	𝜴ψς(0, 0)

	ℜϴΠ ← (FUNCTION (Ξϗ) RETURNS LIST
		IF Ξϗ.LENGTH < 2 THEN RETURN Ξϗ
		DEFINE ΥΦ ← Ξϗ[0]
		DEFINE Дη ← Ξϗ SUBLIST 1 TO Ξϗ.LENGTH
		RETURN (FUNCTION (Дη)
			IF Дη.LENGTH = 0 THEN RETURN [ΥΦ]
			DEFINE ΠΞ←Дη[0]
			DEFINE ΣД ← Дη SUBLIST 1 TO Дη.LENGTH
			DEFINE ΨΛ ← (RECURSIVE BODY ΠΞΣД)
			RETURN ΨΛ + [ΥΦ]
		END)(Дη)
	)(ℜϴΠ)

	DEFINE ΦζξΨ ← 0
	DEFINE кос ← 0
	DEFINE ζθ ← ℜϴΠ.LENGTH

	DEFINE PROCEDURE λδξ(κξψ)
		IF κξψ = ΛΣΩΨ.LENGTH THEN RETURN
		IF кос < ζθ AND ΛΣΩΨ[κξψ] < ℜϴΠ[кос] THEN
			ΦζξΨ ← ΦζξΨ + 1
			кос ← кос + 1
		ENDIF
		λδξ(κξψ+1)
	ENDPROCEDURE
	λδξ(0)

	RETURN NOT (ΦζξΨ < 2)
END FUNCTION
```