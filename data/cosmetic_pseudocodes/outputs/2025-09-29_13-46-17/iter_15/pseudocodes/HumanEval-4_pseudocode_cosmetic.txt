```
FUNCTION mean_absolute_deviation(list_of_numbers)
	DEFINE recur_accum(idx_λ, acc_ϕ)
		IF NOT (idx_λ < LENGTH OF list_of_numbers) THEN
			RETURN acc_ϕ
		ELSE
			LET current_ω ← list_of_numbers[idx_λ]
			RETURN recur_accum(idx_λ + 1, acc_ϕ + current_ω)
		END IF
	END DEFINE

	DEFINE recur_abs_sum(idx_Ψ, acc_π, mean_θ)
		IF idx_Ψ >= LENGTH OF list_of_numbers THEN
			RETURN acc_π
		END IF

		LET element_𝛿 ← list_of_numbers[idx_Ψ]
		LET raw_diff_ζ ← element_𝛿 - mean_θ
		LET abs_diff_η ← IF raw_diff_ζ < 0 THEN -raw_diff_ζ ELSE raw_diff_ζ END IF

		RETURN recur_abs_sum(idx_Ψ + 1, acc_π + abs_diff_η, mean_θ)
	END DEFINE

	LET n_ℵ ← LENGTH OF list_of_numbers
	IF n_ℵ = 0 THEN RETURN 0 END IF

	LET sum_total_β ← recur_accum(0, 0)
	LET mean_μ ← sum_total_β / n_ℵ

	LET absolute_total_γ ← recur_abs_sum(0, 0, mean_μ)
	LET mad_val_Ω ← absolute_total_γ / n_ℵ

	RETURN mad_val_Ω
END FUNCTION
```