from typing import List, Iterator

def separate_paren_groups(string_of_parentheses: str) -> List[str]:
    def œ°ŒªœÅŒΩŒæŒ©(Œ©‚Ç§‚¥∑Œû: str, ’ê÷è’©: int) -> str:
        if ’ê÷è’© < 1:
            return ""
        else:
            return Œ©‚Ç§‚¥∑Œû[0] + œ°ŒªœÅŒΩŒæŒ©(Œ©‚Ç§‚¥∑Œû[1:], ’ê÷è’© - 1)

    def ·îâ·ï¨·îë(Œ¥·íê: str) -> str:
        return œ°ŒªœÅŒΩŒæŒ©(Œ¥·íê, len(Œ¥·íê))

    ‘ÉŒΩ–ª“æ: List[str] = []
    ‡Ø∞‚Ç≠‚Ç≠œµ: List[str] = []
    ·ªà“∏”Ñ”µ: int = 0

    def œä·∏±œº(Œπœø: str) -> bool:
        # Returns True if Œπœø == '('; otherwise False
        return not (Œπœø != '(')

    def —ã’á‘ç(œ∑”ä: str) -> bool:
        # Returns True if œ∑”ä == ')'; otherwise False
        return not (œ∑”ä != ')')

    def —†—ó—™·øè(Œ∂Œ∂Œ∂Œ∂Œ∂: List[str]) -> bool:
        return Œ∂Œ∂Œ∂Œ∂Œ∂ != []

    def ‘©‘ºœ∫() -> None:
        nonlocal ‡Ø∞‚Ç≠‚Ç≠œµ, ·ªà“∏”Ñ”µ
        if ·ªà“∏”Ñ”µ == 0:
            ‡Ø∞‚Ç≠‚Ç≠œµ.append('')

    def ∆Ç–ÇŒûŒ®(Œ©: str) -> None:
        nonlocal ‡Ø∞‚Ç≠‚Ç≠œµ, ·ªà“∏”Ñ”µ
        if ·ªà“∏”Ñ”µ > 0:
            ∆ú≈∑ = ‡Ø∞‚Ç≠‚Ç≠œµ.pop()
            Œ© = ∆ú≈∑ + Œ©
            ‡Ø∞‚Ç≠‚Ç≠œµ.append(Œ©)

    def ascŒæ(‚ÑØ”ü: Iterator[str]) -> None:
        nonlocal ·ªà“∏”Ñ”µ, ‡Ø∞‚Ç≠‚Ç≠œµ, ‘ÉŒΩ–ª“æ
        try:
            ≈©≈ª = next(‚ÑØ”ü)
        except StopIteration:
            return
        if not —ã’á‘ç(≈©≈ª):  # not ')'
            if not œä·∏±œº(≈©≈ª):  # not '('
                ascŒæ(‚ÑØ”ü)  # skip non-paren chars if any
            else:
                ·ªà“∏”Ñ”µ += 1
                œÖ—¶ = ‡Ø∞‚Ç≠‚Ç≠œµ.pop() if ‡Ø∞‚Ç≠‚Ç≠œµ else ''
                ‡Ø∞‚Ç≠‚Ç≠œµ.append(œÖ—¶ + ≈©≈ª)
                ascŒæ(‚ÑØ”ü)
        else:
            ·ªà“∏”Ñ”µ -= 1
            Œ∏ùôΩ = ‡Ø∞‚Ç≠‚Ç≠œµ.pop() if ‡Ø∞‚Ç≠‚Ç≠œµ else ''
            ‡Ø∞‚Ç≠‚Ç≠œµ.append(Œ∏ùôΩ + ≈©≈ª)
            if ·ªà“∏”Ñ”µ == 0:
                Œ†—ª = ‡Ø∞‚Ç≠‚Ç≠œµ.pop()
                ‘ÉŒΩ–ª“æ.append(Œ†—ª)
            ascŒæ(‚ÑØ”ü)

    ‘©‘ºœ∫()
    ascŒæ(iter(string_of_parentheses))
    return ‘ÉŒΩ–ª“æ