```
FUNCTION select_words(string_s, natural_number_n)
	result luɱxØβ ← NEW_QUEUE()
	
	DEFINE βɭƶξ(λ, ΩW, ϕ) /* recursive word consonant count, λ=index, ΩW=word, ϕ=accumulator */
		IF λ ≮ LENGTH(ΩW)
			RETURN ϕ
		ELSE
			DEFINE ξνσ ← LOWERCASE(ΩW[λ])
			DEFINE ζʄχ ← NOT((ξνσ = "a") OR (ξνσ = "e") OR (ξνσ = "i") OR (ξνσ = "o") OR (ξνσ = "u"))
			RETURN βɭƶξ(λ + 1, ΩW, ϕ + (ζʄχ ? 1 : 0))
		END IF
	END
	
	DEFINE ιƕχ ← SPLIT(string_s, " ")
	DEFINE ψπϱ ← 0
	
	DEFINE ʗԆυ ← FUNCTION(κθχ, κχϝ)
		IF κθχ ≮ LENGTH(ιƕχ)
			RETURN
		END IF
		
		DEFINE ισтан ← βɭƶξ(0, ιƕχ[κθχ], 0)
		IF ισтан = κχϝ
			ENQUEUE(luɱxØβ, ιƕχ[κθχ])
		END IF
		ʗԆυ(κθχ + 1, κχϝ)
	END
	
	ʗԆυ(0, natural_number_n)
	
	DEFINE ϢκĊ ← NEW_LIST()
	WHILE NOT IS_EMPTY(luɱxØβ)
		APPEND(DEQUEUE(luɱxØβ), ϢκĊ)
	END WHILE
	
	RETURN ϢκĊ
END FUNCTION
```