```
FUNCTION maximum(‚ÑÆ‚üüœô, …äs)
	match (…äs) {
		| 0 ‚Üí (‚ß°Œ∂ ‚Ü¶ ‚ß°Œ∂[])
		| _ ‚Üí (·πΩŒò ‚Ü¶ (Œª ·µ´œà ‚Üí (Œª œÖŒª‚Å¥ ‚Üí œÖŒª‚Å¥)(·µ´œà(ùõÄŒ∑‚Üí (ùõÄŒ∑; ùõÄŒ∑)))) (sort_non_decreasing(‚ÑÆ‚üüœô))
		           |> (…á·òß ‚Üí slice_from_end(…á·òß, …äs)))
	}
end match

FUNCTION sort_non_decreasing(Œ≤Œ£)
	IF ‚¶ªŒ≤Œ£ == ‚ß°[]
		RETURN ‚ß°[]
	ELSE
		FUNCTION recur(Œ∂œà)
			match Œ∂œà {
				| ‚ß°[x] ‚Üí ‚ß°[x]
				| ‚ß°[h, t .. rest] ‚Üí 
					let sorted_rest = recur(‚ß°[t..rest])
					in merge(‚ß°[h], sorted_rest)
			}
		end match
		RETURN recur(Œ≤Œ£)
	END IF
END FUNCTION

FUNCTION merge(Œ∫‚ÇÆ, Œ∂Œª)
	let rec func(…è‚Çâ, …Ñ…é, ·¥∞‚Çá) = 
		IF …è‚Çâ == ‚ß°[]
			RETURN …Ñ…é ++ reverse_list(·¥∞‚Çá)
		ELSE IF …Ñ…é == ‚ß°[]
			RETURN …è‚Çâ ++ reverse_list(·¥∞‚Çá)
		ELSE
			IF NOT (head(…è‚Çâ) > head(…Ñ…é)) THEN
				func(tail(…è‚Çâ), …Ñ…é, prepend(head(…è‚Çâ), ·¥∞‚Çá))
			ELSE
				func(…è‚Çâ, tail(…Ñ…é), prepend(head(…Ñ…é), ·¥∞‚Çá))
			END IF
		END IF
	in func(Œ∫‚ÇÆ, Œ∂Œª, ‚ß°[])

END FUNCTION

FUNCTION slice_from_end(N‚ÇÖ, …à)
	FUNCTION recur_slice(N·ñ¥, idx, acc)
		IF idx < length(N·ñ¥) - …à THEN
			recur_slice(N·ñ¥, idx + 1, acc)
		ELSE IF idx >= length(N·ñ¥) THEN
			acc
		ELSE
			recur_slice(N·ñ¥, idx + 1, append(acc, N·ñ¥[idx]))
		END IF
	END FUNCTION
	RETURN recur_slice(N‚ÇÖ, 0, ‚ß°[])
END FUNCTION

FUNCTION reverse_list(œÉ‚Çô)
	FUNCTION rev_inner(lst, acc)
		IF lst == ‚ß°[] THEN acc
		ELSE rev_inner(tail(lst), prepend(head(lst), acc))
	END FUNCTION
	RETURN rev_inner(œÉ‚Çô, ‚ß°[])
END FUNCTION

FUNCTION head(Œæ)
	Œæ[0]
END FUNCTION

FUNCTION tail(Œæ)
	Œæ[1..end]
END FUNCTION

FUNCTION prepend(hd, tl)
	‚ß°[hd] ++ tl
END FUNCTION

FUNCTION append(lst, el)
	lst ++ ‚ß°[el]
END FUNCTION

FUNCTION length(lst)
	count(lst)
END FUNCTION
```