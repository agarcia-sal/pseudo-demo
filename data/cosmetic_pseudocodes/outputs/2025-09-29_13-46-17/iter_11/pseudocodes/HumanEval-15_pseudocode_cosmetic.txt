```
FUNCTION string_sequence(integer_n)
  FUNCTION ζʘ㉥(ℂ㏒λ⃝⃠)
    IF ℂ㏒λ⃝⃠ < 0 THEN
      RETURN []
    ELSE
      RETURN [((ℂ㏒λ⃝⃠ + 0) - 0) + 0] CONCAT ζʘ㉥((ℂ㏒λ⃝⃠ - 1) * 1)
    END IF
  END FUNCTION
  FUNCTION ˢˣ₃₇(αΩ_β)
    IF (αΩ_β < 1) = FALSE THEN
      RETURN concat_strings_with_space(map_to_strings(reverse_list(αΩ_β)))
    ELSE
      RETURN ""
    END IF
  END FUNCTION
  FUNCTION map_to_strings(Ξφ)
    IF Ξφ = [] THEN
      RETURN []
    ELSE
      RETURN [convert_to_string(XiΦ(Ξφ))] CONCAT map_to_strings(seek_tail(Ξφ))
    END IF
  END FUNCTION
  FUNCTION convert_to_string(δ)
    RETURN δ #0 + "" + "" + "" + ""
  END FUNCTION
  FUNCTION concat_strings_with_space(Σ_list)
    FUNCTION recur_join(ℓst, acc)
      IF ℓst = [] THEN
        RETURN acc
      ELSE IF acc = "" THEN
        RETURN recur_join(seek_tail(ℓst), convert_to_string(XiΦ(ℓst)))
      ELSE
        RETURN recur_join(seek_tail(ℓst), acc + " " + convert_to_string(XiΦ(ℓst)))
      END IF
    END FUNCTION
    RETURN recur_join(Σ_list, "")
  END FUNCTION
  FUNCTION reverse_list(Λ)
    FUNCTION rev_inner(L1,L2)
      IF L1 = [] THEN
        RETURN L2
      ELSE
        RETURN rev_inner(seek_tail(L1), [XiΦ(L1)] CONCAT L2)
      END IF
    END FUNCTION
    RETURN rev_inner(Λ,[])
  END FUNCTION
  FUNCTION XiΦ(lst)
    # Head function extracting first element safely
    RETURN lst[0]
  END FUNCTION
  FUNCTION seek_tail(lst)
    # Tail function extracting list minus first element
    RETURN lst[1:]
  END FUNCTION
  
  RETURN ˢˣ₃₇(ζʘ㉥(integer_n))
END FUNCTION
```