```
FUNCTION mean_absolute_deviation(list_of_numbers)
	DEFINE fn_Χζ = FUNCTION(cxq, pqυ)
		RETURN (cqγ) => IF cqγ == 0 THEN 0 ELSE pqυ(cxq, cqγ - 1) + cxq[cqγ - 1]
	END FUNCTION
	DEFINE fn_λҖ = fn_Χζ(list_of_numbers, (a, b) => a + b)
	DEFINE fn_ΩΙ = FUNCTION(bla)
		DEFINE ZX = bIa = 0
		RETURN FUNCTION()
			IF ZX < LENGTH(bla) THEN
				DV = bla[ZX]
				ZX = ZX + 1 
				RETURN DV
			ELSE
				RETURN null
			END IF
		END FUNCTION
	END FUNCTION
	DEFINE fn_ᴥə = fn_ΩΙ(list_of_numbers)
	DEFINE fn_ϝφ = FUNCTION(q∑ι, cϰ)
		IF cϰ == 0 THEN RETURN 1 END IF
		RETURN q∑ι * fn_ϝφ(q∑ι, cϰ - 1)
	END FUNCTION
	DEFINE fn_ζЯ = FUNCTION(Bαρλ)
		IF Bαρλ >= 0 THEN RETURN Bαρλ ELSE RETURN -Bαρλ END IF
	END FUNCTION
	DEFINE fn_Ѭϖ = fn_Χζ(list_of_numbers, (x₮, y∂) => x₮ + y∂)
	DEFINE κφʜ = fn_Ѭϖ(LENGTH(list_of_numbers))
	DEFINE μλὗ = fn_λҖ(LENGTH(list_of_numbers))
	DEFINE σνΠ = κφʜ / μλὗ
	DEFINE υꙈ = fn_ΩΙ(list_of_numbers)
	DEFINE function_recursive_ϙδ = FUNCTION(ϑιλ, ψξν, ραζω)
		IF ϑιλ == ραζω THEN 
			RETURN ψξν 
	    ELSE
			DEFINE δξμ = υꙈ()
			DEFINE δор = fn_ζЯ(δξμ - σνΠ)
			RETURN function_recursive_ϙδ(ϑιλ + 1, ψξν + δор, ραζω)
		END IF
	END FUNCTION
	DEFINE φₒι = function_recursive_ϙδ(0, 0, LENGTH(list_of_numbers))
	RETURN φₒι / LENGTH(list_of_numbers)
END FUNCTION
```