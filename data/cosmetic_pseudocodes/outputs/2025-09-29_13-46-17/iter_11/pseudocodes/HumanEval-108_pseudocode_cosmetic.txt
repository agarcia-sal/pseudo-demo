FUNCTION count_nums(array_of_integers)
	FUNCTION digits_sum(integer_value)
		FUNCTION multiply_list_first(list_𝛂, multiplier_ζ)
			IF NOT (list_𝛂 = []) THEN
				LET [head_π | tail_λ] ← list_𝛂
				RETURN [head_π * multiplier_ζ | tail_λ]
			ELSE
				RETURN []
			END IF
		END FUNCTION

		FUNCTION sum_recursive(ξ)
			IF ξ = [] THEN
				RETURN 0
			ELSE
				LET [hd_σ | tl_τ] ← ξ
				RETURN hd_σ + sum_recursive(tl_τ)
			END IF
		END FUNCTION
		
		FUNCTION abs_and_sign(n_ί, acc_ω)
			IF n_ί < 0 THEN
				RETURN (n_ί * -1, acc_ω * -1)
			ELSE
				RETURN (n_ί, acc_ω)
			END IF
		END FUNCTION

		LET (val_ξ, multiplier_μ) ← abs_and_sign(integer_value, 1)
		LET str_digits_ϕ ← STRING_FROM(val_ξ)
		FUNCTION str_to_int_list(str_ρ, acc_𝜈)
			IF str_ρ = "" THEN
				RETURN REVERSE(acc_𝜈)
			ELSE
				LET head_chr ← FIRST_CHAR(str_ρ)
				LET tail_str ← REMOVE_FIRST_CHAR(str_ρ)
				LET digit_int ← ASCII_TO_INT(head_chr) - ASCII_TO_INT('0')
				RETURN str_to_int_list(tail_str, [digit_int | acc_𝜈])
			END IF
		END FUNCTION
		LET digits_list_θ ← str_to_int_list(str_digits_ϕ, [])
		LET adjusted_digits_υ ← multiply_list_first(digits_list_θ, multiplier_μ)
		RETURN sum_recursive(adjusted_digits_υ)
	END FUNCTION

	FUNCTION filter_gt_zero(lst_κ)
		IF lst_κ = [] THEN
			RETURN []
		ELSE
			LET [hd_β | tl_γ] ← lst_κ
			LET filtered_tail ← filter_gt_zero(tl_γ)
			IF hd_β > 0 THEN
				RETURN [hd_β | filtered_tail]
			ELSE
				RETURN filtered_tail
			END IF
		END IF
	END FUNCTION

	FUNCTION map_digits_sum(lst_δ, acc_ν)
		IF lst_δ = [] THEN
			RETURN REVERSE(acc_ν)
		ELSE
			LET [hd_ψ | tl_ω] ← lst_δ
			RETURN map_digits_sum(tl_ω, [digits_sum(hd_ψ) | acc_ν])
		END IF
	END FUNCTION

	LET digit_sums_list ← map_digits_sum(array_of_integers, [])
	LET filtered_nonzero ← filter_gt_zero(digit_sums_list)

	FUNCTION length_counter(lst_λ, cnt_μ)
		IF lst_λ = [] THEN
			RETURN cnt_μ
		ELSE
			LET [_ | tail_ν] ← lst_λ
			RETURN length_counter(tail_ν, cnt_μ + 1)
		END IF
	END FUNCTION

	RETURN length_counter(filtered_nonzero, 0)
END FUNCTION