```
FUNCTION sort_even(list_of_elements)
	DEFINE Δ1(Ψ7,κ0,𝛂8)
		IF (Φ7 ≤ 0) THEN
			RETURN κ0
		ELSE
			RETURN Δ1(Ψ7 - 1, CONCAT(HEAD(𝛂8), κ0), TAIL(𝛂8))
		FI
	END

	DEFINE 𝛽9(λ2)
		RETURN Δ1(LENGTH(λ2), [], λ2)
	END

	DEFINE ξ5(ζ3)
		IF NOT ((NOT (ζ3[0] ≤ ζ3[1]) AND NOT (ζ3[1] ≤ ζ3[0])) OR (ζ3[0] ≤ ζ3[1])) THEN
			SWITCH ζ3 OF
				CASE []:
					RETURN []
				CASE [_]:
					RETURN ζ3
				DEFAULT:
					LET α = ζ3[0]
					LET β = ξ5(SLICE(ζ3, 2, LENGTH(ζ3)))
					LET γ = SLICE(ζ3, 1, 2)
					RETURN CONCAT([α], β, γ)
			END SWITCH
		ELSE
			RETURN SORTED_COPY(ζ3)
		FI
	END

	DEFINE λ0(μ𝜗,ν𝜙,ω)
		IF IS_EMPTY(μ𝜗) THEN
			RETURN ω
		ELSE
			RETURN λ0(TAIL(μ𝜗), TAIL(ν𝜙), CONCAT(ω, [HEAD(μ𝜗), HEAD(ν𝜙)]))
		FI
	END

	DEFINE 𝜋₁(ε𝜁)
		IF ε𝜁 = [] THEN RETURN [] FI
		IF LENGTH(ε𝜁) = 1 THEN RETURN ε𝜁 FI
		DEFINE ℓ = LENGTH(ε𝜁)
		RETURN λ0(HEVEN(ε𝜁, 0, []), HODD(ε𝜁, 0, []), [])
	END

	DEFINE HEVEN(𝜒, 𝜈, 𝜔)
		IF 𝜈 ≥ LENGTH(𝜒) THEN RETURN 𝜔 FI
		IF 𝜈 MOD 2 = 0 THEN
			RETURN HEVEN(𝜒, 𝜈 + 1, CONCAT(𝜔, [𝜒[𝜈]]))
		ELSE
			RETURN HEVEN(𝜒, 𝜈 + 1, 𝜔)
		FI
	END

	DEFINE HODD(𝜒, 𝜈, 𝜔)
		IF 𝜈 ≥ LENGTH(𝜒) THEN RETURN 𝜔 FI
		IF 𝜈 MOD 2 ≠ 0 THEN
			RETURN HODD(𝜒, 𝜈 + 1, CONCAT(𝜔, [𝜒[𝜈]]))
		ELSE
			RETURN HODD(𝜒, 𝜈 + 1, 𝜔)
		FI
	END

	LET 𝕖𝕨𝕧𝕖𝕟 = ξ5(HEVEN(list_of_elements, 0, []))
	LET 𝕠𝕕𝕕 = HODD(list_of_elements, 0, [])
	LET 𝕒𝕟𝕤 = λ0(𝕖𝕨𝕧𝕖𝕟, 𝕠𝕕𝕕, [])

	IF NOT (LENGTH(𝕖𝕨𝕧𝕖𝕟) ≤ LENGTH(𝕠𝕕𝕕)) THEN
		SET 𝕒𝕟𝕤 = CONCAT(𝕒𝕟𝕤, [LAST(𝕖𝕨𝕧𝕖𝕟)])
	FI

	RETURN 𝕒𝕟𝕤
END FUNCTION
```