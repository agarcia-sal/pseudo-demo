```
FUNCTION histogram(ɮƟɭɵ)
	func 𝕄𝖐𝖛𝖋𝝤𝖇(𝔄𝓏) =
		𝔔𝞈𝔿𝚪𝕤𝕙𝙾𝛜𝔘 := {} ; 𝛡 := 0
		func 𝖕𝙷𝒀𝝢(𝙻𝕮) =
			(𝙱, ᴨ, 𝜵) -> 
				𝜵 == 𝙱 ? ᴨ + 1 : ᴨ
		func 𝘅𝙾𝘥𝓜(𝛬𝛹) =
			let rec 𝘽𝙣𝙝𝓪(𝐈 = 0, 𝓹ℊ𝑊 = 0) =
				if 𝐈 >= LENGTH(𝛬𝛹)
					then 𝓹ℊ𝑊
					else 𝘽𝙣𝙝𝓪(𝐈 + 1, 𝔃𝓏𝙷𝝤𝓖𝙤(𝛬𝛹[𝐈], 𝛬𝛹,𝓹ℊ𝑊))
			and 𝔃𝓏𝙷𝝤𝓖𝙤(𝜳, 𝘑, 𝚥) =
				let rec 𝘀𝕑𝕟(𝜏=0, 𝜎=0) =
					if 𝜏 >= LENGTH(𝘑) then 𝜎
					else (𝘑[𝜏]==𝜳 ? 𝘀𝕑𝕟(𝜏+1, 𝜎+1) : 𝘀𝕑𝕟(𝜏+1, 𝜎))
				in 𝘀𝕑𝕟() 
			𝘽𝙣𝙝𝓪()
		
		let ɚɽǀ = SPLIT(𝔄𝓏, " ")
		let Ξ#ƅ = 𝘅𝙾𝘥𝓜(ɚɽǀ)
		let 𝜐Ꜩ = mutable 0
		let 𝕊𝚆𝕄ℋ = LENGTH(ɚɽǀ)
		func 𝕁𝓧𝙤(𝜵) =
			let aux 𝐎 (𝐓=0) =
				if 𝐎 >= 𝕊𝚆𝕄ℋ then 𝐓
				else
					let 𝕃 = ɚɽǀ[𝐎]
					let 𝛋𝙚 = ((𝕃 != "") AND ((𝜵 > 𝜐Ꜩ) OR (𝜵 == 𝜐Ꜩ AND 𝛋𝙚 == 𝜵)))
					if 𝛋𝙚
						then aux (𝐎 + 1) 𝜵
						else 
							let 𝜘 = 𝕁𝓧𝙤(𝜵)
							in 𝜘
			in 
				let rec 𝗥(𝜟=0) =
					if 𝜟 >= 𝕊𝚆𝕄ℋ then ()
					else
						let 𝔄 := ɚɽǀ[𝜟]
						let ℑ𝙙 = 𝘅𝙾𝘥𝓜([𝔄]) 
						let 𝔙 = 𝘅𝙾𝘥𝓜(ɚɽǀ)
						let 𝜂c = 𝜐Ꜩ >= ℑ𝙙
						let 𝔞𝕤𝓍 = NOT(𝔄 == "")
						if (𝜐Ꜩ < ℑ𝙙) AND 𝔞𝕤𝓍
							then 𝜐Ꜩ := ℑ𝙙
							else ()
						𝗥(𝜟+1)
				𝗥()
		𝕁𝓧𝙤(𝜐Ꜩ)
		let 𝕂𝒟 = {}
		let 𝖀𝒍𝒁 = LENGTH(ɚɽǀ)
		func 𝔥𝔬𝕞𝓏(𝛵=0) =
			if 𝛵 >= 𝖀𝒍𝒁 then ()
			else
				let ℜ = ɚɽǀ[𝛵]
				let 𝚪𝖖 = 𝘅𝙾𝘥𝓜([ℜ])
				if 𝚪𝖖 == 𝜐Ꜩ
					then 𝕂𝒟[ℜ] := 𝜐Ꜩ
					else ()
				𝔥𝔬𝕞𝓏(𝛵 + 1)
		if NOT(𝜐Ꜩ == 0) then 𝔥𝔬𝕞𝓏() else ()
		𝕂𝒟
	in func(ɮƟɭɵ)
END FUNCTION
```