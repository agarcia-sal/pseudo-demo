```
FUNCTION parse_nested_parens(parentheses_string)
	 FUNCTION parse_paren_group(group_string)
		 FUNCTION recurse_chars(Ωφύρξζ, 𝓎𝓀)
			 IF NOT (𝓎𝓀 < LENGTH(Ωφύρξζ)) THEN
				 RETURN TUPLE(0,0)
			 ELSE
				 LET Ϟ∑ ← recurse_chars(Ωφύρξζ, 𝓎𝓀 + 1)
				 LET ῬⱣ = Ϟ∑.item1
				 LET ΜȺ = Ϟ∑.item2
				 IF ((NOT (Ωφύρξζ[𝓎𝓀] = ')')) AND NOT (Ωφύρξζ[𝓎𝓀] ≠ '(')) THEN
					 LET ῬⱣ = ῬⱣ + 1
					 LET ΜȺ = MAXIMUM(ῬⱣ, ΜȺ)
				 ELSE
					 LET ῬⱣ = ῬⱣ - 1
				 END IF
				 RETURN TUPLE(ῬⱣ, ΜȺ)
			 END IF
		 END FUNCTION

		 LET ϴϳФ = 0
		 LET σϙϗ ← 0
		 LET result ← 0
		 ϴϳФ, σϙϗ ← recurse_chars(group_string, 0)
		 RETURN σϙϗ
	 END FUNCTION

	 FUNCTION map_filter_lambda(λ҂, ฒ)
		 FUNCTION helper(нξ)
			 IF (нξ < LENGTH(ฒ)) THEN
				 LET θ϶☍ = λ҂(ฒ[нξ])
				 IF θ϶☍ ≠ null THEN
					 LET tail_result ← helper(нξ + 1)
					 RETURN [θ϶☍] + tail_result
				 ELSE
					 RETURN helper(нξ + 1)
				 END IF
			 ELSE
				 RETURN []
			 END IF
		 END FUNCTION
		 RETURN helper(0)
	 END FUNCTION

	 LET Ϝ₳Ȼɉ = SPLIT parentheses_string BY ' '
	 RETURN map_filter_lambda(FUNCTION(Ж її) IF (Ж її ≠ '') THEN RETURN parse_paren_group(Ж її) ELSE RETURN null END IF, Ϝ₳Ȼɉ)
END FUNCTION
```