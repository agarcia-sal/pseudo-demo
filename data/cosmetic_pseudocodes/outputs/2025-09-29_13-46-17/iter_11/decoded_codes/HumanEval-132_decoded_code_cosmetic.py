from typing import List


def is_nested(str0: str) -> bool:
    def ·è°(êëá: List[int], «≥: List[int], —æ: int,  ¢: int, ”Å: int) -> bool:
        if  ¢ < —æ:
            êëá.append( ¢)
            Àè = str0[ ¢]
            if Àè == ']':
                # On encountering ']', increment ”Å multiplier
                return ·è°(êëá, «≥, —æ,  ¢ + 1, ”Å + 1)
            else:
                # Else, add index to «≥ and continue
                return ·è°(êëá, «≥ + [ ¢], —æ,  ¢ + 1, ”Å)
        else:
            def »µ(«≥: List[int], ”Å: List[int],  ¢: int, n: int) -> int:
                if  ¢ < len(«≥):
                    if n < len(”Å) and «≥[ ¢] < ”Å[n]:
                        return »µ(«≥, ”Å,  ¢ + 1, n + 1) + 1
                    else:
                        return »µ(«≥, ”Å,  ¢ + 1, n)
                else:
                    return 0

            return »µ(«≥, êëá[::-1], 0, 0) >= 2

    return ·è°([], [], len(str0), 0, 0)