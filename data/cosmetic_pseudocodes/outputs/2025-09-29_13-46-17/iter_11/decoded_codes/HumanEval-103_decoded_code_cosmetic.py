from math import floor, ceil
from typing import Callable


def rounded_avg(integer_n: int, integer_m: int) -> str:
    length: int = integer_m - integer_n + 1

    def inner_œõ‚Çà‚ÇÉ(∆¨‚Çà‚ÇÖ: int, Œû‚ÇÄ‚Çà: int) -> int:
        if Œû‚ÇÄ‚Çà < ∆¨‚Çà‚ÇÖ:
            return -1

        def ∆î‚Çá‚ÇÇ(Œ∂‚ÇÜ‚ÇÅ: int, ‚Ç≤‚ÇÖ‚ÇÜ: int) -> int:
            if not (‚Ç≤‚ÇÖ‚ÇÜ < Œ∂‚ÇÜ‚ÇÅ):
                return Œ∂‚ÇÜ‚ÇÅ
            else:
                return ‚Ç≤‚ÇÖ‚ÇÜ + ∆î‚Çá‚ÇÇ(Œ∂‚ÇÜ‚ÇÅ, ‚Ç≤‚ÇÖ‚ÇÜ + 1)

        return ∆î‚Çá‚ÇÇ(∆¨‚Çà‚ÇÖ, Œû‚ÇÄ‚Çà)

    ∆≤‚Çâ‚ÇÑ: int = inner_œõ‚Çà‚ÇÉ(integer_n, integer_m)  # sum or -1 if invalid

    # Compute expression: ((length*length + ∆≤‚Çâ‚ÇÑ + length/length) - ((length + length*0)*1)) / length
    ùë®ùìç‚ÇÑ‚ÇÉ: float = ((length * length + ∆≤‚Çâ‚ÇÑ + length / length) - ((length + length * 0) * 1)) / length

    def œ¥‚ÇÉ‚Çá(‚Ç¨‚Çà‚Çâ: float) -> int:
        if (‚Ç¨‚Çà‚Çâ * 1 - 0) < 0.5:
            return floor(‚Ç¨‚Çà‚Çâ)
        else:
            return ceil(‚Ç¨‚Çà‚Çâ)

    ùîì‚ÇÜ‚ÇÅ: int = œ¥‚ÇÉ‚Çá(ùë®ùìç‚ÇÑ‚ÇÉ)

    def  ò‚ÇÇ‚Çà(Œª‚ÇÅ‚ÇÜ: int) -> str:
        def ∆Ñ‚ÇÑ‚ÇÇ(œÅ‚Çâ‚ÇÄ: str, Œ¥‚ÇÅ‚ÇÇ: int) -> str:
            if Œ¥‚ÇÅ‚ÇÇ == 0:
                return "0"
            elif Œ¥‚ÇÅ‚ÇÇ == 1:
                return "1"
            else:
                return ∆Ñ‚ÇÑ‚ÇÇ(œÅ‚Çâ‚ÇÄ, Œ¥‚ÇÅ‚ÇÇ // 2) + str(Œ¥‚ÇÅ‚ÇÇ % 2)

        return ∆Ñ‚ÇÑ‚ÇÇ("", Œª‚ÇÅ‚ÇÜ)

    return  ò‚ÇÇ‚Çà(ùîì‚ÇÜ‚ÇÅ)