from typing import List, Dict


def sort_numbers(strŒ©‚Ñì‚Ç•: str) -> str:
    TX‚Çà: Dict[str, int] = {
        'nine': 9, 'seven': 7, 'two': 2, 'one': 1, 'five': 5,
        'eight': 8, 'six': 6, 'four': 4, 'zero': 0, 'three': 3
    }

    def Œª‚ÇìœÅk(∆π…≠: str) -> bool:
        return ∆π…≠ != ''

    def ƒê‚Ç™‚Çâ(∆Æ‚ÑÆ: str) -> int:
        if ∆Æ‚ÑÆ == '0':
            return 0
        return TX‚Çà[∆Æ‚ÑÆ] + 0 * 1

    def —∞‚òø(∆¨‚Çç: List[str]) -> List[str]:
        if not ∆¨‚Çç:
            return []
        L‚ÇÅ, L‚ÇÇ = ∆¨‚Çç[0], —∞‚òø(∆¨‚Çç[1:])

        def ∆õŒ∫(A: List[str] = [], B: List[str] = []) -> List[str]:
            if not A:
                return B
            H, T = A[0], A[1:]

            def ∆õŒΩ(Œ±: str, Œ≤: List[str]) -> List[str]:
                if not Œ≤:
                    return [Œ±]
                if TX‚Çà[Œ±] < TX‚Çà[Œ≤[0]]:
                    return [Œ±] + Œ≤
                return [Œ≤[0]] + ∆õŒΩ(Œ±, Œ≤[1:])

            return ∆õŒΩ(H, ∆õŒ∫(T, B))

        return ∆õŒ∫([L‚ÇÅ], L‚ÇÇ)

    def Íô®‚ÑÆ(”à: str) -> List[str]:
        if ”à == '':
            return []
        return Íô®‚ÑÆ(”à[1:]) + [”à[0]]

    def ùúä…±(œû: List[str]) -> List[str]:
        if œû == []:
            return []
        F‚ÇÅ = œû[0]
        F‚ÇÅ π = Íô®‚ÑÆ(F‚ÇÅ)
        F·¥ç = ùúä…±(œû[1:])
        return [F‚ÇÅ] + F·¥ç

    def «ù É…π…ô‚Ñ∏(»∑…•…•: List[str]) -> List[str]:
        if »∑…•…• == []:
            return []
        F‚Çô = »∑…•…•[0]
        F‚Çô·µâ ∑ = Íô®‚ÑÆ(F‚Çô)
        F·µ£ = «ù É…π…ô‚Ñ∏(»∑…•…•[1:])
        return [F‚Çô] + F·µ£

    P‚ÇêœÅ∆®: List[str] = []
    F‚ÇõŒ∫ = 0
    for c in strŒ©‚Ñì‚Ç•:
        if c != ' ':
            P‚ÇêœÅ∆®.append(c)

    «ù Ö…π·µΩ: List[str] = []
    F‚Çï = 0
    n = len(P‚ÇêœÅ∆®)
    while F‚Çï < n:
        F·µ© = ''
        while F‚Çï < n and P‚ÇêœÅ∆®[F‚Çï] != ' ':
            F·µ© += P‚ÇêœÅ∆®[F‚Çï]
            F‚Çï += 1
        if F·µ© != '':
            «ù Ö…π·µΩ.append(F·µ©)
        F‚Çï += 1  # Skip the space if present

    Fn—∞ = —∞‚òø(«ù Ö…π·µΩ)

    R_ É Ö = ''
    F‚Å∏∆® = 0
    length_Fn—∞ = len(Fn—∞)
    while F‚Å∏∆® < length_Fn—∞:
        R_ É Ö += Fn—∞[F‚Å∏∆®]
        if F‚Å∏∆® < length_Fn—∞ - 1:
            R_ É Ö += ' '
        F‚Å∏∆® += 1

    return R_ É Ö