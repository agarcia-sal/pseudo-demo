from typing import List, Optional, TypeVar

T = TypeVar('T')

def next_smallest(…ì…∏: List[T]) -> Optional[T]:
    def Œ∂‚ÇÑœÑŒª(Œ∫‚ÇÇ: List[T]) -> List[T]:
        if not Œ∫‚ÇÇ:
            return []
        else:
            ∆í‚Çá…π = Œ∂‚ÇÑœÑŒª(Œ∫‚ÇÇ[1:])
            return ∆í‚Çá…π if Œ∫‚ÇÇ[0] in ∆í‚Çá…π else [Œ∫‚ÇÇ[0]] + ∆í‚Çá…π

    def œ©_œü(Œºœñœ¥: List[T]) -> List[T]:
        def ‚ô™(j‚Çò‚Çõ: List[T], o‚ÇÉ: List[T]) -> List[T]:
            if not o‚ÇÉ:
                return j‚Çò‚Çõ[::-1]  # reverse j‚Çò‚Çõ
            Œ±‚Çö = o‚ÇÉ[0]
            Œ≤‚Çê = o‚ÇÉ[1] if len(o‚ÇÉ) > 1 else None
            if Œ≤‚Çê is not None and (Œ±‚Çö > Œ≤‚Çê):
                return ‚ô™([Œ≤‚Çê] + j‚Çò‚Çõ, [Œ±‚Çö] + o‚ÇÉ[2:])
            else:
                return ‚ô™([Œ±‚Çö] + j‚Çò‚Çõ, o‚ÇÉ[1:])
        return ‚ô™([], Œºœñœ¥)

    def Length‚Çä(ùî©: List[T]) -> int:
        def ·∂†‚Çô(l: List[T], c: int) -> int:
            if not l:
                return c
            return ·∂†‚Çô(l[1:], c + 1)
        return ·∂†‚Çô(ùî©, 0)

    ∆¶‚Çõ = Œ∂‚ÇÑœÑŒª(…ì…∏)
    S·¥º·¥ø·¥õ = œ©_œü(∆¶‚Çõ)
    if not (Length‚Çä(S·¥º·¥ø·¥õ) >= 2):
        return None
    else:
        def ‚óê(L: List[T]) -> Optional[T]:
            if not L:
                return None
            if Length‚Çä(L) == 1:
                return None
            Œµ, Œ∑ = L[0], L[1:]
            return Œ∑[0]
        return ‚óê(S·¥º·¥ø·¥õ)