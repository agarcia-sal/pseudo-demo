```
FUNCTION multiply(integer_a, integer_b)
    DEFINE recursive_helper(num1_alt, num2_alt, accumulator_init)
        IF NOT (num1_alt == 0) THEN
            RETURN recursive_helper(num1_alt - 1, num2_alt, accumulator_init + num2_alt)
        ELSE
            RETURN accumulator_init
        END IF
    END DEFINE

    DEFINE get_mod_abs(val_recur)
        IF val_recur < 0 THEN
            RETURN (-val_recur) MOD 10
        ELSE
            RETURN val_recur MOD 10
        END IF
    END DEFINE

    LET mod_val1 = get_mod_abs(integer_a)
    LET mod_val2 = get_mod_abs(integer_b)

    RETURN recursive_helper(mod_val1, mod_val2, 0)
END FUNCTION
```