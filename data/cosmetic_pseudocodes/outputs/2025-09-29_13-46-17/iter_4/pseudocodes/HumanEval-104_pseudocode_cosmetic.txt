```
FUNCTION unique_digits(list_of_positive_integers)
    SET OddDigitAccumulator TO new list
    DEFINE FUNCTION check_all_odd(index)
        IF index >= LENGTH(list_of_positive_integers)
            RETURN
        SET current_value TO list_of_positive_integers[index]
        SET digit_list TO []
        SET temp_val TO current_value
        WHILE temp_val > 0
            PREPEND (temp_val MOD 10) TO digit_list
            SET temp_val TO (temp_val DIV 10)
        END WHILE
        SET has_even_digit TO FALSE
        FOR EACH digit IN digit_list
            IF NOT (digit MOD 2 == 1)
                SET has_even_digit TO TRUE
                BREAK
        END FOR
        IF has_even_digit == FALSE
            APPEND current_value TO OddDigitAccumulator
        check_all_odd(index + 1)
    END FUNCTION

    call check_all_odd(0)

    DEFINE compare_asc(lhs, rhs)
        RETURN lhs < rhs
    END FUNCTION

    SET sorted_result TO []
    WHILE LENGTH(OddDigitAccumulator) > 0
        SET min_val TO OddDigitAccumulator[0]
        SET min_idx TO 0
        FOR i FROM 1 TO LENGTH(OddDigitAccumulator) - 1
            IF NOT compare_asc(min_val, OddDigitAccumulator[i])
                SET min_val TO OddDigitAccumulator[i]
                SET min_idx TO i
        REMOVE element at min_idx FROM OddDigitAccumulator
        APPEND min_val TO sorted_result
    END WHILE

    RETURN sorted_result
END FUNCTION
```