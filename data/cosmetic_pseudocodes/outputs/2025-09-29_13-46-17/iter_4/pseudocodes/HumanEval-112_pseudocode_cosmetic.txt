```
FUNCTION reverse_delete(string_s, string_c)
    FUNCTION filter_chars(input_str, removal_str, idx)
        IF idx >= LENGTH(input_str) THEN 
            RETURN ""
        ELSE
            LET current_char = input_str[idx]
            LET tail_filtered = filter_chars(input_str, removal_str, idx + 1)
            IF current_char NOT IN removal_str THEN
                RETURN current_char + tail_filtered
            ELSE
                RETURN tail_filtered
            END IF
        END IF
    END FUNCTION

    LET filtered_str = filter_chars(string_s, string_c, 0)

    FUNCTION is_palindrome(check_str, left_idx, right_idx)
        WHILE left_idx < right_idx
            IF check_str[left_idx] != check_str[right_idx] THEN
                RETURN FALSE
            END IF
            left_idx = left_idx + 1
            right_idx = right_idx - 1
        END WHILE
        RETURN TRUE
    END FUNCTION

    LET palindrome_result = is_palindrome(filtered_str, 0, LENGTH(filtered_str) - 1)

    RETURN (filtered_str, palindrome_result)
END FUNCTION
```