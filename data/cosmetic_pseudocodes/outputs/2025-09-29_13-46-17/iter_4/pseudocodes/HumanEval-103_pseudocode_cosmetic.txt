```
FUNCTION rounded_avg(integer_n, integer_m)
    DEFINE compute_sum(curr_val, end_val, acc_total)
        IF curr_val GREATER THAN end_val
            RETURN acc_total
        ELSE
            RETURN compute_sum(curr_val + 1, end_val, acc_total + curr_val)
    END DEFINE

    IF NOT (integer_m >= integer_n)
        RETURN -1

    LET total_sum = compute_sum(integer_n, integer_m, 0)
    LET count_elements = (integer_m - integer_n) + 1
    LET raw_average = total_sum / count_elements
    LET nearest_whole = (raw_average + 0.5) - ((raw_average + 0.5) MOD 1)
    
    DEFINE integer_to_binary(num)
        LET bits_list = []
        
        DEFINE convert_loop(value)
            IF value == 0 AND bits_list IS EMPTY
                APPEND 0 TO bits_list
                RETURN
            ELSE IF value > 0
                LET remainder = value MOD 2
                LET quotient = value DIV 2
                APPEND remainder TO bits_list
                convert_loop(quotient)
            END IF
        END DEFINE
        
        convert_loop(num)
        LET binary_string = ""
        
        FOR idx FROM LENGTH(bits_list) - 1 DOWNTO 0
            SET binary_string = binary_string + STRING(bits_list[idx])
        
        RETURN binary_string
    END DEFINE

    RETURN integer_to_binary(nearest_whole)
END FUNCTION
```