```
FUNCTION prime_fib(integer_n)
    IMPORT mathematical_functions_module

    FUNCTION is_prime(integer_p)
        IF integer_p < 2 THEN
            RETURN False
        ENDIF

        FUNCTION check_divisor(current_divisor, limit)
            IF current_divisor > limit THEN
                RETURN True
            ELSE
                IF integer_p MOD current_divisor = 0 THEN
                    RETURN False
                ELSE
                    RETURN check_divisor(current_divisor + 1, limit)
                ENDIF
            ENDIF
        END FUNCTION

        SET max_check TO MIN(integer_p - 1, FLOOR(SQUARE_ROOT(integer_p)) + 1)
        RETURN check_divisor(2, max_check)
    END FUNCTION

    SET fib_sequence TO [0, 1]

    FUNCTION generate_prime_fibonacci(remaining_count)
        IF remaining_count = 0 THEN
            RETURN fib_sequence[ LENGTH(fib_sequence) - 1 ]
        ELSE
            LET last_index = LENGTH(fib_sequence) - 1
            LET second_last_index = LENGTH(fib_sequence) - 2
            LET next_fib = fib_sequence[last_index] + fib_sequence[second_last_index]
            APPEND next_fib TO fib_sequence
            IF NOT is_prime(next_fib) THEN
                RETURN generate_prime_fibonacci(remaining_count)
            ELSE
                RETURN generate_prime_fibonacci(remaining_count - 1)
            ENDIF
        ENDIF
    END FUNCTION

    RETURN generate_prime_fibonacci(integer_n)
END FUNCTION
```