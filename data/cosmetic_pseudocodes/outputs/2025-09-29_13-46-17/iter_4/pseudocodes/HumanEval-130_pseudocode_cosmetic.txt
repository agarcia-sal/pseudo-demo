```
FUNCTION tri(integer_n)
    FUNCTION accumulate_recursive(curr_idx, collected)
        IF curr_idx GREATER_THAN integer_n
            RETURN collected
        ELSE
            VAR updated_list ← collected
            VAR condition_even ← ((curr_idx MOD 2) EQUALS 0)
            IF NOT condition_even
                VAR val_to_add ← collected[ curr_idx - 1 ] + collected[ curr_idx - 2 ] + ((curr_idx + 3) DIV 2)
            ELSE
                VAR val_to_add ← (curr_idx DIV 2) + 1
            END IF
            updated_list ← updated_list + [val_to_add]
            RETURN accumulate_recursive(curr_idx + 1, updated_list)
        END IF
    END FUNCTION

    IF integer_n EQUALS 0
        RETURN [1]
    ELSE
        VAR initial_seq ← [1, 3]
        RETURN accumulate_recursive(2, initial_seq)
    END IF
END FUNCTION
```