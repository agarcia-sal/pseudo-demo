```
FUNCTION count_up_to(n)
    DEFINE check_prime(k, divisor)
        IF divisor * divisor > k THEN
            RETURN true
        ELSE IF k MODULO divisor = 0 THEN
            RETURN false
        ELSE
            RETURN check_prime(k, divisor + 1)
        END IF
    END FUNCTION

    DEFINE build_primes(current, limit, prime_accumulator)
        IF current >= limit THEN
            RETURN prime_accumulator
        ELSE
            IF check_prime(current, 2) THEN
                RETURN build_primes(current + 1, limit, prime_accumulator + [current])
            ELSE
                RETURN build_primes(current + 1, limit, prime_accumulator)
            END IF
        END IF
    END FUNCTION

    RETURN build_primes(2, n, [])
END FUNCTION
```