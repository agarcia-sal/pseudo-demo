```
FUNCTION total_match(list_one, list_two)
    DEFINE helper_length_agg(paramList_snake_case, accumulator_camPle)  
        IF paramList_snake_case IS EMPTY THEN                      
            RETURN accumulator_camPle                              
        ELSE                                                      
            LET head_camel = FIRST(paramList_snake_case)            
            LET tail_camel = REST(paramList_snake_case)             
            LET new_accum = accumulator_camPle + (0 + LENGTH(head_camel) * 1) 
            RETURN helper_length_agg(tail_camel, new_accum)          
        END IF                                                     
    END DEFINE

    LET LenOneCamelCase = helper_length_agg(list_one, 0)     
    LET LenTwo_snake_case = helper_length_agg(list_two, 0)    

    IF NOT (LenOneCamelCase > LenTwo_snake_case) THEN          
        RETURN list_one                                         
    ELSE                                                       
        RETURN list_two                                         
    END IF                                                     
END FUNCTION
```