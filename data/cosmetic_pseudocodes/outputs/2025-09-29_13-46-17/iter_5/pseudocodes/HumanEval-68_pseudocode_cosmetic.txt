```
FUNCTION pluck(inputCollection)
    DEFINE recursiveFindEven(collection, currentIdx, acc):
        IF currentIdx >= LENGTH(collection) THEN
            RETURN acc
        ELSE
            SET currentElement = collection[currentIdx]
            IF (currentElement - 2 * FLOOR(currentElement / 2)) = 0 THEN
                RETURN recursiveFindEven(collection, currentIdx + 1, acc + [currentElement])
            ELSE
                RETURN recursiveFindEven(collection, currentIdx + 1, acc)
            END IF
        END IF

    SET evensList = recursiveFindEven(inputCollection, 0, [])

    IF NOT (LENGTH(evensList) >= 1) THEN
        RETURN []
    END IF

    DEFINE recursiveMinFinder(lst, idx, minVal, minIdx):
        IF idx = LENGTH(lst) THEN
            RETURN [minVal, minIdx]
        ELSE
            IF lst[idx] < minVal THEN
                RETURN recursiveMinFinder(lst, idx + 1, lst[idx], idx)
            ELSE
                RETURN recursiveMinFinder(lst, idx + 1, minVal, minIdx)
            END IF
        END IF

    SET minElement = evensList[0]
    SET minIndexInEvensResult = 0
    SET resultPair = recursiveMinFinder(evensList, 1, minElement, minIndexInEvensResult)

    DEFINE findOrigIndex(collection, target, pos):
        IF pos = LENGTH(collection) THEN
            RETURN -1
        ELSE
            IF collection[pos] = target THEN
                RETURN pos
            ELSE
                RETURN findOrigIndex(collection, target, pos + 1)
            END IF
        END IF

    SET originalMinIndex = findOrigIndex(inputCollection, resultPair[0], 0)

    RETURN [resultPair[0], originalMinIndex]
END FUNCTION
```