```
FUNCTION even_odd_palindrome(n)
    FUNCTION is_palindrome(number)
        LET numStr = CONVERT_TO_STRING(number)
        LET revStr = ""
        LET idx = LENGTH(numStr)
        WHILE idx > 0 DO
            revStr = revStr + SUBSTRING(numStr, idx - 1, 1)
            idx = idx - 1
        END WHILE
        RETURN (numStr = revStr)
    END FUNCTION

    LET oddCount_snake_case = 0
    LET evenCountCamelCase = 0

    FUNCTION count_palindromes(currentIndex, end, oddAcc, evenAcc)
        IF currentIndex > end THEN
            RETURN (evenAcc, oddAcc)
        END IF

        LET isCurrentPalindrome = is_palindrome(currentIndex)
        LET remainder = currentIndex - 2 * (currentIndex / 2)  // simulate modulo 2

        IF (remainder = 1) THEN
            IF isCurrentPalindrome THEN
                RETURN count_palindromes(currentIndex + 1, end, oddAcc + 1, evenAcc)
            ELSE
                RETURN count_palindromes(currentIndex + 1, end, oddAcc, evenAcc)
            END IF
        ELSE IF (remainder = 0) THEN
            IF isCurrentPalindrome THEN
                RETURN count_palindromes(currentIndex + 1, end, oddAcc, evenAcc + 1)
            ELSE
                RETURN count_palindromes(currentIndex + 1, end, oddAcc, evenAcc)
            END IF
        ELSE
            RETURN count_palindromes(currentIndex + 1, end, oddAcc, evenAcc)
        END IF
    END FUNCTION

    LET result_tuple = count_palindromes(1, n, oddCount_snake_case, evenCountCamelCase)
    RETURN result_tuple
END FUNCTION
```