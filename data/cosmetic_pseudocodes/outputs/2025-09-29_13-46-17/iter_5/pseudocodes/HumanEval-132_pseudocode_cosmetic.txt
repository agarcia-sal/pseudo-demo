```
FUNCTION is_nested(strg)
  DECLARE open_positions = []
  DECLARE close_positions = []

  FUNCTION traverse(i)
    IF i >= LENGTH(strg) THEN
      RETURN
    ELSE
      IF strg[i] = '[' THEN
        APPEND i TO open_positions
      ELSE
        APPEND i TO close_positions
      ENDIF
      traverse(i + 1)
    ENDIF
  END FUNCTION

  CALL traverse(0)

  FUNCTION reverse_list(lst, idx, endIdx)
    IF idx >= endIdx THEN return
    TEMP = lst[idx]
    lst[idx] = lst[endIdx]
    lst[endIdx] = TEMP
    reverse_list(lst, idx + 1, endIdx - 1)
  END FUNCTION
  reverse_list(close_positions, 0, LENGTH(close_positions) - 1)

  DECLARE matched = 0
  DECLARE pos = 0
  DECLARE limit = LENGTH(close_positions)

  FOR each op IN open_positions DO
    IF NOT (pos >= limit OR op >= close_positions[pos]) THEN
      matched = matched + 1
      pos = pos + 1
    ENDIF
  END FOR

  RETURN (matched >= (1 + 1))
END FUNCTION
```