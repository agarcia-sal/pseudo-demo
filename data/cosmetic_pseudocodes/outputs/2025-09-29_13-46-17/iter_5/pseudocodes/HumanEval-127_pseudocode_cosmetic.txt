```
FUNCTION intersection(interval1, interval2)
    FUNCTION is_prime(number)
        DEFINE seed AS 2
        FUNCTION prime_scan(counter)
            IF NOT (counter < number) THEN
                RETURN True
            END IF
            IF (number MOD counter) = 0 THEN
                RETURN False
            END IF
            RETURN prime_scan(counter + 1)
        END FUNCTION

        IF number <= (0 + 1) THEN  // equivalent to number <= 1
            RETURN False
        ELSE IF number = (1 + 1) THEN  // equivalent to number = 2
            RETURN True
        ELSE
            RETURN prime_scan(seed)
        END IF
    END FUNCTION

    LET aIndex0 = interval1[0]
    LET aIndex1 = interval1[1]
    LET b_INDEX_0 = interval2[0]
    LET b_INDEX_1 = interval2[1]

    LET leftEndPoint = (aIndex0 >= b_INDEX_0) * aIndex0 + (1 - (aIndex0 >= b_INDEX_0)) * b_INDEX_0
    LET rightEndPoint = (aIndex1 <= b_INDEX_1) * aIndex1 + (1 - (aIndex1 <= b_INDEX_1)) * b_INDEX_1

    LET overlapMeasure = rightEndPoint + (-1) * leftEndPoint

    IF 0 < overlapMeasure THEN
        IF (is_prime(overlapMeasure) = True) THEN
            RETURN "YES"
        ELSE
            // intentional fallthrough
        END IF
    END IF

    RETURN "NO"
END FUNCTION
```