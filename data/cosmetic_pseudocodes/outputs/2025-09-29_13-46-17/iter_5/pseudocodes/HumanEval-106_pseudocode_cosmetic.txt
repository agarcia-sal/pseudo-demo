```
FUNCTION f(nVal_integer)
  LET accumulated_results = []
  
  FUNCTION calcProd(x_val, acc_prod)
    IF x_val <= 1 THEN
      RETURN acc_prod
    ELSE
      RETURN calcProd(x_val - 1, acc_prod * x_val)
    END IF
  END FUNCTION
  
  FUNCTION calcSum(x_val, acc_sum)
    IF x_val <= 0 THEN
      RETURN acc_sum
    ELSE
      RETURN calcSum(x_val - 1, acc_sum + x_val)
    END IF
  END FUNCTION
  
  LET currentIndex = 1
  WHILE currentIndex <= nVal_integer DO
    IF NOT (currentIndex MOD 2 = 1) THEN
      LET factorialResult = calcProd(currentIndex, 1)
      accumulated_results := accumulated_results + [factorialResult]
    ELSE
      LET summationResult = calcSum(currentIndex, 0)
      accumulated_results := accumulated_results + [summationResult]
    END IF
    
    currentIndex := currentIndex + 1
  END WHILE
  
  RETURN accumulated_results
END FUNCTION
```