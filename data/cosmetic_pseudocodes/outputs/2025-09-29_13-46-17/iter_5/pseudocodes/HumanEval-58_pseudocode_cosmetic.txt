```
FUNCTION common(list1, list2)
  VAR accumulator = {}
  VAR i = 0

  FUNCTION inner_loop(value, idx, collected)
    IF idx >= LENGTH(list2)
      RETURN collected
    IF NOT (value = list2[idx])
      RETURN inner_loop(value, idx + 1, collected)
    VAR updated = UNION(collected, {value})
    RETURN inner_loop(value, idx + 1, updated)
  END FUNCTION

  WHILE i < LENGTH(list1)
    accumulator = inner_loop(list1[i], 0, accumulator)
    i = i + 1
  END WHILE

  VAR result_array = []
  FOR key IN accumulator
    result_array = APPEND(result_array, key)
  END FOR

  FUNCTION merge_sort(arr)
    IF LENGTH(arr) <= 1
      RETURN arr
    VAR mid = LENGTH(arr) DIV 2
    VAR left = SLICE(arr, 0, mid)
    VAR right = SLICE(arr, mid, LENGTH(arr))
    VAR sorted_left = merge_sort(left)
    VAR sorted_right = merge_sort(right)

    VAR merged = []
    VAR l_idx = 0
    VAR r_idx = 0
    WHILE l_idx < LENGTH(sorted_left) AND r_idx < LENGTH(sorted_right)
      IF sorted_left[l_idx] < sorted_right[r_idx]
        merged = APPEND(merged, sorted_left[l_idx])
        l_idx = l_idx + 1
      ELSE
        merged = APPEND(merged, sorted_right[r_idx])
        r_idx = r_idx + 1
    END WHILE

    WHILE l_idx < LENGTH(sorted_left)
      merged = APPEND(merged, sorted_left[l_idx])
      l_idx = l_idx + 1
    END WHILE

    WHILE r_idx < LENGTH(sorted_right)
      merged = APPEND(merged, sorted_right[r_idx])
      r_idx = r_idx + 1
    END WHILE

    RETURN merged
  END FUNCTION

  RETURN merge_sort(result_array)
END FUNCTION
```