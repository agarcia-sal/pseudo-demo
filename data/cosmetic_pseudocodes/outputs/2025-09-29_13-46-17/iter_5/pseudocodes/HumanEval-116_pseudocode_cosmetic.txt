```
FUNCTION sort_array(listAlpha)
  FUNCTION bitCount(nBeta)
    SET counterXi TO 0
    SET tempO TO nBeta
    WHILE tempO > 0
      SET counterXi TO counterXi + (tempO MOD 2)
      SET tempO TO tempO DIV 2
    END WHILE
    RETURN counterXi
  END FUNCTION

  FUNCTION recursiveSort(lDelta, idxEpsilon, accZeta)
    IF idxEpsilon = LENGTH(lDelta)
      RETURN accZeta
    END IF
    SET currentElem TO lDelta[idxEpsilon]
    SET positionTheta TO 0
    WHILE positionTheta < LENGTH(accZeta) AND
          (bitCount(accZeta[positionTheta]) < bitCount(currentElem) OR
           (bitCount(accZeta[positionTheta]) = bitCount(currentElem) AND accZeta[positionTheta] < currentElem))
      INCREMENT positionTheta BY 1
    END WHILE
    SET newAcc TO accZeta[0:positionTheta] + [currentElem] + accZeta[positionTheta:]
    RETURN recursiveSort(lDelta, idxEpsilon + 1, newAcc)
  END FUNCTION

  FUNCTION ascendingSort(arrN)
    IF LENGTH(arrN) < 2 THEN
      RETURN arrN
    END IF
    SET midPi TO LENGTH(arrN) DIV 2
    SET leftSigma TO ascendingSort(arrN[0:midPi])
    SET rightTau TO ascendingSort(arrN[midPi:])
    SET mergedOmega TO []
    WHILE LENGTH(leftSigma) > 0 OR LENGTH(rightTau) > 0
      IF LENGTH(rightTau) = 0 OR (LENGTH(leftSigma) > 0 AND leftSigma[0] <= rightTau[0])
        SET mergedOmega TO mergedOmega + [leftSigma[0]]
        SET leftSigma TO leftSigma[1:]
      ELSE
        SET mergedOmega TO mergedOmega + [rightTau[0]]
        SET rightTau TO rightTau[1:]
      END IF
    END WHILE
    RETURN mergedOmega
  END FUNCTION

  SET sortedLinear TO ascendingSort(listAlpha)
  RETURN recursiveSort(sortedLinear, 0, [])
END FUNCTION
```