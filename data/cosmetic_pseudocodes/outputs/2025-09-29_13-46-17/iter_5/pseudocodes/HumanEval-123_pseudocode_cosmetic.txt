```
FUNCTION get_odd_collatz(m)
  DEFINE accumulateOdds(accumulator, current)
    IF current <= 1 THEN
      RETURN accumulator
    ELSE
      LET nextValue = (current % 2 = 0) ? (current / 2) : (current * 3 + 1)
      LET updatedAcc = (nextValue % 2 <> 0) ? accumulator + [INT(nextValue)] : accumulator
      RETURN accumulateOdds(updatedAcc, nextValue)
    ENDIF
  ENDDEFINE

  LET startList = (m MOD 2 <> 0) ? [m] : []
  LET collectedOdds = accumulateOdds(startList, m)
  
  LET outputSorted = collectedOdds[0 : LENGTH(collectedOdds)] 
  FOR i FROM 0 TO LENGTH(collectedOdds)-2
    FOR j FROM i+1 TO LENGTH(collectedOdds)-1
      IF outputSorted[j] < outputSorted[i] THEN
        LET temp = outputSorted[j]
        outputSorted[j] = outputSorted[i]
        outputSorted[i] = temp
      ENDIF
    ENDFOR
  ENDFOR

  RETURN outputSorted
END FUNCTION
```